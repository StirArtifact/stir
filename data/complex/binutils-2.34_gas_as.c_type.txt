struct	O
defsym_list	O
{	O
struct	O
defsym_list	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
char	O
*	O
name	*(char)
;	O
valueT	O
value	long
;	O
}	O
;	O
int	O
listing	O
;	O
enum	O
debug_info_type	O
debug_type	O
=	O
DEBUG_UNSPECIFIED	O
;	O
int	O
use_gnu_debug_info_extensions	O
=	O
0	int
;	O
static	O
enum	O
debug_info_type	O
(	O
*	O
md_debug_format_selector	O
)	O
(	O
int	O
*	O
)	O
=	O
MD_DEBUG_FORMAT_SELECTOR	O
;	O
int	O
max_macro_nest	O
=	O
100	int
;	O
static	O
char	O
*	O
myname	O
;	O
int	O
chunksize	O
=	O
0	int
;	O
int	O
debug_memory	O
=	O
0	int
;	O
int	O
verbose	O
=	O
0	int
;	O
int	O
flag_dwarf_cie_version	O
=	O
-	O
1	int
;	O
int	O
flag_use_elf_stt_common	O
=	O
DEFAULT_GENERATE_ELF_STT_COMMON	O
;	O
bfd_boolean	int
flag_generate_build_notes	O
=	O
DEFAULT_GENERATE_BUILD_NOTES	O
;	O
static	O
int	O
keep_it	O
=	O
0	int
;	O
segT	O
reg_section	O
;	O
segT	O
expr_section	O
;	O
segT	O
text_section	O
;	O
segT	O
data_section	O
;	O
segT	O
bss_section	O
;	O
static	O
char	O
*	O
listing_filename	O
=	O
NULL	O
;	O
static	O
struct	O
defsym_list	O
*	O
defsyms	O
;	O
static	O
long	O
start_time	O
;	O
static	O
int	O
flag_macro_alternate	O
;	O
void	O
print_version_id	O
(	O
void	O
)	O
{	O
static	O
int	O
printed	O
;	O
if	O
(	O
printed	O
)	O
return	O
;	O
printed	O
=	O
1	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"GNU assembler version %s (%s) using BFD version %s\n"	*(char)
)	O
,	O
VERSION	O
,	O
TARGET_ALIAS	O
,	O
BFD_VERSION_STRING	O
)	O
;	O
}	O
enum	O
compressed_debug_section_type	enum(int,int,int,int)
flag_compress_debug	O
=	O
COMPRESS_DEBUG_GABI_ZLIB	int
;	O
static	O
void	O
show_usage	O
(	O
FILE	struct
*	O
stream	*(void)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"Usage: %s [option...] [asmfile...]\n"	*(char)
)	O
,	O
myname	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"Options:\n  -a[sub-option...]	  turn on listings\n                      	  Sub-options [default hls]:\n                      	  c      omit false conditionals\n                      	  d      omit debugging directives\n                      	  g      include general info\n                      	  h      include high-level source\n                      	  l      include assembly\n                      	  m      include macro expansions\n                      	  n      omit forms processing\n                      	  s      include symbols\n                      	  =FILE  list to FILE (must be last sub-option)\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --alternate             initially turn on alternate macro syntax\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --compress-debug-sections[={none|zlib|zlib-gnu|zlib-gabi}]\n                          compress DWARF debug sections using zlib [default]\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --nocompress-debug-sections\n                          don't compress DWARF debug sections\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -D                      produce assembler debugging messages\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --debug-prefix-map OLD=NEW\n                          map OLD to NEW in debug information\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --defsym SYM=VAL        define symbol SYM to given value\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --execstack             require executable stack for this object\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --noexecstack           don't require executable stack for this object\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --size-check=[error|warning]\n			  ELF .size directive check (default --size-check=error)\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --elf-stt-common=[no|yes] "	*(char)
)	O
)	O
;	O
if	O
(	O
DEFAULT_GENERATE_ELF_STT_COMMON	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"(default: yes)\n"	*(char)
)	O
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"(default: no)\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"                          generate ELF common symbols with STT_COMMON type\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --sectname-subst        enable section name substitution sequences\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --generate-missing-build-notes=[no|yes] "	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"(default: no)\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"                          generate GNU Build notes if none are present in the input\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -f                      skip whitespace and comment preprocessing\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -g --gen-debug          generate debugging information\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --gstabs                generate STABS debugging information\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --gstabs+               generate STABS debug info with GNU extensions\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --gdwarf-2              generate DWARF2 debugging information\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --gdwarf-sections       generate per-function section names for DWARF line information\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --hash-size=<value>     set the hash table size close to <value>\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --help                  show this message and exit\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --target-help           show target specific options\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -I DIR                  add DIR to search list for .include directives\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -J                      don't warn about signed overflow\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -K                      warn when differences altered for long displacements\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -L,--keep-locals        keep local symbols (e.g. starting with `L')\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -M,--mri                assemble in MRI compatibility mode\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --MD FILE               write dependency information in FILE (default none)\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -nocpp                  ignored\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -no-pad-sections        do not pad the end of sections to alignment boundaries\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -o OBJFILE              name the object-file output OBJFILE (default a.out)\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -R                      fold data section into text section\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --reduce-memory-overheads \n                          prefer smaller memory use at the cost of longer\n                          assembly times\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --statistics            print various measured statistics from execution\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --strip-local-absolute  strip local absolute symbols\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --traditional-format    Use same format as native assembler when possible\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --version               print assembler version number and exit\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -W  --no-warn           suppress warnings\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --warn                  don't suppress warnings\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --fatal-warnings        treat warnings as errors\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -w                      ignored\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -X                      ignored\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  -Z                      generate object file even after errors\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --listing-lhs-width     set the width in words of the output data column of\n                          the listing\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --listing-lhs-width2    set the width in words of the continuation lines\n                          of the output data column; ignored if smaller than\n                          the width of the first line\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --listing-rhs-width     set the max width in characters of the lines from\n                          the source file\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  --listing-cont-lines    set the maximum number of continuation lines used\n                          for the output data column of the listing\n"	*(char)
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"  @FILE                   read options from FILE\n"	*(char)
)	O
)	O
;	O
md_show_usage	O
(	O
stream	*(void)
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stream	*(void)
)	O
;	O
if	O
(	O
REPORT_BUGS_TO	O
[	O
0	int
]	O
&&	O
stream	*(void)
==	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stream	*(void)
,	O
_	O
(	O
"Report bugs to %s\n"	*(char)
)	O
,	O
REPORT_BUGS_TO	O
)	O
;	O
}	O
static	O
void	O
parse_args	O
(	O
int	O
*	O
pargc	O
,	O
char	O
*	O
*	O
*	O
pargv	O
)	O
{	O
int	O
old_argc	O
;	O
int	O
new_argc	O
;	O
char	O
*	O
*	O
old_argv	O
;	O
char	O
*	O
*	O
new_argv	O
;	O
char	O
*	O
shortopts	*(char)
;	O
extern	O
const	O
char	O
*	O
md_shortopts	O
;	O
static	O
const	O
char	O
std_shortopts	O
[	O
]	O
=	O
{	O
'-'	O
,	O
'J'	O
,	O
'L'	O
,	O
'M'	O
,	O
'R'	O
,	O
'W'	O
,	O
'Z'	O
,	O
'a'	O
,	O
':'	O
,	O
':'	O
,	O
'D'	O
,	O
'f'	O
,	O
'g'	O
,	O
':'	O
,	O
':'	O
,	O
'I'	O
,	O
':'	O
,	O
'o'	O
,	O
':'	O
,	O
'v'	O
,	O
'w'	O
,	O
'X'	O
,	O
'\0'	O
}	O
;	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
longopts	*(struct(*(char),int,*(int),int))
;	O
extern	O
struct	O
option	struct(*(char),int,*(int),int)
md_longopts	O
[	O
]	O
;	O
extern	O
size_t	long
md_longopts_size	O
;	O
enum	O
option_values	O
{	O
OPTION_HELP	O
=	O
OPTION_STD_BASE	O
,	O
OPTION_NOCPP	O
,	O
OPTION_STATISTICS	O
,	O
OPTION_VERSION	O
,	O
OPTION_DUMPCONFIG	O
,	O
OPTION_VERBOSE	O
,	O
OPTION_EMULATION	O
,	O
OPTION_DEBUG_PREFIX_MAP	O
,	O
OPTION_DEFSYM	O
,	O
OPTION_LISTING_LHS_WIDTH	O
,	O
OPTION_LISTING_LHS_WIDTH2	O
,	O
OPTION_LISTING_RHS_WIDTH	O
,	O
OPTION_LISTING_CONT_LINES	O
,	O
OPTION_DEPFILE	O
,	O
OPTION_GSTABS	O
,	O
OPTION_GSTABS_PLUS	O
,	O
OPTION_GDWARF2	O
,	O
OPTION_GDWARF_SECTIONS	O
,	O
OPTION_GDWARF_CIE_VERSION	O
,	O
OPTION_STRIP_LOCAL_ABSOLUTE	O
,	O
OPTION_TRADITIONAL_FORMAT	O
,	O
OPTION_WARN	O
,	O
OPTION_TARGET_HELP	O
,	O
OPTION_EXECSTACK	O
,	O
OPTION_NOEXECSTACK	O
,	O
OPTION_SIZE_CHECK	O
,	O
OPTION_ELF_STT_COMMON	O
,	O
OPTION_ELF_BUILD_NOTES	O
,	O
OPTION_SECTNAME_SUBST	O
,	O
OPTION_ALTERNATE	O
,	O
OPTION_AL	O
,	O
OPTION_HASH_TABLE_SIZE	O
,	O
OPTION_REDUCE_MEMORY_OVERHEADS	O
,	O
OPTION_WARN_FATAL	O
,	O
OPTION_COMPRESS_DEBUG	O
,	O
OPTION_NOCOMPRESS_DEBUG	O
,	O
OPTION_NO_PAD_SECTIONS	O
}	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
std_longopts	O
[	O
]	O
=	O
{	O
{	O
"alternate"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_ALTERNATE	O
}	O
,	O
{	O
"a"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"al"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
OPTION_AL	O
}	O
,	O
{	O
"compress-debug-sections"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
OPTION_COMPRESS_DEBUG	O
}	O
,	O
{	O
"nocompress-debug-sections"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_NOCOMPRESS_DEBUG	O
}	O
,	O
{	O
"debug-prefix-map"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_DEBUG_PREFIX_MAP	O
}	O
,	O
{	O
"defsym"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_DEFSYM	O
}	O
,	O
{	O
"dump-config"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_DUMPCONFIG	O
}	O
,	O
{	O
"emulation"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_EMULATION	O
}	O
,	O
{	O
"execstack"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_EXECSTACK	O
}	O
,	O
{	O
"noexecstack"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_NOEXECSTACK	O
}	O
,	O
{	O
"size-check"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_SIZE_CHECK	O
}	O
,	O
{	O
"elf-stt-common"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_ELF_STT_COMMON	O
}	O
,	O
{	O
"sectname-subst"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_SECTNAME_SUBST	O
}	O
,	O
{	O
"generate-missing-build-notes"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_ELF_BUILD_NOTES	O
}	O
,	O
{	O
"fatal-warnings"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_WARN_FATAL	O
}	O
,	O
{	O
"gdwarf-2"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_GDWARF2	O
}	O
,	O
{	O
"gdwarf2"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_GDWARF2	O
}	O
,	O
{	O
"gdwarf-sections"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_GDWARF_SECTIONS	O
}	O
,	O
{	O
"gdwarf-cie-version"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_GDWARF_CIE_VERSION	O
}	O
,	O
{	O
"gen-debug"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'g'	O
}	O
,	O
{	O
"gstabs"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_GSTABS	O
}	O
,	O
{	O
"gstabs+"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_GSTABS_PLUS	O
}	O
,	O
{	O
"hash-size"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_HASH_TABLE_SIZE	O
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_HELP	O
}	O
,	O
{	O
"keep-locals"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'L'	O
}	O
,	O
{	O
"keep-locals"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'L'	O
}	O
,	O
{	O
"listing-lhs-width"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_LISTING_LHS_WIDTH	O
}	O
,	O
{	O
"listing-lhs-width2"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_LISTING_LHS_WIDTH2	O
}	O
,	O
{	O
"listing-rhs-width"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_LISTING_RHS_WIDTH	O
}	O
,	O
{	O
"listing-cont-lines"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_LISTING_CONT_LINES	O
}	O
,	O
{	O
"MD"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
OPTION_DEPFILE	O
}	O
,	O
{	O
"mri"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'M'	O
}	O
,	O
{	O
"nocpp"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_NOCPP	O
}	O
,	O
{	O
"no-pad-sections"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_NO_PAD_SECTIONS	O
}	O
,	O
{	O
"no-warn"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'W'	O
}	O
,	O
{	O
"reduce-memory-overheads"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_REDUCE_MEMORY_OVERHEADS	O
}	O
,	O
{	O
"statistics"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_STATISTICS	O
}	O
,	O
{	O
"strip-local-absolute"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_STRIP_LOCAL_ABSOLUTE	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_VERSION	O
}	O
,	O
{	O
"verbose"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_VERBOSE	O
}	O
,	O
{	O
"target-help"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_TARGET_HELP	O
}	O
,	O
{	O
"traditional-format"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_TRADITIONAL_FORMAT	O
}	O
,	O
{	O
"warn"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
OPTION_WARN	O
}	O
}	O
;	O
shortopts	*(char)
=	O
concat	O
(	O
std_shortopts	O
,	O
md_shortopts	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
longopts	*(struct(*(char),int,*(int),int))
=	O
(	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
)	O
xmalloc	O
(	O
sizeof	O
(	O
std_longopts	O
)	O
+	O
md_longopts_size	O
+	O
sizeof	O
(	O
struct	O
option	struct(*(char),int,*(int),int)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
longopts	*(struct(*(char),int,*(int),int))
,	O
std_longopts	O
,	O
sizeof	O
(	O
std_longopts	O
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
(	O
char	O
*	O
)	O
longopts	*(struct(*(char),int,*(int),int))
)	O
+	O
sizeof	O
(	O
std_longopts	O
)	O
,	O
md_longopts	O
,	O
md_longopts_size	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
(	O
char	O
*	O
)	O
longopts	*(struct(*(char),int,*(int),int))
)	O
+	O
sizeof	O
(	O
std_longopts	O
)	O
+	O
md_longopts_size	O
,	O
0	int
,	O
sizeof	O
(	O
struct	O
option	struct(*(char),int,*(int),int)
)	O
)	O
;	O
old_argc	O
=	O
*	O
pargc	O
;	O
old_argv	O
=	O
*	O
pargv	O
;	O
new_argv	O
=	O
XNEWVEC	O
(	O
char	O
*	O
,	O
old_argc	O
+	O
1	int
)	O
;	O
new_argv	O
[	O
0	int
]	O
=	O
old_argv	O
[	O
0	int
]	O
;	O
new_argc	O
=	O
1	int
;	O
new_argv	O
[	O
new_argc	O
]	O
=	O
NULL	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
longind	*(int)
;	O
int	O
optc	O
=	O
getopt_long_only	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
old_argc	O
,	O
old_argv	O
,	O
shortopts	*(char)
,	O
longopts	*(struct(*(char),int,*(int),int))
,	O
&	O
longind	*(int)
)	O
;	O
if	O
(	O
optc	O
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
optc	O
)	O
{	O
default	O
:	O
if	O
(	O
md_parse_option	O
(	O
optc	O
,	O
optarg	*(char)
)	O
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
optc	O
==	O
'v'	O
)	O
{	O
case	O
'v'	O
:	O
case	O
OPTION_VERBOSE	O
:	O
print_version_id	O
(	O
)	O
;	O
verbose	O
=	O
1	int
;	O
break	O
;	O
}	O
else	O
as_bad	O
(	O
_	O
(	O
"unrecognized option -%c%s"	*(char)
)	O
,	O
optc	O
,	O
optarg	*(char)
?	O
optarg	*(char)
:	O
""	*(char)
)	O
;	O
case	O
'?'	O
:	O
exit	(int)->(void)
(	O
EXIT_FAILURE	O
)	O
;	O
case	O
1	int
:	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"-"	*(char)
)	O
)	O
optarg	*(char)
=	O
(	O
char	O
*	O
)	O
""	*(char)
;	O
new_argv	O
[	O
new_argc	O
++	O
]	O
=	O
optarg	*(char)
;	O
new_argv	O
[	O
new_argc	O
]	O
=	O
NULL	O
;	O
break	O
;	O
case	O
OPTION_TARGET_HELP	O
:	O
md_show_usage	O
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
case	O
OPTION_HELP	O
:	O
show_usage	O
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
case	O
OPTION_NOCPP	O
:	O
break	O
;	O
case	O
OPTION_NO_PAD_SECTIONS	O
:	O
do_not_pad_sections_to_alignment	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_STATISTICS	O
:	O
flag_print_statistics	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_STRIP_LOCAL_ABSOLUTE	O
:	O
flag_strip_local_absolute	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_TRADITIONAL_FORMAT	O
:	O
flag_traditional_format	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_VERSION	O
:	O
printf	(*(char))->(int)
(	O
_	O
(	O
"GNU assembler %s\n"	*(char)
)	O
,	O
BFD_VERSION_STRING	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) 2020 Free Software Foundation, Inc.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"This program is free software; you may redistribute it under the terms of\nthe GNU General Public License version 3 or later.\nThis program has absolutely no warranty.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"This assembler was configured for a target of `%s'.\n"	*(char)
)	O
,	O
TARGET_ALIAS	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
case	O
OPTION_EMULATION	O
:	O
as_fatal	O
(	O
_	O
(	O
"emulations not handled in this configuration"	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
OPTION_DUMPCONFIG	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"alias = %s\n"	*(char)
)	O
,	O
TARGET_ALIAS	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"canonical = %s\n"	*(char)
)	O
,	O
TARGET_CANONICAL	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"cpu-type = %s\n"	*(char)
)	O
,	O
TARGET_CPU	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"bfd-target = %s\n"	*(char)
)	O
,	O
TARGET_FORMAT	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
case	O
OPTION_COMPRESS_DEBUG	O
:	O
if	O
(	O
optarg	*(char)
)	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
flag_compress_debug	O
=	O
COMPRESS_DEBUG_NONE	int
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"zlib"	*(char)
)	O
==	O
0	int
)	O
flag_compress_debug	O
=	O
COMPRESS_DEBUG_GABI_ZLIB	int
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"zlib-gnu"	*(char)
)	O
==	O
0	int
)	O
flag_compress_debug	O
=	O
COMPRESS_DEBUG_GNU_ZLIB	int
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"zlib-gabi"	*(char)
)	O
==	O
0	int
)	O
flag_compress_debug	O
=	O
COMPRESS_DEBUG_GABI_ZLIB	int
;	O
else	O
as_fatal	O
(	O
_	O
(	O
"Invalid --compress-debug-sections option: `%s'"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
}	O
else	O
flag_compress_debug	O
=	O
COMPRESS_DEBUG_GABI_ZLIB	int
;	O
break	O
;	O
case	O
OPTION_NOCOMPRESS_DEBUG	O
:	O
flag_compress_debug	O
=	O
COMPRESS_DEBUG_NONE	int
;	O
break	O
;	O
case	O
OPTION_DEBUG_PREFIX_MAP	O
:	O
add_debug_prefix_map	O
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
OPTION_DEFSYM	O
:	O
{	O
char	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
;	O
valueT	O
i	*(struct)
;	O
struct	O
defsym_list	O
*	O
n	O
;	O
for	O
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
=	O
optarg	*(char)
;	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
!=	O
'\0'	O
&&	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
!=	O
'='	O
;	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
++	O
)	O
;	O
if	O
(	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
==	O
'\0'	O
)	O
as_fatal	O
(	O
_	O
(	O
"bad defsym; format is --defsym name=value"	*(char)
)	O
)	O
;	O
*	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
++	O
=	O
'\0'	O
;	O
i	*(struct)
=	O
bfd_scan_vma	(*(char),*(*(char)),int)->(long)
(	O
s	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct))))
,	O
(	O
const	O
char	O
*	O
*	O
)	O
NULL	O
,	O
0	int
)	O
;	O
n	O
=	O
XNEW	O
(	O
struct	O
defsym_list	O
)	O
;	O
n	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
defsyms	O
;	O
n	O
->	O
name	*(char)
=	O
optarg	*(char)
;	O
n	O
->	O
value	long
=	O
i	*(struct)
;	O
defsyms	O
=	O
n	O
;	O
}	O
break	O
;	O
case	O
OPTION_DEPFILE	O
:	O
start_dependencies	O
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'g'	O
:	O
if	O
(	O
old_argv	O
[	O
optind	int
-	O
1	int
]	O
[	O
1	int
]	O
==	O
'g'	O
&&	O
md_parse_option	O
(	O
optc	O
,	O
optarg	*(char)
)	O
)	O
continue	O
;	O
if	O
(	O
md_debug_format_selector	O
)	O
debug_type	O
=	O
md_debug_format_selector	O
(	O
&	O
use_gnu_debug_info_extensions	O
)	O
;	O
else	O
if	O
(	O
IS_ELF	O
)	O
debug_type	O
=	O
DEBUG_DWARF2	O
;	O
else	O
debug_type	O
=	O
DEBUG_STABS	O
;	O
break	O
;	O
case	O
OPTION_GSTABS_PLUS	O
:	O
use_gnu_debug_info_extensions	O
=	O
1	int
;	O
case	O
OPTION_GSTABS	O
:	O
debug_type	O
=	O
DEBUG_STABS	O
;	O
break	O
;	O
case	O
OPTION_GDWARF2	O
:	O
debug_type	O
=	O
DEBUG_DWARF2	O
;	O
break	O
;	O
case	O
OPTION_GDWARF_SECTIONS	O
:	O
flag_dwarf_sections	O
=	O
TRUE	int
;	O
break	O
;	O
case	O
OPTION_GDWARF_CIE_VERSION	O
:	O
flag_dwarf_cie_version	O
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
flag_dwarf_cie_version	O
<	O
1	int
||	O
flag_dwarf_cie_version	O
==	O
2	int
||	O
flag_dwarf_cie_version	O
>	O
4	int
)	O
as_fatal	O
(	O
_	O
(	O
"Invalid --gdwarf-cie-version `%s'"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'J'	O
:	O
flag_signed_overflow_ok	O
=	O
1	int
;	O
break	O
;	O
case	O
'L'	O
:	O
flag_keep_locals	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_LISTING_LHS_WIDTH	O
:	O
listing_lhs_width	O
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
listing_lhs_width_second	O
<	O
listing_lhs_width	O
)	O
listing_lhs_width_second	O
=	O
listing_lhs_width	O
;	O
break	O
;	O
case	O
OPTION_LISTING_LHS_WIDTH2	O
:	O
{	O
int	O
tmp	O
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
tmp	O
>	O
listing_lhs_width	O
)	O
listing_lhs_width_second	O
=	O
tmp	O
;	O
}	O
break	O
;	O
case	O
OPTION_LISTING_RHS_WIDTH	O
:	O
listing_rhs_width	O
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
OPTION_LISTING_CONT_LINES	O
:	O
listing_lhs_cont_lines	O
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
flag_mri	O
=	O
1	int
;	O
break	O
;	O
case	O
'R'	O
:	O
flag_readonly_data_in_text	O
=	O
1	int
;	O
break	O
;	O
case	O
'W'	O
:	O
flag_no_warnings	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_WARN	O
:	O
flag_no_warnings	O
=	O
0	int
;	O
flag_fatal_warnings	O
=	O
0	int
;	O
break	O
;	O
case	O
OPTION_WARN_FATAL	O
:	O
flag_no_warnings	O
=	O
0	int
;	O
flag_fatal_warnings	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_EXECSTACK	O
:	O
flag_execstack	O
=	O
1	int
;	O
flag_noexecstack	O
=	O
0	int
;	O
break	O
;	O
case	O
OPTION_NOEXECSTACK	O
:	O
flag_noexecstack	O
=	O
1	int
;	O
flag_execstack	O
=	O
0	int
;	O
break	O
;	O
case	O
OPTION_SIZE_CHECK	O
:	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"error"	*(char)
)	O
==	O
0	int
)	O
flag_allow_nonconst_size	O
=	O
FALSE	O
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"warning"	*(char)
)	O
==	O
0	int
)	O
flag_allow_nonconst_size	O
=	O
TRUE	int
;	O
else	O
as_fatal	O
(	O
_	O
(	O
"Invalid --size-check= option: `%s'"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
OPTION_ELF_STT_COMMON	O
:	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"no"	*(char)
)	O
==	O
0	int
)	O
flag_use_elf_stt_common	O
=	O
0	int
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"yes"	*(char)
)	O
==	O
0	int
)	O
flag_use_elf_stt_common	O
=	O
1	int
;	O
else	O
as_fatal	O
(	O
_	O
(	O
"Invalid --elf-stt-common= option: `%s'"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
OPTION_SECTNAME_SUBST	O
:	O
flag_sectname_subst	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_ELF_BUILD_NOTES	O
:	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"no"	*(char)
)	O
==	O
0	int
)	O
flag_generate_build_notes	O
=	O
FALSE	O
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"yes"	*(char)
)	O
==	O
0	int
)	O
flag_generate_build_notes	O
=	O
TRUE	int
;	O
else	O
as_fatal	O
(	O
_	O
(	O
"Invalid --generate-missing-build-notes option: `%s'"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
flag_always_generate_output	O
=	O
1	int
;	O
break	O
;	O
case	O
OPTION_AL	O
:	O
listing	O
|=	O
LISTING_LISTING	O
;	O
if	O
(	O
optarg	*(char)
)	O
listing_filename	O
=	O
xstrdup	O
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
OPTION_ALTERNATE	O
:	O
optarg	*(char)
=	O
old_argv	O
[	O
optind	int
-	O
1	int
]	O
;	O
while	O
(	O
*	O
optarg	*(char)
==	O
'-'	O
)	O
optarg	*(char)
++	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"alternate"	*(char)
)	O
==	O
0	int
)	O
{	O
flag_macro_alternate	O
=	O
1	int
;	O
break	O
;	O
}	O
optarg	*(char)
++	O
;	O
case	O
'a'	O
:	O
if	O
(	O
optarg	*(char)
)	O
{	O
if	O
(	O
optarg	*(char)
!=	O
old_argv	O
[	O
optind	int
]	O
&&	O
optarg	*(char)
[	O
-	O
1	int
]	O
==	O
'='	O
)	O
--	O
optarg	*(char)
;	O
if	O
(	O
md_parse_option	O
(	O
optc	O
,	O
optarg	*(char)
)	O
!=	O
0	int
)	O
break	O
;	O
while	O
(	O
*	O
optarg	*(char)
)	O
{	O
switch	O
(	O
*	O
optarg	*(char)
)	O
{	O
case	O
'c'	O
:	O
listing	O
|=	O
LISTING_NOCOND	O
;	O
break	O
;	O
case	O
'd'	O
:	O
listing	O
|=	O
LISTING_NODEBUG	O
;	O
break	O
;	O
case	O
'g'	O
:	O
listing	O
|=	O
LISTING_GENERAL	O
;	O
break	O
;	O
case	O
'h'	O
:	O
listing	O
|=	O
LISTING_HLL	O
;	O
break	O
;	O
case	O
'l'	O
:	O
listing	O
|=	O
LISTING_LISTING	O
;	O
break	O
;	O
case	O
'm'	O
:	O
listing	O
|=	O
LISTING_MACEXP	O
;	O
break	O
;	O
case	O
'n'	O
:	O
listing	O
|=	O
LISTING_NOFORM	O
;	O
break	O
;	O
case	O
's'	O
:	O
listing	O
|=	O
LISTING_SYMBOLS	O
;	O
break	O
;	O
case	O
'='	O
:	O
listing_filename	O
=	O
xstrdup	O
(	O
optarg	*(char)
+	O
1	int
)	O
;	O
optarg	*(char)
+=	O
strlen	(*(char))->(long)
(	O
listing_filename	O
)	O
;	O
break	O
;	O
default	O
:	O
as_fatal	O
(	O
_	O
(	O
"invalid listing option `%c'"	*(char)
)	O
,	O
*	O
optarg	*(char)
)	O
;	O
break	O
;	O
}	O
optarg	*(char)
++	O
;	O
}	O
}	O
if	O
(	O
!	O
listing	O
)	O
listing	O
=	O
LISTING_DEFAULT	O
;	O
break	O
;	O
case	O
'D'	O
:	O
flag_debug	O
=	O
1	int
;	O
break	O
;	O
case	O
'f'	O
:	O
flag_no_comments	O
=	O
1	int
;	O
break	O
;	O
case	O
'I'	O
:	O
{	O
char	O
*	O
temp	O
=	O
xstrdup	O
(	O
optarg	*(char)
)	O
;	O
add_include_dir	O
(	O
temp	O
)	O
;	O
break	O
;	O
}	O
case	O
'o'	O
:	O
out_file_name	O
=	O
xstrdup	O
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
break	O
;	O
case	O
'X'	O
:	O
break	O
;	O
case	O
OPTION_REDUCE_MEMORY_OVERHEADS	O
:	O
set_gas_hash_table_size	O
(	O
4051	int
)	O
;	O
break	O
;	O
case	O
OPTION_HASH_TABLE_SIZE	O
:	O
{	O
unsigned	O
long	O
new_size	O
;	O
new_size	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
new_size	O
)	O
set_gas_hash_table_size	O
(	O
new_size	O
)	O
;	O
else	O
as_fatal	O
(	O
_	O
(	O
"--hash-size needs a numeric argument"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
free	(*(void))->(void)
(	O
shortopts	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
longopts	*(struct(*(char),int,*(int),int))
)	O
;	O
*	O
pargc	O
=	O
new_argc	O
;	O
*	O
pargv	O
=	O
new_argv	O
;	O
}	O
static	O
void	O
dump_statistics	O
(	O
void	O
)	O
{	O
long	O
run_time	O
=	O
get_run_time	O
(	O
)	O
-	O
start_time	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: total time in assembly: %ld.%06ld\n"	*(char)
)	O
,	O
myname	O
,	O
run_time	O
/	O
1000000	int
,	O
run_time	O
%	O
1000000	int
)	O
;	O
subsegs_print_statistics	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
write_print_statistics	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
symbol_print_statistics	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
read_print_statistics	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
tc_print_statistics	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
close_output_file	O
(	O
void	O
)	O
{	O
output_file_close	O
(	O
out_file_name	O
)	O
;	O
if	O
(	O
!	O
keep_it	O
)	O
unlink_if_ordinary	O
(	O
out_file_name	O
)	O
;	O
}	O
static	O
size_t	long
macro_expr	O
(	O
const	O
char	O
*	O
emsg	O
,	O
size_t	long
idx	O
,	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
*	O
in	O
,	O
offsetT	O
*	O
val	int
)	O
{	O
expressionS	O
ex	O
;	O
sb_terminate	O
(	O
in	O
)	O
;	O
temp_ilp	O
(	O
in	O
->	O
ptr	*(*(char))
+	O
idx	O
)	O
;	O
expression_and_evaluate	O
(	O
&	O
ex	O
)	O
;	O
idx	O
=	O
input_line_pointer	O
-	O
in	O
->	O
ptr	*(*(char))
;	O
restore_ilp	O
(	O
)	O
;	O
if	O
(	O
ex	O
.	O
X_op	O
!=	O
O_constant	O
)	O
as_bad	O
(	O
"%s"	*(char)
,	O
emsg	O
)	O
;	O
*	O
val	int
=	O
ex	O
.	O
X_add_number	O
;	O
return	O
idx	O
;	O
}	O
static	O
void	O
perform_an_assembly_pass	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
saw_a_file	O
=	O
0	int
;	O
flagword	int
applicable	O
;	O
need_pass_2	O
=	O
0	int
;	O
text_section	O
=	O
subseg_new	O
(	O
TEXT_SECTION_NAME	O
,	O
0	int
)	O
;	O
data_section	O
=	O
subseg_new	O
(	O
DATA_SECTION_NAME	O
,	O
0	int
)	O
;	O
bss_section	O
=	O
subseg_new	O
(	O
BSS_SECTION_NAME	O
,	O
0	int
)	O
;	O
applicable	O
=	O
bfd_applicable_section_flags	O
(	O
stdoutput	O
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
text_section	O
,	O
applicable	O
&	O
(	O
SEC_ALLOC	O
|	O
SEC_LOAD	O
|	O
SEC_RELOC	O
|	O
SEC_CODE	O
|	O
SEC_READONLY	O
)	O
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
data_section	O
,	O
applicable	O
&	O
(	O
SEC_ALLOC	O
|	O
SEC_LOAD	O
|	O
SEC_RELOC	O
|	O
SEC_DATA	O
)	O
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
bss_section	O
,	O
applicable	O
&	O
SEC_ALLOC	O
)	O
;	O
seg_info	O
(	O
bss_section	O
)	O
->	O
bss	O
=	O
1	int
;	O
subseg_new	O
(	O
BFD_ABS_SECTION_NAME	O
,	O
0	int
)	O
;	O
subseg_new	O
(	O
BFD_UND_SECTION_NAME	O
,	O
0	int
)	O
;	O
reg_section	O
=	O
subseg_new	O
(	O
"*GAS `reg' section*"	*(char)
,	O
0	int
)	O
;	O
expr_section	O
=	O
subseg_new	O
(	O
"*GAS `expr' section*"	*(char)
,	O
0	int
)	O
;	O
subseg_set	O
(	O
text_section	O
,	O
0	int
)	O
;	O
md_begin	O
(	O
)	O
;	O
obj_begin	O
(	O
)	O
;	O
argv	*(*(char))
++	O
;	O
argc	int
--	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
if	O
(	O
*	O
argv	*(*(char))
)	O
{	O
PROGRESS	O
(	O
1	int
)	O
;	O
saw_a_file	O
++	O
;	O
read_a_source_file	O
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
argv	*(*(char))
++	O
;	O
}	O
if	O
(	O
!	O
saw_a_file	O
)	O
read_a_source_file	O
(	O
""	*(char)
)	O
;	O
}	O
int	O
main	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
*	O
argv_orig	O
=	O
argv	*(*(char))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sob	O
;	O
int	O
macro_strip_at	O
;	O
start_time	O
=	O
get_run_time	O
(	O
)	O
;	O
signal_init	O
(	O
)	O
;	O
setlocale	O
(	O
LC_MESSAGES	O
,	O
""	*(char)
)	O
;	O
setlocale	O
(	O
LC_CTYPE	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	O
(	O
PACKAGE	O
,	O
LOCALEDIR	O
)	O
;	O
textdomain	O
(	O
PACKAGE	O
)	O
;	O
if	O
(	O
debug_memory	O
)	O
chunksize	O
=	O
64	int
;	O
myname	O
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
xmalloc_set_program_name	O
(	O
myname	O
)	O
;	O
expandargv	O
(	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
START_PROGRESS	O
(	O
myname	O
,	O
0	int
)	O
;	O
out_file_name	O
=	O
OBJ_DEFAULT_OUTPUT_FILE_NAME	O
;	O
hex_init	O
(	O
)	O
;	O
if	O
(	O
bfd_init	()->(int)
(	O
)	O
!=	O
BFD_INIT_MAGIC	O
)	O
as_fatal	O
(	O
_	O
(	O
"libbfd ABI mismatch"	*(char)
)	O
)	O
;	O
bfd_set_error_program_name	(*(char))->(void)
(	O
myname	O
)	O
;	O
PROGRESS	O
(	O
1	int
)	O
;	O
parse_args	O
(	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
if	O
(	O
argc	int
>	O
1	int
&&	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
out_file_name	O
,	O
&	O
sob	O
)	O
==	O
0	int
)	O
{	O
int	O
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
1	int
;	O
i	*(struct)
<	O
argc	int
;	O
++	O
i	*(struct)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sib	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
argv	*(*(char))
[	O
i	*(struct)
]	O
,	O
&	O
sib	O
)	O
==	O
0	int
&&	O
sib	O
.	O
st_ino	long
==	O
sob	O
.	O
st_ino	long
&&	O
sib	O
.	O
st_ino	long
!=	O
0	int
&&	O
sib	O
.	O
st_dev	long
==	O
sob	O
.	O
st_dev	long
)	O
{	O
const	O
char	O
*	O
saved_out_file_name	O
=	O
out_file_name	O
;	O
out_file_name	O
=	O
NULL	O
;	O
as_fatal	O
(	O
_	O
(	O
"The input '%s' and output '%s' files are the same"	*(char)
)	O
,	O
argv	*(*(char))
[	O
i	*(struct)
]	O
,	O
saved_out_file_name	O
)	O
;	O
}	O
}	O
}	O
symbol_begin	O
(	O
)	O
;	O
frag_init	O
(	O
)	O
;	O
subsegs_begin	O
(	O
)	O
;	O
read_begin	O
(	O
)	O
;	O
input_scrub_begin	O
(	O
)	O
;	O
expr_begin	O
(	O
)	O
;	O
xatexit	O
(	O
close_output_file	O
)	O
;	O
if	O
(	O
flag_print_statistics	O
)	O
xatexit	O
(	O
dump_statistics	O
)	O
;	O
macro_strip_at	O
=	O
0	int
;	O
macro_init	O
(	O
flag_macro_alternate	O
,	O
flag_mri	O
,	O
macro_strip_at	O
,	O
macro_expr	O
)	O
;	O
PROGRESS	O
(	O
1	int
)	O
;	O
output_file_create	O
(	O
out_file_name	O
)	O
;	O
gas_assert	O
(	O
stdoutput	O
!=	O
0	int
)	O
;	O
dot_symbol_init	O
(	O
)	O
;	O
itbl_init	O
(	O
)	O
;	O
dwarf2_init	O
(	O
)	O
;	O
local_symbol_make	O
(	O
".gasversion."	*(char)
,	O
absolute_section	O
,	O
BFD_VERSION	O
/	O
10000UL	int
,	O
&	O
predefined_address_frag	O
)	O
;	O
while	O
(	O
defsyms	O
!=	O
NULL	O
)	O
{	O
symbolS	O
*	O
sym	*(struct)
;	O
struct	O
defsym_list	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
sym	*(struct)
=	O
symbol_new	O
(	O
defsyms	O
->	O
name	*(char)
,	O
absolute_section	O
,	O
defsyms	O
->	O
value	long
,	O
&	O
zero_address_frag	O
)	O
;	O
S_SET_VOLATILE	O
(	O
sym	*(struct)
)	O
;	O
symbol_table_insert	O
(	O
sym	*(struct)
)	O
;	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
defsyms	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
free	(*(void))->(void)
(	O
defsyms	O
)	O
;	O
defsyms	O
=	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
PROGRESS	O
(	O
1	int
)	O
;	O
perform_an_assembly_pass	O
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
cond_finish_check	O
(	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
flag_execstack	O
||	O
flag_noexecstack	O
)	O
&&	O
OUTPUT_FLAVOR	O
==	O
bfd_target_elf_flavour	int
)	O
{	O
segT	O
gnustack	O
;	O
gnustack	O
=	O
subseg_new	O
(	O
".note.GNU-stack"	*(char)
,	O
0	int
)	O
;	O
bfd_set_section_flags	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
gnustack	O
,	O
SEC_READONLY	O
|	O
(	O
flag_execstack	O
?	O
SEC_CODE	O
:	O
0	int
)	O
)	O
;	O
}	O
dwarf2_finish	O
(	O
)	O
;	O
cfi_finish	O
(	O
)	O
;	O
keep_it	O
=	O
0	int
;	O
if	O
(	O
seen_at_least_1_file	O
(	O
)	O
)	O
{	O
int	O
n_warns	O
,	O
n_errs	O
;	O
char	O
warn_msg	O
[	O
50	int
]	O
;	O
char	O
err_msg	O
[	O
50	int
]	O
;	O
write_object_file	O
(	O
)	O
;	O
n_warns	O
=	O
had_warnings	O
(	O
)	O
;	O
n_errs	O
=	O
had_errors	O
(	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
warn_msg	O
,	O
ngettext	O
(	O
"%d warning"	*(char)
,	O
"%d warnings"	*(char)
,	O
n_warns	O
)	O
,	O
n_warns	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
err_msg	O
,	O
ngettext	O
(	O
"%d error"	*(char)
,	O
"%d errors"	*(char)
,	O
n_errs	O
)	O
,	O
n_errs	O
)	O
;	O
if	O
(	O
flag_fatal_warnings	O
&&	O
n_warns	O
!=	O
0	int
)	O
{	O
if	O
(	O
n_errs	O
==	O
0	int
)	O
as_bad	O
(	O
_	O
(	O
"%s, treating warnings as errors"	*(char)
)	O
,	O
warn_msg	O
)	O
;	O
n_errs	O
+=	O
n_warns	O
;	O
}	O
if	O
(	O
n_errs	O
==	O
0	int
)	O
keep_it	O
=	O
1	int
;	O
else	O
if	O
(	O
flag_always_generate_output	O
)	O
{	O
keep_it	O
=	O
1	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s, %s, generating bad object file\n"	*(char)
)	O
,	O
err_msg	O
,	O
warn_msg	O
)	O
;	O
}	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
listing_print	O
(	O
listing_filename	O
,	O
argv_orig	O
)	O
;	O
input_scrub_end	O
(	O
)	O
;	O
END_PROGRESS	O
(	O
myname	O
)	O
;	O
if	O
(	O
had_errors	O
(	O
)	O
!=	O
0	int
)	O
xexit	O
(	O
EXIT_FAILURE	O
)	O
;	O
print_dependencies	O
(	O
)	O
;	O
xexit	O
(	O
EXIT_SUCCESS	O
)	O
;	O
}	O
