static	O
int	O
cmp_addr	O
(	O
const	O
PTR	O
,	O
const	O
PTR	O
)	O
;	O
Sym_Table	O
symtab	O
;	O
void	O
sym_init	O
(	O
Sym	O
*	O
sym	*(struct)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
sym	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
*	O
sym	*(struct)
)	O
)	O
;	O
sym	*(struct)
->	O
hist	O
.	O
time	struct(long,long)
=	O
0.0	int
;	O
sym	*(struct)
->	O
cg	O
.	O
child_time	O
=	O
0.0	int
;	O
sym	*(struct)
->	O
cg	O
.	O
prop	O
.	O
fract	O
=	O
0.0	int
;	O
sym	*(struct)
->	O
cg	O
.	O
prop	O
.	O
self	O
=	O
0.0	int
;	O
sym	*(struct)
->	O
cg	O
.	O
prop	O
.	O
child	O
=	O
0.0	int
;	O
}	O
static	O
int	O
cmp_addr	O
(	O
const	O
PTR	O
lp	O
,	O
const	O
PTR	O
rp	O
)	O
{	O
const	O
Sym	O
*	O
left	O
=	O
(	O
const	O
Sym	O
*	O
)	O
lp	O
;	O
const	O
Sym	O
*	O
right	O
=	O
(	O
const	O
Sym	O
*	O
)	O
rp	O
;	O
if	O
(	O
left	O
->	O
addr	*(void)
>	O
right	O
->	O
addr	*(void)
)	O
return	O
1	int
;	O
else	O
if	O
(	O
left	O
->	O
addr	*(void)
<	O
right	O
->	O
addr	*(void)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
left	O
->	O
is_func	O
!=	O
right	O
->	O
is_func	O
)	O
return	O
right	O
->	O
is_func	O
-	O
left	O
->	O
is_func	O
;	O
return	O
left	O
->	O
is_static	O
-	O
right	O
->	O
is_static	O
;	O
}	O
void	O
symtab_finalize	O
(	O
Sym_Table	O
*	O
tab	O
)	O
{	O
Sym	O
*	O
src	O
,	O
*	O
dst	O
;	O
bfd_vma	long
prev_addr	O
;	O
if	O
(	O
!	O
tab	O
->	O
len	long
)	O
return	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
tab	O
->	O
base	int
,	O
tab	O
->	O
len	long
,	O
sizeof	O
(	O
Sym	O
)	O
,	O
cmp_addr	O
)	O
;	O
prev_addr	O
=	O
tab	O
->	O
base	int
[	O
0	int
]	O
.	O
addr	*(void)
-	O
1	int
;	O
for	O
(	O
src	O
=	O
dst	O
=	O
tab	O
->	O
base	int
;	O
src	O
<	O
tab	O
->	O
limit	O
;	O
++	O
src	O
)	O
{	O
if	O
(	O
src	O
->	O
addr	*(void)
==	O
prev_addr	O
)	O
{	O
if	O
(	O
(	O
!	O
src	O
->	O
is_static	O
&&	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_static	O
)	O
||	O
(	O
(	O
src	O
->	O
is_static	O
==	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_static	O
)	O
&&	O
(	O
(	O
src	O
->	O
is_func	O
&&	O
!	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_func	O
)	O
||	O
(	O
(	O
src	O
->	O
is_func	O
==	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_func	O
)	O
&&	O
(	O
(	O
src	O
->	O
name	*(char)
[	O
0	int
]	O
!=	O
'_'	O
&&	O
dst	O
[	O
-	O
1	int
]	O
.	O
name	*(char)
[	O
0	int
]	O
==	O
'_'	O
)	O
||	O
(	O
src	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
'_'	O
&&	O
dst	O
[	O
-	O
1	int
]	O
.	O
name	*(char)
[	O
0	int
]	O
==	O
'_'	O
&&	O
src	O
->	O
name	*(char)
[	O
1	int
]	O
!=	O
'_'	O
&&	O
dst	O
[	O
-	O
1	int
]	O
.	O
name	*(char)
[	O
1	int
]	O
==	O
'_'	O
)	O
)	O
)	O
)	O
)	O
)	O
{	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[symtab_finalize] favor %s@%c%c over %s@%c%c"	*(char)
,	O
src	O
->	O
name	*(char)
,	O
src	O
->	O
is_static	O
?	O
't'	O
:	O
'T'	O
,	O
src	O
->	O
is_func	O
?	O
'F'	O
:	O
'f'	O
,	O
dst	O
[	O
-	O
1	int
]	O
.	O
name	*(char)
,	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_static	O
?	O
't'	O
:	O
'T'	O
,	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_func	O
?	O
'F'	O
:	O
'f'	O
)	O
;	O
printf	(*(char))->(int)
(	O
" (addr=%lx)\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
src	O
->	O
addr	*(void)
)	O
)	O
;	O
dst	O
[	O
-	O
1	int
]	O
=	O
*	O
src	O
;	O
}	O
else	O
{	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[symtab_finalize] favor %s@%c%c over %s@%c%c"	*(char)
,	O
dst	O
[	O
-	O
1	int
]	O
.	O
name	*(char)
,	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_static	O
?	O
't'	O
:	O
'T'	O
,	O
dst	O
[	O
-	O
1	int
]	O
.	O
is_func	O
?	O
'F'	O
:	O
'f'	O
,	O
src	O
->	O
name	*(char)
,	O
src	O
->	O
is_static	O
?	O
't'	O
:	O
'T'	O
,	O
src	O
->	O
is_func	O
?	O
'F'	O
:	O
'f'	O
)	O
;	O
printf	(*(char))->(int)
(	O
" (addr=%lx)\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
src	O
->	O
addr	*(void)
)	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
dst	O
>	O
tab	O
->	O
base	int
&&	O
dst	O
[	O
-	O
1	int
]	O
.	O
end_addr	O
==	O
0	int
)	O
dst	O
[	O
-	O
1	int
]	O
.	O
end_addr	O
=	O
src	O
->	O
addr	*(void)
-	O
1	int
;	O
if	O
(	O
!	O
src	O
->	O
end_addr	O
||	O
src	O
->	O
addr	*(void)
<=	O
src	O
->	O
end_addr	O
)	O
{	O
*	O
dst	O
=	O
*	O
src	O
;	O
dst	O
++	O
;	O
prev_addr	O
=	O
src	O
->	O
addr	*(void)
;	O
}	O
}	O
}	O
if	O
(	O
tab	O
->	O
len	long
>	O
0	int
&&	O
dst	O
[	O
-	O
1	int
]	O
.	O
end_addr	O
==	O
0	int
)	O
dst	O
[	O
-	O
1	int
]	O
.	O
end_addr	O
=	O
core_text_sect	O
->	O
vma	long
+	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
core_text_sect	O
)	O
-	O
1	int
;	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[symtab_finalize]: removed %d duplicate entries\n"	*(char)
,	O
tab	O
->	O
len	long
-	O
(	O
int	O
)	O
(	O
dst	O
-	O
tab	O
->	O
base	int
)	O
)	O
)	O
;	O
tab	O
->	O
limit	O
=	O
dst	O
;	O
tab	O
->	O
len	long
=	O
tab	O
->	O
limit	O
-	O
tab	O
->	O
base	int
;	O
DBG	O
(	O
AOUTDEBUG	O
|	O
IDDEBUG	O
,	O
unsigned	O
int	O
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
tab	O
->	O
len	long
;	O
++	O
j	O
)	O
{	O
printf	(*(char))->(int)
(	O
"[symtab_finalize] 0x%lx-0x%lx\t%s\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
tab	O
->	O
base	int
[	O
j	O
]	O
.	O
addr	*(void)
,	O
(	O
unsigned	O
long	O
)	O
tab	O
->	O
base	int
[	O
j	O
]	O
.	O
end_addr	O
,	O
tab	O
->	O
base	int
[	O
j	O
]	O
.	O
name	*(char)
)	O
;	O
}	O
)	O
;	O
}	O
Sym	O
*	O
dbg_sym_lookup	O
(	O
Sym_Table	O
*	O
sym_tab	O
,	O
bfd_vma	long
address	long
)	O
{	O
unsigned	O
long	O
low	O
,	O
mid	O
,	O
high	O
;	O
Sym	O
*	O
sym	*(struct)
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[dbg_sym_lookup] address 0x%lx\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
address	long
)	O
;	O
sym	*(struct)
=	O
sym_tab	O
->	O
base	int
;	O
for	O
(	O
low	O
=	O
0	int
,	O
high	O
=	O
sym_tab	O
->	O
len	long
-	O
1	int
;	O
low	O
!=	O
high	O
;	O
)	O
{	O
mid	O
=	O
(	O
high	O
+	O
low	O
)	O
>>	O
1	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[dbg_sym_lookup] low=0x%lx, mid=0x%lx, high=0x%lx\n"	*(char)
,	O
low	O
,	O
mid	O
,	O
high	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[dbg_sym_lookup] sym[m]=0x%lx sym[m + 1]=0x%lx\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
sym	*(struct)
[	O
mid	O
]	O
.	O
addr	*(void)
,	O
(	O
unsigned	O
long	O
)	O
sym	*(struct)
[	O
mid	O
+	O
1	int
]	O
.	O
addr	*(void)
)	O
;	O
if	O
(	O
sym	*(struct)
[	O
mid	O
]	O
.	O
addr	*(void)
<=	O
address	long
&&	O
sym	*(struct)
[	O
mid	O
+	O
1	int
]	O
.	O
addr	*(void)
>	O
address	long
)	O
return	O
&	O
sym	*(struct)
[	O
mid	O
]	O
;	O
if	O
(	O
sym	*(struct)
[	O
mid	O
]	O
.	O
addr	*(void)
>	O
address	long
)	O
high	O
=	O
mid	O
;	O
else	O
low	O
=	O
mid	O
+	O
1	int
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[dbg_sym_lookup] binary search fails???\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
Sym	O
*	O
sym_lookup	O
(	O
Sym_Table	O
*	O
sym_tab	O
,	O
bfd_vma	long
address	long
)	O
{	O
long	O
low	O
,	O
high	O
;	O
long	O
mid	O
=	O
-	O
1	int
;	O
Sym	O
*	O
sym	*(struct)
;	O
int	O
probes	O
=	O
0	int
;	O
if	O
(	O
!	O
sym_tab	O
->	O
len	long
)	O
return	O
0	int
;	O
sym	*(struct)
=	O
sym_tab	O
->	O
base	int
;	O
for	O
(	O
low	O
=	O
0	int
,	O
high	O
=	O
sym_tab	O
->	O
len	long
-	O
1	int
;	O
low	O
!=	O
high	O
;	O
)	O
{	O
DBG	O
(	O
LOOKUPDEBUG	O
,	O
++	O
probes	O
)	O
;	O
mid	O
=	O
(	O
high	O
+	O
low	O
)	O
/	O
2	int
;	O
if	O
(	O
sym	*(struct)
[	O
mid	O
]	O
.	O
addr	*(void)
<=	O
address	long
&&	O
sym	*(struct)
[	O
mid	O
+	O
1	int
]	O
.	O
addr	*(void)
>	O
address	long
)	O
{	O
if	O
(	O
address	long
>	O
sym	*(struct)
[	O
mid	O
]	O
.	O
end_addr	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
DBG	O
(	O
LOOKUPDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[sym_lookup] %d probes (symtab->len=%u)\n"	*(char)
,	O
probes	O
,	O
sym_tab	O
->	O
len	long
-	O
1	int
)	O
)	O
;	O
return	O
&	O
sym	*(struct)
[	O
mid	O
]	O
;	O
}	O
}	O
if	O
(	O
sym	*(struct)
[	O
mid	O
]	O
.	O
addr	*(void)
>	O
address	long
)	O
high	O
=	O
mid	O
;	O
else	O
low	O
=	O
mid	O
+	O
1	int
;	O
}	O
if	O
(	O
sym	*(struct)
[	O
mid	O
+	O
1	int
]	O
.	O
addr	*(void)
<=	O
address	long
)	O
{	O
if	O
(	O
address	long
>	O
sym	*(struct)
[	O
mid	O
+	O
1	int
]	O
.	O
end_addr	O
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
DBG	O
(	O
LOOKUPDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[sym_lookup] %d (%u) probes, fall off\n"	*(char)
,	O
probes	O
,	O
sym_tab	O
->	O
len	long
-	O
1	int
)	O
)	O
;	O
return	O
&	O
sym	*(struct)
[	O
mid	O
+	O
1	int
]	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
