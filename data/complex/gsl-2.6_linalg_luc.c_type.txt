static	O
int	O
LU_decomp_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
static	O
int	O
LU_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
static	O
int	O
singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
apply_pivots	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
int	O
gsl_linalg_complex_LU_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
int	O
*	O
signum	*(int)
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
p	int
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size1"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
const	O
size_t	long
minMN	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
=	O
gsl_vector_uint_alloc	(long)->(*(struct(long,long,*(int),*(struct(long,*`)),int)))
(	O
minMN	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
AL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M	int
,	O
minMN	long
)	O
;	O
size_t	long
i	long
;	O
status	int
=	O
LU_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
&	O
AL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
AR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
M	int
,	O
M	int
,	O
N	int
-	O
M	int
)	O
;	O
apply_pivots	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
&	O
AR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
gsl_blas_ztrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
AL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
AR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_permutation_init	(*(struct(long,*(long))))->(void)
(	O
p	int
)	O
;	O
*	O
signum	*(int)
=	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
minMN	long
;	O
++	O
i	long
)	O
{	O
unsigned	O
int	O
pivi	int
=	O
gsl_vector_uint_get	(*(struct(long,long,*(int),*(struct(long,*`)),int)),long)->(int)
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
,	O
i	long
)	O
;	O
if	O
(	O
p	int
->	O
data	*(long double)
[	O
pivi	int
]	O
!=	O
p	int
->	O
data	*(long double)
[	O
i	long
]	O
)	O
{	O
size_t	long
tmp	long
=	O
p	int
->	O
data	*(long double)
[	O
pivi	int
]	O
;	O
p	int
->	O
data	*(long double)
[	O
pivi	int
]	O
=	O
p	int
->	O
data	*(long double)
[	O
i	long
]	O
;	O
p	int
->	O
data	*(long double)
[	O
i	long
]	O
=	O
tmp	long
;	O
*	O
signum	*(int)
=	O
-	O
(	O
*	O
signum	*(int)
)	O
;	O
}	O
}	O
gsl_vector_uint_free	(*(struct(long,long,*(int),*(struct(long,*`)),int)))->(void)
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
return	O
status	int
;	O
}	O
}	O
static	O
int	O
LU_decomp_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
const	O
size_t	long
minMN	long
=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
;	O
if	O
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
->	O
size	long
!=	O
minMN	long
)	O
{	O
GSL_ERROR	O
(	O
"ipiv length must equal MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
,	O
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
minMN	long
;	O
++	O
j	long
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
,	O
M	int
-	O
j	long
)	O
;	O
size_t	long
j_pivot	long
=	O
j	long
+	O
gsl_blas_izamax	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector_uint_set	(*(struct(long,long,*(int),*(struct(long,*`)),int)),long,int)->(void)
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
,	O
j	long
,	O
j_pivot	long
)	O
;	O
if	O
(	O
j_pivot	long
!=	O
j	long
)	O
{	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j_pivot	long
)	O
;	O
gsl_blas_zswap	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
if	O
(	O
j	long
<	O
M	int
-	O
1	int
)	O
{	O
gsl_complex	struct(array(double))
Ajj	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
Ajjinv	struct(array(double))
=	O
gsl_complex_inverse	(struct(array(double)))->(struct(array(double)))
(	O
Ajj	struct(array(double))
)	O
;	O
if	O
(	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
Ajj	struct(array(double))
)	O
>=	O
GSL_DBL_MIN	int
)	O
{	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
+	O
1	int
,	O
M	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_zscal	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
Ajjinv	struct(array(double))
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
M	int
-	O
j	long
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
*	O
ptr	*(struct(array(double)))
=	O
gsl_matrix_complex_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(struct(array(double))))
(	O
A	*(float)
,	O
j	long
+	O
i	long
,	O
j	long
)	O
;	O
*	O
ptr	*(struct(array(double)))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
*	O
ptr	*(struct(array(double)))
,	O
Ajjinv	struct(array(double))
)	O
;	O
}	O
}	O
}	O
if	O
(	O
j	long
<	O
minMN	long
-	O
1	int
)	O
{	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
+	O
1	int
,	O
j	long
+	O
1	int
,	O
M	int
-	O
j	long
-	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
+	O
1	int
,	O
M	int
-	O
j	long
-	O
1	int
)	O
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_zgeru	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
LU_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix must have M >= N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
->	O
size	long
!=	O
GSL_MIN	O
(	O
M	int
,	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"ipiv length must equal MIN(M,N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_LU	O
)	O
{	O
return	O
LU_decomp_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
const	O
size_t	long
M2	long
=	O
M	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
0	int
,	O
M2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
M2	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
AL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M	int
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
AR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N1	long
,	O
M	int
,	O
N2	long
)	O
;	O
gsl_vector_uint_view	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
ipiv1	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
=	O
gsl_vector_uint_subvector	(*(struct(long,long,*(int),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(int),*(struct(long,*`)),int)))
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
,	O
0	int
,	O
N1	long
)	O
;	O
gsl_vector_uint_view	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
ipiv2	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
=	O
gsl_vector_uint_subvector	(*(struct(long,long,*(int),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(int),*(struct(long,*`)),int)))
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
,	O
N1	long
,	O
N2	long
)	O
;	O
size_t	long
i	long
;	O
status	int
=	O
LU_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
&	O
AL	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ipiv1	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
apply_pivots	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
&	O
AR	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ipiv1	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zgemm	(enum(int,int,int),enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
LU_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ipiv2	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
apply_pivots	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ipiv2	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N2	long
;	O
++	O
i	long
)	O
{	O
unsigned	O
int	O
*	O
ptr	*(struct(array(double)))
=	O
gsl_vector_uint_ptr	(*(struct(long,long,*(int),*(struct(long,*`)),int)),long)->(*(int))
(	O
&	O
ipiv2	struct(struct(long,long,*(int),*(struct(long,*(int))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
*	O
ptr	*(struct(array(double)))
+=	O
N1	long
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
)	O
{	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_complex_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
b	double
)	O
;	O
status	int
=	O
gsl_linalg_complex_LU_svx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p	int
,	O
x	double
)	O
;	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_svx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
)	O
{	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution/rhs size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
gsl_permute_vector_complex	(*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
p	int
,	O
x	double
)	O
;	O
gsl_blas_ztrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
gsl_blas_ztrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_refine	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	double
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix a must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be decomposition of a"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
b	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
x	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match workspace size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
gsl_vector_complex_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
b	double
)	O
;	O
{	O
gsl_complex	struct(array(double))
one	struct(array(double))
=	O
GSL_COMPLEX_ONE	O
;	O
gsl_complex	struct(array(double))
negone	struct(array(double))
=	O
GSL_COMPLEX_NEGONE	O
;	O
gsl_blas_zgemv	(enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
one	struct(array(double))
,	O
A	*(float)
,	O
x	double
,	O
negone	struct(array(double))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
status	int
=	O
gsl_linalg_complex_LU_svx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p	int
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
{	O
gsl_complex	struct(array(double))
negone	struct(array(double))
=	O
GSL_COMPLEX_NEGONE	O
;	O
gsl_blas_zaxpy	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
negone	struct(array(double))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
}	O
return	O
status	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
p	int
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
inverse	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
inverse	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
inverse	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"inverse matrix must match LU matrix dimensions"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_complex_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
inverse	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
gsl_linalg_complex_LU_invx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))->(int)
(	O
inverse	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
p	int
)	O
;	O
}	O
}	O
int	O
gsl_linalg_complex_LU_invx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_permutation	struct(long,*(long))
*	O
p	int
)	O
{	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"LU matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
p	int
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"permutation length must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix is singular"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N	int
=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
size_t	long
i	long
;	O
status	int
=	O
gsl_linalg_complex_tri_invert	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_complex_tri_invert	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_complex_tri_UL	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_permute_vector_complex_inverse	(*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
p	int
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
gsl_complex	struct(array(double))
gsl_linalg_complex_LU_det	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(struct(array(double)))
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
signum	*(int)
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
gsl_complex	struct(array(double))
det	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
(	O
double	O
)	O
signum	*(int)
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
zi	struct(array(double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
det	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
det	struct(array(double))
,	O
zi	struct(array(double))
)	O
;	O
}	O
return	O
det	struct(array(double))
;	O
}	O
double	O
gsl_linalg_complex_LU_lndet	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
double	O
lndet	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
z	double
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
lndet	double
+=	O
log	(double)->(double)
(	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
z	double
)	O
)	O
;	O
}	O
return	O
lndet	double
;	O
}	O
gsl_complex	struct(array(double))
gsl_linalg_complex_LU_sgndet	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(struct(array(double)))
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
signum	*(int)
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
gsl_complex	struct(array(double))
phase	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
(	O
double	O
)	O
signum	*(int)
,	O
0.0	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
z	double
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
double	O
r	double
=	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
z	double
)	O
;	O
if	O
(	O
r	double
==	O
0	int
)	O
{	O
phase	struct(array(double))
=	O
gsl_complex_rect	(double,double)->(struct(array(double)))
(	O
0.0	int
,	O
0.0	int
)	O
;	O
break	O
;	O
}	O
else	O
{	O
z	double
=	O
gsl_complex_div_real	(struct(array(double)),double)->(struct(array(double)))
(	O
z	double
,	O
r	double
)	O
;	O
phase	struct(array(double))
=	O
gsl_complex_mul	(struct(array(double)),struct(array(double)))->(struct(array(double)))
(	O
phase	struct(array(double))
,	O
z	double
)	O
;	O
}	O
}	O
return	O
phase	struct(array(double))
;	O
}	O
static	O
int	O
singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
size_t	long
i	long
,	O
n	int
=	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	int
;	O
i	long
++	O
)	O
{	O
gsl_complex	struct(array(double))
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
LU	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
GSL_REAL	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
==	O
0	int
&&	O
GSL_IMAG	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
apply_pivots	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(int),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_vector_uint	struct(long,long,*(int),*(struct(long,*(int))),int)
*	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
)	O
{	O
if	O
(	O
0	int
)	O
{	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
->	O
size	long
;	O
++	O
i	long
)	O
{	O
size_t	long
pi	long
=	O
gsl_vector_uint_get	(*(struct(long,long,*(int),*(struct(long,*`)),int)),long)->(int)
(	O
ipiv	*(struct(long,long,*(int),*(struct(long,*(int))),int))
,	O
i	long
)	O
;	O
if	O
(	O
i	long
!=	O
pi	long
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
pi	long
)	O
;	O
gsl_blas_zswap	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
