int	O
mu_list_gmap	(*(struct),*((*(*(void)),long,*(void))->(int)),long,*(void))->(int)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
mu_list_mapper_t	*((*(*(void)),long,*(void))->(int))
map	*((*(*(void)),long,*(void))->(int))
,	O
size_t	long
nelem	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
void	O
*	O
*	O
buf	*(*(void))
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
list	*(struct)
||	O
!	O
map	*((*(*(void)),long,*(void))->(int))
||	O
nelem	long
==	O
0	int
)	O
return	O
EINVAL	int
;	O
buf	*(*(void))
=	O
calloc	(long,long)->(*(void))
(	O
nelem	long
,	O
sizeof	O
(	O
buf	*(*(void))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
buf	*(*(void))
)	O
return	O
ENOMEM	int
;	O
i	long
=	O
0	int
;	O
rc	int
=	O
0	int
;	O
for	O
(	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
!=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
)	O
{	O
buf	*(*(void))
[	O
i	long
++	O
]	O
=	O
current	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
;	O
if	O
(	O
i	long
==	O
nelem	long
)	O
{	O
i	long
=	O
0	int
;	O
rc	int
=	O
map	*((*(*(void)),long,*(void))->(int))
(	O
buf	*(*(void))
,	O
nelem	long
,	O
data	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
i	long
>	O
0	int
&&	O
i	long
<	O
nelem	long
)	O
rc	int
=	O
map	*((*(*(void)),long,*(void))->(int))
(	O
buf	*(*(void))
,	O
i	long
,	O
data	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(*(void))
)	O
;	O
return	O
rc	int
;	O
}	O
