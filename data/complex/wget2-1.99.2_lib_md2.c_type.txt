static	O
void	O
md2_update_chksum	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
md	*(struct(array(char),array(char),array(char),long))
)	O
;	O
static	O
void	O
md2_compress	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
md	*(struct(array(char),array(char),array(char),long))
)	O
;	O
void	O
md2_init_ctx	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
,	O
0	int
,	O
sizeof	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
chksum	array(char)
,	O
0	int
,	O
sizeof	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
chksum	array(char)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
,	O
0	int
,	O
sizeof	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
)	O
)	O
;	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
=	O
0	int
;	O
}	O
void	O
*	O
md2_read_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
(	O
const	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
,	O
void	O
*	O
resbuf	*(void)
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
resbuf	*(void)
,	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
,	O
16	int
)	O
;	O
return	O
resbuf	*(void)
;	O
}	O
void	O
*	O
md2_finish_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
,	O
void	O
*	O
resbuf	*(void)
)	O
{	O
unsigned	O
long	O
i	long
,	O
k	long
;	O
k	long
=	O
16	int
-	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
;	O
for	O
(	O
i	long
=	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
;	O
i	long
<	O
16	int
;	O
i	long
++	O
)	O
{	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
[	O
i	long
]	O
=	O
(	O
unsigned	O
char	O
)	O
k	long
;	O
}	O
md2_compress	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
md2_update_chksum	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
,	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
chksum	array(char)
,	O
16	int
)	O
;	O
md2_compress	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
return	O
md2_read_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
(	O
ctx	*(struct(array(char),array(char),array(char),long))
,	O
resbuf	*(void)
)	O
;	O
}	O
int	O
md2_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(void))->(int)
(	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
void	O
*	O
resblock	*(void)
)	O
{	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
ctx	*(struct(array(char),array(char),array(char),long))
;	O
size_t	long
sum	long
;	O
char	O
*	O
buffer	*(void)
=	O
malloc	(long)->(*(void))
(	O
BLOCKSIZE	int
+	O
72	int
)	O
;	O
if	O
(	O
!	O
buffer	*(void)
)	O
return	O
1	int
;	O
md2_init_ctx	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
while	O
(	O
1	int
)	O
{	O
size_t	long
n	long
;	O
sum	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
n	long
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buffer	*(void)
+	O
sum	long
,	O
1	int
,	O
BLOCKSIZE	int
-	O
sum	long
,	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
sum	long
+=	O
n	long
;	O
if	O
(	O
sum	long
==	O
BLOCKSIZE	int
)	O
break	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
free	(*(void))->(void)
(	O
buffer	*(void)
)	O
;	O
return	O
1	int
;	O
}	O
goto	O
process_partial_block	O
;	O
}	O
if	O
(	O
feof	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
goto	O
process_partial_block	O
;	O
}	O
md2_process_block	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
(	O
buffer	*(void)
,	O
BLOCKSIZE	int
,	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
}	O
process_partial_block	O
:	O
;	O
if	O
(	O
sum	long
>	O
0	int
)	O
md2_process_bytes	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
(	O
buffer	*(void)
,	O
sum	long
,	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
md2_finish_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
(	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
,	O
resblock	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
*	O
md2_buffer	(*(char),long,*(void))->(*(void))
(	O
const	O
char	O
*	O
buffer	*(void)
,	O
size_t	long
len	long
,	O
void	O
*	O
resblock	*(void)
)	O
{	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
ctx	*(struct(array(char),array(char),array(char),long))
;	O
md2_init_ctx	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
md2_process_block	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
(	O
buffer	*(void)
,	O
len	long
,	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
return	O
md2_finish_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
(	O
&	O
ctx	*(struct(array(char),array(char),array(char),long))
,	O
resblock	*(void)
)	O
;	O
}	O
void	O
md2_process_bytes	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
(	O
const	O
void	O
*	O
buffer	*(void)
,	O
size_t	long
len	long
,	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
{	O
const	O
char	O
*	O
in	*(char)
=	O
buffer	*(void)
;	O
unsigned	O
long	O
n	long
;	O
while	O
(	O
len	long
>	O
0	int
)	O
{	O
n	long
=	O
MIN	O
(	O
len	long
,	O
(	O
16	int
-	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
+	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
,	O
in	*(char)
,	O
(	O
size_t	long
)	O
n	long
)	O
;	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
+=	O
n	long
;	O
in	*(char)
+=	O
n	long
;	O
len	long
-=	O
n	long
;	O
if	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
==	O
16	int
)	O
{	O
md2_compress	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
md2_update_chksum	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
curlen	long
=	O
0	int
;	O
}	O
}	O
}	O
static	O
const	O
unsigned	O
char	O
PI_SUBST	array(char)
[	O
256	int
]	O
=	O
{	O
41	int
,	O
46	int
,	O
67	int
,	O
201	int
,	O
162	int
,	O
216	int
,	O
124	int
,	O
1	int
,	O
61	int
,	O
54	int
,	O
84	int
,	O
161	int
,	O
236	int
,	O
240	int
,	O
6	int
,	O
19	int
,	O
98	int
,	O
167	int
,	O
5	int
,	O
243	int
,	O
192	int
,	O
199	int
,	O
115	int
,	O
140	int
,	O
152	int
,	O
147	int
,	O
43	int
,	O
217	int
,	O
188	int
,	O
76	int
,	O
130	int
,	O
202	int
,	O
30	int
,	O
155	int
,	O
87	int
,	O
60	int
,	O
253	int
,	O
212	int
,	O
224	int
,	O
22	int
,	O
103	int
,	O
66	int
,	O
111	int
,	O
24	int
,	O
138	int
,	O
23	int
,	O
229	int
,	O
18	int
,	O
190	int
,	O
78	int
,	O
196	int
,	O
214	int
,	O
218	int
,	O
158	int
,	O
222	int
,	O
73	int
,	O
160	int
,	O
251	int
,	O
245	int
,	O
142	int
,	O
187	int
,	O
47	int
,	O
238	int
,	O
122	int
,	O
169	int
,	O
104	int
,	O
121	int
,	O
145	int
,	O
21	int
,	O
178	int
,	O
7	int
,	O
63	int
,	O
148	int
,	O
194	int
,	O
16	int
,	O
137	int
,	O
11	int
,	O
34	int
,	O
95	int
,	O
33	int
,	O
128	int
,	O
127	int
,	O
93	int
,	O
154	int
,	O
90	int
,	O
144	int
,	O
50	int
,	O
39	int
,	O
53	int
,	O
62	int
,	O
204	int
,	O
231	int
,	O
191	int
,	O
247	int
,	O
151	int
,	O
3	int
,	O
255	int
,	O
25	int
,	O
48	int
,	O
179	int
,	O
72	int
,	O
165	int
,	O
181	int
,	O
209	int
,	O
215	int
,	O
94	int
,	O
146	int
,	O
42	int
,	O
172	int
,	O
86	int
,	O
170	int
,	O
198	int
,	O
79	int
,	O
184	int
,	O
56	int
,	O
210	int
,	O
150	int
,	O
164	int
,	O
125	int
,	O
182	int
,	O
118	int
,	O
252	int
,	O
107	int
,	O
226	int
,	O
156	int
,	O
116	int
,	O
4	int
,	O
241	int
,	O
69	int
,	O
157	int
,	O
112	int
,	O
89	int
,	O
100	int
,	O
113	int
,	O
135	int
,	O
32	int
,	O
134	int
,	O
91	int
,	O
207	int
,	O
101	int
,	O
230	int
,	O
45	int
,	O
168	int
,	O
2	int
,	O
27	int
,	O
96	int
,	O
37	int
,	O
173	int
,	O
174	int
,	O
176	int
,	O
185	int
,	O
246	int
,	O
28	int
,	O
70	int
,	O
97	int
,	O
105	int
,	O
52	int
,	O
64	int
,	O
126	int
,	O
15	int
,	O
85	int
,	O
71	int
,	O
163	int
,	O
35	int
,	O
221	int
,	O
81	int
,	O
175	int
,	O
58	int
,	O
195	int
,	O
92	int
,	O
249	int
,	O
206	int
,	O
186	int
,	O
197	int
,	O
234	int
,	O
38	int
,	O
44	int
,	O
83	int
,	O
13	int
,	O
110	int
,	O
133	int
,	O
40	int
,	O
132	int
,	O
9	int
,	O
211	int
,	O
223	int
,	O
205	int
,	O
244	int
,	O
65	int
,	O
129	int
,	O
77	int
,	O
82	int
,	O
106	int
,	O
220	int
,	O
55	int
,	O
200	int
,	O
108	int
,	O
193	int
,	O
171	int
,	O
250	int
,	O
36	int
,	O
225	int
,	O
123	int
,	O
8	int
,	O
12	int
,	O
189	int
,	O
177	int
,	O
74	int
,	O
120	int
,	O
136	int
,	O
149	int
,	O
139	int
,	O
227	int
,	O
99	int
,	O
232	int
,	O
109	int
,	O
233	int
,	O
203	int
,	O
213	int
,	O
254	int
,	O
59	int
,	O
0	int
,	O
29	int
,	O
57	int
,	O
242	int
,	O
239	int
,	O
183	int
,	O
14	int
,	O
102	int
,	O
88	int
,	O
208	int
,	O
228	int
,	O
166	int
,	O
119	int
,	O
114	int
,	O
248	int
,	O
235	int
,	O
117	int
,	O
75	int
,	O
10	int
,	O
49	int
,	O
68	int
,	O
80	int
,	O
180	int
,	O
143	int
,	O
237	int
,	O
31	int
,	O
26	int
,	O
219	int
,	O
153	int
,	O
141	int
,	O
51	int
,	O
159	int
,	O
17	int
,	O
131	int
,	O
20	int
}	O
;	O
static	O
void	O
md2_update_chksum	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
{	O
int	O
j	int
;	O
unsigned	O
char	O
L	char
;	O
L	char
=	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
chksum	array(char)
[	O
15	int
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
16	int
;	O
j	int
++	O
)	O
{	O
L	char
=	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
chksum	array(char)
[	O
j	int
]	O
^=	O
PI_SUBST	array(char)
[	O
(	O
int	O
)	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
[	O
j	int
]	O
^	O
L	char
)	O
]	O
&	O
255	int
)	O
;	O
}	O
}	O
static	O
void	O
md2_compress	(*(struct(array(char),array(char),array(char),long)))->(void)
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
{	O
size_t	long
j	int
,	O
k	long
;	O
unsigned	O
char	O
t	char
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
16	int
;	O
j	int
++	O
)	O
{	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
[	O
16	int
+	O
j	int
]	O
=	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
buf	array(char)
[	O
j	int
]	O
;	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
[	O
32	int
+	O
j	int
]	O
=	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
[	O
j	int
]	O
^	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
[	O
16	int
+	O
j	int
]	O
;	O
}	O
t	char
=	O
(	O
unsigned	O
char	O
)	O
0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
18	int
;	O
j	int
++	O
)	O
{	O
for	O
(	O
k	long
=	O
0	int
;	O
k	long
<	O
48	int
;	O
k	long
++	O
)	O
{	O
t	char
=	O
(	O
ctx	*(struct(array(char),array(char),array(char),long))
->	O
X	array(char)
[	O
k	long
]	O
^=	O
PI_SUBST	array(char)
[	O
(	O
int	O
)	O
(	O
t	char
&	O
255	int
)	O
]	O
)	O
;	O
}	O
t	char
=	O
(	O
t	char
+	O
(	O
unsigned	O
char	O
)	O
j	int
)	O
&	O
255	int
;	O
}	O
}	O
void	O
md2_process_block	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
(	O
const	O
void	O
*	O
buffer	*(void)
,	O
size_t	long
len	long
,	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
*	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
{	O
md2_process_bytes	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
(	O
buffer	*(void)
,	O
len	long
,	O
ctx	*(struct(array(char),array(char),array(char),long))
)	O
;	O
}	O
