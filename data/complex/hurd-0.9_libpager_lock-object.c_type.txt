void	O
_pager_lock_object	(*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*`,*`,int,int,int,int,int)),*(struct(*`,*`,int,int,int,int)),int,int,int,int,int,int,int,*(short),int)),int,int,int,int,int,int)->(void)
(	O
struct	O
pager	struct(struct,*(struct),enum(int,int,int),int,int,*(struct),*(struct),int,int,int,int,int,int,int,*(short),int)
*	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
,	O
vm_offset_t	int
offset	int
,	O
vm_size_t	int
size	int
,	O
int	O
should_return	int
,	O
int	O
should_flush	int
,	O
vm_prot_t	int
lock_value	int
,	O
int	O
sync	int
)	O
{	O
int	O
i	int
;	O
struct	O
lock_request	struct(*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int)),*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int))),int,int,int,int,int)
*	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
=	O
0	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
interlock	int
)	O
;	O
if	O
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
pager_state	enum(int,int,int)
!=	O
NORMAL	int
)	O
{	O
pthread_mutex_unlock	()->(int)
(	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
interlock	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
sync	int
)	O
{	O
for	O
(	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
=	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
lock_requests	*(struct)
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
=	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
)	O
if	O
(	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
start	int
==	O
offset	int
&&	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
end	int
==	O
offset	int
+	O
size	int
)	O
{	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
locks_pending	int
++	O
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
threads_waiting	int
++	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
)	O
{	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
lock_request	struct(*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int)),*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int))),int,int,int,int,int)
)	O
)	O
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
start	int
=	O
offset	int
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
end	int
=	O
offset	int
+	O
size	int
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
pending_writes	int
=	O
0	int
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
locks_pending	int
=	O
1	int
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
threads_waiting	int
=	O
1	int
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
=	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
lock_requests	*(struct)
;	O
if	O
(	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
)	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
prevp	*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int)))
=	O
&	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
;	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
prevp	*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int)))
=	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
lock_requests	*(struct)
;	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
lock_requests	*(struct)
=	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
;	O
}	O
}	O
pthread_mutex_unlock	()->(int)
(	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
interlock	int
)	O
;	O
memory_object_lock_request	()->(int)
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
memobjcntl	int
,	O
offset	int
,	O
size	int
,	O
should_return	int
,	O
should_flush	int
,	O
lock_value	int
,	O
sync	int
?	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
port	struct
.	O
port_right	O
:	O
MACH_PORT_NULL	O
)	O
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
interlock	int
)	O
;	O
if	O
(	O
sync	int
)	O
{	O
while	O
(	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
locks_pending	int
||	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
pending_writes	int
)	O
pthread_cond_wait	()->(int)
(	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
wakeup	int
,	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
interlock	int
)	O
;	O
if	O
(	O
!	O
--	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
threads_waiting	int
)	O
{	O
*	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
prevp	*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int)))
=	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
;	O
if	O
(	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
)	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
prevp	*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int)))
=	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
->	O
prevp	*(*(struct(*(struct(*`,*`,int,int,int,int,int)),*(*(struct`)),int,int,int,int,int)))
;	O
free	()->(int)
(	O
lr	*(struct(*(struct(*(struct`),*(*`),int,int,int,int,int)),*(*(struct(*`,*`,int,int,int,int,int))),int,int,int,int,int))
)	O
;	O
}	O
if	O
(	O
should_flush	int
)	O
{	O
vm_offset_t	int
pm_offs	O
=	O
offset	int
/	O
__vm_page_size	O
;	O
_pager_pagemap_resize	(*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*`,*`,int,int,int,int,int)),*(struct(*`,*`,int,int,int,int)),int,int,int,int,int,int,int,*(short),int)),int)->(int)
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
,	O
offset	int
+	O
size	int
)	O
;	O
if	O
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
pagemapsize	int
>	O
pm_offs	O
)	O
{	O
short	O
*	O
pm_entries	*(short)
=	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
pagemap	*(short)
[	O
pm_offs	O
]	O
;	O
vm_offset_t	int
bound	O
=	O
size	int
/	O
vm_page_size	O
;	O
if	O
(	O
bound	O
>	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
pagemapsize	int
)	O
bound	O
=	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
pagemapsize	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
bound	O
;	O
i	int
++	O
)	O
pm_entries	*(short)
[	O
i	int
]	O
&=	O
~	O
PM_INCORE	int
;	O
}	O
}	O
}	O
pthread_mutex_unlock	()->(int)
(	O
&	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
interlock	int
)	O
;	O
}	O
