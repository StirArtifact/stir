static	O
char	O
b64tab	array(char)
[	O
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"	*(char)
;	O
static	O
int	O
b64val	array(int)
[	O
128	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
62	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
63	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
60	int
,	O
61	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
-	O
1	int
}	O
;	O
int	O
_gdbm_base64_encode	(*(char),long,*(*(char)),*(long),*(long))->(int)
(	O
const	O
unsigned	O
char	O
*	O
input	*(char)
,	O
size_t	long
input_len	long
,	O
unsigned	O
char	O
*	O
*	O
output	*(*(char))
,	O
size_t	long
*	O
output_size	*(long)
,	O
size_t	long
*	O
nbytes	*(long)
)	O
{	O
size_t	long
olen	long
=	O
4	int
*	O
(	O
input_len	long
+	O
2	int
)	O
/	O
3	int
+	O
1	int
;	O
unsigned	O
char	O
*	O
out	*(char)
;	O
if	O
(	O
olen	long
>	O
*	O
output_size	*(long)
)	O
{	O
out	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
*	O
output	*(*(char))
,	O
olen	long
)	O
;	O
if	O
(	O
!	O
out	*(char)
)	O
return	O
GDBM_MALLOC_ERROR	int
;	O
*	O
output	*(*(char))
=	O
out	*(char)
;	O
*	O
output_size	*(long)
=	O
olen	long
;	O
}	O
else	O
out	*(char)
=	O
*	O
output	*(*(char))
;	O
while	O
(	O
input_len	long
>=	O
3	int
)	O
{	O
*	O
out	*(char)
++	O
=	O
b64tab	array(char)
[	O
input	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
*	O
out	*(char)
++	O
=	O
b64tab	array(char)
[	O
(	O
(	O
input	*(char)
[	O
0	int
]	O
<<	O
4	int
)	O
&	O
0x30	int
)	O
|	O
(	O
input	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
]	O
;	O
*	O
out	*(char)
++	O
=	O
b64tab	array(char)
[	O
(	O
(	O
input	*(char)
[	O
1	int
]	O
<<	O
2	int
)	O
&	O
0x3c	int
)	O
|	O
(	O
input	*(char)
[	O
2	int
]	O
>>	O
6	int
)	O
]	O
;	O
*	O
out	*(char)
++	O
=	O
b64tab	array(char)
[	O
input	*(char)
[	O
2	int
]	O
&	O
0x3f	int
]	O
;	O
input_len	long
-=	O
3	int
;	O
input	*(char)
+=	O
3	int
;	O
}	O
if	O
(	O
input_len	long
>	O
0	int
)	O
{	O
unsigned	O
char	O
c	char
=	O
(	O
input	*(char)
[	O
0	int
]	O
<<	O
4	int
)	O
&	O
0x30	int
;	O
*	O
out	*(char)
++	O
=	O
b64tab	array(char)
[	O
input	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
if	O
(	O
input_len	long
>	O
1	int
)	O
c	char
|=	O
input	*(char)
[	O
1	int
]	O
>>	O
4	int
;	O
*	O
out	*(char)
++	O
=	O
b64tab	array(char)
[	O
c	char
]	O
;	O
*	O
out	*(char)
++	O
=	O
(	O
input_len	long
<	O
2	int
)	O
?	O
'='	O
:	O
b64tab	array(char)
[	O
(	O
input	*(char)
[	O
1	int
]	O
<<	O
2	int
)	O
&	O
0x3c	int
]	O
;	O
*	O
out	*(char)
++	O
=	O
'='	O
;	O
}	O
*	O
out	*(char)
=	O
0	int
;	O
*	O
nbytes	*(long)
=	O
out	*(char)
-	O
*	O
output	*(*(char))
;	O
return	O
0	int
;	O
}	O
int	O
_gdbm_base64_decode	(*(char),long,*(*(char)),*(long),*(long),*(long))->(int)
(	O
const	O
unsigned	O
char	O
*	O
input	*(char)
,	O
size_t	long
input_len	long
,	O
unsigned	O
char	O
*	O
*	O
output	*(*(char))
,	O
size_t	long
*	O
output_size	*(long)
,	O
size_t	long
*	O
inbytes	*(long)
,	O
size_t	long
*	O
outbytes	*(long)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
int	O
olen	long
=	O
input_len	long
;	O
unsigned	O
char	O
*	O
out	*(char)
;	O
size_t	long
ins	long
=	O
0	int
;	O
if	O
(	O
olen	long
>	O
*	O
output_size	*(long)
)	O
{	O
out	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
*	O
output	*(*(char))
,	O
olen	long
)	O
;	O
if	O
(	O
!	O
out	*(char)
)	O
return	O
GDBM_MALLOC_ERROR	int
;	O
*	O
output	*(*(char))
=	O
out	*(char)
;	O
*	O
output_size	*(long)
=	O
olen	long
;	O
}	O
else	O
out	*(char)
=	O
*	O
output	*(*(char))
;	O
do	O
{	O
if	O
(	O
input_len	long
<	O
4	int
)	O
break	O
;	O
if	O
(	O
input	*(char)
[	O
0	int
]	O
>	O
127	int
||	O
b64val	array(int)
[	O
input	*(char)
[	O
0	int
]	O
]	O
==	O
-	O
1	int
||	O
input	*(char)
[	O
1	int
]	O
>	O
127	int
||	O
b64val	array(int)
[	O
input	*(char)
[	O
1	int
]	O
]	O
==	O
-	O
1	int
||	O
input	*(char)
[	O
2	int
]	O
>	O
127	int
||	O
(	O
(	O
input	*(char)
[	O
2	int
]	O
!=	O
'='	O
)	O
&&	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
2	int
]	O
]	O
==	O
-	O
1	int
)	O
)	O
||	O
input	*(char)
[	O
3	int
]	O
>	O
127	int
||	O
(	O
(	O
input	*(char)
[	O
3	int
]	O
!=	O
'='	O
)	O
&&	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
3	int
]	O
]	O
==	O
-	O
1	int
)	O
)	O
)	O
{	O
rc	int
=	O
GDBM_ILLEGAL_DATA	int
;	O
break	O
;	O
}	O
*	O
out	*(char)
++	O
=	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
0	int
]	O
]	O
<<	O
2	int
)	O
|	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
1	int
]	O
]	O
>>	O
4	int
)	O
;	O
if	O
(	O
input	*(char)
[	O
2	int
]	O
!=	O
'='	O
)	O
{	O
*	O
out	*(char)
++	O
=	O
(	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
1	int
]	O
]	O
<<	O
4	int
)	O
&	O
0xf0	int
)	O
|	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
2	int
]	O
]	O
>>	O
2	int
)	O
;	O
if	O
(	O
input	*(char)
[	O
3	int
]	O
!=	O
'='	O
)	O
*	O
out	*(char)
++	O
=	O
(	O
(	O
b64val	array(int)
[	O
input	*(char)
[	O
2	int
]	O
]	O
<<	O
6	int
)	O
&	O
0xc0	int
)	O
|	O
b64val	array(int)
[	O
input	*(char)
[	O
3	int
]	O
]	O
;	O
}	O
input	*(char)
+=	O
4	int
;	O
input_len	long
-=	O
4	int
;	O
ins	long
+=	O
4	int
;	O
}	O
while	O
(	O
input_len	long
>	O
0	int
)	O
;	O
*	O
inbytes	*(long)
=	O
ins	long
;	O
*	O
outbytes	*(long)
=	O
out	*(char)
-	O
*	O
output	*(*(char))
;	O
return	O
rc	int
;	O
}	O
