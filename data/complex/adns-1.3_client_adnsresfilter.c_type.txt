struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
{	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
,	O
*	O
back	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
;	O
void	O
*	O
buffer	*(void)
;	O
char	O
*	O
textp	*(char)
;	O
int	O
textlen	int
;	O
struct	O
timeval	struct(long,long)
printbefore	struct(long,long)
;	O
struct	O
treething	struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`))))))
*	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
;	O
}	O
;	O
static	O
int	O
bracket	int
,	O
forever	int
,	O
address	int
;	O
static	O
unsigned	O
long	O
timeout	long
=	O
1000	int
;	O
static	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
rrt	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns_r_ptr	int
;	O
static	O
adns_initflags	enum(int,int,int,int,int,int,int,int,int,int,int)
initflags	enum(int,int,int,int,int,int,int,int,int,int,int)
=	O
0	int
;	O
static	O
const	O
char	O
*	O
config_text	*(char)
;	O
static	O
int	O
outblocked	int
,	O
inputeof	int
;	O
static	O
struct	O
{	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
,	O
*	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
;	O
}	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
;	O
static	O
int	O
peroutqueuenode	int
,	O
outqueuelen	int
;	O
static	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
sa	struct(short,array(char))
;	O
static	O
adns_state	*(struct)
ads	*(struct)
;	O
static	O
char	O
addrtextbuf	array(char)
[	O
14	int
]	O
;	O
static	O
int	O
cbyte	int
,	O
inbyte	int
,	O
inbuf	int
;	O
static	O
unsigned	O
char	O
bytes	*(char)
[	O
4	int
]	O
;	O
static	O
struct	O
timeval	struct(long,long)
printbefore	struct(long,long)
;	O
struct	O
treething	struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`))))))
{	O
unsigned	O
char	O
bytes	*(char)
[	O
4	int
]	O
;	O
adns_query	*(struct)
qu	*(struct)
;	O
adns_answer	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct(int,*`))),*(struct(int,union(struct`,struct`))),*(struct(int)),*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`))),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`))),*(struct(int,*(char))),*(struct(*(char),*(char),long,long,long,long,long)),*(struct(int,int,int,*(char))),*(struct(int,int,int,struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`))),*(struct(int,*(char)))))
*	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
;	O
}	O
;	O
static	O
struct	O
treething	struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`))))))
*	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
static	O
void	O
*	O
treeroot	*(void)
;	O
static	O
int	O
nonblock	(int,int)->(int)
(	O
int	O
fd	int
,	O
int	O
isnonblock	int
)	O
{	O
int	O
r	int
;	O
r	int
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_GETFL	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
r	int
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_SETFL	int
,	O
isnonblock	int
?	O
r	int
|	O
O_NONBLOCK	int
:	O
r	int
&	O
~	O
O_NONBLOCK	int
)	O
;	O
if	O
(	O
r	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
quitnow	(int)->(void)
(	O
int	O
exitstatus	int
)	O
{	O
nonblock	(int,int)->(int)
(	O
0	int
,	O
0	int
)	O
;	O
nonblock	(int,int)->(int)
(	O
1	int
,	O
0	int
)	O
;	O
exit	(int)->(void)
(	O
exitstatus	int
)	O
;	O
}	O
static	O
void	O
sysfail	(*(char))->(void)
(	O
const	O
char	O
*	O
what	*(char)
)	O
NONRETURNING	O
;	O
static	O
void	O
sysfail	(*(char))->(void)
(	O
const	O
char	O
*	O
what	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adnsresfilter: system call failed: %s: %s\n"	*(char)
,	O
what	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
quitnow	(int)->(void)
(	O
2	int
)	O
;	O
}	O
static	O
void	O
*	O
xmalloc	(long)->(*(void))
(	O
size_t	long
sz	long
)	O
{	O
void	O
*	O
r	int
;	O
r	int
=	O
malloc	(long)->(*(void))
(	O
sz	long
)	O
;	O
if	O
(	O
r	int
)	O
return	O
r	int
;	O
sysfail	(*(char))->(void)
(	O
"malloc"	*(char)
)	O
;	O
}	O
static	O
void	O
outputerr	()->(void)
(	O
void	O
)	O
NONRETURNING	O
;	O
static	O
void	O
outputerr	()->(void)
(	O
void	O
)	O
{	O
sysfail	(*(char))->(void)
(	O
"write to stdout"	*(char)
)	O
;	O
}	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
printf	(*(char))->(int)
(	O
"usage: adnsresfilter [<options ...>]\n"	*(char)
"       adnsresfilter  -h|--help | --version\n"	*(char)
"options: -t<milliseconds>|--timeout <milliseconds>\n"	*(char)
"         -w|--wait        (always wait for queries to time out or fail)\n"	*(char)
"         -b|--brackets    (require [...] around IP addresses)\n"	*(char)
"         -a|--address     (always include [address] in output)\n"	*(char)
"         -u|--unchecked   (do not forward map for checking)\n"	*(char)
"         --config <text>  (use this instead of resolv.conf)\n"	*(char)
"         --debug          (turn on adns resolver debugging)\n"	*(char)
"Timeout is the maximum amount to delay any particular bit of output for.\n"	*(char)
"Lookups will go on in the background.  Default timeout = 1000 (ms).\n"	*(char)
)	O
==	O
EOF	O
)	O
outputerr	()->(void)
(	O
)	O
;	O
if	O
(	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
sysfail	(*(char))->(void)
(	O
"flush stdout"	*(char)
)	O
;	O
}	O
static	O
void	O
usageerr	(*(char))->(void)
(	O
const	O
char	O
*	O
why	*(char)
)	O
NONRETURNING	O
;	O
static	O
void	O
usageerr	(*(char))->(void)
(	O
const	O
char	O
*	O
why	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adnsresfilter: bad usage: %s\n"	*(char)
,	O
why	*(char)
)	O
;	O
usage	()->(void)
(	O
)	O
;	O
quitnow	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
void	O
adnsfail	(*(char),int)->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
int	O
e	int
)	O
NONRETURNING	O
;	O
static	O
void	O
adnsfail	(*(char),int)->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
int	O
e	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adnsresfilter: adns call failed: %s: %s\n"	*(char)
,	O
what	*(char)
,	O
strerror	(int)->(*(char))
(	O
e	int
)	O
)	O
;	O
quitnow	(int)->(void)
(	O
2	int
)	O
;	O
}	O
static	O
void	O
settimeout	(*(char))->(void)
(	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
char	O
*	O
ep	*(char)
;	O
timeout	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
ep	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ep	*(char)
)	O
usageerr	(*(char))->(void)
(	O
"invalid timeout"	*(char)
)	O
;	O
}	O
static	O
void	O
parseargs	(*(*(char)))->(void)
(	O
const	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
const	O
char	O
*	O
arg	*(char)
;	O
int	O
c	int
;	O
while	O
(	O
(	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
)	O
{	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
!=	O
'-'	O
)	O
usageerr	(*(char))->(void)
(	O
"no non-option arguments are allowed"	*(char)
)	O
;	O
if	O
(	O
arg	*(char)
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--timeout"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
(	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
)	O
usageerr	(*(char))->(void)
(	O
"--timeout needs a value"	*(char)
)	O
;	O
settimeout	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
forever	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--wait"	*(char)
)	O
)	O
{	O
forever	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--brackets"	*(char)
)	O
)	O
{	O
bracket	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--address"	*(char)
)	O
)	O
{	O
address	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--unchecked"	*(char)
)	O
)	O
{	O
rrt	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns_r_ptr_raw	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--config"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
(	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
)	O
usageerr	(*(char))->(void)
(	O
"--config needs a value"	*(char)
)	O
;	O
config_text	*(char)
=	O
arg	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--debug"	*(char)
)	O
)	O
{	O
initflags	enum(int,int,int,int,int,int,int,int,int,int,int)
|=	O
adns_if_debug	int
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--help"	*(char)
)	O
)	O
{	O
usage	()->(void)
(	O
)	O
;	O
quitnow	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--version"	*(char)
)	O
)	O
{	O
VERSION_PRINT_QUIT	O
(	O
"adnsresfilter"	*(char)
)	O
;	O
quitnow	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
{	O
usageerr	(*(char))->(void)
(	O
"unknown long option"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
arg	*(char)
)	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
't'	O
:	O
if	O
(	O
*	O
++	O
arg	*(char)
)	O
settimeout	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
else	O
if	O
(	O
(	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
)	O
settimeout	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
else	O
usageerr	(*(char))->(void)
(	O
"-t needs a value"	*(char)
)	O
;	O
forever	int
=	O
0	int
;	O
arg	*(char)
=	O
"\0"	*(char)
;	O
break	O
;	O
case	O
'w'	O
:	O
forever	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
bracket	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
address	int
=	O
1	int
;	O
break	O
;	O
case	O
'u'	O
:	O
rrt	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns_r_ptr_raw	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	()->(void)
(	O
)	O
;	O
quitnow	(int)->(void)
(	O
0	int
)	O
;	O
default	O
:	O
usageerr	(*(char))->(void)
(	O
"unknown short option"	*(char)
)	O
;	O
}	O
}	O
}	O
}	O
}	O
static	O
void	O
queueoutchar	(int)->(void)
(	O
int	O
c	int
)	O
{	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
entry	struct(*(char),*(void))
;	O
entry	struct(*(char),*(void))
=	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
;	O
if	O
(	O
!	O
entry	struct(*(char),*(void))
||	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
||	O
entry	struct(*(char),*(void))
->	O
textlen	int
>=	O
peroutqueuenode	int
)	O
{	O
peroutqueuenode	int
=	O
!	O
peroutqueuenode	int
||	O
!	O
entry	struct(*(char),*(void))
||	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
?	O
128	int
:	O
peroutqueuenode	int
>=	O
1024	int
?	O
4096	int
:	O
peroutqueuenode	int
<<	O
2	int
;	O
entry	struct(*(char),*(void))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
entry	struct(*(char),*(void))
)	O
)	O
;	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
=	O
xmalloc	(long)->(*(void))
(	O
peroutqueuenode	int
)	O
;	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
=	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
;	O
entry	struct(*(char),*(void))
->	O
textlen	int
=	O
0	int
;	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
=	O
0	int
;	O
LIST_LINK_TAIL	O
(	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
,	O
entry	struct(*(char),*(void))
)	O
;	O
outqueuelen	int
++	O
;	O
}	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
[	O
entry	struct(*(char),*(void))
->	O
textlen	int
++	O
]	O
=	O
c	int
;	O
}	O
static	O
void	O
queueoutstr	(*(char),int)->(void)
(	O
const	O
char	O
*	O
str	*(char)
,	O
int	O
len	int
)	O
{	O
while	O
(	O
len	int
--	O
>	O
0	int
)	O
queueoutchar	(int)->(void)
(	O
*	O
str	*(char)
++	O
)	O
;	O
}	O
static	O
void	O
writestdout	(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct(array(char),*`,*`)))))->(void)
(	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
entry	struct(*(char),*(void))
)	O
{	O
int	O
r	int
;	O
while	O
(	O
entry	struct(*(char),*(void))
->	O
textlen	int
)	O
{	O
r	int
=	O
write	(int,*(void),long)->(long)
(	O
1	int
,	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
,	O
entry	struct(*(char),*(void))
->	O
textlen	int
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
if	O
(	O
errno	O
==	O
EAGAIN	int
)	O
{	O
outblocked	int
=	O
1	int
;	O
break	O
;	O
}	O
sysfail	(*(char))->(void)
(	O
"write stdout"	*(char)
)	O
;	O
}	O
assert	O
(	O
r	int
<=	O
entry	struct(*(char),*(void))
->	O
textlen	int
)	O
;	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
+=	O
r	int
;	O
entry	struct(*(char),*(void))
->	O
textlen	int
-=	O
r	int
;	O
}	O
if	O
(	O
!	O
entry	struct(*(char),*(void))
->	O
textlen	int
)	O
{	O
LIST_UNLINK	O
(	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
,	O
entry	struct(*(char),*(void))
)	O
;	O
free	(*(void))->(void)
(	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
entry	struct(*(char),*(void))
)	O
;	O
outqueuelen	int
--	O
;	O
}	O
}	O
static	O
void	O
replacetextwithname	(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct(array(char),*`,*`)))))->(void)
(	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
entry	struct(*(char),*(void))
)	O
{	O
char	O
*	O
name	*(char)
,	O
*	O
newbuf	*(char)
;	O
int	O
namelen	int
,	O
newlen	int
;	O
name	*(char)
=	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
->	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
rrs	union(*(void),*(char),*(*(char)),*(*(struct(int,*(char)))),*(struct(int,union(struct(short,array(char)),struct(short,short,struct`,array(char))))),*(struct(int)),*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct(int,union`)))),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`)))),*(struct(int,*(char))),*(struct(*(char),*(char),long,long,long,long,long)),*(struct(int,int,int,*(char))),*(struct(int,int,int,struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`)))),*(struct(int,*(char))))
.	O
str	*(char)
[	O
0	int
]	O
;	O
namelen	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
address	int
)	O
{	O
free	(*(void))->(void)
(	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
)	O
;	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
=	O
0	int
;	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
=	O
name	*(char)
;	O
entry	struct(*(char),*(void))
->	O
textlen	int
=	O
namelen	int
;	O
}	O
else	O
{	O
newlen	int
=	O
entry	struct(*(char),*(void))
->	O
textlen	int
+	O
namelen	int
+	O
(	O
bracket	int
?	O
0	int
:	O
2	int
)	O
;	O
newbuf	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
newlen	int
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
newbuf	*(char)
,	O
bracket	int
?	O
"%s%.*s"	*(char)
:	O
"%s[%.*s]"	*(char)
,	O
name	*(char)
,	O
entry	struct(*(char),*(void))
->	O
textlen	int
,	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
)	O
;	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
=	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
=	O
newbuf	*(char)
;	O
entry	struct(*(char),*(void))
->	O
textlen	int
=	O
newlen	int
;	O
}	O
}	O
static	O
void	O
checkadnsqueries	()->(void)
(	O
void	O
)	O
{	O
adns_query	*(struct)
qu	*(struct)
;	O
adns_answer	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct(int,*`))),*(struct(int,union(struct`,struct`))),*(struct(int)),*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`))),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`))),*(struct(int,*(char))),*(struct(*(char),*(char),long,long,long,long,long)),*(struct(int,int,int,*(char))),*(struct(int,int,int,struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`))),*(struct(int,*(char)))))
*	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
;	O
void	O
*	O
context	*(void)
;	O
struct	O
treething	struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`))))))
*	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
int	O
r	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
qu	*(struct)
=	O
0	int
;	O
context	*(void)
=	O
0	int
;	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
=	O
0	int
;	O
r	int
=	O
adns_check	(*(struct),*(*(struct)),*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(void)))->(int)
(	O
ads	*(struct)
,	O
&	O
qu	*(struct)
,	O
&	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
,	O
&	O
context	*(void)
)	O
;	O
if	O
(	O
r	int
==	O
ESRCH	int
||	O
r	int
==	O
EAGAIN	int
)	O
break	O
;	O
assert	O
(	O
!	O
r	int
)	O
;	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
context	*(void)
;	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
=	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
;	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
qu	*(struct)
=	O
0	int
;	O
}	O
}	O
static	O
void	O
restartbuf	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
inbuf	int
>	O
0	int
)	O
queueoutstr	(*(char),int)->(void)
(	O
addrtextbuf	array(char)
,	O
inbuf	int
)	O
;	O
inbuf	int
=	O
0	int
;	O
}	O
static	O
int	O
comparer	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(void)
,	O
const	O
void	O
*	O
b	*(void)
)	O
{	O
return	O
memcmp	(*(void),*(void),long)->(int)
(	O
a	*(void)
,	O
b	*(void)
,	O
4	int
)	O
;	O
}	O
static	O
void	O
procaddr	()->(void)
(	O
void	O
)	O
{	O
struct	O
treething	struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`))))))
*	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
void	O
*	O
*	O
searchfound	*(*(void))
;	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
entry	struct(*(char),*(void))
;	O
int	O
r	int
;	O
if	O
(	O
!	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
treething	struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`))))))
)	O
)	O
;	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
qu	*(struct)
=	O
0	int
;	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
=	O
0	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
bytes	*(char)
,	O
bytes	*(char)
,	O
4	int
)	O
;	O
searchfound	*(*(void))
=	O
tsearch	(*(void),*(*(void)),*((*(void),*(void))->(int)))->(*(void))
(	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
&	O
treeroot	*(void)
,	O
comparer	(*(void),*(void))->(int)
)	O
;	O
if	O
(	O
!	O
searchfound	*(*(void))
)	O
sysfail	(*(char))->(void)
(	O
"tsearch"	*(char)
)	O
;	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
*	O
searchfound	*(*(void))
;	O
if	O
(	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
==	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
newthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
sa	struct(short,array(char))
.	O
sin_addr	struct(int)
,	O
bytes	*(char)
,	O
4	int
)	O
;	O
r	int
=	O
adns_submit_reverse	(*(struct),*(struct(short,array(char))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int),*(void),*(*(struct)))->(int)
(	O
ads	*(struct)
,	O
(	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(short,array(char))
,	O
rrt	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
0	int
,	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
&	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
->	O
qu	*(struct)
)	O
;	O
if	O
(	O
r	int
)	O
adnsfail	(*(char),int)->(void)
(	O
"submit"	*(char)
,	O
r	int
)	O
;	O
}	O
entry	struct(*(char),*(void))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
entry	struct(*(char),*(void))
)	O
)	O
;	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
=	O
xmalloc	(long)->(*(void))
(	O
inbuf	int
)	O
;	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
=	O
entry	struct(*(char),*(void))
->	O
buffer	*(void)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
entry	struct(*(char),*(void))
->	O
textp	*(char)
,	O
addrtextbuf	array(char)
,	O
inbuf	int
)	O
;	O
entry	struct(*(char),*(void))
->	O
textlen	int
=	O
inbuf	int
;	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
=	O
foundthing	*(struct(array(char),*(struct),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
entry	struct(*(char),*(void))
->	O
printbefore	struct(long,long)
=	O
printbefore	struct(long,long)
;	O
LIST_LINK_TAIL	O
(	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
,	O
entry	struct(*(char),*(void))
)	O
;	O
outqueuelen	int
++	O
;	O
inbuf	int
=	O
0	int
;	O
cbyte	int
=	O
-	O
1	int
;	O
}	O
static	O
void	O
startaddr	()->(void)
(	O
void	O
)	O
{	O
bytes	*(char)
[	O
cbyte	int
=	O
0	int
]	O
=	O
0	int
;	O
inbyte	int
=	O
0	int
;	O
}	O
static	O
void	O
readstdin	()->(void)
(	O
void	O
)	O
{	O
char	O
readbuf	array(char)
[	O
512	int
]	O
,	O
*	O
p	*(char)
;	O
int	O
r	int
,	O
c	int
,	O
nbyte	int
;	O
while	O
(	O
(	O
r	int
=	O
read	(int,*(void),long)->(long)
(	O
0	int
,	O
readbuf	array(char)
,	O
sizeof	O
(	O
readbuf	array(char)
)	O
)	O
)	O
<=	O
0	int
)	O
{	O
if	O
(	O
r	int
==	O
0	int
)	O
{	O
inputeof	int
=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
r	int
==	O
EAGAIN	int
)	O
return	O
;	O
if	O
(	O
r	int
!=	O
EINTR	int
)	O
sysfail	(*(char))->(void)
(	O
"read stdin"	*(char)
)	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
readbuf	array(char)
;	O
r	int
>	O
0	int
;	O
r	int
--	O
,	O
p	*(char)
++	O
)	O
{	O
c	int
=	O
*	O
p	*(char)
;	O
if	O
(	O
cbyte	int
==	O
-	O
1	int
&&	O
bracket	int
&&	O
c	int
==	O
'['	O
)	O
{	O
addrtextbuf	array(char)
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
startaddr	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
==	O
-	O
1	int
&&	O
!	O
bracket	int
&&	O
!	O
isalnum	(int)->(int)
(	O
c	int
)	O
)	O
{	O
queueoutchar	(int)->(void)
(	O
c	int
)	O
;	O
startaddr	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
>=	O
0	int
&&	O
inbyte	int
<	O
3	int
&&	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'9'	O
&&	O
(	O
nbyte	int
=	O
bytes	*(char)
[	O
cbyte	int
]	O
*	O
10	int
+	O
(	O
c	int
-	O
'0'	O
)	O
)	O
<=	O
255	int
)	O
{	O
bytes	*(char)
[	O
cbyte	int
]	O
=	O
nbyte	int
;	O
addrtextbuf	array(char)
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
inbyte	int
++	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
>=	O
0	int
&&	O
cbyte	int
<	O
3	int
&&	O
inbyte	int
>	O
0	int
&&	O
c	int
==	O
'.'	O
)	O
{	O
bytes	*(char)
[	O
++	O
cbyte	int
]	O
=	O
0	int
;	O
addrtextbuf	array(char)
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
inbyte	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
cbyte	int
==	O
3	int
&&	O
inbyte	int
>	O
0	int
&&	O
bracket	int
&&	O
c	int
==	O
']'	O
)	O
{	O
addrtextbuf	array(char)
[	O
inbuf	int
++	O
]	O
=	O
c	int
;	O
procaddr	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
cbyte	int
==	O
3	int
&&	O
inbyte	int
>	O
0	int
&&	O
!	O
bracket	int
&&	O
!	O
isalnum	(int)->(int)
(	O
c	int
)	O
)	O
{	O
procaddr	()->(void)
(	O
)	O
;	O
queueoutchar	(int)->(void)
(	O
c	int
)	O
;	O
startaddr	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
restartbuf	()->(void)
(	O
)	O
;	O
queueoutchar	(int)->(void)
(	O
c	int
)	O
;	O
cbyte	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
bracket	int
&&	O
!	O
isalnum	(int)->(int)
(	O
c	int
)	O
)	O
startaddr	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
static	O
void	O
startup	()->(void)
(	O
void	O
)	O
{	O
int	O
r	int
;	O
if	O
(	O
nonblock	(int,int)->(int)
(	O
0	int
,	O
1	int
)	O
)	O
sysfail	(*(char))->(void)
(	O
"set stdin to nonblocking mode"	*(char)
)	O
;	O
if	O
(	O
nonblock	(int,int)->(int)
(	O
1	int
,	O
1	int
)	O
)	O
sysfail	(*(char))->(void)
(	O
"set stdout to nonblocking mode"	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
sa	struct(short,array(char))
,	O
0	int
,	O
sizeof	O
(	O
sa	struct(short,array(char))
)	O
)	O
;	O
sa	struct(short,array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
config_text	*(char)
)	O
{	O
r	int
=	O
adns_init_strcfg	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
&	O
ads	*(struct)
,	O
initflags	enum(int,int,int,int,int,int,int,int,int,int,int)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
config_text	*(char)
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_init	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
&	O
ads	*(struct)
,	O
initflags	enum(int,int,int,int,int,int,int,int,int,int,int)
,	O
0	int
)	O
;	O
}	O
if	O
(	O
r	int
)	O
adnsfail	(*(char),int)->(void)
(	O
"init"	*(char)
,	O
r	int
)	O
;	O
cbyte	int
=	O
-	O
1	int
;	O
inbyte	int
=	O
-	O
1	int
;	O
inbuf	int
=	O
0	int
;	O
if	O
(	O
!	O
bracket	int
)	O
startaddr	()->(void)
(	O
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
int	O
r	int
,	O
maxfd	*(int)
;	O
fd_set	struct(array(long))
readfds	*(struct(array(long)))
,	O
writefds	*(struct(array(long)))
,	O
exceptfds	*(struct(array(long)))
;	O
struct	O
outqueuenode	struct(*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct))),*(void),*(char),int,struct(long,long),*(struct))
*	O
entry	struct(*(char),*(void))
;	O
struct	O
timeval	struct(long,long)
*	O
tv	*(struct(long,long))
,	O
tvbuf	struct(long,long)
,	O
now	*(struct(long,long))
;	O
parseargs	(*(*(char)))->(void)
(	O
argv	*(*(char))
)	O
;	O
startup	()->(void)
(	O
)	O
;	O
while	O
(	O
!	O
inputeof	int
||	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
.	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
)	O
{	O
maxfd	*(int)
=	O
2	int
;	O
tv	*(struct(long,long))
=	O
0	int
;	O
FD_ZERO	O
(	O
&	O
readfds	*(struct(array(long)))
)	O
;	O
FD_ZERO	O
(	O
&	O
writefds	*(struct(array(long)))
)	O
;	O
FD_ZERO	O
(	O
&	O
exceptfds	*(struct(array(long)))
)	O
;	O
if	O
(	O
(	O
entry	struct(*(char),*(void))
=	O
outqueue	struct(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))),*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct))))
.	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(struct(*(struct`),*(struct`),*(void),*(char),int,struct(long,long),*(struct`))),*(void),*(char),int,struct(long,long),*(struct)))
)	O
&&	O
!	O
outblocked	int
)	O
{	O
if	O
(	O
!	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
)	O
{	O
writestdout	(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct(array(char),*`,*`)))))->(void)
(	O
entry	struct(*(char),*(void))
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
->	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
)	O
{	O
if	O
(	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
->	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
nrrs	int
)	O
replacetextwithname	(*(struct(*(struct(*`,*`,*`,*`,int,struct`,*`)),*(struct(*`,*`,*`,*`,int,struct`,*`)),*(void),*(char),int,struct(long,long),*(struct(array(char),*`,*`)))))->(void)
(	O
entry	struct(*(char),*(void))
)	O
;	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
=	O
0	int
;	O
continue	O
;	O
}	O
r	int
=	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	*(struct(long,long))
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	(*(char))->(void)
(	O
"gettimeofday"	*(char)
)	O
;	O
if	O
(	O
forever	int
)	O
{	O
tv	*(struct(long,long))
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
timercmp	O
(	O
&	O
now	*(struct(long,long))
,	O
&	O
entry	struct(*(char),*(void))
->	O
printbefore	struct(long,long)
,	O
<	O
)	O
)	O
{	O
entry	struct(*(char),*(void))
->	O
addr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)))
=	O
0	int
;	O
continue	O
;	O
}	O
else	O
{	O
tvbuf	struct(long,long)
.	O
tv_sec	long
=	O
entry	struct(*(char),*(void))
->	O
printbefore	struct(long,long)
.	O
tv_sec	long
-	O
now	*(struct(long,long))
.	O
tv_sec	long
-	O
1	int
;	O
tvbuf	struct(long,long)
.	O
tv_usec	long
=	O
entry	struct(*(char),*(void))
->	O
printbefore	struct(long,long)
.	O
tv_usec	long
-	O
now	*(struct(long,long))
.	O
tv_usec	long
+	O
1000000	int
;	O
tvbuf	struct(long,long)
.	O
tv_sec	long
+=	O
tvbuf	struct(long,long)
.	O
tv_usec	long
/	O
1000000	int
;	O
tvbuf	struct(long,long)
.	O
tv_usec	long
%=	O
1000000	int
;	O
tv	*(struct(long,long))
=	O
&	O
tvbuf	struct(long,long)
;	O
}	O
adns_beforeselect	(*(struct),*(int),*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(*(struct(long,long))),*(struct(long,long)),*(struct(long,long)))->(void)
(	O
ads	*(struct)
,	O
&	O
maxfd	*(int)
,	O
&	O
readfds	*(struct(array(long)))
,	O
&	O
writefds	*(struct(array(long)))
,	O
&	O
exceptfds	*(struct(array(long)))
,	O
&	O
tv	*(struct(long,long))
,	O
&	O
tvbuf	struct(long,long)
,	O
&	O
now	*(struct(long,long))
)	O
;	O
}	O
if	O
(	O
outblocked	int
)	O
FD_SET	O
(	O
1	int
,	O
&	O
writefds	*(struct(array(long)))
)	O
;	O
if	O
(	O
!	O
inputeof	int
&&	O
outqueuelen	int
<	O
1024	int
)	O
FD_SET	O
(	O
0	int
,	O
&	O
readfds	*(struct(array(long)))
)	O
;	O
r	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
maxfd	*(int)
,	O
&	O
readfds	*(struct(array(long)))
,	O
&	O
writefds	*(struct(array(long)))
,	O
&	O
exceptfds	*(struct(array(long)))
,	O
tv	*(struct(long,long))
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
if	O
(	O
r	int
==	O
EINTR	int
)	O
continue	O
;	O
else	O
sysfail	(*(char))->(void)
(	O
"select"	*(char)
)	O
;	O
}	O
r	int
=	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	*(struct(long,long))
,	O
0	int
)	O
;	O
if	O
(	O
r	int
)	O
sysfail	(*(char))->(void)
(	O
"gettimeofday"	*(char)
)	O
;	O
adns_afterselect	(*(struct),int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(void)
(	O
ads	*(struct)
,	O
maxfd	*(int)
,	O
&	O
readfds	*(struct(array(long)))
,	O
&	O
writefds	*(struct(array(long)))
,	O
&	O
exceptfds	*(struct(array(long)))
,	O
&	O
now	*(struct(long,long))
)	O
;	O
checkadnsqueries	()->(void)
(	O
)	O
;	O
if	O
(	O
FD_ISSET	O
(	O
0	int
,	O
&	O
readfds	*(struct(array(long)))
)	O
)	O
{	O
if	O
(	O
!	O
forever	int
)	O
{	O
printbefore	struct(long,long)
=	O
now	*(struct(long,long))
;	O
timevaladd	(*(struct(long,long)),long)->(void)
(	O
&	O
printbefore	struct(long,long)
,	O
timeout	long
)	O
;	O
}	O
readstdin	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
FD_ISSET	O
(	O
1	int
,	O
&	O
writefds	*(struct(array(long)))
)	O
)	O
{	O
outblocked	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
nonblock	(int,int)->(int)
(	O
0	int
,	O
0	int
)	O
)	O
sysfail	(*(char))->(void)
(	O
"un-nonblock stdin"	*(char)
)	O
;	O
if	O
(	O
nonblock	(int,int)->(int)
(	O
1	int
,	O
0	int
)	O
)	O
sysfail	(*(char))->(void)
(	O
"un-nonblock stdout"	*(char)
)	O
;	O
adns_finish	(*(struct))->(void)
(	O
ads	*(struct)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
