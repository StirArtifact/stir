static	O
int	O
gensymm_standardize_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
;	O
static	O
int	O
gensymm_standardize_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
;	O
gsl_eigen_gensymm_workspace	struct(long,*(struct(long,*(double),*(double))))
*	O
gsl_eigen_gensymm_alloc	(long)->(*(struct(long,*(struct(long,*`,*`)))))
(	O
const	O
size_t	long
n	long
)	O
{	O
gsl_eigen_gensymm_workspace	struct(long,*(struct(long,*(double),*(double))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"matrix dimension must be positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
gsl_eigen_gensymm_workspace	struct(long,*(struct(long,*(double),*(double))))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_gensymm_workspace	struct(long,*(struct(long,*(double),*(double))))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
=	O
n	long
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
symm_workspace_p	*(struct(long,*(double),*(double)))
=	O
gsl_eigen_symm_alloc	(long)->(*(struct(long,*(double),*(double))))
(	O
n	long
)	O
;	O
if	O
(	O
!	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
symm_workspace_p	*(struct(long,*(double),*(double)))
)	O
{	O
gsl_eigen_gensymm_free	(*(struct(long,*(struct(long,*`,*`)))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for symm workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
void	O
gsl_eigen_gensymm_free	(*(struct(long,*(struct(long,*`,*`)))))->(void)
(	O
gsl_eigen_gensymm_workspace	struct(long,*(struct(long,*(double),*(double))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
symm_workspace_p	*(struct(long,*(double),*(double)))
)	O
gsl_eigen_symm_free	(*(struct(long,*(double),*(double))))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
symm_workspace_p	*(struct(long,*(double),*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
int	O
gsl_eigen_gensymm	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(struct(long,*`,*`)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_gensymm_workspace	struct(long,*(struct(long,*(double),*(double))))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
(	O
N	int
!=	O
B	*(float)
->	O
size1	long
)	O
||	O
(	O
N	int
!=	O
B	*(float)
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"B matrix dimensions must match A"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix size does not match workspace"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
s	*(float)
;	O
s	*(float)
=	O
gsl_linalg_cholesky_decomp1	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
B	*(float)
)	O
;	O
if	O
(	O
s	*(float)
!=	O
GSL_SUCCESS	int
)	O
return	O
s	*(float)
;	O
gsl_eigen_gensymm_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
B	*(float)
)	O
;	O
s	*(float)
=	O
gsl_eigen_symm	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(double),*(double))))->(int)
(	O
A	*(float)
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
symm_workspace_p	*(struct(long,*(double),*(double)))
)	O
;	O
return	O
s	*(float)
;	O
}	O
}	O
int	O
gsl_eigen_gensymm_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
{	O
return	O
gensymm_standardize_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
B	*(float)
)	O
;	O
}	O
static	O
int	O
gensymm_standardize_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
size_t	long
i	long
;	O
double	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
b	*(struct(long,*(long double)))
,	O
c	*(float)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
i	long
,	O
i	long
)	O
;	O
b	*(struct(long,*(long double)))
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
B	*(float)
,	O
i	long
,	O
i	long
)	O
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
/=	O
b	*(struct(long,*(long double)))
*	O
b	*(struct(long,*(long double)))
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
i	long
,	O
i	long
,	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
i	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
ai	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
ma	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
bi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
mb	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
i	long
+	O
1	int
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
/	O
b	*(struct(long,*(long double)))
,	O
&	O
ai	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
c	*(float)
=	O
-	O
0.5	int
*	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
&	O
bi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ai	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dsyr2	(enum(int,int),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
-	O
1.0	int
,	O
&	O
ai	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
bi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ma	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
c	*(float)
,	O
&	O
bi	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ai	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
mb	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
ai	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
gensymm_standardize_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
<=	O
CROSSOVER_GENSYMM	O
)	O
{	O
return	O
gensymm_standardize_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
,	O
B	*(float)
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_EIGEN_SPLIT	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
gensymm_standardize_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dtrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dsymm	(enum(int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
-	O
0.5	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dsyr2k	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dsymm	(enum(int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
-	O
0.5	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
B22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
gensymm_standardize_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
