static	O
int	O
utimensat_works_really	int
;	O
static	O
int	O
lutimensat_works_really	int
;	O
static	O
int	O
validate_timespec	(array(struct(long,long)))->(int)
(	O
struct	O
timespec	struct(long,long)
timespec	struct(long,long)
[	O
2	int
]	O
)	O
{	O
int	O
result	int
=	O
0	int
;	O
int	O
utime_omit_count	int
=	O
0	int
;	O
if	O
(	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
!=	O
UTIME_NOW	O
&&	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
!=	O
UTIME_OMIT	O
&&	O
!	O
(	O
0	int
<=	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
&&	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
<	O
TIMESPEC_HZ	int
)	O
)	O
||	O
(	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
!=	O
UTIME_NOW	O
&&	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
!=	O
UTIME_OMIT	O
&&	O
!	O
(	O
0	int
<=	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
&&	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
<	O
TIMESPEC_HZ	int
)	O
)	O
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_NOW	O
||	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
{	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_sec	long
=	O
0	int
;	O
result	int
=	O
1	int
;	O
if	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
utime_omit_count	int
++	O
;	O
}	O
if	O
(	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_NOW	O
||	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
{	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_sec	long
=	O
0	int
;	O
result	int
=	O
1	int
;	O
if	O
(	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
utime_omit_count	int
++	O
;	O
}	O
return	O
result	int
+	O
(	O
utime_omit_count	int
==	O
1	int
)	O
;	O
}	O
static	O
bool	bool
update_timespec	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),array(*(struct(long,long))))->(bool)
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
const	O
*	O
statbuf	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
struct	O
timespec	struct(long,long)
*	O
ts	array(struct(long,long))
[	O
2	int
]	O
)	O
{	O
struct	O
timespec	struct(long,long)
*	O
timespec	struct(long,long)
=	O
*	O
ts	array(struct(long,long))
;	O
if	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
&&	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
return	O
true	int
;	O
if	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_NOW	O
&&	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_NOW	O
)	O
{	O
*	O
ts	array(struct(long,long))
=	O
NULL	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
timespec	struct(long,long)
[	O
0	int
]	O
=	O
get_stat_atime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
statbuf	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
else	O
if	O
(	O
timespec	struct(long,long)
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_NOW	O
)	O
gettime	(*(struct(long,long)))->(void)
(	O
&	O
timespec	struct(long,long)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
timespec	struct(long,long)
[	O
1	int
]	O
=	O
get_stat_mtime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
statbuf	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
else	O
if	O
(	O
timespec	struct(long,long)
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_NOW	O
)	O
gettime	(*(struct(long,long)))->(void)
(	O
&	O
timespec	struct(long,long)
[	O
1	int
]	O
)	O
;	O
return	O
false	int
;	O
}	O
int	O
fdutimens	(int,*(char),array(struct(long,long)))->(int)
(	O
int	O
fd	int
,	O
char	O
const	O
*	O
file	*(char)
,	O
struct	O
timespec	struct(long,long)
const	O
timespec	struct(long,long)
[	O
2	int
]	O
)	O
{	O
struct	O
timespec	struct(long,long)
adjusted_timespec	array(struct(long,long))
[	O
2	int
]	O
;	O
struct	O
timespec	struct(long,long)
*	O
ts	array(struct(long,long))
=	O
timespec	struct(long,long)
?	O
adjusted_timespec	array(struct(long,long))
:	O
NULL	O
;	O
int	O
adjustment_needed	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
if	O
(	O
ts	array(struct(long,long))
)	O
{	O
adjusted_timespec	array(struct(long,long))
[	O
0	int
]	O
=	O
timespec	struct(long,long)
[	O
0	int
]	O
;	O
adjusted_timespec	array(struct(long,long))
[	O
1	int
]	O
=	O
timespec	struct(long,long)
[	O
1	int
]	O
;	O
adjustment_needed	int
=	O
validate_timespec	(array(struct(long,long)))->(int)
(	O
ts	array(struct(long,long))
)	O
;	O
}	O
if	O
(	O
adjustment_needed	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
fd	int
<	O
0	int
&&	O
!	O
file	*(char)
)	O
{	O
errno	O
=	O
EBADF	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
0	int
<=	O
utimensat_works_really	int
)	O
{	O
int	O
result	int
;	O
if	O
(	O
adjustment_needed	int
==	O
2	int
)	O
{	O
if	O
(	O
fd	int
<	O
0	int
?	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
file	*(char)
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
:	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ts	array(struct(long,long))
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
ts	array(struct(long,long))
[	O
0	int
]	O
=	O
get_stat_atime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
else	O
if	O
(	O
ts	array(struct(long,long))
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
ts	array(struct(long,long))
[	O
1	int
]	O
=	O
get_stat_mtime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
adjustment_needed	int
++	O
;	O
}	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
result	int
=	O
utimensat	(int,*(char),array(struct(long,long)),int)->(int)
(	O
AT_FDCWD	O
,	O
file	*(char)
,	O
ts	array(struct(long,long))
,	O
0	int
)	O
;	O
if	O
(	O
0	int
<	O
result	int
)	O
errno	O
=	O
ENOSYS	int
;	O
if	O
(	O
result	int
==	O
0	int
||	O
errno	O
!=	O
ENOSYS	int
)	O
{	O
utimensat_works_really	int
=	O
1	int
;	O
return	O
result	int
;	O
}	O
}	O
if	O
(	O
0	int
<=	O
fd	int
)	O
{	O
result	int
=	O
futimens	(int,array(struct(long,long)))->(int)
(	O
fd	int
,	O
ts	array(struct(long,long))
)	O
;	O
if	O
(	O
0	int
<	O
result	int
)	O
errno	O
=	O
ENOSYS	int
;	O
if	O
(	O
result	int
==	O
0	int
||	O
errno	O
!=	O
ENOSYS	int
)	O
{	O
utimensat_works_really	int
=	O
1	int
;	O
return	O
result	int
;	O
}	O
}	O
}	O
utimensat_works_really	int
=	O
-	O
1	int
;	O
lutimensat_works_really	int
=	O
-	O
1	int
;	O
if	O
(	O
adjustment_needed	int
||	O
(	O
REPLACE_FUNC_STAT_FILE	int
&&	O
fd	int
<	O
0	int
)	O
)	O
{	O
if	O
(	O
adjustment_needed	int
!=	O
3	int
&&	O
(	O
fd	int
<	O
0	int
?	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
file	*(char)
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
:	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ts	array(struct(long,long))
&&	O
update_timespec	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),array(*(struct(long,long))))->(bool)
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
&	O
ts	array(struct(long,long))
)	O
)	O
return	O
0	int
;	O
}	O
{	O
struct	O
timeval	struct(long,long)
timeval	struct(long,long)
[	O
2	int
]	O
;	O
struct	O
timeval	struct(long,long)
*	O
t	struct(long,long)
;	O
if	O
(	O
ts	array(struct(long,long))
)	O
{	O
timeval	struct(long,long)
[	O
0	int
]	O
.	O
tv_sec	long
=	O
ts	array(struct(long,long))
[	O
0	int
]	O
.	O
tv_sec	long
;	O
timeval	struct(long,long)
[	O
0	int
]	O
.	O
tv_usec	long
=	O
ts	array(struct(long,long))
[	O
0	int
]	O
.	O
tv_nsec	long
/	O
1000	int
;	O
timeval	struct(long,long)
[	O
1	int
]	O
.	O
tv_sec	long
=	O
ts	array(struct(long,long))
[	O
1	int
]	O
.	O
tv_sec	long
;	O
timeval	struct(long,long)
[	O
1	int
]	O
.	O
tv_usec	long
=	O
ts	array(struct(long,long))
[	O
1	int
]	O
.	O
tv_nsec	long
/	O
1000	int
;	O
t	struct(long,long)
=	O
timeval	struct(long,long)
;	O
}	O
else	O
t	struct(long,long)
=	O
NULL	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
return	O
futimesat	(int,*(char),array(struct(long,long)))->(int)
(	O
AT_FDCWD	O
,	O
file	*(char)
,	O
t	struct(long,long)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
futimes	(int,array(struct(long,long)))->(int)
(	O
fd	int
,	O
t	struct(long,long)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
t	struct(long,long)
)	O
{	O
bool	bool
abig	bool
=	O
500000	int
<=	O
t	struct(long,long)
[	O
0	int
]	O
.	O
tv_usec	long
;	O
bool	bool
mbig	bool
=	O
500000	int
<=	O
t	struct(long,long)
[	O
1	int
]	O
.	O
tv_usec	long
;	O
if	O
(	O
(	O
abig	bool
|	O
mbig	bool
)	O
&&	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
==	O
0	int
)	O
{	O
time_t	long
adiff	long
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
.	O
st_atime	O
-	O
t	struct(long,long)
[	O
0	int
]	O
.	O
tv_sec	long
;	O
time_t	long
mdiff	long
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
.	O
st_mtime	O
-	O
t	struct(long,long)
[	O
1	int
]	O
.	O
tv_sec	long
;	O
struct	O
timeval	struct(long,long)
*	O
tt	*(struct(long,long))
=	O
NULL	O
;	O
struct	O
timeval	struct(long,long)
truncated_timeval	array(struct(long,long))
[	O
2	int
]	O
;	O
truncated_timeval	array(struct(long,long))
[	O
0	int
]	O
=	O
t	struct(long,long)
[	O
0	int
]	O
;	O
truncated_timeval	array(struct(long,long))
[	O
1	int
]	O
=	O
t	struct(long,long)
[	O
1	int
]	O
;	O
if	O
(	O
abig	bool
&&	O
adiff	long
==	O
1	int
&&	O
get_stat_atime_ns	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(long)
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
==	O
0	int
)	O
{	O
tt	*(struct(long,long))
=	O
truncated_timeval	array(struct(long,long))
;	O
tt	*(struct(long,long))
[	O
0	int
]	O
.	O
tv_usec	long
=	O
0	int
;	O
}	O
if	O
(	O
mbig	bool
&&	O
mdiff	long
==	O
1	int
&&	O
get_stat_mtime_ns	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(long)
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
==	O
0	int
)	O
{	O
tt	*(struct(long,long))
=	O
truncated_timeval	array(struct(long,long))
;	O
tt	*(struct(long,long))
[	O
1	int
]	O
.	O
tv_usec	long
=	O
0	int
;	O
}	O
if	O
(	O
tt	*(struct(long,long))
)	O
futimes	(int,array(struct(long,long)))->(int)
(	O
fd	int
,	O
tt	*(struct(long,long))
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
!	O
file	*(char)
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
utimes	(*(char),array(struct(long,long)))->(int)
(	O
file	*(char)
,	O
t	struct(long,long)
)	O
;	O
}	O
}	O
int	O
utimens	(*(char),array(struct(long,long)))->(int)
(	O
char	O
const	O
*	O
file	*(char)
,	O
struct	O
timespec	struct(long,long)
const	O
timespec	struct(long,long)
[	O
2	int
]	O
)	O
{	O
return	O
fdutimens	(int,*(char),array(struct(long,long)))->(int)
(	O
-	O
1	int
,	O
file	*(char)
,	O
timespec	struct(long,long)
)	O
;	O
}	O
int	O
lutimens	(*(char),array(struct(long,long)))->(int)
(	O
char	O
const	O
*	O
file	*(char)
,	O
struct	O
timespec	struct(long,long)
const	O
timespec	struct(long,long)
[	O
2	int
]	O
)	O
{	O
struct	O
timespec	struct(long,long)
adjusted_timespec	array(struct(long,long))
[	O
2	int
]	O
;	O
struct	O
timespec	struct(long,long)
*	O
ts	array(struct(long,long))
=	O
timespec	struct(long,long)
?	O
adjusted_timespec	array(struct(long,long))
:	O
NULL	O
;	O
int	O
adjustment_needed	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
;	O
if	O
(	O
ts	array(struct(long,long))
)	O
{	O
adjusted_timespec	array(struct(long,long))
[	O
0	int
]	O
=	O
timespec	struct(long,long)
[	O
0	int
]	O
;	O
adjusted_timespec	array(struct(long,long))
[	O
1	int
]	O
=	O
timespec	struct(long,long)
[	O
1	int
]	O
;	O
adjustment_needed	int
=	O
validate_timespec	(array(struct(long,long)))->(int)
(	O
ts	array(struct(long,long))
)	O
;	O
}	O
if	O
(	O
adjustment_needed	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
0	int
<=	O
lutimensat_works_really	int
)	O
{	O
int	O
result	int
;	O
if	O
(	O
adjustment_needed	int
==	O
2	int
)	O
{	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	*(char)
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ts	array(struct(long,long))
[	O
0	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
ts	array(struct(long,long))
[	O
0	int
]	O
=	O
get_stat_atime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
else	O
if	O
(	O
ts	array(struct(long,long))
[	O
1	int
]	O
.	O
tv_nsec	long
==	O
UTIME_OMIT	O
)	O
ts	array(struct(long,long))
[	O
1	int
]	O
=	O
get_stat_mtime	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(struct(long,long))
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
adjustment_needed	int
++	O
;	O
}	O
result	int
=	O
utimensat	(int,*(char),array(struct(long,long)),int)->(int)
(	O
AT_FDCWD	O
,	O
file	*(char)
,	O
ts	array(struct(long,long))
,	O
AT_SYMLINK_NOFOLLOW	int
)	O
;	O
if	O
(	O
0	int
<	O
result	int
)	O
errno	O
=	O
ENOSYS	int
;	O
if	O
(	O
result	int
==	O
0	int
||	O
errno	O
!=	O
ENOSYS	int
)	O
{	O
utimensat_works_really	int
=	O
1	int
;	O
lutimensat_works_really	int
=	O
1	int
;	O
return	O
result	int
;	O
}	O
}	O
lutimensat_works_really	int
=	O
-	O
1	int
;	O
if	O
(	O
adjustment_needed	int
||	O
REPLACE_FUNC_STAT_FILE	int
)	O
{	O
if	O
(	O
adjustment_needed	int
!=	O
3	int
&&	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	*(char)
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ts	array(struct(long,long))
&&	O
update_timespec	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),array(*(struct(long,long))))->(bool)
(	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
&	O
ts	array(struct(long,long))
)	O
)	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
(	O
adjustment_needed	int
||	O
REPLACE_FUNC_STAT_FILE	int
)	O
&&	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
file	*(char)
,	O
&	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
S_ISLNK	O
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
.	O
st_mode	int
)	O
)	O
return	O
fdutimens	(int,*(char),array(struct(long,long)))->(int)
(	O
-	O
1	int
,	O
file	*(char)
,	O
ts	array(struct(long,long))
)	O
;	O
errno	O
=	O
ENOSYS	int
;	O
return	O
-	O
1	int
;	O
}	O
