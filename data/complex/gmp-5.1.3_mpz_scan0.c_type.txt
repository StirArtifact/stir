mp_bitcnt_t	long
mpz_scan0	O
(	O
mpz_srcptr	*(struct(int,int,*(long)))
u	array(array(long))
,	O
mp_bitcnt_t	long
starting_bit	long
)	O
__GMP_NOTHROW	O
{	O
mp_srcptr	*(long)
u_ptr	*(long)
=	O
PTR	O
(	O
u	array(array(long))
)	O
;	O
mp_size_t	long
size	long
=	O
SIZ	O
(	O
u	array(array(long))
)	O
;	O
mp_size_t	long
abs_size	long
=	O
ABS	O
(	O
size	long
)	O
;	O
mp_srcptr	*(long)
u_end	*(long)
=	O
u_ptr	*(long)
+	O
abs_size	long
;	O
mp_size_t	long
starting_limb	long
=	O
starting_bit	long
/	O
GMP_NUMB_BITS	O
;	O
mp_srcptr	*(long)
p	*(char)
=	O
u_ptr	*(long)
+	O
starting_limb	long
;	O
mp_limb_t	long
limb	long
;	O
int	O
cnt	int
;	O
if	O
(	O
starting_limb	long
>=	O
abs_size	long
)	O
return	O
(	O
size	long
>=	O
0	int
?	O
starting_bit	long
:	O
~	O
(	O
mp_bitcnt_t	long
)	O
0	int
)	O
;	O
limb	long
=	O
*	O
p	*(char)
;	O
if	O
(	O
size	long
>=	O
0	int
)	O
{	O
limb	long
|=	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
starting_bit	long
%	O
GMP_NUMB_BITS	O
)	O
)	O
-	O
1	int
;	O
while	O
(	O
limb	long
==	O
GMP_NUMB_MAX	O
)	O
{	O
p	*(char)
++	O
;	O
if	O
(	O
p	*(char)
==	O
u_end	*(long)
)	O
return	O
(	O
mp_bitcnt_t	long
)	O
abs_size	long
*	O
GMP_NUMB_BITS	O
;	O
limb	long
=	O
*	O
p	*(char)
;	O
}	O
limb	long
=	O
~	O
limb	long
;	O
}	O
else	O
{	O
mp_srcptr	*(long)
q	int
;	O
q	int
=	O
p	*(char)
;	O
while	O
(	O
q	int
!=	O
u_ptr	*(long)
)	O
{	O
q	int
--	O
;	O
if	O
(	O
*	O
q	int
!=	O
0	int
)	O
goto	O
inverted	O
;	O
}	O
limb	long
--	O
;	O
inverted	O
:	O
limb	long
&=	O
(	O
MP_LIMB_T_MAX	O
<<	O
(	O
starting_bit	long
%	O
GMP_NUMB_BITS	O
)	O
)	O
;	O
if	O
(	O
limb	long
==	O
0	int
)	O
{	O
p	*(char)
++	O
;	O
if	O
(	O
p	*(char)
==	O
u_end	*(long)
)	O
return	O
~	O
(	O
mp_bitcnt_t	long
)	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
limb	long
=	O
*	O
p	*(char)
;	O
if	O
(	O
limb	long
!=	O
0	int
)	O
break	O
;	O
p	*(char)
++	O
;	O
ASSERT	O
(	O
p	*(char)
<	O
u_end	*(long)
)	O
;	O
}	O
}	O
}	O
ASSERT	O
(	O
limb	long
!=	O
0	int
)	O
;	O
count_trailing_zeros	O
(	O
cnt	int
,	O
limb	long
)	O
;	O
return	O
(	O
mp_bitcnt_t	long
)	O
(	O
p	*(char)
-	O
u_ptr	*(long)
)	O
*	O
GMP_NUMB_BITS	O
+	O
cnt	int
;	O
}	O
