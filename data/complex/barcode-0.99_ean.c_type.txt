static	O
char	O
*	O
digits	array(*(char))
[	O
]	O
=	O
{	O
"3211"	*(char)
,	O
"2221"	*(char)
,	O
"2122"	*(char)
,	O
"1411"	*(char)
,	O
"1132"	*(char)
,	O
"1231"	*(char)
,	O
"1114"	*(char)
,	O
"1312"	*(char)
,	O
"1213"	*(char)
,	O
"3112"	*(char)
}	O
;	O
static	O
char	O
*	O
ean_mirrortab	array(*(char))
[	O
]	O
=	O
{	O
"------"	*(char)
,	O
"--1-11"	*(char)
,	O
"--11-1"	*(char)
,	O
"--111-"	*(char)
,	O
"-1--11"	*(char)
,	O
"-11--1"	*(char)
,	O
"-111--"	*(char)
,	O
"-1-1-1"	*(char)
,	O
"-1-11-"	*(char)
,	O
"-11-1-"	*(char)
}	O
;	O
static	O
char	O
*	O
upc_mirrortab	array(*(char))
[	O
]	O
=	O
{	O
"---111"	*(char)
,	O
"--1-11"	*(char)
,	O
"--11-1"	*(char)
,	O
"--111-"	*(char)
,	O
"-1--11"	*(char)
,	O
"-11--1"	*(char)
,	O
"-111--"	*(char)
,	O
"-1-1-1"	*(char)
,	O
"-1-11-"	*(char)
,	O
"-11-1-"	*(char)
}	O
;	O
static	O
char	O
*	O
upc_mirrortab1	array(*(char))
[	O
]	O
=	O
{	O
"111---"	*(char)
,	O
"11-1--"	*(char)
,	O
"11--1-"	*(char)
,	O
"11---1"	*(char)
,	O
"1-11--"	*(char)
,	O
"1--11-"	*(char)
,	O
"1---11"	*(char)
,	O
"1-1-1-"	*(char)
,	O
"1-1--1"	*(char)
,	O
"1--1-1"	*(char)
}	O
;	O
static	O
char	O
*	O
upc_mirrortab2	array(*(char))
[	O
]	O
=	O
{	O
"11"	*(char)
,	O
"1-"	*(char)
,	O
"-1"	*(char)
,	O
"--"	*(char)
}	O
;	O
static	O
char	O
*	O
guard	array(*(char))
[	O
]	O
=	O
{	O
"0a1a"	*(char)
,	O
"1a1a1"	*(char)
,	O
"a1a"	*(char)
}	O
;	O
static	O
char	O
*	O
guardE	array(*(char))
[	O
]	O
=	O
{	O
"0a1a"	*(char)
,	O
"1a1a1a"	*(char)
}	O
;	O
static	O
char	O
*	O
guardS	array(*(char))
[	O
]	O
=	O
{	O
"9112"	*(char)
,	O
"11"	*(char)
}	O
;	O
static	O
int	O
ean_make_checksum	(*(char),int)->(int)
(	O
char	O
*	O
text	*(char)
,	O
int	O
mode	int
)	O
{	O
int	O
esum	int
=	O
0	int
,	O
osum	int
=	O
0	int
,	O
i	int
;	O
int	O
even	int
=	O
1	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
' '	O
)	O
)	O
i	int
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
' '	O
)	O
-	O
text	*(char)
;	O
else	O
i	int
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
while	O
(	O
i	int
--	O
>	O
0	int
)	O
{	O
if	O
(	O
even	int
)	O
esum	int
+=	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
;	O
else	O
osum	int
+=	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
;	O
even	int
=	O
!	O
even	int
;	O
}	O
if	O
(	O
!	O
mode	int
)	O
{	O
i	int
=	O
(	O
3	int
*	O
esum	int
+	O
osum	int
)	O
%	O
10	int
;	O
return	O
(	O
10	int
-	O
i	int
)	O
%	O
10	int
;	O
}	O
else	O
{	O
i	int
=	O
(	O
3	int
*	O
esum	int
+	O
9	int
*	O
osum	int
)	O
;	O
return	O
i	int
%	O
10	int
;	O
}	O
}	O
int	O
Barcode_ean_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
,	O
len0	int
,	O
len	int
,	O
addon	int
;	O
char	O
tmp	array(char)
[	O
24	int
]	O
,	O
*	O
spc	*(char)
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
spc	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
spc	*(char)
)	O
{	O
len0	int
=	O
spc	*(char)
-	O
text	*(char)
;	O
addon	int
=	O
len	int
-	O
len0	int
-	O
1	int
;	O
if	O
(	O
addon	int
!=	O
2	int
&&	O
addon	int
!=	O
5	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
len0	int
+	O
1	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
}	O
else	O
len0	int
=	O
len	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len0	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
switch	O
(	O
len0	int
)	O
{	O
case	O
8	int
:	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
tmp	array(char)
,	O
text	*(char)
,	O
7	int
)	O
;	O
tmp	array(char)
[	O
7	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
text	*(char)
[	O
7	int
]	O
!=	O
(	O
ean_make_checksum	(*(char),int)->(int)
(	O
tmp	array(char)
,	O
0	int
)	O
+	O
'0'	O
)	O
)	O
return	O
-	O
1	int
;	O
case	O
7	int
:	O
break	O
;	O
case	O
13	int
:	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
tmp	array(char)
,	O
text	*(char)
,	O
12	int
)	O
;	O
tmp	array(char)
[	O
12	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
text	*(char)
[	O
12	int
]	O
!=	O
(	O
ean_make_checksum	(*(char),int)->(int)
(	O
tmp	array(char)
,	O
0	int
)	O
+	O
'0'	O
)	O
)	O
return	O
-	O
1	int
;	O
case	O
12	int
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
upc_e_to_a0	(*(char))->(*(char))
(	O
char	O
*	O
text	*(char)
)	O
{	O
static	O
char	O
result	array(char)
[	O
16	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
"00000000000"	*(char)
)	O
;	O
switch	O
(	O
text	*(char)
[	O
5	int
]	O
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	array(char)
+	O
1	int
,	O
text	*(char)
,	O
2	int
)	O
;	O
result	array(char)
[	O
3	int
]	O
=	O
text	*(char)
[	O
5	int
]	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
8	int
,	O
text	*(char)
+	O
2	int
,	O
3	int
)	O
;	O
break	O
;	O
case	O
'3'	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
1	int
,	O
text	*(char)
,	O
3	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
9	int
,	O
text	*(char)
+	O
3	int
,	O
2	int
)	O
;	O
break	O
;	O
case	O
'4'	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
1	int
,	O
text	*(char)
,	O
4	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
10	int
,	O
text	*(char)
+	O
4	int
,	O
1	int
)	O
;	O
break	O
;	O
default	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
1	int
,	O
text	*(char)
,	O
5	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
result	array(char)
+	O
10	int
,	O
text	*(char)
+	O
5	int
,	O
1	int
)	O
;	O
break	O
;	O
}	O
return	O
result	array(char)
;	O
}	O
static	O
char	O
*	O
upc_e_to_a	(*(char))->(*(char))
(	O
char	O
*	O
text	*(char)
)	O
{	O
static	O
char	O
result	array(char)
[	O
16	int
]	O
,	O
*	O
spc	*(char)
;	O
int	O
len	int
,	O
chk	int
;	O
spc	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
spc	*(char)
)	O
len	int
=	O
spc	*(char)
-	O
text	*(char)
;	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
switch	O
(	O
len	int
)	O
{	O
case	O
6	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
upc_e_to_a0	(*(char))->(*(char))
(	O
text	*(char)
)	O
)	O
;	O
return	O
result	array(char)
;	O
case	O
7	int
:	O
if	O
(	O
text	*(char)
[	O
0	int
]	O
==	O
'0'	O
||	O
text	*(char)
[	O
0	int
]	O
==	O
'1'	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
upc_e_to_a0	(*(char))->(*(char))
(	O
text	*(char)
+	O
1	int
)	O
)	O
;	O
result	array(char)
[	O
0	int
]	O
=	O
text	*(char)
[	O
0	int
]	O
;	O
return	O
result	array(char)
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
upc_e_to_a0	(*(char))->(*(char))
(	O
text	*(char)
)	O
)	O
;	O
chk	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
result	array(char)
,	O
0	int
)	O
;	O
if	O
(	O
chk	int
==	O
(	O
text	*(char)
[	O
len	int
-	O
1	int
]	O
-	O
'0'	O
)	O
)	O
return	O
result	array(char)
;	O
return	O
NULL	O
;	O
case	O
8	int
:	O
if	O
(	O
text	*(char)
[	O
0	int
]	O
==	O
'0'	O
||	O
text	*(char)
[	O
0	int
]	O
==	O
'1'	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
upc_e_to_a0	(*(char))->(*(char))
(	O
text	*(char)
+	O
1	int
)	O
)	O
;	O
result	array(char)
[	O
0	int
]	O
=	O
text	*(char)
[	O
0	int
]	O
;	O
chk	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
result	array(char)
,	O
0	int
)	O
;	O
if	O
(	O
chk	int
==	O
(	O
text	*(char)
[	O
len	int
-	O
1	int
]	O
-	O
'0'	O
)	O
)	O
return	O
result	array(char)
;	O
}	O
default	O
:	O
return	O
NULL	O
;	O
}	O
}	O
static	O
char	O
*	O
upc_a_to_e	(*(char))->(*(char))
(	O
char	O
*	O
text	*(char)
)	O
{	O
static	O
char	O
result	array(char)
[	O
16	int
]	O
;	O
int	O
len	int
,	O
chksum	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
switch	O
(	O
len	int
)	O
{	O
case	O
12	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
text	*(char)
)	O
;	O
result	array(char)
[	O
11	int
]	O
=	O
'\0'	O
;	O
chksum	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
result	array(char)
,	O
0	int
)	O
;	O
if	O
(	O
text	*(char)
[	O
11	int
]	O
!=	O
(	O
chksum	int
-	O
'0'	O
)	O
)	O
return	O
NULL	O
;	O
break	O
;	O
case	O
11	int
:	O
chksum	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
text	*(char)
,	O
0	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
NULL	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	array(char)
,	O
"00000000"	*(char)
)	O
;	O
if	O
(	O
text	*(char)
[	O
0	int
]	O
!=	O
'0'	O
&&	O
text	*(char)
[	O
0	int
]	O
!=	O
'1'	O
)	O
return	O
NULL	O
;	O
result	array(char)
[	O
0	int
]	O
=	O
text	*(char)
[	O
0	int
]	O
;	O
if	O
(	O
(	O
text	*(char)
[	O
3	int
]	O
==	O
'0'	O
||	O
text	*(char)
[	O
3	int
]	O
==	O
'1'	O
||	O
text	*(char)
[	O
3	int
]	O
==	O
'2'	O
)	O
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
text	*(char)
+	O
4	int
,	O
"0000"	*(char)
,	O
4	int
)	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
result	array(char)
[	O
1	int
]	O
,	O
text	*(char)
+	O
1	int
,	O
2	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
result	array(char)
[	O
3	int
]	O
,	O
text	*(char)
+	O
8	int
,	O
3	int
)	O
;	O
result	array(char)
[	O
6	int
]	O
=	O
text	*(char)
[	O
3	int
]	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
text	*(char)
+	O
4	int
,	O
"00000"	*(char)
,	O
5	int
)	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
result	array(char)
[	O
1	int
]	O
,	O
text	*(char)
+	O
1	int
,	O
3	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
result	array(char)
[	O
4	int
]	O
,	O
text	*(char)
+	O
9	int
,	O
2	int
)	O
;	O
result	array(char)
[	O
6	int
]	O
=	O
'3'	O
;	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
text	*(char)
+	O
5	int
,	O
"00000"	*(char)
,	O
5	int
)	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
result	array(char)
[	O
1	int
]	O
,	O
text	*(char)
+	O
1	int
,	O
4	int
)	O
;	O
result	array(char)
[	O
5	int
]	O
=	O
text	*(char)
[	O
10	int
]	O
;	O
result	array(char)
[	O
6	int
]	O
=	O
'4'	O
;	O
}	O
else	O
if	O
(	O
(	O
text	*(char)
[	O
5	int
]	O
!=	O
'0'	O
)	O
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
text	*(char)
+	O
6	int
,	O
"0000"	*(char)
,	O
4	int
)	O
&&	O
text	*(char)
[	O
10	int
]	O
>=	O
'5'	O
&&	O
text	*(char)
[	O
10	int
]	O
<=	O
'9'	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
result	array(char)
[	O
1	int
]	O
,	O
text	*(char)
+	O
1	int
,	O
5	int
)	O
;	O
result	array(char)
[	O
6	int
]	O
=	O
text	*(char)
[	O
10	int
]	O
;	O
}	O
else	O
{	O
return	O
NULL	O
;	O
}	O
result	array(char)
[	O
7	int
]	O
=	O
chksum	int
+	O
'0'	O
;	O
return	O
result	array(char)
;	O
}	O
int	O
Barcode_upc_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
,	O
len0	int
,	O
len	int
,	O
addon	int
;	O
char	O
tmp	array(char)
[	O
24	int
]	O
,	O
*	O
spc	*(char)
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
spc	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
spc	*(char)
)	O
{	O
len0	int
=	O
spc	*(char)
-	O
text	*(char)
;	O
addon	int
=	O
len	int
-	O
len0	int
-	O
1	int
;	O
if	O
(	O
addon	int
!=	O
2	int
&&	O
addon	int
!=	O
5	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
len0	int
+	O
1	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
}	O
else	O
len0	int
=	O
len	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len0	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
switch	O
(	O
len0	int
)	O
{	O
case	O
6	int
:	O
case	O
7	int
:	O
case	O
8	int
:	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
tmp	array(char)
,	O
text	*(char)
,	O
len0	int
)	O
;	O
tmp	array(char)
[	O
len0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
upc_e_to_a	(*(char))->(*(char))
(	O
tmp	array(char)
)	O
)	O
return	O
-	O
1	int
;	O
break	O
;	O
case	O
12	int
:	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
tmp	array(char)
,	O
text	*(char)
,	O
11	int
)	O
;	O
tmp	array(char)
[	O
11	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
text	*(char)
[	O
11	int
]	O
!=	O
(	O
ean_make_checksum	(*(char),int)->(int)
(	O
tmp	array(char)
,	O
0	int
)	O
+	O
'0'	O
)	O
)	O
return	O
-	O
1	int
;	O
case	O
11	int
:	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
Barcode_isbn_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
,	O
ndigit	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
text	*(char)
[	O
i	int
]	O
==	O
'-'	O
)	O
continue	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
{	O
ndigit	int
++	O
;	O
if	O
(	O
ndigit	int
==	O
9	int
)	O
{	O
i	int
++	O
;	O
break	O
;	O
}	O
continue	O
;	O
}	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ndigit	int
!=	O
9	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
text	*(char)
[	O
i	int
]	O
==	O
'-'	O
)	O
i	int
++	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
||	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
==	O
'X'	O
)	O
i	int
++	O
;	O
if	O
(	O
text	*(char)
[	O
i	int
]	O
==	O
'\0'	O
)	O
return	O
0	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
+	O
i	int
)	O
!=	O
6	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
text	*(char)
[	O
i	int
]	O
!=	O
' '	O
)	O
return	O
-	O
1	int
;	O
i	int
++	O
;	O
while	O
(	O
text	*(char)
[	O
i	int
]	O
)	O
{	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
return	O
-	O
1	int
;	O
i	int
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
width_of_partial	(*(char))->(int)
(	O
char	O
*	O
partial	*(char)
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
*	O
partial	*(char)
)	O
{	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
partial	*(char)
)	O
)	O
i	int
+=	O
*	O
partial	*(char)
-	O
'0'	O
;	O
else	O
if	O
(	O
islower	(int)->(int)
(	O
*	O
partial	*(char)
)	O
)	O
i	int
+=	O
*	O
partial	*(char)
-	O
'a'	O
+	O
1	int
;	O
partial	*(char)
++	O
;	O
}	O
return	O
i	int
;	O
}	O
int	O
Barcode_ean_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
static	O
char	O
text	*(char)
[	O
24	int
]	O
;	O
static	O
char	O
partial	*(char)
[	O
256	int
]	O
;	O
static	O
char	O
textinfo	*(char)
[	O
256	int
]	O
;	O
char	O
*	O
mirror	*(char)
,	O
*	O
ptr1	*(char)
,	O
*	O
ptr2	*(char)
,	O
*	O
tptr	*(char)
=	O
textinfo	*(char)
;	O
char	O
*	O
spc	*(char)
;	O
enum	O
{	O
UPCA	int
,	O
UPCE	int
,	O
EAN13	int
,	O
EAN8	int
,	O
ISBN	int
}	O
encoding	*(char)
=	O
ISBN	int
;	O
int	O
i	int
,	O
xpos	int
,	O
checksum	int
,	O
len	int
,	O
len0	int
,	O
addon	int
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
len	int
=	O
strlen	(*(char))->(long)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
)	O
;	O
spc	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
spc	*(char)
)	O
{	O
len0	int
=	O
spc	*(char)
-	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
;	O
addon	int
=	O
strlen	(*(char))->(long)
(	O
spc	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
addon	int
!=	O
2	int
&&	O
addon	int
!=	O
5	int
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
len0	int
=	O
len	int
;	O
addon	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
)	O
{	O
switch	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
flags	int
&	O
BARCODE_ENCODING_MASK	int
)	O
{	O
case	O
BARCODE_EAN	int
:	O
switch	O
(	O
len0	int
)	O
{	O
case	O
7	int
:	O
case	O
8	int
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"EAN-8"	*(char)
)	O
;	O
encoding	*(char)
=	O
EAN8	int
;	O
break	O
;	O
case	O
12	int
:	O
case	O
13	int
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"EAN-13"	*(char)
)	O
;	O
encoding	*(char)
=	O
EAN13	int
;	O
break	O
;	O
default	O
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
-	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
break	O
;	O
case	O
BARCODE_UPC	int
:	O
switch	O
(	O
len0	int
)	O
{	O
case	O
6	int
:	O
case	O
7	int
:	O
case	O
8	int
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"UPC-E"	*(char)
)	O
;	O
encoding	*(char)
=	O
UPCE	int
;	O
break	O
;	O
case	O
11	int
:	O
case	O
12	int
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"UPC-A"	*(char)
)	O
;	O
encoding	*(char)
=	O
UPCA	int
;	O
break	O
;	O
default	O
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
-	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
break	O
;	O
default	O
:	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
-	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
NULL	O
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
NULL	O
;	O
if	O
(	O
encoding	*(char)
==	O
UPCA	int
)	O
{	O
text	*(char)
[	O
0	int
]	O
=	O
'0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
text	*(char)
+	O
1	int
,	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
encoding	*(char)
==	O
UPCE	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
upc_a_to_e	(*(char))->(*(char))
(	O
upc_e_to_a	(*(char))->(*(char))
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
)	O
)	O
)	O
;	O
}	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
)	O
;	O
}	O
if	O
(	O
encoding	*(char)
==	O
UPCA	int
||	O
encoding	*(char)
==	O
EAN13	int
||	O
encoding	*(char)
==	O
ISBN	int
)	O
{	O
if	O
(	O
!	O
(	O
encoding	*(char)
==	O
UPCA	int
&&	O
len0	int
==	O
12	int
)	O
&&	O
!	O
(	O
encoding	*(char)
==	O
EAN13	int
&&	O
len0	int
==	O
13	int
)	O
)	O
{	O
checksum	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
text	*(char)
,	O
0	int
)	O
;	O
text	*(char)
[	O
12	int
]	O
=	O
'0'	O
+	O
checksum	int
;	O
text	*(char)
[	O
13	int
]	O
=	O
'\0'	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guard	array(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
encoding	*(char)
==	O
EAN13	int
||	O
encoding	*(char)
==	O
ISBN	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"0:12:%c "	*(char)
,	O
text	*(char)
[	O
0	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
partial	*(char)
[	O
0	int
]	O
=	O
'9'	O
;	O
}	O
else	O
if	O
(	O
encoding	*(char)
==	O
UPCA	int
)	O
partial	*(char)
[	O
0	int
]	O
=	O
'9'	O
;	O
xpos	int
=	O
width_of_partial	(*(char))->(int)
(	O
partial	*(char)
)	O
;	O
mirror	*(char)
=	O
ean_mirrortab	array(*(char))
[	O
text	*(char)
[	O
0	int
]	O
-	O
'0'	O
]	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
7	int
;	O
i	int
++	O
)	O
{	O
ptr1	*(char)
=	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
;	O
ptr2	*(char)
=	O
digits	array(*(char))
[	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ptr1	*(char)
,	O
ptr2	*(char)
)	O
;	O
if	O
(	O
mirror	*(char)
[	O
i	int
-	O
1	int
]	O
==	O
'1'	O
)	O
{	O
ptr1	*(char)
[	O
0	int
]	O
=	O
ptr2	*(char)
[	O
3	int
]	O
;	O
ptr1	*(char)
[	O
1	int
]	O
=	O
ptr2	*(char)
[	O
2	int
]	O
;	O
ptr1	*(char)
[	O
2	int
]	O
=	O
ptr2	*(char)
[	O
1	int
]	O
;	O
ptr1	*(char)
[	O
3	int
]	O
=	O
ptr2	*(char)
[	O
0	int
]	O
;	O
}	O
if	O
(	O
encoding	*(char)
==	O
UPCA	int
&&	O
i	int
==	O
1	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"0:10:%c "	*(char)
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
ptr1	*(char)
[	O
1	int
]	O
+=	O
'a'	O
-	O
'1'	O
;	O
ptr1	*(char)
[	O
3	int
]	O
+=	O
'a'	O
-	O
'1'	O
;	O
}	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
xpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
}	O
xpos	int
+=	O
7	int
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guard	array(*(char))
[	O
1	int
]	O
)	O
;	O
xpos	int
+=	O
width_of_partial	(*(char))->(int)
(	O
guard	array(*(char))
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
7	int
;	O
i	int
<	O
13	int
;	O
i	int
++	O
)	O
{	O
ptr1	*(char)
=	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
;	O
ptr2	*(char)
=	O
digits	array(*(char))
[	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ptr1	*(char)
,	O
ptr2	*(char)
)	O
;	O
if	O
(	O
encoding	*(char)
==	O
UPCA	int
&&	O
i	int
==	O
12	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:10:%c "	*(char)
,	O
xpos	int
+	O
13	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
ptr1	*(char)
[	O
0	int
]	O
+=	O
'a'	O
-	O
'1'	O
;	O
ptr1	*(char)
[	O
2	int
]	O
+=	O
'a'	O
-	O
'1'	O
;	O
}	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
xpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
}	O
xpos	int
+=	O
7	int
;	O
}	O
tptr	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guard	array(*(char))
[	O
2	int
]	O
)	O
;	O
xpos	int
+=	O
width_of_partial	(*(char))->(int)
(	O
guard	array(*(char))
[	O
2	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
encoding	*(char)
==	O
UPCE	int
)	O
{	O
checksum	int
=	O
text	*(char)
[	O
7	int
]	O
-	O
'0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guardE	array(*(char))
[	O
0	int
]	O
)	O
;	O
partial	*(char)
[	O
0	int
]	O
=	O
'9'	O
;	O
xpos	int
=	O
width_of_partial	(*(char))->(int)
(	O
partial	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"0:10:%c "	*(char)
,	O
text	*(char)
[	O
0	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
if	O
(	O
text	*(char)
[	O
0	int
]	O
==	O
'0'	O
)	O
mirror	*(char)
=	O
upc_mirrortab	array(*(char))
[	O
checksum	int
]	O
;	O
else	O
mirror	*(char)
=	O
upc_mirrortab1	array(*(char))
[	O
checksum	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
ptr1	*(char)
=	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
;	O
ptr2	*(char)
=	O
digits	array(*(char))
[	O
text	*(char)
[	O
i	int
+	O
1	int
]	O
-	O
'0'	O
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ptr1	*(char)
,	O
ptr2	*(char)
)	O
;	O
if	O
(	O
mirror	*(char)
[	O
i	int
]	O
!=	O
'1'	O
)	O
{	O
ptr1	*(char)
[	O
0	int
]	O
=	O
ptr2	*(char)
[	O
3	int
]	O
;	O
ptr1	*(char)
[	O
1	int
]	O
=	O
ptr2	*(char)
[	O
2	int
]	O
;	O
ptr1	*(char)
[	O
2	int
]	O
=	O
ptr2	*(char)
[	O
1	int
]	O
;	O
ptr1	*(char)
[	O
3	int
]	O
=	O
ptr2	*(char)
[	O
0	int
]	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
xpos	int
,	O
text	*(char)
[	O
i	int
+	O
1	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
xpos	int
+=	O
7	int
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:10:%c "	*(char)
,	O
xpos	int
+	O
10	int
,	O
text	*(char)
[	O
7	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
ptr1	*(char)
[	O
0	int
]	O
+=	O
'a'	O
-	O
'1'	O
;	O
ptr1	*(char)
[	O
2	int
]	O
+=	O
'a'	O
-	O
'1'	O
;	O
tptr	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guardE	array(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
len0	int
!=	O
8	int
)	O
{	O
checksum	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
text	*(char)
,	O
0	int
)	O
;	O
text	*(char)
[	O
7	int
]	O
=	O
'0'	O
+	O
checksum	int
;	O
text	*(char)
[	O
8	int
]	O
=	O
'\0'	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guard	array(*(char))
[	O
0	int
]	O
)	O
;	O
xpos	int
=	O
width_of_partial	(*(char))->(int)
(	O
partial	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
,	O
digits	array(*(char))
[	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
]	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
xpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
xpos	int
+=	O
7	int
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guard	array(*(char))
[	O
1	int
]	O
)	O
;	O
xpos	int
+=	O
width_of_partial	(*(char))->(int)
(	O
guard	array(*(char))
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
4	int
;	O
i	int
<	O
8	int
;	O
i	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
,	O
digits	array(*(char))
[	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
]	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
xpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
xpos	int
+=	O
7	int
;	O
}	O
tptr	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guard	array(*(char))
[	O
2	int
]	O
)	O
;	O
}	O
if	O
(	O
(	O
ptr1	*(char)
=	O
spc	*(char)
)	O
)	O
{	O
ptr1	*(char)
++	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
ptr1	*(char)
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
ptr1	*(char)
)	O
==	O
5	int
)	O
{	O
checksum	int
=	O
ean_make_checksum	(*(char),int)->(int)
(	O
text	*(char)
,	O
1	int
)	O
;	O
mirror	*(char)
=	O
upc_mirrortab	array(*(char))
[	O
checksum	int
]	O
+	O
1	int
;	O
}	O
else	O
{	O
checksum	int
=	O
atoi	(*(char))->(int)
(	O
text	*(char)
)	O
%	O
4	int
;	O
mirror	*(char)
=	O
upc_mirrortab2	array(*(char))
[	O
checksum	int
]	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
textinfo	*(char)
,	O
" +"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
"+"	*(char)
)	O
;	O
tptr	*(char)
=	O
textinfo	*(char)
+	O
strlen	(*(char))->(long)
(	O
textinfo	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
i	int
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guardS	array(*(char))
[	O
0	int
]	O
)	O
;	O
xpos	int
+=	O
width_of_partial	(*(char))->(int)
(	O
guardS	array(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
guardS	array(*(char))
[	O
1	int
]	O
)	O
;	O
xpos	int
+=	O
width_of_partial	(*(char))->(int)
(	O
guardS	array(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
ptr1	*(char)
=	O
partial	*(char)
+	O
strlen	(*(char))->(long)
(	O
partial	*(char)
)	O
;	O
ptr2	*(char)
=	O
digits	array(*(char))
[	O
text	*(char)
[	O
i	int
]	O
-	O
'0'	O
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ptr1	*(char)
,	O
ptr2	*(char)
)	O
;	O
if	O
(	O
mirror	*(char)
[	O
i	int
]	O
!=	O
'1'	O
)	O
{	O
ptr1	*(char)
[	O
0	int
]	O
=	O
ptr2	*(char)
[	O
3	int
]	O
;	O
ptr1	*(char)
[	O
1	int
]	O
=	O
ptr2	*(char)
[	O
2	int
]	O
;	O
ptr1	*(char)
[	O
2	int
]	O
=	O
ptr2	*(char)
[	O
1	int
]	O
;	O
ptr1	*(char)
[	O
3	int
]	O
=	O
ptr2	*(char)
[	O
0	int
]	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
tptr	*(char)
,	O
" %i:12:%c"	*(char)
,	O
xpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
tptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tptr	*(char)
)	O
;	O
xpos	int
+=	O
7	int
;	O
}	O
}	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
partial	*(char)
)	O
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
textinfo	*(char)
)	O
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
NULL	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
width	int
)	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
width	int
=	O
width_of_partial	(*(char))->(int)
(	O
partial	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_upc_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
return	O
Barcode_ean_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
;	O
}	O
int	O
Barcode_isbn_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
char	O
*	O
text	*(char)
=	O
malloc	(long)->(*(void))
(	O
24	int
)	O
;	O
char	O
*	O
otext	*(char)
;	O
int	O
i	int
,	O
j	int
,	O
retval	int
;	O
if	O
(	O
!	O
text	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
ENOMEM	int
;	O
return	O
-	O
1	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
"978"	*(char)
)	O
;	O
j	int
=	O
3	int
;	O
otext	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
otext	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
isdigit	(int)->(int)
(	O
otext	*(char)
[	O
i	int
]	O
)	O
)	O
text	*(char)
[	O
j	int
++	O
]	O
=	O
otext	*(char)
[	O
i	int
]	O
;	O
if	O
(	O
j	int
==	O
12	int
)	O
break	O
;	O
}	O
text	*(char)
[	O
j	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
otext	*(char)
,	O
' '	O
)	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
strchr	(*(char),int)->(*(char))
(	O
otext	*(char)
,	O
' '	O
)	O
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
=	O
text	*(char)
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"ISBN"	*(char)
)	O
;	O
retval	int
=	O
Barcode_ean_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
=	O
otext	*(char)
;	O
free	(*(void))->(void)
(	O
text	*(char)
)	O
;	O
return	O
retval	int
;	O
}	O
