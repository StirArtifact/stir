static	O
const	O
char	O
*	O
fnames	array(*(char))
[	O
]	O
=	O
{	O
"%auto"	*(char)
,	O
"%confidential"	*(char)
,	O
"%key"	*(char)
,	O
"%mandatory"	*(char)
,	O
"%prohibit"	*(char)
,	O
"%rec"	*(char)
,	O
"%size"	*(char)
,	O
"%sort"	*(char)
,	O
"%type"	*(char)
,	O
"%typedef"	*(char)
,	O
"%unique"	*(char)
,	O
"%constraint"	*(char)
,	O
"%allowed"	*(char)
}	O
;	O
const	O
char	O
*	O
rec_std_field_name	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
enum	O
rec_std_field_e	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
std_field	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
return	O
*	O
(	O
fnames	array(*(char))
+	O
std_field	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
bool	bool
rec_field_name_p	(*(char))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
return	O
rec_match	(*(char),*(char))->(bool)
(	O
str	*(char)
,	O
"^"	*(char)
REC_FNAME_RE	*(char)
"$"	*(char)
)	O
;	O
}	O
char	O
*	O
rec_field_name_normalise	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
char	O
*	O
normalised_name	*(char)
;	O
int	O
i	long
;	O
normalised_name	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
normalised_name	*(char)
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
normalised_name	*(char)
,	O
str	*(char)
,	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
)	O
;	O
normalised_name	*(char)
[	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
strlen	(*(char))->(long)
(	O
normalised_name	*(char)
)	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
!	O
(	O
(	O
isalnum	(int)->(int)
(	O
normalised_name	*(char)
[	O
i	long
]	O
)	O
)	O
||	O
(	O
normalised_name	*(char)
[	O
i	long
]	O
==	O
'_'	O
)	O
||	O
(	O
normalised_name	*(char)
[	O
i	long
]	O
==	O
'-'	O
)	O
||	O
(	O
normalised_name	*(char)
[	O
i	long
]	O
==	O
'%'	O
)	O
)	O
)	O
{	O
normalised_name	*(char)
[	O
i	long
]	O
=	O
'_'	O
;	O
}	O
}	O
}	O
if	O
(	O
normalised_name	*(char)
)	O
{	O
if	O
(	O
!	O
rec_field_name_p	(*(char))->(bool)
(	O
normalised_name	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
normalised_name	*(char)
)	O
;	O
normalised_name	*(char)
=	O
NULL	O
;	O
}	O
}	O
return	O
normalised_name	*(char)
;	O
}	O
bool	bool
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
const	O
char	O
*	O
name1	*(char)
,	O
const	O
char	O
*	O
name2	*(char)
)	O
{	O
return	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name1	*(char)
,	O
name2	*(char)
)	O
==	O
0	int
)	O
;	O
}	O
