rl_hook_func_t	()->(int)
*	O
rl_event_hook	*(()->(int))
=	O
(	O
rl_hook_func_t	()->(int)
*	O
)	O
NULL	O
;	O
rl_hook_func_t	()->(int)
*	O
rl_signal_event_hook	*(()->(int))
=	O
(	O
rl_hook_func_t	()->(int)
*	O
)	O
NULL	O
;	O
rl_hook_func_t	()->(int)
*	O
rl_input_available_hook	*(()->(int))
=	O
(	O
rl_hook_func_t	()->(int)
*	O
)	O
NULL	O
;	O
rl_getc_func_t	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
*	O
rl_getc_function	*((*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))))->(int))
=	O
rl_getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
;	O
static	O
int	O
_keyboard_input_timeout	int
=	O
100000	int
;	O
static	O
int	O
ibuffer_space	()->(int)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
int	O
rl_get_char	(*(int))->(int)
PARAMS	O
(	O
(	O
int	O
*	O
)	O
)	O
;	O
static	O
int	O
rl_gather_tyi	()->(int)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
int	O
pop_index	int
,	O
push_index	int
;	O
static	O
unsigned	O
char	O
ibuffer	array(char)
[	O
512	int
]	O
;	O
static	O
int	O
ibuffer_len	int
=	O
sizeof	O
(	O
ibuffer	array(char)
)	O
-	O
1	int
;	O
int	O
_rl_any_typein	()->(int)
(	O
)	O
{	O
return	O
any_typein	O
;	O
}	O
int	O
_rl_pushed_input_available	()->(int)
(	O
)	O
{	O
return	O
(	O
push_index	int
!=	O
pop_index	int
)	O
;	O
}	O
static	O
int	O
ibuffer_space	()->(int)
(	O
)	O
{	O
if	O
(	O
pop_index	int
>	O
push_index	int
)	O
return	O
(	O
pop_index	int
-	O
push_index	int
-	O
1	int
)	O
;	O
else	O
return	O
(	O
ibuffer_len	int
-	O
(	O
push_index	int
-	O
pop_index	int
)	O
)	O
;	O
}	O
static	O
int	O
rl_get_char	(*(int))->(int)
(	O
key	int
)	O
int	O
*	O
key	int
;	O
{	O
if	O
(	O
push_index	int
==	O
pop_index	int
)	O
return	O
(	O
0	int
)	O
;	O
*	O
key	int
=	O
ibuffer	array(char)
[	O
pop_index	int
++	O
]	O
;	O
if	O
(	O
pop_index	int
>	O
ibuffer_len	int
)	O
pop_index	int
=	O
0	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
int	O
_rl_unget_char	(int)->(int)
(	O
key	int
)	O
int	O
key	int
;	O
{	O
if	O
(	O
ibuffer_space	()->(int)
(	O
)	O
)	O
{	O
pop_index	int
--	O
;	O
if	O
(	O
pop_index	int
<	O
0	int
)	O
pop_index	int
=	O
ibuffer_len	int
;	O
ibuffer	array(char)
[	O
pop_index	int
]	O
=	O
key	int
;	O
return	O
(	O
1	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
rl_gather_tyi	()->(int)
(	O
)	O
{	O
int	O
tty	int
;	O
register	O
int	O
tem	int
,	O
result	int
;	O
int	O
chars_avail	int
,	O
k	int
;	O
char	O
input	char
;	O
fd_set	struct(array(long))
readfds	struct(array(long))
,	O
exceptfds	struct(array(long))
;	O
struct	O
timeval	struct(long,long)
timeout	struct(long,long)
;	O
chars_avail	int
=	O
0	int
;	O
input	char
=	O
0	int
;	O
tty	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
FD_ZERO	O
(	O
&	O
readfds	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
exceptfds	struct(array(long))
)	O
;	O
FD_SET	O
(	O
tty	int
,	O
&	O
readfds	struct(array(long))
)	O
;	O
FD_SET	O
(	O
tty	int
,	O
&	O
exceptfds	struct(array(long))
)	O
;	O
USEC_TO_TIMEVAL	O
(	O
_keyboard_input_timeout	int
,	O
timeout	struct(long,long)
)	O
;	O
result	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
tty	int
+	O
1	int
,	O
&	O
readfds	struct(array(long))
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
NULL	O
,	O
&	O
exceptfds	struct(array(long))
,	O
&	O
timeout	struct(long,long)
)	O
;	O
if	O
(	O
result	int
<=	O
0	int
)	O
return	O
0	int
;	O
result	int
=	O
-	O
1	int
;	O
errno	O
=	O
0	int
;	O
result	int
=	O
ioctl	(int,long)->(int)
(	O
tty	int
,	O
FIONREAD	int
,	O
&	O
chars_avail	int
)	O
;	O
if	O
(	O
result	int
==	O
-	O
1	int
&&	O
errno	O
==	O
EIO	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
result	int
==	O
-	O
1	int
)	O
chars_avail	int
=	O
0	int
;	O
if	O
(	O
result	int
==	O
-	O
1	int
)	O
{	O
tem	int
=	O
fcntl	(int,int)->(int)
(	O
tty	int
,	O
F_GETFL	int
,	O
0	int
)	O
;	O
fcntl	(int,int)->(int)
(	O
tty	int
,	O
F_SETFL	int
,	O
(	O
tem	int
|	O
O_NDELAY	O
)	O
)	O
;	O
chars_avail	int
=	O
read	(int,*(void),long)->(long)
(	O
tty	int
,	O
&	O
input	char
,	O
1	int
)	O
;	O
fcntl	(int,int)->(int)
(	O
tty	int
,	O
F_SETFL	int
,	O
tem	int
)	O
;	O
if	O
(	O
chars_avail	int
==	O
-	O
1	int
&&	O
errno	O
==	O
EAGAIN	int
)	O
return	O
0	int
;	O
if	O
(	O
chars_avail	int
==	O
-	O
1	int
&&	O
errno	O
==	O
EIO	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
chars_avail	int
==	O
0	int
)	O
{	O
rl_stuff_char	(int)->(int)
(	O
EOF	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
if	O
(	O
chars_avail	int
<=	O
0	int
)	O
return	O
0	int
;	O
tem	int
=	O
ibuffer_space	()->(int)
(	O
)	O
;	O
if	O
(	O
chars_avail	int
>	O
tem	int
)	O
chars_avail	int
=	O
tem	int
;	O
if	O
(	O
tem	int
<	O
ibuffer_len	int
)	O
chars_avail	int
=	O
0	int
;	O
if	O
(	O
result	int
!=	O
-	O
1	int
)	O
{	O
while	O
(	O
chars_avail	int
--	O
)	O
{	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
k	int
=	O
(	O
*	O
rl_getc_function	*((*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))))->(int))
)	O
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
rl_stuff_char	(int)->(int)
(	O
k	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
k	int
==	O
NEWLINE	char
||	O
k	int
==	O
RETURN	O
)	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
chars_avail	int
)	O
rl_stuff_char	(int)->(int)
(	O
input	char
)	O
;	O
}	O
return	O
1	int
;	O
}	O
int	O
rl_set_keyboard_input_timeout	(int)->(int)
(	O
u	int
)	O
int	O
u	int
;	O
{	O
int	O
o	int
;	O
o	int
=	O
_keyboard_input_timeout	int
;	O
if	O
(	O
u	int
>=	O
0	int
)	O
_keyboard_input_timeout	int
=	O
u	int
;	O
return	O
(	O
o	int
)	O
;	O
}	O
int	O
_rl_input_available	()->(int)
(	O
)	O
{	O
fd_set	struct(array(long))
readfds	struct(array(long))
,	O
exceptfds	struct(array(long))
;	O
struct	O
timeval	struct(long,long)
timeout	struct(long,long)
;	O
int	O
tty	int
;	O
if	O
(	O
rl_input_available_hook	*(()->(int))
)	O
return	O
(	O
*	O
rl_input_available_hook	*(()->(int))
)	O
(	O
)	O
;	O
tty	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
FD_ZERO	O
(	O
&	O
readfds	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
exceptfds	struct(array(long))
)	O
;	O
FD_SET	O
(	O
tty	int
,	O
&	O
readfds	struct(array(long))
)	O
;	O
FD_SET	O
(	O
tty	int
,	O
&	O
exceptfds	struct(array(long))
)	O
;	O
timeout	struct(long,long)
.	O
tv_sec	long
=	O
0	int
;	O
timeout	struct(long,long)
.	O
tv_usec	long
=	O
_keyboard_input_timeout	int
;	O
return	O
(	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
tty	int
+	O
1	int
,	O
&	O
readfds	struct(array(long))
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
NULL	O
,	O
&	O
exceptfds	struct(array(long))
,	O
&	O
timeout	struct(long,long)
)	O
>	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_rl_input_queued	(int)->(int)
(	O
t	int
)	O
int	O
t	int
;	O
{	O
int	O
old_timeout	int
,	O
r	int
;	O
old_timeout	int
=	O
rl_set_keyboard_input_timeout	(int)->(int)
(	O
t	int
)	O
;	O
r	int
=	O
_rl_input_available	()->(int)
(	O
)	O
;	O
rl_set_keyboard_input_timeout	(int)->(int)
(	O
old_timeout	int
)	O
;	O
return	O
r	int
;	O
}	O
void	O
_rl_insert_typein	(int)->(void)
(	O
c	int
)	O
int	O
c	int
;	O
{	O
int	O
key	int
,	O
t	int
,	O
i	int
;	O
char	O
*	O
string	*(char)
;	O
i	int
=	O
key	int
=	O
0	int
;	O
string	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
ibuffer_len	int
+	O
1	int
)	O
;	O
string	*(char)
[	O
i	int
++	O
]	O
=	O
(	O
char	O
)	O
c	int
;	O
while	O
(	O
(	O
t	int
=	O
rl_get_char	(*(int))->(int)
(	O
&	O
key	int
)	O
)	O
&&	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
type	enum(int,int,int,int)
==	O
ISFUNC	int
&&	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
==	O
rl_insert	(int,int)->(int)
)	O
string	*(char)
[	O
i	int
++	O
]	O
=	O
key	int
;	O
if	O
(	O
t	int
)	O
_rl_unget_char	(int)->(int)
(	O
key	int
)	O
;	O
string	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
rl_insert_text	(*(char))->(int)
(	O
string	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
}	O
int	O
rl_stuff_char	(int)->(int)
(	O
key	int
)	O
int	O
key	int
;	O
{	O
if	O
(	O
ibuffer_space	()->(int)
(	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
key	int
==	O
EOF	O
)	O
{	O
key	int
=	O
NEWLINE	char
;	O
rl_pending_input	int
=	O
EOF	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
;	O
}	O
ibuffer	array(char)
[	O
push_index	int
++	O
]	O
=	O
key	int
;	O
if	O
(	O
push_index	int
>	O
ibuffer_len	int
)	O
push_index	int
=	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
rl_execute_next	(int)->(int)
(	O
c	int
)	O
int	O
c	int
;	O
{	O
rl_pending_input	int
=	O
c	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_clear_pending_input	()->(int)
(	O
)	O
{	O
rl_pending_input	int
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_INPUTPENDING	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_read_key	()->(int)
(	O
)	O
{	O
int	O
c	int
,	O
r	int
;	O
if	O
(	O
rl_pending_input	int
)	O
{	O
c	int
=	O
rl_pending_input	int
;	O
rl_clear_pending_input	()->(int)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
c	int
=	O
_rl_next_macro_key	()->(int)
(	O
)	O
)	O
return	O
(	O
c	int
)	O
;	O
if	O
(	O
rl_event_hook	*(()->(int))
)	O
{	O
while	O
(	O
rl_event_hook	*(()->(int))
)	O
{	O
if	O
(	O
rl_get_char	(*(int))->(int)
(	O
&	O
c	int
)	O
!=	O
0	int
)	O
break	O
;	O
if	O
(	O
(	O
r	int
=	O
rl_gather_tyi	()->(int)
(	O
)	O
)	O
<	O
0	int
)	O
{	O
rl_done	int
=	O
1	int
;	O
return	O
(	O
errno	O
==	O
EIO	int
?	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_READCMD	int
)	O
?	O
READERR	O
:	O
EOF	O
)	O
:	O
'\n'	O
)	O
;	O
}	O
else	O
if	O
(	O
r	int
>	O
0	int
)	O
continue	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
rl_done	int
)	O
return	O
(	O
'\n'	O
)	O
;	O
(	O
*	O
rl_event_hook	*(()->(int))
)	O
(	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rl_get_char	(*(int))->(int)
(	O
&	O
c	int
)	O
==	O
0	int
)	O
c	int
=	O
(	O
*	O
rl_getc_function	*((*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))))->(int))
)	O
(	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
}	O
}	O
return	O
(	O
c	int
)	O
;	O
}	O
int	O
rl_getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
FILE	struct
*	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
{	O
int	O
result	int
;	O
unsigned	O
char	O
c	int
;	O
sigset_t	struct(array(long))
empty_set	struct(array(long))
;	O
fd_set	struct(array(long))
readfds	struct(array(long))
;	O
while	O
(	O
1	int
)	O
{	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
result	int
=	O
0	int
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
empty_set	struct(array(long))
)	O
;	O
FD_ZERO	O
(	O
&	O
readfds	struct(array(long))
)	O
;	O
FD_SET	O
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
&	O
readfds	struct(array(long))
)	O
;	O
result	int
=	O
pselect	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)),*(struct(array(long))))->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
+	O
1	int
,	O
&	O
readfds	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
empty_set	struct(array(long))
)	O
;	O
if	O
(	O
result	int
>=	O
0	int
)	O
result	int
=	O
read	(int,*(void),long)->(long)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
&	O
c	int
,	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
;	O
if	O
(	O
result	int
==	O
sizeof	O
(	O
unsigned	O
char	O
)	O
)	O
return	O
(	O
c	int
)	O
;	O
if	O
(	O
result	int
==	O
0	int
)	O
return	O
(	O
EOF	O
)	O
;	O
if	O
(	O
errno	O
==	O
X_EWOULDBLOCK	O
||	O
errno	O
==	O
X_EAGAIN	O
)	O
{	O
if	O
(	O
sh_unset_nodelay_mode	(int)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
<	O
0	int
)	O
return	O
(	O
EOF	O
)	O
;	O
continue	O
;	O
}	O
handle_error	O
:	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
return	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_READCMD	int
)	O
?	O
READERR	O
:	O
EOF	O
)	O
;	O
else	O
if	O
(	O
_rl_caught_signal	int
==	O
SIGHUP	int
||	O
_rl_caught_signal	int
==	O
SIGTERM	int
)	O
return	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_READCMD	int
)	O
?	O
READERR	O
:	O
EOF	O
)	O
;	O
else	O
if	O
(	O
_rl_caught_signal	int
==	O
SIGINT	int
||	O
_rl_caught_signal	int
==	O
SIGQUIT	int
)	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
else	O
if	O
(	O
_rl_caught_signal	int
==	O
SIGWINCH	int
)	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
else	O
if	O
(	O
_rl_caught_signal	int
==	O
SIGALRM	int
||	O
_rl_caught_signal	int
==	O
SIGVTALRM	int
)	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
rl_signal_event_hook	*(()->(int))
)	O
(	O
*	O
rl_signal_event_hook	*(()->(int))
)	O
(	O
)	O
;	O
}	O
}	O
int	O
_rl_read_mbchar	(*(char),int)->(int)
(	O
mbchar	*(char)
,	O
size	int
)	O
char	O
*	O
mbchar	*(char)
;	O
int	O
size	int
;	O
{	O
int	O
mb_len	int
,	O
c	int
;	O
size_t	long
mbchar_bytes_length	long
;	O
wchar_t	int
wc	int
;	O
mbstate_t	struct(int,union(int,array(char)))
ps	struct(int,union(int,array(char)))
,	O
ps_back	struct(int,union(int,array(char)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps_back	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
mb_len	int
=	O
0	int
;	O
while	O
(	O
mb_len	int
<	O
size	int
)	O
{	O
RL_SETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
c	int
=	O
rl_read_key	()->(int)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
if	O
(	O
c	int
<	O
0	int
)	O
break	O
;	O
mbchar	*(char)
[	O
mb_len	int
++	O
]	O
=	O
c	int
;	O
mbchar_bytes_length	long
=	O
mbrtowc	(*(int),*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
&	O
wc	int
,	O
mbchar	*(char)
,	O
mb_len	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
;	O
if	O
(	O
mbchar_bytes_length	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
break	O
;	O
else	O
if	O
(	O
mbchar_bytes_length	long
==	O
(	O
size_t	long
)	O
(	O
-	O
2	int
)	O
)	O
{	O
ps	struct(int,union(int,array(char)))
=	O
ps_back	struct(int,union(int,array(char)))
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
mbchar_bytes_length	long
==	O
0	int
)	O
{	O
mbchar	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
mb_len	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
mbchar_bytes_length	long
>	O
(	O
size_t	long
)	O
(	O
0	int
)	O
)	O
break	O
;	O
}	O
return	O
mb_len	int
;	O
}	O
int	O
_rl_read_mbstring	(int,*(char),int)->(int)
(	O
first	int
,	O
mb	array(char)
,	O
mlen	int
)	O
int	O
first	int
;	O
char	O
*	O
mb	array(char)
;	O
int	O
mlen	int
;	O
{	O
int	O
i	int
,	O
c	int
;	O
mbstate_t	struct(int,union(int,array(char)))
ps	struct(int,union(int,array(char)))
;	O
c	int
=	O
first	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
mb	array(char)
,	O
0	int
,	O
mlen	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
c	int
>=	O
0	int
&&	O
i	int
<	O
mlen	int
;	O
i	int
++	O
)	O
{	O
mb	array(char)
[	O
i	int
]	O
=	O
(	O
char	O
)	O
c	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
if	O
(	O
_rl_get_char_len	(*(char),*(struct(int,union(int,array(char)))))->(int)
(	O
mb	array(char)
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
==	O
-	O
2	int
)	O
{	O
RL_SETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
c	int
=	O
rl_read_key	()->(int)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
}	O
else	O
break	O
;	O
}	O
return	O
c	int
;	O
}	O
