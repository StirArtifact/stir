static	O
int	O
_url_prog_init	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_url_t	*(struct)
)	O
;	O
static	O
struct	O
_mu_record	struct(int,*(char),int,int,int,*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)),*((*(struct))->(int)),*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)),*((*(struct))->(int)),*(void),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),int)->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(*((*`)->(int))))->(int)),*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(char),int)->(int)))
_prog_record	struct(int,*(char),int,int,int,*((*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*((*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*(void),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int)->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),int)->(int)))
=	O
{	O
MU_PROG_PRIO	int
,	O
MU_PROG_SCHEME	*(char)
,	O
MU_RECORD_DEFAULT	int
,	O
MU_URL_SCHEME	int
|	O
MU_URL_PATH	int
|	O
MU_URL_QUERY	int
,	O
MU_URL_PATH	int
,	O
_url_prog_init	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)
,	O
_mu_mailer_mailbox_init	(*(struct))->(int)
,	O
_mu_mailer_prog_init	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
,	O
_mu_mailer_folder_init	(*(struct))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
mu_record_t	*(struct)
mu_prog_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
=	O
&	O
_prog_record	struct(int,*(char),int,int,int,*((*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*((*(struct(*`,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`)))->(int)),*((*(struct))->(int)),*(void),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int)->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*((*`)->(int))))->(int)),*((*(struct(int,*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),int)->(int)))
;	O
static	O
int	O
_url_prog_uplevel	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int))))))->(int)
(	O
const	O
mu_url_t	*(struct)
orig	*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*(struct`))->(void)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(*`))->(int))))
,	O
mu_url_t	*(struct)
*	O
up	*(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))
)	O
{	O
return	O
MU_ERR_NOENT	O
;	O
}	O
static	O
int	O
_url_prog_init	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_url_t	*(struct)
url	*(struct)
)	O
{	O
url	*(struct)
->	O
_uplevel	*((*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`))))->(int))
=	O
_url_prog_uplevel	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(*(struct(int,*(char),*(char),*(char),*(struct`),*(char),*(char),short,*(char),*(char),*(*`),int,*(*`),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int))))))->(int)
;	O
return	O
0	int
;	O
}	O
static	O
void	O
prog_destroy	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
mu_mailer_t	*(struct)
)	O
;	O
static	O
int	O
prog_open	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int)
(	O
mu_mailer_t	*(struct)
,	O
int	O
)	O
;	O
static	O
int	O
prog_close	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailer_t	*(struct)
)	O
;	O
static	O
int	O
prog_send_message	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_mailer_t	*(struct)
,	O
mu_message_t	*(struct)
,	O
mu_address_t	*(struct)
,	O
mu_address_t	*(struct)
)	O
;	O
int	O
_mu_mailer_prog_init	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
int	O
status	int
;	O
mu_progmailer_t	*(struct)
pm	*(*(struct))
;	O
status	int
=	O
mu_progmailer_create	(*(*(struct)))->(int)
(	O
&	O
pm	*(*(struct))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mailer	*(struct)
->	O
data	*(void)
=	O
pm	*(*(struct))
;	O
mailer	*(struct)
->	O
_destroy	*((*(struct),*(void))->(int))
=	O
prog_destroy	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
;	O
mailer	*(struct)
->	O
_open	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int))
=	O
prog_open	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int)
;	O
mailer	*(struct)
->	O
_close	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int))
=	O
prog_close	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
;	O
mailer	*(struct)
->	O
_send_message	*((*(struct(*(struct`),*(struct`),*(struct`),int,*(struct`),*(struct`),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))->(int))
=	O
prog_send_message	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
;	O
return	O
0	int
;	O
}	O
static	O
void	O
prog_destroy	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(void)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
mu_progmailer_destroy	(*(*(struct)))->(void)
(	O
(	O
mu_progmailer_t	*(struct)
*	O
)	O
&	O
mailer	*(struct)
->	O
data	*(void)
)	O
;	O
}	O
static	O
int	O
prog_open	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),int)->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
int	O
flags	int
)	O
{	O
mu_progmailer_t	*(struct)
pm	*(*(struct))
=	O
mailer	*(struct)
->	O
data	*(void)
;	O
int	O
status	int
;	O
const	O
char	O
*	O
path	*(char)
;	O
if	O
(	O
pm	*(*(struct))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mailer	*(struct)
->	O
flags	int
=	O
flags	int
;	O
if	O
(	O
(	O
status	int
=	O
mu_url_sget_path	(*(struct),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
&	O
path	*(char)
)	O
)	O
)	O
return	O
status	int
;	O
if	O
(	O
access	(*(char),int)->(int)
(	O
path	*(char)
,	O
X_OK	int
)	O
==	O
-	O
1	int
)	O
return	O
errno	O
;	O
status	int
=	O
mu_progmailer_set_command	(*(struct),*(char))->(int)
(	O
pm	*(*(struct))
,	O
path	*(char)
)	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_TRACE	O
,	O
(	O
"prog (%s)"	*(char)
,	O
path	*(char)
)	O
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
prog_close	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
)	O
{	O
return	O
mu_progmailer_close	(*(struct))->(int)
(	O
mailer	*(struct)
->	O
data	*(void)
)	O
;	O
}	O
struct	O
prog_exp	struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_address_t	*(struct)
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
mu_address_t	*(struct)
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
;	O
static	O
int	O
_expand_err	(*(*(char)),*(char),int)->(int)
(	O
char	O
*	O
*	O
ret	*(*(struct))
,	O
const	O
char	O
*	O
prefix	*(char)
,	O
int	O
status	int
)	O
{	O
if	O
(	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
ret	*(*(struct))
,	O
"%s: %s"	*(char)
,	O
prefix	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
static	O
int	O
_expand_sender	(*(struct(*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
struct	O
prog_exp	struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
char	O
*	O
*	O
ret	*(*(struct))
)	O
{	O
int	O
status	int
=	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
1	int
,	O
ret	*(*(struct))
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
return	O
MU_WRDSE_OK	O
;	O
case	O
ENOMEM	int
:	O
return	O
MU_WRDSE_NOSPACE	O
;	O
}	O
return	O
_expand_err	(*(*(char)),*(char),int)->(int)
(	O
ret	*(*(struct))
,	O
"getting email"	*(char)
,	O
status	int
)	O
;	O
}	O
static	O
int	O
address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
mu_address_t	*(struct)
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
int	O
status	int
;	O
status	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_address_union	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
message_read_rcpt	(*(struct),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
mu_header_t	*(struct)
header	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
value	*(char)
;	O
int	O
status	int
;	O
status	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
header	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
value	*(char)
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_CC	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
value	*(char)
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
status	int
;	O
status	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_BCC	*(char)
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
address_add	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
value	*(char)
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
status	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_expand_rcpt	(*(struct(*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
struct	O
prog_exp	struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
char	O
*	O
*	O
ret	*(*(struct))
)	O
{	O
int	O
status	int
;	O
size_t	long
i	long
,	O
count	*(long)
=	O
0	int
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
str	*(struct)
;	O
mu_address_t	*(struct)
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
else	O
{	O
status	int
=	O
message_read_rcpt	(*(struct),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
msg	*(struct)
,	O
&	O
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
_expand_err	(*(*(char)),*(char),int)->(int)
(	O
ret	*(*(struct))
,	O
"reading recipients"	*(char)
,	O
status	int
)	O
;	O
}	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
count	*(long)
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	*(long)
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
email	*(char)
;	O
if	O
(	O
i	long
>	O
1	int
)	O
len	long
++	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
i	long
,	O
&	O
email	*(char)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
_expand_err	(*(*(char)),*(char),int)->(int)
(	O
ret	*(*(struct))
,	O
"reading email"	*(char)
,	O
status	int
)	O
;	O
}	O
if	O
(	O
email	*(char)
)	O
len	long
+=	O
strlen	(*(char))->(long)
(	O
email	*(char)
)	O
;	O
}	O
str	*(struct)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
str	*(struct)
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
MU_WRDSE_NOSPACE	O
;	O
}	O
*	O
ret	*(*(struct))
=	O
str	*(struct)
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	*(long)
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
email	*(char)
;	O
if	O
(	O
i	long
>	O
1	int
)	O
*	O
str	*(struct)
++	O
=	O
' '	O
;	O
if	O
(	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
i	long
,	O
&	O
email	*(char)
)	O
||	O
!	O
email	*(char)
)	O
continue	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
str	*(struct)
,	O
email	*(char)
)	O
;	O
str	*(struct)
+=	O
strlen	(*(char))->(long)
(	O
email	*(char)
)	O
;	O
}	O
*	O
str	*(struct)
=	O
0	int
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
tmp_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
prog_getvar	(*(*(char)),*(char),long,*(void))->(int)
(	O
char	O
*	O
*	O
ret	*(*(struct))
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
nlen	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
prog_exp	struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
*	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
data	*(void)
;	O
if	O
(	O
SEQ	O
(	O
"sender"	*(char)
,	O
name	*(char)
,	O
nlen	long
)	O
)	O
return	O
_expand_sender	(*(struct(*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
ret	*(*(struct))
)	O
;	O
if	O
(	O
SEQ	O
(	O
"rcpt"	*(char)
,	O
name	*(char)
,	O
nlen	long
)	O
)	O
return	O
_expand_rcpt	(*(struct(*(struct),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
ret	*(*(struct))
)	O
;	O
return	O
MU_WRDSE_UNDEF	O
;	O
}	O
static	O
int	O
url_to_argv	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(int),*(*(*(char))))->(int)
(	O
mu_url_t	*(struct)
url	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
int	O
*	O
pargc	*(int)
,	O
char	O
*	O
*	O
*	O
pargv	*(*(*(char)))
)	O
{	O
int	O
rc	int
;	O
struct	O
prog_exp	struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
char	O
*	O
*	O
query	*(*(char))
;	O
size_t	long
i	long
;	O
size_t	long
argc	long
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
wsflags	int
;	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
.	O
msg	*(struct)
=	O
msg	*(struct)
;	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
.	O
rcpt_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
.	O
sender_addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_getvar	*((*(*(char)),*(char),long,*(void))->(int))
=	O
prog_getvar	(*(*(char)),*(char),long,*(void))->(int)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_closure	*(void)
=	O
&	O
pe	*(struct(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
wsflags	int
=	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_NOCMD	O
|	O
MU_WRDSF_GETVAR	O
|	O
MU_WRDSF_CLOSURE	O
;	O
rc	int
=	O
mu_url_sget_query	(*(struct),*(long),*(*(*(char))))->(int)
(	O
url	*(struct)
,	O
&	O
argc	long
,	O
&	O
query	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
argv	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
argc	long
+	O
2	int
,	O
sizeof	O
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
argv	*(*(char))
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_url_aget_path	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
return	O
rc	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
query	*(*(char))
[	O
i	long
]	O
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
wsflags	int
)	O
)	O
{	O
mu_argcv_free	(long,*(*(char)))->(void)
(	O
i	long
,	O
argv	*(*(char))
)	O
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
errno	O
;	O
}	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
==	O
0	int
)	O
argv	*(*(char))
[	O
i	long
+	O
1	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
else	O
argv	*(*(char))
[	O
i	long
+	O
1	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
argv	*(*(char))
[	O
i	long
+	O
1	int
]	O
)	O
{	O
mu_argcv_free	(long,*(*(char)))->(void)
(	O
i	long
,	O
argv	*(*(char))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
wsflags	int
|=	O
MU_WRDSF_REUSE	O
;	O
}	O
argv	*(*(char))
[	O
i	long
+	O
1	int
]	O
=	O
NULL	O
;	O
if	O
(	O
wsflags	int
&	O
MU_WRDSF_REUSE	O
)	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
*	O
pargc	*(int)
=	O
argc	long
;	O
*	O
pargv	*(*(*(char)))
=	O
argv	*(*(char))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
prog_send_message	(*(struct(*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,short,*`,*`,*`,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,*`,int,int)),*(struct),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_mailer_t	*(struct)
mailer	*(struct)
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_address_t	*(struct)
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
mu_progmailer_t	*(struct)
pm	*(*(struct))
=	O
mailer	*(struct)
->	O
data	*(void)
;	O
int	O
argc	long
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
int	O
status	int
;	O
const	O
char	O
*	O
command	*(char)
;	O
status	int
=	O
mu_url_sget_path	(*(struct),*(*(char)))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
&	O
command	*(char)
)	O
;	O
if	O
(	O
status	int
&&	O
status	int
!=	O
MU_ERR_NOENT	O
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot get path from URL: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_progmailer_set_command	(*(struct),*(char))->(int)
(	O
pm	*(*(struct))
,	O
command	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot set progmailer command: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
url_to_argv	(*(struct(int,*(char),*(char),*(char),*(struct),*(char),*(char),short,*(char),*(char),*(*(char)),int,*(*(char)),int,*(void),*((*`)->(void)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)))),*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(int),*(*(*(char))))->(int)
(	O
mailer	*(struct)
->	O
url	*(struct)
,	O
msg	*(struct)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"cannot convert URL to command line: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
status	int
;	O
}	O
status	int
=	O
mu_progmailer_open	(*(struct),*(*(char)))->(int)
(	O
pm	*(*(struct))
,	O
argv	*(*(char))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_progmailer_send	(*(struct),*(struct))->(int)
(	O
pm	*(*(struct))
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
mailer	*(struct)
->	O
observable	*(struct)
,	O
MU_EVT_MAILER_MESSAGE_SENT	int
,	O
msg	*(struct)
)	O
;	O
else	O
mu_debug	O
(	O
MU_DEBCAT_MAILER	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"progmailer error: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
}	O
mu_argcv_free	(long,*(*(char)))->(void)
(	O
argc	long
,	O
argv	*(*(char))
)	O
;	O
return	O
status	int
;	O
}	O
