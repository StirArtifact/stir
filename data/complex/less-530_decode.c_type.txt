extern	O
int	O
erase_char	int
,	O
erase2_char	int
,	O
kill_char	int
;	O
extern	O
int	O
secure	int
;	O
static	O
unsigned	O
char	O
cmdtable	array(char)
[	O
]	O
=	O
{	O
'\r'	O
,	O
0	int
,	O
A_F_LINE	int
,	O
'\n'	O
,	O
0	int
,	O
A_F_LINE	int
,	O
'e'	O
,	O
0	int
,	O
A_F_LINE	int
,	O
'j'	O
,	O
0	int
,	O
A_F_LINE	int
,	O
SK	O
(	O
SK_DOWN_ARROW	int
)	O
,	O
0	int
,	O
A_F_LINE	int
,	O
CONTROL	O
(	O
'E'	O
)	O
,	O
0	int
,	O
A_F_LINE	int
,	O
CONTROL	O
(	O
'N'	O
)	O
,	O
0	int
,	O
A_F_LINE	int
,	O
'k'	O
,	O
0	int
,	O
A_B_LINE	int
,	O
'y'	O
,	O
0	int
,	O
A_B_LINE	int
,	O
CONTROL	O
(	O
'Y'	O
)	O
,	O
0	int
,	O
A_B_LINE	int
,	O
SK	O
(	O
SK_CONTROL_K	int
)	O
,	O
0	int
,	O
A_B_LINE	int
,	O
CONTROL	O
(	O
'P'	O
)	O
,	O
0	int
,	O
A_B_LINE	int
,	O
SK	O
(	O
SK_UP_ARROW	int
)	O
,	O
0	int
,	O
A_B_LINE	int
,	O
'J'	O
,	O
0	int
,	O
A_FF_LINE	int
,	O
'K'	O
,	O
0	int
,	O
A_BF_LINE	int
,	O
'Y'	O
,	O
0	int
,	O
A_BF_LINE	int
,	O
'd'	O
,	O
0	int
,	O
A_F_SCROLL	int
,	O
CONTROL	O
(	O
'D'	O
)	O
,	O
0	int
,	O
A_F_SCROLL	int
,	O
'u'	O
,	O
0	int
,	O
A_B_SCROLL	int
,	O
CONTROL	O
(	O
'U'	O
)	O
,	O
0	int
,	O
A_B_SCROLL	int
,	O
' '	O
,	O
0	int
,	O
A_F_SCREEN	int
,	O
'f'	O
,	O
0	int
,	O
A_F_SCREEN	int
,	O
CONTROL	O
(	O
'F'	O
)	O
,	O
0	int
,	O
A_F_SCREEN	int
,	O
CONTROL	O
(	O
'V'	O
)	O
,	O
0	int
,	O
A_F_SCREEN	int
,	O
SK	O
(	O
SK_PAGE_DOWN	int
)	O
,	O
0	int
,	O
A_F_SCREEN	int
,	O
'b'	O
,	O
0	int
,	O
A_B_SCREEN	int
,	O
CONTROL	O
(	O
'B'	O
)	O
,	O
0	int
,	O
A_B_SCREEN	int
,	O
ESC	O
,	O
'v'	O
,	O
0	int
,	O
A_B_SCREEN	int
,	O
SK	O
(	O
SK_PAGE_UP	int
)	O
,	O
0	int
,	O
A_B_SCREEN	int
,	O
'z'	O
,	O
0	int
,	O
A_F_WINDOW	int
,	O
'w'	O
,	O
0	int
,	O
A_B_WINDOW	int
,	O
ESC	O
,	O
' '	O
,	O
0	int
,	O
A_FF_SCREEN	int
,	O
'F'	O
,	O
0	int
,	O
A_F_FOREVER	int
,	O
ESC	O
,	O
'F'	O
,	O
0	int
,	O
A_F_UNTIL_HILITE	int
,	O
'R'	O
,	O
0	int
,	O
A_FREPAINT	int
,	O
'r'	O
,	O
0	int
,	O
A_REPAINT	int
,	O
CONTROL	O
(	O
'R'	O
)	O
,	O
0	int
,	O
A_REPAINT	int
,	O
CONTROL	O
(	O
'L'	O
)	O
,	O
0	int
,	O
A_REPAINT	int
,	O
ESC	O
,	O
'u'	O
,	O
0	int
,	O
A_UNDO_SEARCH	int
,	O
'g'	O
,	O
0	int
,	O
A_GOLINE	int
,	O
SK	O
(	O
SK_HOME	int
)	O
,	O
0	int
,	O
A_GOLINE	int
,	O
'<'	O
,	O
0	int
,	O
A_GOLINE	int
,	O
ESC	O
,	O
'<'	O
,	O
0	int
,	O
A_GOLINE	int
,	O
'p'	O
,	O
0	int
,	O
A_PERCENT	int
,	O
'%'	O
,	O
0	int
,	O
A_PERCENT	int
,	O
ESC	O
,	O
'['	O
,	O
0	int
,	O
A_LSHIFT	int
,	O
ESC	O
,	O
']'	O
,	O
0	int
,	O
A_RSHIFT	int
,	O
ESC	O
,	O
'('	O
,	O
0	int
,	O
A_LSHIFT	int
,	O
ESC	O
,	O
')'	O
,	O
0	int
,	O
A_RSHIFT	int
,	O
ESC	O
,	O
'{'	O
,	O
0	int
,	O
A_LLSHIFT	int
,	O
ESC	O
,	O
'}'	O
,	O
0	int
,	O
A_RRSHIFT	int
,	O
SK	O
(	O
SK_RIGHT_ARROW	int
)	O
,	O
0	int
,	O
A_RSHIFT	int
,	O
SK	O
(	O
SK_LEFT_ARROW	int
)	O
,	O
0	int
,	O
A_LSHIFT	int
,	O
SK	O
(	O
SK_CTL_RIGHT_ARROW	int
)	O
,	O
0	int
,	O
A_RRSHIFT	int
,	O
SK	O
(	O
SK_CTL_LEFT_ARROW	int
)	O
,	O
0	int
,	O
A_LLSHIFT	int
,	O
'{'	O
,	O
0	int
,	O
A_F_BRACKET	int
|	O
A_EXTRA	int
,	O
'{'	O
,	O
'}'	O
,	O
0	int
,	O
'}'	O
,	O
0	int
,	O
A_B_BRACKET	int
|	O
A_EXTRA	int
,	O
'{'	O
,	O
'}'	O
,	O
0	int
,	O
'('	O
,	O
0	int
,	O
A_F_BRACKET	int
|	O
A_EXTRA	int
,	O
'('	O
,	O
')'	O
,	O
0	int
,	O
')'	O
,	O
0	int
,	O
A_B_BRACKET	int
|	O
A_EXTRA	int
,	O
'('	O
,	O
')'	O
,	O
0	int
,	O
'['	O
,	O
0	int
,	O
A_F_BRACKET	int
|	O
A_EXTRA	int
,	O
'['	O
,	O
']'	O
,	O
0	int
,	O
']'	O
,	O
0	int
,	O
A_B_BRACKET	int
|	O
A_EXTRA	int
,	O
'['	O
,	O
']'	O
,	O
0	int
,	O
ESC	O
,	O
CONTROL	O
(	O
'F'	O
)	O
,	O
0	int
,	O
A_F_BRACKET	int
,	O
ESC	O
,	O
CONTROL	O
(	O
'B'	O
)	O
,	O
0	int
,	O
A_B_BRACKET	int
,	O
'G'	O
,	O
0	int
,	O
A_GOEND	int
,	O
ESC	O
,	O
'G'	O
,	O
0	int
,	O
A_GOEND_BUF	int
,	O
ESC	O
,	O
'>'	O
,	O
0	int
,	O
A_GOEND	int
,	O
'>'	O
,	O
0	int
,	O
A_GOEND	int
,	O
SK	O
(	O
SK_END	int
)	O
,	O
0	int
,	O
A_GOEND	int
,	O
'P'	O
,	O
0	int
,	O
A_GOPOS	int
,	O
'0'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'1'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'2'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'3'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'4'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'5'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'6'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'7'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'8'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'9'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'.'	O
,	O
0	int
,	O
A_DIGIT	int
,	O
'='	O
,	O
0	int
,	O
A_STAT	int
,	O
CONTROL	O
(	O
'G'	O
)	O
,	O
0	int
,	O
A_STAT	int
,	O
':'	O
,	O
'f'	O
,	O
0	int
,	O
A_STAT	int
,	O
'/'	O
,	O
0	int
,	O
A_F_SEARCH	int
,	O
'?'	O
,	O
0	int
,	O
A_B_SEARCH	int
,	O
ESC	O
,	O
'/'	O
,	O
0	int
,	O
A_F_SEARCH	int
|	O
A_EXTRA	int
,	O
'*'	O
,	O
0	int
,	O
ESC	O
,	O
'?'	O
,	O
0	int
,	O
A_B_SEARCH	int
|	O
A_EXTRA	int
,	O
'*'	O
,	O
0	int
,	O
'n'	O
,	O
0	int
,	O
A_AGAIN_SEARCH	int
,	O
ESC	O
,	O
'n'	O
,	O
0	int
,	O
A_T_AGAIN_SEARCH	int
,	O
'N'	O
,	O
0	int
,	O
A_REVERSE_SEARCH	int
,	O
ESC	O
,	O
'N'	O
,	O
0	int
,	O
A_T_REVERSE_SEARCH	int
,	O
'&'	O
,	O
0	int
,	O
A_FILTER	int
,	O
'm'	O
,	O
0	int
,	O
A_SETMARK	int
,	O
'M'	O
,	O
0	int
,	O
A_SETMARKBOT	int
,	O
ESC	O
,	O
'm'	O
,	O
0	int
,	O
A_CLRMARK	int
,	O
'\''	O
,	O
0	int
,	O
A_GOMARK	int
,	O
CONTROL	O
(	O
'X'	O
)	O
,	O
CONTROL	O
(	O
'X'	O
)	O
,	O
0	int
,	O
A_GOMARK	int
,	O
'E'	O
,	O
0	int
,	O
A_EXAMINE	int
,	O
':'	O
,	O
'e'	O
,	O
0	int
,	O
A_EXAMINE	int
,	O
CONTROL	O
(	O
'X'	O
)	O
,	O
CONTROL	O
(	O
'V'	O
)	O
,	O
0	int
,	O
A_EXAMINE	int
,	O
':'	O
,	O
'n'	O
,	O
0	int
,	O
A_NEXT_FILE	int
,	O
':'	O
,	O
'p'	O
,	O
0	int
,	O
A_PREV_FILE	int
,	O
't'	O
,	O
0	int
,	O
A_NEXT_TAG	int
,	O
'T'	O
,	O
0	int
,	O
A_PREV_TAG	int
,	O
':'	O
,	O
'x'	O
,	O
0	int
,	O
A_INDEX_FILE	int
,	O
':'	O
,	O
'd'	O
,	O
0	int
,	O
A_REMOVE_FILE	int
,	O
'-'	O
,	O
0	int
,	O
A_OPT_TOGGLE	int
,	O
':'	O
,	O
't'	O
,	O
0	int
,	O
A_OPT_TOGGLE	int
|	O
A_EXTRA	int
,	O
't'	O
,	O
0	int
,	O
's'	O
,	O
0	int
,	O
A_OPT_TOGGLE	int
|	O
A_EXTRA	int
,	O
'o'	O
,	O
0	int
,	O
'_'	O
,	O
0	int
,	O
A_DISP_OPTION	int
,	O
'|'	O
,	O
0	int
,	O
A_PIPE	int
,	O
'v'	O
,	O
0	int
,	O
A_VISUAL	int
,	O
'!'	O
,	O
0	int
,	O
A_SHELL	int
,	O
'+'	O
,	O
0	int
,	O
A_FIRSTCMD	int
,	O
'H'	O
,	O
0	int
,	O
A_HELP	int
,	O
'h'	O
,	O
0	int
,	O
A_HELP	int
,	O
SK	O
(	O
SK_F1	int
)	O
,	O
0	int
,	O
A_HELP	int
,	O
'V'	O
,	O
0	int
,	O
A_VERSION	int
,	O
'q'	O
,	O
0	int
,	O
A_QUIT	int
,	O
'Q'	O
,	O
0	int
,	O
A_QUIT	int
,	O
':'	O
,	O
'q'	O
,	O
0	int
,	O
A_QUIT	int
,	O
':'	O
,	O
'Q'	O
,	O
0	int
,	O
A_QUIT	int
,	O
'Z'	O
,	O
'Z'	O
,	O
0	int
,	O
A_QUIT	int
}	O
;	O
static	O
unsigned	O
char	O
edittable	array(char)
[	O
]	O
=	O
{	O
'\t'	O
,	O
0	int
,	O
EC_F_COMPLETE	int
,	O
'\17'	O
,	O
0	int
,	O
EC_B_COMPLETE	int
,	O
SK	O
(	O
SK_BACKTAB	int
)	O
,	O
0	int
,	O
EC_B_COMPLETE	int
,	O
ESC	O
,	O
'\t'	O
,	O
0	int
,	O
EC_B_COMPLETE	int
,	O
CONTROL	O
(	O
'L'	O
)	O
,	O
0	int
,	O
EC_EXPAND	int
,	O
CONTROL	O
(	O
'V'	O
)	O
,	O
0	int
,	O
EC_LITERAL	int
,	O
CONTROL	O
(	O
'A'	O
)	O
,	O
0	int
,	O
EC_LITERAL	int
,	O
ESC	O
,	O
'l'	O
,	O
0	int
,	O
EC_RIGHT	int
,	O
SK	O
(	O
SK_RIGHT_ARROW	int
)	O
,	O
0	int
,	O
EC_RIGHT	int
,	O
ESC	O
,	O
'h'	O
,	O
0	int
,	O
EC_LEFT	int
,	O
SK	O
(	O
SK_LEFT_ARROW	int
)	O
,	O
0	int
,	O
EC_LEFT	int
,	O
ESC	O
,	O
'b'	O
,	O
0	int
,	O
EC_W_LEFT	int
,	O
ESC	O
,	O
SK	O
(	O
SK_LEFT_ARROW	int
)	O
,	O
0	int
,	O
EC_W_LEFT	int
,	O
SK	O
(	O
SK_CTL_LEFT_ARROW	int
)	O
,	O
0	int
,	O
EC_W_LEFT	int
,	O
ESC	O
,	O
'w'	O
,	O
0	int
,	O
EC_W_RIGHT	int
,	O
ESC	O
,	O
SK	O
(	O
SK_RIGHT_ARROW	int
)	O
,	O
0	int
,	O
EC_W_RIGHT	int
,	O
SK	O
(	O
SK_CTL_RIGHT_ARROW	int
)	O
,	O
0	int
,	O
EC_W_RIGHT	int
,	O
ESC	O
,	O
'i'	O
,	O
0	int
,	O
EC_INSERT	int
,	O
SK	O
(	O
SK_INSERT	int
)	O
,	O
0	int
,	O
EC_INSERT	int
,	O
ESC	O
,	O
'x'	O
,	O
0	int
,	O
EC_DELETE	int
,	O
SK	O
(	O
SK_DELETE	int
)	O
,	O
0	int
,	O
EC_DELETE	int
,	O
ESC	O
,	O
'X'	O
,	O
0	int
,	O
EC_W_DELETE	int
,	O
ESC	O
,	O
SK	O
(	O
SK_DELETE	int
)	O
,	O
0	int
,	O
EC_W_DELETE	int
,	O
SK	O
(	O
SK_CTL_DELETE	int
)	O
,	O
0	int
,	O
EC_W_DELETE	int
,	O
SK	O
(	O
SK_CTL_BACKSPACE	int
)	O
,	O
0	int
,	O
EC_W_BACKSPACE	int
,	O
ESC	O
,	O
'\b'	O
,	O
0	int
,	O
EC_W_BACKSPACE	int
,	O
ESC	O
,	O
'0'	O
,	O
0	int
,	O
EC_HOME	int
,	O
SK	O
(	O
SK_HOME	int
)	O
,	O
0	int
,	O
EC_HOME	int
,	O
ESC	O
,	O
'$'	O
,	O
0	int
,	O
EC_END	int
,	O
SK	O
(	O
SK_END	int
)	O
,	O
0	int
,	O
EC_END	int
,	O
ESC	O
,	O
'k'	O
,	O
0	int
,	O
EC_UP	int
,	O
SK	O
(	O
SK_UP_ARROW	int
)	O
,	O
0	int
,	O
EC_UP	int
,	O
ESC	O
,	O
'j'	O
,	O
0	int
,	O
EC_DOWN	int
,	O
SK	O
(	O
SK_DOWN_ARROW	int
)	O
,	O
0	int
,	O
EC_DOWN	int
,	O
CONTROL	O
(	O
'G'	O
)	O
,	O
0	int
,	O
EC_ABORT	int
,	O
}	O
;	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
{	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
t_next	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
char	O
*	O
t_start	*(char)
;	O
char	O
*	O
t_end	*(char)
;	O
}	O
;	O
static	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
list_fcmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
;	O
static	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
list_ecmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
;	O
static	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
list_var_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
;	O
static	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
list_sysvar_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
NULL	O
;	O
static	O
void	O
expand_special_keys	(*(char),int)->(void)
(	O
table	*(struct(long,long))
,	O
len	int
)	O
char	O
*	O
table	*(struct(long,long))
;	O
int	O
len	int
;	O
{	O
char	O
*	O
fm	*(char)
;	O
char	O
*	O
to	*(char)
;	O
int	O
a	int
;	O
char	O
*	O
repl	*(char)
;	O
int	O
klen	int
;	O
for	O
(	O
fm	*(char)
=	O
table	*(struct(long,long))
;	O
fm	*(char)
<	O
table	*(struct(long,long))
+	O
len	int
;	O
)	O
{	O
for	O
(	O
to	*(char)
=	O
fm	*(char)
;	O
*	O
fm	*(char)
!=	O
'\0'	O
;	O
)	O
{	O
if	O
(	O
*	O
fm	*(char)
!=	O
SK_SPECIAL_KEY	O
)	O
{	O
*	O
to	*(char)
++	O
=	O
*	O
fm	*(char)
++	O
;	O
continue	O
;	O
}	O
repl	*(char)
=	O
special_key_str	(int)->(*(char))
(	O
fm	*(char)
[	O
1	int
]	O
)	O
;	O
klen	int
=	O
fm	*(char)
[	O
2	int
]	O
&	O
0377	int
;	O
fm	*(char)
+=	O
klen	int
;	O
if	O
(	O
repl	*(char)
==	O
NULL	O
||	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
repl	*(char)
)	O
>	O
klen	int
)	O
repl	*(char)
=	O
"\377"	*(char)
;	O
while	O
(	O
*	O
repl	*(char)
!=	O
'\0'	O
)	O
*	O
to	*(char)
++	O
=	O
*	O
repl	*(char)
++	O
;	O
}	O
*	O
to	*(char)
++	O
=	O
'\0'	O
;	O
while	O
(	O
to	*(char)
<=	O
fm	*(char)
)	O
*	O
to	*(char)
++	O
=	O
A_SKIP	int
;	O
fm	*(char)
++	O
;	O
a	int
=	O
*	O
fm	*(char)
++	O
&	O
0377	int
;	O
if	O
(	O
a	int
&	O
A_EXTRA	int
)	O
{	O
while	O
(	O
*	O
fm	*(char)
++	O
!=	O
'\0'	O
)	O
continue	O
;	O
}	O
}	O
}	O
static	O
void	O
expand_cmd_table	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
tlist	*(struct(*(char),*(char)))
)	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tlist	*(struct(*(char),*(char)))
;	O
{	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
for	O
(	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
tlist	*(struct(*(char),*(char)))
;	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
!=	O
NULL	O
;	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_next	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
{	O
expand_special_keys	(*(char),int)->(void)
(	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_start	*(char)
,	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_end	*(char)
-	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_start	*(char)
)	O
;	O
}	O
}	O
public	O
void	O
expand_cmd_tables	()->(void)
(	O
)	O
{	O
expand_cmd_table	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
list_fcmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
expand_cmd_table	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
list_ecmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
expand_cmd_table	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
list_var_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
expand_cmd_table	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))))->(void)
(	O
list_sysvar_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
;	O
}	O
public	O
void	O
init_cmds	()->(void)
(	O
)	O
{	O
add_fcmd_table	(*(char),int)->(void)
(	O
(	O
char	O
*	O
)	O
cmdtable	array(char)
,	O
sizeof	O
(	O
cmdtable	array(char)
)	O
)	O
;	O
add_ecmd_table	(*(char),int)->(void)
(	O
(	O
char	O
*	O
)	O
edittable	array(char)
,	O
sizeof	O
(	O
edittable	array(char)
)	O
)	O
;	O
add_hometable	(*(char),*(char),int)->(void)
(	O
NULL	O
,	O
BINDIR	O
"/.sysless"	*(char)
,	O
1	int
)	O
;	O
add_hometable	(*(char),*(char),int)->(void)
(	O
"LESSKEY_SYSTEM"	*(char)
,	O
LESSKEYFILE_SYS	O
,	O
1	int
)	O
;	O
add_hometable	(*(char),*(char),int)->(void)
(	O
"LESSKEY"	*(char)
,	O
LESSKEYFILE	*(char)
,	O
0	int
)	O
;	O
}	O
static	O
int	O
add_cmd_table	(*(*(struct(*(struct`),*(char),*(char)))),*(char),int)->(int)
(	O
tlist	*(struct(*(char),*(char)))
,	O
buf	*(char)
,	O
len	int
)	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
*	O
tlist	*(struct(*(char),*(char)))
;	O
char	O
*	O
buf	*(char)
;	O
int	O
len	int
;	O
{	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
(	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
(	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_start	*(char)
=	O
buf	*(char)
;	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_end	*(char)
=	O
buf	*(char)
+	O
len	int
;	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_next	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
*	O
tlist	*(struct(*(char),*(char)))
;	O
*	O
tlist	*(struct(*(char),*(char)))
=	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
return	O
(	O
0	int
)	O
;	O
}	O
public	O
void	O
add_fcmd_table	(*(char),int)->(void)
(	O
buf	*(char)
,	O
len	int
)	O
char	O
*	O
buf	*(char)
;	O
int	O
len	int
;	O
{	O
if	O
(	O
add_cmd_table	(*(*(struct(*(struct`),*(char),*(char)))),*(char),int)->(int)
(	O
&	O
list_fcmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
buf	*(char)
,	O
len	int
)	O
<	O
0	int
)	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Warning: some commands disabled"	*(char)
,	O
NULL_PARG	O
)	O
;	O
}	O
public	O
void	O
add_ecmd_table	(*(char),int)->(void)
(	O
buf	*(char)
,	O
len	int
)	O
char	O
*	O
buf	*(char)
;	O
int	O
len	int
;	O
{	O
if	O
(	O
add_cmd_table	(*(*(struct(*(struct`),*(char),*(char)))),*(char),int)->(int)
(	O
&	O
list_ecmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
buf	*(char)
,	O
len	int
)	O
<	O
0	int
)	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Warning: some edit commands disabled"	*(char)
,	O
NULL_PARG	O
)	O
;	O
}	O
static	O
void	O
add_var_table	(*(*(struct(*(struct`),*(char),*(char)))),*(char),int)->(void)
(	O
tlist	*(struct(*(char),*(char)))
,	O
buf	*(char)
,	O
len	int
)	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
*	O
tlist	*(struct(*(char),*(char)))
;	O
char	O
*	O
buf	*(char)
;	O
int	O
len	int
;	O
{	O
if	O
(	O
add_cmd_table	(*(*(struct(*(struct`),*(char),*(char)))),*(char),int)->(int)
(	O
tlist	*(struct(*(char),*(char)))
,	O
buf	*(char)
,	O
len	int
)	O
<	O
0	int
)	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Warning: environment variables from lesskey file unavailable"	*(char)
,	O
NULL_PARG	O
)	O
;	O
}	O
static	O
int	O
cmd_search	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
cmd	*(char)
,	O
table	*(struct(long,long))
,	O
endtable	*(char)
,	O
sp	*(*(char))
)	O
char	O
*	O
cmd	*(char)
;	O
char	O
*	O
table	*(struct(long,long))
;	O
char	O
*	O
endtable	*(char)
;	O
char	O
*	O
*	O
sp	*(*(char))
;	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
q	*(char)
;	O
int	O
a	int
;	O
*	O
sp	*(*(char))
=	O
NULL	O
;	O
for	O
(	O
p	*(char)
=	O
table	*(struct(long,long))
,	O
q	*(char)
=	O
cmd	*(char)
;	O
p	*(char)
<	O
endtable	*(char)
;	O
p	*(char)
++	O
,	O
q	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
*	O
q	*(char)
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\0'	O
)	O
{	O
a	int
=	O
*	O
++	O
p	*(char)
&	O
0377	int
;	O
while	O
(	O
a	int
==	O
A_SKIP	int
)	O
a	int
=	O
*	O
++	O
p	*(char)
&	O
0377	int
;	O
if	O
(	O
a	int
==	O
A_END_LIST	int
)	O
{	O
return	O
(	O
A_UINVALID	int
)	O
;	O
}	O
if	O
(	O
a	int
&	O
A_EXTRA	int
)	O
{	O
*	O
sp	*(*(char))
=	O
++	O
p	*(char)
;	O
a	int
&=	O
~	O
A_EXTRA	int
;	O
}	O
return	O
(	O
a	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
*	O
q	*(char)
==	O
'\0'	O
)	O
{	O
return	O
(	O
A_PREFIX	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\0'	O
&&	O
p	*(char)
[	O
1	int
]	O
==	O
A_END_LIST	int
)	O
{	O
return	O
(	O
A_UINVALID	int
)	O
;	O
}	O
while	O
(	O
*	O
p	*(char)
++	O
!=	O
'\0'	O
)	O
continue	O
;	O
while	O
(	O
*	O
p	*(char)
==	O
A_SKIP	int
)	O
p	*(char)
++	O
;	O
if	O
(	O
*	O
p	*(char)
&	O
A_EXTRA	int
)	O
while	O
(	O
*	O
++	O
p	*(char)
!=	O
'\0'	O
)	O
continue	O
;	O
q	*(char)
=	O
cmd	*(char)
-	O
1	int
;	O
}	O
}	O
return	O
(	O
A_INVALID	int
)	O
;	O
}	O
static	O
int	O
cmd_decode	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char),*(*(char)))->(int)
(	O
tlist	*(struct(*(char),*(char)))
,	O
cmd	*(char)
,	O
sp	*(*(char))
)	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
tlist	*(struct(*(char),*(char)))
;	O
char	O
*	O
cmd	*(char)
;	O
char	O
*	O
*	O
sp	*(*(char))
;	O
{	O
struct	O
tablelist	struct(*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char))),*(char),*(char))
*	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
;	O
int	O
action	int
=	O
A_INVALID	int
;	O
for	O
(	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
tlist	*(struct(*(char),*(char)))
;	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
!=	O
NULL	O
;	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
=	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_next	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
)	O
{	O
action	int
=	O
cmd_search	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
cmd	*(char)
,	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_start	*(char)
,	O
t	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
->	O
t_end	*(char)
,	O
sp	*(*(char))
)	O
;	O
if	O
(	O
action	int
!=	O
A_INVALID	int
)	O
break	O
;	O
}	O
if	O
(	O
action	int
==	O
A_UINVALID	int
)	O
action	int
=	O
A_INVALID	int
;	O
return	O
(	O
action	int
)	O
;	O
}	O
public	O
int	O
fcmd_decode	(*(char),*(*(char)))->(int)
(	O
cmd	*(char)
,	O
sp	*(*(char))
)	O
char	O
*	O
cmd	*(char)
;	O
char	O
*	O
*	O
sp	*(*(char))
;	O
{	O
return	O
(	O
cmd_decode	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char),*(*(char)))->(int)
(	O
list_fcmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
cmd	*(char)
,	O
sp	*(*(char))
)	O
)	O
;	O
}	O
public	O
int	O
ecmd_decode	(*(char),*(*(char)))->(int)
(	O
cmd	*(char)
,	O
sp	*(*(char))
)	O
char	O
*	O
cmd	*(char)
;	O
char	O
*	O
*	O
sp	*(*(char))
;	O
{	O
return	O
(	O
cmd_decode	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char),*(*(char)))->(int)
(	O
list_ecmd_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
cmd	*(char)
,	O
sp	*(*(char))
)	O
)	O
;	O
}	O
public	O
char	O
*	O
lgetenv	(*(char))->(*(char))
(	O
var	*(char)
)	O
char	O
*	O
var	*(char)
;	O
{	O
int	O
a	int
;	O
char	O
*	O
s	*(char)
;	O
a	int
=	O
cmd_decode	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char),*(*(char)))->(int)
(	O
list_var_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
var	*(char)
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
a	int
==	O
EV_OK	int
)	O
return	O
(	O
s	*(char)
)	O
;	O
s	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
var	*(char)
)	O
;	O
if	O
(	O
s	*(char)
!=	O
NULL	O
&&	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
return	O
(	O
s	*(char)
)	O
;	O
a	int
=	O
cmd_decode	(*(struct(*(struct(*`,*`,*`)),*(char),*(char))),*(char),*(*(char)))->(int)
(	O
list_sysvar_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
var	*(char)
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
a	int
==	O
EV_OK	int
)	O
return	O
(	O
s	*(char)
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
static	O
int	O
gint	(*(*(char)))->(int)
(	O
sp	*(*(char))
)	O
char	O
*	O
*	O
sp	*(*(char))
;	O
{	O
int	O
n	int
;	O
n	int
=	O
*	O
(	O
*	O
sp	*(*(char))
)	O
++	O
;	O
n	int
+=	O
*	O
(	O
*	O
sp	*(*(char))
)	O
++	O
*	O
KRADIX	int
;	O
return	O
(	O
n	int
)	O
;	O
}	O
static	O
int	O
old_lesskey	(*(char),int)->(int)
(	O
buf	*(char)
,	O
len	int
)	O
char	O
*	O
buf	*(char)
;	O
int	O
len	int
;	O
{	O
if	O
(	O
buf	*(char)
[	O
len	int
-	O
1	int
]	O
!=	O
'\0'	O
&&	O
buf	*(char)
[	O
len	int
-	O
2	int
]	O
!=	O
'\0'	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
add_fcmd_table	(*(char),int)->(void)
(	O
buf	*(char)
,	O
len	int
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
int	O
new_lesskey	(*(char),int,int)->(int)
(	O
buf	*(char)
,	O
len	int
,	O
sysvar	int
)	O
char	O
*	O
buf	*(char)
;	O
int	O
len	int
;	O
int	O
sysvar	int
;	O
{	O
char	O
*	O
p	*(char)
;	O
int	O
c	int
;	O
int	O
n	int
;	O
if	O
(	O
buf	*(char)
[	O
len	int
-	O
3	int
]	O
!=	O
C0_END_LESSKEY_MAGIC	char
||	O
buf	*(char)
[	O
len	int
-	O
2	int
]	O
!=	O
C1_END_LESSKEY_MAGIC	char
||	O
buf	*(char)
[	O
len	int
-	O
1	int
]	O
!=	O
C2_END_LESSKEY_MAGIC	char
)	O
return	O
(	O
-	O
1	int
)	O
;	O
p	*(char)
=	O
buf	*(char)
+	O
4	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
*	O
p	*(char)
++	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
CMD_SECTION	char
:	O
n	int
=	O
gint	(*(*(char)))->(int)
(	O
&	O
p	*(char)
)	O
;	O
add_fcmd_table	(*(char),int)->(void)
(	O
p	*(char)
,	O
n	int
)	O
;	O
p	*(char)
+=	O
n	int
;	O
break	O
;	O
case	O
EDIT_SECTION	char
:	O
n	int
=	O
gint	(*(*(char)))->(int)
(	O
&	O
p	*(char)
)	O
;	O
add_ecmd_table	(*(char),int)->(void)
(	O
p	*(char)
,	O
n	int
)	O
;	O
p	*(char)
+=	O
n	int
;	O
break	O
;	O
case	O
VAR_SECTION	char
:	O
n	int
=	O
gint	(*(*(char)))->(int)
(	O
&	O
p	*(char)
)	O
;	O
add_var_table	(*(*(struct(*(struct`),*(char),*(char)))),*(char),int)->(void)
(	O
(	O
sysvar	int
)	O
?	O
&	O
list_sysvar_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
:	O
&	O
list_var_tables	*(struct(*(struct(*(struct`),*(char),*(char))),*(char),*(char)))
,	O
p	*(char)
,	O
n	int
)	O
;	O
p	*(char)
+=	O
n	int
;	O
break	O
;	O
case	O
END_SECTION	char
:	O
return	O
(	O
0	int
)	O
;	O
default	O
:	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
}	O
public	O
int	O
lesskey	(*(char),int)->(int)
(	O
filename	*(char)
,	O
sysvar	int
)	O
char	O
*	O
filename	*(char)
;	O
int	O
sysvar	int
;	O
{	O
char	O
*	O
buf	*(char)
;	O
POSITION	long
len	int
;	O
long	O
n	int
;	O
int	O
f	int
;	O
if	O
(	O
secure	int
)	O
return	O
(	O
1	int
)	O
;	O
f	int
=	O
open	(*(char),int)->(int)
(	O
filename	*(char)
,	O
OPEN_READ	O
)	O
;	O
if	O
(	O
f	int
<	O
0	int
)	O
return	O
(	O
1	int
)	O
;	O
len	int
=	O
filesize	(int)->(long)
(	O
f	int
)	O
;	O
if	O
(	O
len	int
==	O
NULL_POSITION	O
||	O
len	int
<	O
3	int
)	O
{	O
close	(int)->(int)
(	O
f	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
(	O
int	O
)	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
close	(int)->(int)
(	O
f	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
f	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
==	O
BAD_LSEEK	O
)	O
{	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
close	(int)->(int)
(	O
f	int
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
n	int
=	O
read	(int,*(void),long)->(long)
(	O
f	int
,	O
buf	*(char)
,	O
(	O
unsigned	O
int	O
)	O
len	int
)	O
;	O
close	(int)->(int)
(	O
f	int
)	O
;	O
if	O
(	O
n	int
!=	O
len	int
)	O
{	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
!=	O
C0_LESSKEY_MAGIC	char
||	O
buf	*(char)
[	O
1	int
]	O
!=	O
C1_LESSKEY_MAGIC	char
||	O
buf	*(char)
[	O
2	int
]	O
!=	O
C2_LESSKEY_MAGIC	char
||	O
buf	*(char)
[	O
3	int
]	O
!=	O
C3_LESSKEY_MAGIC	char
)	O
return	O
(	O
old_lesskey	(*(char),int)->(int)
(	O
buf	*(char)
,	O
(	O
int	O
)	O
len	int
)	O
)	O
;	O
return	O
(	O
new_lesskey	(*(char),int,int)->(int)
(	O
buf	*(char)
,	O
(	O
int	O
)	O
len	int
,	O
sysvar	int
)	O
)	O
;	O
}	O
public	O
void	O
add_hometable	(*(char),*(char),int)->(void)
(	O
envname	*(char)
,	O
def_filename	*(char)
,	O
sysvar	int
)	O
char	O
*	O
envname	*(char)
;	O
char	O
*	O
def_filename	*(char)
;	O
int	O
sysvar	int
;	O
{	O
char	O
*	O
filename	*(char)
;	O
PARG	union(*(char),int,long)
parg	union(*(char),int,long)
;	O
if	O
(	O
envname	*(char)
!=	O
NULL	O
&&	O
(	O
filename	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
envname	*(char)
)	O
)	O
!=	O
NULL	O
)	O
filename	*(char)
=	O
save	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
else	O
if	O
(	O
sysvar	int
)	O
filename	*(char)
=	O
save	(*(char))->(*(char))
(	O
def_filename	*(char)
)	O
;	O
else	O
filename	*(char)
=	O
homefile	(*(char))->(*(char))
(	O
def_filename	*(char)
)	O
;	O
if	O
(	O
filename	*(char)
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
lesskey	(*(char),int)->(int)
(	O
filename	*(char)
,	O
sysvar	int
)	O
<	O
0	int
)	O
{	O
parg	union(*(char),int,long)
.	O
p_string	*(char)
=	O
filename	*(char)
;	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"Cannot use lesskey file \"%s\""	*(char)
,	O
&	O
parg	union(*(char),int,long)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
}	O
public	O
int	O
editchar	(int,int)->(int)
(	O
c	int
,	O
flags	int
)	O
int	O
c	int
;	O
int	O
flags	int
;	O
{	O
int	O
action	int
;	O
int	O
nch	int
;	O
char	O
*	O
s	*(char)
;	O
char	O
usercmd	array(char)
[	O
MAX_CMDLEN	int
+	O
1	int
]	O
;	O
if	O
(	O
c	int
==	O
erase_char	int
||	O
c	int
==	O
erase2_char	int
)	O
return	O
(	O
EC_BACKSPACE	int
)	O
;	O
if	O
(	O
c	int
==	O
kill_char	int
)	O
return	O
(	O
EC_LINEKILL	int
)	O
;	O
nch	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
nch	int
>	O
0	int
)	O
c	int
=	O
getcc	()->(int)
(	O
)	O
;	O
usercmd	array(char)
[	O
nch	int
]	O
=	O
c	int
;	O
usercmd	array(char)
[	O
nch	int
+	O
1	int
]	O
=	O
'\0'	O
;	O
nch	int
++	O
;	O
action	int
=	O
ecmd_decode	(*(char),*(*(char)))->(int)
(	O
usercmd	array(char)
,	O
&	O
s	*(char)
)	O
;	O
}	O
while	O
(	O
action	int
==	O
A_PREFIX	int
)	O
;	O
if	O
(	O
flags	int
&	O
EC_NORIGHTLEFT	int
)	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_RIGHT	int
:	O
case	O
EC_LEFT	int
:	O
action	int
=	O
A_INVALID	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
flags	int
&	O
EC_NOHISTORY	int
)	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_UP	int
:	O
case	O
EC_DOWN	int
:	O
action	int
=	O
A_INVALID	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
flags	int
&	O
EC_NOCOMPLETE	int
)	O
{	O
switch	O
(	O
action	int
)	O
{	O
case	O
EC_F_COMPLETE	int
:	O
case	O
EC_B_COMPLETE	int
:	O
case	O
EC_EXPAND	int
:	O
action	int
=	O
A_INVALID	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
(	O
flags	int
&	O
EC_PEEK	int
)	O
||	O
action	int
==	O
A_INVALID	int
)	O
{	O
while	O
(	O
nch	int
>	O
1	int
)	O
{	O
ungetcc	(long)->(void)
(	O
usercmd	array(char)
[	O
--	O
nch	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
s	*(char)
!=	O
NULL	O
)	O
ungetsc	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
}	O
return	O
action	int
;	O
}	O
