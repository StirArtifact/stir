void	O
remove_newlines_and_comments	(*(char))->(void)
(	O
char	O
*	O
buff	*(char)
)	O
{	O
int	O
k	int
;	O
while	O
(	O
*	O
buff	*(char)
)	O
{	O
if	O
(	O
*	O
buff	*(char)
==	O
'#'	O
)	O
*	O
buff	*(char)
=	O
0	int
;	O
else	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
buff	*(char)
[	O
k	int
]	O
==	O
10	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
13	int
;	O
)	O
k	int
++	O
;	O
if	O
(	O
k	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
buff	*(char)
,	O
buff	*(char)
+	O
k	int
,	O
strlen	(*(char))->(long)
(	O
buff	*(char)
)	O
+	O
1	int
-	O
k	int
)	O
;	O
else	O
buff	*(char)
++	O
;	O
}	O
}	O
}	O
void	O
remove_spaces_and_comments	(*(char))->(void)
(	O
char	O
*	O
buff	*(char)
)	O
{	O
int	O
k	int
;	O
while	O
(	O
*	O
buff	*(char)
)	O
{	O
if	O
(	O
*	O
buff	*(char)
==	O
'#'	O
)	O
*	O
buff	*(char)
=	O
0	int
;	O
else	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
buff	*(char)
[	O
k	int
]	O
==	O
9	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
32	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
10	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
13	int
;	O
)	O
k	int
++	O
;	O
if	O
(	O
k	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
buff	*(char)
,	O
buff	*(char)
+	O
k	int
,	O
strlen	(*(char))->(long)
(	O
buff	*(char)
)	O
+	O
1	int
-	O
k	int
)	O
;	O
else	O
buff	*(char)
++	O
;	O
}	O
}	O
}	O
void	O
remove_spaces	(*(char))->(void)
(	O
char	O
*	O
buff	*(char)
)	O
{	O
int	O
k	int
;	O
while	O
(	O
*	O
buff	*(char)
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
buff	*(char)
[	O
k	int
]	O
==	O
9	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
32	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
10	int
||	O
buff	*(char)
[	O
k	int
]	O
==	O
13	int
;	O
)	O
k	int
++	O
;	O
if	O
(	O
k	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
buff	*(char)
,	O
buff	*(char)
+	O
k	int
,	O
strlen	(*(char))->(long)
(	O
buff	*(char)
)	O
+	O
1	int
-	O
k	int
)	O
;	O
else	O
buff	*(char)
++	O
;	O
}	O
}	O
void	O
remove_quotes	(*(char))->(void)
(	O
char	O
*	O
buff	*(char)
)	O
{	O
int	O
k	int
;	O
while	O
(	O
*	O
buff	*(char)
)	O
{	O
for	O
(	O
k	int
=	O
0	int
;	O
buff	*(char)
[	O
k	int
]	O
==	O
'"'	O
;	O
)	O
k	int
++	O
;	O
if	O
(	O
k	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
buff	*(char)
,	O
buff	*(char)
+	O
k	int
,	O
strlen	(*(char))->(long)
(	O
buff	*(char)
)	O
+	O
1	int
-	O
k	int
)	O
;	O
else	O
buff	*(char)
++	O
;	O
}	O
}	O
int	O
char_is_space	(int)->(int)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
32	int
||	O
c	int
==	O
13	int
||	O
c	int
==	O
10	int
||	O
c	int
==	O
9	int
)	O
return	O
(	O
1	int
)	O
;	O
else	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
tokenize_spaces	(*(char),*(*(char)),int)->(int)
(	O
char	O
*	O
buff	*(char)
,	O
char	O
*	O
*	O
tokens	*(*(char))
,	O
int	O
max	int
)	O
{	O
int	O
intoken	int
,	O
inquota	int
,	O
n	int
;	O
char	O
*	O
*	O
tsave	*(*(char))
;	O
tsave	*(*(char))
=	O
tokens	*(*(char))
;	O
intoken	int
=	O
0	int
,	O
inquota	int
=	O
0	int
;	O
n	int
=	O
0	int
;	O
while	O
(	O
*	O
buff	*(char)
&&	O
n	int
<	O
max	int
)	O
{	O
if	O
(	O
(	O
!	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
)	O
&&	O
!	O
intoken	int
)	O
{	O
*	O
tokens	*(*(char))
=	O
buff	*(char)
;	O
intoken	int
=	O
!	O
0	int
,	O
inquota	int
=	O
0	int
;	O
n	int
++	O
;	O
if	O
(	O
*	O
buff	*(char)
==	O
'"'	O
)	O
inquota	int
=	O
!	O
0	int
;	O
tokens	*(*(char))
++	O
,	O
buff	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
intoken	int
&&	O
(	O
(	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
&&	O
inquota	int
)	O
||	O
(	O
!	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
)	O
)	O
)	O
{	O
if	O
(	O
*	O
buff	*(char)
==	O
'"'	O
)	O
inquota	int
=	O
!	O
inquota	int
;	O
buff	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
intoken	int
&&	O
!	O
inquota	int
&&	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
)	O
{	O
*	O
buff	*(char)
=	O
0	int
,	O
buff	*(char)
++	O
;	O
intoken	int
=	O
0	int
;	O
}	O
else	O
buff	*(char)
++	O
;	O
}	O
;	O
*	O
tokens	*(*(char))
=	O
NULL	O
;	O
while	O
(	O
*	O
tsave	*(*(char))
!=	O
NULL	O
)	O
{	O
remove_quotes	(*(char))->(void)
(	O
*	O
tsave	*(*(char))
)	O
;	O
tsave	*(*(char))
++	O
;	O
}	O
;	O
return	O
(	O
n	int
)	O
;	O
}	O
char	O
*	O
*	O
tokenize_spaces_dyn	(*(char))->(*(*(char)))
(	O
char	O
*	O
buff	*(char)
)	O
{	O
int	O
intoken	int
,	O
inquota	int
,	O
i	int
,	O
n	int
,	O
nm	int
;	O
char	O
*	O
*	O
rtokens	*(*(char))
;	O
nm	int
=	O
16	int
;	O
rtokens	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
nm	int
)	O
;	O
malloc_check	O
(	O
rtokens	*(*(char))
)	O
;	O
if	O
(	O
rtokens	*(*(char))
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
intoken	int
=	O
0	int
,	O
inquota	int
=	O
0	int
;	O
n	int
=	O
0	int
;	O
while	O
(	O
*	O
buff	*(char)
)	O
{	O
if	O
(	O
(	O
!	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
)	O
&&	O
!	O
intoken	int
)	O
{	O
rtokens	*(*(char))
[	O
n	int
]	O
=	O
buff	*(char)
;	O
intoken	int
=	O
!	O
0	int
,	O
inquota	int
=	O
0	int
;	O
n	int
++	O
;	O
if	O
(	O
*	O
buff	*(char)
==	O
'"'	O
)	O
inquota	int
=	O
!	O
0	int
;	O
buff	*(char)
++	O
;	O
if	O
(	O
n	int
>=	O
nm	int
-	O
1	int
)	O
{	O
nm	int
+=	O
16	int
;	O
rtokens	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
rtokens	*(*(char))
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
nm	int
)	O
;	O
realloc_check	O
(	O
rtokens	*(*(char))
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
nm	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
intoken	int
&&	O
(	O
(	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
&&	O
inquota	int
)	O
||	O
(	O
!	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
)	O
)	O
)	O
{	O
if	O
(	O
*	O
buff	*(char)
==	O
'"'	O
)	O
inquota	int
=	O
!	O
inquota	int
;	O
buff	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
intoken	int
&&	O
!	O
inquota	int
&&	O
char_is_space	(int)->(int)
(	O
*	O
buff	*(char)
)	O
)	O
{	O
*	O
buff	*(char)
=	O
0	int
,	O
buff	*(char)
++	O
;	O
intoken	int
=	O
0	int
;	O
}	O
else	O
buff	*(char)
++	O
;	O
}	O
;	O
rtokens	*(*(char))
[	O
n	int
]	O
=	O
NULL	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
remove_quotes	(*(char))->(void)
(	O
rtokens	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
return	O
(	O
rtokens	*(*(char))
)	O
;	O
}	O
int	O
tokenize_char	(*(char),*(*(char)),int,int)->(int)
(	O
char	O
*	O
buff	*(char)
,	O
char	O
*	O
*	O
tokens	*(*(char))
,	O
int	O
tchar	int
,	O
int	O
max	int
)	O
{	O
int	O
n	int
;	O
if	O
(	O
*	O
buff	*(char)
==	O
0	int
)	O
{	O
*	O
tokens	*(*(char))
=	O
NULL	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
n	int
=	O
1	int
;	O
*	O
tokens	*(*(char))
=	O
buff	*(char)
,	O
tokens	*(*(char))
++	O
;	O
while	O
(	O
*	O
buff	*(char)
&&	O
n	int
<	O
max	int
)	O
{	O
if	O
(	O
*	O
buff	*(char)
!=	O
tchar	int
)	O
buff	*(char)
++	O
;	O
else	O
*	O
buff	*(char)
=	O
0	int
,	O
buff	*(char)
++	O
,	O
*	O
tokens	*(*(char))
=	O
buff	*(char)
,	O
tokens	*(*(char))
++	O
,	O
n	int
++	O
;	O
}	O
;	O
*	O
tokens	*(*(char))
=	O
NULL	O
;	O
return	O
(	O
n	int
)	O
;	O
}	O
char	O
*	O
*	O
tokenize_char_dyn_wwt	(*(char),int,int)->(*(*(char)))
(	O
char	O
*	O
buff	*(char)
,	O
int	O
tchar	int
,	O
int	O
is_terminate	int
)	O
{	O
int	O
n	int
;	O
char	O
*	O
*	O
tokens	*(*(char))
;	O
if	O
(	O
buff	*(char)
==	O
NULL	O
)	O
{	O
return	O
(	O
NULL	O
)	O
;	O
}	O
tokens	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
if	O
(	O
tokens	*(*(char))
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
*	O
buff	*(char)
==	O
0	int
)	O
{	O
*	O
tokens	*(*(char))
=	O
NULL	O
;	O
return	O
(	O
tokens	*(*(char))
)	O
;	O
}	O
n	int
=	O
0	int
;	O
tokens	*(*(char))
[	O
n	int
]	O
=	O
buff	*(char)
,	O
n	int
++	O
;	O
while	O
(	O
*	O
buff	*(char)
)	O
{	O
if	O
(	O
*	O
buff	*(char)
!=	O
tchar	int
)	O
buff	*(char)
++	O
;	O
else	O
{	O
if	O
(	O
is_terminate	int
)	O
*	O
buff	*(char)
=	O
0	int
;	O
buff	*(char)
++	O
;	O
tokens	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
tokens	*(*(char))
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
n	int
+	O
1	int
)	O
)	O
;	O
malloc_check	O
(	O
tokens	*(*(char))
)	O
;	O
tokens	*(*(char))
[	O
n	int
]	O
=	O
buff	*(char)
,	O
n	int
++	O
;	O
}	O
}	O
;	O
tokens	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
tokens	*(*(char))
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
(	O
n	int
+	O
1	int
)	O
)	O
;	O
malloc_check	O
(	O
tokens	*(*(char))
)	O
;	O
tokens	*(*(char))
[	O
n	int
]	O
=	O
NULL	O
;	O
return	O
(	O
tokens	*(*(char))
)	O
;	O
}	O
char	O
*	O
*	O
tokenize_char_dyn	(*(char),int)->(*(*(char)))
(	O
char	O
*	O
buff	*(char)
,	O
int	O
tchar	int
)	O
{	O
char	O
*	O
*	O
ret	*(*(char))
;	O
ret	*(*(char))
=	O
tokenize_char_dyn_wwt	(*(char),int,int)->(*(*(char)))
(	O
buff	*(char)
,	O
tchar	int
,	O
1	int
)	O
;	O
return	O
(	O
ret	*(*(char))
)	O
;	O
}	O
