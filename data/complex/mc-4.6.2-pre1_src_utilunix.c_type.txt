struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
startup_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
typedef	O
struct	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
char	O
*	O
string	*(char)
;	O
}	O
int_cache	struct(int,*(char))
;	O
static	O
int_cache	struct(int,*(char))
uid_cache	array(struct(int,*(char)))
[	O
UID_CACHE_SIZE	int
]	O
;	O
static	O
int_cache	struct(int,*(char))
gid_cache	array(struct(int,*(char)))
[	O
GID_CACHE_SIZE	int
]	O
;	O
static	O
char	O
*	O
i_cache_match	(int,*(struct(int,*(char))),int)->(*(char))
(	O
int	O
id	int
,	O
int_cache	struct(int,*(char))
*	O
cache	*(struct)
,	O
int	O
size	long
)	O
{	O
int	O
i	array(int)
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
size	long
;	O
i	array(int)
++	O
)	O
if	O
(	O
cache	*(struct)
[	O
i	array(int)
]	O
.	O
index	(*(char),int)->(*(char))
==	O
id	int
)	O
return	O
cache	*(struct)
[	O
i	array(int)
]	O
.	O
string	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
void	O
i_cache_add	(int,*(struct(int,*(char))),int,*(char),*(int))->(void)
(	O
int	O
id	int
,	O
int_cache	struct(int,*(char))
*	O
cache	*(struct)
,	O
int	O
size	long
,	O
char	O
*	O
text	*(char)
,	O
int	O
*	O
last	*(int)
)	O
{	O
g_free	(*(void))->(void)
(	O
cache	*(struct)
[	O
*	O
last	*(int)
]	O
.	O
string	*(char)
)	O
;	O
cache	*(struct)
[	O
*	O
last	*(int)
]	O
.	O
string	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
text	*(char)
)	O
;	O
cache	*(struct)
[	O
*	O
last	*(int)
]	O
.	O
index	(*(char),int)->(*(char))
=	O
id	int
;	O
*	O
last	*(int)
=	O
(	O
(	O
*	O
last	*(int)
)	O
+	O
1	int
)	O
%	O
size	long
;	O
}	O
char	O
*	O
get_owner	(int)->(*(char))
(	O
int	O
uid	int
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
static	O
char	O
ibuf	array(char)
[	O
10	int
]	O
;	O
char	O
*	O
name	*(char)
;	O
static	O
int	O
uid_last	int
;	O
if	O
(	O
(	O
name	*(char)
=	O
i_cache_match	(int,*(struct(int,*(char))),int)->(*(char))
(	O
uid	int
,	O
uid_cache	array(struct(int,*(char)))
,	O
UID_CACHE_SIZE	int
)	O
)	O
!=	O
NULL	O
)	O
return	O
name	*(char)
;	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uid	int
)	O
;	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
i_cache_add	(int,*(struct(int,*(char))),int,*(char),*(int))->(void)
(	O
uid	int
,	O
uid_cache	array(struct(int,*(char)))
,	O
UID_CACHE_SIZE	int
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
&	O
uid_last	int
)	O
;	O
return	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
;	O
}	O
else	O
{	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
ibuf	array(char)
,	O
sizeof	O
(	O
ibuf	array(char)
)	O
,	O
"%d"	*(char)
,	O
uid	int
)	O
;	O
return	O
ibuf	array(char)
;	O
}	O
}	O
char	O
*	O
get_group	(int)->(*(char))
(	O
int	O
gid	int
)	O
{	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grp	*(struct(*(char),*(char),int,*(*(char))))
;	O
static	O
char	O
gbuf	array(char)
[	O
10	int
]	O
;	O
char	O
*	O
name	*(char)
;	O
static	O
int	O
gid_last	int
;	O
if	O
(	O
(	O
name	*(char)
=	O
i_cache_match	(int,*(struct(int,*(char))),int)->(*(char))
(	O
gid	int
,	O
gid_cache	array(struct(int,*(char)))
,	O
GID_CACHE_SIZE	int
)	O
)	O
!=	O
NULL	O
)	O
return	O
name	*(char)
;	O
grp	*(struct(*(char),*(char),int,*(*(char))))
=	O
getgrgid	(int)->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
gid	int
)	O
;	O
if	O
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
)	O
{	O
i_cache_add	(int,*(struct(int,*(char))),int,*(char),*(int))->(void)
(	O
gid	int
,	O
gid_cache	array(struct(int,*(char)))
,	O
GID_CACHE_SIZE	int
,	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_name	*(char)
,	O
&	O
gid_last	int
)	O
;	O
return	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_name	*(char)
;	O
}	O
else	O
{	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
gbuf	array(char)
,	O
sizeof	O
(	O
gbuf	array(char)
)	O
,	O
"%d"	*(char)
,	O
gid	int
)	O
;	O
return	O
gbuf	array(char)
;	O
}	O
}	O
void	O
save_stop_handler	()->(void)
(	O
void	O
)	O
{	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGTSTP	int
,	O
NULL	O
,	O
&	O
startup_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
}	O
int	O
my_system	(int,*(char),*(char))->(int)
(	O
int	O
flags	enum(int,int,int,int)
,	O
const	O
char	O
*	O
shell	*(char)
,	O
const	O
char	O
*	O
command	*(char)
)	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
save_stop	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
pid_t	int
pid	int
;	O
int	O
status	int
=	O
0	int
;	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
SIG_IGN	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
ignore	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGTSTP	int
,	O
&	O
startup_handler	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
save_stop	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
if	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n\nfork () = -1\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTSTP	int
,	O
SIG_DFL	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
if	O
(	O
flags	enum(int,int,int,int)
&	O
EXECUTE_AS_SHELL	O
)	O
execl	(*(char),*(char))->(int)
(	O
shell	*(char)
,	O
shell	*(char)
,	O
"-c"	*(char)
,	O
command	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
else	O
execlp	(*(char),*(char))->(int)
(	O
shell	*(char)
,	O
shell	*(char)
,	O
command	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
else	O
{	O
while	O
(	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
<	O
0	int
)	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
{	O
status	int
=	O
-	O
1	int
;	O
break	O
;	O
}	O
}	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
save_intr	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGQUIT	int
,	O
&	O
save_quit	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGTSTP	int
,	O
&	O
save_stop	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
return	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
}	O
char	O
*	O
tilde_expand	(*(char))->(*(char))
(	O
const	O
char	O
*	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
q	*(char)
;	O
char	O
*	O
name	*(char)
;	O
if	O
(	O
*	O
directory	enum(int,int,int,int,int,int,int,int,int)
!=	O
'~'	O
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
p	*(void)
=	O
directory	enum(int,int,int,int,int,int,int,int,int)
+	O
1	int
;	O
if	O
(	O
!	O
(	O
*	O
p	*(void)
)	O
||	O
(	O
*	O
p	*(void)
==	O
PATH_SEP	char
)	O
)	O
{	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
q	*(char)
=	O
(	O
*	O
p	*(void)
==	O
PATH_SEP	char
)	O
?	O
p	*(void)
+	O
1	int
:	O
""	*(char)
;	O
}	O
else	O
{	O
q	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(void)
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
!	O
q	*(char)
)	O
{	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
p	*(void)
)	O
;	O
}	O
else	O
{	O
name	*(char)
=	O
g_strndup	(*(char),long)->(*(char))
(	O
p	*(void)
,	O
q	*(char)
-	O
p	*(void)
)	O
;	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
name	*(char)
)	O
;	O
q	*(char)
++	O
;	O
g_free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
!	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
)	O
return	O
g_strdup	(*(char))->(*(char))
(	O
directory	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
return	O
g_strconcat	(*(char))->(*(char))
(	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
->	O
pw_dir	*(char)
,	O
PATH_SEP_STR	*(char)
,	O
q	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
static	O
void	O
mc_setenv	(*(char),*(char),int)->(void)
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	*(void)
,	O
int	O
overwrite_flag	int
)	O
{	O
setenv	(*(char),*(char),int)->(int)
(	O
name	*(char)
,	O
value	*(void)
,	O
overwrite_flag	int
)	O
;	O
}	O
const	O
char	O
*	O
mc_tmpdir	()->(*(char))
(	O
void	O
)	O
{	O
static	O
char	O
buffer	*(char)
[	O
64	int
]	O
;	O
static	O
const	O
char	O
*	O
tmpdir	*(char)
;	O
const	O
char	O
*	O
sys_tmp	*(char)
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
const	O
char	O
*	O
error	*(struct(int,int,*(char)))
=	O
NULL	O
;	O
if	O
(	O
tmpdir	*(char)
&&	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
tmpdir	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
&&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
==	O
getuid	()->(int)
(	O
)	O
&&	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
0777	int
)	O
==	O
0700	int
)	O
return	O
tmpdir	*(char)
;	O
sys_tmp	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TMPDIR"	*(char)
)	O
;	O
if	O
(	O
!	O
sys_tmp	*(char)
||	O
sys_tmp	*(char)
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
sys_tmp	*(char)
=	O
TMPDIR_DEFAULT	*(char)
;	O
}	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
"%s/mc-%s"	*(char)
,	O
sys_tmp	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
else	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
"%s/mc-%lu"	*(char)
,	O
sys_tmp	*(char)
,	O
(	O
unsigned	O
long	O
)	O
getuid	()->(int)
(	O
)	O
)	O
;	O
canonicalize_pathname	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
buffer	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
S_ISDIR	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
error	*(struct(int,int,*(char)))
=	O
_	O
(	O
"%s is not a directory\n"	*(char)
)	O
;	O
else	O
if	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
!=	O
getuid	()->(int)
(	O
)	O
)	O
error	*(struct(int,int,*(char)))
=	O
_	O
(	O
"Directory %s is not owned by you\n"	*(char)
)	O
;	O
else	O
if	O
(	O
(	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
0777	int
)	O
!=	O
0700	int
)	O
&&	O
(	O
chmod	(*(char),int)->(int)
(	O
buffer	*(char)
,	O
0700	int
)	O
!=	O
0	int
)	O
)	O
error	*(struct(int,int,*(char)))
=	O
_	O
(	O
"Cannot set correct permissions for directory %s\n"	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
buffer	*(char)
,	O
S_IRWXU	O
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Cannot create temporary directory %s: %s\n"	*(char)
)	O
,	O
buffer	*(char)
,	O
unix_error_string	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
error	*(struct(int,int,*(char)))
=	O
""	*(char)
;	O
}	O
}	O
if	O
(	O
error	*(struct(int,int,*(char)))
!=	O
NULL	O
)	O
{	O
int	O
test_fd	int
;	O
char	O
*	O
test_fn	*(char)
,	O
*	O
fallback_prefix	*(char)
;	O
int	O
fallback_ok	int
=	O
0	int
;	O
if	O
(	O
*	O
error	*(struct(int,int,*(char)))
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
error	*(struct(int,int,*(char)))
,	O
buffer	*(char)
)	O
;	O
fallback_prefix	*(char)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
"%s/mctest"	*(char)
,	O
sys_tmp	*(char)
)	O
;	O
test_fd	int
=	O
mc_mkstemps	(*(*(char)),*(char),*(char))->(int)
(	O
&	O
test_fn	*(char)
,	O
fallback_prefix	*(char)
,	O
NULL	O
)	O
;	O
g_free	(*(void))->(void)
(	O
fallback_prefix	*(char)
)	O
;	O
if	O
(	O
test_fd	int
!=	O
-	O
1	int
)	O
{	O
close	*((*(void))->(int))
(	O
test_fd	int
)	O
;	O
test_fd	int
=	O
open	(*(char),int)->(int)
(	O
test_fn	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
test_fd	int
!=	O
-	O
1	int
)	O
{	O
close	*((*(void))->(int))
(	O
test_fd	int
)	O
;	O
unlink	(*(char))->(int)
(	O
test_fn	*(char)
)	O
;	O
fallback_ok	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
fallback_ok	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Temporary files will be created in %s\n"	*(char)
)	O
,	O
sys_tmp	*(char)
)	O
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
"%s"	*(char)
,	O
sys_tmp	*(char)
)	O
;	O
error	*(struct(int,int,*(char)))
=	O
NULL	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Temporary files will not be created\n"	*(char)
)	O
)	O
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
"%s"	*(char)
,	O
"/dev/null/"	*(char)
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
_	O
(	O
"Press any key to continue..."	*(char)
)	O
)	O
;	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
tmpdir	*(char)
=	O
buffer	*(char)
;	O
if	O
(	O
!	O
error	*(struct(int,int,*(char)))
)	O
mc_setenv	(*(char),*(char),int)->(void)
(	O
"MC_TMPDIR"	*(char)
,	O
tmpdir	*(char)
,	O
1	int
)	O
;	O
return	O
tmpdir	*(char)
;	O
}	O
static	O
int	O
error_pipe	array(int)
[	O
2	int
]	O
;	O
static	O
int	O
old_error	int
;	O
void	O
open_error_pipe	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
pipe	(array(int))->(int)
(	O
error_pipe	array(int)
)	O
<	O
0	int
)	O
{	O
message	*(char)
(	O
0	int
,	O
_	O
(	O
"Warning"	*(char)
)	O
,	O
_	O
(	O
" Pipe failed "	*(char)
)	O
)	O
;	O
}	O
old_error	int
=	O
dup	(int)->(int)
(	O
2	int
)	O
;	O
if	O
(	O
old_error	int
<	O
0	int
||	O
close	*((*(void))->(int))
(	O
2	int
)	O
||	O
dup	(int)->(int)
(	O
error_pipe	array(int)
[	O
1	int
]	O
)	O
!=	O
2	int
)	O
{	O
message	*(char)
(	O
0	int
,	O
_	O
(	O
"Warning"	*(char)
)	O
,	O
_	O
(	O
" Dup failed "	*(char)
)	O
)	O
;	O
close	*((*(void))->(int))
(	O
error_pipe	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
error_pipe	array(int)
[	O
1	int
]	O
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
error_pipe	array(int)
[	O
1	int
]	O
)	O
;	O
}	O
int	O
close_error_pipe	(int,*(char))->(int)
(	O
int	O
error	*(struct(int,int,*(char)))
,	O
const	O
char	O
*	O
text	*(char)
)	O
{	O
const	O
char	O
*	O
title	*(char)
;	O
char	O
msg	*(char)
[	O
MAX_PIPE_SIZE	int
]	O
;	O
int	O
len	int
=	O
0	int
;	O
if	O
(	O
error	*(struct(int,int,*(char)))
)	O
title	*(char)
=	O
MSG_ERROR	O
;	O
else	O
title	*(char)
=	O
_	O
(	O
"Warning"	*(char)
)	O
;	O
if	O
(	O
old_error	int
>=	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
2	int
)	O
;	O
dup	(int)->(int)
(	O
old_error	int
)	O
;	O
close	*((*(void))->(int))
(	O
old_error	int
)	O
;	O
len	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
error_pipe	array(int)
[	O
0	int
]	O
,	O
msg	*(char)
,	O
MAX_PIPE_SIZE	int
-	O
1	int
)	O
;	O
if	O
(	O
len	int
>=	O
0	int
)	O
msg	*(char)
[	O
len	int
]	O
=	O
0	int
;	O
close	*((*(void))->(int))
(	O
error_pipe	array(int)
[	O
0	int
]	O
)	O
;	O
}	O
if	O
(	O
error	*(struct(int,int,*(char)))
<	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
text	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
len	int
<=	O
0	int
)	O
return	O
0	int
;	O
message	*(char)
(	O
error	*(struct(int,int,*(char)))
,	O
title	*(char)
,	O
"%s"	*(char)
,	O
msg	*(char)
)	O
;	O
}	O
else	O
{	O
message	*(char)
(	O
error	*(struct(int,int,*(char)))
,	O
title	*(char)
,	O
" %s \n %s "	*(char)
,	O
text	*(char)
,	O
msg	*(char)
)	O
;	O
}	O
return	O
1	int
;	O
}	O
void	O
canonicalize_pathname	(*(char))->(void)
(	O
char	O
*	O
path	*(char)
)	O
{	O
char	O
*	O
p	*(void)
,	O
*	O
s	*(char)
;	O
int	O
len	int
;	O
char	O
*	O
lpath	*(char)
=	O
path	*(char)
;	O
if	O
(	O
path	*(char)
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
path	*(char)
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
p	*(void)
=	O
path	*(char)
+	O
2	int
;	O
while	O
(	O
p	*(void)
[	O
0	int
]	O
&&	O
p	*(void)
[	O
0	int
]	O
!=	O
'/'	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'/'	O
&&	O
p	*(void)
>	O
path	*(char)
+	O
2	int
)	O
lpath	*(char)
=	O
p	*(void)
;	O
}	O
if	O
(	O
!	O
lpath	*(char)
[	O
0	int
]	O
||	O
!	O
lpath	*(char)
[	O
1	int
]	O
)	O
return	O
;	O
p	*(void)
=	O
lpath	*(char)
;	O
while	O
(	O
*	O
p	*(void)
)	O
{	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
p	*(void)
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
s	*(char)
=	O
p	*(void)
+	O
1	int
;	O
while	O
(	O
*	O
(	O
++	O
s	*(char)
)	O
==	O
PATH_SEP	char
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
+	O
1	int
,	O
s	*(char)
)	O
;	O
}	O
p	*(void)
++	O
;	O
}	O
p	*(void)
=	O
lpath	*(char)
;	O
while	O
(	O
*	O
p	*(void)
)	O
{	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
PATH_SEP	char
&&	O
p	*(void)
[	O
1	int
]	O
==	O
'.'	O
&&	O
p	*(void)
[	O
2	int
]	O
==	O
PATH_SEP	char
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(void)
,	O
p	*(void)
+	O
2	int
)	O
;	O
else	O
p	*(void)
++	O
;	O
}	O
p	*(void)
=	O
lpath	*(char)
+	O
strlen	(*(char))->(long)
(	O
lpath	*(char)
)	O
-	O
1	int
;	O
while	O
(	O
p	*(void)
>	O
lpath	*(char)
&&	O
*	O
p	*(void)
==	O
PATH_SEP	char
)	O
*	O
p	*(void)
--	O
=	O
0	int
;	O
if	O
(	O
lpath	*(char)
[	O
0	int
]	O
==	O
'.'	O
&&	O
lpath	*(char)
[	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
if	O
(	O
lpath	*(char)
[	O
2	int
]	O
==	O
0	int
)	O
{	O
lpath	*(char)
[	O
1	int
]	O
=	O
0	int
;	O
return	O
;	O
}	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
lpath	*(char)
,	O
lpath	*(char)
+	O
2	int
)	O
;	O
}	O
}	O
len	int
=	O
strlen	(*(char))->(long)
(	O
lpath	*(char)
)	O
;	O
if	O
(	O
len	int
<	O
2	int
)	O
return	O
;	O
if	O
(	O
lpath	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
PATH_SEP	char
)	O
{	O
lpath	*(char)
[	O
len	int
-	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
lpath	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
'.'	O
&&	O
lpath	*(char)
[	O
len	int
-	O
2	int
]	O
==	O
PATH_SEP	char
)	O
{	O
if	O
(	O
len	int
==	O
2	int
)	O
{	O
lpath	*(char)
[	O
1	int
]	O
=	O
0	int
;	O
return	O
;	O
}	O
else	O
{	O
lpath	*(char)
[	O
len	int
-	O
2	int
]	O
=	O
0	int
;	O
}	O
}	O
}	O
p	*(void)
=	O
lpath	*(char)
;	O
while	O
(	O
p	*(void)
[	O
0	int
]	O
&&	O
p	*(void)
[	O
1	int
]	O
&&	O
p	*(void)
[	O
2	int
]	O
)	O
{	O
if	O
(	O
(	O
p	*(void)
[	O
0	int
]	O
!=	O
PATH_SEP	char
||	O
p	*(void)
[	O
1	int
]	O
!=	O
'.'	O
||	O
p	*(void)
[	O
2	int
]	O
!=	O
'.'	O
)	O
||	O
(	O
p	*(void)
[	O
3	int
]	O
!=	O
PATH_SEP	char
&&	O
p	*(void)
[	O
3	int
]	O
!=	O
0	int
)	O
)	O
{	O
p	*(void)
++	O
;	O
continue	O
;	O
}	O
s	*(char)
=	O
p	*(void)
-	O
1	int
;	O
while	O
(	O
s	*(char)
>=	O
lpath	*(char)
&&	O
*	O
s	*(char)
!=	O
PATH_SEP	char
)	O
s	*(char)
--	O
;	O
s	*(char)
++	O
;	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
'.'	O
&&	O
s	*(char)
[	O
1	int
]	O
==	O
'.'	O
&&	O
s	*(char)
+	O
2	int
==	O
p	*(void)
)	O
{	O
p	*(void)
+=	O
3	int
;	O
continue	O
;	O
}	O
if	O
(	O
p	*(void)
[	O
3	int
]	O
!=	O
0	int
)	O
{	O
if	O
(	O
s	*(char)
==	O
lpath	*(char)
&&	O
*	O
s	*(char)
==	O
PATH_SEP	char
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
+	O
1	int
,	O
p	*(void)
+	O
4	int
)	O
;	O
}	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
,	O
p	*(void)
+	O
4	int
)	O
;	O
}	O
p	*(void)
=	O
(	O
s	*(char)
>	O
lpath	*(char)
)	O
?	O
s	*(char)
-	O
1	int
:	O
s	*(char)
;	O
continue	O
;	O
}	O
if	O
(	O
s	*(char)
==	O
lpath	*(char)
)	O
{	O
if	O
(	O
lpath	*(char)
[	O
0	int
]	O
!=	O
PATH_SEP	char
)	O
{	O
lpath	*(char)
[	O
0	int
]	O
=	O
'.'	O
;	O
}	O
lpath	*(char)
[	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
s	*(char)
==	O
lpath	*(char)
+	O
1	int
)	O
s	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
else	O
s	*(char)
[	O
-	O
1	int
]	O
=	O
0	int
;	O
break	O
;	O
}	O
break	O
;	O
}	O
}	O
char	O
*	O
mc_realpath	(*(char),array(char))->(*(char))
(	O
const	O
char	O
*	O
path	*(char)
,	O
char	O
resolved_path	array(char)
[	O
]	O
)	O
{	O
char	O
copy_path	array(char)
[	O
PATH_MAX	int
]	O
;	O
char	O
link_path	array(char)
[	O
PATH_MAX	int
]	O
;	O
char	O
got_path	array(char)
[	O
PATH_MAX	int
]	O
;	O
char	O
*	O
new_path	*(char)
=	O
got_path	array(char)
;	O
char	O
*	O
max_path	*(char)
;	O
int	O
readlinks	int
=	O
0	int
;	O
int	O
n	long
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
>=	O
PATH_MAX	int
-	O
2	int
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
copy_path	array(char)
,	O
path	*(char)
)	O
;	O
path	*(char)
=	O
copy_path	array(char)
;	O
max_path	*(char)
=	O
copy_path	array(char)
+	O
PATH_MAX	int
-	O
2	int
;	O
if	O
(	O
*	O
path	*(char)
!=	O
'/'	O
)	O
{	O
getcwd	(*(char),long)->(*(char))
(	O
new_path	*(char)
,	O
PATH_MAX	int
-	O
1	int
)	O
;	O
new_path	*(char)
+=	O
strlen	(*(char))->(long)
(	O
new_path	*(char)
)	O
;	O
if	O
(	O
new_path	*(char)
[	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
*	O
new_path	*(char)
++	O
=	O
'/'	O
;	O
}	O
else	O
{	O
*	O
new_path	*(char)
++	O
=	O
'/'	O
;	O
path	*(char)
++	O
;	O
}	O
while	O
(	O
*	O
path	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
path	*(char)
==	O
'/'	O
)	O
{	O
path	*(char)
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
*	O
path	*(char)
==	O
'.'	O
)	O
{	O
if	O
(	O
path	*(char)
[	O
1	int
]	O
==	O
'\0'	O
||	O
path	*(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
path	*(char)
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
path	*(char)
[	O
1	int
]	O
==	O
'.'	O
)	O
{	O
if	O
(	O
path	*(char)
[	O
2	int
]	O
==	O
'\0'	O
||	O
path	*(char)
[	O
2	int
]	O
==	O
'/'	O
)	O
{	O
path	*(char)
+=	O
2	int
;	O
if	O
(	O
new_path	*(char)
==	O
got_path	array(char)
+	O
1	int
)	O
continue	O
;	O
while	O
(	O
(	O
--	O
new_path	*(char)
)	O
[	O
-	O
1	int
]	O
!=	O
'/'	O
)	O
;	O
continue	O
;	O
}	O
}	O
}	O
while	O
(	O
*	O
path	*(char)
!=	O
'\0'	O
&&	O
*	O
path	*(char)
!=	O
'/'	O
)	O
{	O
if	O
(	O
path	*(char)
>	O
max_path	*(char)
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
*	O
new_path	*(char)
++	O
=	O
*	O
path	*(char)
++	O
;	O
}	O
if	O
(	O
readlinks	int
++	O
>	O
MAXSYMLINKS	int
)	O
{	O
errno	O
=	O
ELOOP	int
;	O
return	O
NULL	O
;	O
}	O
*	O
new_path	*(char)
=	O
'\0'	O
;	O
n	long
=	O
readlink	(*(char),*(char),long)->(long)
(	O
got_path	array(char)
,	O
link_path	array(char)
,	O
PATH_MAX	int
-	O
1	int
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINVAL	int
)	O
{	O
*	O
new_path	*(char)
=	O
'\0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
resolved_path	array(char)
,	O
got_path	array(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
link_path	array(char)
[	O
n	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
link_path	array(char)
==	O
'/'	O
)	O
new_path	*(char)
=	O
got_path	array(char)
;	O
else	O
while	O
(	O
*	O
(	O
--	O
new_path	*(char)
)	O
!=	O
'/'	O
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
+	O
n	long
>=	O
PATH_MAX	int
-	O
2	int
)	O
{	O
errno	O
=	O
ENAMETOOLONG	int
;	O
return	O
NULL	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
link_path	array(char)
,	O
path	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
copy_path	array(char)
,	O
link_path	array(char)
)	O
;	O
path	*(char)
=	O
copy_path	array(char)
;	O
}	O
*	O
new_path	*(char)
++	O
=	O
'/'	O
;	O
}	O
if	O
(	O
new_path	*(char)
!=	O
got_path	array(char)
+	O
1	int
&&	O
new_path	*(char)
[	O
-	O
1	int
]	O
==	O
'/'	O
)	O
new_path	*(char)
--	O
;	O
*	O
new_path	*(char)
=	O
'\0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
resolved_path	array(char)
,	O
got_path	array(char)
)	O
;	O
return	O
resolved_path	array(char)
;	O
}	O
int	O
get_user_permissions	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
{	O
static	O
gboolean	int
initialized	int
=	O
FALSE	O
;	O
static	O
gid_t	int
*	O
groups	*(*(char))
;	O
static	O
int	O
ngroups	int
;	O
static	O
uid_t	int
uid	int
;	O
int	O
i	array(int)
;	O
if	O
(	O
!	O
initialized	int
)	O
{	O
uid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
ngroups	int
=	O
getgroups	(int,array(int))->(int)
(	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ngroups	int
==	O
-	O
1	int
)	O
ngroups	int
=	O
0	int
;	O
groups	*(*(char))
=	O
g_new	O
(	O
gid_t	int
,	O
ngroups	int
+	O
1	int
)	O
;	O
if	O
(	O
ngroups	int
!=	O
0	int
)	O
{	O
ngroups	int
=	O
getgroups	(int,array(int))->(int)
(	O
ngroups	int
,	O
groups	*(*(char))
)	O
;	O
if	O
(	O
ngroups	int
==	O
-	O
1	int
)	O
ngroups	int
=	O
0	int
;	O
}	O
groups	*(*(char))
[	O
ngroups	int
++	O
]	O
=	O
getegid	()->(int)
(	O
)	O
;	O
initialized	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
->	O
st_uid	int
==	O
uid	int
||	O
uid	int
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
ngroups	int
;	O
i	array(int)
++	O
)	O
{	O
if	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
->	O
st_gid	int
==	O
groups	*(*(char))
[	O
i	array(int)
]	O
)	O
return	O
1	int
;	O
}	O
return	O
2	int
;	O
}	O
