static	O
void	O
free_display	(*(*(struct(*(char),int,int))))->(void)
(	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
display	*(*(struct(*(char),int,int)))
)	O
;	O
static	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
make_display	(int,int)->(*(*(struct(*(char),int,int))))
(	O
int	O
width	long
,	O
int	O
height	long
)	O
;	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
the_display	*(*(struct(*(char),int,int)))
=	O
NULL	O
;	O
int	O
display_inhibited	int
=	O
0	int
;	O
void	O
display_initialize_display	(int,int)->(void)
(	O
int	O
width	long
,	O
int	O
height	long
)	O
{	O
free_display	(*(*(struct(*(char),int,int))))->(void)
(	O
the_display	*(*(struct(*(char),int,int)))
)	O
;	O
the_display	*(*(struct(*(char),int,int)))
=	O
make_display	(int,int)->(*(*(struct(*(char),int,int))))
(	O
width	long
,	O
height	long
)	O
;	O
display_clear_display	(*(*(struct(*(char),int,int))))->(void)
(	O
the_display	*(*(struct(*(char),int,int)))
)	O
;	O
}	O
void	O
display_clear_display	(*(*(struct(*(char),int,int))))->(void)
(	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
display	*(*(struct(*(char),int,int)))
)	O
{	O
register	O
int	O
i	int
;	O
signal_block_winch	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
textlen	int
=	O
0	int
;	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
inverse	int
=	O
0	int
;	O
}	O
signal_unblock_winch	()->(void)
(	O
)	O
;	O
}	O
int	O
display_was_interrupted_p	int
=	O
0	int
;	O
void	O
display_update_display	()->(void)
(	O
void	O
)	O
{	O
register	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
signal_block_winch	()->(void)
(	O
)	O
;	O
display_was_interrupted_p	int
=	O
0	int
;	O
for	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
windows	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
next	*(char)
)	O
{	O
if	O
(	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
flags	int
&	O
W_WindowVisible	int
)	O
==	O
0	int
||	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
flags	int
&	O
W_UpdateWindow	int
)	O
==	O
0	int
||	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
==	O
0	int
)	O
continue	O
;	O
display_update_one_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
if	O
(	O
display_was_interrupted_p	int
)	O
break	O
;	O
}	O
display_update_one_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
the_echo_area	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
signal_unblock_winch	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
find_diff	(*(char),long,*(char),long,*(int))->(int)
(	O
const	O
char	O
*	O
a	*(char)
,	O
size_t	long
alen	long
,	O
const	O
char	O
*	O
b	*(char)
,	O
size_t	long
blen	long
,	O
int	O
*	O
ppos	*(int)
)	O
{	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
,	O
itrb	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
;	O
int	O
i	int
;	O
int	O
pos	int
=	O
0	int
;	O
int	O
first_escape	int
=	O
-	O
1	int
;	O
int	O
escape_pos	int
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
mbi_init	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
,	O
a	*(char)
,	O
alen	long
)	O
,	O
mbi_init	O
(	O
itrb	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
,	O
b	*(char)
,	O
blen	long
)	O
;	O
mbi_avail	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
&&	O
mbi_avail	O
(	O
itrb	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
;	O
i	int
+=	O
wcwidth	(int)->(int)
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
.	O
cur	struct(*(char),long,bool,int,array(char))
.	O
wc	int
)	O
,	O
mbi_advance	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
,	O
mbi_advance	O
(	O
itrb	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
{	O
if	O
(	O
mb_cmp	O
(	O
mbi_cur	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
,	O
mbi_cur	O
(	O
itrb	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
)	O
break	O
;	O
if	O
(	O
first_escape	int
==	O
-	O
1	int
&&	O
*	O
mbi_cur_ptr	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
==	O
'\033'	O
)	O
{	O
first_escape	int
=	O
i	int
;	O
escape_pos	int
=	O
pos	int
;	O
}	O
pos	int
+=	O
mb_len	O
(	O
mbi_cur	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
;	O
}	O
if	O
(	O
mbi_avail	O
(	O
itra	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
||	O
mbi_avail	O
(	O
itrb	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
{	O
if	O
(	O
first_escape	int
!=	O
-	O
1	int
)	O
{	O
*	O
ppos	*(int)
=	O
escape_pos	int
;	O
return	O
first_escape	int
;	O
}	O
else	O
{	O
*	O
ppos	*(int)
=	O
pos	int
;	O
return	O
i	int
;	O
}	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
display_update_line	(long,*(char),long,long)->(int)
(	O
long	O
pl_num	long
,	O
char	O
*	O
printed_line	*(char)
,	O
long	O
pl_bytes	long
,	O
long	O
pl_chars	long
)	O
{	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
display	*(*(struct(*(char),int,int)))
=	O
the_display	*(*(struct(*(char),int,int)))
;	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
display	*(*(struct(*(char),int,int)))
[	O
pl_num	long
]	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
)	O
{	O
int	O
i	int
,	O
off	long
;	O
if	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
)	O
{	O
terminal_goto_xy	(int,int)->(void)
(	O
0	int
,	O
pl_num	long
)	O
;	O
terminal_clear_to_eol	()->(void)
(	O
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
=	O
0	int
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
textlen	int
=	O
0	int
;	O
}	O
i	int
=	O
find_diff	(*(char),long,*(char),long,*(int))->(int)
(	O
printed_line	*(char)
,	O
pl_bytes	long
,	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
,	O
strlen	(*(char))->(long)
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
)	O
,	O
&	O
off	long
)	O
;	O
if	O
(	O
i	int
!=	O
-	O
1	int
)	O
{	O
terminal_goto_xy	(int,int)->(void)
(	O
i	int
,	O
pl_num	long
)	O
;	O
terminal_put_text	(*(char))->(void)
(	O
printed_line	*(char)
+	O
off	long
)	O
;	O
if	O
(	O
(	O
pl_chars	long
<	O
screenwidth	int
&&	O
pl_chars	long
<	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
textlen	int
)	O
||	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
)	O
terminal_clear_to_eol	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
printed_line	*(char)
)	O
>	O
(	O
unsigned	O
int	O
)	O
screenwidth	int
)	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
,	O
strlen	(*(char))->(long)
(	O
printed_line	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
+	O
off	long
,	O
printed_line	*(char)
+	O
off	long
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
textlen	int
=	O
pl_chars	long
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
info_any_buffered_input_p	()->(int)
(	O
)	O
)	O
{	O
display_was_interrupted_p	int
=	O
1	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
decide_if_in_reference	(long,*(int),*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(int))->(void)
(	O
long	O
off	long
,	O
int	O
*	O
in_ref	*(int)
,	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
int	O
*	O
ref_index	*(int)
)	O
{	O
int	O
i	int
=	O
*	O
ref_index	*(int)
;	O
int	O
m	int
=	O
*	O
in_ref	*(int)
;	O
for	O
(	O
;	O
(	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
start	int
>	O
off	long
)	O
break	O
;	O
m	int
=	O
1	int
;	O
if	O
(	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
end	int
>	O
off	long
)	O
break	O
;	O
m	int
=	O
0	int
;	O
}	O
*	O
ref_index	*(int)
=	O
i	int
;	O
*	O
in_ref	*(int)
=	O
m	int
;	O
}	O
static	O
int	O
writing_out	int
;	O
static	O
void	O
wrap_terminal_switch_rendition	(*(struct(*(char),long,long)),struct(long,long),struct(long,long),struct(long,long))->(void)
(	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
printed_line	*(char)
,	O
RENDITION	struct(long,long)
rendition1	struct(long,long)
,	O
RENDITION	struct(long,long)
rendition2	struct(long,long)
,	O
RENDITION	struct(long,long)
rendition3	struct(long,long)
)	O
{	O
long	O
int	O
desired_rendition	long
=	O
0	int
;	O
desired_rendition	long
=	O
rendition1	struct(long,long)
.	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
;	O
desired_rendition	long
&=	O
~	O
rendition2	struct(long,long)
.	O
mask	long
;	O
desired_rendition	long
|=	O
rendition2	struct(long,long)
.	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
;	O
desired_rendition	long
&=	O
~	O
rendition3	struct(long,long)
.	O
mask	long
;	O
desired_rendition	long
|=	O
rendition3	struct(long,long)
.	O
value	union(*(struct(*(()->(void)),*(char),*(struct(*`,*`,*`)),*(char))),*(struct(char,union(*(struct`),*(struct`)))))
;	O
if	O
(	O
writing_out	int
==	O
WRITEOUT	int
)	O
terminal_switch_rendition	(long)->(void)
(	O
desired_rendition	long
)	O
;	O
else	O
{	O
desired_rendition	long
=	O
~	O
desired_rendition	long
;	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
printed_line	*(char)
,	O
"\033"	*(char)
,	O
1	int
)	O
;	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
printed_line	*(char)
,	O
(	O
char	O
*	O
)	O
&	O
desired_rendition	long
,	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
}	O
}	O
static	O
MATCH_STATE	struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long)
*	O
matches	*(struct(long,long))
;	O
static	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
static	O
size_t	long
match_index	*(int)
;	O
static	O
int	O
ref_index	*(int)
;	O
static	O
int	O
pl_chars	long
;	O
static	O
int	O
ref_highlighted	int
;	O
static	O
int	O
pl_num	long
;	O
RENDITION	struct(long,long)
ref_rendition	struct(long,long)
=	O
{	O
UNDERLINE_MASK	int
,	O
UNDERLINE_MASK	int
}	O
;	O
RENDITION	struct(long,long)
hl_ref_rendition	struct(long,long)
=	O
{	O
UNDERLINE_MASK	int
,	O
0	int
}	O
;	O
RENDITION	struct(long,long)
match_rendition	struct(long,long)
=	O
{	O
STANDOUT_MASK	int
,	O
STANDOUT_MASK	int
}	O
;	O
static	O
void	O
display_process_line	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))),*(struct(*(char),long,long)),*(int))->(void)
(	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
*	O
iter_inout	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
tb_printed_line	*(struct(*(char),long,long))
,	O
int	O
*	O
delim	*(int)
)	O
{	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
;	O
const	O
char	O
*	O
cur_ptr	*(char)
;	O
size_t	long
pchars	*(long)
=	O
0	int
;	O
size_t	long
pbytes	*(long)
=	O
0	int
;	O
char	O
*	O
rep	*(char)
;	O
int	O
in_match	*(int)
=	O
0	int
;	O
int	O
in_ref	*(int)
=	O
0	int
,	O
in_ref_proper	int
=	O
0	int
;	O
RENDITION	struct(long,long)
empty	struct(long,long)
=	O
{	O
0	int
,	O
0	int
}	O
;	O
int	O
point_in_line	int
;	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
>=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
]	O
&&	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
<	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
+	O
1	int
]	O
)	O
point_in_line	int
=	O
1	int
;	O
else	O
point_in_line	int
=	O
0	int
;	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
=	O
*	O
iter_inout	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
;	O
while	O
(	O
1	int
)	O
{	O
int	O
was_in_ref_proper	int
=	O
in_ref_proper	int
;	O
int	O
was_in_match	int
=	O
in_match	*(int)
;	O
if	O
(	O
!	O
mbi_avail	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
break	O
;	O
cur_ptr	*(char)
=	O
mbi_cur_ptr	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
if	O
(	O
matches	*(struct(long,long))
&&	O
matches_ready	(*(struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long)))->(int)
(	O
matches	*(struct(long,long))
)	O
&&	O
!	O
at_end_of_matches	(*(struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long)),int)->(int)
(	O
matches	*(struct(long,long))
,	O
match_index	*(int)
)	O
)	O
{	O
int	O
was_in_match	int
=	O
in_match	*(int)
;	O
decide_if_in_match	(long,*(int),*(struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long)),*(long))->(void)
(	O
cur_ptr	*(char)
-	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
,	O
&	O
in_match	*(int)
,	O
matches	*(struct(long,long))
,	O
&	O
match_index	*(int)
)	O
;	O
if	O
(	O
!	O
was_in_match	int
&&	O
in_match	*(int)
&&	O
writing_out	int
==	O
DEFAULT	int
)	O
writing_out	int
=	O
COLLECT	int
;	O
}	O
if	O
(	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
&&	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
]	O
)	O
{	O
int	O
was_in_ref	int
=	O
in_ref	*(int)
;	O
decide_if_in_reference	(long,*(int),*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(int))->(void)
(	O
cur_ptr	*(char)
-	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
,	O
&	O
in_ref	*(int)
,	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
&	O
ref_index	*(int)
)	O
;	O
if	O
(	O
was_in_ref	int
&&	O
!	O
in_ref	*(int)
)	O
{	O
in_ref_proper	int
=	O
ref_highlighted	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
was_in_ref	int
&&	O
in_ref	*(int)
)	O
{	O
if	O
(	O
writing_out	int
==	O
DEFAULT	int
)	O
writing_out	int
=	O
COLLECT	int
;	O
if	O
(	O
point_in_line	int
&&	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
<	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
]	O
->	O
end	int
)	O
{	O
point_in_line	int
=	O
0	int
;	O
ref_highlighted	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
point_in_line	int
&&	O
(	O
!	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
+	O
1	int
]	O
||	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
+	O
1	int
]	O
->	O
start	int
>=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
+	O
1	int
]	O
)	O
)	O
{	O
point_in_line	int
=	O
0	int
;	O
ref_highlighted	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
>=	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
]	O
->	O
start	int
&&	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
<	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
]	O
->	O
end	int
)	O
{	O
ref_highlighted	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
>=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
+	O
1	int
]	O
&&	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
point	long
<	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
+	O
2	int
]	O
&&	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
]	O
->	O
end	int
>=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
+	O
1	int
]	O
&&	O
(	O
!	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
+	O
1	int
]	O
||	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
ref_index	*(int)
+	O
1	int
]	O
->	O
start	int
>=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
pl_num	long
+	O
2	int
]	O
)	O
)	O
{	O
ref_highlighted	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
in_ref	*(int)
&&	O
!	O
in_ref_proper	int
&&	O
!	O
strchr	(*(char),int)->(*(char))
(	O
" \t"	*(char)
,	O
*	O
cur_ptr	*(char)
)	O
)	O
in_ref_proper	int
=	O
1	int
;	O
if	O
(	O
was_in_ref_proper	int
!=	O
in_ref_proper	int
||	O
was_in_match	int
!=	O
in_match	*(int)
)	O
{	O
RENDITION	struct(long,long)
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
{	O
0	int
,	O
0	int
}	O
;	O
RENDITION	struct(long,long)
match	struct(long,long)
=	O
{	O
0	int
,	O
0	int
}	O
;	O
if	O
(	O
in_ref_proper	int
)	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
ref_highlighted	int
&&	O
hl_ref_rendition	struct(long,long)
.	O
mask	long
?	O
hl_ref_rendition	struct(long,long)
:	O
ref_rendition	struct(long,long)
;	O
if	O
(	O
in_match	*(int)
)	O
match	struct(long,long)
=	O
match_rendition	struct(long,long)
;	O
if	O
(	O
!	O
ref_highlighted	int
)	O
{	O
wrap_terminal_switch_rendition	(*(struct(*(char),long,long)),struct(long,long),struct(long,long),struct(long,long))->(void)
(	O
tb_printed_line	*(struct(*(char),long,long))
,	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
match	struct(long,long)
,	O
empty	struct(long,long)
)	O
;	O
}	O
else	O
{	O
wrap_terminal_switch_rendition	(*(struct(*(char),long,long)),struct(long,long),struct(long,long),struct(long,long))->(void)
(	O
tb_printed_line	*(struct(*(char),long,long))
,	O
match	struct(long,long)
,	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
empty	struct(long,long)
)	O
;	O
}	O
}	O
rep	*(char)
=	O
printed_representation	(*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))),*(int),long,*(long),*(long))->(*(char))
(	O
&	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
delim	*(int)
,	O
pl_chars	long
,	O
&	O
pchars	*(long)
,	O
&	O
pbytes	*(long)
)	O
;	O
if	O
(	O
*	O
delim	*(int)
||	O
pl_chars	long
+	O
pchars	*(long)
>=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
width	long
)	O
break	O
;	O
if	O
(	O
rep	*(char)
)	O
{	O
if	O
(	O
writing_out	int
!=	O
WRITEOUT	int
)	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
tb_printed_line	*(struct(*(char),long,long))
,	O
rep	*(char)
,	O
pbytes	*(long)
)	O
;	O
else	O
terminal_write_chars	(*(char),int)->(void)
(	O
rep	*(char)
,	O
pbytes	*(long)
)	O
;	O
pl_chars	long
+=	O
pchars	*(long)
;	O
}	O
mbi_advance	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
}	O
if	O
(	O
writing_out	int
!=	O
DEFAULT	int
)	O
wrap_terminal_switch_rendition	(*(struct(*(char),long,long)),struct(long,long),struct(long,long),struct(long,long))->(void)
(	O
tb_printed_line	*(struct(*(char),long,long))
,	O
empty	struct(long,long)
,	O
empty	struct(long,long)
,	O
empty	struct(long,long)
)	O
;	O
*	O
iter_inout	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
=	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
;	O
}	O
int	O
display_update_node_text	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(int)
(	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
{	O
static	O
struct	O
text_buffer	struct(*(char),long,long)
tb_printed_line	*(struct(*(char),long,long))
;	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
;	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
bol_iter	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
;	O
int	O
bol_ref_index	int
=	O
0	int
,	O
bol_match_index	int
=	O
0	int
;	O
int	O
bol_ref_highlighted	int
;	O
int	O
finish	int
;	O
matches	*(struct(long,long))
=	O
0	int
;	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
0	int
;	O
if	O
(	O
match_rendition	struct(long,long)
.	O
mask	long
)	O
matches	*(struct(long,long))
=	O
&	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
matches	*(struct(long,long))
;	O
if	O
(	O
ref_rendition	struct(long,long)
.	O
mask	long
||	O
hl_ref_rendition	struct(long,long)
.	O
mask	long
)	O
refs	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
pl_num	long
=	O
0	int
;	O
ref_highlighted	int
=	O
0	int
;	O
writing_out	int
=	O
DEFAULT	int
;	O
ref_index	*(int)
=	O
match_index	*(int)
=	O
0	int
;	O
mbi_init	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
+	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
]	O
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
nodelen	long
-	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
]	O
)	O
;	O
mbi_avail	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
delim	*(int)
;	O
mbi_copy	O
(	O
&	O
bol_iter	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
,	O
&	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
bol_ref_index	int
=	O
ref_index	*(int)
;	O
bol_match_index	int
=	O
match_index	*(int)
;	O
bol_ref_highlighted	int
=	O
ref_highlighted	int
;	O
start_of_line	O
:	O
pl_chars	long
=	O
0	int
;	O
text_buffer_reset	O
(	O
&	O
tb_printed_line	*(struct(*(char),long,long))
)	O
;	O
delim	*(int)
=	O
0	int
;	O
if	O
(	O
pl_num	long
==	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
)	O
break	O
;	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
>=	O
screenheight	int
)	O
break	O
;	O
display_process_line	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))),*(struct(*(char),long,long)),*(int))->(void)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
&	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
&	O
tb_printed_line	*(struct(*(char),long,long))
,	O
&	O
delim	*(int)
)	O
;	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
tb_printed_line	*(struct(*(char),long,long))
,	O
'\0'	O
)	O
;	O
finish	int
=	O
0	int
;	O
if	O
(	O
writing_out	int
==	O
DEFAULT	int
)	O
{	O
finish	int
=	O
display_update_line	(long,*(char),long,long)->(int)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
,	O
text_buffer_base	O
(	O
&	O
tb_printed_line	*(struct(*(char),long,long))
)	O
,	O
text_buffer_off	O
(	O
&	O
tb_printed_line	*(struct(*(char),long,long))
)	O
-	O
1	int
,	O
pl_chars	long
)	O
;	O
}	O
else	O
if	O
(	O
writing_out	int
==	O
COLLECT	int
)	O
{	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
]	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
tb_printed_line	*(struct(*(char),long,long))
.	O
base	*(char)
,	O
the_display	*(*(struct(*(char),int,int)))
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
]	O
->	O
text	*(char)
)	O
)	O
{	O
if	O
(	O
tb_printed_line	*(struct(*(char),long,long))
.	O
off	long
>	O
screenwidth	int
)	O
{	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
,	O
tb_printed_line	*(struct(*(char),long,long))
.	O
off	long
+	O
1	int
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
,	O
tb_printed_line	*(struct(*(char),long,long))
.	O
base	*(char)
)	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
textlen	int
=	O
0	int
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
=	O
1	int
;	O
mbi_copy	O
(	O
&	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
,	O
&	O
bol_iter	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
;	O
mbi_avail	O
(	O
bol_iter	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
;	O
ref_index	*(int)
=	O
bol_ref_index	int
;	O
match_index	*(int)
=	O
bol_match_index	int
;	O
terminal_goto_xy	(int,int)->(void)
(	O
0	int
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
)	O
;	O
ref_highlighted	int
=	O
bol_ref_highlighted	int
;	O
writing_out	int
=	O
WRITEOUT	int
;	O
goto	O
start_of_line	O
;	O
}	O
else	O
writing_out	int
=	O
DEFAULT	int
;	O
}	O
else	O
{	O
terminal_clear_to_eol	()->(void)
(	O
)	O
;	O
writing_out	int
=	O
DEFAULT	int
;	O
}	O
if	O
(	O
delim	*(int)
)	O
mbi_advance	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
else	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
<=	O
the_screen	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
-	O
2	int
)	O
{	O
terminal_goto_xy	(int,int)->(void)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
width	long
-	O
1	int
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
pl_num	long
)	O
;	O
if	O
(	O
!	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
flags	int
&	O
W_NoWrap	int
)	O
)	O
terminal_put_text	(*(char))->(void)
(	O
"\\"	*(char)
)	O
;	O
else	O
{	O
terminal_put_text	(*(char))->(void)
(	O
"$"	*(char)
)	O
;	O
for	O
(	O
;	O
mbi_avail	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
mbi_advance	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
if	O
(	O
mb_len	O
(	O
mbi_cur	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
==	O
1	int
&&	O
*	O
mbi_cur_ptr	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
==	O
'\n'	O
)	O
{	O
mbi_advance	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
;	O
break	O
;	O
}	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
pl_num	long
++	O
;	O
if	O
(	O
finish	int
)	O
break	O
;	O
if	O
(	O
!	O
mbi_avail	O
(	O
iter	*(struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char))))
)	O
)	O
break	O
;	O
}	O
return	O
pl_num	long
;	O
}	O
void	O
display_update_one_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
{	O
size_t	long
line_index	long
=	O
0	int
;	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
display	*(*(struct(*(char),int,int)))
=	O
the_display	*(*(struct(*(char),int,int)))
;	O
signal_block_winch	()->(void)
(	O
)	O
;	O
if	O
(	O
display_inhibited	int
)	O
{	O
display_was_interrupted_p	int
=	O
1	int
;	O
goto	O
funexit	O
;	O
}	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
<=	O
0	int
||	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
width	long
<=	O
0	int
)	O
goto	O
funexit	O
;	O
if	O
(	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
<	O
0	int
)	O
||	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
>	O
the_screen	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
)	O
)	O
goto	O
funexit	O
;	O
if	O
(	O
!	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
flags	int
&	O
W_InhibitMode	int
)	O
)	O
{	O
window_make_modeline	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
line_index	long
=	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
;	O
if	O
(	O
(	O
!	O
display	*(*(struct(*(char),int,int)))
[	O
line_index	long
]	O
->	O
inverse	int
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
display	*(*(struct(*(char),int,int)))
[	O
line_index	long
]	O
->	O
text	*(char)
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
modeline	*(char)
)	O
!=	O
0	int
)	O
)	O
&&	O
line_index	long
<	O
the_screen	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
)	O
{	O
terminal_goto_xy	(int,int)->(void)
(	O
0	int
,	O
line_index	long
)	O
;	O
terminal_begin_inverse	()->(void)
(	O
)	O
;	O
terminal_put_text	(*(char))->(void)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
modeline	*(char)
)	O
;	O
terminal_end_inverse	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
display	*(*(struct(*(char),int,int)))
[	O
line_index	long
]	O
->	O
text	*(char)
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
modeline	*(char)
)	O
;	O
display	*(*(struct(*(char),int,int)))
[	O
line_index	long
]	O
->	O
inverse	int
=	O
1	int
;	O
display	*(*(struct(*(char),int,int)))
[	O
line_index	long
]	O
->	O
textlen	int
=	O
strlen	(*(char))->(long)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
modeline	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
{	O
if	O
(	O
!	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
)	O
calculate_line_starts	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
line_index	long
=	O
display_update_node_text	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(int)
(	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
if	O
(	O
display_was_interrupted_p	int
)	O
goto	O
funexit	O
;	O
}	O
for	O
(	O
;	O
line_index	long
<	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
;	O
line_index	long
++	O
)	O
{	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
display	*(*(struct(*(char),int,int)))
[	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
line_index	long
]	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
textlen	int
||	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
)	O
{	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
textlen	int
=	O
0	int
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
inverse	int
=	O
0	int
;	O
terminal_goto_xy	(int,int)->(void)
(	O
0	int
,	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
line_index	long
)	O
;	O
terminal_clear_to_eol	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
info_any_buffered_input_p	()->(int)
(	O
)	O
)	O
{	O
display_was_interrupted_p	int
=	O
1	int
;	O
goto	O
funexit	O
;	O
}	O
}	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
win	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
flags	int
&=	O
~	O
W_UpdateWindow	int
;	O
funexit	O
:	O
signal_unblock_winch	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
display_scroll_region	(int,int,int)->(void)
(	O
int	O
start	int
,	O
int	O
end	int
,	O
int	O
amount	int
)	O
{	O
int	O
i	int
;	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
temp	*(struct(*(char),int,int))
;	O
terminal_scroll_region	(int,int,int)->(void)
(	O
start	int
,	O
end	int
,	O
amount	int
)	O
;	O
if	O
(	O
amount	int
>	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
end	int
-	O
1	int
;	O
i	int
>=	O
start	int
+	O
amount	int
;	O
i	int
--	O
)	O
{	O
temp	*(struct(*(char),int,int))
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
-	O
amount	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
-	O
amount	int
]	O
=	O
temp	*(struct(*(char),int,int))
;	O
}	O
for	O
(	O
i	int
=	O
start	int
;	O
i	int
<	O
start	int
+	O
amount	int
&&	O
i	int
<	O
end	int
;	O
i	int
++	O
)	O
{	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
textlen	int
=	O
0	int
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
inverse	int
=	O
0	int
;	O
}	O
}	O
else	O
{	O
amount	int
*=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
start	int
;	O
i	int
<=	O
end	int
-	O
1	int
-	O
amount	int
;	O
i	int
++	O
)	O
{	O
temp	*(struct(*(char),int,int))
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
+	O
amount	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
+	O
amount	int
]	O
=	O
temp	*(struct(*(char),int,int))
;	O
}	O
for	O
(	O
i	int
=	O
end	int
-	O
1	int
;	O
i	int
>=	O
end	int
-	O
amount	int
&&	O
i	int
>=	O
start	int
;	O
i	int
--	O
)	O
{	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
textlen	int
=	O
0	int
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
inverse	int
=	O
0	int
;	O
}	O
}	O
}	O
void	O
display_scroll_display	(int,int,int)->(void)
(	O
int	O
start	int
,	O
int	O
end	int
,	O
int	O
amount	int
)	O
{	O
register	O
int	O
i	int
,	O
last	int
;	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
temp	*(struct(*(char),int,int))
;	O
if	O
(	O
!	O
terminal_can_scroll	int
&&	O
!	O
terminal_can_scroll_region	int
)	O
return	O
;	O
if	O
(	O
!	O
the_display	*(*(struct(*(char),int,int)))
[	O
0	int
]	O
)	O
return	O
;	O
if	O
(	O
info_any_buffered_input_p	()->(int)
(	O
)	O
)	O
return	O
;	O
if	O
(	O
terminal_can_scroll_region	int
)	O
{	O
display_scroll_region	(int,int,int)->(void)
(	O
start	int
,	O
end	int
,	O
amount	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
amount	int
<	O
0	int
)	O
start	int
-=	O
amount	int
;	O
else	O
end	int
-=	O
amount	int
;	O
terminal_scroll_terminal	(int,int,int)->(void)
(	O
start	int
,	O
end	int
,	O
amount	int
)	O
;	O
if	O
(	O
amount	int
>	O
0	int
)	O
{	O
last	int
=	O
end	int
+	O
amount	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
(	O
end	int
-	O
start	int
)	O
;	O
i	int
++	O
)	O
{	O
temp	*(struct(*(char),int,int))
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
last	int
-	O
i	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
last	int
-	O
i	int
]	O
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
end	int
-	O
i	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
end	int
-	O
i	int
]	O
=	O
temp	*(struct(*(char),int,int))
;	O
}	O
for	O
(	O
i	int
=	O
start	int
;	O
i	int
!=	O
(	O
start	int
+	O
amount	int
)	O
;	O
i	int
++	O
)	O
{	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
textlen	int
=	O
0	int
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
inverse	int
=	O
0	int
;	O
}	O
}	O
else	O
{	O
last	int
=	O
start	int
+	O
amount	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
end	int
-	O
start	int
)	O
;	O
i	int
++	O
)	O
{	O
temp	*(struct(*(char),int,int))
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
last	int
+	O
i	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
last	int
+	O
i	int
]	O
=	O
the_display	*(*(struct(*(char),int,int)))
[	O
start	int
+	O
i	int
]	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
start	int
+	O
i	int
]	O
=	O
temp	*(struct(*(char),int,int))
;	O
}	O
for	O
(	O
i	int
=	O
end	int
+	O
amount	int
;	O
i	int
!=	O
end	int
;	O
i	int
++	O
)	O
{	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
textlen	int
=	O
0	int
;	O
the_display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
inverse	int
=	O
0	int
;	O
}	O
}	O
}	O
void	O
display_scroll_line_starts	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int,*(long),int)->(void)
(	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
int	O
old_pagetop	int
,	O
long	O
*	O
old_starts	*(long)
,	O
int	O
old_count	int
)	O
{	O
register	O
int	O
i	int
,	O
old	int
,	O
new	int
;	O
int	O
last_new	int
,	O
last_old	int
;	O
int	O
old_first	int
,	O
new_first	int
;	O
int	O
unchanged_at_top	int
=	O
0	int
;	O
int	O
already_scrolled	int
=	O
0	int
;	O
old_first	int
=	O
old_pagetop	int
;	O
new_first	int
=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
;	O
last_new	int
=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
-	O
1	int
)	O
;	O
if	O
(	O
last_new	int
>	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_count	long
)	O
last_new	int
=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_count	long
-	O
1	int
;	O
last_old	int
=	O
old_pagetop	int
+	O
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
-	O
1	int
)	O
;	O
if	O
(	O
last_old	int
>	O
old_count	int
)	O
last_old	int
=	O
old_count	int
-	O
1	int
;	O
for	O
(	O
old	int
=	O
old_first	int
,	O
new	int
=	O
new_first	int
;	O
old	int
<	O
last_old	int
&&	O
new	int
<	O
last_new	int
;	O
old	int
++	O
,	O
new	int
++	O
)	O
if	O
(	O
old_starts	*(long)
[	O
old	int
]	O
!=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
new	int
]	O
)	O
break	O
;	O
else	O
unchanged_at_top	int
++	O
;	O
for	O
(	O
old	int
=	O
old_first	int
+	O
unchanged_at_top	int
;	O
old	int
<	O
last_old	int
;	O
old	int
++	O
)	O
{	O
for	O
(	O
new	int
=	O
new_first	int
;	O
new	int
<	O
last_new	int
;	O
new	int
++	O
)	O
if	O
(	O
old_starts	*(long)
[	O
old	int
]	O
==	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
new	int
]	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
old	int
+	O
i	int
)	O
<	O
last_old	int
;	O
i	int
++	O
)	O
if	O
(	O
old_starts	*(long)
[	O
old	int
+	O
i	int
]	O
!=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
line_starts	*(long)
[	O
new	int
+	O
i	int
]	O
)	O
break	O
;	O
{	O
int	O
start	int
,	O
end	int
,	O
amount	int
;	O
start	int
=	O
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
(	O
(	O
old	int
+	O
already_scrolled	int
)	O
-	O
old_pagetop	int
)	O
)	O
;	O
amount	int
=	O
new	int
-	O
(	O
old	int
+	O
already_scrolled	int
)	O
;	O
end	int
=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
+	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
height	long
;	O
if	O
(	O
amount	int
>	O
0	int
)	O
end	int
-=	O
amount	int
;	O
if	O
(	O
(	O
end	int
-	O
start	int
)	O
>	O
0	int
)	O
{	O
display_scroll_display	(int,int,int)->(void)
(	O
start	int
,	O
end	int
,	O
amount	int
)	O
;	O
old	int
+=	O
i	int
;	O
already_scrolled	int
+=	O
amount	int
;	O
}	O
}	O
}	O
}	O
}	O
void	O
display_cursor_at_point	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(void)
(	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
{	O
int	O
vpos	int
,	O
hpos	int
;	O
vpos	int
=	O
window_line_of_point	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(int)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
-	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
pagetop	long
+	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
first_row	long
;	O
hpos	int
=	O
window_get_cursor_column	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(int)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
terminal_goto_xy	(int,int)->(void)
(	O
hpos	int
,	O
vpos	int
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
make_display	(int,int)->(*(*(struct(*(char),int,int))))
(	O
int	O
width	long
,	O
int	O
height	long
)	O
{	O
register	O
int	O
i	int
;	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
display	*(*(struct(*(char),int,int)))
;	O
display	*(*(struct(*(char),int,int)))
=	O
xmalloc	(long)->(*(void))
(	O
(	O
1	int
+	O
height	long
)	O
*	O
sizeof	O
(	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
height	long
;	O
i	int
++	O
)	O
{	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
DISPLAY_LINE	struct(*(char),int,int)
)	O
)	O
;	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
text	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
width	long
)	O
;	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
textlen	int
=	O
0	int
;	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
inverse	int
=	O
0	int
;	O
}	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
display	*(*(struct(*(char),int,int)))
;	O
}	O
static	O
void	O
free_display	(*(*(struct(*(char),int,int))))->(void)
(	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
*	O
display	*(*(struct(*(char),int,int)))
)	O
{	O
register	O
int	O
i	int
;	O
register	O
DISPLAY_LINE	struct(*(char),int,int)
*	O
display_line	*(struct(*(char),int,int))
;	O
if	O
(	O
!	O
display	*(*(struct(*(char),int,int)))
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
display_line	*(struct(*(char),int,int))
=	O
display	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
free	(*(void))->(void)
(	O
display_line	*(struct(*(char),int,int))
->	O
text	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
display_line	*(struct(*(char),int,int))
)	O
;	O
}	O
free	(*(void))->(void)
(	O
display	*(*(struct(*(char),int,int)))
)	O
;	O
}	O
