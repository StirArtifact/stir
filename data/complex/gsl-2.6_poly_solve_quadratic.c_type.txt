int	O
gsl_poly_solve_quadratic	(double,double,double,*(double),*(double))->(int)
(	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
c	array(double)
,	O
double	O
*	O
x0	*(double)
,	O
double	O
*	O
x1	*(double)
)	O
{	O
if	O
(	O
a	double
==	O
0	int
)	O
{	O
if	O
(	O
b	double
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
else	O
{	O
*	O
x0	*(double)
=	O
-	O
c	array(double)
/	O
b	double
;	O
return	O
1	int
;	O
}	O
;	O
}	O
{	O
double	O
disc	double
=	O
b	double
*	O
b	double
-	O
4	int
*	O
a	double
*	O
c	array(double)
;	O
if	O
(	O
disc	double
>	O
0	int
)	O
{	O
if	O
(	O
b	double
==	O
0	int
)	O
{	O
double	O
r	double
=	O
sqrt	(double)->(double)
(	O
-	O
c	array(double)
/	O
a	double
)	O
;	O
*	O
x0	*(double)
=	O
-	O
r	double
;	O
*	O
x1	*(double)
=	O
r	double
;	O
}	O
else	O
{	O
double	O
sgnb	double
=	O
(	O
b	double
>	O
0	int
?	O
1	int
:	O
-	O
1	int
)	O
;	O
double	O
temp	double
=	O
-	O
0.5	int
*	O
(	O
b	double
+	O
sgnb	double
*	O
sqrt	(double)->(double)
(	O
disc	double
)	O
)	O
;	O
double	O
r1	double
=	O
temp	double
/	O
a	double
;	O
double	O
r2	double
=	O
c	array(double)
/	O
temp	double
;	O
if	O
(	O
r1	double
<	O
r2	double
)	O
{	O
*	O
x0	*(double)
=	O
r1	double
;	O
*	O
x1	*(double)
=	O
r2	double
;	O
}	O
else	O
{	O
*	O
x0	*(double)
=	O
r2	double
;	O
*	O
x1	*(double)
=	O
r1	double
;	O
}	O
}	O
return	O
2	int
;	O
}	O
else	O
if	O
(	O
disc	double
==	O
0	int
)	O
{	O
*	O
x0	*(double)
=	O
-	O
0.5	int
*	O
b	double
/	O
a	double
;	O
*	O
x1	*(double)
=	O
-	O
0.5	int
*	O
b	double
/	O
a	double
;	O
return	O
2	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
}	O
}	O
