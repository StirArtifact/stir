void	O
unwind	(int,int)->(void)
(	O
frame_ptr	O
fr	int
,	O
object	O
tag	int
)	O
{	O
signals_allowed	O
=	O
0	int
;	O
nlj_fr	O
=	O
fr	int
;	O
nlj_tag	O
=	O
tag	int
;	O
nlj_active	O
=	O
TRUE	O
;	O
while	O
(	O
frs_top	O
!=	O
fr	int
&&	O
frs_top	O
->	O
frs_class	O
==	O
FRS_CATCH	O
&&	O
frs_top	O
>=	O
frs_org	O
)	O
{	O
--	O
frs_top	O
;	O
}	O
if	O
(	O
frs_top	O
<	O
frs_org	O
)	O
{	O
frs_top	O
=	O
frs_org	O
;	O
FEerror	()->(int)
(	O
"Cannot unwind frame"	*(char)
,	O
0	int
)	O
;	O
}	O
lex_env	O
=	O
frs_top	O
->	O
frs_lex	O
;	O
ihs_top	O
=	O
frs_top	O
->	O
frs_ihs	O
;	O
bds_unwind	()->(int)
(	O
frs_top	O
->	O
frs_bds_top	O
)	O
;	O
in_signal_handler	O
=	O
frs_top	O
->	O
frs_in_signal_handler	O
;	O
signals_allowed	O
=	O
sig_normal	O
;	O
longjmp	()->(int)
(	O
(	O
void	O
*	O
)	O
frs_top	O
->	O
frs_jmpbuf	O
,	O
0	int
)	O
;	O
}	O
frame_ptr	O
frs_sch	(int)->(int)
(	O
object	O
frame_id	int
)	O
{	O
frame_ptr	O
top	O
;	O
for	O
(	O
top	O
=	O
frs_top	O
;	O
top	O
>=	O
frs_org	O
;	O
top	O
--	O
)	O
if	O
(	O
top	O
->	O
frs_val	O
==	O
frame_id	int
&&	O
top	O
->	O
frs_class	O
==	O
FRS_CATCH	O
)	O
return	O
(	O
top	O
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
frame_ptr	O
frs_sch_catch	(int)->(int)
(	O
object	O
frame_id	int
)	O
{	O
frame_ptr	O
top	O
;	O
for	O
(	O
top	O
=	O
frs_top	O
;	O
top	O
>=	O
frs_org	O
;	O
top	O
--	O
)	O
if	O
(	O
(	O
top	O
->	O
frs_val	O
==	O
frame_id	int
&&	O
top	O
->	O
frs_class	O
==	O
FRS_CATCH	O
)	O
||	O
top	O
->	O
frs_class	O
==	O
FRS_CATCHALL	O
)	O
return	O
(	O
top	O
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
