static	O
char	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
[	O
]	O
=	O
"/gnuitrc."	*(char)
;	O
static	O
char	O
USER_CONFIGFILE_PREFIX	array(char)
[	O
]	O
=	O
"/.gnuitrc."	*(char)
;	O
static	O
char	O
OLD_USER_CONFIGFILE_PREFIX	array(char)
[	O
]	O
=	O
"/.gitrc."	*(char)
;	O
static	O
char	O
*	O
termdir	*(char)
;	O
static	O
char	O
*	O
bindir	*(char)
;	O
char	O
*	O
login_name	*(char)
;	O
char	O
*	O
day_name	array(*(char))
[	O
]	O
=	O
{	O
"Sun"	*(char)
,	O
"Mon"	*(char)
,	O
"Tue"	*(char)
,	O
"Wed"	*(char)
,	O
"Thu"	*(char)
,	O
"Fri"	*(char)
,	O
"Sat"	*(char)
}	O
;	O
char	O
*	O
month_name	array(*(char))
[	O
]	O
=	O
{	O
"Jan"	*(char)
,	O
"Feb"	*(char)
,	O
"Mar"	*(char)
,	O
"Apr"	*(char)
,	O
"May"	*(char)
,	O
"Jun"	*(char)
,	O
"Jul"	*(char)
,	O
"Aug"	*(char)
,	O
"Sep"	*(char)
,	O
"Oct"	*(char)
,	O
"Nov"	*(char)
,	O
"Dec"	*(char)
}	O
;	O
file_type_info_t	struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct(*`,int,int,int,*`)))))
*	O
fti_head	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
NULL	O
;	O
extern	O
void	O
fatal	(*(char))->(void)
PROTO	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
void	O
compute_directories	()->(void)
(	O
)	O
{	O
char	O
*	O
prefix_relative_bin_dir	*(char)
=	O
"/bin"	*(char)
;	O
char	O
*	O
prefix_relative_term_dir	*(char)
=	O
"/share/gnuit"	*(char)
;	O
bindir	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
PREFIX	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
prefix_relative_bin_dir	*(char)
)	O
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
bindir	*(char)
,	O
"%s%s"	*(char)
,	O
PREFIX	*(char)
,	O
prefix_relative_bin_dir	*(char)
)	O
;	O
termdir	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
PREFIX	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
prefix_relative_term_dir	*(char)
)	O
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
termdir	*(char)
,	O
"%s%s"	*(char)
,	O
PREFIX	*(char)
,	O
prefix_relative_term_dir	*(char)
)	O
;	O
}	O
void	O
update_path	()->(void)
(	O
)	O
{	O
char	O
*	O
path	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PATH"	*(char)
)	O
;	O
if	O
(	O
path	*(char)
==	O
NULL	O
)	O
xsetenv	(*(char),*(char))->(int)
(	O
"PATH"	*(char)
,	O
bindir	*(char)
)	O
;	O
else	O
{	O
char	O
*	O
new_value	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
bindir	*(char)
)	O
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
new_value	*(char)
,	O
"%s:%s"	*(char)
,	O
path	*(char)
,	O
bindir	*(char)
)	O
;	O
xsetenv	(*(char),*(char))->(int)
(	O
"PATH"	*(char)
,	O
new_value	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
new_value	*(char)
)	O
;	O
}	O
}	O
void	O
display_exit_message	(*(char))->(void)
(	O
signame	*(char)
)	O
char	O
*	O
signame	*(char)
;	O
{	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
time	struct(long,long)
=	O
get_local_time	()->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %d %2d:%02d:%02d %s[%d]: exiting on %s signal\n"	*(char)
,	O
month_name	array(*(char))
[	O
time	struct(long,long)
->	O
tm_mon	int
]	O
,	O
time	struct(long,long)
->	O
tm_mday	int
,	O
time	struct(long,long)
->	O
tm_hour	int
,	O
time	struct(long,long)
->	O
tm_min	int
,	O
time	struct(long,long)
->	O
tm_sec	int
,	O
g_program	*(char)
,	O
(	O
int	O
)	O
getpid	()->(int)
(	O
)	O
,	O
signame	*(char)
)	O
;	O
}	O
extern	O
void	O
clean_up	()->(void)
PROTO	O
(	O
(	O
)	O
)	O
;	O
RETSIGTYPE	void
fatal_signal	(int)->(void)
(	O
signum	int
)	O
int	O
signum	int
;	O
{	O
clean_up	()->(void)
(	O
)	O
;	O
switch	O
(	O
signum	int
)	O
{	O
case	O
SIGTERM	int
:	O
display_exit_message	(*(char))->(void)
(	O
"TERM"	*(char)
)	O
;	O
break	O
;	O
case	O
SIGHUP	int
:	O
case	O
SIGINT	int
:	O
display_exit_message	(*(char))->(void)
(	O
(	O
signum	int
==	O
SIGHUP	int
)	O
?	O
"HUP"	*(char)
:	O
"INT"	*(char)
)	O
;	O
break	O
;	O
case	O
SIGSEGV	int
:	O
display_exit_message	(*(char))->(void)
(	O
"SEGV"	*(char)
)	O
;	O
goto	O
ask_report	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: got a stupid signal (%d). Unless it was a joke ...\n"	*(char)
,	O
g_program	*(char)
,	O
signum	int
)	O
;	O
ask_report	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: please report to gnuit-dev@gnu.org\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
break	O
;	O
}	O
exit	(int)->(void)
(	O
signum	int
)	O
;	O
}	O
void	O
configuration_fatal_error	(*(char))->(void)
(	O
configfile	*(char)
)	O
char	O
*	O
configfile	*(char)
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: installation problem: \n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: cannot find configuration file '%s'.\n\n"	*(char)
,	O
g_program	*(char)
,	O
configfile	*(char)
)	O
;	O
}	O
void	O
configuration_warning	(*(char))->(void)
(	O
configfile	*(char)
)	O
char	O
*	O
configfile	*(char)
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%s: Cannot open configuration file '%s'.\n"	*(char)
,	O
g_program	*(char)
,	O
configfile	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: See the info documentation for details.\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: If the TERM environment variable is, say, vt102, your\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: configuration file name is 'gnuitrc.vt102'.\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: You can copy a configuration file in your home directory\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: and modify it in order to overwrite the default one.\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Add a dot at the start of the file, e.g. '~/.gnuitrc.xterm'.\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Try modifying 'gnuitrc.generic'...\n\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
}	O
void	O
common_configuration_init	()->(void)
(	O
)	O
{	O
char	O
*	O
configfile	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
termdir	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
)	O
+	O
sizeof	O
(	O
"common"	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
termdir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
"common"	*(char)
)	O
;	O
if	O
(	O
configuration_init	(*(char))->(int)
(	O
configfile	*(char)
)	O
==	O
0	int
)	O
{	O
configuration_fatal_error	(*(char))->(void)
(	O
configfile	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
int	O
specific_configuration_init	()->(int)
(	O
)	O
{	O
char	O
*	O
configfile	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
g_home	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
USER_CONFIGFILE_PREFIX	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
tty_type	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
g_home	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
USER_CONFIGFILE_PREFIX	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
tty_type	*(char)
)	O
;	O
if	O
(	O
configuration_init	(*(char))->(int)
(	O
configfile	*(char)
)	O
==	O
0	int
)	O
{	O
xfree	(*(void))->(void)
(	O
configfile	*(char)
)	O
;	O
configfile	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
g_home	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
OLD_USER_CONFIGFILE_PREFIX	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
tty_type	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
g_home	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
OLD_USER_CONFIGFILE_PREFIX	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
tty_type	*(char)
)	O
;	O
if	O
(	O
configuration_init	(*(char))->(int)
(	O
configfile	*(char)
)	O
==	O
0	int
)	O
{	O
xfree	(*(void))->(void)
(	O
configfile	*(char)
)	O
;	O
configfile	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
termdir	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
tty_type	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
termdir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
tty_type	*(char)
)	O
;	O
if	O
(	O
configuration_init	(*(char))->(int)
(	O
configfile	*(char)
)	O
==	O
0	int
)	O
{	O
configuration_warning	(*(char))->(void)
(	O
configfile	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
configfile	*(char)
)	O
;	O
configfile	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
termdir	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
)	O
+	O
sizeof	O
(	O
"generic"	*(char)
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
termdir	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
SYSTEM_CONFIGFILE_PREFIX	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
configfile	*(char)
,	O
"generic"	*(char)
)	O
;	O
if	O
(	O
configuration_init	(*(char))->(int)
(	O
configfile	*(char)
)	O
==	O
0	int
)	O
{	O
configuration_fatal_error	(*(char))->(void)
(	O
configfile	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
}	O
}	O
xfree	(*(void))->(void)
(	O
configfile	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
void	O
use_section	(*(char))->(void)
(	O
section	*(char)
)	O
char	O
*	O
section	*(char)
;	O
{	O
char	O
*	O
gitfmprefix	*(char)
=	O
"[GITFM-"	*(char)
;	O
char	O
*	O
gitprefix	*(char)
=	O
"[GIT-"	*(char)
;	O
if	O
(	O
configuration_section	(*(char))->(int)
(	O
section	*(char)
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
section	*(char)
,	O
gitfmprefix	*(char)
,	O
strlen	(*(char))->(long)
(	O
gitfmprefix	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
char	O
*	O
newsection	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
gitprefix	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
section	*(char)
+	O
strlen	(*(char))->(long)
(	O
gitprefix	*(char)
)	O
)	O
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
newsection	*(char)
,	O
gitprefix	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
newsection	*(char)
,	O
section	*(char)
+	O
strlen	(*(char))->(long)
(	O
gitfmprefix	*(char)
)	O
)	O
;	O
if	O
(	O
configuration_section	(*(char))->(int)
(	O
newsection	*(char)
)	O
!=	O
-	O
1	int
)	O
{	O
xfree	(*(void))->(void)
(	O
newsection	*(char)
)	O
;	O
return	O
;	O
}	O
xfree	(*(void))->(void)
(	O
newsection	*(char)
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: can't find section %s in the configuration file.\n"	*(char)
,	O
g_program	*(char)
,	O
section	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
int	O
get_int_var	(*(char),int)->(int)
(	O
var_name	*(char)
,	O
default_value	int
)	O
char	O
*	O
var_name	*(char)
;	O
int	O
default_value	int
;	O
{	O
char	O
*	O
data	*(char)
;	O
configuration_getvarinfo	(*(char),*(*(char)),int,int)->(void)
(	O
var_name	*(char)
,	O
&	O
data	*(char)
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
return	O
data	*(char)
?	O
atoi	(*(char))->(int)
(	O
data	*(char)
)	O
:	O
default_value	int
;	O
}	O
int	O
get_const_var	(*(char),array(*(char)),int,int)->(int)
(	O
var_name	*(char)
,	O
options	array(*(char))
,	O
options_no	int
,	O
default_value	int
)	O
char	O
*	O
var_name	*(char)
,	O
*	O
options	array(*(char))
[	O
]	O
;	O
int	O
options_no	int
,	O
default_value	int
;	O
{	O
int	O
i	int
;	O
char	O
*	O
data	*(char)
;	O
configuration_getvarinfo	(*(char),*(*(char)),int,int)->(void)
(	O
var_name	*(char)
,	O
&	O
data	*(char)
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	*(char)
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
options_no	int
;	O
i	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
data	*(char)
,	O
options	array(*(char))
[	O
i	int
]	O
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
i	int
==	O
options_no	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: invalid %s (%s).\n"	*(char)
,	O
g_program	*(char)
,	O
var_name	*(char)
,	O
data	*(char)
)	O
;	O
else	O
return	O
i	int
;	O
}	O
return	O
default_value	int
;	O
}	O
int	O
get_flag_var	(*(char),int)->(int)
(	O
var_name	*(char)
,	O
default_value	int
)	O
char	O
*	O
var_name	*(char)
;	O
int	O
default_value	int
;	O
{	O
char	O
*	O
data	*(char)
;	O
configuration_getvarinfo	(*(char),*(*(char)),int,int)->(void)
(	O
var_name	*(char)
,	O
&	O
data	*(char)
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
data	*(char)
,	O
"ON"	*(char)
)	O
==	O
0	int
)	O
return	O
1	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
data	*(char)
,	O
"OFF"	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: invalid %s (%s).\n"	*(char)
,	O
g_program	*(char)
,	O
var_name	*(char)
,	O
data	*(char)
)	O
;	O
return	O
default_value	int
;	O
}	O
return	O
default_value	int
;	O
}	O
char	O
*	O
get_string_var	(*(char),*(char))->(*(char))
(	O
var_name	*(char)
,	O
default_value	int
)	O
char	O
*	O
var_name	*(char)
,	O
*	O
default_value	int
;	O
{	O
char	O
*	O
data	*(char)
;	O
configuration_getvarinfo	(*(char),*(*(char)),int,int)->(void)
(	O
var_name	*(char)
,	O
&	O
data	*(char)
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	*(char)
)	O
return	O
xstrdup	(*(char))->(*(char))
(	O
data	*(char)
)	O
;	O
return	O
default_value	int
;	O
}	O
void	O
get_colorset_var	(*(int),array(*(char)),int)->(void)
(	O
charset	*(int)
,	O
colorset_name	array(*(char))
,	O
fields_no	int
)	O
int	O
*	O
charset	*(int)
;	O
char	O
*	O
colorset_name	array(*(char))
[	O
]	O
;	O
int	O
fields_no	int
;	O
{	O
int	O
i	int
,	O
index	(*(char),int)->(*(char))
;	O
char	O
*	O
data	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
fields_no	int
;	O
i	int
++	O
)	O
{	O
configuration_getvarinfo	(*(char),*(*(char)),int,int)->(void)
(	O
colorset_name	array(*(char))
[	O
i	int
]	O
,	O
&	O
data	*(char)
,	O
1	int
,	O
DO_SEEK	int
)	O
;	O
if	O
(	O
data	*(char)
)	O
{	O
index	(*(char),int)->(*(char))
=	O
tty_get_color_index	(*(char))->(int)
(	O
data	*(char)
)	O
;	O
if	O
(	O
index	(*(char),int)->(*(char))
==	O
-	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: invalid %s (%s).\n"	*(char)
,	O
g_program	*(char)
,	O
colorset_name	array(*(char))
[	O
i	int
]	O
,	O
data	*(char)
)	O
;	O
else	O
charset	*(int)
[	O
i	int
]	O
=	O
index	(*(char),int)->(*(char))
;	O
}	O
}	O
}	O
char	O
*	O
minimize_path	(*(char))->(*(char))
(	O
path	*(char)
)	O
char	O
*	O
path	*(char)
;	O
{	O
char	O
*	O
cpath	*(char)
=	O
path	*(char)
;	O
char	O
*	O
opath	*(char)
=	O
path	*(char)
;	O
if	O
(	O
*	O
opath	*(char)
==	O
'/'	O
)	O
*	O
cpath	*(char)
++	O
=	O
*	O
opath	*(char)
++	O
;	O
else	O
fatal	(*(char))->(void)
(	O
"relative path encountered"	*(char)
)	O
;	O
while	O
(	O
*	O
opath	*(char)
)	O
{	O
while	O
(	O
*	O
opath	*(char)
==	O
'/'	O
||	O
(	O
*	O
opath	*(char)
==	O
'.'	O
&&	O
(	O
*	O
(	O
opath	*(char)
+	O
1	int
)	O
==	O
'/'	O
||	O
*	O
(	O
opath	*(char)
+	O
1	int
)	O
==	O
'\0'	O
)	O
)	O
)	O
opath	*(char)
++	O
;	O
if	O
(	O
*	O
opath	*(char)
==	O
'.'	O
&&	O
*	O
(	O
opath	*(char)
+	O
1	int
)	O
==	O
'.'	O
&&	O
(	O
*	O
(	O
opath	*(char)
+	O
2	int
)	O
==	O
'/'	O
||	O
*	O
(	O
opath	*(char)
+	O
2	int
)	O
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
cpath	*(char)
-	O
1	int
!=	O
path	*(char)
)	O
{	O
for	O
(	O
cpath	*(char)
-=	O
2	int
;	O
*	O
cpath	*(char)
!=	O
'/'	O
;	O
cpath	*(char)
--	O
)	O
;	O
cpath	*(char)
++	O
;	O
}	O
opath	*(char)
+=	O
2	int
;	O
continue	O
;	O
}	O
while	O
(	O
*	O
opath	*(char)
&&	O
*	O
opath	*(char)
!=	O
'/'	O
)	O
*	O
cpath	*(char)
++	O
=	O
*	O
opath	*(char)
++	O
;	O
if	O
(	O
*	O
opath	*(char)
)	O
*	O
cpath	*(char)
++	O
=	O
'/'	O
;	O
}	O
if	O
(	O
*	O
(	O
cpath	*(char)
-	O
1	int
)	O
==	O
'/'	O
&&	O
cpath	*(char)
-	O
path	*(char)
>	O
1	int
)	O
cpath	*(char)
--	O
;	O
*	O
cpath	*(char)
=	O
'\0'	O
;	O
return	O
path	*(char)
;	O
}	O
void	O
get_login_name	()->(void)
(	O
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
int	O
euid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
if	O
(	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
euid	int
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: OOOPS, I can't get your user name (euid = %d)!\n"	*(char)
,	O
g_program	*(char)
,	O
euid	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Your account no longer exists or you are a %s"	*(char)
,	O
g_program	*(char)
,	O
"SYSTEM CRACKER! :-)\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: Correct the problem and try again.\n"	*(char)
,	O
g_program	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
login_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
}	O
void	O
truncate_long_name	(*(char),*(char),int)->(void)
(	O
name	*(char)
,	O
dest	*(char)
,	O
len	int
)	O
char	O
*	O
name	*(char)
,	O
*	O
dest	*(char)
;	O
int	O
len	int
;	O
{	O
int	O
name_len	int
;	O
switch	O
(	O
len	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
dest	*(char)
[	O
0	int
]	O
=	O
' '	O
;	O
break	O
;	O
case	O
2	int
:	O
dest	*(char)
[	O
0	int
]	O
=	O
dest	*(char)
[	O
1	int
]	O
=	O
' '	O
;	O
break	O
;	O
case	O
3	int
:	O
dest	*(char)
[	O
0	int
]	O
=	O
dest	*(char)
[	O
1	int
]	O
=	O
dest	*(char)
[	O
2	int
]	O
=	O
' '	O
;	O
break	O
;	O
default	O
:	O
name_len	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
name_len	int
>	O
len	int
)	O
{	O
dest	*(char)
[	O
0	int
]	O
=	O
dest	*(char)
[	O
1	int
]	O
=	O
dest	*(char)
[	O
2	int
]	O
=	O
'.'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dest	*(char)
+	O
3	int
,	O
name	*(char)
+	O
name_len	int
-	O
len	int
+	O
3	int
,	O
len	int
-	O
3	int
)	O
;	O
}	O
else	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dest	*(char)
,	O
name	*(char)
,	O
name_len	int
)	O
;	O
break	O
;	O
}	O
}	O
char	O
*	O
truncate_string	(*(char),*(char),int)->(*(char))
(	O
path	*(char)
,	O
temppath	*(char)
,	O
len	int
)	O
char	O
*	O
path	*(char)
;	O
char	O
*	O
temppath	*(char)
;	O
int	O
len	int
;	O
{	O
truncate_long_name	(*(char),*(char),int)->(void)
(	O
path	*(char)
,	O
temppath	*(char)
,	O
len	int
-	O
1	int
)	O
;	O
temppath	*(char)
[	O
min	O
(	O
len	int
-	O
1	int
,	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
)	O
]	O
=	O
'\0'	O
;	O
return	O
temppath	*(char)
;	O
}	O
off64_t	long
get_file_length	(int)->(long)
(	O
fd	int
)	O
int	O
fd	int
;	O
{	O
off64_t	long
current	long
,	O
length	long
;	O
current	long
=	O
lseek64	(int,long,int)->(long)
(	O
fd	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
length	long
=	O
lseek64	(int,long,int)->(long)
(	O
fd	int
,	O
0	int
,	O
SEEK_END	int
)	O
;	O
lseek64	(int,long,int)->(long)
(	O
fd	int
,	O
current	long
,	O
SEEK_SET	int
)	O
;	O
return	O
length	long
;	O
}	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
get_local_time	()->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
)	O
{	O
time_t	long
__time	long
;	O
__time	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
return	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
__time	long
)	O
;	O
}	O
int	O
xsetenv	(*(char),*(char))->(int)
(	O
variable	*(char)
,	O
value	*(char)
)	O
char	O
*	O
variable	*(char)
;	O
char	O
*	O
value	*(char)
;	O
{	O
int	O
result	int
;	O
{	O
char	O
*	O
environment_string	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
variable	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
environment_string	*(char)
,	O
"%s=%s"	*(char)
,	O
variable	*(char)
,	O
value	*(char)
)	O
;	O
result	int
=	O
putenv	(*(char))->(int)
(	O
environment_string	*(char)
)	O
;	O
}	O
if	O
(	O
result	int
==	O
-	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: warning: cannot add '%s' to environment\n"	*(char)
,	O
g_program	*(char)
,	O
variable	*(char)
)	O
;	O
return	O
result	int
;	O
}	O
void	O
toprintable	(*(char),long)->(void)
(	O
string	*(char)
,	O
length	long
)	O
char	O
*	O
string	*(char)
;	O
size_t	long
length	long
;	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
length	long
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isprint	(int)->(int)
(	O
(	O
int	O
)	O
string	*(char)
[	O
i	int
]	O
)	O
)	O
string	*(char)
[	O
i	int
]	O
=	O
'?'	O
;	O
}	O
int	O
needs_quotes	(*(char),long)->(int)
(	O
string	*(char)
,	O
length	long
)	O
char	O
*	O
string	*(char)
;	O
size_t	long
length	long
;	O
{	O
size_t	long
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
length	long
;	O
i	int
++	O
)	O
if	O
(	O
!	O
isalnum	(int)->(int)
(	O
(	O
int	O
)	O
string	*(char)
[	O
i	int
]	O
)	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'.'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'-'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'+'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'='	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'~'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'^'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'%'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'@'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'/'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
':'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'{'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'}'	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
','	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'_'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
is_a_bg_command	(*(char))->(int)
(	O
cmd	*(char)
)	O
char	O
*	O
cmd	*(char)
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
strlen	(*(char))->(long)
(	O
cmd	*(char)
)	O
-	O
1	int
;	O
i	int
>=	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
cmd	*(char)
[	O
i	int
]	O
==	O
'&'	O
)	O
return	O
1	int
;	O
if	O
(	O
cmd	*(char)
[	O
i	int
]	O
!=	O
' '	O
&&	O
cmd	*(char)
[	O
i	int
]	O
!=	O
key_TAB	int
)	O
return	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
is_an_empty_command	(*(char))->(int)
(	O
cmd	*(char)
)	O
char	O
*	O
cmd	*(char)
;	O
{	O
for	O
(	O
;	O
*	O
cmd	*(char)
;	O
cmd	*(char)
++	O
)	O
if	O
(	O
*	O
cmd	*(char)
!=	O
' '	O
&&	O
*	O
cmd	*(char)
!=	O
';'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
void	O
get_file_type_info	()->(void)
(	O
)	O
{	O
char	O
*	O
contents	array(*(char))
[	O
3	int
]	O
;	O
char	O
pattern	*(char)
[	O
80	int
]	O
;	O
int	O
brightness	int
,	O
foreground	int
,	O
background	int
;	O
file_type_info_t	struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct(*`,int,int,int,*`)))))
*	O
previous	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
NULL	O
,	O
*	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
,	O
*	O
fti_head1	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
configuration_getvarinfo	(*(char),*(*(char)),int,int)->(void)
(	O
pattern	*(char)
,	O
contents	array(*(char))
,	O
3	int
,	O
NO_SEEK	int
)	O
;	O
if	O
(	O
*	O
pattern	*(char)
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
contents	array(*(char))
[	O
0	int
]	O
)	O
foreground	int
=	O
tty_get_color_index	(*(char))->(int)
(	O
contents	array(*(char))
[	O
0	int
]	O
)	O
;	O
else	O
foreground	int
=	O
-	O
1	int
;	O
if	O
(	O
contents	array(*(char))
[	O
1	int
]	O
)	O
background	int
=	O
tty_get_color_index	(*(char))->(int)
(	O
contents	array(*(char))
[	O
1	int
]	O
)	O
;	O
else	O
background	int
=	O
-	O
1	int
;	O
if	O
(	O
contents	array(*(char))
[	O
2	int
]	O
)	O
brightness	int
=	O
tty_get_color_index	(*(char))->(int)
(	O
contents	array(*(char))
[	O
2	int
]	O
)	O
;	O
else	O
brightness	int
=	O
-	O
1	int
;	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
(	O
file_type_info_t	struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct(*`,int,int,int,*`)))))
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
file_type_info_t	struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct(*`,int,int,int,*`)))))
)	O
)	O
;	O
if	O
(	O
fti_head1	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
==	O
NULL	O
)	O
fti_head1	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
previous	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
;	O
else	O
previous	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),*(void))),*(void)))
=	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
;	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
pattern	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
pattern	*(char)
)	O
;	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
foreground	int
=	O
foreground	int
;	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
background	int
=	O
background	int
;	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
brightness	int
=	O
brightness	int
;	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
previous	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
fti	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
;	O
}	O
if	O
(	O
fti_head1	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
)	O
{	O
if	O
(	O
fti_head	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
)	O
{	O
previous	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),*(void))),*(void)))
=	O
fti_head	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
;	O
fti_head	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
fti_head1	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
;	O
}	O
else	O
fti_head	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
=	O
fti_head1	*(struct(*(char),int,int,int,*(struct(*(char),int,int,int,*(struct`)))))
;	O
}	O
}	O
