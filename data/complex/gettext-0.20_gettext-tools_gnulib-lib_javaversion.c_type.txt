struct	O
locals	struct(*(char))
{	O
char	O
*	O
line	*(char)
;	O
}	O
;	O
static	O
bool	bool
execute_and_read_line	(*(char),*(char),*(*(char)),*(void))->(bool)
(	O
const	O
char	O
*	O
progname	*(char)
,	O
const	O
char	O
*	O
prog_path	*(char)
,	O
char	O
*	O
*	O
prog_argv	*(*(char))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
struct	O
locals	struct(*(char))
*	O
l	*(struct(*(char)))
=	O
(	O
struct	O
locals	struct(*(char))
*	O
)	O
private_data	*(void)
;	O
pid_t	int
child	int
;	O
int	O
fd	array(int)
[	O
1	int
]	O
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
line	*(char)
;	O
size_t	long
linesize	long
;	O
size_t	long
linelen	long
;	O
int	O
exitstatus	int
;	O
child	int
=	O
create_pipe_in	(*(char),*(char),*(*(char)),*(char),bool,bool,bool,array(int))->(int)
(	O
progname	*(char)
,	O
prog_path	*(char)
,	O
prog_argv	*(*(char))
,	O
DEV_NULL	*(char)
,	O
false	int
,	O
true	int
,	O
false	int
,	O
fd	array(int)
)	O
;	O
if	O
(	O
child	int
==	O
-	O
1	int
)	O
return	O
false	int
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fd	array(int)
[	O
0	int
]	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"fdopen() failed"	*(char)
)	O
)	O
;	O
return	O
false	int
;	O
}	O
line	*(char)
=	O
NULL	O
;	O
linesize	long
=	O
0	int
;	O
linelen	long
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
line	*(char)
,	O
&	O
linesize	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
linelen	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s subprocess I/O error"	*(char)
)	O
,	O
progname	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
linelen	long
>	O
0	int
&&	O
line	*(char)
[	O
linelen	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
line	*(char)
[	O
linelen	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exitstatus	int
=	O
wait_subprocess	(int,*(char),bool,bool,bool,bool,*(int))->(int)
(	O
child	int
,	O
progname	*(char)
,	O
true	int
,	O
false	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
l	*(struct(*(char)))
->	O
line	*(char)
=	O
line	*(char)
;	O
return	O
false	int
;	O
}	O
char	O
*	O
javaexec_version	()->(*(char))
(	O
void	O
)	O
{	O
const	O
char	O
*	O
class_name	*(char)
=	O
"javaversion"	*(char)
;	O
char	O
*	O
malloc_pkgdatadir	*(char)
;	O
const	O
char	O
*	O
pkgdatadir	*(char)
=	O
relocate2	O
(	O
PKGDATADIR	*(char)
,	O
&	O
malloc_pkgdatadir	*(char)
)	O
;	O
const	O
char	O
*	O
args	*(*(char))
[	O
1	int
]	O
;	O
struct	O
locals	struct(*(char))
locals	struct(*(char))
;	O
args	*(*(char))
[	O
0	int
]	O
=	O
NULL	O
;	O
locals	struct(*(char))
.	O
line	*(char)
=	O
NULL	O
;	O
execute_java_class	(*(char),*(*(char)),int,bool,*(char),*(*(char)),bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(bool)
(	O
class_name	*(char)
,	O
&	O
pkgdatadir	*(char)
,	O
1	int
,	O
true	int
,	O
NULL	O
,	O
args	*(*(char))
,	O
false	int
,	O
false	int
,	O
execute_and_read_line	(*(char),*(char),*(*(char)),*(void))->(bool)
,	O
&	O
locals	struct(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
malloc_pkgdatadir	*(char)
)	O
;	O
return	O
locals	struct(*(char))
.	O
line	*(char)
;	O
}	O
