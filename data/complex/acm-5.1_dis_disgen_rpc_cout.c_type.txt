static	O
char	O
rcsid	array(char)
[	O
]	O
=	O
"$Id: rpc_cout.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	*(char)
;	O
static	O
void	O
print_header	()->(void)
(	O
)	O
,	O
print_trailer	()->(void)
(	O
)	O
,	O
space	()->(void)
(	O
)	O
,	O
emit_enum	()->(void)
(	O
)	O
,	O
emit_union	()->(void)
(	O
)	O
,	O
emit_struct	()->(void)
(	O
)	O
,	O
emit_typedef	()->(void)
(	O
)	O
,	O
print_stat	()->(void)
(	O
)	O
;	O
void	O
emit	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
{	O
if	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_PROGRAM	int
||	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_CONST	int
)	O
{	O
return	O
;	O
}	O
print_header	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
switch	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
)	O
{	O
case	O
DEF_UNION	int
:	O
emit_union	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
DEF_ENUM	int
:	O
emit_enum	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
DEF_STRUCT	int
:	O
emit_struct	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
DEF_TYPEDEF	int
:	O
emit_typedef	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
;	O
break	O
;	O
}	O
print_trailer	()->(void)
(	O
)	O
;	O
}	O
static	O
findtype	(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))),*(char))->(int)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
,	O
type	*(char)
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
char	O
*	O
type	*(char)
;	O
{	O
if	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_PROGRAM	int
||	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_CONST	int
)	O
{	O
return	O
(	O
0	int
)	O
;	O
}	O
else	O
{	O
return	O
(	O
streq	()->(int)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
,	O
type	*(char)
)	O
)	O
;	O
}	O
}	O
static	O
undefined	(*(char))->(int)
(	O
type	*(char)
)	O
char	O
*	O
type	*(char)
;	O
{	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
=	O
(	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
)	O
FINDVAL	O
(	O
defined	*(struct(*(char),*(struct(*(char),*(struct`)))))
,	O
type	*(char)
,	O
findtype	(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))),*(char))->(int)
)	O
;	O
return	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
==	O
NULL	O
)	O
;	O
}	O
static	O
void	O
print_header	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
{	O
space	()->(void)
(	O
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"bool_t\n"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"xdr_%s(xdrs, objp)\n"	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\tXDR *xdrs;\n"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s "	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
)	O
;	O
if	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
!=	O
DEF_TYPEDEF	int
||	O
!	O
isvectordef	()->(int)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_type	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
rel	enum(int,int,int,int,int)
)	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"*"	*(char)
)	O
;	O
}	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"objp;\n"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"{\n"	*(char)
)	O
;	O
}	O
static	O
void	O
print_trailer	()->(void)
(	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\treturn (TRUE);\n"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"}\n"	*(char)
)	O
;	O
space	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
name	*(char)
)	O
int	O
indent	int
;	O
char	O
*	O
name	*(char)
;	O
{	O
tabify	()->(void)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
indent	int
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"if (!xdr_%s(xdrs"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
static	O
void	O
print_ifarg	(*(char))->(void)
(	O
arg	*(char)
)	O
char	O
*	O
arg	*(char)
;	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
", %s"	*(char)
,	O
arg	*(char)
)	O
;	O
}	O
static	O
void	O
print_ifsizeof	(*(char),*(char))->(void)
(	O
prefix	*(char)
,	O
type	*(char)
)	O
char	O
*	O
prefix	*(char)
;	O
char	O
*	O
type	*(char)
;	O
{	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"bool"	*(char)
)	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
", sizeof(bool_t), xdr_bool"	*(char)
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
", sizeof("	*(char)
)	O
;	O
if	O
(	O
undefined	(*(char))->(int)
(	O
type	*(char)
)	O
&&	O
prefix	*(char)
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s "	*(char)
,	O
prefix	*(char)
)	O
;	O
}	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s), xdr_%s"	*(char)
,	O
type	*(char)
,	O
type	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
print_ifclose	(int)->(void)
(	O
indent	int
)	O
int	O
indent	int
;	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
")) {\n"	*(char)
)	O
;	O
tabify	()->(void)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
indent	int
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\treturn (FALSE);\n"	*(char)
)	O
;	O
tabify	()->(void)
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
indent	int
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"}\n"	*(char)
)	O
;	O
}	O
static	O
void	O
space	()->(void)
(	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n\n"	*(char)
)	O
;	O
}	O
static	O
void	O
print_ifstat	(int,*(char),*(char),int,*(char),*(char),*(char))->(void)
(	O
indent	int
,	O
prefix	*(char)
,	O
type	*(char)
,	O
rel	enum(int,int,int,int,int)
,	O
amax	*(char)
,	O
objname	*(char)
,	O
name	*(char)
)	O
int	O
indent	int
;	O
char	O
*	O
prefix	*(char)
;	O
char	O
*	O
type	*(char)
;	O
relation	enum(int,int,int,int,int)
rel	enum(int,int,int,int,int)
;	O
char	O
*	O
amax	*(char)
;	O
char	O
*	O
objname	*(char)
;	O
char	O
*	O
name	*(char)
;	O
{	O
char	O
*	O
alt	*(char)
=	O
NULL	O
;	O
switch	O
(	O
rel	enum(int,int,int,int,int)
)	O
{	O
case	O
REL_POINTER	int
:	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
"pointer"	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
"(char **)"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s"	*(char)
,	O
objname	*(char)
)	O
;	O
print_ifsizeof	(*(char),*(char))->(void)
(	O
prefix	*(char)
,	O
type	*(char)
)	O
;	O
break	O
;	O
case	O
REL_VECTOR	int
:	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"string"	*(char)
)	O
)	O
{	O
alt	*(char)
=	O
"string"	*(char)
;	O
}	O
else	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"opaque"	*(char)
)	O
)	O
{	O
alt	*(char)
=	O
"opaque"	*(char)
;	O
}	O
if	O
(	O
alt	*(char)
)	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
alt	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
objname	*(char)
)	O
;	O
}	O
else	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
"vector"	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
"(char *)"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s"	*(char)
,	O
objname	*(char)
)	O
;	O
}	O
print_ifarg	(*(char))->(void)
(	O
amax	*(char)
)	O
;	O
if	O
(	O
!	O
alt	*(char)
)	O
{	O
print_ifsizeof	(*(char),*(char))->(void)
(	O
prefix	*(char)
,	O
type	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
REL_ARRAY	int
:	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"string"	*(char)
)	O
)	O
{	O
alt	*(char)
=	O
"string"	*(char)
;	O
}	O
else	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"opaque"	*(char)
)	O
)	O
{	O
alt	*(char)
=	O
"bytes"	*(char)
;	O
}	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"string"	*(char)
)	O
)	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
alt	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
objname	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
alt	*(char)
)	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
alt	*(char)
)	O
;	O
}	O
else	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
"array"	*(char)
)	O
;	O
}	O
print_ifarg	(*(char))->(void)
(	O
"(char **)"	*(char)
)	O
;	O
if	O
(	O
*	O
objname	*(char)
==	O
'&'	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s.%s_val, (u_int *)%s.%s_len"	*(char)
,	O
objname	*(char)
,	O
name	*(char)
,	O
objname	*(char)
,	O
name	*(char)
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"&%s->%s_val, (u_int *)&%s->%s_len"	*(char)
,	O
objname	*(char)
,	O
name	*(char)
,	O
objname	*(char)
,	O
name	*(char)
)	O
;	O
}	O
}	O
print_ifarg	(*(char))->(void)
(	O
amax	*(char)
)	O
;	O
if	O
(	O
!	O
alt	*(char)
)	O
{	O
print_ifsizeof	(*(char),*(char))->(void)
(	O
prefix	*(char)
,	O
type	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
REL_ARRAY2	int
:	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"string"	*(char)
)	O
)	O
{	O
alt	*(char)
=	O
"string"	*(char)
;	O
}	O
else	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"opaque"	*(char)
)	O
)	O
{	O
alt	*(char)
=	O
"bytes"	*(char)
;	O
}	O
if	O
(	O
streq	()->(int)
(	O
type	*(char)
,	O
"string"	*(char)
)	O
)	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
alt	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
objname	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
alt	*(char)
)	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
alt	*(char)
)	O
;	O
}	O
else	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
"var_array"	*(char)
)	O
;	O
}	O
print_ifarg	(*(char))->(void)
(	O
"(char **)"	*(char)
)	O
;	O
if	O
(	O
*	O
objname	*(char)
==	O
'&'	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s,\n\t\tobjp->%s, objp->%s"	*(char)
,	O
objname	*(char)
,	O
amax	*(char)
,	O
amax	*(char)
)	O
;	O
}	O
else	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"&%s,\n\t\tobjp->%s, objp->%s"	*(char)
,	O
objname	*(char)
,	O
amax	*(char)
,	O
amax	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
!	O
alt	*(char)
)	O
{	O
print_ifsizeof	(*(char),*(char))->(void)
(	O
prefix	*(char)
,	O
type	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
REL_ALIAS	int
:	O
print_ifopen	(int,*(char))->(void)
(	O
indent	int
,	O
type	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
objname	*(char)
)	O
;	O
break	O
;	O
}	O
print_ifclose	(int)->(void)
(	O
indent	int
)	O
;	O
}	O
static	O
void	O
emit_enum	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
{	O
print_ifopen	(int,*(char))->(void)
(	O
1	int
,	O
"enum"	*(char)
)	O
;	O
print_ifarg	(*(char))->(void)
(	O
"(enum_t *)objp"	*(char)
)	O
;	O
print_ifclose	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
void	O
emit_union	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
{	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
*	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
;	O
case_list	struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
*	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
*	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
;	O
char	O
*	O
object	*(char)
;	O
char	O
*	O
format	*(char)
=	O
"&objp->%s_u.%s"	*(char)
;	O
print_stat	()->(void)
(	O
&	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
enum_decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\tswitch (objp->%s) {\n"	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
enum_decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
name	*(char)
)	O
;	O
for	O
(	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
cases	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
!=	O
NULL	O
;	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
=	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
)	O
{	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
=	O
&	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
case_decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\tcase %s:\n"	*(char)
,	O
cl	*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
case_name	*(char)
)	O
;	O
if	O
(	O
!	O
streq	()->(int)
(	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
type	*(char)
,	O
"void"	*(char)
)	O
)	O
{	O
object	*(char)
=	O
alloc	O
(	O
strlen	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
)	O
+	O
strlen	O
(	O
format	*(char)
)	O
+	O
strlen	O
(	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
+	O
1	int
)	O
;	O
s_print	O
(	O
object	*(char)
,	O
format	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
,	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
print_ifstat	(int,*(char),*(char),int,*(char),*(char),*(char))->(void)
(	O
2	int
,	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
prefix	*(char)
,	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
type	*(char)
,	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
rel	enum(int,int,int,int,int)
,	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
array_max	*(char)
,	O
object	*(char)
,	O
cs	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
object	*(char)
)	O
;	O
}	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t\tbreak;\n"	*(char)
)	O
;	O
}	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
un	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*`,struct`,*`)))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))))
.	O
default_decl	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
;	O
if	O
(	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
!=	O
NULL	O
)	O
{	O
if	O
(	O
!	O
streq	()->(int)
(	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
type	*(char)
,	O
"void"	*(char)
)	O
)	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\tdefault:\n"	*(char)
)	O
;	O
object	*(char)
=	O
alloc	O
(	O
strlen	O
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
)	O
+	O
strlen	O
(	O
format	*(char)
)	O
+	O
strlen	O
(	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
+	O
1	int
)	O
;	O
s_print	O
(	O
object	*(char)
,	O
format	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
,	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
print_ifstat	(int,*(char),*(char),int,*(char),*(char),*(char))->(void)
(	O
2	int
,	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
prefix	*(char)
,	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
type	*(char)
,	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
rel	enum(int,int,int,int,int)
,	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
array_max	*(char)
,	O
object	*(char)
,	O
dflt	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
object	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t\tbreak;\n"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\tdefault:\n"	*(char)
)	O
;	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t\treturn (FALSE);\n"	*(char)
)	O
;	O
}	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t}\n"	*(char)
)	O
;	O
}	O
static	O
void	O
emit_struct	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
{	O
decl_list	struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))))))
*	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
int	O
size	int
=	O
0	int
,	O
szof	int
;	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
d	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
;	O
char	O
buf	array(char)
[	O
128	int
]	O
;	O
for	O
(	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
st	struct(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))),int,array(char))
.	O
decls	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
;	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
!=	O
NULL	O
;	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
=	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`)))))
)	O
{	O
print_stat	()->(void)
(	O
&	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
)	O
;	O
if	O
(	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
storage	int
==	O
-	O
1	int
)	O
{	O
d	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
=	O
(	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
)	O
FINDVAL	O
(	O
defined	*(struct(*(char),*(struct(*(char),*(struct`)))))
,	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
type	*(char)
,	O
findtype	(*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*`,int,array(char)),struct(struct`,*`,*`),struct(*`),struct(*`,*`,int,array(char),enum(int,int,int,int,int),*`),struct(*`,*`)))),*(char))->(int)
)	O
;	O
if	O
(	O
d	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
)	O
{	O
if	O
(	O
d	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def_kind	enum(int,int,int,int,int,int)
==	O
DEF_TYPEDEF	int
)	O
{	O
szof	int
=	O
d	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_storage	int
;	O
}	O
else	O
{	O
szof	int
=	O
d	*(struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct`),int,array(char)),struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`),*(struct`)),struct(*(struct`)),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
st	struct(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))),int,array(char))
.	O
storage	int
;	O
}	O
if	O
(	O
szof	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
rel	enum(int,int,int,int,int)
==	O
REL_ARRAY2	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
buf	array(char)
,	O
"( %s * %d )"	*(char)
,	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
array_max	*(char)
,	O
szof	int
)	O
;	O
}	O
else	O
{	O
size	int
+=	O
szof	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	array(char)
,	O
"%d"	*(char)
,	O
szof	int
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"  %s %s\n"	*(char)
,	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
type	*(char)
,	O
buf	array(char)
)	O
;	O
}	O
else	O
{	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"* could not determine size of \"%s\"\n"	*(char)
,	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
type	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
size	int
+=	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
storage	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"  %s %d\n"	*(char)
,	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
type	*(char)
,	O
dl	*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`)))))
->	O
decl	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
.	O
storage	int
)	O
;	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\t%d\n\n"	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
,	O
size	int
)	O
;	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
st	struct(*(struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(struct`,*`)))),int,array(char))
.	O
storage	int
=	O
size	int
;	O
}	O
static	O
void	O
emit_typedef	()->(void)
(	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
)	O
definition	struct(*(char),enum(int,int,int,int,int,int),union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`))))))
*	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
;	O
{	O
char	O
*	O
prefix	*(char)
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_prefix	*(char)
;	O
char	O
*	O
type	*(char)
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
old_type	*(char)
;	O
char	O
*	O
amax	*(char)
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
array_max	*(char)
;	O
relation	enum(int,int,int,int,int)
rel	enum(int,int,int,int,int)
=	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
.	O
ty	struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char))
.	O
rel	enum(int,int,int,int,int)
;	O
print_ifstat	(int,*(char),*(char),int,*(char),*(char),*(char))->(void)
(	O
1	int
,	O
prefix	*(char)
,	O
type	*(char)
,	O
rel	enum(int,int,int,int,int)
,	O
amax	*(char)
,	O
"objp"	*(char)
,	O
def	union(*(char),struct(*(struct(struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),int,array(char)),struct(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)),*(struct(*(char),struct(*`,*`,int,array(char),*`,enum(int,int,int,int,int),*`),*(struct`))),*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))),struct(*(struct(*(char),*(char),*(struct`)))),struct(*(char),*(char),int,array(char),enum(int,int,int,int,int),*(char)),struct(*(char),*(struct(*(char),*(char),*(struct`),*(struct`)))))
->	O
def_name	*(char)
)	O
;	O
}	O
static	O
void	O
print_stat	()->(void)
(	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
)	O
declaration	struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char))
*	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
;	O
{	O
char	O
*	O
prefix	*(char)
=	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
prefix	*(char)
;	O
char	O
*	O
type	*(char)
=	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
type	*(char)
;	O
char	O
*	O
amax	*(char)
=	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
array_max	*(char)
;	O
relation	enum(int,int,int,int,int)
rel	enum(int,int,int,int,int)
=	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
rel	enum(int,int,int,int,int)
;	O
char	O
name	*(char)
[	O
256	int
]	O
;	O
if	O
(	O
isvectordef	()->(int)
(	O
type	*(char)
,	O
rel	enum(int,int,int,int,int)
)	O
)	O
{	O
s_print	O
(	O
name	*(char)
,	O
"objp->%s"	*(char)
,	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
}	O
else	O
{	O
s_print	O
(	O
name	*(char)
,	O
"&objp->%s"	*(char)
,	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
}	O
print_ifstat	(int,*(char),*(char),int,*(char),*(char),*(char))->(void)
(	O
1	int
,	O
prefix	*(char)
,	O
type	*(char)
,	O
rel	enum(int,int,int,int,int)
,	O
amax	*(char)
,	O
name	*(char)
,	O
dec	*(struct(*(char),*(char),int,array(char),*(char),enum(int,int,int,int,int),*(char)))
->	O
name	*(char)
)	O
;	O
}	O
