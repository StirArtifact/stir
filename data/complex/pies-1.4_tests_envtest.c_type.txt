static	O
int	O
envcmp	(*(void),*(void))->(int)
(	O
void	O
const	O
*	O
a	*(void)
,	O
void	O
const	O
*	O
b	*(void)
)	O
{	O
char	O
const	O
*	O
as	*(char)
=	O
*	O
(	O
char	O
const	O
*	O
*	O
)	O
a	*(void)
;	O
char	O
const	O
*	O
bs	*(char)
=	O
*	O
(	O
char	O
const	O
*	O
*	O
)	O
b	*(void)
;	O
int	O
c	int
;	O
while	O
(	O
*	O
as	*(char)
&&	O
*	O
bs	*(char)
)	O
{	O
c	int
=	O
*	O
as	*(char)
-	O
*	O
bs	*(char)
;	O
if	O
(	O
c	int
||	O
*	O
as	*(char)
==	O
'='	O
||	O
*	O
bs	*(char)
==	O
'='	O
)	O
break	O
;	O
as	*(char)
++	O
;	O
bs	*(char)
++	O
;	O
}	O
return	O
c	int
;	O
}	O
static	O
void	O
sortenv	(*(*(char)))->(void)
(	O
char	O
*	O
*	O
env	*(struct(*(*(char)),long,long))
)	O
{	O
size_t	long
n	long
;	O
for	O
(	O
n	long
=	O
0	int
;	O
env	*(struct(*(*(char)),long,long))
[	O
n	long
]	O
;	O
n	long
++	O
)	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
env	*(struct(*(*(char)),long,long))
,	O
n	long
,	O
sizeof	O
(	O
env	*(struct(*(*(char)),long,long))
[	O
0	int
]	O
)	O
,	O
envcmp	(*(void),*(void))->(int)
)	O
;	O
}	O
static	O
void	O
printenv	(*(*(char)))->(void)
(	O
char	O
*	O
*	O
env	*(struct(*(*(char)),long,long))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
env	*(struct(*(*(char)),long,long))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
{	O
char	O
*	O
p	*(char)
=	O
env	*(struct(*(*(char)),long,long))
[	O
i	long
]	O
;	O
while	O
(	O
*	O
p	*(char)
)	O
{	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
p	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
*	O
p	*(char)
++	O
==	O
'='	O
)	O
break	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
int	O
c	int
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'"'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
p	*(char)
++	O
)	O
!=	O
0	int
)	O
{	O
int	O
c1	int
;	O
if	O
(	O
isascii	(int)->(int)
(	O
c	int
)	O
&&	O
isprint	(int)->(int)
(	O
c	int
)	O
&&	O
c	int
!=	O
'\\'	O
&&	O
c	int
!=	O
'"'	O
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
if	O
(	O
(	O
c1	int
=	O
wordsplit_c_quote_char	(int)->(int)
(	O
c	int
)	O
)	O
)	O
{	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\\'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'"'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
char	O
*	O
defenv	array(*(char))
[	O
]	O
=	O
{	O
"PATH=/usr/local/bin:/usr/bin:/bin"	*(char)
,	O
"HOME=/home/user"	*(char)
,	O
"USER=user"	*(char)
,	O
"LOGIN=user"	*(char)
,	O
"PWD=/home"	*(char)
,	O
"LC_ALL=C"	*(char)
,	O
"LC_CTYPE=C"	*(char)
,	O
"LC_MESSAGES=C"	*(char)
,	O
"LC_NUMERIC=C"	*(char)
,	O
NULL	O
}	O
;	O
extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
envop_t	struct(*(struct(*(struct(*`,enum(int,int,int,int),*`,*`)),enum(int,int,int,int),*(char),*(char))),enum(int,int,int,int),*(char),*(char))
*	O
envop	*(struct(*(struct(*(struct`),enum(int,int,int,int),*(char),*(char))),enum(int,int,int,int),*(char),*(char)))
=	O
NULL	O
;	O
int	O
opcode	int
=	O
envop_set	int
;	O
environ_t	struct(*(*(char)),long,long)
*	O
env	*(struct(*(*(char)),long,long))
=	O
NULL	O
;	O
if	O
(	O
argc	int
>	O
1	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"-clone"	*(char)
)	O
==	O
0	int
)	O
{	O
env	*(struct(*(*(char)),long,long))
=	O
environ_create	(*(*(char)))->(*(struct(*(*(char)),long,long)))
(	O
environ	*(*(char))
)	O
;	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"-null"	*(char)
)	O
==	O
0	int
)	O
{	O
env	*(struct(*(*(char)),long,long))
=	O
environ_create	(*(*(char)))->(*(struct(*(*(char)),long,long)))
(	O
NULL	O
)	O
;	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
}	O
}	O
if	O
(	O
!	O
env	*(struct(*(*(char)),long,long))
)	O
env	*(struct(*(*(char)),long,long))
=	O
environ_create	(*(*(char)))->(*(struct(*(*(char)),long,long)))
(	O
defenv	array(*(char))
)	O
;	O
if	O
(	O
!	O
env	*(struct(*(*(char)),long,long))
)	O
{	O
perror	(*(char))->(void)
(	O
"environ_create"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
a	*(void)
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(void)
,	O
"-set"	*(char)
)	O
==	O
0	int
)	O
opcode	int
=	O
envop_set	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(void)
,	O
"-unset"	*(char)
)	O
==	O
0	int
)	O
opcode	int
=	O
envop_unset	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(void)
,	O
"-keep"	*(char)
)	O
==	O
0	int
)	O
opcode	int
=	O
envop_keep	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(void)
,	O
"-clear"	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
rc	int
=	O
envop_entry_add	(*(*(struct(*(struct`),enum(int,int,int,int),*(char),*(char)))),enum(int,int,int,int),*(char),*(char))->(int)
(	O
&	O
envop	*(struct(*(struct(*(struct`),enum(int,int,int,int),*(char),*(char))),enum(int,int,int,int),*(char),*(char)))
,	O
envop_clear	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
perror	(*(char))->(void)
(	O
"envop_entry_add"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(void)
,	O
"-exec"	*(char)
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	*(*(char))
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"program name required after -exec\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
break	O
;	O
}	O
else	O
if	O
(	O
a	*(void)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"unrecognized option: %s\n"	*(char)
,	O
a	*(void)
)	O
;	O
return	O
1	int
;	O
}	O
else	O
{	O
int	O
rc	int
;	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
a	*(void)
,	O
'='	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
*	O
p	*(char)
++	O
=	O
0	int
;	O
rc	int
=	O
envop_entry_add	(*(*(struct(*(struct`),enum(int,int,int,int),*(char),*(char)))),enum(int,int,int,int),*(char),*(char))->(int)
(	O
&	O
envop	*(struct(*(struct(*(struct`),enum(int,int,int,int),*(char),*(char))),enum(int,int,int,int),*(char),*(char)))
,	O
opcode	int
,	O
a	*(void)
,	O
p	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
perror	(*(char))->(void)
(	O
"envop_entry_add"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
envop_exec	(*(struct(*(struct(*`,enum(int,int,int,int),*`,*`)),enum(int,int,int,int),*(char),*(char))),*(struct(*(*(char)),long,long)))->(int)
(	O
envop	*(struct(*(struct(*(struct`),enum(int,int,int,int),*(char),*(char))),enum(int,int,int,int),*(char),*(char)))
,	O
env	*(struct(*(*(char)),long,long))
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"envop_exec"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
argc	int
)	O
{	O
environ	*(*(char))
=	O
environ_ptr	(*(struct(*(*(char)),long,long)))->(*(*(char)))
(	O
env	*(struct(*(*(char)),long,long))
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
)	O
;	O
perror	(*(char))->(void)
(	O
"execvp"	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
sortenv	(*(*(char)))->(void)
(	O
env	*(struct(*(*(char)),long,long))
->	O
env_base	*(*(char))
)	O
;	O
printenv	(*(*(char)))->(void)
(	O
env	*(struct(*(*(char)),long,long))
->	O
env_base	*(*(char))
)	O
;	O
return	O
0	int
;	O
}	O
