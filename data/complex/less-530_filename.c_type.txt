extern	O
int	O
force_open	int
;	O
extern	O
int	O
secure	int
;	O
extern	O
int	O
use_lessopen	int
;	O
extern	O
int	O
ctldisp	int
;	O
extern	O
int	O
utf_mode	int
;	O
extern	O
IFILE	O
curr_ifile	*(void)
;	O
extern	O
IFILE	O
old_ifile	*(void)
;	O
extern	O
char	O
openquote	char
;	O
extern	O
char	O
closequote	char
;	O
public	O
char	O
*	O
shell_unquote	(*(char))->(*(char))
(	O
str	*(char)
)	O
char	O
*	O
str	*(char)
;	O
{	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
p	*(char)
;	O
name	*(char)
=	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
*	O
str	*(char)
==	O
openquote	char
)	O
{	O
str	*(char)
++	O
;	O
while	O
(	O
*	O
str	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
str	*(char)
==	O
closequote	char
)	O
{	O
if	O
(	O
str	*(char)
[	O
1	int
]	O
!=	O
closequote	char
)	O
break	O
;	O
str	*(char)
++	O
;	O
}	O
*	O
p	*(char)
++	O
=	O
*	O
str	*(char)
++	O
;	O
}	O
}	O
else	O
{	O
char	O
*	O
esc	*(char)
=	O
get_meta_escape	()->(*(char))
(	O
)	O
;	O
int	O
esclen	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
esc	*(char)
)	O
;	O
while	O
(	O
*	O
str	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
esclen	int
>	O
0	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
str	*(char)
,	O
esc	*(char)
,	O
esclen	int
)	O
==	O
0	int
)	O
str	*(char)
+=	O
esclen	int
;	O
*	O
p	*(char)
++	O
=	O
*	O
str	*(char)
++	O
;	O
}	O
}	O
*	O
p	*(char)
=	O
'\0'	O
;	O
return	O
(	O
name	*(char)
)	O
;	O
}	O
public	O
char	O
*	O
get_meta_escape	()->(*(char))
(	O
)	O
{	O
char	O
*	O
s	*(char)
;	O
s	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSMETAESCAPE"	*(char)
)	O
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
s	*(char)
=	O
DEF_METAESCAPE	*(char)
;	O
return	O
(	O
s	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
metachars	()->(*(char))
(	O
)	O
{	O
static	O
char	O
*	O
mchars	*(char)
=	O
NULL	O
;	O
if	O
(	O
mchars	*(char)
==	O
NULL	O
)	O
{	O
mchars	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSMETACHARS"	*(char)
)	O
;	O
if	O
(	O
mchars	*(char)
==	O
NULL	O
)	O
mchars	*(char)
=	O
DEF_METACHARS	*(char)
;	O
}	O
return	O
(	O
mchars	*(char)
)	O
;	O
}	O
static	O
int	O
metachar	(int)->(int)
(	O
c	int
)	O
char	O
c	int
;	O
{	O
return	O
(	O
strchr	(*(char),int)->(*(char))
(	O
metachars	()->(*(char))
(	O
)	O
,	O
c	int
)	O
!=	O
NULL	O
)	O
;	O
}	O
public	O
char	O
*	O
shell_quote	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
newstr	*(char)
;	O
int	O
len	int
;	O
char	O
*	O
esc	*(char)
=	O
get_meta_escape	()->(*(char))
(	O
)	O
;	O
int	O
esclen	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
esc	*(char)
)	O
;	O
int	O
use_quotes	int
=	O
0	int
;	O
int	O
have_quotes	int
=	O
0	int
;	O
len	int
=	O
1	int
;	O
for	O
(	O
p	*(char)
=	O
s	*(char)
;	O
*	O
p	*(char)
!=	O
'\0'	O
;	O
p	*(char)
++	O
)	O
{	O
len	int
++	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
openquote	char
||	O
*	O
p	*(char)
==	O
closequote	char
)	O
have_quotes	int
=	O
1	int
;	O
if	O
(	O
metachar	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
{	O
if	O
(	O
esclen	int
==	O
0	int
)	O
{	O
use_quotes	int
=	O
1	int
;	O
}	O
else	O
{	O
len	int
+=	O
esclen	int
;	O
}	O
}	O
}	O
if	O
(	O
use_quotes	int
)	O
{	O
if	O
(	O
have_quotes	int
)	O
return	O
(	O
NULL	O
)	O
;	O
len	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
+	O
3	int
;	O
}	O
newstr	*(char)
=	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
use_quotes	int
)	O
{	O
SNPRINTF3	O
(	O
newstr	*(char)
,	O
len	int
,	O
"%c%s%c"	*(char)
,	O
openquote	char
,	O
s	*(char)
,	O
closequote	char
)	O
;	O
}	O
else	O
{	O
while	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
metachar	(int)->(int)
(	O
*	O
s	*(char)
)	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
esc	*(char)
)	O
;	O
p	*(char)
+=	O
esclen	int
;	O
}	O
*	O
p	*(char)
++	O
=	O
*	O
s	*(char)
++	O
;	O
}	O
*	O
p	*(char)
=	O
'\0'	O
;	O
}	O
return	O
(	O
newstr	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
dirfile	(*(char),*(char))->(*(char))
(	O
dirname	*(char)
,	O
filename	*(char)
)	O
char	O
*	O
dirname	*(char)
;	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
pathname	*(char)
;	O
int	O
len	int
;	O
int	O
f	int
;	O
if	O
(	O
dirname	*(char)
==	O
NULL	O
||	O
*	O
dirname	*(char)
==	O
'\0'	O
)	O
return	O
(	O
NULL	O
)	O
;	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
dirname	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
2	int
)	O
;	O
pathname	*(char)
=	O
(	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
pathname	*(char)
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
SNPRINTF3	O
(	O
pathname	*(char)
,	O
len	int
,	O
"%s%s%s"	*(char)
,	O
dirname	*(char)
,	O
PATHNAME_SEP	*(char)
,	O
filename	*(char)
)	O
;	O
f	int
=	O
open	(*(char),int)->(int)
(	O
pathname	*(char)
,	O
OPEN_READ	O
)	O
;	O
if	O
(	O
f	int
<	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
pathname	*(char)
)	O
;	O
pathname	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
close	(int)->(int)
(	O
f	int
)	O
;	O
}	O
return	O
(	O
pathname	*(char)
)	O
;	O
}	O
public	O
char	O
*	O
homefile	(*(char))->(*(char))
(	O
filename	*(char)
)	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
pathname	*(char)
;	O
pathname	*(char)
=	O
dirfile	(*(char),*(char))->(*(char))
(	O
lgetenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
if	O
(	O
pathname	*(char)
!=	O
NULL	O
)	O
return	O
(	O
pathname	*(char)
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
public	O
char	O
*	O
fexpand	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
char	O
*	O
fr	*(char)
,	O
*	O
to	*(char)
;	O
int	O
n	int
;	O
char	O
*	O
e	int
;	O
IFILE	O
ifile	*(void)
;	O
n	int
=	O
0	int
;	O
for	O
(	O
fr	*(char)
=	O
s	*(char)
;	O
*	O
fr	*(char)
!=	O
'\0'	O
;	O
fr	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
fr	*(char)
)	O
{	O
case	O
'%'	O
:	O
case	O
'#'	O
:	O
if	O
(	O
fr	*(char)
>	O
s	*(char)
&&	O
fr	*(char)
[	O
-	O
1	int
]	O
==	O
*	O
fr	*(char)
)	O
{	O
n	int
++	O
;	O
}	O
else	O
if	O
(	O
fr	*(char)
[	O
1	int
]	O
!=	O
*	O
fr	*(char)
)	O
{	O
ifile	*(void)
=	O
fchar_ifile	O
(	O
*	O
fr	*(char)
)	O
;	O
if	O
(	O
ifile	*(void)
==	O
NULL_IFILE	O
)	O
n	int
++	O
;	O
else	O
n	int
+=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
get_filename	(*(void))->(*(char))
(	O
ifile	*(void)
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
n	int
++	O
;	O
break	O
;	O
}	O
}	O
e	int
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
n	int
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
to	*(char)
=	O
e	int
;	O
for	O
(	O
fr	*(char)
=	O
s	*(char)
;	O
*	O
fr	*(char)
!=	O
'\0'	O
;	O
fr	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
fr	*(char)
)	O
{	O
case	O
'%'	O
:	O
case	O
'#'	O
:	O
if	O
(	O
fr	*(char)
>	O
s	*(char)
&&	O
fr	*(char)
[	O
-	O
1	int
]	O
==	O
*	O
fr	*(char)
)	O
{	O
*	O
to	*(char)
++	O
=	O
*	O
fr	*(char)
;	O
}	O
else	O
if	O
(	O
fr	*(char)
[	O
1	int
]	O
!=	O
*	O
fr	*(char)
)	O
{	O
ifile	*(void)
=	O
fchar_ifile	O
(	O
*	O
fr	*(char)
)	O
;	O
if	O
(	O
ifile	*(void)
==	O
NULL_IFILE	O
)	O
*	O
to	*(char)
++	O
=	O
*	O
fr	*(char)
;	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
to	*(char)
,	O
get_filename	(*(void))->(*(char))
(	O
ifile	*(void)
)	O
)	O
;	O
to	*(char)
+=	O
strlen	(*(char))->(long)
(	O
to	*(char)
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
*	O
to	*(char)
++	O
=	O
*	O
fr	*(char)
;	O
break	O
;	O
}	O
}	O
*	O
to	*(char)
=	O
'\0'	O
;	O
return	O
(	O
e	int
)	O
;	O
}	O
public	O
char	O
*	O
fcomplete	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
char	O
*	O
fpat	*(char)
;	O
char	O
*	O
qs	*(char)
;	O
if	O
(	O
secure	int
)	O
return	O
(	O
NULL	O
)	O
;	O
{	O
int	O
len	int
=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
+	O
2	int
;	O
fpat	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF1	O
(	O
fpat	*(char)
,	O
len	int
,	O
"%s*"	*(char)
,	O
s	*(char)
)	O
;	O
}	O
qs	*(char)
=	O
lglob	(*(char))->(*(char))
(	O
fpat	*(char)
)	O
;	O
s	*(char)
=	O
shell_unquote	(*(char))->(*(char))
(	O
qs	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
s	*(char)
,	O
fpat	*(char)
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
qs	*(char)
)	O
;	O
qs	*(char)
=	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fpat	*(char)
)	O
;	O
return	O
(	O
qs	*(char)
)	O
;	O
}	O
public	O
int	O
bin_file	(int)->(int)
(	O
f	int
)	O
int	O
f	int
;	O
{	O
int	O
n	int
;	O
int	O
bin_count	int
=	O
0	int
;	O
char	O
data	array(char)
[	O
256	int
]	O
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
edata	*(char)
;	O
if	O
(	O
!	O
seekable	(int)->(int)
(	O
f	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
f	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
==	O
BAD_LSEEK	O
)	O
return	O
(	O
0	int
)	O
;	O
n	int
=	O
read	(int,*(void),long)->(long)
(	O
f	int
,	O
data	array(char)
,	O
sizeof	O
(	O
data	array(char)
)	O
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
edata	*(char)
=	O
&	O
data	array(char)
[	O
n	int
]	O
;	O
for	O
(	O
p	*(char)
=	O
data	array(char)
;	O
p	*(char)
<	O
edata	*(char)
;	O
)	O
{	O
if	O
(	O
utf_mode	int
&&	O
!	O
is_utf8_well_formed	(*(char),int)->(int)
(	O
p	*(char)
,	O
edata	*(char)
-	O
data	array(char)
)	O
)	O
{	O
bin_count	int
++	O
;	O
utf_skip_to_lead	(*(*(char)),*(char))->(void)
(	O
&	O
p	*(char)
,	O
edata	*(char)
)	O
;	O
}	O
else	O
{	O
LWCHAR	long
c	int
=	O
step_char	(*(*(char)),int,*(char))->(long)
(	O
&	O
p	*(char)
,	O
+	O
1	int
,	O
edata	*(char)
)	O
;	O
if	O
(	O
ctldisp	int
==	O
OPT_ONPLUS	int
&&	O
IS_CSI_START	O
(	O
c	int
)	O
)	O
skip_ansi	(*(*(char)),*(char))->(void)
(	O
&	O
p	*(char)
,	O
edata	*(char)
)	O
;	O
else	O
if	O
(	O
binary_char	(long)->(int)
(	O
c	int
)	O
)	O
bin_count	int
++	O
;	O
}	O
}	O
return	O
(	O
bin_count	int
>	O
5	int
)	O
;	O
}	O
static	O
POSITION	long
seek_filesize	(int)->(long)
(	O
f	int
)	O
int	O
f	int
;	O
{	O
off_t	long
spos	long
;	O
spos	long
=	O
lseek	(int,long,int)->(long)
(	O
f	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_END	int
)	O
;	O
if	O
(	O
spos	long
==	O
BAD_LSEEK	O
)	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
return	O
(	O
(	O
POSITION	long
)	O
spos	long
)	O
;	O
}	O
static	O
char	O
*	O
readfd	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
fd	int
)	O
FILE	struct
*	O
fd	int
;	O
{	O
int	O
len	int
;	O
int	O
ch	long
;	O
char	O
*	O
buf	*(char)
;	O
char	O
*	O
p	*(char)
;	O
len	int
=	O
100	int
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
for	O
(	O
p	*(char)
=	O
buf	*(char)
;	O
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
(	O
ch	long
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	int
)	O
)	O
==	O
'\n'	O
||	O
ch	long
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
p	*(char)
-	O
buf	*(char)
>=	O
len	int
-	O
1	int
)	O
{	O
len	int
*=	O
2	int
;	O
*	O
p	*(char)
=	O
'\0'	O
;	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
buf	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
buf	*(char)
=	O
p	*(char)
;	O
p	*(char)
=	O
buf	*(char)
+	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
;	O
}	O
*	O
p	*(char)
=	O
ch	long
;	O
}	O
*	O
p	*(char)
=	O
'\0'	O
;	O
return	O
(	O
buf	*(char)
)	O
;	O
}	O
FILE	struct
*	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
;	O
static	O
FILE	struct
*	O
shellcmd	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
)	O
char	O
*	O
cmd	*(char)
;	O
{	O
FILE	struct
*	O
fd	int
;	O
char	O
*	O
shell	*(char)
;	O
shell	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"SHELL"	*(char)
)	O
;	O
if	O
(	O
shell	*(char)
!=	O
NULL	O
&&	O
*	O
shell	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
scmd	*(char)
;	O
char	O
*	O
esccmd	*(char)
;	O
esccmd	*(char)
=	O
shell_quote	(*(char))->(*(char))
(	O
cmd	*(char)
)	O
;	O
if	O
(	O
esccmd	*(char)
==	O
NULL	O
)	O
{	O
fd	int
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
,	O
"r"	*(char)
)	O
;	O
}	O
else	O
{	O
int	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
shell	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
esccmd	*(char)
)	O
+	O
5	int
)	O
;	O
scmd	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF3	O
(	O
scmd	*(char)
,	O
len	int
,	O
"%s %s %s"	*(char)
,	O
shell	*(char)
,	O
shell_coption	()->(*(char))
(	O
)	O
,	O
esccmd	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
esccmd	*(char)
)	O
;	O
fd	int
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
scmd	*(char)
,	O
"r"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
scmd	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
fd	int
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
,	O
"r"	*(char)
)	O
;	O
}	O
SET_BINARY	O
(	O
0	int
)	O
;	O
return	O
(	O
fd	int
)	O
;	O
}	O
public	O
char	O
*	O
lglob	(*(char))->(*(char))
(	O
filename	*(char)
)	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
gfilename	*(char)
;	O
filename	*(char)
=	O
fexpand	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
if	O
(	O
secure	int
)	O
return	O
(	O
filename	*(char)
)	O
;	O
{	O
FILE	struct
*	O
fd	int
;	O
char	O
*	O
s	*(char)
;	O
char	O
*	O
lessecho	*(char)
;	O
char	O
*	O
cmd	*(char)
;	O
char	O
*	O
esc	*(char)
;	O
int	O
len	int
;	O
esc	*(char)
=	O
get_meta_escape	()->(*(char))
(	O
)	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
esc	*(char)
)	O
==	O
0	int
)	O
esc	*(char)
=	O
"-"	*(char)
;	O
esc	*(char)
=	O
shell_quote	(*(char))->(*(char))
(	O
esc	*(char)
)	O
;	O
if	O
(	O
esc	*(char)
==	O
NULL	O
)	O
{	O
return	O
(	O
filename	*(char)
)	O
;	O
}	O
lessecho	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSECHO"	*(char)
)	O
;	O
if	O
(	O
lessecho	*(char)
==	O
NULL	O
||	O
*	O
lessecho	*(char)
==	O
'\0'	O
)	O
lessecho	*(char)
=	O
"lessecho"	*(char)
;	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
lessecho	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
(	O
7	int
*	O
strlen	(*(char))->(long)
(	O
metachars	()->(*(char))
(	O
)	O
)	O
)	O
+	O
24	int
)	O
;	O
cmd	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF4	O
(	O
cmd	*(char)
,	O
len	int
,	O
"%s -p0x%x -d0x%x -e%s "	*(char)
,	O
lessecho	*(char)
,	O
openquote	char
,	O
closequote	char
,	O
esc	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
esc	*(char)
)	O
;	O
for	O
(	O
s	*(char)
=	O
metachars	()->(*(char))
(	O
)	O
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
s	*(char)
++	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
cmd	*(char)
+	O
strlen	(*(char))->(long)
(	O
cmd	*(char)
)	O
,	O
"-n0x%x "	*(char)
,	O
*	O
s	*(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
cmd	*(char)
+	O
strlen	(*(char))->(long)
(	O
cmd	*(char)
)	O
,	O
"-- %s"	*(char)
,	O
filename	*(char)
)	O
;	O
fd	int
=	O
shellcmd	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cmd	*(char)
)	O
;	O
if	O
(	O
fd	int
==	O
NULL	O
)	O
{	O
return	O
(	O
filename	*(char)
)	O
;	O
}	O
gfilename	*(char)
=	O
readfd	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
fd	int
)	O
;	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	int
)	O
;	O
if	O
(	O
*	O
gfilename	*(char)
==	O
'\0'	O
)	O
{	O
free	(*(void))->(void)
(	O
gfilename	*(char)
)	O
;	O
return	O
(	O
save	(*(char))->(*(char))
(	O
filename	*(char)
)	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
return	O
(	O
gfilename	*(char)
)	O
;	O
}	O
static	O
int	O
num_pct_s	(*(char))->(int)
(	O
lessopen	*(char)
)	O
char	O
*	O
lessopen	*(char)
;	O
{	O
int	O
num	long
=	O
0	int
;	O
while	O
(	O
*	O
lessopen	*(char)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
*	O
lessopen	*(char)
==	O
'%'	O
)	O
{	O
if	O
(	O
lessopen	*(char)
[	O
1	int
]	O
==	O
'%'	O
)	O
++	O
lessopen	*(char)
;	O
else	O
if	O
(	O
lessopen	*(char)
[	O
1	int
]	O
==	O
's'	O
)	O
++	O
num	long
;	O
else	O
return	O
(	O
999	int
)	O
;	O
}	O
++	O
lessopen	*(char)
;	O
}	O
return	O
(	O
num	long
)	O
;	O
}	O
public	O
char	O
*	O
open_altfile	(*(char),*(int),*(*(void)))->(*(char))
(	O
filename	*(char)
,	O
pf	*(int)
,	O
pfd	*(*(void))
)	O
char	O
*	O
filename	*(char)
;	O
int	O
*	O
pf	*(int)
;	O
void	O
*	O
*	O
pfd	*(*(void))
;	O
{	O
char	O
*	O
lessopen	*(char)
;	O
char	O
*	O
qfilename	*(char)
;	O
char	O
*	O
cmd	*(char)
;	O
int	O
len	int
;	O
FILE	struct
*	O
fd	int
;	O
int	O
returnfd	int
=	O
0	int
;	O
if	O
(	O
!	O
use_lessopen	int
||	O
secure	int
)	O
return	O
(	O
NULL	O
)	O
;	O
ch_ungetchar	(int)->(void)
(	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
lessopen	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSOPEN"	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
while	O
(	O
*	O
lessopen	*(char)
==	O
'|'	O
)	O
{	O
lessopen	*(char)
++	O
;	O
returnfd	int
++	O
;	O
}	O
if	O
(	O
*	O
lessopen	*(char)
==	O
'-'	O
)	O
{	O
lessopen	*(char)
++	O
;	O
}	O
else	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
num_pct_s	(*(char))->(int)
(	O
lessopen	*(char)
)	O
!=	O
1	int
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"LESSOPEN ignored: must contain exactly one %%s"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
(	O
NULL	O
)	O
;	O
}	O
qfilename	*(char)
=	O
shell_quote	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
lessopen	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
qfilename	*(char)
)	O
+	O
2	int
)	O
;	O
cmd	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF1	O
(	O
cmd	*(char)
,	O
len	int
,	O
lessopen	*(char)
,	O
qfilename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
qfilename	*(char)
)	O
;	O
fd	int
=	O
shellcmd	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cmd	*(char)
)	O
;	O
if	O
(	O
fd	int
==	O
NULL	O
)	O
{	O
return	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
returnfd	int
)	O
{	O
char	O
c	int
;	O
int	O
f	int
;	O
f	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	int
)	O
;	O
SET_BINARY	O
(	O
f	int
)	O
;	O
if	O
(	O
read	(int,*(void),long)->(long)
(	O
f	int
,	O
&	O
c	int
,	O
1	int
)	O
!=	O
1	int
)	O
{	O
int	O
status	int
=	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	int
)	O
;	O
if	O
(	O
returnfd	int
>	O
1	int
&&	O
status	int
==	O
0	int
)	O
{	O
*	O
pfd	*(*(void))
=	O
NULL	O
;	O
*	O
pf	*(int)
=	O
-	O
1	int
;	O
return	O
(	O
save	(*(char))->(*(char))
(	O
FAKE_EMPTYFILE	*(char)
)	O
)	O
;	O
}	O
return	O
(	O
NULL	O
)	O
;	O
}	O
ch_ungetchar	(int)->(void)
(	O
c	int
)	O
;	O
*	O
pfd	*(*(void))
=	O
(	O
void	O
*	O
)	O
fd	int
;	O
*	O
pf	*(int)
=	O
f	int
;	O
return	O
(	O
save	(*(char))->(*(char))
(	O
"-"	*(char)
)	O
)	O
;	O
}	O
cmd	*(char)
=	O
readfd	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
fd	int
)	O
;	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	int
)	O
;	O
if	O
(	O
*	O
cmd	*(char)
==	O
'\0'	O
)	O
return	O
(	O
NULL	O
)	O
;	O
return	O
(	O
cmd	*(char)
)	O
;	O
}	O
public	O
void	O
close_altfile	(*(char),*(char))->(void)
(	O
altfilename	*(char)
,	O
filename	*(char)
)	O
char	O
*	O
altfilename	*(char)
;	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
lessclose	*(char)
;	O
FILE	struct
*	O
fd	int
;	O
char	O
*	O
cmd	*(char)
;	O
int	O
len	int
;	O
if	O
(	O
secure	int
)	O
return	O
;	O
ch_ungetchar	(int)->(void)
(	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
lessclose	*(char)
=	O
lgetenv	(*(char))->(*(char))
(	O
"LESSCLOSE"	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
num_pct_s	(*(char))->(int)
(	O
lessclose	*(char)
)	O
>	O
2	int
)	O
{	O
error	(*(char),*(union(*(char),int,long)))->(void)
(	O
"LESSCLOSE ignored; must contain no more than 2 %%s"	*(char)
,	O
NULL_PARG	O
)	O
;	O
return	O
;	O
}	O
len	int
=	O
(	O
int	O
)	O
(	O
strlen	(*(char))->(long)
(	O
lessclose	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
altfilename	*(char)
)	O
+	O
2	int
)	O
;	O
cmd	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
len	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
SNPRINTF2	O
(	O
cmd	*(char)
,	O
len	int
,	O
lessclose	*(char)
,	O
filename	*(char)
,	O
altfilename	*(char)
)	O
;	O
fd	int
=	O
shellcmd	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cmd	*(char)
)	O
;	O
if	O
(	O
fd	int
!=	O
NULL	O
)	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fd	int
)	O
;	O
}	O
public	O
int	O
is_dir	(*(char))->(int)
(	O
filename	*(char)
)	O
char	O
*	O
filename	*(char)
;	O
{	O
int	O
isdir	int
=	O
0	int
;	O
{	O
int	O
r	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
r	int
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
filename	*(char)
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
isdir	int
=	O
(	O
r	int
>=	O
0	int
&&	O
S_ISDIR	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
;	O
}	O
return	O
(	O
isdir	int
)	O
;	O
}	O
public	O
char	O
*	O
bad_file	(*(char))->(*(char))
(	O
filename	*(char)
)	O
char	O
*	O
filename	*(char)
;	O
{	O
char	O
*	O
m	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
force_open	int
&&	O
is_dir	(*(char))->(int)
(	O
filename	*(char)
)	O
)	O
{	O
static	O
char	O
is_a_dir	array(char)
[	O
]	O
=	O
" is a directory"	*(char)
;	O
m	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
sizeof	O
(	O
is_a_dir	array(char)
)	O
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
m	*(char)
,	O
filename	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
m	*(char)
,	O
is_a_dir	array(char)
)	O
;	O
}	O
else	O
{	O
int	O
r	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
r	int
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
filename	*(char)
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
r	int
<	O
0	int
)	O
{	O
m	*(char)
=	O
errno_message	(*(char))->(*(char))
(	O
filename	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
force_open	int
)	O
{	O
m	*(char)
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
!	O
S_ISREG	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
static	O
char	O
not_reg	array(char)
[	O
]	O
=	O
" is not a regular file (use -f to see it)"	*(char)
;	O
m	*(char)
=	O
(	O
char	O
*	O
)	O
ecalloc	(int,int)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
sizeof	O
(	O
not_reg	array(char)
)	O
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
m	*(char)
,	O
filename	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
m	*(char)
,	O
not_reg	array(char)
)	O
;	O
}	O
}	O
return	O
(	O
m	*(char)
)	O
;	O
}	O
public	O
POSITION	long
filesize	(int)->(long)
(	O
f	int
)	O
int	O
f	int
;	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
f	int
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
>=	O
0	int
)	O
return	O
(	O
(	O
POSITION	long
)	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
;	O
return	O
(	O
seek_filesize	(int)->(long)
(	O
f	int
)	O
)	O
;	O
}	O
public	O
char	O
*	O
shell_coption	()->(*(char))
(	O
)	O
{	O
return	O
(	O
"-c"	*(char)
)	O
;	O
}	O
public	O
char	O
*	O
last_component	(*(char))->(*(char))
(	O
name	*(char)
)	O
char	O
*	O
name	*(char)
;	O
{	O
char	O
*	O
slash	*(char)
;	O
for	O
(	O
slash	*(char)
=	O
name	*(char)
+	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
slash	*(char)
>	O
name	*(char)
;	O
)	O
{	O
--	O
slash	*(char)
;	O
if	O
(	O
*	O
slash	*(char)
==	O
*	O
PATHNAME_SEP	*(char)
||	O
*	O
slash	*(char)
==	O
'/'	O
)	O
return	O
(	O
slash	*(char)
+	O
1	int
)	O
;	O
}	O
return	O
(	O
name	*(char)
)	O
;	O
}	O
