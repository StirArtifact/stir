char	O
const	O
pr_program	array(char)
[	O
]	O
=	O
PR_PROGRAM	*(char)
;	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
{	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
char	O
args	array(char)
[	O
1	int
]	O
;	O
}	O
;	O
static	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
msg_chain	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
static	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
*	O
msg_chain_end	*(*(struct(*(struct(*`,array(char))),array(char))))
=	O
&	O
msg_chain	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
void	O
perror_with_name	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
pfatal_with_name	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
print_message_queue	()->(void)
(	O
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
e	int
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
void	O
fatal	(*(char))->(void)
(	O
char	O
const	O
*	O
msgid	*(char)
)	O
{	O
print_message_queue	()->(void)
(	O
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s"	*(char)
,	O
_	O
(	O
msgid	*(char)
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
void	O
message	(*(char),*(char),*(char))->(void)
(	O
char	O
const	O
*	O
format_msgid	*(char)
,	O
char	O
const	O
*	O
arg1	*(char)
,	O
char	O
const	O
*	O
arg2	*(char)
)	O
{	O
message5	(*(char),*(char),*(char),*(char),*(char))->(void)
(	O
format_msgid	*(char)
,	O
arg1	*(char)
,	O
arg2	*(char)
,	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
message5	(*(char),*(char),*(char),*(char),*(char))->(void)
(	O
char	O
const	O
*	O
format_msgid	*(char)
,	O
char	O
const	O
*	O
arg1	*(char)
,	O
char	O
const	O
*	O
arg2	*(char)
,	O
char	O
const	O
*	O
arg3	*(char)
,	O
char	O
const	O
*	O
arg4	*(char)
)	O
{	O
if	O
(	O
paginate	bool
)	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
const	O
*	O
arg	array(*(char))
[	O
5	int
]	O
;	O
int	O
i	int
;	O
size_t	long
size	array(long)
[	O
5	int
]	O
;	O
size_t	long
total_size	long
=	O
offsetof	O
(	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
,	O
args	array(char)
)	O
;	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
arg	array(*(char))
[	O
0	int
]	O
=	O
format_msgid	*(char)
;	O
arg	array(*(char))
[	O
1	int
]	O
=	O
arg1	*(char)
;	O
arg	array(*(char))
[	O
2	int
]	O
=	O
arg2	*(char)
;	O
arg	array(*(char))
[	O
3	int
]	O
=	O
arg3	*(char)
?	O
arg3	*(char)
:	O
""	*(char)
;	O
arg	array(*(char))
[	O
4	int
]	O
=	O
arg4	*(char)
?	O
arg4	*(char)
:	O
""	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
5	int
;	O
i	int
++	O
)	O
total_size	long
+=	O
size	array(long)
[	O
i	int
]	O
=	O
strlen	(*(char))->(long)
(	O
arg	array(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
xmalloc	(long)->(*(void))
(	O
total_size	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	*(char)
=	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
args	array(char)
;	O
i	int
<	O
5	int
;	O
p	*(char)
+=	O
size	array(long)
[	O
i	int
++	O
]	O
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
arg	array(*(char))
[	O
i	int
]	O
,	O
size	array(long)
[	O
i	int
]	O
)	O
;	O
*	O
msg_chain_end	*(*(struct(*(struct(*`,array(char))),array(char))))
=	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
0	int
;	O
msg_chain_end	*(*(struct(*(struct(*`,array(char))),array(char))))
=	O
&	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
}	O
else	O
{	O
if	O
(	O
sdiff_merge_assist	bool
)	O
putchar	(int)->(int)
(	O
' '	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
format_msgid	*(char)
)	O
,	O
arg1	*(char)
,	O
arg2	*(char)
,	O
arg3	*(char)
,	O
arg4	*(char)
)	O
;	O
}	O
}	O
void	O
print_message_queue	()->(void)
(	O
void	O
)	O
{	O
char	O
const	O
*	O
arg	array(*(char))
[	O
5	int
]	O
;	O
int	O
i	int
;	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
m	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
msg_chain	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
while	O
(	O
m	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
{	O
struct	O
msg	struct(*(struct(*(struct(*(struct`),array(char))),array(char))),array(char))
*	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
m	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
arg	array(*(char))
[	O
0	int
]	O
=	O
m	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
args	array(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
arg	array(*(char))
[	O
i	int
+	O
1	int
]	O
=	O
arg	array(*(char))
[	O
i	int
]	O
+	O
strlen	(*(char))->(long)
(	O
arg	array(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
arg	array(*(char))
[	O
0	int
]	O
)	O
,	O
arg	array(*(char))
[	O
1	int
]	O
,	O
arg	array(*(char))
[	O
2	int
]	O
,	O
arg	array(*(char))
[	O
3	int
]	O
,	O
arg	array(*(char))
[	O
4	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
m	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
;	O
m	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
}	O
}	O
static	O
char	O
const	O
*	O
current_name0	*(char)
;	O
static	O
char	O
const	O
*	O
current_name1	*(char)
;	O
static	O
bool	bool
currently_recursive	bool
;	O
void	O
setup_output	(*(char),*(char),bool)->(void)
(	O
char	O
const	O
*	O
name0	*(char)
,	O
char	O
const	O
*	O
name1	*(char)
,	O
bool	bool
recursive	bool
)	O
{	O
current_name0	*(char)
=	O
name0	*(char)
;	O
current_name1	*(char)
=	O
name1	*(char)
;	O
currently_recursive	bool
=	O
recursive	bool
;	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
0	int
;	O
}	O
static	O
pid_t	int
pr_pid	int
;	O
void	O
begin_output	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
if	O
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
0	int
)	O
return	O
;	O
name	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
current_name0	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
current_name1	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
switch_string	*(char)
)	O
+	O
7	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"diff%s %s %s"	*(char)
,	O
switch_string	*(char)
,	O
current_name0	*(char)
,	O
current_name1	*(char)
)	O
;	O
if	O
(	O
paginate	bool
)	O
{	O
if	O
(	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
_	O
(	O
"write failed"	*(char)
)	O
)	O
;	O
{	O
int	O
pipes	array(int)
[	O
2	int
]	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
pipes	array(int)
)	O
!=	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
"pipe"	*(char)
)	O
;	O
pr_pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pr_pid	int
<	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
"fork"	*(char)
)	O
;	O
if	O
(	O
pr_pid	int
==	O
0	int
)	O
{	O
close	(int)->(int)
(	O
pipes	array(int)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
pipes	array(int)
[	O
0	int
]	O
!=	O
STDIN_FILENO	int
)	O
{	O
if	O
(	O
dup2	(int,int)->(int)
(	O
pipes	array(int)
[	O
0	int
]	O
,	O
STDIN_FILENO	int
)	O
<	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
"dup2"	*(char)
)	O
;	O
close	(int)->(int)
(	O
pipes	array(int)
[	O
0	int
]	O
)	O
;	O
}	O
execl	(*(char),*(char))->(int)
(	O
pr_program	array(char)
,	O
pr_program	array(char)
,	O
"-h"	*(char)
,	O
name	*(char)
,	O
(	O
char	O
*	O
)	O
0	int
)	O
;	O
_exit	(int)->(void)
(	O
errno	O
==	O
ENOENT	int
?	O
127	int
:	O
126	int
)	O
;	O
}	O
else	O
{	O
close	(int)->(int)
(	O
pipes	array(int)
[	O
0	int
]	O
)	O
;	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
pipes	array(int)
[	O
1	int
]	O
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
!	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
pfatal_with_name	(*(char))->(void)
(	O
"fdopen"	*(char)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
currently_recursive	bool
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
switch	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
OUTPUT_CONTEXT	int
:	O
print_context_header	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),bool)->(void)
(	O
files	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
false	int
)	O
;	O
break	O
;	O
case	O
OUTPUT_UNIFIED	int
:	O
print_context_header	(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),bool)->(void)
(	O
files	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
true	int
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
void	O
finish_output	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
0	int
&&	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
int	O
status	int
;	O
int	O
wstatus	int
;	O
int	O
werrno	int
=	O
0	int
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
fatal	(*(char))->(void)
(	O
"write failed"	*(char)
)	O
;	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
_	O
(	O
"write failed"	*(char)
)	O
)	O
;	O
if	O
(	O
waitpid	(int,*(int),int)->(int)
(	O
pr_pid	int
,	O
&	O
wstatus	int
,	O
0	int
)	O
<	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
"waitpid"	*(char)
)	O
;	O
status	int
=	O
(	O
!	O
werrno	int
&&	O
WIFEXITED	O
(	O
wstatus	int
)	O
?	O
WEXITSTATUS	O
(	O
wstatus	int
)	O
:	O
INT_MAX	O
)	O
;	O
if	O
(	O
status	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
werrno	int
,	O
_	O
(	O
status	int
==	O
126	int
?	O
"subsidiary program `%s' could not be invoked"	*(char)
:	O
status	int
==	O
127	int
?	O
"subsidiary program `%s' not found"	*(char)
:	O
status	int
==	O
INT_MAX	O
?	O
"subsidiary program `%s' failed"	*(char)
:	O
"subsidiary program `%s' failed (exit status %d)"	*(char)
)	O
,	O
pr_program	array(char)
,	O
status	int
)	O
;	O
}	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
0	int
;	O
}	O
bool	bool
lines_differ	(*(char),*(char))->(bool)
(	O
char	O
const	O
*	O
s1	*(char)
,	O
char	O
const	O
*	O
s2	*(char)
)	O
{	O
register	O
char	O
const	O
*	O
t1	*(char)
=	O
s1	*(char)
;	O
register	O
char	O
const	O
*	O
t2	*(char)
=	O
s2	*(char)
;	O
size_t	long
column	long
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
register	O
unsigned	O
char	O
c1	char
=	O
*	O
t1	*(char)
++	O
;	O
register	O
unsigned	O
char	O
c2	char
=	O
*	O
t2	*(char)
++	O
;	O
if	O
(	O
c1	char
!=	O
c2	char
)	O
{	O
switch	O
(	O
ignore_white_space	enum(int,int,int,int,int,int)
)	O
{	O
case	O
IGNORE_ALL_SPACE	int
:	O
while	O
(	O
isspace	(int)->(int)
(	O
c1	char
)	O
&&	O
c1	char
!=	O
'\n'	O
)	O
c1	char
=	O
*	O
t1	*(char)
++	O
;	O
while	O
(	O
isspace	(int)->(int)
(	O
c2	char
)	O
&&	O
c2	char
!=	O
'\n'	O
)	O
c2	char
=	O
*	O
t2	*(char)
++	O
;	O
break	O
;	O
case	O
IGNORE_SPACE_CHANGE	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
c1	char
)	O
)	O
{	O
while	O
(	O
c1	char
!=	O
'\n'	O
)	O
{	O
c1	char
=	O
*	O
t1	*(char)
++	O
;	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
c1	char
)	O
)	O
{	O
--	O
t1	*(char)
;	O
c1	char
=	O
' '	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
isspace	(int)->(int)
(	O
c2	char
)	O
)	O
{	O
while	O
(	O
c2	char
!=	O
'\n'	O
)	O
{	O
c2	char
=	O
*	O
t2	*(char)
++	O
;	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
c2	char
)	O
)	O
{	O
--	O
t2	*(char)
;	O
c2	char
=	O
' '	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
c1	char
!=	O
c2	char
)	O
{	O
if	O
(	O
c2	char
==	O
' '	O
&&	O
c1	char
!=	O
'\n'	O
&&	O
s1	*(char)
+	O
1	int
<	O
t1	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
t1	*(char)
[	O
-	O
2	int
]	O
)	O
)	O
{	O
--	O
t1	*(char)
;	O
continue	O
;	O
}	O
if	O
(	O
c1	char
==	O
' '	O
&&	O
c2	char
!=	O
'\n'	O
&&	O
s2	*(char)
+	O
1	int
<	O
t2	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
t2	*(char)
[	O
-	O
2	int
]	O
)	O
)	O
{	O
--	O
t2	*(char)
;	O
continue	O
;	O
}	O
}	O
break	O
;	O
case	O
IGNORE_TRAILING_SPACE	int
:	O
case	O
IGNORE_TAB_EXPANSION_AND_TRAILING_SPACE	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
c1	char
)	O
&&	O
isspace	(int)->(int)
(	O
c2	char
)	O
)	O
{	O
unsigned	O
char	O
c	char
;	O
if	O
(	O
c1	char
!=	O
'\n'	O
)	O
{	O
char	O
const	O
*	O
p	*(char)
=	O
t1	*(char)
;	O
while	O
(	O
(	O
c	char
=	O
*	O
p	*(char)
)	O
!=	O
'\n'	O
&&	O
isspace	(int)->(int)
(	O
c	char
)	O
)	O
++	O
p	*(char)
;	O
if	O
(	O
c	char
!=	O
'\n'	O
)	O
break	O
;	O
}	O
if	O
(	O
c2	char
!=	O
'\n'	O
)	O
{	O
char	O
const	O
*	O
p	*(char)
=	O
t2	*(char)
;	O
while	O
(	O
(	O
c	char
=	O
*	O
p	*(char)
)	O
!=	O
'\n'	O
&&	O
isspace	(int)->(int)
(	O
c	char
)	O
)	O
++	O
p	*(char)
;	O
if	O
(	O
c	char
!=	O
'\n'	O
)	O
break	O
;	O
}	O
return	O
false	int
;	O
}	O
if	O
(	O
ignore_white_space	enum(int,int,int,int,int,int)
==	O
IGNORE_TRAILING_SPACE	int
)	O
break	O
;	O
case	O
IGNORE_TAB_EXPANSION	int
:	O
if	O
(	O
(	O
c1	char
==	O
' '	O
&&	O
c2	char
==	O
'\t'	O
)	O
||	O
(	O
c1	char
==	O
'\t'	O
&&	O
c2	char
==	O
' '	O
)	O
)	O
{	O
size_t	long
column2	long
=	O
column	long
;	O
for	O
(	O
;	O
;	O
c1	char
=	O
*	O
t1	*(char)
++	O
)	O
{	O
if	O
(	O
c1	char
==	O
' '	O
)	O
column	long
++	O
;	O
else	O
if	O
(	O
c1	char
==	O
'\t'	O
)	O
column	long
+=	O
tabsize	long
-	O
column	long
%	O
tabsize	long
;	O
else	O
break	O
;	O
}	O
for	O
(	O
;	O
;	O
c2	char
=	O
*	O
t2	*(char)
++	O
)	O
{	O
if	O
(	O
c2	char
==	O
' '	O
)	O
column2	long
++	O
;	O
else	O
if	O
(	O
c2	char
==	O
'\t'	O
)	O
column2	long
+=	O
tabsize	long
-	O
column2	long
%	O
tabsize	long
;	O
else	O
break	O
;	O
}	O
if	O
(	O
column	long
!=	O
column2	long
)	O
return	O
true	int
;	O
}	O
break	O
;	O
case	O
IGNORE_NO_WHITE_SPACE	int
:	O
break	O
;	O
}	O
if	O
(	O
ignore_case	bool
)	O
{	O
c1	char
=	O
tolower	(int)->(int)
(	O
c1	char
)	O
;	O
c2	char
=	O
tolower	(int)->(int)
(	O
c2	char
)	O
;	O
}	O
if	O
(	O
c1	char
!=	O
c2	char
)	O
break	O
;	O
}	O
if	O
(	O
c1	char
==	O
'\n'	O
)	O
return	O
false	int
;	O
column	long
+=	O
c1	char
==	O
'\t'	O
?	O
tabsize	long
-	O
column	long
%	O
tabsize	long
:	O
1	int
;	O
}	O
return	O
true	int
;	O
}	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
find_change	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
start	*(int)
)	O
{	O
return	O
start	*(int)
;	O
}	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
find_reverse_change	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
start	*(int)
)	O
{	O
return	O
start	*(int)
;	O
}	O
void	O
print_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)),*((*(struct(*`,long,long,long,long,bool)))->(*(struct(*`,long,long,long,long,bool)))),*((*(struct(*`,long,long,long,long,bool)))->(void)))->(void)
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
(	O
*	O
hunkfun	*((*(struct(*(struct`),long,long,long,long,bool)))->(*(struct(*(struct`),long,long,long,long,bool))))
)	O
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
)	O
,	O
void	O
(	O
*	O
printfun	*((*(struct(*(struct`),long,long,long,long,bool)))->(void))
)	O
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
)	O
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
script	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
while	O
(	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
this	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
*	O
end	*(int)
;	O
this	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
end	*(int)
=	O
(	O
*	O
hunkfun	*((*(struct(*(struct`),long,long,long,long,bool)))->(*(struct(*(struct`),long,long,long,long,bool))))
)	O
(	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
)	O
;	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
end	*(int)
->	O
link	(*(char),*(char))->(int)
;	O
end	*(int)
->	O
link	(*(char),*(char))->(int)
=	O
0	int
;	O
(	O
*	O
printfun	*((*(struct(*(struct`),long,long,long,long,bool)))->(void))
)	O
(	O
this	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
;	O
end	*(int)
->	O
link	(*(char),*(char))->(int)
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
}	O
}	O
void	O
print_1_line	(*(char),*(*(char)))->(void)
(	O
char	O
const	O
*	O
line_flag	*(char)
,	O
char	O
const	O
*	O
const	O
*	O
line	*(*(char))
)	O
{	O
char	O
const	O
*	O
base	int
=	O
line	*(*(char))
[	O
0	int
]	O
,	O
*	O
limit	*(char)
=	O
line	*(*(char))
[	O
1	int
]	O
;	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
const	O
*	O
flag_format	*(char)
=	O
0	int
;	O
if	O
(	O
line_flag	*(char)
&&	O
*	O
line_flag	*(char)
)	O
{	O
char	O
const	O
*	O
flag_format_1	*(char)
=	O
flag_format	*(char)
=	O
initial_tab	bool
?	O
"%s\t"	*(char)
:	O
"%s "	*(char)
;	O
char	O
const	O
*	O
line_flag_1	*(char)
=	O
line_flag	*(char)
;	O
if	O
(	O
suppress_blank_empty	bool
&&	O
*	O
*	O
line	*(*(char))
==	O
'\n'	O
)	O
{	O
flag_format_1	*(char)
=	O
"%s"	*(char)
;	O
line_flag_1	*(char)
+=	O
*	O
line_flag_1	*(char)
==	O
' '	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
flag_format_1	*(char)
,	O
line_flag_1	*(char)
)	O
;	O
}	O
output_1_line	(*(char),*(char),*(char),*(char))->(void)
(	O
base	int
,	O
limit	*(char)
,	O
flag_format	*(char)
,	O
line_flag	*(char)
)	O
;	O
if	O
(	O
(	O
!	O
line_flag	*(char)
||	O
line_flag	*(char)
[	O
0	int
]	O
)	O
&&	O
limit	*(char)
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n\\ %s\n"	*(char)
,	O
_	O
(	O
"No newline at end of file"	*(char)
)	O
)	O
;	O
}	O
void	O
output_1_line	(*(char),*(char),*(char),*(char))->(void)
(	O
char	O
const	O
*	O
base	int
,	O
char	O
const	O
*	O
limit	*(char)
,	O
char	O
const	O
*	O
flag_format	*(char)
,	O
char	O
const	O
*	O
line_flag	*(char)
)	O
{	O
if	O
(	O
!	O
expand_tabs	bool
)	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
base	int
,	O
sizeof	O
(	O
char	O
)	O
,	O
limit	*(char)
-	O
base	int
,	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
{	O
register	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
register	O
unsigned	O
char	O
c	char
;	O
register	O
char	O
const	O
*	O
t	*(char)
=	O
base	int
;	O
register	O
size_t	long
column	long
=	O
0	int
;	O
size_t	long
tab_size	long
=	O
tabsize	long
;	O
while	O
(	O
t	*(char)
<	O
limit	*(char)
)	O
switch	O
(	O
(	O
c	char
=	O
*	O
t	*(char)
++	O
)	O
)	O
{	O
case	O
'\t'	O
:	O
{	O
size_t	long
spaces	long
=	O
tab_size	long
-	O
column	long
%	O
tab_size	long
;	O
column	long
+=	O
spaces	long
;	O
do	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
' '	O
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
--	O
spaces	long
)	O
;	O
}	O
break	O
;	O
case	O
'\r'	O
:	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	char
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
flag_format	*(char)
&&	O
t	*(char)
<	O
limit	*(char)
&&	O
*	O
t	*(char)
!=	O
'\n'	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
flag_format	*(char)
,	O
line_flag	*(char)
)	O
;	O
column	long
=	O
0	int
;	O
break	O
;	O
case	O
'\b'	O
:	O
if	O
(	O
column	long
==	O
0	int
)	O
continue	O
;	O
column	long
--	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	char
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
default	O
:	O
column	long
+=	O
isprint	(int)->(int)
(	O
c	char
)	O
!=	O
0	int
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	char
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
}	O
}	O
}	O
char	O
const	O
change_letter	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
'd'	O
,	O
'a'	O
,	O
'c'	O
}	O
;	O
lin	long
translate_line_number	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long)->(long)
(	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
const	O
*	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
lin	long
i	int
)	O
{	O
return	O
i	int
+	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
->	O
prefix_lines	long
+	O
1	int
;	O
}	O
void	O
translate_range	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long,long,*(long),*(long))->(void)
(	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
const	O
*	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
lin	long
a	long
,	O
lin	long
b	long
,	O
long	O
int	O
*	O
aptr	*(long)
,	O
long	O
int	O
*	O
bptr	*(long)
)	O
{	O
*	O
aptr	*(long)
=	O
translate_line_number	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long)->(long)
(	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
a	long
-	O
1	int
)	O
+	O
1	int
;	O
*	O
bptr	*(long)
=	O
translate_line_number	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long)->(long)
(	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
b	long
+	O
1	int
)	O
-	O
1	int
;	O
}	O
void	O
print_number_range	(char,*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long,long)->(void)
(	O
char	O
sepchar	char
,	O
struct	O
file_data	struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)
*	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
lin	long
a	long
,	O
lin	long
b	long
)	O
{	O
long	O
int	O
trans_a	long
,	O
trans_b	long
;	O
translate_range	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),long,long,*(long),*(long))->(void)
(	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
a	long
,	O
b	long
,	O
&	O
trans_a	long
,	O
&	O
trans_b	long
)	O
;	O
if	O
(	O
trans_b	long
>	O
trans_a	long
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%ld%c%ld"	*(char)
,	O
trans_a	long
,	O
sepchar	char
,	O
trans_b	long
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
outfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%ld"	*(char)
,	O
trans_b	long
)	O
;	O
}	O
enum	O
changes	enum(int,int,int,int)
analyze_hunk	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)),*(long),*(long),*(long),*(long))->(enum(int,int,int,int))
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
hunk	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
,	O
lin	long
*	O
first0	*(long)
,	O
lin	long
*	O
last0	*(long)
,	O
lin	long
*	O
first1	*(long)
,	O
lin	long
*	O
last1	*(long)
)	O
{	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
lin	long
l0	long
,	O
l1	long
;	O
lin	long
show_from	long
,	O
show_to	long
;	O
lin	long
i	int
;	O
bool	bool
trivial	bool
=	O
ignore_blank_lines	bool
||	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
fastmap	*(char)
;	O
size_t	long
trivial_length	long
=	O
ignore_blank_lines	bool
-	O
1	int
;	O
bool	bool
skip_white_space	bool
=	O
ignore_blank_lines	bool
&&	O
IGNORE_TRAILING_SPACE	int
<=	O
ignore_white_space	enum(int,int,int,int,int,int)
;	O
bool	bool
skip_leading_white_space	bool
=	O
skip_white_space	bool
&&	O
IGNORE_SPACE_CHANGE	int
<=	O
ignore_white_space	enum(int,int,int,int,int,int)
;	O
char	O
const	O
*	O
const	O
*	O
linbuf0	*(*(char))
=	O
files	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
linbuf	*(*(char))
;	O
char	O
const	O
*	O
const	O
*	O
linbuf1	*(*(char))
=	O
files	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
linbuf	*(*(char))
;	O
show_from	long
=	O
show_to	long
=	O
0	int
;	O
*	O
first0	*(long)
=	O
hunk	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
line0	long
;	O
*	O
first1	*(long)
=	O
hunk	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
line1	long
;	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
hunk	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
do	O
{	O
l0	long
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
line0	long
+	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
deleted	long
-	O
1	int
;	O
l1	long
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
line1	long
+	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
inserted	long
-	O
1	int
;	O
show_from	long
+=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
deleted	long
;	O
show_to	long
+=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
inserted	long
;	O
for	O
(	O
i	int
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
line0	long
;	O
i	int
<=	O
l0	long
&&	O
trivial	bool
;	O
i	int
++	O
)	O
{	O
char	O
const	O
*	O
line	*(*(char))
=	O
linbuf0	*(*(char))
[	O
i	int
]	O
;	O
char	O
const	O
*	O
newline	*(char)
=	O
linbuf0	*(*(char))
[	O
i	int
+	O
1	int
]	O
-	O
1	int
;	O
size_t	long
len	long
=	O
newline	*(char)
-	O
line	*(*(char))
;	O
char	O
const	O
*	O
p	*(char)
=	O
line	*(*(char))
;	O
if	O
(	O
skip_white_space	bool
)	O
for	O
(	O
;	O
*	O
p	*(char)
!=	O
'\n'	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
skip_leading_white_space	bool
)	O
p	*(char)
=	O
line	*(*(char))
;	O
break	O
;	O
}	O
if	O
(	O
newline	*(char)
-	O
p	*(char)
!=	O
trivial_length	long
&&	O
(	O
!	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
fastmap	*(char)
||	O
re_search	(*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int,int,int,*(struct(int,*(int),*(int))))->(int)
(	O
&	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
line	*(*(char))
,	O
len	long
,	O
0	int
,	O
len	long
,	O
0	int
)	O
<	O
0	int
)	O
)	O
trivial	bool
=	O
0	int
;	O
}	O
for	O
(	O
i	int
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
line1	long
;	O
i	int
<=	O
l1	long
&&	O
trivial	bool
;	O
i	int
++	O
)	O
{	O
char	O
const	O
*	O
line	*(*(char))
=	O
linbuf1	*(*(char))
[	O
i	int
]	O
;	O
char	O
const	O
*	O
newline	*(char)
=	O
linbuf1	*(*(char))
[	O
i	int
+	O
1	int
]	O
-	O
1	int
;	O
size_t	long
len	long
=	O
newline	*(char)
-	O
line	*(*(char))
;	O
char	O
const	O
*	O
p	*(char)
=	O
line	*(*(char))
;	O
if	O
(	O
skip_white_space	bool
)	O
for	O
(	O
;	O
*	O
p	*(char)
!=	O
'\n'	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
skip_leading_white_space	bool
)	O
p	*(char)
=	O
line	*(*(char))
;	O
break	O
;	O
}	O
if	O
(	O
newline	*(char)
-	O
p	*(char)
!=	O
trivial_length	long
&&	O
(	O
!	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
.	O
fastmap	*(char)
||	O
re_search	(*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int,int,int,*(struct(int,*(int),*(int))))->(int)
(	O
&	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
line	*(*(char))
,	O
len	long
,	O
0	int
,	O
len	long
,	O
0	int
)	O
<	O
0	int
)	O
)	O
trivial	bool
=	O
0	int
;	O
}	O
}	O
while	O
(	O
(	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
next	*(struct(*(struct(*(struct`),array(char))),array(char)))
->	O
link	(*(char),*(char))->(int)
)	O
!=	O
0	int
)	O
;	O
*	O
last0	*(long)
=	O
l0	long
;	O
*	O
last1	*(long)
=	O
l1	long
;	O
if	O
(	O
trivial	bool
)	O
return	O
UNCHANGED	int
;	O
return	O
(	O
show_from	long
?	O
OLD	int
:	O
UNCHANGED	int
)	O
|	O
(	O
show_to	long
?	O
NEW	int
:	O
UNCHANGED	int
)	O
;	O
}	O
char	O
*	O
concat	(*(char),*(char),*(char))->(*(char))
(	O
char	O
const	O
*	O
s1	*(char)
,	O
char	O
const	O
*	O
s2	*(char)
,	O
char	O
const	O
*	O
s3	*(char)
)	O
{	O
char	O
*	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
=	O
xmalloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
s1	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
s2	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
s3	*(char)
)	O
+	O
1	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
,	O
"%s%s%s"	*(char)
,	O
s1	*(char)
,	O
s2	*(char)
,	O
s3	*(char)
)	O
;	O
return	O
new	*(struct(*(struct(*(struct`),array(char))),array(char)))
;	O
}	O
void	O
*	O
zalloc	(long)->(*(void))
(	O
size_t	long
size	array(long)
)	O
{	O
void	O
*	O
p	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
size	array(long)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
p	*(char)
,	O
0	int
,	O
size	array(long)
)	O
;	O
return	O
p	*(char)
;	O
}	O
void	O
debug_script	(*(struct(*(struct(*`,long,long,long,long,bool)),long,long,long,long,bool)))->(void)
(	O
struct	O
change	struct(*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool)),long,long,long,long,bool)
*	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
)	O
{	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
;	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
;	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
=	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
link	(*(char),*(char))->(int)
)	O
{	O
long	O
int	O
line0	long
=	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
line0	long
;	O
long	O
int	O
line1	long
=	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
line1	long
;	O
long	O
int	O
deleted	long
=	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
deleted	long
;	O
long	O
int	O
inserted	long
=	O
sp	*(struct(*(struct(*(struct`),long,long,long,long,bool)),long,long,long,long,bool))
->	O
inserted	long
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%3ld %3ld delete %ld insert %ld\n"	*(char)
,	O
line0	long
,	O
line1	long
,	O
deleted	long
,	O
inserted	long
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
