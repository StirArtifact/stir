struct	O
onexit_closure	struct(*((*(void))->(void)),*(void))
{	O
mu_onexit_t	*((*(void))->(void))
function	*((*(void))->(void))
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
static	O
mu_list_t	*(struct)
onexit_list	*(struct)
;	O
void	O
_mu_onexit_run	()->(void)
(	O
void	O
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
int	O
rc	int
,	O
status	int
=	O
0	int
;	O
if	O
(	O
!	O
onexit_list	*(struct)
)	O
return	O
;	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
onexit_list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot create iterator, onexit aborted: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
mu_strerr	*(struct)
)	O
;	O
_exit	(int)->(void)
(	O
127	int
)	O
;	O
}	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
struct	O
onexit_closure	struct(*((*(void))->(void)),*(void))
*	O
cp	*(struct(*((*(void))->(void)),*(void)))
;	O
int	O
rc	int
=	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp	*(struct(*((*(void))->(void)),*(void)))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
status	int
=	O
127	int
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot obtain current item while traversing the"	*(char)
" onexit action list: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
else	O
cp	*(struct(*((*(void))->(void)),*(void)))
->	O
function	*((*(void))->(void))
(	O
cp	*(struct(*((*(void))->(void)),*(void)))
->	O
data	*(void)
)	O
;	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
onexit_list	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
_exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
int	O
mu_onexit	(*((*(void))->(void)),*(void))->(int)
(	O
mu_onexit_t	*((*(void))->(void))
func	*(char)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
onexit_closure	struct(*((*(void))->(void)),*(void))
*	O
clos	*(struct(*((*(void))->(void)),*(void)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
clos	*(struct(*((*(void))->(void)),*(void)))
)	O
)	O
;	O
if	O
(	O
!	O
clos	*(struct(*((*(void))->(void)),*(void)))
)	O
return	O
ENOMEM	int
;	O
clos	*(struct(*((*(void))->(void)),*(void)))
->	O
function	*((*(void))->(void))
=	O
func	*(char)
;	O
clos	*(struct(*((*(void))->(void)),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
if	O
(	O
!	O
onexit_list	*(struct)
)	O
{	O
int	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
onexit_list	*(struct)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
onexit_list	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
atexit	(*(()->(void)))->(int)
(	O
_mu_onexit_run	()->(void)
)	O
;	O
}	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
onexit_list	*(struct)
,	O
clos	*(struct(*((*(void))->(void)),*(void)))
)	O
;	O
}	O
void	O
mu_onexit_reset	()->(void)
(	O
void	O
)	O
{	O
mu_list_clear	(*(struct))->(void)
(	O
onexit_list	*(struct)
)	O
;	O
}	O
void	O
mu_onexit_run	()->(void)
(	O
void	O
)	O
{	O
_mu_onexit_run	()->(void)
(	O
)	O
;	O
}	O
