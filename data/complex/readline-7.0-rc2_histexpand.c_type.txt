typedef	O
int	O
_hist_search_func_t	(*(char),int)->(int)
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
char	O
error_pointer	char
;	O
static	O
char	O
*	O
subst_lhs	*(char)
;	O
static	O
char	O
*	O
subst_rhs	*(char)
;	O
static	O
int	O
subst_lhs_len	int
;	O
static	O
int	O
subst_rhs_len	int
;	O
static	O
char	O
*	O
history_event_delimiter_chars	*(char)
=	O
HISTORY_EVENT_DELIMITERS	*(char)
;	O
static	O
char	O
*	O
get_history_word_specifier	(*(char),*(char),*(int))->(*(char))
PARAMS	O
(	O
(	O
char	O
*	O
,	O
char	O
*	O
,	O
int	O
*	O
)	O
)	O
;	O
static	O
int	O
history_tokenize_word	(*(char),int)->(int)
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
char	O
*	O
*	O
history_tokenize_internal	(*(char),int,*(int))->(*(*(char)))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
,	O
int	O
*	O
)	O
)	O
;	O
static	O
char	O
*	O
history_substring	(*(char),int,int)->(*(char))
PARAMS	O
(	O
(	O
const	O
char	O
*	O
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
void	O
freewords	(*(*(char)),int)->(void)
PARAMS	O
(	O
(	O
char	O
*	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
char	O
*	O
history_find_word	(*(char),int)->(*(char))
PARAMS	O
(	O
(	O
char	O
*	O
,	O
int	O
)	O
)	O
;	O
static	O
char	O
*	O
quote_breaks	(*(char))->(*(char))
PARAMS	O
(	O
(	O
char	O
*	O
)	O
)	O
;	O
char	O
history_expansion_char	char
=	O
'!'	O
;	O
char	O
history_subst_char	char
=	O
'^'	O
;	O
char	O
history_comment_char	char
=	O
'\0'	O
;	O
char	O
*	O
history_no_expand_chars	*(char)
=	O
" \t\n\r="	*(char)
;	O
int	O
history_quotes_inhibit_expansion	int
=	O
0	int
;	O
char	O
*	O
history_word_delimiters	*(char)
=	O
HISTORY_WORD_DELIMITERS	*(char)
;	O
rl_linebuf_func_t	(*(char),int)->(int)
*	O
history_inhibit_expansion_function	*((*(char),int)->(int))
;	O
static	O
char	O
*	O
search_string	*(char)
;	O
static	O
char	O
*	O
search_match	*(char)
;	O
char	O
*	O
get_history_event	(*(char),*(int),int)->(*(char))
(	O
string	*(char)
,	O
caller_index	*(int)
,	O
delimiting_quote	int
)	O
const	O
char	O
*	O
string	*(char)
;	O
int	O
*	O
caller_index	*(int)
;	O
int	O
delimiting_quote	int
;	O
{	O
register	O
int	O
i	int
;	O
register	O
char	O
c	char
;	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
entry	*(struct(*(char),*(char),*(void)))
;	O
int	O
which	int
,	O
sign	int
,	O
local_index	int
,	O
substring_okay	int
;	O
_hist_search_func_t	(*(char),int)->(int)
*	O
search_func	*((*(char),int)->(int))
;	O
char	O
*	O
temp	*(char)
;	O
i	int
=	O
*	O
caller_index	*(int)
;	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
!=	O
history_expansion_char	char
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
i	int
++	O
;	O
sign	int
=	O
1	int
;	O
substring_okay	int
=	O
0	int
;	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
history_expansion_char	char
)	O
{	O
i	int
++	O
;	O
which	int
=	O
history_base	int
+	O
(	O
history_length	int
-	O
1	int
)	O
;	O
*	O
caller_index	*(int)
=	O
i	int
;	O
RETURN_ENTRY	O
(	O
entry	*(struct(*(char),*(char),*(void)))
,	O
which	int
)	O
;	O
}	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'-'	O
)	O
{	O
sign	int
=	O
-	O
1	int
;	O
i	int
++	O
;	O
}	O
if	O
(	O
_rl_digit_p	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
)	O
{	O
for	O
(	O
which	int
=	O
0	int
;	O
_rl_digit_p	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
which	int
=	O
(	O
which	int
*	O
10	int
)	O
+	O
_rl_digit_value	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
*	O
caller_index	*(int)
=	O
i	int
;	O
if	O
(	O
sign	int
<	O
0	int
)	O
which	int
=	O
(	O
history_length	int
+	O
history_base	int
)	O
-	O
which	int
;	O
RETURN_ENTRY	O
(	O
entry	*(struct(*(char),*(char),*(void)))
,	O
which	int
)	O
;	O
}	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'?'	O
)	O
{	O
substring_okay	int
++	O
;	O
i	int
++	O
;	O
}	O
for	O
(	O
local_index	int
=	O
i	int
;	O
c	char
=	O
string	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
int	O
v	int
;	O
mbstate_t	struct(int,union(int,array(char)))
ps	struct(int,union(int,array(char)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
_rl_adjust_point	(*(char),int,*(struct(int,union(int,array(char)))))->(int)
(	O
(	O
char	O
*	O
)	O
string	*(char)
,	O
i	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
;	O
if	O
(	O
(	O
v	int
=	O
_rl_get_char_len	(*(char),*(struct(int,union(int,array(char)))))->(int)
(	O
(	O
char	O
*	O
)	O
string	*(char)
+	O
i	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
)	O
>	O
1	int
)	O
{	O
i	int
+=	O
v	int
-	O
1	int
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
substring_okay	int
&&	O
(	O
whitespace	O
(	O
c	char
)	O
||	O
c	char
==	O
':'	O
||	O
(	O
history_event_delimiter_chars	*(char)
&&	O
member	O
(	O
c	char
,	O
history_event_delimiter_chars	*(char)
)	O
)	O
||	O
(	O
history_search_delimiter_chars	*(char)
&&	O
member	O
(	O
c	char
,	O
history_search_delimiter_chars	*(char)
)	O
)	O
||	O
string	*(char)
[	O
i	int
]	O
==	O
delimiting_quote	int
)	O
)	O
||	O
string	*(char)
[	O
i	int
]	O
==	O
'\n'	O
||	O
(	O
substring_okay	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'?'	O
)	O
)	O
break	O
;	O
}	O
which	int
=	O
i	int
-	O
local_index	int
;	O
temp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
which	int
)	O
;	O
if	O
(	O
which	int
)	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
temp	*(char)
,	O
string	*(char)
+	O
local_index	int
,	O
which	int
)	O
;	O
temp	*(char)
[	O
which	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
substring_okay	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'?'	O
)	O
i	int
++	O
;	O
*	O
caller_index	*(int)
=	O
i	int
;	O
if	O
(	O
*	O
temp	*(char)
==	O
'\0'	O
&&	O
substring_okay	int
)	O
{	O
if	O
(	O
search_string	*(char)
)	O
{	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
temp	*(char)
=	O
savestring	O
(	O
search_string	*(char)
)	O
;	O
}	O
else	O
FAIL_SEARCH	O
(	O
)	O
;	O
}	O
search_func	*((*(char),int)->(int))
=	O
substring_okay	int
?	O
history_search	(*(char),int)->(int)
:	O
history_search_prefix	(*(char),int)->(int)
;	O
while	O
(	O
1	int
)	O
{	O
local_index	int
=	O
(	O
*	O
search_func	*((*(char),int)->(int))
)	O
(	O
temp	*(char)
,	O
-	O
1	int
)	O
;	O
if	O
(	O
local_index	int
<	O
0	int
)	O
FAIL_SEARCH	O
(	O
)	O
;	O
if	O
(	O
local_index	int
==	O
0	int
||	O
substring_okay	int
)	O
{	O
entry	*(struct(*(char),*(char),*(void)))
=	O
current_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),*(void)))
==	O
0	int
)	O
FAIL_SEARCH	O
(	O
)	O
;	O
history_offset	int
=	O
history_length	int
;	O
if	O
(	O
substring_okay	int
)	O
{	O
FREE	O
(	O
search_string	*(char)
)	O
;	O
search_string	*(char)
=	O
temp	*(char)
;	O
FREE	O
(	O
search_match	*(char)
)	O
;	O
search_match	*(char)
=	O
history_find_word	(*(char),int)->(*(char))
(	O
entry	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
,	O
local_index	int
)	O
;	O
}	O
else	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
return	O
(	O
entry	*(struct(*(char),*(char),*(void)))
->	O
line	*(char)
)	O
;	O
}	O
if	O
(	O
history_offset	int
)	O
history_offset	int
--	O
;	O
else	O
FAIL_SEARCH	O
(	O
)	O
;	O
}	O
}	O
static	O
void	O
hist_string_extract_single_quoted	(*(char),*(int),int)->(void)
(	O
string	*(char)
,	O
sindex	*(int)
,	O
flags	int
)	O
char	O
*	O
string	*(char)
;	O
int	O
*	O
sindex	*(int)
,	O
flags	int
;	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
*	O
sindex	*(int)
;	O
string	*(char)
[	O
i	int
]	O
&&	O
string	*(char)
[	O
i	int
]	O
!=	O
'\''	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
flags	int
&	O
1	int
)	O
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'\\'	O
&&	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
)	O
i	int
++	O
;	O
}	O
*	O
sindex	*(int)
=	O
i	int
;	O
}	O
static	O
char	O
*	O
quote_breaks	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
register	O
char	O
*	O
p	*(char)
,	O
*	O
r	*(char)
;	O
char	O
*	O
ret	*(char)
;	O
int	O
len	int
=	O
3	int
;	O
for	O
(	O
p	*(char)
=	O
s	*(char)
;	O
p	*(char)
&&	O
*	O
p	*(char)
;	O
p	*(char)
++	O
,	O
len	int
++	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\''	O
)	O
len	int
+=	O
3	int
;	O
else	O
if	O
(	O
whitespace	O
(	O
*	O
p	*(char)
)	O
||	O
*	O
p	*(char)
==	O
'\n'	O
)	O
len	int
+=	O
2	int
;	O
}	O
r	*(char)
=	O
ret	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
len	int
)	O
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
for	O
(	O
p	*(char)
=	O
s	*(char)
;	O
p	*(char)
&&	O
*	O
p	*(char)
;	O
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'\''	O
)	O
{	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
*	O
r	*(char)
++	O
=	O
'\\'	O
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
p	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
whitespace	O
(	O
*	O
p	*(char)
)	O
||	O
*	O
p	*(char)
==	O
'\n'	O
)	O
{	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
*	O
r	*(char)
++	O
=	O
*	O
p	*(char)
++	O
;	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
}	O
else	O
*	O
r	*(char)
++	O
=	O
*	O
p	*(char)
++	O
;	O
}	O
*	O
r	*(char)
++	O
=	O
'\''	O
;	O
*	O
r	*(char)
=	O
'\0'	O
;	O
return	O
ret	*(char)
;	O
}	O
static	O
char	O
*	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
s	*(char)
,	O
start	int
,	O
current	int
,	O
errtype	int
)	O
char	O
*	O
s	*(char)
;	O
int	O
start	int
,	O
current	int
,	O
errtype	int
;	O
{	O
char	O
*	O
temp	*(char)
;	O
const	O
char	O
*	O
emsg	*(char)
;	O
int	O
ll	int
,	O
elen	int
;	O
ll	int
=	O
current	int
-	O
start	int
;	O
switch	O
(	O
errtype	int
)	O
{	O
case	O
EVENT_NOT_FOUND	int
:	O
emsg	*(char)
=	O
"event not found"	*(char)
;	O
elen	int
=	O
15	int
;	O
break	O
;	O
case	O
BAD_WORD_SPEC	int
:	O
emsg	*(char)
=	O
"bad word specifier"	*(char)
;	O
elen	int
=	O
18	int
;	O
break	O
;	O
case	O
SUBST_FAILED	int
:	O
emsg	*(char)
=	O
"substitution failed"	*(char)
;	O
elen	int
=	O
19	int
;	O
break	O
;	O
case	O
BAD_MODIFIER	int
:	O
emsg	*(char)
=	O
"unrecognized history modifier"	*(char)
;	O
elen	int
=	O
29	int
;	O
break	O
;	O
case	O
NO_PREV_SUBST	int
:	O
emsg	*(char)
=	O
"no previous substitution"	*(char)
;	O
elen	int
=	O
24	int
;	O
break	O
;	O
default	O
:	O
emsg	*(char)
=	O
"unknown expansion error"	*(char)
;	O
elen	int
=	O
23	int
;	O
break	O
;	O
}	O
temp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
ll	int
+	O
elen	int
+	O
3	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
temp	*(char)
,	O
s	*(char)
+	O
start	int
,	O
ll	int
)	O
;	O
temp	*(char)
[	O
ll	int
]	O
=	O
':'	O
;	O
temp	*(char)
[	O
ll	int
+	O
1	int
]	O
=	O
' '	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp	*(char)
+	O
ll	int
+	O
2	int
,	O
emsg	*(char)
)	O
;	O
return	O
(	O
temp	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
get_subst_pattern	(*(char),*(int),int,int,*(int))->(*(char))
(	O
str	*(char)
,	O
iptr	*(int)
,	O
delimiter	int
,	O
is_rhs	int
,	O
lenptr	*(int)
)	O
char	O
*	O
str	*(char)
;	O
int	O
*	O
iptr	*(int)
,	O
delimiter	int
,	O
is_rhs	int
,	O
*	O
lenptr	*(int)
;	O
{	O
register	O
int	O
si	int
,	O
i	int
,	O
j	int
,	O
k	int
;	O
char	O
*	O
s	*(char)
;	O
mbstate_t	struct(int,union(int,array(char)))
ps	struct(int,union(int,array(char)))
;	O
s	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
i	int
=	O
*	O
iptr	*(int)
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
_rl_adjust_point	(*(char),int,*(struct(int,union(int,array(char)))))->(int)
(	O
str	*(char)
,	O
i	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
;	O
for	O
(	O
si	int
=	O
i	int
;	O
str	*(char)
[	O
si	int
]	O
&&	O
str	*(char)
[	O
si	int
]	O
!=	O
delimiter	int
;	O
si	int
++	O
)	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
int	O
v	int
;	O
if	O
(	O
(	O
v	int
=	O
_rl_get_char_len	(*(char),*(struct(int,union(int,array(char)))))->(int)
(	O
str	*(char)
+	O
si	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
)	O
>	O
1	int
)	O
si	int
+=	O
v	int
-	O
1	int
;	O
else	O
if	O
(	O
str	*(char)
[	O
si	int
]	O
==	O
'\\'	O
&&	O
str	*(char)
[	O
si	int
+	O
1	int
]	O
==	O
delimiter	int
)	O
si	int
++	O
;	O
}	O
else	O
if	O
(	O
str	*(char)
[	O
si	int
]	O
==	O
'\\'	O
&&	O
str	*(char)
[	O
si	int
+	O
1	int
]	O
==	O
delimiter	int
)	O
si	int
++	O
;	O
if	O
(	O
si	int
>	O
i	int
||	O
is_rhs	int
)	O
{	O
s	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
si	int
-	O
i	int
+	O
1	int
)	O
;	O
for	O
(	O
j	int
=	O
0	int
,	O
k	int
=	O
i	int
;	O
k	int
<	O
si	int
;	O
j	int
++	O
,	O
k	int
++	O
)	O
{	O
if	O
(	O
str	*(char)
[	O
k	int
]	O
==	O
'\\'	O
&&	O
str	*(char)
[	O
k	int
+	O
1	int
]	O
==	O
delimiter	int
)	O
k	int
++	O
;	O
s	*(char)
[	O
j	int
]	O
=	O
str	*(char)
[	O
k	int
]	O
;	O
}	O
s	*(char)
[	O
j	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
lenptr	*(int)
)	O
*	O
lenptr	*(int)
=	O
j	int
;	O
}	O
i	int
=	O
si	int
;	O
if	O
(	O
str	*(char)
[	O
i	int
]	O
)	O
i	int
++	O
;	O
*	O
iptr	*(int)
=	O
i	int
;	O
return	O
s	*(char)
;	O
}	O
static	O
void	O
postproc_subst_rhs	()->(void)
(	O
)	O
{	O
char	O
*	O
new	*(char)
;	O
int	O
i	int
,	O
j	int
,	O
new_size	int
;	O
new	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
new_size	int
=	O
subst_rhs_len	int
+	O
subst_lhs_len	int
)	O
;	O
for	O
(	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
subst_rhs_len	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
subst_rhs	*(char)
[	O
i	int
]	O
==	O
'&'	O
)	O
{	O
if	O
(	O
j	int
+	O
subst_lhs_len	int
>=	O
new_size	int
)	O
new	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
new	*(char)
,	O
(	O
new_size	int
=	O
new_size	int
*	O
2	int
+	O
subst_lhs_len	int
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
new	*(char)
+	O
j	int
,	O
subst_lhs	*(char)
)	O
;	O
j	int
+=	O
subst_lhs_len	int
;	O
}	O
else	O
{	O
if	O
(	O
subst_rhs	*(char)
[	O
i	int
]	O
==	O
'\\'	O
&&	O
subst_rhs	*(char)
[	O
i	int
+	O
1	int
]	O
==	O
'&'	O
)	O
i	int
++	O
;	O
if	O
(	O
j	int
>=	O
new_size	int
)	O
new	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
new	*(char)
,	O
new_size	int
*=	O
2	int
)	O
;	O
new	*(char)
[	O
j	int
++	O
]	O
=	O
subst_rhs	*(char)
[	O
i	int
]	O
;	O
}	O
}	O
new	*(char)
[	O
j	int
]	O
=	O
'\0'	O
;	O
xfree	(*(void))->(void)
(	O
subst_rhs	*(char)
)	O
;	O
subst_rhs	*(char)
=	O
new	*(char)
;	O
subst_rhs_len	int
=	O
j	int
;	O
}	O
static	O
int	O
history_expand_internal	(*(char),int,int,*(int),*(*(char)),*(char))->(int)
(	O
string	*(char)
,	O
start	int
,	O
qc	int
,	O
end_index_ptr	*(int)
,	O
ret_string	*(*(char))
,	O
current_line	*(char)
)	O
char	O
*	O
string	*(char)
;	O
int	O
start	int
,	O
qc	int
,	O
*	O
end_index_ptr	*(int)
;	O
char	O
*	O
*	O
ret_string	*(*(char))
;	O
char	O
*	O
current_line	*(char)
;	O
{	O
int	O
i	int
,	O
n	int
,	O
starting_index	int
;	O
int	O
substitute_globally	int
,	O
subst_bywords	int
,	O
want_quotes	int
,	O
print_only	int
;	O
char	O
*	O
event	*(char)
,	O
*	O
temp	*(char)
,	O
*	O
result	*(char)
,	O
*	O
tstr	*(char)
,	O
*	O
t	*(char)
,	O
c	char
,	O
*	O
word_spec	*(char)
;	O
int	O
result_len	int
;	O
mbstate_t	struct(int,union(int,array(char)))
ps	struct(int,union(int,array(char)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
result_len	int
=	O
128	int
)	O
;	O
i	int
=	O
start	int
;	O
if	O
(	O
member	O
(	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
,	O
":$*%^"	*(char)
)	O
)	O
{	O
char	O
fake_s	array(char)
[	O
3	int
]	O
;	O
int	O
fake_i	int
=	O
0	int
;	O
i	int
++	O
;	O
fake_s	array(char)
[	O
0	int
]	O
=	O
fake_s	array(char)
[	O
1	int
]	O
=	O
history_expansion_char	char
;	O
fake_s	array(char)
[	O
2	int
]	O
=	O
'\0'	O
;	O
event	*(char)
=	O
get_history_event	(*(char),*(int),int)->(*(char))
(	O
fake_s	array(char)
,	O
&	O
fake_i	int
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
==	O
'#'	O
)	O
{	O
i	int
+=	O
2	int
;	O
event	*(char)
=	O
current_line	*(char)
;	O
}	O
else	O
event	*(char)
=	O
get_history_event	(*(char),*(int),int)->(*(char))
(	O
string	*(char)
,	O
&	O
i	int
,	O
qc	int
)	O
;	O
if	O
(	O
event	*(char)
==	O
0	int
)	O
{	O
*	O
ret_string	*(*(char))
=	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
string	*(char)
,	O
start	int
,	O
i	int
,	O
EVENT_NOT_FOUND	int
)	O
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
starting_index	int
=	O
i	int
;	O
word_spec	*(char)
=	O
get_history_word_specifier	(*(char),*(char),*(int))->(*(char))
(	O
string	*(char)
,	O
event	*(char)
,	O
&	O
i	int
)	O
;	O
if	O
(	O
word_spec	*(char)
==	O
(	O
char	O
*	O
)	O
&	O
error_pointer	char
)	O
{	O
*	O
ret_string	*(*(char))
=	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
string	*(char)
,	O
starting_index	int
,	O
i	int
,	O
BAD_WORD_SPEC	int
)	O
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
temp	*(char)
=	O
word_spec	*(char)
?	O
savestring	O
(	O
word_spec	*(char)
)	O
:	O
savestring	O
(	O
event	*(char)
)	O
;	O
FREE	O
(	O
word_spec	*(char)
)	O
;	O
want_quotes	int
=	O
substitute_globally	int
=	O
subst_bywords	int
=	O
print_only	int
=	O
0	int
;	O
starting_index	int
=	O
i	int
;	O
while	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
':'	O
)	O
{	O
c	char
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
c	char
==	O
'g'	O
||	O
c	char
==	O
'a'	O
)	O
{	O
substitute_globally	int
=	O
1	int
;	O
i	int
++	O
;	O
c	char
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
}	O
else	O
if	O
(	O
c	char
==	O
'G'	O
)	O
{	O
subst_bywords	int
=	O
1	int
;	O
i	int
++	O
;	O
c	char
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
}	O
switch	O
(	O
c	char
)	O
{	O
default	O
:	O
*	O
ret_string	*(*(char))
=	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
string	*(char)
,	O
i	int
+	O
1	int
,	O
i	int
+	O
2	int
,	O
BAD_MODIFIER	int
)	O
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
case	O
'q'	O
:	O
want_quotes	int
=	O
'q'	O
;	O
break	O
;	O
case	O
'x'	O
:	O
want_quotes	int
=	O
'x'	O
;	O
break	O
;	O
case	O
'p'	O
:	O
print_only	int
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
tstr	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
temp	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
tstr	*(char)
)	O
{	O
tstr	*(char)
++	O
;	O
t	*(char)
=	O
savestring	O
(	O
tstr	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
temp	*(char)
=	O
t	*(char)
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
tstr	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
temp	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
tstr	*(char)
)	O
*	O
tstr	*(char)
=	O
'\0'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
tstr	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
temp	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
tstr	*(char)
)	O
*	O
tstr	*(char)
=	O
'\0'	O
;	O
break	O
;	O
case	O
'e'	O
:	O
tstr	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
temp	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
tstr	*(char)
)	O
{	O
t	*(char)
=	O
savestring	O
(	O
tstr	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
temp	*(char)
=	O
t	*(char)
;	O
}	O
break	O
;	O
case	O
'&'	O
:	O
case	O
's'	O
:	O
{	O
char	O
*	O
new_event	*(char)
;	O
int	O
delimiter	int
,	O
failed	int
,	O
si	int
,	O
l_temp	int
,	O
ws	int
,	O
we	int
;	O
if	O
(	O
c	char
==	O
's'	O
)	O
{	O
if	O
(	O
i	int
+	O
2	int
<	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
)	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
_rl_adjust_point	(*(char),int,*(struct(int,union(int,array(char)))))->(int)
(	O
string	*(char)
,	O
i	int
+	O
2	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
;	O
if	O
(	O
_rl_get_char_len	(*(char),*(struct(int,union(int,array(char)))))->(int)
(	O
string	*(char)
+	O
i	int
+	O
2	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
>	O
1	int
)	O
delimiter	int
=	O
0	int
;	O
else	O
delimiter	int
=	O
string	*(char)
[	O
i	int
+	O
2	int
]	O
;	O
}	O
else	O
delimiter	int
=	O
string	*(char)
[	O
i	int
+	O
2	int
]	O
;	O
}	O
else	O
break	O
;	O
i	int
+=	O
3	int
;	O
t	*(char)
=	O
get_subst_pattern	(*(char),*(int),int,int,*(int))->(*(char))
(	O
string	*(char)
,	O
&	O
i	int
,	O
delimiter	int
,	O
0	int
,	O
&	O
subst_lhs_len	int
)	O
;	O
if	O
(	O
t	*(char)
)	O
{	O
FREE	O
(	O
subst_lhs	*(char)
)	O
;	O
subst_lhs	*(char)
=	O
t	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
subst_lhs	*(char)
)	O
{	O
if	O
(	O
search_string	*(char)
&&	O
*	O
search_string	*(char)
)	O
{	O
subst_lhs	*(char)
=	O
savestring	O
(	O
search_string	*(char)
)	O
;	O
subst_lhs_len	int
=	O
strlen	(*(char))->(long)
(	O
subst_lhs	*(char)
)	O
;	O
}	O
else	O
{	O
subst_lhs	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
subst_lhs_len	int
=	O
0	int
;	O
}	O
}	O
FREE	O
(	O
subst_rhs	*(char)
)	O
;	O
subst_rhs	*(char)
=	O
get_subst_pattern	(*(char),*(int),int,int,*(int))->(*(char))
(	O
string	*(char)
,	O
&	O
i	int
,	O
delimiter	int
,	O
1	int
,	O
&	O
subst_rhs_len	int
)	O
;	O
if	O
(	O
member	O
(	O
'&'	O
,	O
subst_rhs	*(char)
)	O
)	O
postproc_subst_rhs	()->(void)
(	O
)	O
;	O
}	O
else	O
i	int
+=	O
2	int
;	O
if	O
(	O
subst_lhs_len	int
==	O
0	int
)	O
{	O
*	O
ret_string	*(*(char))
=	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
string	*(char)
,	O
starting_index	int
,	O
i	int
,	O
NO_PREV_SUBST	int
)	O
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
l_temp	int
=	O
strlen	(*(char))->(long)
(	O
temp	*(char)
)	O
;	O
if	O
(	O
subst_lhs_len	int
>	O
l_temp	int
)	O
{	O
*	O
ret_string	*(*(char))
=	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
string	*(char)
,	O
starting_index	int
,	O
i	int
,	O
SUBST_FAILED	int
)	O
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
si	int
=	O
we	int
=	O
0	int
;	O
for	O
(	O
failed	int
=	O
1	int
;	O
(	O
si	int
+	O
subst_lhs_len	int
)	O
<=	O
l_temp	int
;	O
si	int
++	O
)	O
{	O
if	O
(	O
subst_bywords	int
&&	O
si	int
>	O
we	int
)	O
{	O
for	O
(	O
;	O
temp	*(char)
[	O
si	int
]	O
&&	O
whitespace	O
(	O
temp	*(char)
[	O
si	int
]	O
)	O
;	O
si	int
++	O
)	O
;	O
ws	int
=	O
si	int
;	O
we	int
=	O
history_tokenize_word	(*(char),int)->(int)
(	O
temp	*(char)
,	O
si	int
)	O
;	O
}	O
if	O
(	O
STREQN	O
(	O
temp	*(char)
+	O
si	int
,	O
subst_lhs	*(char)
,	O
subst_lhs_len	int
)	O
)	O
{	O
int	O
len	int
=	O
subst_rhs_len	int
-	O
subst_lhs_len	int
+	O
l_temp	int
;	O
new_event	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
1	int
+	O
len	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
new_event	*(char)
,	O
temp	*(char)
,	O
si	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
new_event	*(char)
+	O
si	int
,	O
subst_rhs	*(char)
,	O
subst_rhs_len	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
new_event	*(char)
+	O
si	int
+	O
subst_rhs_len	int
,	O
temp	*(char)
+	O
si	int
+	O
subst_lhs_len	int
,	O
l_temp	int
-	O
(	O
si	int
+	O
subst_lhs_len	int
)	O
)	O
;	O
new_event	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
temp	*(char)
=	O
new_event	*(char)
;	O
failed	int
=	O
0	int
;	O
if	O
(	O
substitute_globally	int
)	O
{	O
si	int
+=	O
subst_rhs_len	int
-	O
1	int
;	O
l_temp	int
=	O
strlen	(*(char))->(long)
(	O
temp	*(char)
)	O
;	O
substitute_globally	int
++	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
subst_bywords	int
)	O
{	O
si	int
=	O
we	int
;	O
l_temp	int
=	O
strlen	(*(char))->(long)
(	O
temp	*(char)
)	O
;	O
continue	O
;	O
}	O
else	O
break	O
;	O
}	O
}	O
if	O
(	O
substitute_globally	int
>	O
1	int
)	O
{	O
substitute_globally	int
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
failed	int
==	O
0	int
)	O
continue	O
;	O
*	O
ret_string	*(*(char))
=	O
hist_error	(*(char),int,int,int)->(*(char))
(	O
string	*(char)
,	O
starting_index	int
,	O
i	int
,	O
SUBST_FAILED	int
)	O
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
}	O
i	int
+=	O
2	int
;	O
}	O
--	O
i	int
;	O
if	O
(	O
want_quotes	int
)	O
{	O
char	O
*	O
x	*(char)
;	O
if	O
(	O
want_quotes	int
==	O
'q'	O
)	O
x	*(char)
=	O
sh_single_quote	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
else	O
if	O
(	O
want_quotes	int
==	O
'x'	O
)	O
x	*(char)
=	O
quote_breaks	(*(char))->(*(char))
(	O
temp	*(char)
)	O
;	O
else	O
x	*(char)
=	O
savestring	O
(	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
temp	*(char)
=	O
x	*(char)
;	O
}	O
n	int
=	O
strlen	(*(char))->(long)
(	O
temp	*(char)
)	O
;	O
if	O
(	O
n	int
>=	O
result_len	int
)	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
result	*(char)
,	O
n	int
+	O
2	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	*(char)
,	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
*	O
end_index_ptr	*(int)
=	O
i	int
;	O
*	O
ret_string	*(*(char))
=	O
result	*(char)
;	O
return	O
(	O
print_only	int
)	O
;	O
}	O
int	O
history_expand	(*(char),*(*(char)))->(int)
(	O
hstring	*(char)
,	O
output	*(*(char))
)	O
char	O
*	O
hstring	*(char)
;	O
char	O
*	O
*	O
output	*(*(char))
;	O
{	O
register	O
int	O
j	int
;	O
int	O
i	int
,	O
r	*(char)
,	O
l	int
,	O
passc	int
,	O
cc	int
,	O
modified	int
,	O
eindex	int
,	O
only_printing	int
,	O
dquote	int
,	O
squote	int
,	O
flag	int
;	O
char	O
*	O
string	*(char)
;	O
int	O
result_len	int
;	O
char	O
*	O
result	*(char)
;	O
char	O
mb	array(char)
[	O
MB_LEN_MAX	int
]	O
;	O
mbstate_t	struct(int,union(int,array(char)))
ps	struct(int,union(int,array(char)))
;	O
char	O
*	O
temp	*(char)
;	O
if	O
(	O
output	*(*(char))
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
history_expansion_char	char
==	O
0	int
)	O
{	O
*	O
output	*(*(char))
=	O
savestring	O
(	O
hstring	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
result_len	int
=	O
256	int
)	O
;	O
result	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
only_printing	int
=	O
modified	int
=	O
0	int
;	O
l	int
=	O
strlen	(*(char))->(long)
(	O
hstring	*(char)
)	O
;	O
if	O
(	O
hstring	*(char)
[	O
0	int
]	O
==	O
history_subst_char	char
)	O
{	O
string	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
l	int
+	O
5	int
)	O
;	O
string	*(char)
[	O
0	int
]	O
=	O
string	*(char)
[	O
1	int
]	O
=	O
history_expansion_char	char
;	O
string	*(char)
[	O
2	int
]	O
=	O
':'	O
;	O
string	*(char)
[	O
3	int
]	O
=	O
's'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
string	*(char)
+	O
4	int
,	O
hstring	*(char)
)	O
;	O
l	int
+=	O
4	int
;	O
}	O
else	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
string	*(char)
=	O
hstring	*(char)
;	O
for	O
(	O
i	int
=	O
dquote	int
=	O
squote	int
=	O
0	int
;	O
string	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
int	O
v	int
;	O
v	int
=	O
_rl_get_char_len	(*(char),*(struct(int,union(int,array(char)))))->(int)
(	O
string	*(char)
+	O
i	int
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
;	O
if	O
(	O
v	int
>	O
1	int
)	O
{	O
i	int
+=	O
v	int
-	O
1	int
;	O
continue	O
;	O
}	O
}	O
cc	int
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
history_comment_char	char
&&	O
string	*(char)
[	O
i	int
]	O
==	O
history_comment_char	char
&&	O
dquote	int
==	O
0	int
&&	O
(	O
i	int
==	O
0	int
||	O
member	O
(	O
string	*(char)
[	O
i	int
-	O
1	int
]	O
,	O
history_word_delimiters	*(char)
)	O
)	O
)	O
{	O
while	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
i	int
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
history_expansion_char	char
)	O
{	O
if	O
(	O
cc	int
==	O
0	int
||	O
member	O
(	O
cc	int
,	O
history_no_expand_chars	*(char)
)	O
)	O
continue	O
;	O
else	O
if	O
(	O
dquote	int
&&	O
cc	int
==	O
'"'	O
)	O
continue	O
;	O
else	O
if	O
(	O
history_inhibit_expansion_function	*((*(char),int)->(int))
&&	O
(	O
*	O
history_inhibit_expansion_function	*((*(char),int)->(int))
)	O
(	O
string	*(char)
,	O
i	int
)	O
)	O
continue	O
;	O
else	O
break	O
;	O
}	O
else	O
if	O
(	O
dquote	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'\\'	O
&&	O
cc	int
==	O
'"'	O
)	O
i	int
++	O
;	O
else	O
if	O
(	O
history_quotes_inhibit_expansion	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'"'	O
)	O
{	O
dquote	int
=	O
1	int
-	O
dquote	int
;	O
}	O
else	O
if	O
(	O
dquote	int
==	O
0	int
&&	O
history_quotes_inhibit_expansion	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'\''	O
)	O
{	O
flag	int
=	O
(	O
i	int
>	O
0	int
&&	O
string	*(char)
[	O
i	int
-	O
1	int
]	O
==	O
'$'	O
)	O
;	O
i	int
++	O
;	O
hist_string_extract_single_quoted	(*(char),*(int),int)->(void)
(	O
string	*(char)
,	O
&	O
i	int
,	O
flag	int
)	O
;	O
}	O
else	O
if	O
(	O
history_quotes_inhibit_expansion	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
cc	int
==	O
'\''	O
||	O
cc	int
==	O
history_expansion_char	char
)	O
i	int
++	O
;	O
}	O
}	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
!=	O
history_expansion_char	char
)	O
{	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
*	O
output	*(*(char))
=	O
savestring	O
(	O
string	*(char)
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
}	O
for	O
(	O
passc	int
=	O
dquote	int
=	O
squote	int
=	O
i	int
=	O
j	int
=	O
0	int
;	O
i	int
<	O
l	int
;	O
i	int
++	O
)	O
{	O
int	O
qc	int
,	O
tchar	int
=	O
string	*(char)
[	O
i	int
]	O
;	O
if	O
(	O
passc	int
)	O
{	O
passc	int
=	O
0	int
;	O
ADD_CHAR	O
(	O
tchar	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
rl_byte_oriented	int
==	O
0	int
)	O
{	O
int	O
k	int
,	O
c	char
;	O
c	char
=	O
tchar	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
mb	array(char)
,	O
0	int
,	O
sizeof	O
(	O
mb	array(char)
)	O
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
MB_LEN_MAX	int
;	O
k	int
++	O
)	O
{	O
mb	array(char)
[	O
k	int
]	O
=	O
(	O
char	O
)	O
c	char
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ps	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
if	O
(	O
_rl_get_char_len	(*(char),*(struct(int,union(int,array(char)))))->(int)
(	O
mb	array(char)
,	O
&	O
ps	struct(int,union(int,array(char)))
)	O
==	O
-	O
2	int
)	O
c	char
=	O
string	*(char)
[	O
++	O
i	int
]	O
;	O
else	O
break	O
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
mb	array(char)
)	O
>	O
1	int
)	O
{	O
ADD_STRING	O
(	O
mb	array(char)
)	O
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
tchar	int
==	O
history_expansion_char	char
)	O
tchar	int
=	O
-	O
3	int
;	O
else	O
if	O
(	O
tchar	int
==	O
history_comment_char	char
)	O
tchar	int
=	O
-	O
2	int
;	O
switch	O
(	O
tchar	int
)	O
{	O
default	O
:	O
ADD_CHAR	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
'\\'	O
:	O
passc	int
++	O
;	O
ADD_CHAR	O
(	O
tchar	int
)	O
;	O
break	O
;	O
case	O
'"'	O
:	O
dquote	int
=	O
1	int
-	O
dquote	int
;	O
ADD_CHAR	O
(	O
tchar	int
)	O
;	O
break	O
;	O
case	O
'\''	O
:	O
{	O
if	O
(	O
squote	int
)	O
{	O
squote	int
=	O
0	int
;	O
ADD_CHAR	O
(	O
tchar	int
)	O
;	O
}	O
else	O
if	O
(	O
dquote	int
==	O
0	int
&&	O
history_quotes_inhibit_expansion	int
)	O
{	O
int	O
quote	int
,	O
slen	int
;	O
flag	int
=	O
(	O
i	int
>	O
0	int
&&	O
string	*(char)
[	O
i	int
-	O
1	int
]	O
==	O
'$'	O
)	O
;	O
quote	int
=	O
i	int
++	O
;	O
hist_string_extract_single_quoted	(*(char),*(int),int)->(void)
(	O
string	*(char)
,	O
&	O
i	int
,	O
flag	int
)	O
;	O
slen	int
=	O
i	int
-	O
quote	int
+	O
2	int
;	O
temp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
slen	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
temp	*(char)
,	O
string	*(char)
+	O
quote	int
,	O
slen	int
)	O
;	O
temp	*(char)
[	O
slen	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
ADD_STRING	O
(	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
dquote	int
==	O
0	int
&&	O
squote	int
==	O
0	int
&&	O
history_quotes_inhibit_expansion	int
==	O
0	int
)	O
{	O
squote	int
=	O
1	int
;	O
ADD_CHAR	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
}	O
else	O
ADD_CHAR	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
case	O
-	O
2	int
:	O
if	O
(	O
(	O
dquote	int
==	O
0	int
||	O
history_quotes_inhibit_expansion	int
==	O
0	int
)	O
&&	O
(	O
i	int
==	O
0	int
||	O
member	O
(	O
string	*(char)
[	O
i	int
-	O
1	int
]	O
,	O
history_word_delimiters	*(char)
)	O
)	O
)	O
{	O
temp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
l	int
-	O
i	int
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
temp	*(char)
,	O
string	*(char)
+	O
i	int
)	O
;	O
ADD_STRING	O
(	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
i	int
=	O
l	int
;	O
}	O
else	O
ADD_CHAR	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
case	O
-	O
3	int
:	O
cc	int
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
cc	int
==	O
0	int
||	O
member	O
(	O
cc	int
,	O
history_no_expand_chars	*(char)
)	O
||	O
(	O
dquote	int
&&	O
cc	int
==	O
'"'	O
)	O
||	O
(	O
history_inhibit_expansion_function	*((*(char),int)->(int))
&&	O
(	O
*	O
history_inhibit_expansion_function	*((*(char),int)->(int))
)	O
(	O
string	*(char)
,	O
i	int
)	O
)	O
)	O
{	O
ADD_CHAR	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
break	O
;	O
}	O
qc	int
=	O
squote	int
?	O
'\''	O
:	O
(	O
dquote	int
?	O
'"'	O
:	O
0	int
)	O
;	O
r	*(char)
=	O
history_expand_internal	(*(char),int,int,*(int),*(*(char)),*(char))->(int)
(	O
string	*(char)
,	O
i	int
,	O
qc	int
,	O
&	O
eindex	int
,	O
&	O
temp	*(char)
,	O
result	*(char)
)	O
;	O
if	O
(	O
r	*(char)
<	O
0	int
)	O
{	O
*	O
output	*(*(char))
=	O
temp	*(char)
;	O
xfree	(*(void))->(void)
(	O
result	*(char)
)	O
;	O
if	O
(	O
string	*(char)
!=	O
hstring	*(char)
)	O
xfree	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
temp	*(char)
)	O
{	O
modified	int
++	O
;	O
if	O
(	O
*	O
temp	*(char)
)	O
ADD_STRING	O
(	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
}	O
only_printing	int
+=	O
r	*(char)
==	O
1	int
;	O
i	int
=	O
eindex	int
;	O
}	O
break	O
;	O
}	O
}	O
*	O
output	*(*(char))
=	O
result	*(char)
;	O
if	O
(	O
string	*(char)
!=	O
hstring	*(char)
)	O
xfree	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
if	O
(	O
only_printing	int
)	O
{	O
return	O
(	O
2	int
)	O
;	O
}	O
return	O
(	O
modified	int
!=	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
get_history_word_specifier	(*(char),*(char),*(int))->(*(char))
(	O
spec	*(char)
,	O
from	*(char)
,	O
caller_index	*(int)
)	O
char	O
*	O
spec	*(char)
,	O
*	O
from	*(char)
;	O
int	O
*	O
caller_index	*(int)
;	O
{	O
register	O
int	O
i	int
=	O
*	O
caller_index	*(int)
;	O
int	O
first	int
,	O
last	int
;	O
int	O
expecting_word_spec	int
=	O
0	int
;	O
char	O
*	O
result	*(char)
;	O
first	int
=	O
last	int
=	O
0	int
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
':'	O
)	O
{	O
i	int
++	O
;	O
expecting_word_spec	int
++	O
;	O
}	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'%'	O
)	O
{	O
*	O
caller_index	*(int)
=	O
i	int
+	O
1	int
;	O
return	O
(	O
search_match	*(char)
?	O
savestring	O
(	O
search_match	*(char)
)	O
:	O
savestring	O
(	O
""	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'*'	O
)	O
{	O
*	O
caller_index	*(int)
=	O
i	int
+	O
1	int
;	O
result	*(char)
=	O
history_arg_extract	(int,int,*(char))->(*(char))
(	O
1	int
,	O
'$'	O
,	O
from	*(char)
)	O
;	O
return	O
(	O
result	*(char)
?	O
result	*(char)
:	O
savestring	O
(	O
""	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'$'	O
)	O
{	O
*	O
caller_index	*(int)
=	O
i	int
+	O
1	int
;	O
return	O
(	O
history_arg_extract	(int,int,*(char))->(*(char))
(	O
'$'	O
,	O
'$'	O
,	O
from	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'-'	O
)	O
first	int
=	O
0	int
;	O
else	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'^'	O
)	O
{	O
first	int
=	O
1	int
;	O
i	int
++	O
;	O
}	O
else	O
if	O
(	O
_rl_digit_p	O
(	O
spec	*(char)
[	O
i	int
]	O
)	O
&&	O
expecting_word_spec	int
)	O
{	O
for	O
(	O
first	int
=	O
0	int
;	O
_rl_digit_p	O
(	O
spec	*(char)
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
first	int
=	O
(	O
first	int
*	O
10	int
)	O
+	O
_rl_digit_value	O
(	O
spec	*(char)
[	O
i	int
]	O
)	O
;	O
}	O
else	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'^'	O
||	O
spec	*(char)
[	O
i	int
]	O
==	O
'*'	O
)	O
{	O
last	int
=	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'^'	O
)	O
?	O
1	int
:	O
'$'	O
;	O
i	int
++	O
;	O
}	O
else	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
!=	O
'-'	O
)	O
last	int
=	O
first	int
;	O
else	O
{	O
i	int
++	O
;	O
if	O
(	O
_rl_digit_p	O
(	O
spec	*(char)
[	O
i	int
]	O
)	O
)	O
{	O
for	O
(	O
last	int
=	O
0	int
;	O
_rl_digit_p	O
(	O
spec	*(char)
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
last	int
=	O
(	O
last	int
*	O
10	int
)	O
+	O
_rl_digit_value	O
(	O
spec	*(char)
[	O
i	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
spec	*(char)
[	O
i	int
]	O
==	O
'$'	O
)	O
{	O
i	int
++	O
;	O
last	int
=	O
'$'	O
;	O
}	O
else	O
last	int
=	O
-	O
1	int
;	O
}	O
*	O
caller_index	*(int)
=	O
i	int
;	O
if	O
(	O
last	int
>=	O
first	int
||	O
last	int
==	O
'$'	O
||	O
last	int
<	O
0	int
)	O
result	*(char)
=	O
history_arg_extract	(int,int,*(char))->(*(char))
(	O
first	int
,	O
last	int
,	O
from	*(char)
)	O
;	O
return	O
(	O
result	*(char)
?	O
result	*(char)
:	O
(	O
char	O
*	O
)	O
&	O
error_pointer	char
)	O
;	O
}	O
char	O
*	O
history_arg_extract	(int,int,*(char))->(*(char))
(	O
first	int
,	O
last	int
,	O
string	*(char)
)	O
int	O
first	int
,	O
last	int
;	O
const	O
char	O
*	O
string	*(char)
;	O
{	O
register	O
int	O
i	int
,	O
len	int
;	O
char	O
*	O
result	*(char)
;	O
int	O
size	int
,	O
offset	long
;	O
char	O
*	O
*	O
list	*(*(char))
;	O
if	O
(	O
(	O
list	*(*(char))
=	O
history_tokenize	(*(char))->(*(*(char)))
(	O
string	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
for	O
(	O
len	int
=	O
0	int
;	O
list	*(*(char))
[	O
len	int
]	O
;	O
len	int
++	O
)	O
;	O
if	O
(	O
last	int
<	O
0	int
)	O
last	int
=	O
len	int
+	O
last	int
-	O
1	int
;	O
if	O
(	O
first	int
<	O
0	int
)	O
first	int
=	O
len	int
+	O
first	int
-	O
1	int
;	O
if	O
(	O
last	int
==	O
'$'	O
)	O
last	int
=	O
len	int
-	O
1	int
;	O
if	O
(	O
first	int
==	O
'$'	O
)	O
first	int
=	O
len	int
-	O
1	int
;	O
last	int
++	O
;	O
if	O
(	O
first	int
>=	O
len	int
||	O
last	int
>	O
len	int
||	O
first	int
<	O
0	int
||	O
last	int
<	O
0	int
||	O
first	int
>	O
last	int
)	O
result	*(char)
=	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
else	O
{	O
for	O
(	O
size	int
=	O
0	int
,	O
i	int
=	O
first	int
;	O
i	int
<	O
last	int
;	O
i	int
++	O
)	O
size	int
+=	O
strlen	(*(char))->(long)
(	O
list	*(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
size	int
+	O
1	int
)	O
;	O
result	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
first	int
,	O
offset	long
=	O
0	int
;	O
i	int
<	O
last	int
;	O
i	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
result	*(char)
+	O
offset	long
,	O
list	*(*(char))
[	O
i	int
]	O
)	O
;	O
offset	long
+=	O
strlen	(*(char))->(long)
(	O
list	*(*(char))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
i	int
+	O
1	int
<	O
last	int
)	O
{	O
result	*(char)
[	O
offset	long
++	O
]	O
=	O
' '	O
;	O
result	*(char)
[	O
offset	long
]	O
=	O
0	int
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
xfree	(*(void))->(void)
(	O
list	*(*(char))
[	O
i	int
]	O
)	O
;	O
xfree	(*(void))->(void)
(	O
list	*(*(char))
)	O
;	O
return	O
(	O
result	*(char)
)	O
;	O
}	O
static	O
int	O
history_tokenize_word	(*(char),int)->(int)
(	O
string	*(char)
,	O
ind	int
)	O
const	O
char	O
*	O
string	*(char)
;	O
int	O
ind	int
;	O
{	O
register	O
int	O
i	int
,	O
j	int
;	O
int	O
delimiter	int
,	O
nestdelim	int
,	O
delimopen	int
;	O
i	int
=	O
ind	int
;	O
delimiter	int
=	O
nestdelim	int
=	O
0	int
;	O
if	O
(	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
"()\n"	*(char)
)	O
)	O
{	O
i	int
++	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
isdigit	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
)	O
{	O
j	int
=	O
i	int
;	O
while	O
(	O
string	*(char)
[	O
j	int
]	O
&&	O
isdigit	O
(	O
string	*(char)
[	O
j	int
]	O
)	O
)	O
j	int
++	O
;	O
if	O
(	O
string	*(char)
[	O
j	int
]	O
==	O
0	int
)	O
return	O
(	O
j	int
)	O
;	O
if	O
(	O
string	*(char)
[	O
j	int
]	O
==	O
'<'	O
||	O
string	*(char)
[	O
j	int
]	O
==	O
'>'	O
)	O
i	int
=	O
j	int
;	O
else	O
{	O
i	int
=	O
j	int
;	O
goto	O
get_word	O
;	O
}	O
}	O
if	O
(	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
"<>;&|$"	*(char)
)	O
)	O
{	O
int	O
peek	int
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
peek	int
==	O
string	*(char)
[	O
i	int
]	O
&&	O
peek	int
!=	O
'$'	O
)	O
{	O
if	O
(	O
peek	int
==	O
'<'	O
&&	O
string	*(char)
[	O
i	int
+	O
2	int
]	O
==	O
'-'	O
)	O
i	int
++	O
;	O
else	O
if	O
(	O
peek	int
==	O
'<'	O
&&	O
string	*(char)
[	O
i	int
+	O
2	int
]	O
==	O
'<'	O
)	O
i	int
++	O
;	O
i	int
+=	O
2	int
;	O
return	O
i	int
;	O
}	O
else	O
if	O
(	O
peek	int
==	O
'&'	O
&&	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'>'	O
||	O
string	*(char)
[	O
i	int
]	O
==	O
'<'	O
)	O
)	O
{	O
j	int
=	O
i	int
+	O
2	int
;	O
while	O
(	O
string	*(char)
[	O
j	int
]	O
&&	O
isdigit	O
(	O
string	*(char)
[	O
j	int
]	O
)	O
)	O
j	int
++	O
;	O
if	O
(	O
string	*(char)
[	O
j	int
]	O
==	O
'-'	O
)	O
j	int
++	O
;	O
return	O
j	int
;	O
}	O
else	O
if	O
(	O
(	O
peek	int
==	O
'>'	O
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'&'	O
)	O
||	O
(	O
peek	int
==	O
'|'	O
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'>'	O
)	O
)	O
{	O
i	int
+=	O
2	int
;	O
return	O
i	int
;	O
}	O
else	O
if	O
(	O
(	O
peek	int
==	O
'('	O
&&	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'>'	O
||	O
string	*(char)
[	O
i	int
]	O
==	O
'<'	O
)	O
)	O
||	O
(	O
peek	int
==	O
'('	O
&&	O
string	*(char)
[	O
i	int
]	O
==	O
'$'	O
)	O
)	O
{	O
i	int
+=	O
2	int
;	O
delimopen	int
=	O
'('	O
;	O
delimiter	int
=	O
')'	O
;	O
nestdelim	int
=	O
1	int
;	O
goto	O
get_word	O
;	O
}	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
!=	O
'$'	O
)	O
{	O
i	int
++	O
;	O
return	O
i	int
;	O
}	O
}	O
if	O
(	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
"!@?+*"	*(char)
)	O
)	O
{	O
int	O
peek	int
=	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
;	O
if	O
(	O
peek	int
==	O
'('	O
)	O
{	O
i	int
+=	O
2	int
;	O
delimopen	int
=	O
'('	O
;	O
delimiter	int
=	O
')'	O
;	O
nestdelim	int
=	O
1	int
;	O
}	O
}	O
get_word	O
:	O
if	O
(	O
delimiter	int
==	O
0	int
&&	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
HISTORY_QUOTE_CHARACTERS	*(char)
)	O
)	O
delimiter	int
=	O
string	*(char)
[	O
i	int
++	O
]	O
;	O
for	O
(	O
;	O
string	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'\\'	O
&&	O
string	*(char)
[	O
i	int
+	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
i	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
'\\'	O
&&	O
delimiter	int
!=	O
'\''	O
&&	O
(	O
delimiter	int
!=	O
'"'	O
||	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
slashify_in_quotes	*(char)
)	O
)	O
)	O
{	O
i	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
nestdelim	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
delimopen	int
)	O
{	O
nestdelim	int
++	O
;	O
continue	O
;	O
}	O
if	O
(	O
nestdelim	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
delimiter	int
)	O
{	O
nestdelim	int
--	O
;	O
if	O
(	O
nestdelim	int
==	O
0	int
)	O
delimiter	int
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
delimiter	int
&&	O
string	*(char)
[	O
i	int
]	O
==	O
delimiter	int
)	O
{	O
delimiter	int
=	O
0	int
;	O
continue	O
;	O
}	O
if	O
(	O
delimiter	int
==	O
0	int
&&	O
(	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
history_word_delimiters	*(char)
)	O
)	O
)	O
break	O
;	O
if	O
(	O
delimiter	int
==	O
0	int
&&	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
HISTORY_QUOTE_CHARACTERS	*(char)
)	O
)	O
delimiter	int
=	O
string	*(char)
[	O
i	int
]	O
;	O
}	O
return	O
i	int
;	O
}	O
static	O
char	O
*	O
history_substring	(*(char),int,int)->(*(char))
(	O
string	*(char)
,	O
start	int
,	O
end	int
)	O
const	O
char	O
*	O
string	*(char)
;	O
int	O
start	int
,	O
end	int
;	O
{	O
register	O
int	O
len	int
;	O
register	O
char	O
*	O
result	*(char)
;	O
len	int
=	O
end	int
-	O
start	int
;	O
result	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
result	*(char)
,	O
string	*(char)
+	O
start	int
,	O
len	int
)	O
;	O
result	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
return	O
result	*(char)
;	O
}	O
static	O
char	O
*	O
*	O
history_tokenize_internal	(*(char),int,*(int))->(*(*(char)))
(	O
string	*(char)
,	O
wind	int
,	O
indp	*(int)
)	O
const	O
char	O
*	O
string	*(char)
;	O
int	O
wind	int
,	O
*	O
indp	*(int)
;	O
{	O
char	O
*	O
*	O
result	*(char)
;	O
register	O
int	O
i	int
,	O
start	int
,	O
result_index	int
,	O
size	int
;	O
if	O
(	O
indp	*(int)
&&	O
wind	int
!=	O
-	O
1	int
)	O
*	O
indp	*(int)
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
result_index	int
=	O
size	int
=	O
0	int
,	O
result	*(char)
=	O
(	O
char	O
*	O
*	O
)	O
NULL	O
;	O
string	*(char)
[	O
i	int
]	O
;	O
)	O
{	O
for	O
(	O
;	O
string	*(char)
[	O
i	int
]	O
&&	O
whitespace	O
(	O
string	*(char)
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
;	O
if	O
(	O
string	*(char)
[	O
i	int
]	O
==	O
0	int
||	O
string	*(char)
[	O
i	int
]	O
==	O
history_comment_char	char
)	O
return	O
(	O
result	*(char)
)	O
;	O
start	int
=	O
i	int
;	O
i	int
=	O
history_tokenize_word	(*(char),int)->(int)
(	O
string	*(char)
,	O
start	int
)	O
;	O
if	O
(	O
i	int
==	O
start	int
&&	O
history_word_delimiters	*(char)
)	O
{	O
i	int
++	O
;	O
while	O
(	O
string	*(char)
[	O
i	int
]	O
&&	O
member	O
(	O
string	*(char)
[	O
i	int
]	O
,	O
history_word_delimiters	*(char)
)	O
)	O
i	int
++	O
;	O
}	O
if	O
(	O
indp	*(int)
&&	O
wind	int
!=	O
-	O
1	int
&&	O
wind	int
>=	O
start	int
&&	O
wind	int
<	O
i	int
)	O
*	O
indp	*(int)
=	O
result_index	int
;	O
if	O
(	O
result_index	int
+	O
2	int
>=	O
size	int
)	O
result	*(char)
=	O
(	O
char	O
*	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
result	*(char)
,	O
(	O
(	O
size	int
+=	O
10	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
)	O
;	O
result	*(char)
[	O
result_index	int
++	O
]	O
=	O
history_substring	(*(char),int,int)->(*(char))
(	O
string	*(char)
,	O
start	int
,	O
i	int
)	O
;	O
result	*(char)
[	O
result_index	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
return	O
(	O
result	*(char)
)	O
;	O
}	O
char	O
*	O
*	O
history_tokenize	(*(char))->(*(*(char)))
(	O
string	*(char)
)	O
const	O
char	O
*	O
string	*(char)
;	O
{	O
return	O
(	O
history_tokenize_internal	(*(char),int,*(int))->(*(*(char)))
(	O
string	*(char)
,	O
-	O
1	int
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
)	O
;	O
}	O
static	O
void	O
freewords	(*(*(char)),int)->(void)
(	O
words	*(*(char))
,	O
start	int
)	O
char	O
*	O
*	O
words	*(*(char))
;	O
int	O
start	int
;	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
start	int
;	O
words	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
xfree	(*(void))->(void)
(	O
words	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
static	O
char	O
*	O
history_find_word	(*(char),int)->(*(char))
(	O
line	*(char)
,	O
ind	int
)	O
char	O
*	O
line	*(char)
;	O
int	O
ind	int
;	O
{	O
char	O
*	O
*	O
words	*(*(char))
,	O
*	O
s	*(char)
;	O
int	O
i	int
,	O
wind	int
;	O
words	*(*(char))
=	O
history_tokenize_internal	(*(char),int,*(int))->(*(*(char)))
(	O
line	*(char)
,	O
ind	int
,	O
&	O
wind	int
)	O
;	O
if	O
(	O
wind	int
==	O
-	O
1	int
||	O
words	*(*(char))
==	O
0	int
)	O
{	O
if	O
(	O
words	*(*(char))
)	O
freewords	(*(*(char)),int)->(void)
(	O
words	*(*(char))
,	O
0	int
)	O
;	O
FREE	O
(	O
words	*(*(char))
)	O
;	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
s	*(char)
=	O
words	*(*(char))
[	O
wind	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
wind	int
;	O
i	int
++	O
)	O
xfree	(*(void))->(void)
(	O
words	*(*(char))
[	O
i	int
]	O
)	O
;	O
freewords	(*(*(char)),int)->(void)
(	O
words	*(*(char))
,	O
wind	int
+	O
1	int
)	O
;	O
xfree	(*(void))->(void)
(	O
words	*(*(char))
)	O
;	O
return	O
s	*(char)
;	O
}	O
