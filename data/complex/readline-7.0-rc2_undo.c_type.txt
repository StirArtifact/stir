extern	O
void	O
_hs_replace_history_data	(int,*(*(void)),*(*(void)))->(void)
PARAMS	O
(	O
(	O
int	O
,	O
histdata_t	*(void)
*	O
,	O
histdata_t	*(void)
*	O
)	O
)	O
;	O
int	O
_rl_doing_an_undo	int
=	O
0	int
;	O
int	O
_rl_undo_group_level	int
=	O
0	int
;	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
(	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
)	O
NULL	O
;	O
static	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
alloc_undo_entry	(int,int,int,*(char))->(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))
(	O
what	enum(int,int,int,int)
,	O
start	int
,	O
end	int
,	O
text	*(char)
)	O
enum	O
undo_code	enum(int,int,int,int)
what	enum(int,int,int,int)
;	O
int	O
start	int
,	O
end	int
;	O
char	O
*	O
text	*(char)
;	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
(	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
)	O
)	O
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
=	O
what	enum(int,int,int,int)
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
start	int
=	O
start	int
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
end	int
=	O
end	int
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
=	O
text	*(char)
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
(	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
)	O
NULL	O
;	O
return	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
}	O
void	O
rl_add_undo	(enum(int,int,int,int),int,int,*(char))->(void)
(	O
what	enum(int,int,int,int)
,	O
start	int
,	O
end	int
,	O
text	*(char)
)	O
enum	O
undo_code	enum(int,int,int,int)
what	enum(int,int,int,int)
;	O
int	O
start	int
,	O
end	int
;	O
char	O
*	O
text	*(char)
;	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
alloc_undo_entry	(int,int,int,*(char))->(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))
(	O
what	enum(int,int,int,int)
,	O
start	int
,	O
end	int
,	O
text	*(char)
)	O
;	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
}	O
void	O
_rl_free_undo_list	(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))->(void)
(	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
while	O
(	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
{	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
if	O
(	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
==	O
UNDO_DELETE	int
)	O
xfree	(*(void))->(void)
(	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
}	O
}	O
void	O
rl_free_undo_list	()->(void)
(	O
)	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
,	O
*	O
orig_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
orig_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
_rl_free_undo_list	(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))->(void)
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
(	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
)	O
NULL	O
;	O
_hs_replace_history_data	(int,*(*(void)),*(*(void)))->(void)
(	O
-	O
1	int
,	O
(	O
histdata_t	*(void)
*	O
)	O
orig_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
,	O
(	O
histdata_t	*(void)
*	O
)	O
NULL	O
)	O
;	O
}	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
_rl_copy_undo_entry	(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))->(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))
(	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
alloc_undo_entry	(int,int,int,*(char))->(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))
(	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
,	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
start	int
,	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
end	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
=	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
?	O
savestring	O
(	O
entry	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
)	O
:	O
0	int
;	O
return	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
}	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
_rl_copy_undo_list	(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))->(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))
(	O
head	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
head	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
,	O
*	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
,	O
*	O
roving	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
,	O
*	O
c	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
if	O
(	O
head	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
==	O
0	int
)	O
return	O
head	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
head	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
0	int
;	O
while	O
(	O
list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
{	O
c	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
_rl_copy_undo_entry	(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))->(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))))
(	O
list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
if	O
(	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
==	O
0	int
)	O
roving	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
c	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
else	O
{	O
roving	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
c	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
roving	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
roving	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
}	O
list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
}	O
roving	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
0	int
;	O
return	O
new	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
}	O
int	O
rl_do_undo	()->(int)
(	O
)	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
int	O
waiting_for_begin	int
,	O
start	int
,	O
end	int
;	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
cur	*(struct(*(char),*(char),*(void)))
,	O
*	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
start	int
=	O
end	int
=	O
waiting_for_begin	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
==	O
0	int
)	O
return	O
(	O
0	int
)	O
;	O
_rl_doing_an_undo	int
=	O
1	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_UNDOING	int
)	O
;	O
if	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
==	O
UNDO_DELETE	int
||	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
==	O
UNDO_INSERT	int
)	O
{	O
start	int
=	O
TRANS	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
start	int
)	O
;	O
end	int
=	O
TRANS	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
end	int
)	O
;	O
}	O
switch	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
)	O
{	O
case	O
UNDO_DELETE	int
:	O
rl_point	int
=	O
start	int
;	O
rl_insert_text	(*(char))->(int)
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
text	*(char)
)	O
;	O
break	O
;	O
case	O
UNDO_INSERT	int
:	O
rl_delete_text	(int,int)->(int)
(	O
start	int
,	O
end	int
)	O
;	O
rl_point	int
=	O
start	int
;	O
break	O
;	O
case	O
UNDO_END	int
:	O
waiting_for_begin	int
++	O
;	O
break	O
;	O
case	O
UNDO_BEGIN	int
:	O
if	O
(	O
waiting_for_begin	int
)	O
waiting_for_begin	int
--	O
;	O
else	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
_rl_doing_an_undo	int
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_UNDOING	int
)	O
;	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
cur	*(struct(*(char),*(char),*(void)))
=	O
current_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
if	O
(	O
cur	*(struct(*(char),*(char),*(void)))
&&	O
cur	*(struct(*(char),*(char),*(void)))
->	O
data	*(void)
&&	O
(	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
)	O
cur	*(struct(*(char),*(char),*(void)))
->	O
data	*(void)
==	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
{	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
replace_history_entry	(int,*(char),*(void))->(*(struct(*(char),*(char),*(void))))
(	O
where_history	()->(int)
(	O
)	O
,	O
rl_line_buffer	*(char)
,	O
(	O
histdata_t	*(void)
)	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
line	*(char)
)	O
;	O
FREE	O
(	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
timestamp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
}	O
_hs_replace_history_data	(int,*(*(void)),*(*(void)))->(void)
(	O
-	O
1	int
,	O
(	O
histdata_t	*(void)
*	O
)	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
,	O
(	O
histdata_t	*(void)
*	O
)	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
xfree	(*(void))->(void)
(	O
release	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
}	O
while	O
(	O
waiting_for_begin	int
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
int	O
_rl_fix_last_undo_of_type	(int,int,int)->(int)
(	O
type	char
,	O
start	int
,	O
end	int
)	O
int	O
type	char
,	O
start	int
,	O
end	int
;	O
{	O
UNDO_LIST	struct(*(struct(*(struct(*`,int,int,*`,enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))
*	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
for	O
(	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
{	O
if	O
(	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
what	enum(int,int,int,int)
==	O
type	char
)	O
{	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
start	int
=	O
start	int
;	O
rl	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
->	O
end	int
=	O
end	int
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
int	O
rl_begin_undo_group	()->(int)
(	O
)	O
{	O
rl_add_undo	(enum(int,int,int,int),int,int,*(char))->(void)
(	O
UNDO_BEGIN	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
_rl_undo_group_level	int
++	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_end_undo_group	()->(int)
(	O
)	O
{	O
rl_add_undo	(enum(int,int,int,int),int,int,*(char))->(void)
(	O
UNDO_END	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
_rl_undo_group_level	int
--	O
;	O
return	O
0	int
;	O
}	O
int	O
rl_modifying	(int,int)->(int)
(	O
start	int
,	O
end	int
)	O
int	O
start	int
,	O
end	int
;	O
{	O
if	O
(	O
start	int
>	O
end	int
)	O
{	O
SWAP	O
(	O
start	int
,	O
end	int
)	O
;	O
}	O
if	O
(	O
start	int
!=	O
end	int
)	O
{	O
char	O
*	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_copy_text	(int,int)->(*(char))
(	O
start	int
,	O
end	int
)	O
;	O
rl_begin_undo_group	()->(int)
(	O
)	O
;	O
rl_add_undo	(enum(int,int,int,int),int,int,*(char))->(void)
(	O
UNDO_DELETE	int
,	O
start	int
,	O
end	int
,	O
temp	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
;	O
rl_add_undo	(enum(int,int,int,int),int,int,*(char))->(void)
(	O
UNDO_INSERT	int
,	O
start	int
,	O
end	int
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
rl_end_undo_group	()->(int)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_revert_line	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
if	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
==	O
0	int
)	O
rl_ding	()->(int)
(	O
)	O
;	O
else	O
{	O
while	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
rl_do_undo	()->(int)
(	O
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
)	O
rl_point	int
=	O
rl_mark	int
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
rl_undo_command	(int,int)->(int)
(	O
count	int
,	O
key	int
)	O
int	O
count	int
,	O
key	int
;	O
{	O
if	O
(	O
count	int
<	O
0	int
)	O
return	O
0	int
;	O
while	O
(	O
count	int
)	O
{	O
if	O
(	O
rl_do_undo	()->(int)
(	O
)	O
)	O
count	int
--	O
;	O
else	O
{	O
rl_ding	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
