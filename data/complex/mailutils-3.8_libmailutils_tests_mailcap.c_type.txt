struct	O
list_closure	struct(long)
{	O
unsigned	O
long	O
n	*(long)
;	O
}	O
;	O
static	O
void	O
list_all	(*(struct))->(void)
(	O
mu_mailcap_t	*(struct)
mailcap	*(struct)
)	O
;	O
static	O
void	O
list_single_entry	(*(struct))->(void)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
)	O
;	O
static	O
int	O
list_field	(*(char),*(char),*(void))->(int)
(	O
char	O
const	O
*	O
name	*(char)
,	O
char	O
const	O
*	O
value	*(void)
,	O
void	O
*	O
data	*(void)
)	O
;	O
static	O
int	O
list_entry	(*(struct),*(void))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
void	O
*	O
closure	*(void)
)	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
int	O
flags	int
=	O
MU_MAILCAP_FLAG_DEFAULT	int
;	O
mu_mailcap_t	*(struct)
mailcap	*(struct)
;	O
char	O
*	O
file	*(char)
=	O
NULL	O
;	O
char	O
*	O
arg	*(char)
;	O
mu_stdstream_setup	(int)->(void)
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
while	O
(	O
--	O
argc	long
&&	O
(	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
)	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
{	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-f"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
arg	*(char)
[	O
2	int
]	O
)	O
file	*(char)
=	O
arg	*(char)
+	O
2	int
;	O
else	O
if	O
(	O
--	O
argc	long
)	O
file	*(char)
=	O
*	O
++	O
argv	*(*(char))
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"-f requires arguments"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-l"	*(char)
)	O
==	O
0	int
)	O
flags	int
|=	O
MU_MAILCAP_FLAG_LOCUS	int
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"unrecognized option: %s"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
MU_ASSERT	O
(	O
mu_mailcap_create	(*(*(struct)))->(int)
(	O
&	O
mailcap	*(struct)
)	O
)	O
;	O
mu_mailcap_set_error	(*(struct),*(struct(*((*`,*`,*`)->(void)),*(void),*((*`)->(void)))))->(int)
(	O
mailcap	*(struct)
,	O
&	O
mu_mailcap_default_error_closure	struct(*((*(void),*(struct(struct`,struct`)),*(char))->(void)),*(void),*((*(void))->(void)))
)	O
;	O
if	O
(	O
flags	int
!=	O
MU_MAILCAP_FLAG_DEFAULT	int
)	O
MU_ASSERT	O
(	O
mu_mailcap_set_flags	(*(struct),int)->(int)
(	O
mailcap	*(struct)
,	O
flags	int
)	O
)	O
;	O
if	O
(	O
file	*(char)
)	O
status	int
=	O
mu_mailcap_parse_file	(*(struct),*(char))->(int)
(	O
mailcap	*(struct)
,	O
file	*(char)
)	O
;	O
else	O
{	O
struct	O
mu_locus_point	struct(*(char),int,int)
point	struct(*(char),int,int)
=	O
MU_LOCUS_POINT_INITIALIZER	O
;	O
mu_locus_point_set_file	(*(struct(*(char),int,int)),*(char))->(int)
(	O
&	O
point	struct(*(char),int,int)
,	O
"<stdin>"	*(char)
)	O
;	O
point	struct(*(char),int,int)
.	O
mu_line	int
=	O
1	int
;	O
status	int
=	O
mu_mailcap_parse	(*(struct),*(struct),*(struct(*(char),int,int)))->(int)
(	O
mailcap	*(struct)
,	O
mu_strin	*(struct)
,	O
&	O
point	struct(*(char),int,int)
)	O
;	O
mu_locus_point_deinit	(*(struct(*(char),int,int)))->(void)
(	O
&	O
point	struct(*(char),int,int)
)	O
;	O
}	O
if	O
(	O
status	int
&&	O
status	int
!=	O
MU_ERR_PARSE	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
switch	O
(	O
argc	long
)	O
{	O
case	O
0	int
:	O
list_all	(*(struct))->(void)
(	O
mailcap	*(struct)
)	O
;	O
break	O
;	O
case	O
1	int
:	O
{	O
mu_mailcap_entry_t	*(struct)
entry	*(*(struct))
;	O
MU_ASSERT	O
(	O
mu_mailcap_find_entry	(*(struct),*(char),*(*(struct)))->(int)
(	O
mailcap	*(struct)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
&	O
entry	*(*(struct))
)	O
)	O
;	O
list_single_entry	(*(struct))->(void)
(	O
entry	*(*(struct))
)	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
{	O
mu_mailcap_entry_t	*(struct)
entry	*(*(struct))
;	O
char	O
const	O
*	O
value	*(void)
;	O
MU_ASSERT	O
(	O
mu_mailcap_find_entry	(*(struct),*(char),*(*(struct)))->(int)
(	O
mailcap	*(struct)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
&	O
entry	*(*(struct))
)	O
)	O
;	O
status	int
=	O
mu_mailcap_entry_sget_field	(*(struct),*(char),*(*(char)))->(int)
(	O
entry	*(*(struct))
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
&	O
value	*(void)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
value	*(void)
)	O
mu_printf	(*(char))->(int)
(	O
"%s=%s\n"	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
value	*(void)
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s is set\n"	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
mu_printf	(*(char))->(int)
(	O
"%s is not set\n"	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
}	O
break	O
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
"too many arguments"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
mu_mailcap_destroy	(*(*(struct)))->(void)
(	O
&	O
mailcap	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
list_all	(*(struct))->(void)
(	O
mu_mailcap_t	*(struct)
mailcap	*(struct)
)	O
{	O
struct	O
list_closure	struct(long)
lc	struct(long)
;	O
lc	struct(long)
.	O
n	*(long)
=	O
1	int
;	O
mu_mailcap_foreach	(*(struct),*((*(struct),*(void))->(int)),*(void))->(int)
(	O
mailcap	*(struct)
,	O
list_entry	(*(struct),*(void))->(int)
,	O
&	O
lc	struct(long)
)	O
;	O
}	O
int	O
list_entry	(*(struct),*(void))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
void	O
*	O
closure	*(void)
)	O
{	O
struct	O
list_closure	struct(long)
*	O
lc	struct(long)
=	O
closure	*(void)
;	O
struct	O
mu_locus_range	struct(struct(*(char),int,int),struct(*(char),int,int))
lr	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
MU_LOCUS_RANGE_INITIALIZER	O
;	O
if	O
(	O
mu_mailcap_entry_get_locus	(*(struct),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
ent	*(struct)
,	O
&	O
lr	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
==	O
0	int
)	O
{	O
mu_stream_lprintf	(*(struct),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(char))->(void)
(	O
mu_strout	*(struct)
,	O
&	O
lr	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
,	O
"entry[%lu]\n"	*(char)
,	O
lc	struct(long)
->	O
n	*(long)
)	O
;	O
mu_locus_range_deinit	(*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
&	O
lr	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
}	O
else	O
mu_printf	(*(char))->(int)
(	O
"entry[%lu]\n"	*(char)
,	O
lc	struct(long)
->	O
n	*(long)
)	O
;	O
list_single_entry	(*(struct))->(void)
(	O
ent	*(struct)
)	O
;	O
lc	struct(long)
->	O
n	*(long)
++	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
list_single_entry	(*(struct))->(void)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
)	O
{	O
struct	O
list_closure	struct(long)
fc	struct(long)
;	O
char	O
const	O
*	O
val	*(char)
;	O
MU_ASSERT	O
(	O
mu_mailcap_entry_sget_type	(*(struct),*(*(char)))->(int)
(	O
ent	*(struct)
,	O
&	O
val	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"\ttypefield: %s\n"	*(char)
,	O
val	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_mailcap_entry_sget_command	(*(struct),*(*(char)))->(int)
(	O
ent	*(struct)
,	O
&	O
val	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"\tview-command: %s\n"	*(char)
,	O
val	*(char)
)	O
;	O
fc	struct(long)
.	O
n	*(long)
=	O
1	int
;	O
mu_mailcap_entry_fields_foreach	(*(struct),*((*(char),*(char),*(void))->(int)),*(void))->(int)
(	O
ent	*(struct)
,	O
list_field	(*(char),*(char),*(void))->(int)
,	O
&	O
fc	struct(long)
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
static	O
int	O
list_field	(*(char),*(char),*(void))->(int)
(	O
char	O
const	O
*	O
name	*(char)
,	O
char	O
const	O
*	O
value	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
list_closure	struct(long)
*	O
fc	struct(long)
=	O
data	*(void)
;	O
mu_printf	(*(char))->(int)
(	O
"\tfields[%lu]: "	*(char)
,	O
fc	struct(long)
->	O
n	*(long)
++	O
)	O
;	O
if	O
(	O
value	*(void)
)	O
mu_printf	(*(char))->(int)
(	O
"%s=%s"	*(char)
,	O
name	*(char)
,	O
value	*(void)
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
