typedef	O
void	O
(	O
*	O
foreach_function_ty	*((*(char),long,*(void))->(void))
)	O
(	O
const	O
char	O
*	O
dir	*(char)
,	O
size_t	long
len	long
,	O
void	O
*	O
data	*(void)
)	O
;	O
struct	O
path_array_ty	struct(*(*(char)),long,*(char))
{	O
char	O
*	O
*	O
ptr	*(void)
;	O
size_t	long
len	long
;	O
const	O
char	O
*	O
sub	*(char)
;	O
}	O
;	O
static	O
void	O
foreach_elements	(*(char),*((*(char),long,*(void))->(void)),*(void))->(void)
(	O
const	O
char	O
*	O
dirs	*(char)
,	O
foreach_function_ty	*((*(char),long,*(void))->(void))
function	*((*(char),long,*(void))->(void))
,	O
void	O
*	O
data	*(void)
)	O
{	O
const	O
char	O
*	O
start	*(char)
=	O
dirs	*(char)
;	O
while	O
(	O
*	O
start	*(char)
!=	O
'\0'	O
)	O
{	O
char	O
*	O
end	*(char)
=	O
strchrnul	(*(char),int)->(*(char))
(	O
start	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
start	*(char)
!=	O
end	*(char)
)	O
function	*((*(char),long,*(void))->(void))
(	O
start	*(char)
,	O
end	*(char)
-	O
start	*(char)
,	O
data	*(void)
)	O
;	O
if	O
(	O
*	O
end	*(char)
==	O
'\0'	O
)	O
break	O
;	O
start	*(char)
=	O
end	*(char)
+	O
1	int
;	O
}	O
}	O
static	O
void	O
increment	(*(char),long,*(void))->(void)
(	O
const	O
char	O
*	O
dir	*(char)
,	O
size_t	long
len	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
size_t	long
*	O
count	*(long)
=	O
data	*(void)
;	O
(	O
*	O
count	*(long)
)	O
++	O
;	O
}	O
static	O
void	O
fill	(*(char),long,*(void))->(void)
(	O
const	O
char	O
*	O
dir	*(char)
,	O
size_t	long
len	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
path_array_ty	struct(*(*(char)),long,*(char))
*	O
array	*(struct(*(*(char)),long,*(char)))
=	O
data	*(void)
;	O
char	O
*	O
base	*(char)
,	O
*	O
name	*(char)
;	O
base	*(char)
=	O
xmemdup0	(*(void),long)->(*(char))
(	O
dir	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
array	*(struct(*(*(char)),long,*(char)))
->	O
sub	*(char)
==	O
NULL	O
)	O
name	*(char)
=	O
base	*(char)
;	O
else	O
{	O
name	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
base	*(char)
,	O
array	*(struct(*(*(char)),long,*(char)))
->	O
sub	*(char)
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
base	*(char)
)	O
;	O
}	O
array	*(struct(*(*(char)),long,*(char)))
->	O
ptr	*(void)
[	O
array	*(struct(*(*(char)),long,*(char)))
->	O
len	long
++	O
]	O
=	O
name	*(char)
;	O
}	O
char	O
*	O
*	O
get_search_path	(*(char))->(*(*(char)))
(	O
const	O
char	O
*	O
sub	*(char)
)	O
{	O
const	O
char	O
*	O
gettextdatadir	*(char)
;	O
const	O
char	O
*	O
gettextdatadirs	*(char)
;	O
const	O
char	O
*	O
xdgdatadirs	*(char)
;	O
struct	O
path_array_ty	struct(*(*(char)),long,*(char))
array	*(struct(*(*(char)),long,*(char)))
;	O
size_t	long
count	*(long)
=	O
2	int
;	O
gettextdatadirs	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"GETTEXTDATADIRS"	*(char)
)	O
;	O
if	O
(	O
gettextdatadirs	*(char)
!=	O
NULL	O
)	O
foreach_elements	(*(char),*((*(char),long,*(void))->(void)),*(void))->(void)
(	O
gettextdatadirs	*(char)
,	O
increment	(*(char),long,*(void))->(void)
,	O
&	O
count	*(long)
)	O
;	O
xdgdatadirs	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"XDG_DATA_DIRS"	*(char)
)	O
;	O
if	O
(	O
xdgdatadirs	*(char)
!=	O
NULL	O
)	O
foreach_elements	(*(char),*((*(char),long,*(void))->(void)),*(void))->(void)
(	O
xdgdatadirs	*(char)
,	O
increment	(*(char),long,*(void))->(void)
,	O
&	O
count	*(long)
)	O
;	O
array	*(struct(*(*(char)),long,*(char)))
.	O
ptr	*(void)
=	O
XCALLOC	O
(	O
count	*(long)
+	O
1	int
,	O
char	O
*	O
)	O
;	O
array	*(struct(*(*(char)),long,*(char)))
.	O
len	long
=	O
0	int
;	O
{	O
gettextdatadir	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"GETTEXTDATADIR"	*(char)
)	O
;	O
if	O
(	O
gettextdatadir	*(char)
==	O
NULL	O
||	O
gettextdatadir	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
gettextdatadir	*(char)
=	O
relocate	O
(	O
GETTEXTDATADIR	O
)	O
;	O
{	O
char	O
*	O
name	*(char)
;	O
if	O
(	O
sub	*(char)
==	O
NULL	O
)	O
name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
gettextdatadir	*(char)
)	O
;	O
else	O
name	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
gettextdatadir	*(char)
,	O
sub	*(char)
,	O
NULL	O
)	O
;	O
array	*(struct(*(*(char)),long,*(char)))
.	O
ptr	*(void)
[	O
array	*(struct(*(*(char)),long,*(char)))
.	O
len	long
++	O
]	O
=	O
name	*(char)
;	O
}	O
if	O
(	O
gettextdatadirs	*(char)
!=	O
NULL	O
)	O
{	O
array	*(struct(*(*(char)),long,*(char)))
.	O
sub	*(char)
=	O
sub	*(char)
;	O
foreach_elements	(*(char),*((*(char),long,*(void))->(void)),*(void))->(void)
(	O
gettextdatadirs	*(char)
,	O
fill	(*(char),long,*(void))->(void)
,	O
&	O
array	*(struct(*(*(char)),long,*(char)))
)	O
;	O
}	O
if	O
(	O
xdgdatadirs	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
combined_sub	*(char)
;	O
if	O
(	O
sub	*(char)
==	O
NULL	O
)	O
combined_sub	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
"gettext"	*(char)
)	O
;	O
else	O
combined_sub	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
"gettext"	*(char)
,	O
sub	*(char)
,	O
NULL	O
)	O
;	O
array	*(struct(*(*(char)),long,*(char)))
.	O
sub	*(char)
=	O
combined_sub	*(char)
;	O
foreach_elements	(*(char),*((*(char),long,*(void))->(void)),*(void))->(void)
(	O
xdgdatadirs	*(char)
,	O
fill	(*(char),long,*(void))->(void)
,	O
&	O
array	*(struct(*(*(char)),long,*(char)))
)	O
;	O
free	(*(void))->(void)
(	O
combined_sub	*(char)
)	O
;	O
}	O
{	O
char	O
*	O
base	*(char)
=	O
xasprintf	(*(char))->(*(char))
(	O
"%s%s"	*(char)
,	O
gettextdatadir	*(char)
,	O
PACKAGE_SUFFIX	*(char)
)	O
;	O
char	O
*	O
name	*(char)
;	O
if	O
(	O
sub	*(char)
==	O
NULL	O
)	O
name	*(char)
=	O
base	*(char)
;	O
else	O
{	O
name	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
base	*(char)
,	O
sub	*(char)
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
base	*(char)
)	O
;	O
}	O
array	*(struct(*(*(char)),long,*(char)))
.	O
ptr	*(void)
[	O
array	*(struct(*(*(char)),long,*(char)))
.	O
len	long
++	O
]	O
=	O
name	*(char)
;	O
}	O
}	O
return	O
array	*(struct(*(*(char)),long,*(char)))
.	O
ptr	*(void)
;	O
}	O
