static	O
char	O
*	O
find_cfg_name	()->(*(char))
(	O
void	O
)	O
;	O
typedef	O
struct	O
pw_opt_line	struct(*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char))),*(char))
pw_opt_line_t	struct
;	O
struct	O
pw_opt_line	struct(*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char))),*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char))),*(char))
{	O
pw_opt_line_t	struct
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
pw_opt_line_t	struct
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
char	O
const	O
*	O
line	*(char)
;	O
}	O
;	O
static	O
pw_opt_line_t	struct
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
[	O
0x4000	int
]	O
;	O
static	O
inline	O
void	O
add_hash_entry	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char))->(void)
(	O
pw_opt_line_t	struct
*	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
,	O
char	O
const	O
*	O
txt	*(char)
)	O
{	O
static	O
char	O
const	O
id_str	array(char)
[	O
]	O
=	O
" id=\""	*(char)
;	O
char	O
const	O
*	O
hash_txt	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
txt	*(char)
,	O
id_str	array(char)
)	O
;	O
unsigned	O
int	O
hash_len	int
;	O
unsigned	O
int	O
off	int
;	O
if	O
(	O
hash_txt	*(char)
==	O
NULL	O
)	O
return	O
;	O
hash_txt	*(char)
+=	O
sizeof	O
(	O
id_str	array(char)
)	O
-	O
1	int
;	O
off	int
=	O
hash_txt	*(char)
-	O
txt	*(char)
;	O
{	O
char	O
const	O
*	O
equ	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
hash_txt	*(char)
,	O
'='	O
)	O
;	O
if	O
(	O
equ	*(char)
==	O
NULL	O
)	O
return	O
;	O
hash_len	int
=	O
equ	*(char)
-	O
hash_txt	*(char)
;	O
}	O
{	O
int	O
hash_ix	int
=	O
TXT_HASH	O
(	O
hash_txt	*(char)
)	O
;	O
pw_opt_line_t	struct
*	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
+	O
hash_ix	int
;	O
pw_opt_line_t	struct
*	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
while	O
(	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
!=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
line	*(char)
+	O
off	int
,	O
hash_txt	*(char)
,	O
hash_len	int
)	O
==	O
0	int
)	O
{	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
line	*(char)
=	O
txt	*(char)
;	O
return	O
;	O
}	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
}	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
line	*(char)
=	O
txt	*(char)
;	O
while	O
(	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
!=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
line	*(char)
+	O
off	int
,	O
hash_txt	*(char)
,	O
hash_len	int
)	O
>	O
0	int
)	O
break	O
;	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
}	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
}	O
}	O
static	O
inline	O
void	O
parse_cfg_text	(*(char))->(void)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
ct	int
=	O
0	int
;	O
{	O
char	O
*	O
scan	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
NL	char
)	O
;	O
while	O
(	O
scan	*(char)
!=	O
NULL	O
)	O
{	O
ct	int
++	O
;	O
scan	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
scan	*(char)
+	O
1	int
,	O
NL	char
)	O
;	O
}	O
}	O
{	O
pw_opt_line_t	struct
*	O
opt_list	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
malloc	(long)->(*(void))
(	O
ct	int
*	O
sizeof	O
(	O
*	O
opt_list	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
)	O
)	O
;	O
ct	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
add_hash_entry	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char))->(void)
(	O
opt_list	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
+	O
(	O
ct	int
++	O
)	O
,	O
text	*(char)
)	O
;	O
text	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
NL	char
)	O
;	O
if	O
(	O
text	*(char)
==	O
NULL	O
)	O
break	O
;	O
*	O
(	O
text	*(char)
++	O
)	O
=	O
NUL	char
;	O
text	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
pwtag_z	O
)	O
;	O
if	O
(	O
text	*(char)
==	O
NULL	O
)	O
break	O
;	O
}	O
}	O
}	O
static	O
inline	O
void	O
init_config_data	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
fname	*(char)
,	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
ct	int
=	O
sizeof	O
(	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
)	O
/	O
sizeof	O
(	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
[	O
0	int
]	O
)	O
;	O
pw_opt_line_t	struct
*	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
;	O
config_file_name	*(char)
=	O
fname	*(char)
;	O
leader_text	*(char)
=	O
text	*(char)
;	O
do	O
{	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
++	O
;	O
}	O
while	O
(	O
--	O
ct	int
>	O
0	int
)	O
;	O
}	O
int	O
load_domain_attrs	(*(char),*(char),long)->(int)
(	O
char	O
const	O
*	O
fname	*(char)
,	O
char	O
*	O
text	*(char)
,	O
size_t	long
text_sz	long
)	O
{	O
if	O
(	O
config_file_name	*(char)
==	O
NULL	O
)	O
init_config_data	(*(char),*(char))->(void)
(	O
fname	*(char)
,	O
text	*(char)
)	O
;	O
text	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
text	*(char)
,	O
pw_id_tag	O
)	O
;	O
if	O
(	O
text	*(char)
==	O
NULL	O
)	O
die	(int,*(char))->(void)
(	O
SORT_PW_CFG_EXIT_INVALID	int
,	O
"config file %s missing id tag:  %s\n"	*(char)
,	O
fname	*(char)
,	O
pw_id_tag	O
)	O
;	O
text	*(char)
+=	O
pw_id_tag_LEN	int
;	O
*	O
(	O
text	*(char)
++	O
)	O
=	O
NUL	char
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
text	*(char)
)	O
)	O
text	*(char)
++	O
;	O
parse_cfg_text	(*(char))->(void)
(	O
text	*(char)
)	O
;	O
return	O
SORT_PW_CFG_EXIT_SUCCESS	int
;	O
}	O
static	O
inline	O
FILE	struct
*	O
open_cfg_for_output	()->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
void	O
)	O
{	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sbf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
config_file_name	*(char)
==	O
NULL	O
)	O
die	(int,*(char))->(void)
(	O
SORT_PW_CFG_EXIT_NO_CONFIG	int
,	O
"no input config file"	*(char)
)	O
;	O
errno	O
=	O
0	int
;	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
config_file_name	*(char)
,	O
&	O
sbf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
switch	O
(	O
errno	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
access	(*(char),int)->(int)
(	O
config_file_name	*(char)
,	O
W_OK	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
chmod	(*(char),int)->(int)
(	O
config_file_name	*(char)
,	O
sbf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
|	O
S_IWUSR	O
|	O
S_IWGRP	O
)	O
!=	O
0	int
)	O
fserr	(int,*(char),*(char))->(void)
(	O
SORT_PW_CFG_EXIT_BAD_CONFIG	int
,	O
cfg_immutable	O
,	O
config_file_name	*(char)
)	O
;	O
case	O
ENOENT	int
:	O
break	O
;	O
default	O
:	O
die	(int,*(char))->(void)
(	O
SORT_PW_CFG_EXIT_NO_CONFIG	int
,	O
cannot_stat_cfg	O
,	O
config_file_name	*(char)
)	O
;	O
}	O
}	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
config_file_name	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
SORT_PW_CFG_EXIT_BAD_CONFIG	int
,	O
cfg_immutable	O
,	O
config_file_name	*(char)
)	O
;	O
return	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
}	O
sort_pw_cfg_exit_code_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
emit_new_text	()->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
void	O
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
OUTPUT	O
)	O
)	O
{	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
open_cfg_for_output	()->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
access	(*(char),int)->(int)
(	O
OPT_ARG	O
(	O
OUTPUT	O
)	O
,	O
W_OK	int
)	O
!=	O
0	int
)	O
&&	O
(	O
errno	O
!=	O
ENOENT	int
)	O
)	O
{	O
if	O
(	O
chmod	(*(char),int)->(int)
(	O
OPT_ARG	O
(	O
OUTPUT	O
)	O
,	O
S_IWUSR	O
|	O
S_IRUSR	O
)	O
!=	O
0	int
)	O
fserr	(int,*(char),*(char))->(void)
(	O
SORT_PW_CFG_EXIT_BAD_CONFIG	int
,	O
cfg_immutable	O
,	O
OPT_ARG	O
(	O
OUTPUT	O
)	O
)	O
;	O
}	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
OPT_ARG	O
(	O
OUTPUT	O
)	O
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
SORT_PW_CFG_EXIT_BAD_CONFIG	int
,	O
cfg_immutable	O
,	O
OPT_ARG	O
(	O
OUTPUT	O
)	O
)	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
leader_text	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NL	char
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
{	O
pw_opt_line_t	struct
*	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
;	O
int	O
ix	int
=	O
sizeof	O
(	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
)	O
/	O
sizeof	O
(	O
opt_hash	array(struct(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),*(char))),*(char)))
[	O
0	int
]	O
)	O
;	O
do	O
{	O
pw_opt_line_t	struct
*	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
while	O
(	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
!=	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
line	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
NL	char
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
=	O
ole	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
;	O
}	O
olh	*(struct(*(struct(*(struct`),*(struct`),*(char))),*(struct(*(struct`),*(struct`),*(char))),*(char)))
++	O
;	O
}	O
while	O
(	O
--	O
ix	int
>	O
0	int
)	O
;	O
}	O
fchmod	(int,int)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
S_IRUSR	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
SORT_PW_CFG_EXIT_SUCCESS	int
;	O
}	O
