struct	O
myctx	struct(*(struct),int,int,*(char))
{	O
adns_query	*(struct)
qu	*(struct)
;	O
int	O
doneyet	int
,	O
found	int
;	O
const	O
char	O
*	O
fdom	*(char)
;	O
}	O
;	O
static	O
struct	O
myctx	struct(*(struct),int,int,*(char))
*	O
mcs	*(struct(*(struct),int,int,*(char)))
;	O
static	O
adns_state	*(struct)
ads	*(struct)
;	O
static	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
*	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
;	O
static	O
void	O
quitnow	(int)->(void)
(	O
int	O
rc	int
)	O
NONRETURNING	O
;	O
static	O
void	O
quitnow	(int)->(void)
(	O
int	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
mcs	*(struct(*(struct),int,int,*(char)))
)	O
;	O
free	(*(void))->(void)
(	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
)	O
;	O
if	O
(	O
ads	*(struct)
)	O
adns_finish	(*(struct))->(void)
(	O
ads	*(struct)
)	O
;	O
exit	(int)->(void)
(	O
rc	int
)	O
;	O
}	O
static	O
void	O
failure_status	(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
NONRETURNING	O
;	O
static	O
void	O
failure_status	(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adns failure: %s: %s\n"	*(char)
,	O
what	*(char)
,	O
adns_strerror	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
st	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
)	O
;	O
quitnow	(int)->(void)
(	O
2	int
)	O
;	O
}	O
static	O
void	O
failure_errno	(*(char),int)->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
int	O
errnoval	int
)	O
NONRETURNING	O
;	O
static	O
void	O
failure_errno	(*(char),int)->(void)
(	O
const	O
char	O
*	O
what	*(char)
,	O
int	O
errnoval	int
)	O
{	O
switch	O
(	O
errnoval	int
)	O
{	O
CE	O
(	O
EINVAL	int
)	O
;	O
CE	O
(	O
EINTR	int
)	O
;	O
CE	O
(	O
ESRCH	int
)	O
;	O
CE	O
(	O
EAGAIN	int
)	O
;	O
CE	O
(	O
ENOSYS	int
)	O
;	O
CE	O
(	O
ERANGE	int
)	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"adns failure: %s: errno=%d\n"	*(char)
,	O
what	*(char)
,	O
errnoval	int
)	O
;	O
break	O
;	O
}	O
quitnow	(int)->(void)
(	O
2	int
)	O
;	O
}	O
static	O
void	O
usageerr	(*(char))->(void)
(	O
const	O
char	O
*	O
why	*(char)
)	O
NONRETURNING	O
;	O
static	O
void	O
usageerr	(*(char))->(void)
(	O
const	O
char	O
*	O
why	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"bad usage: %s\n"	*(char)
"usage: adnstest [-<initflagsnum>[,<owninitflags>]] [/<initstring>]\n"	*(char)
"              [ :<typenum>,... ]\n"	*(char)
"              [ [<queryflagsnum>[,<ownqueryflags>]/]<domain> ... ]\n"	*(char)
"initflags:   p  use poll(2) instead of select(2)\n"	*(char)
"             s  use adns_wait with specified query, instead of 0\n"	*(char)
"queryflags:  a  print status abbrevs instead of strings\n"	*(char)
"exit status:  0 ok (though some queries may have failed)\n"	*(char)
"              1 used by test harness to indicate test failed\n"	*(char)
"              2 unable to submit or init or some such\n"	*(char)
"              3 unexpected failure\n"	*(char)
"              4 usage error\n"	*(char)
"              5 operation not supported on this system\n"	*(char)
,	O
why	*(char)
)	O
;	O
quitnow	(int)->(void)
(	O
4	int
)	O
;	O
}	O
static	O
const	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
defaulttypes	array(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
]	O
=	O
{	O
adns_r_a	int
,	O
adns_r_ns_raw	int
,	O
adns_r_cname	int
,	O
adns_r_soa_raw	int
,	O
adns_r_ptr_raw	int
,	O
adns_r_hinfo	int
,	O
adns_r_mx_raw	int
,	O
adns_r_txt	int
,	O
adns_r_rp_raw	int
,	O
adns_r_addr	int
,	O
adns_r_ns	int
,	O
adns_r_ptr	int
,	O
adns_r_mx	int
,	O
adns_r_soa	int
,	O
adns_r_rp	int
,	O
adns_r_none	int
}	O
;	O
static	O
void	O
dumptype	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char))->(void)
(	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
const	O
char	O
*	O
rrtn	*(char)
,	O
const	O
char	O
*	O
fmtn	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s(%s)%s%s"	*(char)
,	O
(	O
!	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
&&	O
rrtn	*(char)
)	O
?	O
rrtn	*(char)
:	O
"?"	*(char)
,	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
?	O
"?"	*(char)
:	O
fmtn	*(char)
?	O
fmtn	*(char)
:	O
"-"	*(char)
,	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
?	O
" "	*(char)
:	O
""	*(char)
,	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
?	O
adns_strerror	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
:	O
""	*(char)
)	O
;	O
}	O
static	O
void	O
fdom_split	(*(char),*(*(char)),*(int),*(char),int)->(void)
(	O
const	O
char	O
*	O
fdom	*(char)
,	O
const	O
char	O
*	O
*	O
dom_r	*(*(char))
,	O
int	O
*	O
qf_r	*(int)
,	O
char	O
*	O
ownflags	*(char)
,	O
int	O
ownflags_l	int
)	O
{	O
int	O
qf	int
;	O
char	O
*	O
ep	*(char)
;	O
qf	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
fdom	*(char)
,	O
&	O
ep	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ep	*(char)
==	O
','	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
ep	*(char)
,	O
'/'	O
)	O
)	O
{	O
ep	*(char)
++	O
;	O
while	O
(	O
*	O
ep	*(char)
!=	O
'/'	O
)	O
{	O
if	O
(	O
--	O
ownflags_l	int
<=	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"too many flags\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
quitnow	(int)->(void)
(	O
3	int
)	O
;	O
}	O
*	O
ownflags	*(char)
++	O
=	O
*	O
ep	*(char)
++	O
;	O
}	O
}	O
if	O
(	O
*	O
ep	*(char)
!=	O
'/'	O
)	O
{	O
*	O
dom_r	*(*(char))
=	O
fdom	*(char)
;	O
*	O
qf_r	*(int)
=	O
0	int
;	O
}	O
else	O
{	O
*	O
dom_r	*(*(char))
=	O
ep	*(char)
+	O
1	int
;	O
*	O
qf_r	*(int)
=	O
qf	int
;	O
}	O
*	O
ownflags	*(char)
=	O
0	int
;	O
}	O
static	O
int	O
consistsof	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
string	*(char)
,	O
const	O
char	O
*	O
accept	(int,*(struct(short,array(char))),*(int))->(int)
)	O
{	O
return	O
strspn	(*(char),*(char))->(long)
(	O
string	*(char)
,	O
accept	(int,*(struct(short,array(char))),*(int))->(int)
)	O
==	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
adns_query	*(struct)
qu	*(struct)
;	O
struct	O
myctx	struct(*(struct),int,int,*(char))
*	O
mc	*(struct(*(struct),int,int,*(char)))
,	O
*	O
mcw	*(struct(*(struct),int,int,*(char)))
;	O
void	O
*	O
mcr	*(void)
;	O
adns_answer	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct(int,*`))),*(struct(int,union(struct`,struct`))),*(struct(int)),*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`))),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`))),*(struct(int,*(char))),*(struct(*(char),*(char),long,long,long,long,long)),*(struct(int,int,int,*(char))),*(struct(int,int,int,struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`))),*(struct(int,*(char)))))
*	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
;	O
const	O
char	O
*	O
initstring	*(char)
,	O
*	O
rrtn	*(char)
,	O
*	O
fmtn	*(char)
;	O
const	O
char	O
*	O
const	O
*	O
fdomlist	*(*(char))
,	O
*	O
domain	*(char)
;	O
char	O
*	O
show	*(char)
,	O
*	O
cp	*(char)
;	O
int	O
len	int
,	O
i	int
,	O
qc	int
,	O
qi	int
,	O
tc	int
,	O
ti	int
,	O
ch	int
,	O
qflags	int
,	O
initflagsnum	int
;	O
adns_status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
int	O
r	int
;	O
const	O
adns_rrtype	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
*	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
;	O
struct	O
timeval	struct(long,long)
now	*(struct(long,long))
;	O
char	O
ownflags	*(char)
[	O
10	int
]	O
;	O
char	O
*	O
ep	*(char)
;	O
const	O
char	O
*	O
initflags	*(char)
,	O
*	O
owninitflags	*(char)
;	O
if	O
(	O
argv	*(*(char))
[	O
0	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
initflags	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
+	O
1	int
;	O
argv	*(*(char))
++	O
;	O
}	O
else	O
{	O
initflags	*(char)
=	O
""	*(char)
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
0	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
initstring	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
+	O
1	int
;	O
argv	*(*(char))
++	O
;	O
}	O
else	O
{	O
initstring	*(char)
=	O
0	int
;	O
}	O
initflagsnum	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
initflags	*(char)
,	O
&	O
ep	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ep	*(char)
==	O
','	O
)	O
{	O
owninitflags	*(char)
=	O
ep	*(char)
+	O
1	int
;	O
if	O
(	O
!	O
consistsof	(*(char),*(char))->(int)
(	O
owninitflags	*(char)
,	O
"ps"	*(char)
)	O
)	O
usageerr	(*(char))->(void)
(	O
"unknown owninitflag"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
*	O
ep	*(char)
)	O
{	O
owninitflags	*(char)
=	O
""	*(char)
;	O
}	O
else	O
{	O
usageerr	(*(char))->(void)
(	O
"bad <initflagsnum>[,<owninitflags>]"	*(char)
)	O
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
0	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
for	O
(	O
cp	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
+	O
1	int
,	O
tc	int
=	O
1	int
;	O
(	O
ch	int
=	O
*	O
cp	*(char)
)	O
;	O
cp	*(char)
++	O
)	O
if	O
(	O
ch	int
==	O
','	O
)	O
tc	int
++	O
;	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
)	O
*	O
(	O
tc	int
+	O
1	int
)	O
)	O
;	O
if	O
(	O
!	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
)	O
{	O
perror	(*(char))->(void)
(	O
"malloc types"	*(char)
)	O
;	O
quitnow	(int)->(void)
(	O
3	int
)	O
;	O
}	O
for	O
(	O
cp	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
+	O
1	int
,	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
ti	int
]	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
cp	*(char)
,	O
&	O
cp	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
(	O
ch	int
=	O
*	O
cp	*(char)
)	O
)	O
{	O
if	O
(	O
ch	int
!=	O
','	O
)	O
usageerr	(*(char))->(void)
(	O
"unexpected char (not comma) in or between types"	*(char)
)	O
;	O
cp	*(char)
++	O
;	O
}	O
}	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
ti	int
]	O
=	O
adns_r_none	int
;	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
=	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
;	O
argv	*(*(char))
++	O
;	O
}	O
else	O
{	O
types_a	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
=	O
0	int
;	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
=	O
defaulttypes	array(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
;	O
}	O
if	O
(	O
!	O
(	O
argv	*(*(char))
[	O
0	int
]	O
&&	O
argv	*(*(char))
[	O
1	int
]	O
)	O
)	O
usageerr	(*(char))->(void)
(	O
"no query domains supplied"	*(char)
)	O
;	O
fdomlist	*(*(char))
=	O
(	O
const	O
char	O
*	O
const	O
*	O
)	O
argv	*(*(char))
+	O
1	int
;	O
for	O
(	O
qc	int
=	O
0	int
;	O
fdomlist	*(*(char))
[	O
qc	int
]	O
;	O
qc	int
++	O
)	O
;	O
for	O
(	O
tc	int
=	O
0	int
;	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
tc	int
]	O
!=	O
adns_r_none	int
;	O
tc	int
++	O
)	O
;	O
mcs	*(struct(*(struct),int,int,*(char)))
=	O
malloc	(long)->(*(void))
(	O
tc	int
?	O
sizeof	O
(	O
*	O
mcs	*(struct(*(struct),int,int,*(char)))
)	O
*	O
qc	int
*	O
tc	int
:	O
1	int
)	O
;	O
if	O
(	O
!	O
mcs	*(struct(*(struct),int,int,*(char)))
)	O
{	O
perror	(*(char))->(void)
(	O
"malloc mcs"	*(char)
)	O
;	O
quitnow	(int)->(void)
(	O
3	int
)	O
;	O
}	O
setvbuf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int,long)->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
,	O
_IOLBF	int
,	O
0	int
)	O
;	O
if	O
(	O
initstring	*(char)
)	O
{	O
r	int
=	O
adns_init_strcfg	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
&	O
ads	*(struct)
,	O
(	O
adns_if_debug	int
|	O
adns_if_noautosys	int
|	O
adns_if_checkc_freq	int
)	O
^	O
initflagsnum	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
initstring	*(char)
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_init	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int,int),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
&	O
ads	*(struct)
,	O
(	O
adns_if_debug	int
|	O
adns_if_noautosys	int
)	O
^	O
initflagsnum	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
r	int
)	O
failure_errno	(*(char),int)->(void)
(	O
"init"	*(char)
,	O
r	int
)	O
;	O
for	O
(	O
qi	int
=	O
0	int
;	O
qi	int
<	O
qc	int
;	O
qi	int
++	O
)	O
{	O
fdom_split	(*(char),*(*(char)),*(int),*(char),int)->(void)
(	O
fdomlist	*(*(char))
[	O
qi	int
]	O
,	O
&	O
domain	*(char)
,	O
&	O
qflags	int
,	O
ownflags	*(char)
,	O
sizeof	O
(	O
ownflags	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
consistsof	(*(char),*(char))->(int)
(	O
ownflags	*(char)
,	O
"a"	*(char)
)	O
)	O
usageerr	(*(char))->(void)
(	O
"unknown ownqueryflag"	*(char)
)	O
;	O
for	O
(	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
&	O
mcs	*(struct(*(struct),int,int,*(char)))
[	O
qi	int
*	O
tc	int
+	O
ti	int
]	O
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
doneyet	int
=	O
0	int
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
fdom	*(char)
=	O
fdomlist	*(*(char))
[	O
qi	int
]	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s flags %d type %d"	*(char)
,	O
domain	*(char)
,	O
qflags	int
,	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
ti	int
]	O
)	O
;	O
r	int
=	O
adns_submit	(*(struct),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int,int),*(void),*(*(struct)))->(int)
(	O
ads	*(struct)
,	O
domain	*(char)
,	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
ti	int
]	O
,	O
qflags	int
,	O
mc	*(struct(*(struct),int,int,*(char)))
,	O
&	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
qu	*(struct)
)	O
;	O
if	O
(	O
r	int
==	O
ENOSYS	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" not implemented\n"	*(char)
)	O
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
qu	*(struct)
=	O
0	int
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
doneyet	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
r	int
)	O
{	O
failure_errno	(*(char),int)->(void)
(	O
"submit"	*(char)
,	O
r	int
)	O
;	O
}	O
else	O
{	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns_rr_info	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(*(char)),*(*(char)),*(int),*(void),*(*(char)))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
types	*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
[	O
ti	int
]	O
,	O
&	O
rrtn	*(char)
,	O
&	O
fmtn	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
' '	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
dumptype	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char))->(void)
(	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
rrtn	*(char)
,	O
fmtn	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" submitted\n"	*(char)
)	O
;	O
}	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
for	O
(	O
qi	int
=	O
0	int
;	O
qi	int
<	O
qc	int
;	O
qi	int
++	O
)	O
{	O
for	O
(	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
&	O
mcs	*(struct(*(struct),int,int,*(char)))
[	O
qi	int
*	O
tc	int
+	O
ti	int
]	O
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
found	int
=	O
0	int
;	O
}	O
}	O
for	O
(	O
adns_forallqueries_begin	(*(struct))->(void)
(	O
ads	*(struct)
)	O
;	O
(	O
qu	*(struct)
=	O
adns_forallqueries_next	(*(struct),*(*(void)))->(*(struct))
(	O
ads	*(struct)
,	O
&	O
mcr	*(void)
)	O
)	O
;	O
)	O
{	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
mcr	*(void)
;	O
assert	O
(	O
qu	*(struct)
==	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
qu	*(struct)
)	O
;	O
assert	O
(	O
!	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
doneyet	int
)	O
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
found	int
=	O
1	int
;	O
}	O
mcw	*(struct(*(struct),int,int,*(char)))
=	O
0	int
;	O
for	O
(	O
qi	int
=	O
0	int
;	O
qi	int
<	O
qc	int
;	O
qi	int
++	O
)	O
{	O
for	O
(	O
ti	int
=	O
0	int
;	O
ti	int
<	O
tc	int
;	O
ti	int
++	O
)	O
{	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
&	O
mcs	*(struct(*(struct),int,int,*(char)))
[	O
qi	int
*	O
tc	int
+	O
ti	int
]	O
;	O
if	O
(	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
doneyet	int
)	O
continue	O
;	O
assert	O
(	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
found	int
)	O
;	O
if	O
(	O
!	O
mcw	*(struct(*(struct),int,int,*(char)))
)	O
mcw	*(struct(*(struct),int,int,*(char)))
=	O
mc	*(struct(*(struct),int,int,*(char)))
;	O
}	O
}	O
if	O
(	O
!	O
mcw	*(struct(*(struct),int,int,*(char)))
)	O
break	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
owninitflags	*(char)
,	O
's'	O
)	O
)	O
{	O
qu	*(struct)
=	O
mcw	*(struct(*(struct),int,int,*(char)))
->	O
qu	*(struct)
;	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
mcw	*(struct(*(struct),int,int,*(char)))
;	O
}	O
else	O
{	O
qu	*(struct)
=	O
0	int
;	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
0	int
;	O
}	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
owninitflags	*(char)
,	O
'p'	O
)	O
)	O
{	O
r	int
=	O
adns_wait_poll	(*(struct),*(*(struct)),*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(void)))->(int)
(	O
ads	*(struct)
,	O
&	O
qu	*(struct)
,	O
&	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
,	O
&	O
mcr	*(void)
)	O
;	O
}	O
else	O
{	O
r	int
=	O
adns_wait	(*(struct),*(*(struct)),*(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(void)))->(int)
(	O
ads	*(struct)
,	O
&	O
qu	*(struct)
,	O
&	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
,	O
&	O
mcr	*(void)
)	O
;	O
}	O
if	O
(	O
r	int
)	O
failure_errno	(*(char),int)->(void)
(	O
"wait/check"	*(char)
,	O
r	int
)	O
;	O
if	O
(	O
mc	*(struct(*(struct),int,int,*(char)))
)	O
assert	O
(	O
mcr	*(void)
==	O
mc	*(struct(*(struct),int,int,*(char)))
)	O
;	O
else	O
mc	*(struct(*(struct),int,int,*(char)))
=	O
mcr	*(void)
;	O
assert	O
(	O
qu	*(struct)
==	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
qu	*(struct)
)	O
;	O
assert	O
(	O
!	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
doneyet	int
)	O
;	O
fdom_split	(*(char),*(*(char)),*(int),*(char),int)->(void)
(	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
fdom	*(char)
,	O
&	O
domain	*(char)
,	O
&	O
qflags	int
,	O
ownflags	*(char)
,	O
sizeof	O
(	O
ownflags	*(char)
)	O
)	O
;	O
if	O
(	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	*(struct(long,long))
,	O
0	int
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"gettimeofday"	*(char)
)	O
;	O
quitnow	(int)->(void)
(	O
3	int
)	O
;	O
}	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns_rr_info	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(*(char)),*(*(char)),*(int),*(void),*(*(char)))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
&	O
rrtn	*(char)
,	O
&	O
fmtn	*(char)
,	O
&	O
len	int
,	O
0	int
,	O
0	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s flags %d type "	*(char)
,	O
domain	*(char)
,	O
qflags	int
)	O
;	O
dumptype	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char))->(void)
(	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
rrtn	*(char)
,	O
fmtn	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s%s: %s; nrrs=%d; cname=%s; owner=%s; ttl=%ld\n"	*(char)
,	O
ownflags	*(char)
[	O
0	int
]	O
?	O
" ownflags="	*(char)
:	O
""	*(char)
,	O
ownflags	*(char)
,	O
strchr	(*(char),int)->(*(char))
(	O
ownflags	*(char)
,	O
'a'	O
)	O
?	O
adns_errabbrev	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
:	O
adns_strerror	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
status	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
,	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
nrrs	int
,	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
cname	*(char)
?	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
cname	*(char)
:	O
"$"	*(char)
,	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
owner	*(char)
?	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
owner	*(char)
:	O
"$"	*(char)
,	O
(	O
long	O
)	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
expires	long
-	O
(	O
long	O
)	O
now	*(struct(long,long))
.	O
tv_sec	long
)	O
;	O
if	O
(	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
nrrs	int
)	O
{	O
assert	O
(	O
!	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
nrrs	int
;	O
i	int
++	O
)	O
{	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
adns_rr_info	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(*(char)),*(*(char)),*(int),*(void),*(*(char)))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
->	O
rrs	union(*(void),*(char),*(*(char)),*(*(struct(int,*(char)))),*(struct(int,union(struct(short,array(char)),struct(short,short,struct`,array(char))))),*(struct(int)),*(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct(int,union`)))),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`)))),*(struct(int,*(char))),*(struct(*(char),*(char),long,long,long,long,long)),*(struct(int,int,int,*(char))),*(struct(int,int,int,struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(struct`)))),*(struct(int,*(char))))
.	O
bytes	*(char)
+	O
i	int
*	O
len	int
,	O
&	O
show	*(char)
)	O
;	O
if	O
(	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
failure_status	(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
"info"	*(char)
,	O
ri	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s\n"	*(char)
,	O
show	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
show	*(char)
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
ans	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,int,int,union(*(void),*(char),*(*(char)),*(*(struct`)),*(struct(int,union`)),*(struct(int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`)),*(struct(array(struct(int,*(char))))),*(struct(array(*(char)))),*(struct(int,struct`)),*(struct(int,*`)),*(struct(*`,*`,long,long,long,long,long)),*(struct(int,int,int,*`)),*(struct(int,int,int,struct`)),*(struct(int,*`)))))
)	O
;	O
mc	*(struct(*(struct),int,int,*(char)))
->	O
doneyet	int
=	O
1	int
;	O
}	O
quitnow	(int)->(void)
(	O
0	int
)	O
;	O
}	O
