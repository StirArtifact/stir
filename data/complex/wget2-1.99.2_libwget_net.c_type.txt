static	O
struct	O
wget_tcp_st	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
=	O
{	O
.	O
sockfd	int
=	O
-	O
1	int
,	O
.	O
dns_timeout	int
=	O
-	O
1	int
,	O
.	O
connect_timeout	int
=	O
-	O
1	int
,	O
.	O
timeout	int
=	O
-	O
1	int
,	O
.	O
family	int
=	O
AF_UNSPEC	O
,	O
.	O
tcp_fastopen	int
=	O
1	int
,	O
}	O
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
hostname	*(char)
,	O
*	O
ip	*(char)
;	O
uint16_t	short
port	short
;	O
long	O
long	O
dns_secs	long long
;	O
}	O
_stats_data_t	struct(*(char),*(char),short,long long)
;	O
int	O
wget_net_init	()->(int)
(	O
void	O
)	O
{	O
int	O
rc	int
=	O
gl_sockets_startup	(int)->(int)
(	O
SOCKETS_2_2	int
)	O
;	O
return	O
rc	int
?	O
-	O
1	int
:	O
0	int
;	O
}	O
int	O
wget_net_deinit	()->(int)
(	O
void	O
)	O
{	O
int	O
rc	int
=	O
gl_sockets_cleanup	()->(int)
(	O
)	O
;	O
return	O
rc	int
?	O
-	O
1	int
:	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_CONST	O
_value_to_family	(int)->(int)
(	O
int	O
value	*(void)
)	O
{	O
switch	O
(	O
value	*(void)
)	O
{	O
case	O
WGET_NET_FAMILY_IPV4	int
:	O
return	O
AF_INET	O
;	O
case	O
WGET_NET_FAMILY_IPV6	int
:	O
return	O
AF_INET6	O
;	O
default	O
:	O
return	O
AF_UNSPEC	O
;	O
}	O
}	O
static	O
int	O
WGET_GCC_CONST	O
_family_to_value	(int)->(int)
(	O
int	O
family	int
)	O
{	O
switch	O
(	O
family	int
)	O
{	O
case	O
AF_INET	O
:	O
return	O
WGET_NET_FAMILY_IPV4	int
;	O
case	O
AF_INET6	O
:	O
return	O
WGET_NET_FAMILY_IPV6	int
;	O
default	O
:	O
return	O
WGET_NET_FAMILY_ANY	int
;	O
}	O
}	O
void	O
wget_tcp_set_dns	(*(struct),*(struct))->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
wget_dns	struct
*	O
dns	*(*(struct))
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
dns	*(*(struct))
=	O
dns	*(*(struct))
;	O
}	O
void	O
wget_tcp_set_tcp_fastopen	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
tcp_fastopen	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
tcp_fastopen	int
=	O
!	O
!	O
tcp_fastopen	int
;	O
}	O
char	O
wget_tcp_get_tcp_fastopen	(*(struct))->(char)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
tcp_fastopen	int
;	O
}	O
void	O
wget_tcp_set_tls_false_start	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
false_start	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
tls_false_start	bool
=	O
!	O
!	O
false_start	int
;	O
}	O
char	O
wget_tcp_get_tls_false_start	(*(struct))->(char)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
tls_false_start	bool
;	O
}	O
void	O
wget_tcp_set_protocol	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
protocol	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
protocol	int
=	O
protocol	int
;	O
}	O
int	O
wget_tcp_get_protocol	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
protocol	int
;	O
}	O
void	O
wget_tcp_set_preferred_family	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
family	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
preferred_family	int
=	O
_value_to_family	(int)->(int)
(	O
family	int
)	O
;	O
}	O
int	O
wget_tcp_get_preferred_family	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
_family_to_value	(int)->(int)
(	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
preferred_family	int
)	O
;	O
}	O
void	O
wget_tcp_set_family	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
family	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
family	int
=	O
_value_to_family	(int)->(int)
(	O
family	int
)	O
;	O
}	O
int	O
wget_tcp_get_family	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
_family_to_value	(int)->(int)
(	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
family	int
)	O
;	O
}	O
int	O
wget_tcp_get_local_port	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	*(*(struct))
)	O
)	O
return	O
0	int
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
addr_store	struct(short,array(char),long)
;	O
struct	O
sockaddr	struct(short,array(char))
*	O
addr	*(struct(short,array(char)))
=	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr_store	struct(short,array(char),long)
;	O
socklen_t	int
addr_len	int
=	O
sizeof	O
(	O
addr_store	struct(short,array(char),long)
)	O
;	O
if	O
(	O
getsockname	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
tcp	*(*(struct))
->	O
sockfd	int
,	O
addr	*(struct(short,array(char)))
,	O
&	O
addr_len	int
)	O
==	O
0	int
)	O
{	O
char	O
s_port	int
[	O
NI_MAXSERV	int
]	O
;	O
if	O
(	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
addr	*(struct(short,array(char)))
,	O
addr_len	int
,	O
NULL	O
,	O
0	int
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICSERV	int
)	O
==	O
0	int
)	O
return	O
atoi	(*(char))->(int)
(	O
s_port	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_tcp_set_connect_timeout	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
timeout	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
connect_timeout	int
=	O
timeout	int
;	O
}	O
void	O
wget_tcp_set_timeout	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
timeout	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
timeout	int
=	O
timeout	int
;	O
}	O
int	O
wget_tcp_get_timeout	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
timeout	int
;	O
}	O
void	O
wget_tcp_set_bind_address	(*(struct),*(char))->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
const	O
char	O
*	O
bind_address	*(char)
)	O
{	O
if	O
(	O
!	O
tcp	*(*(struct))
)	O
tcp	*(*(struct))
=	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
;	O
wget_dns_freeaddrinfo	(*(struct),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(void)
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
&	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
bind_address	*(char)
)	O
{	O
char	O
copy	O
[	O
strlen	(*(char))->(long)
(	O
bind_address	*(char)
)	O
+	O
1	int
]	O
,	O
*	O
s	*(char)
=	O
copy	O
;	O
const	O
char	O
*	O
host	*(char)
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
copy	O
,	O
bind_address	*(char)
,	O
sizeof	O
(	O
copy	O
)	O
)	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'['	O
)	O
{	O
char	O
*	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
']'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
host	*(char)
=	O
s	*(char)
+	O
1	int
;	O
s	*(char)
=	O
p	*(char)
+	O
1	int
;	O
}	O
else	O
{	O
host	*(char)
=	O
s	*(char)
+	O
1	int
;	O
while	O
(	O
*	O
s	*(char)
)	O
s	*(char)
++	O
;	O
}	O
}	O
else	O
{	O
host	*(char)
=	O
s	*(char)
;	O
while	O
(	O
*	O
s	*(char)
&&	O
*	O
s	*(char)
!=	O
':'	O
)	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
s	*(char)
==	O
':'	O
)	O
{	O
*	O
s	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
c_isdigit	(int)->(bool)
(	O
*	O
s	*(char)
)	O
)	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
wget_dns_resolve	(*(struct),*(char),short,int,int)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
host	*(char)
,	O
(	O
uint16_t	short
)	O
atoi	(*(char))->(int)
(	O
s	*(char)
)	O
,	O
tcp	*(*(struct))
->	O
family	int
,	O
tcp	*(*(struct))
->	O
preferred_family	int
)	O
;	O
}	O
else	O
{	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
wget_dns_resolve	(*(struct),*(char),short,int,int)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
host	*(char)
,	O
0	int
,	O
tcp	*(*(struct))
->	O
family	int
,	O
tcp	*(*(struct))
->	O
preferred_family	int
)	O
;	O
}	O
}	O
}	O
void	O
wget_tcp_set_ssl	(*(struct),int)->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
ssl	int
)	O
{	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
ssl	int
=	O
!	O
!	O
ssl	int
;	O
}	O
int	O
wget_tcp_get_ssl	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
ssl	int
;	O
}	O
const	O
char	O
*	O
wget_tcp_get_ip	(*(struct))->(*(char))
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
->	O
ip	*(char)
:	O
NULL	O
;	O
}	O
void	O
wget_tcp_set_ssl_hostname	(*(struct),*(char))->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
const	O
char	O
*	O
hostname	*(char)
)	O
{	O
if	O
(	O
!	O
tcp	*(*(struct))
)	O
tcp	*(*(struct))
=	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
;	O
xfree	O
(	O
tcp	*(*(struct))
->	O
ssl_hostname	*(char)
)	O
;	O
tcp	*(*(struct))
->	O
ssl_hostname	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
hostname	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
wget_tcp_get_ssl_hostname	(*(struct))->(*(char))
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
(	O
tcp	*(*(struct))
?	O
tcp	*(*(struct))
:	O
&	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
)	O
->	O
ssl_hostname	*(char)
;	O
}	O
wget_tcp	struct
*	O
wget_tcp_init	()->(*(struct))
(	O
void	O
)	O
{	O
wget_tcp	struct
*	O
tcp	*(*(struct))
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
wget_tcp	struct
)	O
)	O
;	O
if	O
(	O
tcp	*(*(struct))
)	O
{	O
*	O
tcp	*(*(struct))
=	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
;	O
tcp	*(*(struct))
->	O
ssl_hostname	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
.	O
ssl_hostname	*(char)
)	O
;	O
}	O
return	O
tcp	*(*(struct))
;	O
}	O
void	O
wget_tcp_deinit	(*(*(struct)))->(void)
(	O
wget_tcp	struct
*	O
*	O
_tcp	*(*(struct(*(void),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)))
)	O
{	O
wget_tcp	struct
*	O
tcp	*(*(struct))
;	O
if	O
(	O
!	O
_tcp	*(*(struct(*(void),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)))
)	O
{	O
xfree	O
(	O
_global_tcp	struct(*(void),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)
.	O
ssl_hostname	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
tcp	*(*(struct))
=	O
*	O
_tcp	*(*(struct(*(void),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)))
)	O
)	O
{	O
wget_tcp_close	(*(struct))->(void)
(	O
tcp	*(*(struct))
)	O
;	O
wget_dns_freeaddrinfo	(*(struct),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(void)
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
&	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
xfree	O
(	O
tcp	*(*(struct))
->	O
ssl_hostname	*(char)
)	O
;	O
xfree	O
(	O
tcp	*(*(struct))
->	O
ip	*(char)
)	O
;	O
xfree	O
(	O
tcp	*(*(struct))
)	O
;	O
*	O
_tcp	*(*(struct(*(void),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(struct(int,int,int,int,int,*`,*`,*`)),*(char),*(char),*(struct),int,int,int,int,int,int,int,enum(int,int,int,int),bool,bool,bool,bool)))
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
_set_async	(int)->(void)
(	O
int	O
fd	array(int)
)	O
{	O
int	O
flags	int
;	O
if	O
(	O
(	O
flags	int
=	O
fcntl	(int,int)->(int)
(	O
fd	array(int)
,	O
F_GETFL	int
)	O
)	O
<	O
0	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to get socket flags\n"	*(char)
)	O
)	O
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
fd	array(int)
,	O
F_SETFL	int
,	O
flags	int
|	O
O_NONBLOCK	int
)	O
<	O
0	int
)	O
error_printf_exit	O
(	O
_	O
(	O
"Failed to set socket to non-blocking\n"	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
_set_socket_options	(int)->(void)
(	O
int	O
fd	array(int)
)	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
fd	array(int)
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
void	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
-	O
1	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to set socket option REUSEADDR\n"	*(char)
)	O
)	O
;	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
fd	array(int)
,	O
IPPROTO_TCP	int
,	O
TCP_NODELAY	int
,	O
(	O
void	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
-	O
1	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to set socket option NODELAY\n"	*(char)
)	O
)	O
;	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
fd	array(int)
,	O
IPPROTO_TCP	int
,	O
TCP_FASTOPEN_CONNECT	int
,	O
(	O
void	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
==	O
-	O
1	int
)	O
debug_printf	O
(	O
"Failed to set socket option TCP_FASTOPEN_CONNECT\n"	*(char)
)	O
;	O
}	O
int	O
wget_tcp_ready_2_transfer	(*(struct),int)->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
int	O
flags	int
)	O
{	O
if	O
(	O
likely	O
(	O
tcp	*(*(struct))
)	O
)	O
return	O
wget_ready_2_transfer	(int,int,int)->(int)
(	O
tcp	*(*(struct))
->	O
sockfd	int
,	O
tcp	*(*(struct))
->	O
timeout	int
,	O
flags	int
)	O
;	O
else	O
return	O
-	O
1	int
;	O
}	O
int	O
wget_tcp_connect	(*(struct),*(char),short)->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
)	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
int	O
rc	int
,	O
ret	int
=	O
WGET_E_UNKNOWN	int
;	O
char	O
adr	array(char)
[	O
NI_MAXHOST	int
]	O
,	O
s_port	int
[	O
NI_MAXSERV	int
]	O
;	O
int	O
debug	int
=	O
wget_logger_is_active	(*(struct))->(bool)
(	O
wget_get_logger	(int)->(*(struct))
(	O
WGET_LOGGER_DEBUG	int
)	O
)	O
;	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	*(*(struct))
)	O
)	O
return	O
WGET_E_INVALID	int
;	O
wget_dns_freeaddrinfo	(*(struct),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(void)
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
&	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
wget_dns_resolve	(*(struct),*(char),short,int,int)->(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
host	*(char)
,	O
port	short
,	O
tcp	*(*(struct))
->	O
family	int
,	O
tcp	*(*(struct))
->	O
preferred_family	int
)	O
;	O
for	O
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
rc	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
,	O
adr	array(char)
,	O
sizeof	O
(	O
adr	array(char)
)	O
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
debug_printf	O
(	O
"trying %s:%s...\n"	*(char)
,	O
adr	array(char)
,	O
s_port	int
)	O
;	O
else	O
debug_printf	O
(	O
"trying ???:%s (%s)...\n"	*(char)
,	O
s_port	int
,	O
gai_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
int	O
sockfd	int
;	O
if	O
(	O
(	O
sockfd	int
=	O
socket	(int,int,int)->(int)
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_family	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_socktype	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_protocol	int
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
_set_async	(int)->(void)
(	O
sockfd	int
)	O
;	O
_set_socket_options	(int)->(void)
(	O
sockfd	int
)	O
;	O
if	O
(	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
debug	int
)	O
{	O
rc	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
,	O
adr	array(char)
,	O
sizeof	O
(	O
adr	array(char)
)	O
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
debug_printf	O
(	O
"binding to %s:%s...\n"	*(char)
,	O
adr	array(char)
,	O
s_port	int
)	O
;	O
else	O
debug_printf	O
(	O
"binding to ???:%s (%s)...\n"	*(char)
,	O
s_port	int
,	O
gai_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
}	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
tcp	*(*(struct))
->	O
bind_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
!=	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to bind (%d)\n"	*(char)
)	O
,	O
errno	O
)	O
;	O
close	*((*(void))->(int))
(	O
sockfd	int
)	O
;	O
return	O
WGET_E_UNKNOWN	int
;	O
}	O
}	O
if	O
(	O
tcp	*(*(struct))
->	O
tcp_fastopen	int
)	O
{	O
tcp	*(*(struct))
->	O
connect_addrinfo	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
rc	int
=	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
;	O
tcp	*(*(struct))
->	O
first_send	bool
=	O
0	int
;	O
}	O
else	O
{	O
rc	int
=	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sockfd	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
;	O
tcp	*(*(struct))
->	O
first_send	bool
=	O
0	int
;	O
}	O
if	O
(	O
rc	int
<	O
0	int
&&	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
EINPROGRESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to connect (%d)\n"	*(char)
)	O
,	O
errno	O
)	O
;	O
ret	int
=	O
WGET_E_CONNECT	int
;	O
close	*((*(void))->(int))
(	O
sockfd	int
)	O
;	O
}	O
else	O
{	O
tcp	*(*(struct))
->	O
sockfd	int
=	O
sockfd	int
;	O
if	O
(	O
tcp	*(*(struct))
->	O
ssl	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
wget_ssl_open	(*(struct))->(int)
(	O
tcp	*(*(struct))
)	O
)	O
)	O
{	O
if	O
(	O
ret	int
==	O
WGET_E_CERTIFICATE	int
)	O
{	O
wget_tcp_close	(*(struct))->(void)
(	O
tcp	*(*(struct))
)	O
;	O
break	O
;	O
}	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
ai_tmp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
;	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
NULL	O
;	O
wget_tcp_close	(*(struct))->(void)
(	O
tcp	*(*(struct))
)	O
;	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
=	O
ai_tmp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
continue	O
;	O
}	O
}	O
if	O
(	O
(	O
rc	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
,	O
adr	array(char)
,	O
sizeof	O
(	O
adr	array(char)
)	O
,	O
s_port	int
,	O
sizeof	O
(	O
s_port	int
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
)	O
==	O
0	int
)	O
tcp	*(*(struct))
->	O
ip	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
adr	array(char)
)	O
;	O
else	O
tcp	*(*(struct))
->	O
ip	*(char)
=	O
NULL	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
}	O
else	O
error_printf	O
(	O
_	O
(	O
"Failed to create socket (%d)\n"	*(char)
)	O
,	O
errno	O
)	O
;	O
}	O
return	O
ret	int
;	O
}	O
int	O
wget_tcp_tls_start	(*(struct))->(int)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
return	O
wget_ssl_open	(*(struct))->(int)
(	O
tcp	*(*(struct))
)	O
;	O
}	O
void	O
wget_tcp_tls_stop	(*(struct))->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
if	O
(	O
tcp	*(*(struct))
)	O
wget_ssl_close	(*(*(void)))->(void)
(	O
&	O
tcp	*(*(struct))
->	O
ssl_session	*(void)
)	O
;	O
}	O
ssize_t	long
wget_tcp_read	(*(struct),*(char),long)->(long)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
count	long
)	O
{	O
ssize_t	long
rc	int
;	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	*(*(struct))
||	O
!	O
buf	*(char)
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tcp	*(*(struct))
->	O
ssl_session	*(void)
)	O
{	O
rc	int
=	O
wget_ssl_read_timeout	(*(void),*(char),long,int)->(long)
(	O
tcp	*(*(struct))
->	O
ssl_session	*(void)
,	O
buf	*(char)
,	O
count	long
,	O
tcp	*(*(struct))
->	O
timeout	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
tcp	*(*(struct))
->	O
timeout	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
wget_ready_2_read	(int,int)->(int)
(	O
tcp	*(*(struct))
->	O
sockfd	int
,	O
tcp	*(*(struct))
->	O
timeout	int
)	O
)	O
<=	O
0	int
)	O
return	O
rc	int
;	O
}	O
rc	int
=	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
tcp	*(*(struct))
->	O
sockfd	int
,	O
buf	*(char)
,	O
count	long
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
<	O
0	int
)	O
error_printf	O
(	O
_	O
(	O
"Failed to read %zu bytes (%d)\n"	*(char)
)	O
,	O
count	long
,	O
errno	O
)	O
;	O
return	O
rc	int
;	O
}	O
ssize_t	long
wget_tcp_write	(*(struct),*(char),long)->(long)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
count	long
)	O
{	O
ssize_t	long
nwritten	long
=	O
0	int
;	O
if	O
(	O
unlikely	O
(	O
!	O
tcp	*(*(struct))
||	O
!	O
buf	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
tcp	*(*(struct))
->	O
ssl_session	*(void)
)	O
return	O
wget_ssl_write_timeout	(*(void),*(char),long,int)->(long)
(	O
tcp	*(*(struct))
->	O
ssl_session	*(void)
,	O
buf	*(char)
,	O
count	long
,	O
tcp	*(*(struct))
->	O
timeout	int
)	O
;	O
while	O
(	O
count	long
)	O
{	O
ssize_t	long
n	long
;	O
n	long
=	O
send	(int,*(void),long,int)->(long)
(	O
tcp	*(*(struct))
->	O
sockfd	int
,	O
buf	*(char)
,	O
count	long
,	O
0	int
)	O
;	O
if	O
(	O
n	long
>=	O
0	int
)	O
{	O
nwritten	long
+=	O
n	long
;	O
if	O
(	O
(	O
size_t	long
)	O
n	long
>=	O
count	long
)	O
return	O
nwritten	long
;	O
count	long
-=	O
n	long
;	O
buf	*(char)
+=	O
n	long
;	O
}	O
else	O
{	O
if	O
(	O
errno	O
!=	O
EAGAIN	int
&&	O
errno	O
!=	O
ENOTCONN	int
&&	O
errno	O
!=	O
EINPROGRESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write %zu bytes (%d: %s)\n"	*(char)
)	O
,	O
count	long
,	O
errno	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
tcp	*(*(struct))
->	O
timeout	int
)	O
{	O
int	O
rc	int
=	O
wget_ready_2_write	(int,int)->(int)
(	O
tcp	*(*(struct))
->	O
sockfd	int
,	O
tcp	*(*(struct))
->	O
timeout	int
)	O
;	O
if	O
(	O
rc	int
<=	O
0	int
)	O
return	O
rc	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
ssize_t	long
wget_tcp_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(long)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
)	O
{	O
char	O
sbuf	array(char)
[	O
4096	int
]	O
;	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
buf	*(char)
;	O
ssize_t	long
len2	long
;	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
buf	*(char)
,	O
sbuf	array(char)
,	O
sizeof	O
(	O
sbuf	array(char)
)	O
)	O
;	O
wget_buffer_vprintf	(*(struct(*(char),long,long,bool,bool,bool)),*(char),array(struct(int,int,*(void),*(void))))->(long)
(	O
&	O
buf	*(char)
,	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
len2	long
=	O
wget_tcp_write	(*(struct),*(char),long)->(long)
(	O
tcp	*(*(struct))
,	O
buf	*(char)
.	O
data	*(void)
,	O
buf	*(char)
.	O
length	int
)	O
;	O
wget_buffer_deinit	(*(struct(*(char),long,long,bool,bool,bool)))->(void)
(	O
&	O
buf	*(char)
)	O
;	O
if	O
(	O
len2	long
>	O
0	int
)	O
debug_write	O
(	O
buf	*(char)
.	O
data	*(void)
,	O
len2	long
)	O
;	O
if	O
(	O
len2	long
>	O
0	int
&&	O
(	O
ssize_t	long
)	O
buf	*(char)
.	O
length	int
!=	O
len2	long
)	O
error_printf	O
(	O
_	O
(	O
"%s: internal error: length mismatch %zu != %zd\n"	*(char)
)	O
,	O
__func__	O
,	O
buf	*(char)
.	O
length	int
,	O
len2	long
)	O
;	O
return	O
len2	long
;	O
}	O
ssize_t	long
wget_tcp_printf	(*(struct),*(char))->(long)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
,	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
ssize_t	long
len	long
=	O
wget_tcp_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(long)
(	O
tcp	*(*(struct))
,	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
len	long
;	O
}	O
void	O
wget_tcp_close	(*(struct))->(void)
(	O
wget_tcp	struct
*	O
tcp	*(*(struct))
)	O
{	O
if	O
(	O
likely	O
(	O
tcp	*(*(struct))
)	O
)	O
{	O
wget_tcp_tls_stop	(*(struct))->(void)
(	O
tcp	*(*(struct))
)	O
;	O
if	O
(	O
tcp	*(*(struct))
->	O
sockfd	int
!=	O
-	O
1	int
)	O
{	O
close	*((*(void))->(int))
(	O
tcp	*(*(struct))
->	O
sockfd	int
)	O
;	O
tcp	*(*(struct))
->	O
sockfd	int
=	O
-	O
1	int
;	O
}	O
wget_dns_freeaddrinfo	(*(struct),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(void)
(	O
tcp	*(*(struct))
->	O
dns	*(*(struct))
,	O
&	O
tcp	*(*(struct))
->	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
)	O
;	O
}	O
}	O
