struct	O
transtab	struct(*(char),int)
sysev_transtab	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"ACCESS"	*(char)
,	O
IN_ACCESS	int
}	O
,	O
{	O
"ATTRIB"	*(char)
,	O
IN_ATTRIB	int
}	O
,	O
{	O
"CLOSE_WRITE"	*(char)
,	O
IN_CLOSE_WRITE	int
}	O
,	O
{	O
"CLOSE_NOWRITE"	*(char)
,	O
IN_CLOSE_NOWRITE	int
}	O
,	O
{	O
"CREATE"	*(char)
,	O
IN_CREATE	int
}	O
,	O
{	O
"DELETE"	*(char)
,	O
IN_DELETE	int
}	O
,	O
{	O
"MODIFY"	*(char)
,	O
IN_MODIFY	int
}	O
,	O
{	O
"MOVED_FROM"	*(char)
,	O
IN_MOVED_FROM	int
}	O
,	O
{	O
"MOVED_TO"	*(char)
,	O
IN_MOVED_TO	int
}	O
,	O
{	O
"OPEN"	*(char)
,	O
IN_OPEN	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
event_mask	struct(int,int)
genev_xlat	array(struct(int,int))
[	O
]	O
=	O
{	O
{	O
GENEV_CREATE	int
,	O
IN_CREATE	int
|	O
IN_MOVED_TO	int
}	O
,	O
{	O
GENEV_WRITE	int
,	O
IN_MODIFY	int
|	O
IN_CLOSE_WRITE	int
}	O
,	O
{	O
GENEV_ATTRIB	int
,	O
IN_ATTRIB	int
}	O
,	O
{	O
GENEV_DELETE	int
,	O
IN_DELETE	int
|	O
IN_MOVED_FROM	int
}	O
,	O
{	O
0	int
}	O
}	O
;	O
static	O
int	O
ifd	int
;	O
static	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
*	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
;	O
static	O
size_t	long
wpsize	long
;	O
static	O
int	O
wpreg	(int,*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(int)
(	O
int	O
wd	int
,	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
{	O
if	O
(	O
wd	int
<	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
wd	int
>=	O
wpsize	long
)	O
{	O
size_t	long
n	long
=	O
wpsize	long
;	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
if	O
(	O
n	long
==	O
0	int
)	O
n	long
=	O
sysconf	(int)->(long)
(	O
_SC_OPEN_MAX	int
)	O
;	O
while	O
(	O
wd	int
>=	O
n	long
)	O
{	O
n	long
*=	O
2	int
;	O
if	O
(	O
n	long
<	O
wpsize	long
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
_	O
(	O
"can't allocate memory for fd %d"	*(char)
)	O
,	O
wd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
realloc	(*(void),long)->(*(void))
(	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
,	O
n	long
*	O
sizeof	O
(	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
_	O
(	O
"can't allocate memory for fd %d"	*(char)
)	O
,	O
wd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
+	O
wpsize	long
,	O
0	int
,	O
(	O
n	long
-	O
wpsize	long
)	O
*	O
sizeof	O
(	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
0	int
]	O
)	O
)	O
;	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
=	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
wpsize	long
=	O
n	long
;	O
}	O
watchpoint_ref	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
;	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
wd	int
]	O
=	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
;	O
return	O
0	int
;	O
}	O
static	O
void	O
wpunreg	(int)->(void)
(	O
int	O
wd	int
)	O
{	O
if	O
(	O
wd	int
<	O
0	int
||	O
wd	int
>	O
wpsize	long
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
wd	int
]	O
)	O
{	O
watchpoint_unref	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
wd	int
]	O
)	O
;	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
wd	int
]	O
=	O
NULL	O
;	O
}	O
}	O
static	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpget	(int)->(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
(	O
int	O
wd	int
)	O
{	O
if	O
(	O
wd	int
>=	O
0	int
&&	O
wd	int
<	O
wpsize	long
)	O
return	O
wptab	*(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
[	O
wd	int
]	O
;	O
return	O
NULL	O
;	O
}	O
int	O
sysev_filemask	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(int)
(	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
dp	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
{	O
return	O
0	int
;	O
}	O
void	O
sysev_init	()->(void)
(	O
)	O
{	O
ifd	int
=	O
inotify_init	()->(int)
(	O
)	O
;	O
if	O
(	O
ifd	int
==	O
-	O
1	int
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"inotify_init: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
int	O
sysev_add_watch	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))),struct(int,int))->(int)
(	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
,	O
event_mask	struct(int,int)
mask	struct(int,int)
)	O
{	O
int	O
wd	int
=	O
inotify_add_watch	(int,*(char),int)->(int)
(	O
ifd	int
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
,	O
mask	struct(int,int)
.	O
sys_mask	int
)	O
;	O
if	O
(	O
wd	int
>=	O
0	int
&&	O
wpreg	(int,*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(int)
(	O
wd	int
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
)	O
{	O
inotify_rm_watch	(int,int)->(int)
(	O
ifd	int
,	O
wd	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
wd	int
;	O
}	O
void	O
sysev_rm_watch	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
{	O
wpunreg	(int)->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
wd	int
)	O
;	O
inotify_rm_watch	(int,int)->(int)
(	O
ifd	int
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
wd	int
)	O
;	O
}	O
void	O
remove_watcher	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
dir	*(char)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
;	O
char	O
*	O
fullname	*(char)
=	O
mkfilename	(*(char),*(char))->(*(char))
(	O
dir	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
fullname	*(char)
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_EMERG	int
,	O
"not enough memory: "	*(char)
"cannot look up a watcher to delete"	*(char)
)	O
;	O
return	O
;	O
}	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
=	O
watchpoint_lookup	(*(char))->(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
(	O
fullname	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fullname	*(char)
)	O
;	O
if	O
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
watchpoint_suspend	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
;	O
}	O
static	O
void	O
process_event	(*(struct(int,int,int,int,array(char))))->(void)
(	O
struct	O
inotify_event	struct(int,int,int,int,array(char))
*	O
ep	*(struct(int,int,int,int,array(char)))
)	O
{	O
struct	O
watchpoint	struct(long,int,*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char))),*(char),int,*(struct),int,*(char))
*	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
;	O
char	O
*	O
dirname	*(char)
,	O
*	O
filename	*(char)
;	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
=	O
wpget	(int)->(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
wd	int
)	O
;	O
if	O
(	O
!	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
{	O
if	O
(	O
!	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
&	O
IN_IGNORED	int
)	O
)	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
_	O
(	O
"watcher not found: %d (%s)"	*(char)
)	O
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
wd	int
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
&	O
IN_IGNORED	int
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
_	O
(	O
"%s deleted"	*(char)
)	O
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
)	O
;	O
watchpoint_suspend	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
;	O
return	O
;	O
}	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
&	O
IN_Q_OVERFLOW	int
)	O
{	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"event queue overflow"	*(char)
)	O
;	O
return	O
;	O
}	O
else	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
&	O
IN_UNMOUNT	int
)	O
{	O
return	O
;	O
}	O
else	O
if	O
(	O
!	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
{	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"unrecognized event %x"	*(char)
"for %s"	*(char)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
;	O
else	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"unrecognized event %x"	*(char)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
)	O
;	O
return	O
;	O
}	O
ev_log	(int,*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
;	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
&	O
IN_CREATE	int
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
"%s/%s created"	*(char)
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
)	O
;	O
if	O
(	O
check_new_watcher	(*(char),*(char))->(int)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
>	O
0	int
)	O
return	O
;	O
}	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
len	long
==	O
0	int
)	O
filename	*(char)
=	O
split_pathname	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))),*(*(char)))->(*(char))
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
,	O
&	O
dirname	*(char)
)	O
;	O
else	O
{	O
dirname	*(char)
=	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
;	O
filename	*(char)
=	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
;	O
}	O
watchpoint_run_handlers	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))),int,*(char),*(char))->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
,	O
dirname	*(char)
,	O
filename	*(char)
)	O
;	O
unsplit_pathname	(*(struct(long,int,*(struct(long,int,*`,*`,int,*`,int,*`)),*(char),int,*(struct),int,*(char))))->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
)	O
;	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
mask	struct(int,int)
&	O
(	O
IN_DELETE	int
|	O
IN_MOVED_FROM	int
)	O
)	O
{	O
debug	O
(	O
1	int
,	O
(	O
"%s/%s deleted"	*(char)
,	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
)	O
;	O
remove_watcher	(*(char),*(char))->(void)
(	O
wpt	*(struct(long,int,*(struct(long,int,*(struct`),*(char),int,*(struct`),int,*(char))),*(char),int,*(struct),int,*(char)))
->	O
dirname	*(char)
,	O
ep	*(struct(int,int,int,int,array(char)))
->	O
name	*(char)
)	O
;	O
}	O
}	O
int	O
sysev_select	()->(int)
(	O
)	O
{	O
char	O
buffer	array(char)
[	O
4096	int
]	O
;	O
struct	O
inotify_event	struct(int,int,int,int,array(char))
*	O
ep	*(struct(int,int,int,int,array(char)))
;	O
size_t	long
size	long
;	O
ssize_t	long
rdbytes	long
;	O
rdbytes	long
=	O
read	(int,*(void),long)->(long)
(	O
ifd	int
,	O
buffer	array(char)
,	O
sizeof	O
(	O
buffer	array(char)
)	O
)	O
;	O
if	O
(	O
rdbytes	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
!	O
signo	int
||	O
signo	int
==	O
SIGCHLD	int
||	O
signo	int
==	O
SIGALRM	int
)	O
return	O
0	int
;	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"got signal %d"	*(char)
,	O
signo	int
)	O
;	O
return	O
1	int
;	O
}	O
diag	(int,*(char))->(void)
(	O
LOG_NOTICE	int
,	O
"read failed: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
ep	*(struct(int,int,int,int,array(char)))
=	O
(	O
struct	O
inotify_event	struct(int,int,int,int,array(char))
*	O
)	O
buffer	array(char)
;	O
while	O
(	O
rdbytes	long
)	O
{	O
if	O
(	O
ep	*(struct(int,int,int,int,array(char)))
->	O
wd	int
>=	O
0	int
)	O
process_event	(*(struct(int,int,int,int,array(char))))->(void)
(	O
ep	*(struct(int,int,int,int,array(char)))
)	O
;	O
size	long
=	O
sizeof	O
(	O
*	O
ep	*(struct(int,int,int,int,array(char)))
)	O
+	O
ep	*(struct(int,int,int,int,array(char)))
->	O
len	long
;	O
ep	*(struct(int,int,int,int,array(char)))
=	O
(	O
struct	O
inotify_event	struct(int,int,int,int,array(char))
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ep	*(struct(int,int,int,int,array(char)))
+	O
size	long
)	O
;	O
rdbytes	long
-=	O
size	long
;	O
}	O
return	O
0	int
;	O
}	O
