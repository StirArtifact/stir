static	O
int	O
bessel_yl_small_x	(int,double,*(struct(double,double)))->(int)
(	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
gsl_sf_result	struct(double,double)
num_fact	struct(double,double)
;	O
double	O
den	double
=	O
gsl_sf_pow_int	(double,int)->(double)
(	O
x	double
,	O
l	int
+	O
1	int
)	O
;	O
int	O
stat_df	int
=	O
gsl_sf_doublefact_e	(int,*(struct(double,double)))->(int)
(	O
2	int
*	O
l	int
-	O
1	int
,	O
&	O
num_fact	struct(double,double)
)	O
;	O
if	O
(	O
stat_df	int
!=	O
GSL_SUCCESS	int
||	O
den	double
==	O
0.0	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
const	O
int	O
lmax	int
=	O
200	int
;	O
double	O
t	double
=	O
-	O
0.5	int
*	O
x	double
*	O
x	double
;	O
double	O
sum	double
=	O
1.0	int
;	O
double	O
t_coeff	double
=	O
1.0	int
;	O
double	O
t_power	double
=	O
1.0	int
;	O
double	O
delta	double
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<=	O
lmax	int
;	O
i	int
++	O
)	O
{	O
t_coeff	double
/=	O
i	int
*	O
(	O
2	int
*	O
(	O
i	int
-	O
l	int
)	O
-	O
1	int
)	O
;	O
t_power	double
*=	O
t	double
;	O
delta	double
=	O
t_power	double
*	O
t_coeff	double
;	O
sum	double
+=	O
delta	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
delta	double
/	O
sum	double
)	O
<	O
0.5	int
*	O
GSL_DBL_EPSILON	int
)	O
break	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
num_fact	struct(double,double)
.	O
val	double
/	O
den	double
*	O
sum	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_y0_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
1.0	int
/	O
GSL_DBL_MAX	int
>	O
0.0	int
&&	O
x	double
<	O
1.0	int
/	O
GSL_DBL_MAX	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
cos_result	struct(double,double)
;	O
const	O
int	O
stat	int
=	O
gsl_sf_cos_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
cos_result	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
cos_result	struct(double,double)
.	O
val	double
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
cos_result	struct(double,double)
.	O
err	double
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
stat	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_y1_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
/	O
GSL_SQRT_DBL_MAX	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.25	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
2.0	int
;	O
const	O
double	O
c2	double
=	O
-	O
1.0	int
/	O
8.0	int
;	O
const	O
double	O
c3	double
=	O
1.0	int
/	O
144.0	int
;	O
const	O
double	O
c4	double
=	O
-	O
1.0	int
/	O
5760.0	int
;	O
const	O
double	O
c5	double
=	O
1.0	int
/	O
403200.0	int
;	O
const	O
double	O
c6	double
=	O
-	O
1.0	int
/	O
43545600.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
c6	double
)	O
)	O
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
sum	double
/	O
y	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
cos_result	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
sin_result	struct(double,double)
;	O
const	O
int	O
stat_cos	int
=	O
gsl_sf_cos_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
cos_result	struct(double,double)
)	O
;	O
const	O
int	O
stat_sin	int
=	O
gsl_sf_sin_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
sin_result	struct(double,double)
)	O
;	O
const	O
double	O
cx	double
=	O
cos_result	struct(double,double)
.	O
val	double
;	O
const	O
double	O
sx	double
=	O
sin_result	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
(	O
cx	double
/	O
x	double
+	O
sx	double
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
(	O
fabs	(double)->(double)
(	O
cos_result	struct(double,double)
.	O
err	double
/	O
x	double
)	O
+	O
sin_result	struct(double,double)
.	O
err	double
)	O
/	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
sx	double
/	O
x	double
)	O
+	O
fabs	(double)->(double)
(	O
cx	double
/	O
(	O
x	double
*	O
x	double
)	O
)	O
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_cos	int
,	O
stat_sin	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_y2_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
/	O
GSL_ROOT3_DBL_MAX	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.5	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
1.0	int
/	O
6.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
24.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
144.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
3456.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
1.0	int
/	O
172800.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
14515200.0	int
;	O
const	O
double	O
c7	double
=	O
-	O
1.0	int
/	O
1828915200.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
(	O
c6	double
+	O
y	double
*	O
c7	double
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
3.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
*	O
sum	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
cos_result	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
sin_result	struct(double,double)
;	O
const	O
int	O
stat_cos	int
=	O
gsl_sf_cos_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
cos_result	struct(double,double)
)	O
;	O
const	O
int	O
stat_sin	int
=	O
gsl_sf_sin_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
sin_result	struct(double,double)
)	O
;	O
const	O
double	O
sx	double
=	O
sin_result	struct(double,double)
.	O
val	double
;	O
const	O
double	O
cx	double
=	O
cos_result	struct(double,double)
.	O
val	double
;	O
const	O
double	O
a	double
=	O
3.0	int
/	O
(	O
x	double
*	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
1.0	int
-	O
a	double
)	O
/	O
x	double
*	O
cx	double
-	O
a	double
*	O
sx	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
cos_result	struct(double,double)
.	O
err	double
*	O
fabs	(double)->(double)
(	O
(	O
1.0	int
-	O
a	double
)	O
/	O
x	double
)	O
+	O
sin_result	struct(double,double)
.	O
err	double
*	O
fabs	(double)->(double)
(	O
a	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
cx	double
/	O
x	double
)	O
+	O
fabs	(double)->(double)
(	O
sx	double
/	O
(	O
x	double
*	O
x	double
)	O
)	O
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_cos	int
,	O
stat_sin	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_yl_e	(int,double,*(struct(double,double)))->(int)
(	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
l	int
<	O
0	int
||	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
return	O
gsl_sf_bessel_y0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
1	int
)	O
{	O
return	O
gsl_sf_bessel_y1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
2	int
)	O
{	O
return	O
gsl_sf_bessel_y2_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
3.0	int
)	O
{	O
return	O
bessel_yl_small_x	(int,double,*(struct(double,double)))->(int)
(	O
l	int
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
GSL_ROOT3_DBL_EPSILON	int
*	O
x	double
>	O
(	O
l	int
*	O
l	int
+	O
l	int
+	O
1.0	int
)	O
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Ynu_asympx_e	(double,double,*(struct(double,double)))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
double	O
pre	double
=	O
sqrt	(double)->(double)
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
pre	double
;	O
result	*(struct(double,double))
->	O
err	double
*=	O
pre	double
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
l	int
>	O
40	int
)	O
{	O
int	O
status	int
=	O
gsl_sf_bessel_Ynu_asymp_Olver_e	(double,double,*(struct(double,double)))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
double	O
pre	double
=	O
sqrt	(double)->(double)
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
*=	O
pre	double
;	O
result	*(struct(double,double))
->	O
err	double
*=	O
pre	double
;	O
return	O
status	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
r_by	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
r_bym	struct(double,double)
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_y1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
r_by	struct(double,double)
)	O
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_y0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
r_bym	struct(double,double)
)	O
;	O
double	O
bym	double
=	O
r_bym	struct(double,double)
.	O
val	double
;	O
double	O
by	double
=	O
r_by	struct(double,double)
.	O
val	double
;	O
double	O
byp	double
;	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<	O
l	int
;	O
j	int
++	O
)	O
{	O
byp	double
=	O
(	O
2	int
*	O
j	int
+	O
1	int
)	O
/	O
x	double
*	O
by	double
-	O
bym	double
;	O
bym	double
=	O
by	double
;	O
by	double
=	O
byp	double
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
by	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
+	O
fabs	(double)->(double)
(	O
r_by	struct(double,double)
.	O
err	double
/	O
r_by	struct(double,double)
.	O
val	double
)	O
+	O
fabs	(double)->(double)
(	O
r_bym	struct(double,double)
.	O
err	double
/	O
r_bym	struct(double,double)
.	O
val	double
)	O
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_1	int
,	O
stat_0	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_yl_array	(int,double,*(double))->(int)
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	*(double)
)	O
{	O
if	O
(	O
lmax	int
<	O
0	int
||	O
x	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
lmax	int
==	O
0	int
)	O
{	O
gsl_sf_result	struct(double,double)
result	*(struct(double,double))
;	O
int	O
stat	int
=	O
gsl_sf_bessel_y0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
;	O
result_array	*(double)
[	O
0	int
]	O
=	O
result	*(struct(double,double))
.	O
val	double
;	O
return	O
stat	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
r_yell	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
r_yellm1	struct(double,double)
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_y1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
r_yell	struct(double,double)
)	O
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_y0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
r_yellm1	struct(double,double)
)	O
;	O
double	O
yellp1	double
;	O
double	O
yell	double
=	O
r_yell	struct(double,double)
.	O
val	double
;	O
double	O
yellm1	double
=	O
r_yellm1	struct(double,double)
.	O
val	double
;	O
int	O
ell	int
;	O
result_array	*(double)
[	O
0	int
]	O
=	O
yellm1	double
;	O
result_array	*(double)
[	O
1	int
]	O
=	O
yell	double
;	O
for	O
(	O
ell	int
=	O
1	int
;	O
ell	int
<	O
lmax	int
;	O
ell	int
++	O
)	O
{	O
yellp1	double
=	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
yell	double
-	O
yellm1	double
;	O
result_array	*(double)
[	O
ell	int
+	O
1	int
]	O
=	O
yellp1	double
;	O
yellm1	double
=	O
yell	double
;	O
yell	double
=	O
yellp1	double
;	O
}	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_y0	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_y0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_y1	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_y1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_y2	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_y2_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_yl	(int,double)->(double)
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_yl_e	(int,double,*(struct(double,double)))->(int)
(	O
l	int
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
