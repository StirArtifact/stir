struct	O
match	O
{	O
int	O
prev_index	O
;	O
Sym	O
*	O
prev_match	O
;	O
Sym	O
*	O
first_match	O
;	O
Sym	O
sym	*(struct)
;	O
}	O
;	O
struct	O
sym_id	O
{	O
struct	O
sym_id	O
*	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
char	O
*	O
spec	O
;	O
Table_Id	O
which_table	O
;	O
bfd_boolean	int
has_right	O
;	O
struct	O
match	O
left	O
,	O
right	O
;	O
}	O
;	O
static	O
struct	O
sym_id	O
*	O
id_list	O
;	O
static	O
void	O
parse_spec	O
(	O
char	O
*	O
,	O
Sym	O
*	O
)	O
;	O
static	O
void	O
parse_id	O
(	O
struct	O
sym_id	O
*	O
)	O
;	O
static	O
bfd_boolean	int
match	O
(	O
Sym	O
*	O
,	O
Sym	O
*	O
)	O
;	O
static	O
void	O
extend_match	O
(	O
struct	O
match	O
*	O
,	O
Sym	O
*	O
,	O
Sym_Table	O
*	O
,	O
bfd_boolean	int
)	O
;	O
Sym_Table	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
NUM_TABLES	O
]	O
;	O
static	O
const	O
char	O
*	O
table_name	O
[	O
]	O
=	O
{	O
"INCL_GRAPH"	*(char)
,	O
"EXCL_GRAPH"	*(char)
,	O
"INCL_ARCS"	*(char)
,	O
"EXCL_ARCS"	*(char)
,	O
"INCL_FLAT"	*(char)
,	O
"EXCL_FLAT"	*(char)
,	O
"INCL_TIME"	*(char)
,	O
"EXCL_TIME"	*(char)
,	O
"INCL_ANNO"	*(char)
,	O
"EXCL_ANNO"	*(char)
,	O
"INCL_EXEC"	*(char)
,	O
"EXCL_EXEC"	*(char)
}	O
;	O
static	O
Sym_Table	O
right_ids	O
;	O
static	O
Source_File	O
non_existent_file	O
=	O
{	O
0	int
,	O
"<non-existent-file>"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
;	O
void	O
sym_id_add	O
(	O
const	O
char	O
*	O
spec	O
,	O
Table_Id	O
which_table	O
)	O
{	O
struct	O
sym_id	O
*	O
id	int
;	O
int	O
len	long
=	O
strlen	(*(char))->(long)
(	O
spec	O
)	O
;	O
id	int
=	O
(	O
struct	O
sym_id	O
*	O
)	O
xmalloc	O
(	O
sizeof	O
(	O
*	O
id	int
)	O
+	O
len	long
+	O
1	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
id	int
,	O
0	int
,	O
sizeof	O
(	O
*	O
id	int
)	O
)	O
;	O
id	int
->	O
spec	O
=	O
(	O
char	O
*	O
)	O
id	int
+	O
sizeof	O
(	O
*	O
id	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
id	int
->	O
spec	O
,	O
spec	O
)	O
;	O
id	int
->	O
which_table	O
=	O
which_table	O
;	O
id	int
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
id_list	O
;	O
id_list	O
=	O
id	int
;	O
}	O
static	O
void	O
parse_spec	O
(	O
char	O
*	O
spec	O
,	O
Sym	O
*	O
sym	*(struct)
)	O
{	O
char	O
*	O
colon	O
;	O
sym_init	O
(	O
sym	*(struct)
)	O
;	O
colon	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
spec	O
,	O
':'	O
)	O
;	O
if	O
(	O
colon	O
)	O
{	O
*	O
colon	O
=	O
'\0'	O
;	O
if	O
(	O
colon	O
>	O
spec	O
)	O
{	O
sym	*(struct)
->	O
file	*(void)
=	O
source_file_lookup_name	O
(	O
spec	O
)	O
;	O
if	O
(	O
!	O
sym	*(struct)
->	O
file	*(void)
)	O
sym	*(struct)
->	O
file	*(void)
=	O
&	O
non_existent_file	O
;	O
}	O
spec	O
=	O
colon	O
+	O
1	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
spec	O
)	O
)	O
{	O
if	O
(	O
ISDIGIT	O
(	O
spec	O
[	O
0	int
]	O
)	O
)	O
sym	*(struct)
->	O
line_num	O
=	O
atoi	(*(char))->(int)
(	O
spec	O
)	O
;	O
else	O
sym	*(struct)
->	O
name	*(char)
=	O
spec	O
;	O
}	O
}	O
else	O
if	O
(	O
strlen	(*(char))->(long)
(	O
spec	O
)	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
spec	O
,	O
'.'	O
)	O
)	O
{	O
sym	*(struct)
->	O
file	*(void)
=	O
source_file_lookup_name	O
(	O
spec	O
)	O
;	O
if	O
(	O
!	O
sym	*(struct)
->	O
file	*(void)
)	O
sym	*(struct)
->	O
file	*(void)
=	O
&	O
non_existent_file	O
;	O
}	O
else	O
if	O
(	O
ISDIGIT	O
(	O
*	O
spec	O
)	O
)	O
{	O
sym	*(struct)
->	O
line_num	O
=	O
atoi	(*(char))->(int)
(	O
spec	O
)	O
;	O
}	O
else	O
if	O
(	O
strlen	(*(char))->(long)
(	O
spec	O
)	O
)	O
{	O
sym	*(struct)
->	O
name	*(char)
=	O
spec	O
;	O
}	O
}	O
}	O
static	O
void	O
parse_id	O
(	O
struct	O
sym_id	O
*	O
id	int
)	O
{	O
char	O
*	O
slash	O
;	O
DBG	O
(	O
IDDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[parse_id] %s -> "	*(char)
,	O
id	int
->	O
spec	O
)	O
)	O
;	O
slash	O
=	O
strchr	(*(char),int)->(*(char))
(	O
id	int
->	O
spec	O
,	O
'/'	O
)	O
;	O
if	O
(	O
slash	O
)	O
{	O
parse_spec	O
(	O
slash	O
+	O
1	int
,	O
&	O
id	int
->	O
right	O
.	O
sym	*(struct)
)	O
;	O
*	O
slash	O
=	O
'\0'	O
;	O
id	int
->	O
has_right	O
=	O
TRUE	int
;	O
}	O
parse_spec	O
(	O
id	int
->	O
spec	O
,	O
&	O
id	int
->	O
left	O
.	O
sym	*(struct)
)	O
;	O
if	O
(	O
debug_level	O
&	O
IDDEBUG	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s:"	*(char)
,	O
id	int
->	O
left	O
.	O
sym	*(struct)
.	O
file	*(void)
?	O
id	int
->	O
left	O
.	O
sym	*(struct)
.	O
file	*(void)
->	O
name	*(char)
:	O
"*"	*(char)
)	O
;	O
if	O
(	O
id	int
->	O
left	O
.	O
sym	*(struct)
.	O
name	*(char)
)	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
id	int
->	O
left	O
.	O
sym	*(struct)
.	O
name	*(char)
)	O
;	O
else	O
if	O
(	O
id	int
->	O
left	O
.	O
sym	*(struct)
.	O
line_num	O
)	O
printf	(*(char))->(int)
(	O
"%d"	*(char)
,	O
id	int
->	O
left	O
.	O
sym	*(struct)
.	O
line_num	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"*"	*(char)
)	O
;	O
if	O
(	O
id	int
->	O
has_right	O
)	O
{	O
printf	(*(char))->(int)
(	O
"/%s:"	*(char)
,	O
id	int
->	O
right	O
.	O
sym	*(struct)
.	O
file	*(void)
?	O
id	int
->	O
right	O
.	O
sym	*(struct)
.	O
file	*(void)
->	O
name	*(char)
:	O
"*"	*(char)
)	O
;	O
if	O
(	O
id	int
->	O
right	O
.	O
sym	*(struct)
.	O
name	*(char)
)	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
id	int
->	O
right	O
.	O
sym	*(struct)
.	O
name	*(char)
)	O
;	O
else	O
if	O
(	O
id	int
->	O
right	O
.	O
sym	*(struct)
.	O
line_num	O
)	O
printf	(*(char))->(int)
(	O
"%d"	*(char)
,	O
id	int
->	O
right	O
.	O
sym	*(struct)
.	O
line_num	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"*"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
}	O
static	O
bfd_boolean	int
match	O
(	O
Sym	O
*	O
pattern	O
,	O
Sym	O
*	O
sym	*(struct)
)	O
{	O
if	O
(	O
pattern	O
->	O
file	*(void)
&&	O
pattern	O
->	O
file	*(void)
!=	O
sym	*(struct)
->	O
file	*(void)
)	O
return	O
FALSE	O
;	O
if	O
(	O
pattern	O
->	O
line_num	O
&&	O
pattern	O
->	O
line_num	O
!=	O
sym	*(struct)
->	O
line_num	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
pattern	O
->	O
name	*(char)
)	O
{	O
const	O
char	O
*	O
sym_name	O
=	O
sym	*(struct)
->	O
name	*(char)
;	O
if	O
(	O
*	O
sym_name	O
&&	O
bfd_get_symbol_leading_char	O
(	O
core_bfd	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
)	O
==	O
*	O
sym_name	O
)	O
sym_name	O
++	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
pattern	O
->	O
name	*(char)
,	O
sym_name	O
)	O
!=	O
0	int
)	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
void	O
extend_match	O
(	O
struct	O
match	O
*	O
m	O
,	O
Sym	O
*	O
sym	*(struct)
,	O
Sym_Table	O
*	O
tab	O
,	O
bfd_boolean	int
second_pass	O
)	O
{	O
if	O
(	O
m	O
->	O
prev_match	O
!=	O
sym	*(struct)
-	O
1	int
)	O
{	O
if	O
(	O
second_pass	O
)	O
{	O
tab	O
->	O
base	int
[	O
tab	O
->	O
len	long
]	O
=	O
*	O
sym	*(struct)
;	O
m	O
->	O
prev_index	O
=	O
tab	O
->	O
len	long
;	O
tab	O
->	O
base	int
[	O
tab	O
->	O
len	long
]	O
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
m	O
->	O
first_match	O
;	O
m	O
->	O
first_match	O
=	O
&	O
tab	O
->	O
base	int
[	O
tab	O
->	O
len	long
]	O
;	O
}	O
++	O
tab	O
->	O
len	long
;	O
}	O
if	O
(	O
second_pass	O
)	O
tab	O
->	O
base	int
[	O
m	O
->	O
prev_index	O
]	O
.	O
end_addr	O
=	O
sym	*(struct)
->	O
end_addr	O
;	O
m	O
->	O
prev_match	O
=	O
sym	*(struct)
;	O
}	O
void	O
sym_id_parse	O
(	O
void	O
)	O
{	O
Sym	O
*	O
sym	*(struct)
,	O
*	O
left	O
,	O
*	O
right	O
;	O
struct	O
sym_id	O
*	O
id	int
;	O
Sym_Table	O
*	O
tab	O
;	O
for	O
(	O
id	int
=	O
id_list	O
;	O
id	int
;	O
id	int
=	O
id	int
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
parse_id	O
(	O
id	int
)	O
;	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
for	O
(	O
id	int
=	O
id_list	O
;	O
id	int
;	O
id	int
=	O
id	int
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
match	O
(	O
&	O
id	int
->	O
left	O
.	O
sym	*(struct)
,	O
sym	*(struct)
)	O
)	O
extend_match	O
(	O
&	O
id	int
->	O
left	O
,	O
sym	*(struct)
,	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
id	int
->	O
which_table	O
]	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
id	int
->	O
has_right	O
&&	O
match	O
(	O
&	O
id	int
->	O
right	O
.	O
sym	*(struct)
,	O
sym	*(struct)
)	O
)	O
extend_match	O
(	O
&	O
id	int
->	O
right	O
,	O
sym	*(struct)
,	O
&	O
right_ids	O
,	O
FALSE	O
)	O
;	O
}	O
}	O
for	O
(	O
tab	O
=	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
;	O
tab	O
<	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
NUM_TABLES	O
]	O
;	O
++	O
tab	O
)	O
{	O
if	O
(	O
tab	O
->	O
len	long
)	O
{	O
tab	O
->	O
base	int
=	O
(	O
Sym	O
*	O
)	O
xmalloc	O
(	O
tab	O
->	O
len	long
*	O
sizeof	O
(	O
Sym	O
)	O
)	O
;	O
tab	O
->	O
limit	O
=	O
tab	O
->	O
base	int
+	O
tab	O
->	O
len	long
;	O
tab	O
->	O
len	long
=	O
0	int
;	O
}	O
}	O
if	O
(	O
right_ids	O
.	O
len	long
)	O
{	O
right_ids	O
.	O
base	int
=	O
(	O
Sym	O
*	O
)	O
xmalloc	O
(	O
right_ids	O
.	O
len	long
*	O
sizeof	O
(	O
Sym	O
)	O
)	O
;	O
right_ids	O
.	O
limit	O
=	O
right_ids	O
.	O
base	int
+	O
right_ids	O
.	O
len	long
;	O
right_ids	O
.	O
len	long
=	O
0	int
;	O
}	O
for	O
(	O
sym	*(struct)
=	O
symtab	O
.	O
base	int
;	O
sym	*(struct)
<	O
symtab	O
.	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
for	O
(	O
id	int
=	O
id_list	O
;	O
id	int
;	O
id	int
=	O
id	int
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
match	O
(	O
&	O
id	int
->	O
left	O
.	O
sym	*(struct)
,	O
sym	*(struct)
)	O
)	O
extend_match	O
(	O
&	O
id	int
->	O
left	O
,	O
sym	*(struct)
,	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
id	int
->	O
which_table	O
]	O
,	O
TRUE	int
)	O
;	O
if	O
(	O
id	int
->	O
has_right	O
&&	O
match	O
(	O
&	O
id	int
->	O
right	O
.	O
sym	*(struct)
,	O
sym	*(struct)
)	O
)	O
extend_match	O
(	O
&	O
id	int
->	O
right	O
,	O
sym	*(struct)
,	O
&	O
right_ids	O
,	O
TRUE	int
)	O
;	O
}	O
}	O
for	O
(	O
id	int
=	O
id_list	O
;	O
id	int
;	O
id	int
=	O
id	int
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
id	int
->	O
has_right	O
)	O
{	O
for	O
(	O
left	O
=	O
id	int
->	O
left	O
.	O
first_match	O
;	O
left	O
;	O
left	O
=	O
left	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
for	O
(	O
right	O
=	O
id	int
->	O
right	O
.	O
first_match	O
;	O
right	O
;	O
right	O
=	O
right	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
DBG	O
(	O
IDDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[sym_id_parse]: arc %s:%s(%lx-%lx) -> %s:%s(%lx-%lx) to %s\n"	*(char)
,	O
left	O
->	O
file	*(void)
?	O
left	O
->	O
file	*(void)
->	O
name	*(char)
:	O
"*"	*(char)
,	O
left	O
->	O
name	*(char)
?	O
left	O
->	O
name	*(char)
:	O
"*"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
left	O
->	O
addr	*(void)
,	O
(	O
unsigned	O
long	O
)	O
left	O
->	O
end_addr	O
,	O
right	O
->	O
file	*(void)
?	O
right	O
->	O
file	*(void)
->	O
name	*(char)
:	O
"*"	*(char)
,	O
right	O
->	O
name	*(char)
?	O
right	O
->	O
name	*(char)
:	O
"*"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
right	O
->	O
addr	*(void)
,	O
(	O
unsigned	O
long	O
)	O
right	O
->	O
end_addr	O
,	O
table_name	O
[	O
id	int
->	O
which_table	O
]	O
)	O
)	O
;	O
arc_add	O
(	O
left	O
,	O
right	O
,	O
(	O
unsigned	O
long	O
)	O
0	int
)	O
;	O
}	O
}	O
}	O
}	O
for	O
(	O
tab	O
=	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
0	int
]	O
;	O
tab	O
<	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
NUM_TABLES	O
]	O
;	O
++	O
tab	O
)	O
{	O
DBG	O
(	O
IDDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[sym_id_parse] syms[%s]:\n"	*(char)
,	O
table_name	O
[	O
tab	O
-	O
&	O
syms	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
[	O
0	int
]	O
]	O
)	O
)	O
;	O
symtab_finalize	O
(	O
tab	O
)	O
;	O
}	O
}	O
bfd_boolean	int
sym_id_arc_is_present	O
(	O
Sym_Table	O
*	O
sym_tab	O
,	O
Sym	O
*	O
from	O
,	O
Sym	O
*	O
to	O
)	O
{	O
Sym	O
*	O
sym	*(struct)
;	O
for	O
(	O
sym	*(struct)
=	O
sym_tab	O
->	O
base	int
;	O
sym	*(struct)
<	O
sym_tab	O
->	O
limit	O
;	O
++	O
sym	*(struct)
)	O
{	O
if	O
(	O
from	O
->	O
addr	*(void)
>=	O
sym	*(struct)
->	O
addr	*(void)
&&	O
from	O
->	O
addr	*(void)
<=	O
sym	*(struct)
->	O
end_addr	O
&&	O
arc_lookup	O
(	O
sym	*(struct)
,	O
to	O
)	O
)	O
return	O
TRUE	int
;	O
}	O
return	O
FALSE	O
;	O
}	O
