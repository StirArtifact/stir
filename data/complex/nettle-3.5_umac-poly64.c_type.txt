static	O
uint64_t	long
poly64_mul	(int,int,long)->(long)
(	O
uint32_t	int
kh	int
,	O
uint32_t	int
kl	int
,	O
uint64_t	long
y	long
)	O
{	O
uint64_t	long
yl	long
,	O
yh	long
,	O
pl	long
,	O
ph	long
,	O
ml	long
,	O
mh	long
;	O
yl	long
=	O
y	long
&	O
0xffffffff	int
;	O
yh	long
=	O
y	long
>>	O
32	int
;	O
pl	long
=	O
yl	long
*	O
kl	int
;	O
ph	long
=	O
yh	long
*	O
kh	int
;	O
ml	long
=	O
yh	long
*	O
kl	int
+	O
yl	long
*	O
kh	int
;	O
mh	long
=	O
ml	long
>>	O
32	int
;	O
ml	long
<<=	O
32	int
;	O
pl	long
+=	O
ml	long
;	O
ph	long
+=	O
mh	long
+	O
(	O
pl	long
<	O
ml	long
)	O
;	O
assert	O
(	O
ph	long
<	O
(	O
(	O
uint64_t	long
)	O
1	int
<<	O
57	int
)	O
)	O
;	O
ph	long
*=	O
UMAC_P64_OFFSET	int
;	O
pl	long
+=	O
ph	long
;	O
if	O
(	O
pl	long
<	O
ph	long
)	O
pl	long
+=	O
UMAC_P64_OFFSET	int
;	O
return	O
pl	long
;	O
}	O
uint64_t	long
_umac_poly64	O
(	O
uint32_t	int
kh	int
,	O
uint32_t	int
kl	int
,	O
uint64_t	long
y	long
,	O
uint64_t	long
m	long
)	O
{	O
if	O
(	O
(	O
m	long
>>	O
32	int
)	O
==	O
0xffffffff	int
)	O
{	O
y	long
=	O
poly64_mul	(int,int,long)->(long)
(	O
kh	int
,	O
kl	int
,	O
y	long
)	O
;	O
if	O
(	O
y	long
==	O
0	int
)	O
y	long
=	O
UMAC_P64	O
-	O
1	int
;	O
else	O
y	long
--	O
;	O
m	long
-=	O
UMAC_P64_OFFSET	int
;	O
}	O
y	long
=	O
poly64_mul	(int,int,long)->(long)
(	O
kh	int
,	O
kl	int
,	O
y	long
)	O
;	O
y	long
+=	O
m	long
;	O
if	O
(	O
y	long
<	O
m	long
)	O
y	long
+=	O
UMAC_P64_OFFSET	int
;	O
return	O
y	long
;	O
}	O
