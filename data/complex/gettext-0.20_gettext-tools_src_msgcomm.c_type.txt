static	O
int	O
force_po	int
;	O
static	O
const	O
char	O
*	O
to_code	*(char)
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"add-location"	*(char)
,	O
optional_argument	int
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"color"	*(char)
,	O
optional_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
5	int
}	O
,	O
{	O
"directory"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"escape"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"files-from"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"force-po"	*(char)
,	O
no_argument	int
,	O
&	O
force_po	int
,	O
1	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"indent"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"no-escape"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"no-location"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
7	int
}	O
,	O
{	O
"no-wrap"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"omit-header"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"output"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"output-file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"properties-input"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'P'	O
}	O
,	O
{	O
"properties-output"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"sort-by-file"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"sort-output"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"strict"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"stringtable-input"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
3	int
}	O
,	O
{	O
"stringtable-output"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
4	int
}	O
,	O
{	O
"style"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
6	int
}	O
,	O
{	O
"to-code"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
't'	O
}	O
,	O
{	O
"unique"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'u'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"width"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
"more-than"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'>'	O
}	O
,	O
{	O
"less-than"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'<'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
cnt	int
;	O
int	O
optchar	int
;	O
bool	bool
do_help	bool
=	O
false	int
;	O
bool	bool
do_version	bool
=	O
false	int
;	O
msgdomain_list_ty	struct
*	O
result	*(*(void))
;	O
catalog_input_format_ty	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
=	O
&	O
input_format_po	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
;	O
catalog_output_format_ty	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_po	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
bool	bool
sort_by_msgid	bool
=	O
false	int
;	O
bool	bool
sort_by_filepos	bool
=	O
false	int
;	O
const	O
char	O
*	O
files_from	*(char)
=	O
NULL	O
;	O
string_list_ty	struct
*	O
file_list	*(struct(*(*(char)),long,long))
;	O
char	O
*	O
output_file	*(char)
=	O
NULL	O
;	O
set_program_name	(*(char))->(void)
(	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
error_print_progname	*(()->(void))
=	O
maybe_print_progname	()->(void)
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
"bison-runtime"	*(char)
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
more_than	int
=	O
-	O
1	int
;	O
less_than	int
=	O
-	O
1	int
;	O
use_first	bool
=	O
false	int
;	O
while	O
(	O
(	O
optchar	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"<:>:D:eEf:Fhino:pPst:uVw:"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'>'	O
:	O
{	O
int	O
value	int
;	O
char	O
*	O
endp	*(char)
;	O
value	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
endp	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
endp	*(char)
!=	O
optarg	*(char)
)	O
more_than	int
=	O
value	int
;	O
}	O
break	O
;	O
case	O
'<'	O
:	O
{	O
int	O
value	int
;	O
char	O
*	O
endp	*(char)
;	O
value	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
endp	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
endp	*(char)
!=	O
optarg	*(char)
)	O
less_than	int
=	O
value	int
;	O
}	O
break	O
;	O
case	O
'D'	O
:	O
dir_list_append	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
message_print_style_escape	(bool)->(void)
(	O
false	int
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
message_print_style_escape	(bool)->(void)
(	O
true	int
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
files_from	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'F'	O
:	O
sort_by_filepos	bool
=	O
true	int
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'i'	O
:	O
message_print_style_indent	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
handle_filepos_comment_option	(*(char))->(bool)
(	O
optarg	*(char)
)	O
)	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
output_file	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'p'	O
:	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_properties	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
break	O
;	O
case	O
'P'	O
:	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
=	O
&	O
input_format_properties	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
;	O
break	O
;	O
case	O
's'	O
:	O
sort_by_msgid	bool
=	O
true	int
;	O
break	O
;	O
case	O
'S'	O
:	O
message_print_style_uniforum	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
to_code	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'u'	O
:	O
less_than	int
=	O
2	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
case	O
'w'	O
:	O
{	O
int	O
value	int
;	O
char	O
*	O
endp	*(char)
;	O
value	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
endp	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
endp	*(char)
!=	O
optarg	*(char)
)	O
message_page_width_set	(long)->(void)
(	O
value	int
)	O
;	O
}	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
omit_header	bool
=	O
true	int
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
message_page_width_ignore	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
3	int
:	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
=	O
&	O
input_format_stringtable	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
4	int
:	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
=	O
&	O
output_format_stringtable	struct(*((*(struct(*`,long,long,bool,*`)),*(struct),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
5	int
:	O
if	O
(	O
handle_color_option	(*(char))->(bool)
(	O
optarg	*(char)
)	O
||	O
color_test_mode	bool
)	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
6	int
:	O
handle_style_option	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
7	int
:	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_none	int
)	O
;	O
break	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"1995-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	(*(char))->(*(char))
(	O
"Peter Miller"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
sort_by_msgid	bool
&&	O
sort_by_filepos	bool
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--sort-output"	*(char)
,	O
"--sort-by-file"	*(char)
)	O
;	O
if	O
(	O
files_from	*(char)
!=	O
NULL	O
)	O
file_list	*(struct(*(*(char)),long,long))
=	O
read_names_from_file	(*(char))->(*(struct(*(*(char)),long,long)))
(	O
files_from	*(char)
)	O
;	O
else	O
file_list	*(struct(*(*(char)),long,long))
=	O
string_list_alloc	()->(*(struct(*(*(char)),long,long)))
(	O
)	O
;	O
for	O
(	O
cnt	int
=	O
optind	int
;	O
cnt	int
<	O
argc	int
;	O
++	O
cnt	int
)	O
string_list_append_unique	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
file_list	*(struct(*(*(char)),long,long))
,	O
argv	array(*(char))
[	O
cnt	int
]	O
)	O
;	O
if	O
(	O
file_list	*(struct(*(*(char)),long,long))
->	O
nitems	long
<	O
2	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	int
,	O
0	int
,	O
_	O
(	O
"at least two files must be specified"	*(char)
)	O
)	O
;	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
more_than	int
<	O
0	int
)	O
more_than	int
=	O
(	O
less_than	int
<	O
0	int
?	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
less_than	int
<	O
0	int
)	O
less_than	int
=	O
INT_MAX	O
;	O
if	O
(	O
more_than	int
>=	O
less_than	int
||	O
less_than	int
<	O
2	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"impossible selection criteria specified (%d < n < %d)"	*(char)
)	O
,	O
more_than	int
,	O
less_than	int
)	O
;	O
allow_duplicates	bool
=	O
true	int
;	O
msgcomm_mode	bool
=	O
true	int
;	O
result	*(*(void))
=	O
catenate_msgdomain_list	(*(struct(*(*(char)),long,long)),*(struct(*((*`,*`,*`,*`)->(void)),bool)),*(char))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
file_list	*(struct(*(*(char)),long,long))
,	O
input_syntax	*(struct(*((*(struct`),*(struct`),*(char),*(char))->(void)),bool))
,	O
to_code	*(char)
)	O
;	O
string_list_free	(*(struct(*(*(char)),long,long)))->(void)
(	O
file_list	*(struct(*(*(char)),long,long))
)	O
;	O
if	O
(	O
sort_by_filepos	bool
)	O
msgdomain_list_sort_by_filepos	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
result	*(*(void))
)	O
;	O
else	O
if	O
(	O
sort_by_msgid	bool
)	O
msgdomain_list_sort_by_msgid	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
result	*(*(void))
)	O
;	O
msgdomain_list_print	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),*(struct(*((*`,*`,long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool)),bool,bool)->(void)
(	O
result	*(*(void))
,	O
output_file	*(char)
,	O
output_syntax	*(struct(*((*(struct`),*(struct`),long,bool)->(void)),bool,bool,bool,bool,bool,bool,bool,bool))
,	O
force_po	int
,	O
false	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION] [INPUTFILE]...\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Find messages which are common to two or more of the specified PO files.\nBy using the --more-than option, greater commonality may be requested\nbefore messages are printed.  Conversely, the --less-than option may be\nused to specify less commonality before messages are printed (i.e.\n--less-than=2 will only print the unique messages).  Translations,\ncomments and extracted comments will be preserved, but only from the first\nPO file to define them.  File positions from all PO files will be\ncumulated.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  INPUTFILE ...               input files\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -f, --files-from=FILE       get list of input files from FILE\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -D, --directory=DIRECTORY   add DIRECTORY to list for input files search\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"If input file is -, standard input is read.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -o, --output-file=FILE      write output to specified file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"The results are written to standard output if no output file is specified\nor if it is -.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Message selection:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -<, --less-than=NUMBER      print messages with less than this many\n                              definitions, defaults to infinite if not set\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  ->, --more-than=NUMBER      print messages with more than this many\n                              definitions, defaults to 1 if not set\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -u, --unique                shorthand for --less-than=2, requests\n                              that only unique messages be printed\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file syntax:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -P, --properties-input      input files are in Java .properties syntax\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --stringtable-input     input files are in NeXTstep/GNUstep .strings\n                              syntax\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output details:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --color                 use colors and other text attributes always\n      --color=WHEN            use colors and other text attributes if WHEN.\n                              WHEN may be 'always', 'never', 'auto', or 'html'.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --style=STYLEFILE       specify CSS style rule file for --color\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -e, --no-escape             do not use C escapes in output (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -E, --escape                use C escapes in output, no extended chars\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --force-po              write PO file even if empty\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -i, --indent                write the .po file using indented style\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-location           do not write '#: filename:line' lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -n, --add-location          generate '#: filename:line' lines (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --strict                write out strict Uniforum conforming .po file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -p, --properties-output     write out a Java .properties file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --stringtable-output    write out a NeXTstep/GNUstep .strings file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -w, --width=NUMBER          set output page width\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-wrap               do not break long message lines, longer than\n                              the output page width, into several lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -s, --sort-output           generate sorted output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -F, --sort-by-file          sort output by file location\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --omit-header           don't write header with 'msgid \"\"' entry\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
