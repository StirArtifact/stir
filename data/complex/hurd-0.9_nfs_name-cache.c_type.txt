struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
{	O
struct	O
cacheq_hdr	O
hdr	struct
;	O
char	O
dir_cache_fh	array(char)
[	O
NFS3_FHSIZE	int
]	O
;	O
size_t	long
dir_cache_len	long
;	O
struct	O
node	O
*	O
np	*(struct)
;	O
char	O
name	*(char)
[	O
CACHE_NAME_LEN	int
]	O
;	O
size_t	long
name_len	long
;	O
time_t	long
cache_stamp	long
;	O
int	O
stati	int
;	O
}	O
;	O
static	O
struct	O
cacheq	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
=	O
{	O
sizeof	O
(	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
)	O
}	O
;	O
static	O
pthread_spinlock_t	int
cache_lock	int
=	O
PTHREAD_SPINLOCK_INITIALIZER	O
;	O
static	O
struct	O
stats	struct(long,long,long,long)
{	O
long	O
pos_hits	long
;	O
long	O
neg_hits	long
;	O
long	O
miss	long
;	O
long	O
fetch_errors	long
;	O
}	O
statistics	struct(long,long,long,long)
;	O
struct	O
stats	struct(long,long,long,long)
partial_stats	array(struct(long,long,long,long))
[	O
NPARTIALS	O
]	O
;	O
static	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
*	O
find_cache	(*(char),long,*(char),long)->(*(struct(struct,array(char),long,*(struct),array(char),long,long,int)))
(	O
char	O
*	O
dir	*(char)
,	O
size_t	long
len	long
,	O
const	O
char	O
*	O
name	*(char)
,	O
size_t	long
name_len	long
)	O
{	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
*	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
.	O
mru	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
&&	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
hdr	struct
.	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
,	O
i	int
++	O
)	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
==	O
name_len	long
&&	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_len	long
==	O
len	long
&&	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name	*(char)
[	O
0	int
]	O
==	O
name	*(char)
[	O
0	int
]	O
&&	O
memcmp	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_fh	array(char)
,	O
dir	*(char)
,	O
len	long
)	O
==	O
0	int
&&	O
strcmp	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
stati	int
=	O
i	int
/	O
PARTIAL_THRESH	int
;	O
return	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
}	O
return	O
0	int
;	O
}	O
void	O
enter_lookup_cache	(*(char),long,*(struct),*(char))->(void)
(	O
char	O
*	O
dir	*(char)
,	O
size_t	long
len	long
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
*	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
size_t	long
name_len	long
=	O
strlen	O
(	O
name	*(char)
)	O
;	O
if	O
(	O
name_len	long
>	O
CACHE_NAME_LEN	int
-	O
1	int
)	O
return	O
;	O
pthread_spin_lock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
if	O
(	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
.	O
length	O
==	O
0	int
)	O
cacheq_set_length	()->(int)
(	O
&	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
,	O
MAXCACHE	int
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
find_cache	(*(char),long,*(char),long)->(*(struct(struct,array(char),long,*(struct),array(char),long,long,int)))
(	O
dir	*(char)
,	O
len	long
,	O
name	*(char)
,	O
name_len	long
)	O
?	O
:	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
.	O
lru	O
;	O
memcpy	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_fh	array(char)
,	O
dir	*(char)
,	O
len	long
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_len	long
=	O
len	long
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
netfs_nrele	()->(int)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
=	O
np	*(struct)
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
netfs_nref	()->(int)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
;	O
strcpy	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
=	O
name_len	long
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
cache_stamp	long
=	O
mapped_time	*(struct)
->	O
seconds	O
;	O
cacheq_make_mru	()->(int)
(	O
&	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
;	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
}	O
void	O
purge_lookup_cache	(*(struct),*(char),long)->(void)
(	O
struct	O
node	O
*	O
dp	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
size_t	long
namelen	long
)	O
{	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
*	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
,	O
*	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
pthread_spin_lock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
for	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
.	O
mru	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
{	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
hdr	struct
.	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
==	O
namelen	long
&&	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_len	long
==	O
dp	*(struct)
->	O
nn	O
->	O
handle	struct(long,array(char))
.	O
size	long
&&	O
memcmp	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_fh	array(char)
,	O
dp	*(struct)
->	O
nn	O
->	O
handle	struct(long,array(char))
.	O
data	array(char)
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
dir_cache_len	long
)	O
==	O
0	int
&&	O
strcmp	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
netfs_nrele	()->(int)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
=	O
0	int
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
=	O
0	int
;	O
cacheq_make_lru	()->(int)
(	O
&	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
;	O
}	O
}	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
}	O
void	O
purge_lookup_cache_node	(*(struct))->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
*	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
,	O
*	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
pthread_spin_lock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
for	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
.	O
mru	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
{	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
hdr	struct
.	O
next	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
==	O
np	*(struct)
)	O
{	O
netfs_nrele	()->(int)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
=	O
0	int
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
=	O
0	int
;	O
cacheq_make_lru	()->(int)
(	O
&	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
;	O
}	O
}	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
}	O
void	O
register_neg_hit	(int)->(void)
(	O
int	O
n	int
)	O
{	O
int	O
i	int
;	O
statistics	struct(long,long,long,long)
.	O
neg_hits	long
++	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
partial_stats	array(struct(long,long,long,long))
[	O
i	int
]	O
.	O
miss	long
++	O
;	O
for	O
(	O
;	O
i	int
<	O
NPARTIALS	O
;	O
i	int
++	O
)	O
partial_stats	array(struct(long,long,long,long))
[	O
i	int
]	O
.	O
neg_hits	long
++	O
;	O
}	O
void	O
register_pos_hit	(int)->(void)
(	O
int	O
n	int
)	O
{	O
int	O
i	int
;	O
statistics	struct(long,long,long,long)
.	O
pos_hits	long
++	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
partial_stats	array(struct(long,long,long,long))
[	O
i	int
]	O
.	O
miss	long
++	O
;	O
for	O
(	O
;	O
i	int
<	O
NPARTIALS	O
;	O
i	int
++	O
)	O
partial_stats	array(struct(long,long,long,long))
[	O
i	int
]	O
.	O
pos_hits	long
++	O
;	O
}	O
void	O
register_miss	()->(void)
(	O
)	O
{	O
int	O
i	int
;	O
statistics	struct(long,long,long,long)
.	O
miss	long
++	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NPARTIALS	O
;	O
i	int
++	O
)	O
partial_stats	array(struct(long,long,long,long))
[	O
i	int
]	O
.	O
miss	long
++	O
;	O
}	O
struct	O
node	O
*	O
check_lookup_cache	(*(struct),*(char))->(*(struct))
(	O
struct	O
node	O
*	O
dir	*(char)
,	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
*	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
;	O
pthread_spin_lock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
=	O
find_cache	(*(char),long,*(char),long)->(*(struct(struct,array(char),long,*(struct),array(char),long,long,int)))
(	O
dir	*(char)
->	O
nn	O
->	O
handle	struct(long,array(char))
.	O
data	array(char)
,	O
dir	*(char)
->	O
nn	O
->	O
handle	struct(long,array(char))
.	O
size	long
,	O
name	*(char)
,	O
strlen	O
(	O
name	*(char)
)	O
)	O
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
{	O
int	O
timeout	int
=	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
?	O
name_cache_timeout	int
:	O
name_cache_neg_timeout	int
;	O
if	O
(	O
mapped_time	*(struct)
->	O
seconds	O
-	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
cache_stamp	long
>=	O
timeout	int
)	O
{	O
register_neg_hit	(int)->(void)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
stati	int
)	O
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
netfs_nrele	()->(int)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
)	O
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
name_len	long
=	O
0	int
;	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
=	O
0	int
;	O
cacheq_make_lru	()->(int)
(	O
&	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
;	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
return	O
0	int
;	O
}	O
cacheq_make_mru	()->(int)
(	O
&	O
lookup_cache	struct(struct,array(char),long,*(struct),array(char),long,long,int)
,	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
)	O
;	O
if	O
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
==	O
0	int
)	O
{	O
register_neg_hit	(int)->(void)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
stati	int
)	O
;	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
dir	*(char)
->	O
lock	O
)	O
;	O
return	O
(	O
struct	O
node	O
*	O
)	O
-	O
1	int
;	O
}	O
else	O
{	O
struct	O
node	O
*	O
np	*(struct)
;	O
np	*(struct)
=	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
np	*(struct)
;	O
netfs_nref	()->(int)
(	O
np	*(struct)
)	O
;	O
register_pos_hit	(int)->(void)
(	O
c	*(struct(struct,array(char),long,*(struct),array(char),long,long,int))
->	O
stati	int
)	O
;	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
dir	*(char)
->	O
lock	O
)	O
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
np	*(struct)
->	O
lock	O
)	O
;	O
return	O
np	*(struct)
;	O
}	O
}	O
register_miss	()->(void)
(	O
)	O
;	O
pthread_spin_unlock	(*(int))->(int)
(	O
&	O
cache_lock	int
)	O
;	O
return	O
0	int
;	O
}	O
