char	O
lang_report_defaults	array(char)
[	O
]	O
=	O
"-i --F --f --b"	*(char)
;	O
typedef	O
enum	O
{	O
IP_TEXT	int
,	O
IP_COMMENT	int
,	O
IP_TAG	int
}	O
report_ip_states	enum(int,int,int)
;	O
stream_status	enum(int,int,int,int,int)
get_report_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
,	O
char_status	enum(int,int,int,int)
*	O
status	enum(int,int,int,int)
)	O
{	O
static	O
report_ip_states	enum(int,int,int)
state	*(int)
=	O
IP_TEXT	int
;	O
stream_status	enum(int,int,int,int,int)
retval	enum(int,int,int,int,int)
;	O
static	O
size_t	long
tag_index	long
=	O
0	int
;	O
static	O
long	O
tag_start_char	long
=	O
0	int
;	O
static	O
char	O
tag_name	array(char)
[	O
SYMBOL_LEN	int
]	O
=	O
"UNINITIALIZED"	*(char)
;	O
static	O
long	O
tag_page_number	long
=	O
0	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_NORMAL	int
;	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
IP_TEXT	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
2	int
:	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
tag_index	long
=	O
0	int
;	O
tag_name	array(char)
[	O
tag_index	long
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
tag_start_char	long
=	O
char_number	long
;	O
tag_page_number	long
=	O
page_number	long
;	O
state	*(int)
=	O
IP_TAG	int
;	O
break	O
;	O
case	O
3	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
state	*(int)
=	O
IP_COMMENT	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
3	int
:	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
state	*(int)
=	O
IP_TEXT	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_TAG	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
5	int
:	O
tag_name	array(char)
[	O
tag_index	long
++	O
]	O
=	O
'\0'	O
;	O
add_function	(*(char),long,long,long,*(char))->(void)
(	O
tag_name	array(char)
,	O
tag_start_char	long
,	O
char_number	long
-	O
1	int
,	O
tag_page_number	long
,	O
current_filename	*(char)
)	O
;	O
end_function	(long)->(void)
(	O
page_number	long
)	O
;	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
state	*(int)
=	O
IP_TEXT	int
;	O
break	O
;	O
default	O
:	O
tag_name	array(char)
[	O
tag_index	long
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
;	O
}	O
if	O
(	O
pass	short
==	O
1	int
)	O
*	O
status	enum(int,int,int,int)
=	O
get_function_name_posn	(long,enum(int,int,int,int))->(enum(int,int,int,int))
(	O
char_number	long
,	O
*	O
status	enum(int,int,int,int)
)	O
;	O
return	O
(	O
retval	enum(int,int,int,int,int)
)	O
;	O
}	O
