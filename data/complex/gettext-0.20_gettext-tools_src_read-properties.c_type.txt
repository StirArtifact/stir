static	O
const	O
char	O
*	O
real_file_name	*(char)
;	O
extern	O
lex_pos_ty	struct
gram_pos	struct(*(char),long)
;	O
static	O
char	O
*	O
contents	array(char)
;	O
static	O
size_t	long
contents_length	long
;	O
static	O
bool	bool
assume_utf8	bool
;	O
static	O
size_t	long
position	long
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
if	O
(	O
position	long
==	O
contents_length	long
)	O
return	O
EOF	O
;	O
return	O
(	O
unsigned	O
char	O
)	O
contents	array(char)
[	O
position	long
++	O
]	O
;	O
}	O
static	O
inline	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
!=	O
EOF	O
)	O
position	long
--	O
;	O
}	O
static	O
unsigned	O
char	O
phase2_pushback	array(char)
[	O
2	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
int	O
phase2_getc	()->(int)
(	O
)	O
{	O
int	O
c	char
;	O
if	O
(	O
phase2_pushback_length	int
)	O
c	char
=	O
phase2_pushback	array(char)
[	O
--	O
phase2_pushback_length	int
]	O
;	O
else	O
{	O
c	char
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
'\r'	O
)	O
{	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
'\n'	O
)	O
c	char
=	O
c2	int
;	O
else	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
}	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
gram_pos	struct(*(char),long)
.	O
line_number	long
++	O
;	O
return	O
c	char
;	O
}	O
static	O
void	O
phase2_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
--	O
gram_pos	struct(*(char),long)
.	O
line_number	long
;	O
if	O
(	O
c	char
!=	O
EOF	O
)	O
phase2_pushback	array(char)
[	O
phase2_pushback_length	int
++	O
]	O
=	O
c	char
;	O
}	O
static	O
int	O
phase3_getc	()->(int)
(	O
)	O
{	O
int	O
c	char
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	char
!=	O
'\\'	O
)	O
return	O
c	char
;	O
c	char
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
!=	O
'\n'	O
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
return	O
'\\'	O
;	O
}	O
do	O
c	char
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\f'	O
)	O
;	O
}	O
}	O
static	O
inline	O
void	O
phase3_ungetc	(int)->(void)
(	O
int	O
c	char
)	O
{	O
phase2_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
}	O
static	O
char	O
*	O
conv_from_iso_8859_1	(*(char))->(*(char))
(	O
char	O
*	O
string	*(char)
)	O
{	O
if	O
(	O
is_ascii_string	(*(char))->(bool)
(	O
string	*(char)
)	O
)	O
return	O
string	*(char)
;	O
else	O
{	O
size_t	long
length	*(long)
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
unsigned	O
char	O
*	O
utf8_string	*(char)
=	O
XNMALLOC	O
(	O
2	int
*	O
length	*(long)
+	O
1	int
,	O
unsigned	O
char	O
)	O
;	O
unsigned	O
char	O
*	O
q	*(char)
=	O
utf8_string	*(char)
;	O
const	O
char	O
*	O
str	*(char)
=	O
string	*(char)
;	O
const	O
char	O
*	O
str_limit	*(char)
=	O
str	*(char)
+	O
length	*(long)
;	O
while	O
(	O
str	*(char)
<	O
str_limit	*(char)
)	O
{	O
unsigned	O
int	O
uc	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
str	*(char)
++	O
;	O
int	O
n	long
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
q	*(char)
,	O
uc	int
,	O
6	int
)	O
;	O
assert	O
(	O
n	long
>	O
0	int
)	O
;	O
q	*(char)
+=	O
n	long
;	O
}	O
*	O
q	*(char)
=	O
'\0'	O
;	O
assert	O
(	O
q	*(char)
-	O
utf8_string	*(char)
<=	O
2	int
*	O
length	*(long)
)	O
;	O
return	O
(	O
char	O
*	O
)	O
utf8_string	*(char)
;	O
}	O
}	O
static	O
char	O
*	O
conv_from_java	(*(char))->(*(char))
(	O
char	O
*	O
string	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
string	*(char)
;	O
unsigned	O
char	O
*	O
q	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
string	*(char)
;	O
while	O
(	O
*	O
p	*(void)
!=	O
'\0'	O
)	O
{	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'\\'	O
&&	O
p	*(void)
[	O
1	int
]	O
==	O
'u'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
int	O
c1	int
=	O
(	O
unsigned	O
char	O
)	O
p	*(void)
[	O
2	int
+	O
i	long
]	O
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
goto	O
just_one_byte	O
;	O
}	O
if	O
(	O
i	long
==	O
4	int
)	O
{	O
unsigned	O
int	O
uc	int
;	O
if	O
(	O
n	long
>=	O
0xd800	int
&&	O
n	long
<	O
0xdc00	int
)	O
{	O
if	O
(	O
p	*(void)
[	O
6	int
]	O
==	O
'\\'	O
&&	O
p	*(void)
[	O
7	int
]	O
==	O
'u'	O
)	O
{	O
unsigned	O
int	O
m	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
int	O
c1	int
=	O
(	O
unsigned	O
char	O
)	O
p	*(void)
[	O
8	int
+	O
i	long
]	O
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
m	int
=	O
(	O
m	int
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
m	int
=	O
(	O
m	int
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
m	int
=	O
(	O
m	int
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
goto	O
just_one_byte	O
;	O
}	O
if	O
(	O
i	long
==	O
4	int
&&	O
(	O
m	int
>=	O
0xdc00	int
&&	O
m	int
<	O
0xe000	int
)	O
)	O
{	O
uc	int
=	O
0x10000	int
+	O
(	O
(	O
n	long
-	O
0xd800	int
)	O
<<	O
10	int
)	O
+	O
(	O
m	int
-	O
0xdc00	int
)	O
;	O
p	*(void)
+=	O
12	int
;	O
}	O
else	O
goto	O
just_one_byte	O
;	O
}	O
else	O
goto	O
just_one_byte	O
;	O
}	O
else	O
{	O
uc	int
=	O
n	long
;	O
p	*(void)
+=	O
6	int
;	O
}	O
q	*(char)
+=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
q	*(char)
,	O
uc	int
,	O
6	int
)	O
;	O
continue	O
;	O
}	O
}	O
just_one_byte	O
:	O
*	O
q	*(char)
++	O
=	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(void)
++	O
;	O
}	O
*	O
q	*(char)
=	O
'\0'	O
;	O
return	O
string	*(char)
;	O
}	O
static	O
int	O
phase4_getuc	()->(int)
(	O
)	O
{	O
int	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
return	O
P4_EOF	int
;	O
if	O
(	O
c	char
==	O
'\\'	O
)	O
{	O
int	O
c2	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
't'	O
)	O
return	O
'\t'	O
;	O
if	O
(	O
c2	int
==	O
'n'	O
)	O
return	O
'\n'	O
;	O
if	O
(	O
c2	int
==	O
'r'	O
)	O
return	O
'\r'	O
;	O
if	O
(	O
c2	int
==	O
'f'	O
)	O
return	O
'\f'	O
;	O
if	O
(	O
c2	int
==	O
'u'	O
)	O
{	O
unsigned	O
int	O
n	long
=	O
0	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
i	long
++	O
)	O
{	O
int	O
c1	int
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c1	int
>=	O
'0'	O
&&	O
c1	int
<=	O
'9'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'0'	O
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'A'	O
&&	O
c1	int
<=	O
'F'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'A'	O
+	O
10	int
)	O
;	O
else	O
if	O
(	O
c1	int
>=	O
'a'	O
&&	O
c1	int
<=	O
'f'	O
)	O
n	long
=	O
(	O
n	long
<<	O
4	int
)	O
+	O
(	O
c1	int
-	O
'a'	O
+	O
10	int
)	O
;	O
else	O
{	O
phase3_ungetc	(int)->(void)
(	O
c1	int
)	O
;	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: invalid \\uxxxx syntax for Unicode character"	*(char)
)	O
)	O
;	O
return	O
'u'	O
;	O
}	O
}	O
return	O
UNICODE	O
(	O
n	long
)	O
;	O
}	O
return	O
c2	int
;	O
}	O
else	O
return	O
c	char
;	O
}	O
static	O
char	O
*	O
read_escaped_string	(bool)->(*(char))
(	O
bool	bool
in_key	bool
)	O
{	O
static	O
unsigned	O
char	O
*	O
utf8_buffer	*(char)
;	O
static	O
size_t	long
utf8_buflen	long
;	O
static	O
size_t	long
utf8_allocated	long
;	O
unsigned	O
short	O
utf16_surr	short
;	O
size_t	long
utf16_surr_line	long
;	O
int	O
c	char
;	O
do	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
while	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\f'	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
||	O
c	char
==	O
'\n'	O
)	O
return	O
NULL	O
;	O
utf8_buflen	long
=	O
0	int
;	O
utf16_surr	short
=	O
0	int
;	O
utf16_surr_line	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
in_key	bool
&&	O
(	O
c	char
==	O
'='	O
||	O
c	char
==	O
':'	O
||	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\f'	O
)	O
)	O
{	O
while	O
(	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\r'	O
||	O
c	char
==	O
'\f'	O
)	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
c	char
==	O
'='	O
||	O
c	char
==	O
':'	O
)	O
)	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
break	O
;	O
}	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
c	char
=	O
phase4_getuc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
P4_EOF	int
)	O
break	O
;	O
if	O
(	O
IS_UNICODE	O
(	O
c	char
)	O
)	O
{	O
if	O
(	O
utf16_surr	short
!=	O
0	int
&&	O
(	O
c	char
>=	O
UNICODE	O
(	O
0xdc00	int
)	O
&&	O
c	char
<	O
UNICODE	O
(	O
0xe000	int
)	O
)	O
)	O
{	O
unsigned	O
short	O
utf16buf	array(short)
[	O
2	int
]	O
;	O
ucs4_t	int
uc	int
;	O
int	O
len	int
;	O
utf16buf	array(short)
[	O
0	int
]	O
=	O
utf16_surr	short
;	O
utf16buf	array(short)
[	O
1	int
]	O
=	O
UTF16_VALUE	O
(	O
c	char
)	O
;	O
if	O
(	O
u16_mbtouc	(*(int),*(short),long)->(int)
(	O
&	O
uc	int
,	O
utf16buf	array(short)
,	O
2	int
)	O
!=	O
2	int
)	O
abort	()->(void)
(	O
)	O
;	O
utf8_buffer_ensure_available	O
(	O
6	int
)	O
;	O
len	int
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
utf8_buffer	*(char)
+	O
utf8_buflen	long
,	O
uc	int
,	O
6	int
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: invalid Unicode character"	*(char)
)	O
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
utf8_buflen	long
+=	O
len	int
;	O
utf16_surr	short
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
utf16_surr	short
!=	O
0	int
)	O
{	O
utf8_buffer_append_lone_surrogate	O
(	O
utf16_surr	short
,	O
utf16_surr_line	long
)	O
;	O
utf16_surr	short
=	O
0	int
;	O
}	O
if	O
(	O
c	char
>=	O
UNICODE	O
(	O
0xd800	int
)	O
&&	O
c	char
<	O
UNICODE	O
(	O
0xdc00	int
)	O
)	O
{	O
utf16_surr	short
=	O
UTF16_VALUE	O
(	O
c	char
)	O
;	O
utf16_surr_line	long
=	O
gram_pos	struct(*(char),long)
.	O
line_number	long
;	O
}	O
else	O
if	O
(	O
c	char
>=	O
UNICODE	O
(	O
0xdc00	int
)	O
&&	O
c	char
<	O
UNICODE	O
(	O
0xe000	int
)	O
)	O
utf8_buffer_append_lone_surrogate	O
(	O
UTF16_VALUE	O
(	O
c	char
)	O
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
)	O
;	O
else	O
{	O
ucs4_t	int
uc	int
=	O
UTF16_VALUE	O
(	O
c	char
)	O
;	O
int	O
len	int
;	O
utf8_buffer_ensure_available	O
(	O
3	int
)	O
;	O
len	int
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
utf8_buffer	*(char)
+	O
utf8_buflen	long
,	O
uc	int
,	O
3	int
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
{	O
error_with_progname	bool
=	O
false	int
;	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_ERROR	int
,	O
NULL	O
,	O
real_file_name	*(char)
,	O
gram_pos	struct(*(char),long)
.	O
line_number	long
,	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
,	O
false	int
,	O
_	O
(	O
"warning: invalid Unicode character"	*(char)
)	O
)	O
;	O
error_with_progname	bool
=	O
true	int
;	O
}	O
else	O
utf8_buflen	long
+=	O
len	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
utf16_surr	short
!=	O
0	int
)	O
{	O
utf8_buffer_append_lone_surrogate	O
(	O
utf16_surr	short
,	O
utf16_surr_line	long
)	O
;	O
utf16_surr	short
=	O
0	int
;	O
}	O
if	O
(	O
assume_utf8	bool
)	O
{	O
utf8_buffer_ensure_available	O
(	O
1	int
)	O
;	O
utf8_buffer	*(char)
[	O
utf8_buflen	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
{	O
ucs4_t	int
uc	int
=	O
c	char
;	O
int	O
len	int
;	O
utf8_buffer_ensure_available	O
(	O
2	int
)	O
;	O
len	int
=	O
u8_uctomb	(*(char),int,int)->(int)
(	O
utf8_buffer	*(char)
+	O
utf8_buflen	long
,	O
uc	int
,	O
2	int
)	O
;	O
if	O
(	O
len	int
<	O
0	int
)	O
abort	()->(void)
(	O
)	O
;	O
utf8_buflen	long
+=	O
len	int
;	O
}	O
}	O
c	char
=	O
phase3_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
||	O
c	char
==	O
'\n'	O
)	O
{	O
if	O
(	O
in_key	bool
)	O
phase3_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
utf16_surr	short
!=	O
0	int
)	O
utf8_buffer_append_lone_surrogate	O
(	O
utf16_surr	short
,	O
utf16_surr_line	long
)	O
;	O
{	O
unsigned	O
char	O
*	O
utf8_string	*(char)
=	O
XNMALLOC	O
(	O
utf8_buflen	long
+	O
1	int
,	O
unsigned	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
utf8_string	*(char)
,	O
utf8_buffer	*(char)
,	O
utf8_buflen	long
)	O
;	O
utf8_string	*(char)
[	O
utf8_buflen	long
]	O
=	O
'\0'	O
;	O
return	O
(	O
char	O
*	O
)	O
utf8_string	*(char)
;	O
}	O
}	O
static	O
void	O
properties_parse	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char))->(void)
(	O
abstract_catalog_reader_ty	struct
*	O
this	*(struct(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void))))))
,	O
FILE	struct
*	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
)	O
{	O
contents	array(char)
=	O
fread_file	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(long))->(*(char))
(	O
file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
contents_length	long
)	O
;	O
if	O
(	O
contents	array(char)
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
errno_description	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
po_xerror	*((int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),*(char),long,long,int,*(char))->(void))
(	O
PO_SEVERITY_FATAL_ERROR	int
,	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
xasprintf	(*(char))->(*(char))
(	O
"%s: %s"	*(char)
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_filename	*(char)
)	O
,	O
errno_description	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
assume_utf8	bool
=	O
(	O
u8_check	(*(char),long)->(*(char))
(	O
(	O
uint8_t	char
*	O
)	O
contents	array(char)
,	O
contents_length	long
)	O
==	O
NULL	O
)	O
;	O
position	long
=	O
0	int
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
gram_pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
real_file_name	*(char)
)	O
;	O
gram_pos	struct(*(char),long)
.	O
line_number	long
=	O
1	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
c	char
;	O
bool	bool
comment	*(struct(*(*(char)),long,long))
;	O
bool	bool
hidden	bool
;	O
c	char
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	char
==	O
EOF	O
)	O
break	O
;	O
comment	*(struct(*(*(char)),long,long))
=	O
false	int
;	O
hidden	bool
=	O
false	int
;	O
if	O
(	O
c	char
==	O
'#'	O
)	O
comment	*(struct(*(*(char)),long,long))
=	O
true	int
;	O
else	O
if	O
(	O
c	char
==	O
'!'	O
)	O
{	O
int	O
c2	int
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c2	int
==	O
' '	O
||	O
c2	int
==	O
'\n'	O
||	O
c2	int
==	O
EOF	O
)	O
comment	*(struct(*(*(char)),long,long))
=	O
true	int
;	O
else	O
hidden	bool
=	O
true	int
;	O
phase2_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
}	O
else	O
phase2_ungetc	(int)->(void)
(	O
c	char
)	O
;	O
if	O
(	O
comment	*(struct(*(*(char)),long,long))
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
buflen	long
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	char
=	O
phase2_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
+=	O
100	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
if	O
(	O
c	char
==	O
EOF	O
||	O
c	char
==	O
'\n'	O
)	O
break	O
;	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	char
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
po_callback_comment_dispatcher	(*(char))->(void)
(	O
conv_from_java	(*(char))->(*(char))
(	O
assume_utf8	bool
?	O
buffer	*(char)
:	O
conv_from_iso_8859_1	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
)	O
)	O
;	O
}	O
else	O
{	O
char	O
*	O
msgid	*(char)
;	O
lex_pos_ty	struct
msgid_pos	*(struct(*(char),long))
;	O
msgid_pos	*(struct(*(char),long))
=	O
gram_pos	struct(*(char),long)
;	O
msgid	*(char)
=	O
read_escaped_string	(bool)->(*(char))
(	O
true	int
)	O
;	O
if	O
(	O
msgid	*(char)
==	O
NULL	O
)	O
;	O
else	O
{	O
char	O
*	O
msgstr	*(char)
;	O
lex_pos_ty	struct
msgstr_pos	*(struct(*(char),long))
;	O
bool	bool
force_fuzzy	bool
;	O
msgstr_pos	*(struct(*(char),long))
=	O
gram_pos	struct(*(char),long)
;	O
msgstr	*(char)
=	O
read_escaped_string	(bool)->(*(char))
(	O
false	int
)	O
;	O
if	O
(	O
msgstr	*(char)
==	O
NULL	O
)	O
msgstr	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
force_fuzzy	bool
=	O
(	O
hidden	bool
&&	O
msgid	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
&&	O
msgstr	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
;	O
po_callback_message	(*(char),*(char),*(struct(*(char),long)),*(char),*(char),long,*(struct(*(char),long)),*(char),*(char),*(char),bool,bool)->(void)
(	O
NULL	O
,	O
msgid	*(char)
,	O
&	O
msgid_pos	*(struct(*(char),long))
,	O
NULL	O
,	O
msgstr	*(char)
,	O
strlen	(*(char))->(long)
(	O
msgstr	*(char)
)	O
+	O
1	int
,	O
&	O
msgstr_pos	*(struct(*(char),long))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
force_fuzzy	bool
,	O
false	int
)	O
;	O
}	O
}	O
}	O
free	(*(void))->(void)
(	O
contents	array(char)
)	O
;	O
contents	array(char)
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
gram_pos	struct(*(char),long)
.	O
line_number	long
=	O
0	int
;	O
}	O
const	O
struct	O
catalog_input_format	struct(*((*(struct(*(struct`))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),*(char))->(void)),bool)
input_format_properties	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
=	O
{	O
properties_parse	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char))->(void)
,	O
true	int
}	O
;	O
