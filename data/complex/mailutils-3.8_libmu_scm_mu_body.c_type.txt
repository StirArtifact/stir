static	O
scm_t_bits	O
body_tag	int
;	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
{	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
char	O
*	O
buffer	*(char)
;	O
size_t	long
bufsize	long
;	O
SCM	(*(int))->((*(void),*(struct))->(int))
msg	*(struct)
;	O
}	O
;	O
static	O
size_t	long
mu_scm_body_free	(int)->(long)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
body_smob	int
)	O
{	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
=	O
(	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
)	O
SCM_CDR	()->(int)
(	O
body_smob	int
)	O
;	O
if	O
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
)	O
free	(*(void))->(void)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mu_scm_body_print	(int,int,*(int))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
body_smob	int
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
port	int
,	O
scm_print_state	O
*	O
pstate	*(int)
)	O
{	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
=	O
(	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
)	O
SCM_CDR	()->(int)
(	O
body_smob	int
)	O
;	O
size_t	long
b_size	long
=	O
0	int
,	O
b_lines	long
=	O
0	int
;	O
mu_body_size	(*(struct),*(long))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
body	*(struct)
,	O
&	O
b_size	long
)	O
;	O
mu_body_lines	(*(struct),*(long))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
body	*(struct)
,	O
&	O
b_lines	long
)	O
;	O
scm_puts	()->(int)
(	O
"#<body "	*(char)
,	O
port	int
)	O
;	O
scm_intprint	()->(int)
(	O
b_lines	long
,	O
10	int
,	O
port	int
)	O
;	O
scm_putc	()->(int)
(	O
' '	O
,	O
port	int
)	O
;	O
scm_intprint	()->(int)
(	O
b_size	long
,	O
10	int
,	O
port	int
)	O
;	O
scm_puts	()->(int)
(	O
">"	*(char)
,	O
port	int
)	O
;	O
return	O
1	int
;	O
}	O
int	O
mu_scm_is_body	(int)->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm	int
)	O
{	O
return	O
SCM_NIMP	()->(int)
(	O
scm	int
)	O
&&	O
(	O
long	O
)	O
SCM_CAR	()->(int)
(	O
scm	int
)	O
==	O
body_tag	int
;	O
}	O
SCM	(*(int))->((*(void),*(struct))->(int))
mu_scm_body_create	(int,*(struct))->(int)
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
msg	*(struct)
,	O
mu_body_t	*(struct)
body	*(struct)
)	O
{	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
=	O
scm_gc_malloc	()->(int)
(	O
sizeof	O
(	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
)	O
,	O
"body"	*(char)
)	O
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
msg	*(struct)
=	O
msg	*(struct)
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
body	*(struct)
=	O
body	*(struct)
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
=	O
NULL	O
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
=	O
NULL	O
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
bufsize	long
=	O
0	int
;	O
SCM_RETURN_NEWSMOB	()->(int)
(	O
body_tag	int
,	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_body_p	O
,	O
"mu-body?"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
scm	int
)	O
,	O
"Return @code{true} if @var{scm} is a Mailutils message body object.\n"	*(char)
)	O
{	O
return	O
scm_from_bool	()->(int)
(	O
mu_scm_is_body	(int)->(int)
(	O
scm	int
)	O
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_body_read_line	O
,	O
"mu-body-read-line"	*(char)
,	O
1	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
body	*(struct)
)	O
,	O
"Read next line from the @var{body}."	*(char)
)	O
{	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
;	O
size_t	long
nread	long
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_body	(int)->(int)
(	O
body	*(struct)
)	O
,	O
body	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
=	O
(	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
)	O
SCM_CDR	()->(int)
(	O
body	*(struct)
)	O
;	O
if	O
(	O
!	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
)	O
{	O
status	int
=	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
body	*(struct)
,	O
&	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Cannot get body stream"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
if	O
(	O
!	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
)	O
{	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
bufsize	long
=	O
BUF_SIZE	int
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
ENOMEM	int
,	O
"Cannot allocate memory"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
status	int
=	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
,	O
(	O
char	O
*	O
*	O
)	O
&	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
,	O
&	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
bufsize	long
,	O
&	O
nread	long
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"Error reading from stream"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
if	O
(	O
nread	long
==	O
0	int
)	O
return	O
SCM_EOF_VAL	O
;	O
return	O
scm_from_locale_string	()->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
buffer	*(char)
)	O
;	O
}	O
SCM_DEFINE_PUBLIC	()->(int)
(	O
scm_mu_body_write	O
,	O
"mu-body-write"	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
(	O
SCM	(*(int))->((*(void),*(struct))->(int))
body	*(struct)
,	O
SCM	(*(int))->((*(void),*(struct))->(int))
text	struct(long)
)	O
,	O
"Append @var{text} to message @var{body}. The use of this function is not\n"	*(char)
"recommended. Please, use message ports instead (@pxref{mu-message-get-port}).\n"	*(char)
)	O
{	O
char	O
*	O
ptr	*(*(char))
;	O
size_t	long
len	long
;	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
;	O
int	O
status	int
;	O
SCM_ASSERT	()->(int)
(	O
mu_scm_is_body	(int)->(int)
(	O
body	*(struct)
)	O
,	O
body	*(struct)
,	O
SCM_ARG1	O
,	O
FUNC_NAME	O
)	O
;	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
=	O
(	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
*	O
)	O
SCM_CDR	()->(int)
(	O
body	*(struct)
)	O
;	O
SCM_ASSERT	()->(int)
(	O
scm_is_string	()->(int)
(	O
text	struct(long)
)	O
,	O
text	struct(long)
,	O
SCM_ARG2	O
,	O
FUNC_NAME	O
)	O
;	O
if	O
(	O
!	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
)	O
{	O
status	int
=	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
body	*(struct)
,	O
&	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"mu_body_get_streamref"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
status	int
=	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
,	O
0	int
,	O
SEEK_END	int
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"mu_stream_seek"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
}	O
ptr	*(*(char))
=	O
scm_to_locale_string	()->(int)
(	O
text	struct(long)
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
ptr	*(*(char))
)	O
;	O
status	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mbp	*(struct(*(struct),*(struct),*(char),long,int))
->	O
stream	*(struct)
,	O
ptr	*(*(char))
,	O
len	long
,	O
NULL	O
)	O
;	O
free	(*(void))->(void)
(	O
ptr	*(*(char))
)	O
;	O
if	O
(	O
status	int
)	O
mu_scm_error	(*(char),int,*(char),int)->(void)
(	O
FUNC_NAME	O
,	O
status	int
,	O
"mu_stream_write"	*(char)
,	O
SCM_BOOL_F	O
)	O
;	O
return	O
SCM_BOOL_T	O
;	O
}	O
void	O
mu_scm_body_init	()->(void)
(	O
)	O
{	O
body_tag	int
=	O
scm_make_smob_type	()->(int)
(	O
"body"	*(char)
,	O
sizeof	O
(	O
struct	O
mu_body	struct(*(struct),*(struct),*(char),long,int)
)	O
)	O
;	O
scm_set_smob_free	()->(int)
(	O
body_tag	int
,	O
mu_scm_body_free	(int)->(long)
)	O
;	O
scm_set_smob_print	()->(int)
(	O
body_tag	int
,	O
mu_scm_body_print	(int,int,*(int))->(int)
)	O
;	O
}	O
