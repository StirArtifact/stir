typedef	O
struct	O
_pSLstring_Type	struct(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
{	O
struct	O
_pSLstring_Type	struct(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
;	O
unsigned	O
int	O
ref_count	int
;	O
unsigned	O
long	O
hash	long
;	O
unsigned	O
int	O
len	int
;	O
char	O
bytes	*(struct)
[	O
1	int
]	O
;	O
}	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
;	O
static	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
SLSTRING_HASH_TABLE_SIZE	int
]	O
;	O
static	O
char	O
Single_Char_Strings	array(char)
[	O
256	int
*	O
2	int
]	O
;	O
static	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
SLS_Free_Store	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
MAX_FREE_STORE_LEN	int
]	O
;	O
typedef	O
struct	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
char	O
*	O
str	*(char)
;	O
}	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
;	O
static	O
char	O
*	O
Deleted_String	*(char)
=	O
"*deleted*"	*(char)
;	O
static	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
Cached_Strings	array(struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char)))
[	O
NUM_CACHED_STRINGS	int
]	O
;	O
_INLINE_	O
static	O
void	O
cache_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
{	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
)	O
;	O
cs	short
->	O
str	*(char)
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
;	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
}	O
_INLINE_	O
static	O
void	O
uncache_string	(*(char))->(void)
(	O
char	O
*	O
s	*(char)
)	O
{	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
{	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
NULL	O
;	O
cs	short
->	O
str	*(char)
=	O
Deleted_String	*(char)
;	O
}	O
}	O
typedef	O
unsigned	O
long	O
uint32	long
;	O
_INLINE_	O
unsigned	O
long	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
unsigned	O
char	O
*	O
s	*(char)
,	O
unsigned	O
char	O
*	O
smax	*(char)
)	O
{	O
register	O
uint32	long
a	*(char)
,	O
b	*(char)
,	O
c	int
;	O
unsigned	O
int	O
length	int
=	O
(	O
unsigned	O
int	O
)	O
(	O
smax	*(char)
-	O
s	*(char)
)	O
;	O
unsigned	O
int	O
len	int
=	O
length	int
;	O
a	*(char)
=	O
b	*(char)
=	O
0x9e3779b9	int
;	O
c	int
=	O
0	int
;	O
while	O
(	O
len	int
>=	O
12	int
)	O
{	O
a	*(char)
+=	O
(	O
s	*(char)
[	O
0	int
]	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
1	int
]	O
<<	O
8	int
)	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
2	int
]	O
<<	O
16	int
)	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
3	int
]	O
<<	O
24	int
)	O
)	O
;	O
b	*(char)
+=	O
(	O
s	*(char)
[	O
4	int
]	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
5	int
]	O
<<	O
8	int
)	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
6	int
]	O
<<	O
16	int
)	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
7	int
]	O
<<	O
24	int
)	O
)	O
;	O
c	int
+=	O
(	O
s	*(char)
[	O
8	int
]	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
9	int
]	O
<<	O
8	int
)	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
10	int
]	O
<<	O
16	int
)	O
+	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
11	int
]	O
<<	O
24	int
)	O
)	O
;	O
mix	O
(	O
a	*(char)
,	O
b	*(char)
,	O
c	int
)	O
;	O
s	*(char)
+=	O
12	int
;	O
len	int
-=	O
12	int
;	O
}	O
c	int
+=	O
length	int
;	O
switch	O
(	O
len	int
)	O
{	O
case	O
11	int
:	O
c	int
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
10	int
]	O
<<	O
24	int
)	O
;	O
case	O
10	int
:	O
c	int
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
9	int
]	O
<<	O
16	int
)	O
;	O
case	O
9	int
:	O
c	int
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
8	int
]	O
<<	O
8	int
)	O
;	O
case	O
8	int
:	O
b	*(char)
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
7	int
]	O
<<	O
24	int
)	O
;	O
case	O
7	int
:	O
b	*(char)
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
6	int
]	O
<<	O
16	int
)	O
;	O
case	O
6	int
:	O
b	*(char)
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
5	int
]	O
<<	O
8	int
)	O
;	O
case	O
5	int
:	O
b	*(char)
+=	O
s	*(char)
[	O
4	int
]	O
;	O
case	O
4	int
:	O
a	*(char)
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
3	int
]	O
<<	O
24	int
)	O
;	O
case	O
3	int
:	O
a	*(char)
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
2	int
]	O
<<	O
16	int
)	O
;	O
case	O
2	int
:	O
a	*(char)
+=	O
(	O
(	O
uint32	long
)	O
s	*(char)
[	O
1	int
]	O
<<	O
8	int
)	O
;	O
case	O
1	int
:	O
a	*(char)
+=	O
s	*(char)
[	O
0	int
]	O
;	O
}	O
mix	O
(	O
a	*(char)
,	O
b	*(char)
,	O
c	int
)	O
;	O
return	O
(	O
unsigned	O
long	O
)	O
c	int
;	O
}	O
unsigned	O
long	O
_pSLcompute_string_hash	(*(char))->(long)
(	O
char	O
*	O
s	*(char)
)	O
{	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
return	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
;	O
return	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
+	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
;	O
}	O
_INLINE_	O
static	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
find_string	(*(char),int,long)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
,	O
unsigned	O
long	O
hash	long
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
MAP_HASH_TO_INDEX	O
(	O
hash	long
)	O
]	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
do	O
{	O
if	O
(	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
==	O
hash	long
)	O
&&	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
len	int
==	O
len	int
)	O
&&	O
(	O
0	int
==	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
,	O
len	int
)	O
)	O
)	O
break	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
;	O
}	O
while	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
!=	O
NULL	O
)	O
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
}	O
_INLINE_	O
static	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
find_slstring	(*(char),long)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
long	O
hash	long
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
MAP_HASH_TO_INDEX	O
(	O
hash	long
)	O
]	O
;	O
while	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
!=	O
NULL	O
)	O
{	O
if	O
(	O
s	*(char)
==	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
)	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
;	O
}	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
}	O
_INLINE_	O
static	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
allocate_sls	(int)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
unsigned	O
int	O
len	int
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
(	O
len	int
<	O
MAX_FREE_STORE_LEN	int
)	O
&&	O
(	O
NULL	O
!=	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
SLS_Free_Store	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
len	int
]	O
)	O
)	O
)	O
{	O
SLS_Free_Store	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
len	int
]	O
=	O
NULL	O
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
}	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
)	O
SLmalloc	O
(	O
len	int
+	O
sizeof	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
)	O
)	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
!=	O
NULL	O
)	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
len	int
=	O
len	int
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
}	O
_INLINE_	O
static	O
void	O
free_sls	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
{	O
unsigned	O
int	O
len	int
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
len	int
;	O
if	O
(	O
(	O
len	int
<	O
MAX_FREE_STORE_LEN	int
)	O
&&	O
(	O
SLS_Free_Store	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
len	int
]	O
==	O
NULL	O
)	O
)	O
{	O
SLS_Free_Store	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
len	int
]	O
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
return	O
;	O
}	O
SLfree	O
(	O
(	O
char	O
*	O
)	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
}	O
_INLINE_	O
static	O
char	O
*	O
create_long_string	(*(char),int,long)->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
,	O
unsigned	O
long	O
hash	long
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
find_string	(*(char),int,long)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
s	*(char)
,	O
len	int
,	O
hash	long
)	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
!=	O
NULL	O
)	O
{	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
++	O
;	O
cache_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
;	O
}	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
allocate_sls	(int)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
len	int
)	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
,	O
s	*(char)
,	O
len	int
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
[	O
len	int
]	O
=	O
0	int
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
=	O
1	int
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
=	O
hash	long
;	O
cache_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
hash	long
=	O
MAP_HASH_TO_INDEX	O
(	O
hash	long
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
=	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
hash	long
]	O
;	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
hash	long
]	O
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
;	O
}	O
_INLINE_	O
static	O
char	O
*	O
create_short_string	(*(char),int)->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
)	O
{	O
char	O
ch	int
;	O
if	O
(	O
len	int
)	O
ch	int
=	O
*	O
s	*(char)
;	O
else	O
ch	int
=	O
0	int
;	O
len	int
=	O
2	int
*	O
(	O
unsigned	O
int	O
)	O
(	O
(	O
unsigned	O
char	O
)	O
ch	int
)	O
;	O
Single_Char_Strings	array(char)
[	O
len	int
]	O
=	O
ch	int
;	O
Single_Char_Strings	array(char)
[	O
len	int
+	O
1	int
]	O
=	O
0	int
;	O
return	O
Single_Char_Strings	array(char)
+	O
len	int
;	O
}	O
_INLINE_	O
static	O
SLstr_Type	char
*	O
create_nstring	(*(char),int,*(long))->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
,	O
unsigned	O
long	O
*	O
hash_ptr	*(long)
)	O
{	O
unsigned	O
long	O
hash	long
;	O
if	O
(	O
len	int
<	O
2	int
)	O
return	O
create_short_string	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
len	int
)	O
;	O
hash	long
=	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
(	O
s	*(char)
+	O
len	int
)	O
)	O
;	O
*	O
hash_ptr	*(long)
=	O
hash	long
;	O
return	O
create_long_string	(*(char),int,long)->(*(char))
(	O
s	*(char)
,	O
len	int
,	O
hash	long
)	O
;	O
}	O
SLstr_Type	char
*	O
SLang_create_nslstring	(*(char),int)->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
long	O
hash	long
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
create_nstring	(*(char),int,*(long))->(*(char))
(	O
s	*(char)
,	O
len	int
,	O
&	O
hash	long
)	O
;	O
}	O
char	O
*	O
_pSLstring_make_hashed_string	(*(char),int,*(long))->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
,	O
unsigned	O
long	O
*	O
hashptr	*(long)
)	O
{	O
unsigned	O
long	O
hash	long
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
hash	long
=	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
+	O
len	int
)	O
;	O
*	O
hashptr	*(long)
=	O
hash	long
;	O
if	O
(	O
len	int
<	O
2	int
)	O
return	O
create_short_string	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
len	int
)	O
;	O
return	O
create_long_string	(*(char),int,long)->(*(char))
(	O
s	*(char)
,	O
len	int
,	O
hash	long
)	O
;	O
}	O
char	O
*	O
_pSLstring_dup_hashed_string	(*(char),long)->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
long	O
hash	long
)	O
{	O
unsigned	O
int	O
len	int
;	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
return	O
create_short_string	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
return	O
create_short_string	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
1	int
)	O
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
{	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
+=	O
1	int
;	O
return	O
s	*(char)
;	O
}	O
len	int
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
return	O
create_long_string	(*(char),int,long)->(*(char))
(	O
s	*(char)
,	O
len	int
,	O
hash	long
)	O
;	O
}	O
char	O
*	O
_pSLstring_dup_slstring	(*(char))->(*(char))
(	O
char	O
*	O
s	*(char)
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
s	*(char)
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
{	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
+=	O
1	int
;	O
return	O
s	*(char)
;	O
}	O
if	O
(	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
||	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
)	O
return	O
s	*(char)
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
)	O
(	O
s	*(char)
-	O
offsetof	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
,	O
bytes	*(struct)
[	O
0	int
]	O
)	O
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
++	O
;	O
cache_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
return	O
s	*(char)
;	O
}	O
static	O
void	O
free_sls_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls1	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),int))
;	O
unsigned	O
long	O
hash	long
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
;	O
hash	long
=	O
MAP_HASH_TO_INDEX	O
(	O
hash	long
)	O
;	O
sls1	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
hash	long
]	O
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),int))
=	O
NULL	O
;	O
while	O
(	O
sls1	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
!=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
{	O
prev	*(struct(*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),int))
=	O
sls1	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
sls1	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
sls1	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
;	O
}	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),int))
!=	O
NULL	O
)	O
prev	*(struct(*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),int))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
;	O
else	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
hash	long
]	O
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
;	O
free_sls	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
}	O
_INLINE_	O
static	O
void	O
free_long_string	(*(char),long)->(void)
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
long	O
hash	long
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
NULL	O
==	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
find_slstring	(*(char),long)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
s	*(char)
,	O
hash	long
)	O
)	O
)	O
{	O
SLang_verror	(int,*(char))->(void)
(	O
SL_APPLICATION_ERROR	O
,	O
"invalid attempt to free string:%s"	*(char)
,	O
s	*(char)
)	O
;	O
return	O
;	O
}	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
--	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
!=	O
0	int
)	O
{	O
return	O
;	O
}	O
uncache_string	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
free_sls_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
}	O
void	O
SLang_free_slstring	(*(char))->(void)
(	O
char	O
*	O
s	*(char)
)	O
{	O
unsigned	O
long	O
hash	long
;	O
unsigned	O
int	O
len	int
;	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
<=	O
1	int
)	O
{	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
NULL	O
;	O
cs	short
->	O
str	*(char)
=	O
Deleted_String	*(char)
;	O
free_sls_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
}	O
else	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
-=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
len	int
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
)	O
<	O
2	int
)	O
return	O
;	O
hash	long
=	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
+	O
len	int
)	O
;	O
free_long_string	(*(char),long)->(void)
(	O
s	*(char)
,	O
hash	long
)	O
;	O
}	O
char	O
*	O
SLang_create_slstring	(*(char))->(*(char))
(	O
char	O
*	O
s	*(char)
)	O
{	O
unsigned	O
long	O
hash	long
;	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
{	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
+=	O
1	int
;	O
return	O
s	*(char)
;	O
}	O
return	O
create_nstring	(*(char),int,*(long))->(*(char))
(	O
s	*(char)
,	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
,	O
&	O
hash	long
)	O
;	O
}	O
void	O
_pSLfree_hashed_string	(*(char),int,long)->(void)
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
,	O
unsigned	O
long	O
hash	long
)	O
{	O
if	O
(	O
(	O
s	*(char)
==	O
NULL	O
)	O
||	O
(	O
len	int
<	O
2	int
)	O
)	O
return	O
;	O
free_long_string	(*(char),long)->(void)
(	O
s	*(char)
,	O
hash	long
)	O
;	O
}	O
char	O
*	O
_pSLallocate_slstring	(int)->(*(char))
(	O
unsigned	O
int	O
len	int
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
allocate_sls	(int)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
len	int
)	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
=	O
0	int
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
;	O
}	O
void	O
_pSLunallocate_slstring	(*(char),int)->(void)
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
(	O
void	O
)	O
len	int
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
)	O
(	O
s	*(char)
-	O
offsetof	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
,	O
bytes	*(struct)
[	O
0	int
]	O
)	O
)	O
;	O
free_sls	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
}	O
char	O
*	O
_pSLcreate_via_alloced_slstring	(*(char),int)->(*(char))
(	O
char	O
*	O
s	*(char)
,	O
unsigned	O
int	O
len	int
)	O
{	O
unsigned	O
long	O
hash	long
;	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
len	int
<	O
2	int
)	O
{	O
char	O
*	O
s1	*(char)
=	O
create_short_string	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
len	int
)	O
;	O
_pSLunallocate_slstring	(*(char),int)->(void)
(	O
s	*(char)
,	O
len	int
)	O
;	O
return	O
s1	*(char)
;	O
}	O
hash	long
=	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
+	O
len	int
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
find_string	(*(char),int,long)->(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))
(	O
s	*(char)
,	O
len	int
,	O
hash	long
)	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
!=	O
NULL	O
)	O
{	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
++	O
;	O
_pSLunallocate_slstring	(*(char),int)->(void)
(	O
s	*(char)
,	O
len	int
)	O
;	O
s	*(char)
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
bytes	*(struct)
;	O
cache_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
return	O
s	*(char)
;	O
}	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
)	O
(	O
s	*(char)
-	O
offsetof	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
,	O
bytes	*(struct)
[	O
0	int
]	O
)	O
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
=	O
1	int
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
=	O
hash	long
;	O
cache_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
hash	long
=	O
MAP_HASH_TO_INDEX	O
(	O
hash	long
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
next	*(struct(*(char),*(struct(*(char),*(struct`),char)),char))
=	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
hash	long
]	O
;	O
String_Hash_Table	array(*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char))))
[	O
(	O
unsigned	O
int	O
)	O
hash	long
]	O
=	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
return	O
s	*(char)
;	O
}	O
char	O
*	O
SLang_concat_slstrings	(*(char),*(char))->(*(char))
(	O
char	O
*	O
a	*(char)
,	O
char	O
*	O
b	*(char)
)	O
{	O
unsigned	O
int	O
lena	int
,	O
len	int
;	O
char	O
*	O
c	int
;	O
lena	int
=	O
strlen	(*(char))->(long)
(	O
a	*(char)
)	O
;	O
len	int
=	O
lena	int
+	O
strlen	(*(char))->(long)
(	O
b	*(char)
)	O
;	O
c	int
=	O
_pSLallocate_slstring	(int)->(*(char))
(	O
len	int
)	O
;	O
if	O
(	O
c	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
c	int
,	O
a	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
c	int
+	O
lena	int
,	O
b	*(char)
)	O
;	O
return	O
_pSLcreate_via_alloced_slstring	(*(char),int)->(*(char))
(	O
c	int
,	O
len	int
)	O
;	O
}	O
unsigned	O
int	O
_pSLstring_bytelen	(*(char))->(int)
(	O
SLstr_Type	char
*	O
s	*(char)
)	O
{	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
return	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
len	int
;	O
return	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
}	O
void	O
_pSLang_free_slstring	(*(char))->(void)
(	O
SLstr_Type	char
*	O
s	*(char)
)	O
{	O
Cached_String_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),*(char))
*	O
cs	short
;	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
s	*(char)
==	O
NULL	O
)	O
return	O
;	O
cs	short
=	O
GET_CACHED_STRING	O
(	O
s	*(char)
)	O
;	O
if	O
(	O
cs	short
->	O
str	*(char)
==	O
s	*(char)
)	O
{	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
<=	O
1	int
)	O
{	O
cs	short
->	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
NULL	O
;	O
cs	short
->	O
str	*(char)
=	O
Deleted_String	*(char)
;	O
free_sls_string	(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))))->(void)
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
)	O
;	O
}	O
else	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
-=	O
1	int
;	O
return	O
;	O
}	O
if	O
(	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
||	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
)	O
return	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
)	O
(	O
s	*(char)
-	O
offsetof	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
,	O
bytes	*(struct)
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
>	O
1	int
)	O
{	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
ref_count	int
--	O
;	O
return	O
;	O
}	O
free_long_string	(*(char),long)->(void)
(	O
s	*(char)
,	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
)	O
;	O
}	O
unsigned	O
long	O
_pSLstring_get_hash	(*(char))->(long)
(	O
SLstr_Type	char
*	O
s	*(char)
)	O
{	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
;	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
return	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
[	O
1	int
]	O
==	O
0	int
)	O
return	O
_pSLstring_hash	(*(char),*(char))->(long)
(	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
,	O
(	O
unsigned	O
char	O
*	O
)	O
s	*(char)
+	O
1	int
)	O
;	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
=	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
*	O
)	O
(	O
s	*(char)
-	O
offsetof	O
(	O
SLstring_Type	struct(*(struct(*(struct(*`,int,long,int,array(char))),int,long,int,array(char))),int,long,int,array(char))
,	O
bytes	*(struct)
[	O
0	int
]	O
)	O
)	O
;	O
return	O
sls	*(struct(*(struct(*(struct`),int,long,int,array(char))),int,long,int,array(char)))
->	O
hash	long
;	O
}	O
