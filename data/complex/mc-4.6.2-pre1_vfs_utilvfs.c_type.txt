char	O
*	O
vfs_split_url	(*(char),*(*(char)),*(*(char)),*(int),*(*(char)),int,int)->(*(char))
(	O
const	O
char	O
*	O
path	*(char)
,	O
char	O
*	O
*	O
host	*(*(char))
,	O
char	O
*	O
*	O
user	*(*(char))
,	O
int	O
*	O
port	*(int)
,	O
char	O
*	O
*	O
pass	*(*(char))
,	O
int	O
default_port	int
,	O
int	O
flags	enum(int,int,int,int)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
passwd_info	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
dir	*(struct)
,	O
*	O
colon	*(char)
,	O
*	O
inner_colon	*(char)
,	O
*	O
at	*(char)
,	O
*	O
rest	*(char)
;	O
char	O
*	O
retval	*(void)
;	O
char	O
*	O
const	O
pcopy	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
path	*(char)
)	O
;	O
const	O
char	O
*	O
pend	*(char)
=	O
pcopy	*(char)
+	O
strlen	(*(char))->(long)
(	O
pcopy	*(char)
)	O
;	O
if	O
(	O
pass	*(*(char))
)	O
*	O
pass	*(*(char))
=	O
NULL	O
;	O
*	O
port	*(int)
=	O
default_port	int
;	O
*	O
user	*(*(char))
=	O
NULL	O
;	O
retval	*(void)
=	O
NULL	O
;	O
dir	*(struct)
=	O
pcopy	*(char)
;	O
if	O
(	O
!	O
(	O
flags	enum(int,int,int,int)
&	O
URL_NOSLASH	int
)	O
)	O
{	O
while	O
(	O
*	O
dir	*(struct)
!=	O
PATH_SEP	char
&&	O
*	O
dir	*(struct)
)	O
dir	*(struct)
++	O
;	O
if	O
(	O
*	O
dir	*(struct)
)	O
{	O
retval	*(void)
=	O
g_strdup	(*(char))->(*(char))
(	O
dir	*(struct)
)	O
;	O
*	O
dir	*(struct)
=	O
0	int
;	O
}	O
else	O
retval	*(void)
=	O
g_strdup	(*(char))->(*(char))
(	O
PATH_SEP_STR	*(char)
)	O
;	O
}	O
at	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
pcopy	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
at	*(char)
)	O
{	O
*	O
at	*(char)
=	O
0	int
;	O
inner_colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pcopy	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
inner_colon	*(char)
)	O
{	O
*	O
inner_colon	*(char)
=	O
0	int
;	O
inner_colon	*(char)
++	O
;	O
if	O
(	O
pass	*(*(char))
)	O
*	O
pass	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
inner_colon	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
pcopy	*(char)
!=	O
0	int
)	O
*	O
user	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
pcopy	*(char)
)	O
;	O
if	O
(	O
pend	*(char)
==	O
at	*(char)
+	O
1	int
)	O
rest	*(char)
=	O
at	*(char)
;	O
else	O
rest	*(char)
=	O
at	*(char)
+	O
1	int
;	O
}	O
else	O
rest	*(char)
=	O
pcopy	*(char)
;	O
if	O
(	O
!	O
*	O
user	*(*(char))
&&	O
!	O
(	O
flags	enum(int,int,int,int)
&	O
URL_ALLOW_ANON	int
)	O
)	O
{	O
passwd_info	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
passwd_info	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
&&	O
passwd_info	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
*	O
user	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
passwd_info	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
else	O
{	O
*	O
user	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
"anonymous"	*(char)
)	O
;	O
}	O
endpwent	()->(void)
(	O
)	O
;	O
}	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
rest	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
colon	*(char)
)	O
{	O
*	O
colon	*(char)
=	O
0	int
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
colon	*(char)
+	O
1	int
,	O
"%d"	*(char)
,	O
port	*(int)
)	O
==	O
1	int
)	O
{	O
if	O
(	O
*	O
port	*(int)
<=	O
0	int
||	O
*	O
port	*(int)
>=	O
65536	int
)	O
*	O
port	*(int)
=	O
default_port	int
;	O
}	O
else	O
{	O
while	O
(	O
*	O
(	O
++	O
colon	*(char)
)	O
)	O
{	O
switch	O
(	O
*	O
colon	*(char)
)	O
{	O
case	O
'C'	O
:	O
*	O
port	*(int)
=	O
1	int
;	O
break	O
;	O
case	O
'r'	O
:	O
*	O
port	*(int)
=	O
2	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
host	*(*(char))
)	O
*	O
host	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
rest	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
pcopy	*(char)
)	O
;	O
return	O
retval	*(void)
;	O
}	O
int	O
vfs_finduid	(*(char))->(int)
(	O
const	O
char	O
*	O
uname	*(char)
)	O
{	O
static	O
int	O
saveuid	int
=	O
-	O
993	int
;	O
static	O
char	O
saveuname	array(char)
[	O
TUNMLEN	int
]	O
;	O
static	O
int	O
my_uid	int
=	O
-	O
993	int
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
if	O
(	O
uname	*(char)
[	O
0	int
]	O
!=	O
saveuname	array(char)
[	O
0	int
]	O
||	O
0	int
!=	O
strncmp	(*(char),*(char),long)->(int)
(	O
uname	*(char)
,	O
saveuname	array(char)
,	O
TUNMLEN	int
)	O
)	O
{	O
g_strlcpy	(*(char),*(char),long)->(long)
(	O
saveuname	array(char)
,	O
uname	*(char)
,	O
TUNMLEN	int
)	O
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
uname	*(char)
)	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
saveuid	int
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
;	O
}	O
else	O
{	O
saveuid	int
=	O
myuid	O
;	O
}	O
}	O
return	O
saveuid	int
;	O
}	O
int	O
vfs_findgid	(*(char))->(int)
(	O
const	O
char	O
*	O
gname	*(char)
)	O
{	O
static	O
int	O
savegid	int
=	O
-	O
993	int
;	O
static	O
char	O
savegname	array(char)
[	O
TGNMLEN	int
]	O
;	O
static	O
int	O
my_gid	int
=	O
-	O
993	int
;	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
gr	*(struct(*(char),*(char),int,*(*(char))))
;	O
if	O
(	O
gname	*(char)
[	O
0	int
]	O
!=	O
savegname	array(char)
[	O
0	int
]	O
||	O
0	int
!=	O
strncmp	(*(char),*(char),long)->(int)
(	O
gname	*(char)
,	O
savegname	array(char)
,	O
TUNMLEN	int
)	O
)	O
{	O
g_strlcpy	(*(char),*(char),long)->(long)
(	O
savegname	array(char)
,	O
gname	*(char)
,	O
TUNMLEN	int
)	O
;	O
gr	*(struct(*(char),*(char),int,*(*(char))))
=	O
getgrnam	(*(char))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
gname	*(char)
)	O
;	O
if	O
(	O
gr	*(struct(*(char),*(char),int,*(*(char))))
)	O
{	O
savegid	int
=	O
gr	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_gid	int
;	O
}	O
else	O
{	O
savegid	int
=	O
mygid	O
;	O
}	O
}	O
return	O
savegid	int
;	O
}	O
int	O
vfs_mkstemps	(*(*(char)),*(char),*(char))->(int)
(	O
char	O
*	O
*	O
pname	*(*(char))
,	O
const	O
char	O
*	O
prefix	*(char)
,	O
const	O
char	O
*	O
basename	(*(char))->(*(char))
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
suffix	*(char)
,	O
*	O
q	*(char)
;	O
int	O
shift	int
;	O
int	O
fd	int
;	O
p	*(void)
=	O
strrchr	(*(char),int)->(*(char))
(	O
basename	(*(char))->(*(char))
,	O
PATH_SEP	char
)	O
;	O
if	O
(	O
!	O
p	*(void)
)	O
p	*(void)
=	O
basename	(*(char))->(*(char))
;	O
else	O
p	*(void)
++	O
;	O
shift	int
=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
-	O
(	O
MC_MAXPATHLEN	O
-	O
16	int
)	O
;	O
if	O
(	O
shift	int
>	O
0	int
)	O
p	*(void)
+=	O
shift	int
;	O
suffix	*(char)
=	O
g_malloc	(long)->(*(void))
(	O
MC_MAXPATHLEN	O
)	O
;	O
q	*(char)
=	O
suffix	*(char)
;	O
while	O
(	O
*	O
p	*(void)
&&	O
(	O
*	O
p	*(void)
!=	O
'#'	O
)	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
".-_@"	*(char)
,	O
*	O
p	*(void)
)	O
||	O
isalnum	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(void)
)	O
)	O
*	O
q	*(char)
++	O
=	O
*	O
p	*(void)
;	O
p	*(void)
++	O
;	O
}	O
*	O
q	*(char)
=	O
0	int
;	O
fd	int
=	O
mc_mkstemps	(*(*(char)),*(char),*(char))->(int)
(	O
pname	*(*(char))
,	O
prefix	*(char)
,	O
suffix	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
suffix	*(char)
)	O
;	O
return	O
fd	int
;	O
}	O
static	O
char	O
*	O
columns	*(int)
[	O
MAXCOLS	int
]	O
;	O
static	O
int	O
column_ptr	array(int)
[	O
MAXCOLS	int
]	O
;	O
int	O
vfs_split_text	(*(char))->(int)
(	O
char	O
*	O
p	*(void)
)	O
{	O
char	O
*	O
original	*(char)
=	O
p	*(void)
;	O
int	O
numcols	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
columns	*(int)
,	O
0	int
,	O
sizeof	O
(	O
columns	*(int)
)	O
)	O
;	O
for	O
(	O
numcols	int
=	O
0	int
;	O
*	O
p	*(void)
&&	O
numcols	int
<	O
MAXCOLS	int
;	O
numcols	int
++	O
)	O
{	O
while	O
(	O
*	O
p	*(void)
==	O
' '	O
||	O
*	O
p	*(void)
==	O
'\r'	O
||	O
*	O
p	*(void)
==	O
'\n'	O
)	O
{	O
*	O
p	*(void)
=	O
0	int
;	O
p	*(void)
++	O
;	O
}	O
columns	*(int)
[	O
numcols	int
]	O
=	O
p	*(void)
;	O
column_ptr	array(int)
[	O
numcols	int
]	O
=	O
p	*(void)
-	O
original	*(char)
;	O
while	O
(	O
*	O
p	*(void)
&&	O
*	O
p	*(void)
!=	O
' '	O
&&	O
*	O
p	*(void)
!=	O
'\r'	O
&&	O
*	O
p	*(void)
!=	O
'\n'	O
)	O
p	*(void)
++	O
;	O
}	O
return	O
numcols	int
;	O
}	O
static	O
int	O
is_num	(int)->(int)
(	O
int	O
idx	int
)	O
{	O
char	O
*	O
column	*(long)
=	O
columns	*(int)
[	O
idx	int
]	O
;	O
if	O
(	O
!	O
column	*(long)
||	O
column	*(long)
[	O
0	int
]	O
<	O
'0'	O
||	O
column	*(long)
[	O
0	int
]	O
>	O
'9'	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
is_dos_date	(*(char))->(int)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
len	int
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
0	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
len	int
!=	O
8	int
&&	O
len	int
!=	O
10	int
)	O
return	O
0	int
;	O
if	O
(	O
str	*(char)
[	O
2	int
]	O
!=	O
str	*(char)
[	O
5	int
]	O
)	O
return	O
0	int
;	O
if	O
(	O
!	O
strchr	(*(char),int)->(*(char))
(	O
"\\-/"	*(char)
,	O
(	O
int	O
)	O
str	*(char)
[	O
2	int
]	O
)	O
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
is_week	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
static	O
const	O
char	O
*	O
week	*(char)
=	O
"SunMonTueWedThuFriSat"	*(char)
;	O
const	O
char	O
*	O
pos	*(char)
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
(	O
pos	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
week	*(char)
,	O
str	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
!=	O
NULL	O
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_wday	int
=	O
(	O
pos	*(char)
-	O
week	*(char)
)	O
/	O
3	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
is_month	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
static	O
const	O
char	O
*	O
month	int
=	O
"JanFebMarAprMayJunJulAugSepOctNovDec"	*(char)
;	O
const	O
char	O
*	O
pos	*(char)
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
(	O
pos	*(char)
=	O
strstr	(*(char),*(char))->(*(char))
(	O
month	int
,	O
str	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
!=	O
NULL	O
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
=	O
(	O
pos	*(char)
-	O
month	int
)	O
/	O
3	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
is_localized_month	(*(char))->(int)
(	O
const	O
char	O
*	O
month	int
)	O
{	O
int	O
i	array(int)
=	O
0	int
;	O
if	O
(	O
!	O
month	int
)	O
return	O
0	int
;	O
while	O
(	O
(	O
i	array(int)
<	O
3	int
)	O
&&	O
*	O
month	int
&&	O
!	O
isdigit	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
month	int
)	O
&&	O
!	O
iscntrl	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
month	int
)	O
&&	O
!	O
ispunct	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
month	int
)	O
)	O
{	O
i	array(int)
++	O
;	O
month	int
++	O
;	O
}	O
return	O
(	O
(	O
i	array(int)
==	O
3	int
)	O
&&	O
(	O
*	O
month	int
==	O
0	int
)	O
)	O
;	O
}	O
static	O
int	O
is_time	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
p2	*(char)
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
(	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
':'	O
)	O
)	O
&&	O
(	O
p2	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
':'	O
)	O
)	O
)	O
{	O
if	O
(	O
p	*(void)
!=	O
p2	*(char)
)	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
"%2d:%2d:%2d"	*(char)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_sec	int
)	O
!=	O
3	int
)	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
"%2d:%2d"	*(char)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
)	O
!=	O
2	int
)	O
return	O
0	int
;	O
}	O
}	O
else	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
int	O
is_year	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
char	O
*	O
str	*(char)
,	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
{	O
long	O
year	int
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
':'	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
!=	O
4	int
)	O
return	O
0	int
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
str	*(char)
,	O
"%ld"	*(char)
,	O
&	O
year	int
)	O
!=	O
1	int
)	O
return	O
0	int
;	O
if	O
(	O
year	int
<	O
1900	int
||	O
year	int
>	O
3000	int
)	O
return	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
=	O
(	O
int	O
)	O
(	O
year	int
-	O
1900	int
)	O
;	O
return	O
1	int
;	O
}	O
gboolean	int
vfs_parse_filetype	(*(char),*(long),*(int))->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
*	O
ret_skipped	*(long)
,	O
mode_t	int
*	O
ret_type	*(int)
)	O
{	O
mode_t	int
type	enum(int,int,int,int)
;	O
switch	O
(	O
*	O
s	*(char)
)	O
{	O
case	O
'd'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFDIR	O
;	O
break	O
;	O
case	O
'b'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFBLK	O
;	O
break	O
;	O
case	O
'c'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFCHR	O
;	O
break	O
;	O
case	O
'l'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFLNK	O
;	O
break	O
;	O
case	O
's'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFSOCK	O
;	O
break	O
;	O
case	O
'D'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFIFO	O
;	O
break	O
;	O
case	O
'p'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFIFO	O
;	O
break	O
;	O
case	O
'n'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFREG	O
;	O
break	O
;	O
case	O
'm'	O
:	O
case	O
'-'	O
:	O
case	O
'?'	O
:	O
type	enum(int,int,int,int)
=	O
S_IFREG	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
*	O
ret_type	*(int)
=	O
type	enum(int,int,int,int)
;	O
*	O
ret_skipped	*(long)
=	O
1	int
;	O
return	O
TRUE	O
;	O
}	O
gboolean	int
vfs_parse_fileperms	(*(char),*(long),*(int))->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
*	O
ret_skipped	*(long)
,	O
mode_t	int
*	O
ret_perms	*(int)
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
mode_t	int
perms	int
;	O
p	*(void)
=	O
s	*(char)
;	O
perms	int
=	O
0	int
;	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'r'	O
:	O
perms	int
|=	O
S_IRUSR	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'w'	O
:	O
perms	int
|=	O
S_IWUSR	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'S'	O
:	O
perms	int
|=	O
S_ISUID	O
;	O
break	O
;	O
case	O
's'	O
:	O
perms	int
|=	O
S_IXUSR	O
|	O
S_ISUID	O
;	O
break	O
;	O
case	O
'x'	O
:	O
perms	int
|=	O
S_IXUSR	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'r'	O
:	O
perms	int
|=	O
S_IRGRP	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'w'	O
:	O
perms	int
|=	O
S_IWGRP	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'S'	O
:	O
perms	int
|=	O
S_ISGID	O
;	O
break	O
;	O
case	O
'l'	O
:	O
perms	int
|=	O
S_ISGID	O
;	O
break	O
;	O
case	O
's'	O
:	O
perms	int
|=	O
S_IXGRP	O
|	O
S_ISGID	O
;	O
break	O
;	O
case	O
'x'	O
:	O
perms	int
|=	O
S_IXGRP	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'r'	O
:	O
perms	int
|=	O
S_IROTH	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'w'	O
:	O
perms	int
|=	O
S_IWOTH	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
switch	O
(	O
*	O
p	*(void)
++	O
)	O
{	O
case	O
'-'	O
:	O
break	O
;	O
case	O
'T'	O
:	O
perms	int
|=	O
S_ISVTX	O
;	O
break	O
;	O
case	O
't'	O
:	O
perms	int
|=	O
S_IXOTH	O
|	O
S_ISVTX	O
;	O
break	O
;	O
case	O
'x'	O
:	O
perms	int
|=	O
S_IXOTH	O
;	O
break	O
;	O
default	O
:	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
'+'	O
)	O
{	O
p	*(void)
++	O
;	O
}	O
*	O
ret_skipped	*(long)
=	O
p	*(void)
-	O
s	*(char)
;	O
*	O
ret_perms	*(int)
=	O
perms	int
;	O
return	O
TRUE	O
;	O
}	O
gboolean	int
vfs_parse_filemode	(*(char),*(long),*(int))->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
*	O
ret_skipped	*(long)
,	O
mode_t	int
*	O
ret_mode	*(int)
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
mode_t	int
type	enum(int,int,int,int)
,	O
perms	int
;	O
size_t	long
skipped	long
;	O
p	*(void)
=	O
s	*(char)
;	O
if	O
(	O
!	O
vfs_parse_filetype	(*(char),*(long),*(int))->(int)
(	O
p	*(void)
,	O
&	O
skipped	long
,	O
&	O
type	enum(int,int,int,int)
)	O
)	O
return	O
FALSE	O
;	O
p	*(void)
+=	O
skipped	long
;	O
if	O
(	O
!	O
vfs_parse_fileperms	(*(char),*(long),*(int))->(int)
(	O
p	*(void)
,	O
&	O
skipped	long
,	O
&	O
perms	int
)	O
)	O
return	O
FALSE	O
;	O
p	*(void)
+=	O
skipped	long
;	O
*	O
ret_skipped	*(long)
=	O
p	*(void)
-	O
s	*(char)
;	O
*	O
ret_mode	*(int)
=	O
type	enum(int,int,int,int)
|	O
perms	int
;	O
return	O
TRUE	O
;	O
}	O
int	O
vfs_parse_filedate	(int,*(long))->(int)
(	O
int	O
idx	int
,	O
time_t	long
*	O
t	long
)	O
{	O
char	O
*	O
p	*(void)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
int	O
d	double
[	O
3	int
]	O
;	O
int	O
got_year	int
=	O
0	int
;	O
int	O
l10n	int
=	O
0	int
;	O
time_t	long
current_time	long
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
current_time	long
=	O
time	long
(	O
NULL	O
)	O
;	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
current_time	long
)	O
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
=	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mday	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
=	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_year	int
=	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_hour	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_min	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_sec	int
=	O
0	int
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_isdst	int
=	O
-	O
1	int
;	O
p	*(void)
=	O
columns	*(int)
[	O
idx	int
++	O
]	O
;	O
if	O
(	O
is_week	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
p	*(void)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
p	*(void)
=	O
columns	*(int)
[	O
idx	int
++	O
]	O
;	O
if	O
(	O
is_month	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
p	*(void)
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
{	O
if	O
(	O
is_num	(int)->(int)
(	O
idx	int
)	O
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
=	O
(	O
int	O
)	O
atol	(*(char))->(long)
(	O
columns	*(int)
[	O
idx	int
++	O
]	O
)	O
;	O
else	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
is_dos_date	(*(char))->(int)
(	O
p	*(void)
)	O
)	O
{	O
p	*(void)
[	O
2	int
]	O
=	O
p	*(void)
[	O
5	int
]	O
=	O
'-'	O
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
p	*(void)
,	O
"%2d-%2d-%d"	*(char)
,	O
&	O
d	double
[	O
0	int
]	O
,	O
&	O
d	double
[	O
1	int
]	O
,	O
&	O
d	double
[	O
2	int
]	O
)	O
==	O
3	int
)	O
{	O
if	O
(	O
d	double
[	O
0	int
]	O
>	O
0	int
)	O
d	double
[	O
0	int
]	O
--	O
;	O
if	O
(	O
d	double
[	O
2	int
]	O
>	O
1900	int
)	O
{	O
d	double
[	O
2	int
]	O
-=	O
1900	int
;	O
}	O
else	O
{	O
if	O
(	O
d	double
[	O
2	int
]	O
<	O
70	int
)	O
d	double
[	O
2	int
]	O
+=	O
100	int
;	O
}	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
=	O
d	double
[	O
0	int
]	O
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mday	int
=	O
d	double
[	O
1	int
]	O
;	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_year	int
=	O
d	double
[	O
2	int
]	O
;	O
got_year	int
=	O
1	int
;	O
}	O
else	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
is_localized_month	(*(char))->(int)
(	O
p	*(void)
)	O
&&	O
(	O
is_num	(int)->(int)
(	O
idx	int
++	O
)	O
)	O
)	O
l10n	int
=	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
is_num	(int)->(int)
(	O
idx	int
)	O
&&	O
(	O
is_time	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	*(int)
[	O
idx	int
]	O
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
||	O
(	O
got_year	int
=	O
is_year	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	*(int)
[	O
idx	int
]	O
,	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
)	O
)	O
idx	int
++	O
;	O
else	O
return	O
0	int
;	O
if	O
(	O
!	O
got_year	int
&&	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
<	O
6	int
&&	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
<	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
&&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_mon	int
-	O
local_time	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
>=	O
6	int
)	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
.	O
tm_year	int
--	O
;	O
if	O
(	O
l10n	int
||	O
(	O
*	O
t	long
=	O
mktime	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
&	O
tim	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
)	O
)	O
<	O
0	int
)	O
*	O
t	long
=	O
0	int
;	O
return	O
idx	int
;	O
}	O
int	O
vfs_parse_ls_lga	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(*(char)),*(*(char)))->(int)
(	O
const	O
char	O
*	O
p	*(void)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
s	*(char)
,	O
char	O
*	O
*	O
filename	*(char)
,	O
char	O
*	O
*	O
linkname	*(*(char))
)	O
{	O
int	O
idx	int
,	O
idx2	int
,	O
num_cols	int
;	O
int	O
i	array(int)
;	O
char	O
*	O
p_copy	*(char)
=	O
NULL	O
;	O
char	O
*	O
t	long
=	O
NULL	O
;	O
const	O
char	O
*	O
line	int
=	O
p	*(void)
;	O
size_t	long
skipped	long
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(void)
,	O
"total"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
!	O
vfs_parse_filetype	(*(char),*(long),*(int))->(int)
(	O
p	*(void)
,	O
&	O
skipped	long
,	O
&	O
s	*(char)
->	O
st_mode	int
)	O
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
p	*(void)
+=	O
skipped	long
;	O
if	O
(	O
*	O
p	*(void)
==	O
' '	O
)	O
p	*(void)
++	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
'['	O
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
<=	O
8	int
||	O
p	*(void)
[	O
8	int
]	O
!=	O
']'	O
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
if	O
(	O
S_ISDIR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
s	*(char)
->	O
st_mode	int
|=	O
(	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
|	O
S_IWUSR	O
|	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
)	O
;	O
else	O
s	*(char)
->	O
st_mode	int
|=	O
(	O
S_IRUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
|	O
S_IWUSR	O
)	O
;	O
p	*(void)
+=	O
9	int
;	O
}	O
else	O
{	O
size_t	long
skipped	long
;	O
mode_t	int
perms	int
;	O
if	O
(	O
!	O
vfs_parse_fileperms	(*(char),*(long),*(int))->(int)
(	O
p	*(void)
,	O
&	O
skipped	long
,	O
&	O
perms	int
)	O
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
p	*(void)
+=	O
skipped	long
;	O
s	*(char)
->	O
st_mode	int
|=	O
perms	int
;	O
}	O
p_copy	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
p	*(void)
)	O
;	O
num_cols	int
=	O
vfs_split_text	(*(char))->(int)
(	O
p_copy	*(char)
)	O
;	O
s	*(char)
->	O
st_nlink	long
=	O
atol	(*(char))->(long)
(	O
columns	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
s	*(char)
->	O
st_nlink	long
<=	O
0	int
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
1	int
)	O
)	O
s	*(char)
->	O
st_uid	int
=	O
vfs_finduid	(*(char))->(int)
(	O
columns	*(int)
[	O
1	int
]	O
)	O
;	O
else	O
s	*(char)
->	O
st_uid	int
=	O
(	O
uid_t	int
)	O
atol	(*(char))->(long)
(	O
columns	*(int)
[	O
1	int
]	O
)	O
;	O
for	O
(	O
idx	int
=	O
3	int
;	O
idx	int
<=	O
5	int
;	O
idx	int
++	O
)	O
if	O
(	O
is_month	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	*(int)
[	O
idx	int
]	O
,	O
NULL	O
)	O
||	O
is_week	(*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(int)
(	O
columns	*(int)
[	O
idx	int
]	O
,	O
NULL	O
)	O
||	O
is_dos_date	(*(char))->(int)
(	O
columns	*(int)
[	O
idx	int
]	O
)	O
||	O
is_localized_month	(*(char))->(int)
(	O
columns	*(int)
[	O
idx	int
]	O
)	O
)	O
break	O
;	O
if	O
(	O
idx	int
==	O
6	int
||	O
(	O
idx	int
==	O
5	int
&&	O
!	O
S_ISCHR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
&&	O
!	O
S_ISBLK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
if	O
(	O
idx	int
==	O
3	int
||	O
(	O
idx	int
==	O
4	int
&&	O
(	O
S_ISCHR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
||	O
S_ISBLK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
)	O
)	O
idx2	int
=	O
2	int
;	O
else	O
{	O
if	O
(	O
is_num	(int)->(int)
(	O
2	int
)	O
)	O
s	*(char)
->	O
st_gid	int
=	O
(	O
gid_t	int
)	O
atol	(*(char))->(long)
(	O
columns	*(int)
[	O
2	int
]	O
)	O
;	O
else	O
s	*(char)
->	O
st_gid	int
=	O
vfs_findgid	(*(char))->(int)
(	O
columns	*(int)
[	O
2	int
]	O
)	O
;	O
idx2	int
=	O
3	int
;	O
}	O
if	O
(	O
S_ISCHR	O
(	O
s	*(char)
->	O
st_mode	int
)	O
||	O
S_ISBLK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
)	O
{	O
int	O
maj	int
,	O
min	long
;	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
idx2	int
)	O
&&	O
idx2	int
==	O
2	int
)	O
{	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
++	O
idx2	int
)	O
||	O
sscanf	(*(char),*(char))->(int)
(	O
columns	*(int)
[	O
idx2	int
]	O
,	O
" %d,%d"	*(char)
,	O
&	O
min	long
,	O
&	O
min	long
)	O
!=	O
2	int
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
}	O
else	O
{	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
idx2	int
)	O
||	O
sscanf	(*(char),*(char))->(int)
(	O
columns	*(int)
[	O
idx2	int
]	O
,	O
" %d,"	*(char)
,	O
&	O
maj	int
)	O
!=	O
1	int
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
++	O
idx2	int
)	O
||	O
sscanf	(*(char),*(char))->(int)
(	O
columns	*(int)
[	O
idx2	int
]	O
,	O
" %d"	*(char)
,	O
&	O
min	long
)	O
!=	O
1	int
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
}	O
s	*(char)
->	O
st_rdev	long
=	O
makedev	O
(	O
maj	int
,	O
min	long
)	O
;	O
s	*(char)
->	O
st_size	long
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
!	O
is_num	(int)->(int)
(	O
idx2	int
)	O
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
s	*(char)
->	O
st_size	long
=	O
(	O
off_t	long
)	O
atoll	(*(char))->(long long)
(	O
columns	*(int)
[	O
idx2	int
]	O
)	O
;	O
s	*(char)
->	O
st_rdev	long
=	O
0	int
;	O
}	O
idx	int
=	O
vfs_parse_filedate	(int,*(long))->(int)
(	O
idx	int
,	O
&	O
s	*(char)
->	O
st_mtime	O
)	O
;	O
if	O
(	O
!	O
idx	int
)	O
goto	O
error	*(struct(int,int,*(char)))
;	O
s	*(char)
->	O
st_atime	O
=	O
s	*(char)
->	O
st_ctime	O
=	O
s	*(char)
->	O
st_mtime	O
;	O
s	*(char)
->	O
st_blksize	long
=	O
512	int
;	O
s	*(char)
->	O
st_blocks	long
=	O
(	O
s	*(char)
->	O
st_size	long
+	O
511	int
)	O
/	O
512	int
;	O
for	O
(	O
i	array(int)
=	O
idx	int
+	O
1	int
,	O
idx2	int
=	O
0	int
;	O
i	array(int)
<	O
num_cols	int
;	O
i	array(int)
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
columns	*(int)
[	O
i	array(int)
]	O
,	O
"->"	*(char)
)	O
==	O
0	int
)	O
{	O
idx2	int
=	O
i	array(int)
;	O
break	O
;	O
}	O
if	O
(	O
(	O
(	O
S_ISLNK	O
(	O
s	*(char)
->	O
st_mode	int
)	O
||	O
(	O
num_cols	int
==	O
idx	int
+	O
3	int
&&	O
s	*(char)
->	O
st_nlink	long
>	O
1	int
)	O
)	O
)	O
&&	O
idx2	int
)	O
{	O
if	O
(	O
filename	*(char)
)	O
{	O
*	O
filename	*(char)
=	O
g_strndup	(*(char),long)->(*(char))
(	O
p	*(void)
+	O
column_ptr	array(int)
[	O
idx	int
]	O
,	O
column_ptr	array(int)
[	O
idx2	int
]	O
-	O
column_ptr	array(int)
[	O
idx	int
]	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
linkname	*(*(char))
)	O
{	O
t	long
=	O
g_strdup	(*(char))->(*(char))
(	O
p	*(void)
+	O
column_ptr	array(int)
[	O
idx2	int
+	O
1	int
]	O
)	O
;	O
*	O
linkname	*(*(char))
=	O
t	long
;	O
}	O
}	O
else	O
{	O
if	O
(	O
filename	*(char)
)	O
{	O
t	long
=	O
g_strdup	(*(char))->(*(char))
(	O
p	*(void)
+	O
column_ptr	array(int)
[	O
idx	int
]	O
)	O
;	O
*	O
filename	*(char)
=	O
t	long
;	O
}	O
if	O
(	O
linkname	*(*(char))
)	O
*	O
linkname	*(*(char))
=	O
NULL	O
;	O
}	O
if	O
(	O
t	long
)	O
{	O
int	O
p	*(void)
=	O
strlen	(*(char))->(long)
(	O
t	long
)	O
;	O
if	O
(	O
(	O
--	O
p	*(void)
>	O
0	int
)	O
&&	O
(	O
t	long
[	O
p	*(void)
]	O
==	O
'\r'	O
||	O
t	long
[	O
p	*(void)
]	O
==	O
'\n'	O
)	O
)	O
t	long
[	O
p	*(void)
]	O
=	O
0	int
;	O
if	O
(	O
(	O
--	O
p	*(void)
>	O
0	int
)	O
&&	O
(	O
t	long
[	O
p	*(void)
]	O
==	O
'\r'	O
||	O
t	long
[	O
p	*(void)
]	O
==	O
'\n'	O
)	O
)	O
t	long
[	O
p	*(void)
]	O
=	O
0	int
;	O
}	O
g_free	(*(void))->(void)
(	O
p_copy	*(char)
)	O
;	O
return	O
1	int
;	O
error	*(struct(int,int,*(char)))
:	O
{	O
static	O
int	O
errorcount	int
=	O
0	int
;	O
if	O
(	O
++	O
errorcount	int
<	O
5	int
)	O
{	O
message	*(char)
(	O
1	int
,	O
_	O
(	O
"Cannot parse:"	*(char)
)	O
,	O
"%s"	*(char)
,	O
(	O
p_copy	*(char)
&&	O
*	O
p_copy	*(char)
)	O
?	O
p_copy	*(char)
:	O
line	int
)	O
;	O
}	O
else	O
if	O
(	O
errorcount	int
==	O
5	int
)	O
message	*(char)
(	O
1	int
,	O
MSG_ERROR	O
,	O
_	O
(	O
"More parsing errors will be ignored."	*(char)
)	O
)	O
;	O
}	O
g_free	(*(void))->(void)
(	O
p_copy	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
vfs_die	(*(char))->(void)
(	O
const	O
char	O
*	O
m	*(char)
)	O
{	O
message	*(char)
(	O
1	int
,	O
_	O
(	O
"Internal error:"	*(char)
)	O
,	O
"%s"	*(char)
,	O
m	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
char	O
*	O
vfs_get_password	(*(char))->(*(char))
(	O
const	O
char	O
*	O
msg	*(char)
)	O
{	O
return	O
input_dialog	(*(char),*(char),*(char))->(*(char))
(	O
msg	*(char)
,	O
_	O
(	O
"Password:"	*(char)
)	O
,	O
INPUT_PASSWORD	O
)	O
;	O
}	O
