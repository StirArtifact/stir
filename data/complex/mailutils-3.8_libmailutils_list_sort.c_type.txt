static	O
void	O
_list_append_entry	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))->(void)
(	O
struct	O
_mu_list	struct(struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
*	O
list	*(struct)
,	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
ent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
{	O
ent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
?	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
:	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
ent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
if	O
(	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
ent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
else	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
=	O
ent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
ent	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
list	*(struct)
->	O
count	long
++	O
;	O
}	O
static	O
void	O
_list_qsort	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),(*(void),*(void),*(void))->(int),*(void))->(void)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
int	O
cmp	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
,	O
*	O
middle	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
struct	O
_mu_list	struct(struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`))))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
;	O
int	O
rc	int
;	O
if	O
(	O
list	*(struct)
->	O
count	long
<	O
2	int
)	O
return	O
;	O
if	O
(	O
list	*(struct)
->	O
count	long
==	O
2	int
)	O
{	O
if	O
(	O
cmp	(*(void),*(void),*(void))->(int)
(	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
,	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
->	O
item	*(void)
,	O
data	*(void)
)	O
<	O
0	int
)	O
{	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
=	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
->	O
next	*((*(void))->(int))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
}	O
return	O
;	O
}	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
do	O
{	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
;	O
if	O
(	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
==	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
)	O
return	O
;	O
}	O
while	O
(	O
(	O
rc	int
=	O
cmp	(*(void),*(void),*(void))->(int)
(	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
->	O
item	*(void)
,	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
,	O
data	*(void)
)	O
)	O
==	O
0	int
)	O
;	O
middle	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
(	O
rc	int
>	O
0	int
)	O
?	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
:	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
0	int
,	O
sizeof	O
(	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
0	int
,	O
sizeof	O
(	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
)	O
)	O
;	O
for	O
(	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
!=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
)	O
{	O
struct	O
list_data	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))))
*	O
next	*((*(void))->(int))
=	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
;	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
NULL	O
;	O
if	O
(	O
cmp	(*(void),*(void),*(void))->(int)
(	O
middle	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
,	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
item	*(void)
,	O
data	*(void)
)	O
<	O
0	int
)	O
_list_append_entry	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))->(void)
(	O
&	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
else	O
_list_append_entry	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))->(void)
(	O
&	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
;	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
next	*((*(void))->(int))
;	O
}	O
_list_qsort	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),(*(void),*(void),*(void))->(int),*(void))->(void)
(	O
&	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
cmp	(*(void),*(void),*(void))->(int)
,	O
data	*(void)
)	O
;	O
_list_qsort	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),(*(void),*(void),*(void))->(int),*(void))->(void)
(	O
&	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
,	O
cmp	(*(void),*(void),*(void))->(int)
,	O
data	*(void)
)	O
;	O
if	O
(	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
else	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
&	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
;	O
if	O
(	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
)	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
cur	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
;	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
&	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
count	long
+=	O
high_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
count	long
;	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
=	O
low_list	struct(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))),long,*(struct(*(void),*(void),int,int)),*((*(void),*(void))->(int)),*((*(void))->(void)),*(struct))
.	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
if	O
(	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
)	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
next	*((*(void))->(int))
->	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
if	O
(	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
.	O
prev	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
->	O
next	*((*(void))->(int))
=	O
&	O
list	*(struct)
->	O
head	struct(*(void),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))))
;	O
}	O
void	O
mu_list_sort_r	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(void)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
int	O
(	O
*	O
comp	*((*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
list	*(struct)
)	O
_list_qsort	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),(*(void),*(void),*(void))->(int),*(void))->(void)
(	O
list	*(struct)
,	O
comp	*((*(void),*(void))->(int))
,	O
data	*(void)
)	O
;	O
}	O
static	O
int	O
callcomp	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(void)
,	O
const	O
void	O
*	O
b	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_list_comparator_t	*((*(void),*(void))->(int))
comp	*((*(void),*(void))->(int))
=	O
data	*(void)
;	O
return	O
comp	*((*(void),*(void))->(int))
(	O
a	*(void)
,	O
b	*(void)
)	O
;	O
}	O
void	O
mu_list_sort	(*(struct),*((*(void),*(void))->(int)))->(void)
(	O
mu_list_t	*(struct)
list	*(struct)
,	O
mu_list_comparator_t	*((*(void),*(void))->(int))
comp	*((*(void),*(void))->(int))
)	O
{	O
if	O
(	O
list	*(struct)
)	O
_list_qsort	(*(struct(struct(*(void),*(struct`),*(struct`)),long,*(struct(*`,*`,int,int)),*((*`,*`)->(int)),*((*`)->(void)),*(struct))),(*(void),*(void),*(void))->(int),*(void))->(void)
(	O
list	*(struct)
,	O
callcomp	(*(void),*(void),*(void))->(int)
,	O
comp	*((*(void),*(void))->(int))
?	O
comp	*((*(void),*(void))->(int))
:	O
list	*(struct)
->	O
comp	*((*(void),*(void))->(int))
)	O
;	O
}	O
