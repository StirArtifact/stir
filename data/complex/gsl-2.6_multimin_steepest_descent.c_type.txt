typedef	O
struct	O
{	O
double	O
step	double
;	O
double	O
max_step	double
;	O
double	O
tol	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
}	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
;	O
static	O
int	O
steepest_descent_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	int
)	O
{	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
x1	double
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
x1	double
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for g1"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
steepest_descent_set	(*(void),*(struct(*((*`,*`)->(double)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multimin_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(void)),*((*(struct(long,long,*`,*`,int)),*(void),*(double),*(struct(long,long,*`,*`,int)))->(void)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
tol	double
)	O
{	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
GSL_MULTIMIN_FN_EVAL_F_DF	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
f	*(double)
,	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
step	double
=	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
state	*(int)
->	O
max_step	double
=	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
state	*(int)
->	O
tol	double
=	O
tol	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
steepest_descent_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
int	O
steepest_descent_restart	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
step	double
=	O
state	*(int)
->	O
max_step	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
steepest_descent_iterate	(*(void),*(struct(*((*`,*`)->(double)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multimin_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(void)),*((*(struct(long,long,*`,*`,int)),*(void),*(double),*(struct(long,long,*`,*`,int)))->(void)),long,*(void))
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
double	O
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
state	*(int)
=	O
(	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
vstate	*(void)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
=	O
state	*(int)
->	O
x1	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
f0	double
=	O
*	O
f	*(double)
;	O
double	O
f1	double
;	O
double	O
step	double
=	O
state	*(int)
->	O
step	double
,	O
tol	double
=	O
state	*(int)
->	O
tol	double
;	O
int	O
failed	int
=	O
0	int
;	O
double	O
gnorm	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
gnorm	double
==	O
0.0	int
)	O
{	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_ENOPROG	int
;	O
}	O
trial	O
:	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
step	double
/	O
gnorm	double
,	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x1	double
,	O
x	double
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
1.0	int
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x1	double
)	O
;	O
if	O
(	O
gsl_vector_equal	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
x1	double
)	O
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
GSL_MULTIMIN_FN_EVAL_F_DF	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x1	double
,	O
&	O
f1	double
,	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
f1	double
>	O
f0	double
)	O
{	O
failed	int
=	O
1	int
;	O
step	double
*=	O
tol	double
;	O
goto	O
trial	O
;	O
}	O
if	O
(	O
failed	int
)	O
step	double
*=	O
tol	double
;	O
else	O
step	double
*=	O
2.0	int
;	O
state	*(int)
->	O
step	double
=	O
step	double
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
x1	double
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gradient	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
g1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
*	O
f	*(double)
=	O
f1	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fdfminimizer_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),double,double)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(int)),*((*(void))->(void)))
steepest_descent_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),double,double)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"steepest_descent"	*(char)
,	O
sizeof	O
(	O
steepest_descent_state_t	struct(double,double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))
)	O
,	O
&	O
steepest_descent_alloc	(*(void),long)->(int)
,	O
&	O
steepest_descent_set	(*(void),*(struct(*((*`,*`)->(double)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
,	O
&	O
steepest_descent_iterate	(*(void),*(struct(*((*`,*`)->(double)),*((*`,*`,*`)->(void)),*((*`,*`,*`,*`)->(void)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
steepest_descent_restart	(*(void))->(int)
,	O
&	O
steepest_descent_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multimin_fdfminimizer_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),double,double)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multimin_fdfminimizer_steepest_descent	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(double),*(struct`),double,double)->(int)),*((*(void),*(struct`),*(struct`),*(double),*(struct`),*(struct`))->(int)),*((*(void))->(int)),*((*(void))->(void))))
=	O
&	O
steepest_descent_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),double,double)->(int)),*((*(void),*(struct(*`,*`,*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void))->(int)),*((*(void))->(void)))
;	O
