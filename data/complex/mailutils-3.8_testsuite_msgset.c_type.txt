static	O
void	O
parse_msgrange	(*(char),*(struct(long,long)))->(void)
(	O
char	O
*	O
arg	*(char)
,	O
struct	O
mu_msgrange	struct(long,long)
*	O
range	*(char)
)	O
{	O
size_t	long
msgnum	long
;	O
char	O
*	O
p	*(char)
;	O
errno	O
=	O
0	int
;	O
msgnum	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
range	*(char)
->	O
msg_beg	long
=	O
msgnum	long
;	O
if	O
(	O
*	O
p	*(char)
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
++	O
p	*(char)
==	O
'*'	O
)	O
msgnum	long
=	O
0	int
;	O
else	O
{	O
msgnum	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"error in message range near %s"	*(char)
,	O
p	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
*	O
p	*(char)
==	O
'*'	O
)	O
msgnum	long
=	O
0	int
;	O
else	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"error in message range near %s"	*(char)
,	O
p	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
range	*(char)
->	O
msg_end	long
=	O
msgnum	long
;	O
}	O
mu_msgset_t	*(struct)
parse_msgset	(*(char),*(struct),int,int)->(*(struct))
(	O
const	O
char	O
*	O
arg	*(char)
,	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
create_mode	int
,	O
int	O
parse_mode	int
)	O
{	O
int	O
rc	int
;	O
mu_msgset_t	*(struct)
msgset	*(struct)
;	O
char	O
*	O
end	struct(*(char),int,int)
;	O
MU_ASSERT	O
(	O
mu_msgset_create	(*(*(struct)),*(struct),int)->(int)
(	O
&	O
msgset	*(struct)
,	O
mbox	*(struct)
,	O
create_mode	int
)	O
)	O
;	O
if	O
(	O
arg	*(char)
)	O
{	O
rc	int
=	O
mu_msgset_parse_imap	(*(struct),int,*(char),*(*(char)))->(int)
(	O
msgset	*(struct)
,	O
parse_mode	int
,	O
arg	*(char)
,	O
&	O
end	struct(*(char),int,int)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"mu_msgset_parse_imap: %s near %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
,	O
end	struct(*(char),int,int)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
return	O
msgset	*(struct)
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
i	long
;	O
char	O
*	O
msgset_string	*(char)
=	O
NULL	O
;	O
mu_msgset_t	*(struct)
msgset	*(struct)
,	O
outset	*(struct)
;	O
int	O
create_mode	int
=	O
MU_MSGSET_NUM	int
;	O
int	O
parse_mode	int
=	O
MU_MSGSET_NUM	int
;	O
int	O
output_mode	int
=	O
MU_MSGSET_NUM	int
;	O
int	O
output_flags	int
=	O
0	int
;	O
mu_msgset_format_t	*(struct(*(char),*(char),*(char),*(char)))
format	*(char)
=	O
mu_msgset_fmt_imap	O
;	O
mu_mailbox_t	*(struct)
mbox	*(struct)
=	O
NULL	O
;	O
mu_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_register_local_mbox_formats	O
(	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
arg	*(char)
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-h"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-help"	*(char)
)	O
==	O
0	int
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"usage: %s [-msgset[uid]=SET] [-uid] [-add[uid]=X[:Y]] [-del[uid]=X[:Y]] "	*(char)
"[-addset[uid]=SET] [-delset[uid]=SET] ...\n"	*(char)
,	O
mu_program_name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-msgset="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
{	O
parse_mode	int
=	O
MU_MSGSET_NUM	int
;	O
msgset_string	*(char)
=	O
arg	*(char)
+	O
8	int
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-msgsetuid="	*(char)
,	O
11	int
)	O
==	O
0	int
)	O
{	O
parse_mode	int
=	O
MU_MSGSET_UID	int
;	O
msgset_string	*(char)
=	O
arg	*(char)
+	O
11	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-uid"	*(char)
)	O
==	O
0	int
)	O
create_mode	int
=	O
MU_MSGSET_UID	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-mailbox="	*(char)
,	O
9	int
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_mailbox_create	(*(*(struct)),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
arg	*(char)
+	O
9	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
MU_STREAM_READ	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-mh"	*(char)
)	O
==	O
0	int
)	O
format	*(char)
=	O
mu_msgset_fmt_mh	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-printuid"	*(char)
)	O
==	O
0	int
)	O
output_mode	int
=	O
MU_MSGSET_UID	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-printnum"	*(char)
)	O
==	O
0	int
)	O
output_mode	int
=	O
MU_MSGSET_NUM	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-ignore-error"	*(char)
)	O
==	O
0	int
)	O
output_flags	int
=	O
MU_MSGSET_IGNORE_TRANSERR	int
;	O
else	O
break	O
;	O
}	O
msgset	*(struct)
=	O
parse_msgset	(*(char),*(struct),int,int)->(*(struct))
(	O
msgset_string	*(char)
,	O
mbox	*(struct)
,	O
create_mode	int
,	O
parse_mode	int
)	O
;	O
for	O
(	O
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
char	O
*	O
arg	*(char)
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
struct	O
mu_msgrange	struct(long,long)
range	*(char)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-add="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	(*(char),*(struct(long,long)))->(void)
(	O
arg	*(char)
+	O
5	int
,	O
&	O
range	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_add_range	(*(struct),long,long,int)->(int)
(	O
msgset	*(struct)
,	O
range	*(char)
.	O
msg_beg	long
,	O
range	*(char)
.	O
msg_end	long
,	O
MU_MSGSET_NUM	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-sub="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	(*(char),*(struct(long,long)))->(void)
(	O
arg	*(char)
+	O
5	int
,	O
&	O
range	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_sub_range	(*(struct),long,long,int)->(int)
(	O
msgset	*(struct)
,	O
range	*(char)
.	O
msg_beg	long
,	O
range	*(char)
.	O
msg_end	long
,	O
MU_MSGSET_NUM	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-adduid="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	(*(char),*(struct(long,long)))->(void)
(	O
arg	*(char)
+	O
8	int
,	O
&	O
range	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_add_range	(*(struct),long,long,int)->(int)
(	O
msgset	*(struct)
,	O
range	*(char)
.	O
msg_beg	long
,	O
range	*(char)
.	O
msg_end	long
,	O
MU_MSGSET_UID	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-subuid="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
{	O
parse_msgrange	(*(char),*(struct(long,long)))->(void)
(	O
arg	*(char)
+	O
8	int
,	O
&	O
range	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_msgset_sub_range	(*(struct),long,long,int)->(int)
(	O
msgset	*(struct)
,	O
range	*(char)
.	O
msg_beg	long
,	O
range	*(char)
.	O
msg_end	long
,	O
MU_MSGSET_UID	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-addset"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
mu_msgset_t	*(struct)
tset	*(struct)
;	O
int	O
m	int
;	O
arg	*(char)
+=	O
7	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"uid"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
m	int
=	O
MU_MSGSET_UID	int
;	O
arg	*(char)
+=	O
3	int
;	O
}	O
else	O
m	int
=	O
MU_MSGSET_NUM	int
;	O
if	O
(	O
*	O
arg	*(char)
==	O
'='	O
)	O
arg	*(char)
++	O
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"unknown option %s"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
return	O
1	int
;	O
}	O
tset	*(struct)
=	O
parse_msgset	(*(char),*(struct),int,int)->(*(struct))
(	O
arg	*(char)
,	O
mbox	*(struct)
,	O
m	int
,	O
m	int
)	O
;	O
if	O
(	O
!	O
msgset	*(struct)
)	O
msgset	*(struct)
=	O
tset	*(struct)
;	O
else	O
{	O
MU_ASSERT	O
(	O
mu_msgset_add	(*(struct),*(struct))->(int)
(	O
msgset	*(struct)
,	O
tset	*(struct)
)	O
)	O
;	O
mu_msgset_free	(*(struct))->(void)
(	O
tset	*(struct)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"-subset="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
{	O
mu_msgset_t	*(struct)
tset	*(struct)
;	O
int	O
m	int
;	O
arg	*(char)
+=	O
7	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	*(char)
,	O
"uid"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
m	int
=	O
MU_MSGSET_UID	int
;	O
arg	*(char)
+=	O
3	int
;	O
}	O
else	O
m	int
=	O
MU_MSGSET_NUM	int
;	O
if	O
(	O
*	O
arg	*(char)
==	O
'='	O
)	O
arg	*(char)
++	O
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"unknown option %s"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
return	O
1	int
;	O
}	O
tset	*(struct)
=	O
parse_msgset	(*(char),*(struct),int,int)->(*(struct))
(	O
arg	*(char)
,	O
mbox	*(struct)
,	O
m	int
,	O
m	int
)	O
;	O
if	O
(	O
!	O
msgset	*(struct)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"no initial message set"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
{	O
MU_ASSERT	O
(	O
mu_msgset_sub	(*(struct),*(struct))->(int)
(	O
msgset	*(struct)
,	O
tset	*(struct)
)	O
)	O
;	O
mu_msgset_free	(*(struct))->(void)
(	O
tset	*(struct)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-neg"	*(char)
)	O
==	O
0	int
)	O
{	O
mu_msgset_t	*(struct)
negated_set	*(struct)
;	O
MU_ASSERT	O
(	O
mu_msgset_negate	(*(struct),*(*(struct)))->(int)
(	O
msgset	*(struct)
,	O
&	O
negated_set	*(struct)
)	O
)	O
;	O
mu_msgset_free	(*(struct))->(void)
(	O
msgset	*(struct)
)	O
;	O
msgset	*(struct)
=	O
negated_set	*(struct)
;	O
}	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"unknown option %s"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
MU_ASSERT	O
(	O
mu_msgset_translate	(*(*(struct)),*(struct),int)->(int)
(	O
&	O
outset	*(struct)
,	O
msgset	*(struct)
,	O
output_mode	int
|	O
output_flags	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_msgset_format	(*(struct),*(struct(*(char),*(char),*(char),*(char))),*(struct))->(int)
(	O
mu_strout	*(struct)
,	O
format	*(char)
,	O
outset	*(struct)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
mu_msgset_free	(*(struct))->(void)
(	O
outset	*(struct)
)	O
;	O
mu_msgset_free	(*(struct))->(void)
(	O
msgset	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
