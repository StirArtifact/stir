struct	O
formatstring_parser	O
*	O
formatstring_parsers	O
[	O
NFORMATS	int
]	O
=	O
{	O
&	O
formatstring_c	O
,	O
&	O
formatstring_objc	O
,	O
&	O
formatstring_sh	O
,	O
&	O
formatstring_python	O
,	O
&	O
formatstring_python_brace	O
,	O
&	O
formatstring_lisp	O
,	O
&	O
formatstring_elisp	O
,	O
&	O
formatstring_librep	O
,	O
&	O
formatstring_scheme	O
,	O
&	O
formatstring_smalltalk	O
,	O
&	O
formatstring_java	O
,	O
&	O
formatstring_csharp	O
,	O
&	O
formatstring_awk	O
,	O
&	O
formatstring_pascal	O
,	O
&	O
formatstring_ycp	O
,	O
&	O
formatstring_tcl	O
,	O
&	O
formatstring_perl	O
,	O
&	O
formatstring_perl_brace	O
,	O
&	O
formatstring_php	O
,	O
&	O
formatstring_gcc_internal	O
,	O
&	O
formatstring_gfc_internal	O
,	O
&	O
formatstring_qt	O
,	O
&	O
formatstring_qt_plural	O
,	O
&	O
formatstring_kde	O
,	O
&	O
formatstring_kde_kuit	O
,	O
&	O
formatstring_boost	O
,	O
&	O
formatstring_lua	O
,	O
&	O
formatstring_javascript	O
}	O
;	O
int	O
check_msgid_msgstr_format_i	O
(	O
const	O
char	O
*	O
msgid	*(char)
,	O
const	O
char	O
*	O
msgid_plural	*(char)
,	O
const	O
char	O
*	O
msgstr	*(char)
,	O
size_t	long
msgstr_len	long
,	O
size_t	long
i	long
,	O
struct	O
argument_range	struct(int,int)
range	struct(int,int)
,	O
const	O
struct	O
plural_distribution	O
*	O
distribution	O
,	O
formatstring_error_logger_t	O
error_logger	O
)	O
{	O
int	O
seen_errors	O
=	O
0	int
;	O
struct	O
formatstring_parser	O
*	O
parser	O
=	O
formatstring_parsers	O
[	O
i	long
]	O
;	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
msgid_descr	O
=	O
parser	O
->	O
parse	O
(	O
msgid_plural	*(char)
!=	O
NULL	O
?	O
msgid_plural	*(char)
:	O
msgid	*(char)
,	O
false	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
msgid_descr	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
pretty_msgid	O
=	O
(	O
msgid_plural	*(char)
!=	O
NULL	O
?	O
"msgid_plural"	*(char)
:	O
"msgid"	*(char)
)	O
;	O
char	O
buf	O
[	O
18	int
+	O
1	int
]	O
;	O
const	O
char	O
*	O
pretty_msgstr	O
=	O
"msgstr"	*(char)
;	O
bool	bool
has_plural_translations	O
=	O
(	O
strlen	(*(char))->(long)
(	O
msgstr	*(char)
)	O
+	O
1	int
<	O
msgstr_len	long
)	O
;	O
const	O
char	O
*	O
p_end	O
=	O
msgstr	*(char)
+	O
msgstr_len	long
;	O
const	O
char	O
*	O
p	*(void)
;	O
unsigned	O
int	O
j	O
;	O
for	O
(	O
p	*(void)
=	O
msgstr	*(char)
,	O
j	O
=	O
0	int
;	O
p	*(void)
<	O
p_end	O
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
+	O
1	int
,	O
j	O
++	O
)	O
{	O
void	O
*	O
msgstr_descr	O
;	O
if	O
(	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
{	O
sprintf	O
(	O
buf	O
,	O
"msgstr[%u]"	*(char)
,	O
j	O
)	O
;	O
pretty_msgstr	O
=	O
buf	O
;	O
}	O
msgstr_descr	O
=	O
parser	O
->	O
parse	O
(	O
p	*(void)
,	O
true	O
,	O
NULL	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
msgstr_descr	O
!=	O
NULL	O
)	O
{	O
bool	bool
strict_checking	O
=	O
(	O
msgid_plural	*(char)
==	O
NULL	O
||	O
!	O
has_plural_translations	O
||	O
(	O
distribution	O
!=	O
NULL	O
&&	O
distribution	O
->	O
often	O
!=	O
NULL	O
&&	O
j	O
<	O
distribution	O
->	O
often_length	O
&&	O
distribution	O
->	O
often	O
[	O
j	O
]	O
&&	O
!	O
(	O
has_range_p	O
(	O
range	struct(int,int)
)	O
&&	O
distribution	O
->	O
histogram	O
(	O
distribution	O
,	O
range	struct(int,int)
.	O
min	int
,	O
range	struct(int,int)
.	O
max	int
,	O
j	O
)	O
<=	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
parser	O
->	O
check	O
(	O
msgid_descr	O
,	O
msgstr_descr	O
,	O
strict_checking	O
,	O
error_logger	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
)	O
)	O
seen_errors	O
++	O
;	O
parser	O
->	O
free	O
(	O
msgstr_descr	O
)	O
;	O
}	O
else	O
{	O
error_logger	O
(	O
_	O
(	O
"'%s' is not a valid %s format string, unlike '%s'. Reason: %s"	*(char)
)	O
,	O
pretty_msgstr	O
,	O
format_language_pretty	array(*(char))
[	O
i	long
]	O
,	O
pretty_msgid	O
,	O
invalid_reason	O
)	O
;	O
seen_errors	O
++	O
;	O
free	O
(	O
invalid_reason	O
)	O
;	O
}	O
}	O
parser	O
->	O
free	O
(	O
msgid_descr	O
)	O
;	O
}	O
else	O
free	O
(	O
invalid_reason	O
)	O
;	O
return	O
seen_errors	O
;	O
}	O
int	O
check_msgid_msgstr_format	O
(	O
const	O
char	O
*	O
msgid	*(char)
,	O
const	O
char	O
*	O
msgid_plural	*(char)
,	O
const	O
char	O
*	O
msgstr	*(char)
,	O
size_t	long
msgstr_len	long
,	O
const	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
[	O
NFORMATS	int
]	O
,	O
struct	O
argument_range	struct(int,int)
range	struct(int,int)
,	O
const	O
struct	O
plural_distribution	O
*	O
distribution	O
,	O
formatstring_error_logger_t	O
error_logger	O
)	O
{	O
int	O
seen_errors	O
=	O
0	int
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
)	O
seen_errors	O
+=	O
check_msgid_msgstr_format_i	O
(	O
msgid	*(char)
,	O
msgid_plural	*(char)
,	O
msgstr	*(char)
,	O
msgstr_len	long
,	O
i	long
,	O
range	struct(int,int)
,	O
distribution	O
,	O
error_logger	O
)	O
;	O
return	O
seen_errors	O
;	O
}	O
