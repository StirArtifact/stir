LOCK_DECLARE	O
(	O
lock	O
)	O
static	O
int	O
store_hostent	(*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(int)
(	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
h_out	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
char	O
*	O
buf	*(char)
,	O
int	O
buflen	int
,	O
int	O
*	O
h_errnop	*(int)
)	O
{	O
int	O
len	int
,	O
i	int
;	O
char	O
*	O
base	*(char)
;	O
char	O
*	O
*	O
ptr	*(*(char))
;	O
if	O
(	O
!	O
buf	*(char)
||	O
!	O
h_errnop	*(int)
)	O
return	O
-	O
1	int
;	O
*	O
h_errnop	*(int)
=	O
h_errno	O
;	O
*	O
h_out	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
*	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
+	O
1	int
;	O
len	int
+=	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
len	int
+=	O
sizeof	O
(	O
char	O
*	O
)	O
+	O
strlen	(*(char))->(long)
(	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
base	*(char)
=	O
buf	*(char)
+	O
(	O
i	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
len	int
+=	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
len	int
+=	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
+	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
base	*(char)
+=	O
(	O
i	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
if	O
(	O
len	int
>	O
buflen	int
)	O
return	O
-	O
1	int
;	O
ptr	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
buf	*(char)
;	O
h_out	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
=	O
ptr	*(*(char))
;	O
for	O
(	O
i	int
=	O
0	int
;	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
base	*(char)
,	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	int
]	O
,	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
)	O
;	O
*	O
ptr	*(*(char))
++	O
=	O
base	*(char)
;	O
base	*(char)
+=	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
;	O
}	O
*	O
ptr	*(*(char))
++	O
=	O
NULL	O
;	O
h_out	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
=	O
ptr	*(*(char))
;	O
for	O
(	O
i	int
=	O
0	int
;	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
len	int
=	O
strlen	(*(char))->(long)
(	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
base	*(char)
,	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	int
]	O
,	O
len	int
)	O
;	O
*	O
ptr	*(*(char))
++	O
=	O
base	*(char)
;	O
base	*(char)
+=	O
len	int
;	O
}	O
*	O
ptr	*(*(char))
++	O
=	O
NULL	O
;	O
h_out	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
=	O
base	*(char)
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
+	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
h_out	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
,	O
h_in	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
,	O
len	int
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
grad_gethostbyname_r	(*(char),*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
char	O
*	O
buffer	*(char)
,	O
int	O
buflen	int
,	O
int	O
*	O
h_errnop	*(int)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
LOCK_SET	O
(	O
lock	O
)	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
||	O
store_hostent	(*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(int)
(	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
buffer	*(char)
,	O
buflen	int
,	O
h_errnop	*(int)
)	O
)	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
NULL	O
;	O
LOCK_RELEASE	O
(	O
lock	O
)	O
return	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
}	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
grad_gethostbyaddr_r	(*(char),int,int,*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
const	O
char	O
*	O
addr	*(char)
,	O
int	O
length	int
,	O
int	O
type	int
,	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
char	O
*	O
buffer	*(char)
,	O
int	O
buflen	int
,	O
int	O
*	O
h_errnop	*(int)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
LOCK_SET	O
(	O
lock	O
)	O
;	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
addr	*(char)
,	O
length	int
,	O
type	int
)	O
;	O
if	O
(	O
!	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
||	O
store_hostent	(*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(struct(*(char),*(*(char)),int,int,*(*(char)))),*(char),int,*(int))->(int)
(	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
,	O
buffer	*(char)
,	O
buflen	int
,	O
h_errnop	*(int)
)	O
)	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
NULL	O
;	O
LOCK_RELEASE	O
(	O
lock	O
)	O
;	O
return	O
result	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
}	O
