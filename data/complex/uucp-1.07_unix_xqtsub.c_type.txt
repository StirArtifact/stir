const	O
char	O
xqtsub_rcsid	array(char)
[	O
]	O
=	O
"$Id: xqtsub.c,v 1.24 2002/03/05 19:10:42 ian Rel $"	*(char)
;	O
static	O
boolean	int
fclean_uuxqt_dir	(*(char))->(int)
P	O
(	O
(	O
const	O
char	O
*	O
zxqtdir	*(char)
)	O
)	O
;	O
char	O
*	O
zsysdep_find_command	(*(char),*(*(char)),*(*(char)),*(int))->(*(char))
(	O
zcmd	*(char)
,	O
pzcmds	*(*(char))
,	O
pzpath	*(*(char))
,	O
pferr	*(int)
)	O
const	O
char	O
*	O
zcmd	*(char)
;	O
char	O
*	O
*	O
pzcmds	*(*(char))
;	O
char	O
*	O
*	O
pzpath	*(*(char))
;	O
boolean	int
*	O
pferr	*(int)
;	O
{	O
char	O
*	O
*	O
pz	*(*(char))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
s	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
*	O
pferr	*(int)
=	O
FALSE	O
;	O
for	O
(	O
pz	*(*(char))
=	O
pzcmds	*(*(char))
;	O
*	O
pz	*(*(char))
!=	O
NULL	O
;	O
pz	*(*(char))
++	O
)	O
{	O
char	O
*	O
zslash	*(char)
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
pz	*(*(char))
,	O
"ALL"	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
zslash	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
*	O
pz	*(*(char))
,	O
'/'	O
)	O
;	O
if	O
(	O
zslash	*(char)
!=	O
NULL	O
)	O
++	O
zslash	*(char)
;	O
else	O
zslash	*(char)
=	O
*	O
pz	*(*(char))
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
zslash	*(char)
,	O
zcmd	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
pz	*(*(char))
,	O
zcmd	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
*	O
*	O
pz	*(*(char))
==	O
'/'	O
)	O
{	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
*	O
pz	*(*(char))
,	O
&	O
s	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"%s: %s"	*(char)
,	O
*	O
pz	*(*(char))
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
*	O
pferr	*(int)
=	O
TRUE	O
;	O
return	O
NULL	O
;	O
}	O
return	O
zbufcpy	(*(char))->(*(char))
(	O
*	O
pz	*(*(char))
)	O
;	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
*	O
pz	*(*(char))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
for	O
(	O
pz	*(*(char))
=	O
pzpath	*(*(char))
;	O
*	O
pz	*(*(char))
!=	O
NULL	O
;	O
pz	*(*(char))
++	O
)	O
{	O
char	O
*	O
zname	*(char)
;	O
zname	*(char)
=	O
zsysdep_in_dir	(*(char),*(char))->(*(char))
(	O
*	O
pz	*(*(char))
,	O
zcmd	*(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
zname	*(char)
,	O
&	O
s	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
return	O
zname	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
zsysdep_xqt_local_file	(*(struct(*(char),*(*(char)),*(struct(*`,*`,*`,*`,int,int,*`,*`,*`,int,int,*`,*`,*`,*`,long,long,*`,*`,*`,struct`,*`,*`,*`,int,int,*`,*`,struct`,*`,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,long,*`)),*(char),int,int,*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),int,int,*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),long,long,*(char),*(struct(*`,enum(int,int,int,int,int,int,int),*`,*`,int,*`,*`,union`)),*(char),struct(*(*`),*(*`),int,*(*`),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*`)),struct(*(*`),*(*`),int,*(*`),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))),*(char))->(*(char))
(	O
qsys	*(struct)
,	O
zfile	*(char)
)	O
const	O
struct	O
uuconf_system	struct(*(char),*(*(char)),*(struct(*(char),*(*(char)),*(struct(*(char),*(*`),*(struct`),*(char),int,int,*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),*(struct`),long,long,*(char),*(struct`),*(char),struct(*`,*`,int,*`,int),*(char),*(char),*(char),int,int,*(char),*(struct`),struct(*`,*`,int,*`,int),*(char),*(char),int,int,int,int,*(*`),*(*`),*(*`),*(*`),*(*`),*(*`),long,*(*`),*(*`),*(char),*(char),long,*(void))),*(char),int,int,*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),int,int,*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),long,long,*(char),*(struct),*(char),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*(struct`))),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))),*(char),int,int,*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),int,int,*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),long,long,*(char),*(struct),*(char),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*(struct(int,*(*`))))),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))
*	O
qsys	*(struct)
;	O
const	O
char	O
*	O
zfile	*(char)
;	O
{	O
if	O
(	O
*	O
zfile	*(char)
!=	O
'~'	O
)	O
return	O
NULL	O
;	O
if	O
(	O
zfile	*(char)
[	O
1	int
]	O
==	O
'~'	O
)	O
{	O
size_t	long
clen	long
;	O
char	O
*	O
zret	*(char)
;	O
clen	long
=	O
strlen	(*(char))->(long)
(	O
zfile	*(char)
)	O
;	O
zret	*(char)
=	O
zbufalc	(long)->(*(char))
(	O
clen	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
zret	*(char)
,	O
zfile	*(char)
+	O
1	int
,	O
clen	long
)	O
;	O
return	O
zret	*(char)
;	O
}	O
return	O
zsysdep_local_file	(*(char),*(char),*(int))->(*(char))
(	O
zfile	*(char)
,	O
qsys	*(struct)
->	O
uuconf_zpubdir	*(char)
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
}	O
boolean	int
fsysdep_execute	(*(struct(*(char),*(*(char)),*(struct(*`,*`,*`,*`,int,int,*`,*`,*`,int,int,*`,*`,*`,*`,long,long,*`,*`,*`,struct`,*`,*`,*`,int,int,*`,*`,struct`,*`,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,long,*`)),*(char),int,int,*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),int,int,*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),long,long,*(char),*(struct(*`,enum(int,int,int,int,int,int,int),*`,*`,int,*`,*`,union`)),*(char),struct(*(*`),*(*`),int,*(*`),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*`)),struct(*(*`),*(*`),int,*(*`),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))),*(char),*(*(char)),*(char),*(char),*(char),int,int,*(*(char)),*(int))->(int)
(	O
qsys	*(struct)
,	O
zuser	*(char)
,	O
pazargs	*(*(char))
,	O
zfullcmd	*(char)
,	O
zinput	*(char)
,	O
zoutput	*(char)
,	O
fshell	int
,	O
iseq	int
,	O
pzerror	*(*(char))
,	O
pftemp	*(int)
)	O
const	O
struct	O
uuconf_system	struct(*(char),*(*(char)),*(struct(*(char),*(*(char)),*(struct(*(char),*(*`),*(struct`),*(char),int,int,*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),*(struct`),long,long,*(char),*(struct`),*(char),struct(*`,*`,int,*`,int),*(char),*(char),*(char),int,int,*(char),*(struct`),struct(*`,*`,int,*`,int),*(char),*(char),int,int,int,int,*(*`),*(*`),*(*`),*(*`),*(*`),*(*`),long,*(*`),*(*`),*(char),*(char),long,*(void))),*(char),int,int,*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),int,int,*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),*(struct(*(struct`),int,int,long,int)),long,long,*(char),*(struct),*(char),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*(struct`))),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))),*(char),int,int,*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),int,int,*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),*(struct(*(struct(*(struct`),int,int,long,int)),int,int,long,int)),long,long,*(char),*(struct),*(char),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*(struct(int,*(*`))))),struct(*(*(char)),*(*(char)),int,*(*(char)),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))
*	O
qsys	*(struct)
;	O
const	O
char	O
*	O
zuser	*(char)
;	O
const	O
char	O
*	O
*	O
pazargs	*(*(char))
;	O
const	O
char	O
*	O
zfullcmd	*(char)
ATTRIBUTE_UNUSED	O
;	O
const	O
char	O
*	O
zinput	*(char)
;	O
const	O
char	O
*	O
zoutput	*(char)
;	O
boolean	int
fshell	int
;	O
int	O
iseq	int
;	O
char	O
*	O
*	O
pzerror	*(*(char))
;	O
boolean	int
*	O
pftemp	*(int)
;	O
{	O
int	O
aidescs	*(int)
[	O
3	int
]	O
;	O
boolean	int
ferr	int
;	O
pid_t	int
ipid	int
;	O
int	O
ierr	int
;	O
char	O
abxqtdir	array(char)
[	O
sizeof	O
XQTDIR	*(char)
+	O
4	int
]	O
;	O
const	O
char	O
*	O
zxqtdir	*(char)
;	O
int	O
istat	int
;	O
char	O
*	O
zpath	*(char)
;	O
*	O
pzerror	*(*(char))
=	O
NULL	O
;	O
*	O
pftemp	*(int)
=	O
FALSE	O
;	O
aidescs	*(int)
[	O
0	int
]	O
=	O
SPAWN_NULL	O
;	O
aidescs	*(int)
[	O
1	int
]	O
=	O
SPAWN_NULL	O
;	O
aidescs	*(int)
[	O
2	int
]	O
=	O
SPAWN_NULL	O
;	O
ferr	int
=	O
FALSE	O
;	O
if	O
(	O
zinput	*(char)
!=	O
NULL	O
)	O
{	O
aidescs	*(int)
[	O
0	int
]	O
=	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
zinput	*(char)
,	O
O_RDONLY	int
|	O
O_NOCTTY	int
,	O
0	int
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
0	int
]	O
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"open (%s): %s"	*(char)
,	O
zinput	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
else	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
aidescs	*(int)
[	O
0	int
]	O
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
aidescs	*(int)
[	O
0	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
zoutput	*(char)
!=	O
NULL	O
)	O
{	O
aidescs	*(int)
[	O
1	int
]	O
=	O
creat	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
zoutput	*(char)
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
1	int
]	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
&&	O
zoutput	*(char)
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
if	O
(	O
!	O
fsysdep_make_dirs	(*(char),int)->(int)
(	O
zoutput	*(char)
,	O
FALSE	O
)	O
)	O
{	O
*	O
pftemp	*(int)
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
else	O
aidescs	*(int)
[	O
1	int
]	O
=	O
creat	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
zoutput	*(char)
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
aidescs	*(int)
[	O
1	int
]	O
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"creat (%s): %s"	*(char)
,	O
zoutput	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
*	O
pftemp	*(int)
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
fcntl	(int,int)->(int)
(	O
aidescs	*(int)
[	O
1	int
]	O
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
aidescs	*(int)
[	O
1	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
)	O
{	O
*	O
pzerror	*(*(char))
=	O
zstemp_file	(*(struct(*(char),*(*(char)),*(struct(*`,*`,*`,*`,int,int,*`,*`,*`,int,int,*`,*`,*`,*`,long,long,*`,*`,*`,struct`,*`,*`,*`,int,int,*`,*`,struct`,*`,*`,int,int,int,int,*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,long,*`)),*(char),int,int,*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),int,int,*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),*(struct(*`,int,int,long,int)),long,long,*(char),*(struct(*`,enum(int,int,int,int,int,int,int),*`,*`,int,*`,*`,union`)),*(char),struct(*(*`),*(*`),int,*(*`),int),*(char),*(char),*(char),int,int,*(char),*(struct(int,*`)),struct(*(*`),*(*`),int,*(*`),int),*(char),*(char),int,int,int,int,*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),*(*(char)),long,*(*(char)),*(*(char)),*(char),*(char),long,*(void))))->(*(char))
(	O
qsys	*(struct)
)	O
;	O
aidescs	*(int)
[	O
2	int
]	O
=	O
creat	(*(char),int)->(int)
(	O
*	O
pzerror	*(*(char))
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
2	int
]	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
if	O
(	O
!	O
fsysdep_make_dirs	(*(char),int)->(int)
(	O
*	O
pzerror	*(*(char))
,	O
FALSE	O
)	O
)	O
{	O
*	O
pftemp	*(int)
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
else	O
aidescs	*(int)
[	O
2	int
]	O
=	O
creat	(*(char),int)->(int)
(	O
*	O
pzerror	*(*(char))
,	O
IPRIVATE_FILE_MODE	O
)	O
;	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
aidescs	*(int)
[	O
2	int
]	O
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"creat (%s): %s"	*(char)
,	O
*	O
pzerror	*(*(char))
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
*	O
pftemp	*(int)
=	O
TRUE	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
fcntl	(int,int)->(int)
(	O
aidescs	*(int)
[	O
2	int
]	O
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
aidescs	*(int)
[	O
2	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"fcntl (FD_CLOEXEC): %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
}	O
}	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	*(char)
=	O
XQTDIR	*(char)
;	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
abxqtdir	array(char)
,	O
"%s%04d"	*(char)
,	O
XQTDIR	*(char)
,	O
iseq	int
)	O
;	O
zxqtdir	*(char)
=	O
abxqtdir	array(char)
;	O
}	O
if	O
(	O
ferr	int
)	O
{	O
if	O
(	O
aidescs	*(int)
[	O
0	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aidescs	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
1	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aidescs	*(int)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
2	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aidescs	*(int)
[	O
2	int
]	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
*	O
pzerror	*(*(char))
)	O
;	O
return	O
FALSE	O
;	O
}	O
fshell	int
=	O
FALSE	O
;	O
if	O
(	O
qsys	*(struct)
->	O
uuconf_pzpath	*(*(char))
==	O
NULL	O
)	O
zpath	*(char)
=	O
NULL	O
;	O
else	O
{	O
size_t	long
c	long
;	O
char	O
*	O
*	O
pz	*(*(char))
;	O
c	long
=	O
0	int
;	O
for	O
(	O
pz	*(*(char))
=	O
qsys	*(struct)
->	O
uuconf_pzpath	*(*(char))
;	O
*	O
pz	*(*(char))
!=	O
NULL	O
;	O
pz	*(*(char))
++	O
)	O
c	long
+=	O
strlen	(*(char))->(long)
(	O
*	O
pz	*(*(char))
)	O
+	O
1	int
;	O
zpath	*(char)
=	O
zbufalc	(long)->(*(char))
(	O
c	long
)	O
;	O
*	O
zpath	*(char)
=	O
'\0'	O
;	O
for	O
(	O
pz	*(*(char))
=	O
qsys	*(struct)
->	O
uuconf_pzpath	*(*(char))
;	O
*	O
pz	*(*(char))
!=	O
NULL	O
;	O
pz	*(*(char))
++	O
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
zpath	*(char)
,	O
*	O
pz	*(*(char))
)	O
;	O
if	O
(	O
pz	*(*(char))
[	O
1	int
]	O
!=	O
NULL	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
zpath	*(char)
,	O
":"	*(char)
)	O
;	O
}	O
}	O
ipid	int
=	O
ixsspawn	(*(*(char)),*(int),int,int,*(char),int,int,*(char),*(char),*(char))->(int)
(	O
pazargs	*(*(char))
,	O
aidescs	*(int)
,	O
TRUE	O
,	O
FALSE	O
,	O
zxqtdir	*(char)
,	O
TRUE	O
,	O
!	O
fshell	int
,	O
zpath	*(char)
,	O
qsys	*(struct)
->	O
uuconf_zname	*(char)
,	O
zuser	*(char)
)	O
;	O
ierr	int
=	O
errno	O
;	O
ubuffree	(*(char))->(void)
(	O
zpath	*(char)
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
0	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aidescs	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
1	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aidescs	*(int)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
aidescs	*(int)
[	O
2	int
]	O
!=	O
SPAWN_NULL	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aidescs	*(int)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
ipid	int
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"ixsspawn: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
ierr	int
)	O
)	O
;	O
*	O
pftemp	*(int)
=	O
TRUE	O
;	O
return	O
FALSE	O
;	O
}	O
istat	int
=	O
ixswait	(long,*(char))->(int)
(	O
(	O
unsigned	O
long	O
)	O
ipid	int
,	O
"Execution"	*(char)
)	O
;	O
if	O
(	O
istat	int
==	O
EX_TEMPFAIL	int
)	O
*	O
pftemp	*(int)
=	O
TRUE	O
;	O
return	O
istat	int
==	O
0	int
;	O
}	O
int	O
ixsysdep_lock_uuxqt	(*(char),int)->(int)
(	O
zcmd	*(char)
,	O
cmaxuuxqts	int
)	O
const	O
char	O
*	O
zcmd	*(char)
;	O
int	O
cmaxuuxqts	int
;	O
{	O
char	O
ab	array(char)
[	O
sizeof	O
"LCK.XQT.9999"	*(char)
]	O
;	O
int	O
i	int
;	O
if	O
(	O
cmaxuuxqts	int
<=	O
0	int
||	O
cmaxuuxqts	int
>=	O
10000	int
)	O
cmaxuuxqts	int
=	O
9999	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cmaxuuxqts	int
;	O
i	int
++	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
ab	array(char)
,	O
"LCK.XQT.%d"	*(char)
,	O
i	int
)	O
;	O
if	O
(	O
fsdo_lock	(*(char),int,*(int))->(int)
(	O
ab	array(char)
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
i	int
>=	O
cmaxuuxqts	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
zcmd	*(char)
!=	O
NULL	O
)	O
{	O
char	O
abcmd	array(char)
[	O
sizeof	O
"LXQ.123456789"	*(char)
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
abcmd	array(char)
,	O
"LXQ.%.9s"	*(char)
,	O
zcmd	*(char)
)	O
;	O
abcmd	array(char)
[	O
strcspn	(*(char),*(char))->(long)
(	O
abcmd	array(char)
,	O
" \t/"	*(char)
)	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
fsdo_lock	(*(char),int,*(int))->(int)
(	O
abcmd	array(char)
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
)	O
{	O
(	O
void	O
)	O
fsdo_unlock	(*(char),int)->(int)
(	O
ab	array(char)
,	O
TRUE	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
return	O
i	int
;	O
}	O
boolean	int
fsysdep_unlock_uuxqt	(int,*(char),int)->(int)
(	O
iseq	int
,	O
zcmd	*(char)
,	O
cmaxuuxqts	int
)	O
int	O
iseq	int
;	O
const	O
char	O
*	O
zcmd	*(char)
;	O
int	O
cmaxuuxqts	int
ATTRIBUTE_UNUSED	O
;	O
{	O
char	O
ab	array(char)
[	O
sizeof	O
"LCK.XQT.9999"	*(char)
]	O
;	O
boolean	int
fret	int
;	O
fret	int
=	O
TRUE	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
ab	array(char)
,	O
"LCK.XQT.%d"	*(char)
,	O
iseq	int
)	O
;	O
if	O
(	O
!	O
fsdo_unlock	(*(char),int)->(int)
(	O
ab	array(char)
,	O
TRUE	O
)	O
)	O
fret	int
=	O
FALSE	O
;	O
if	O
(	O
zcmd	*(char)
!=	O
NULL	O
)	O
{	O
char	O
abcmd	array(char)
[	O
sizeof	O
"LXQ.123456789"	*(char)
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
abcmd	array(char)
,	O
"LXQ.%.9s"	*(char)
,	O
zcmd	*(char)
)	O
;	O
abcmd	array(char)
[	O
strcspn	(*(char),*(char))->(long)
(	O
abcmd	array(char)
,	O
" \t/"	*(char)
)	O
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
fsdo_unlock	(*(char),int)->(int)
(	O
abcmd	array(char)
,	O
TRUE	O
)	O
)	O
fret	int
=	O
FALSE	O
;	O
}	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_uuxqt_locked	(*(char))->(int)
(	O
zcmd	*(char)
)	O
const	O
char	O
*	O
zcmd	*(char)
;	O
{	O
char	O
ab	array(char)
[	O
sizeof	O
"LXQ.123456789"	*(char)
]	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
s	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
sprintf	(*(char),*(char))->(int)
(	O
ab	array(char)
,	O
"LXQ.%.9s"	*(char)
,	O
zcmd	*(char)
)	O
;	O
return	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
ab	array(char)
,	O
&	O
s	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
;	O
}	O
boolean	int
fsysdep_lock_uuxqt_file	(*(char))->(int)
(	O
zfile	*(char)
)	O
const	O
char	O
*	O
zfile	*(char)
;	O
{	O
char	O
*	O
zcopy	*(char)
,	O
*	O
z	*(char)
;	O
boolean	int
fret	int
;	O
zcopy	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
zfile	*(char)
)	O
;	O
z	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
zcopy	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
z	*(char)
==	O
NULL	O
)	O
*	O
zcopy	*(char)
=	O
'L'	O
;	O
else	O
*	O
(	O
z	*(char)
+	O
1	int
)	O
=	O
'L'	O
;	O
fret	int
=	O
fsdo_lock	(*(char),int,*(int))->(int)
(	O
zcopy	*(char)
,	O
TRUE	O
,	O
(	O
boolean	int
*	O
)	O
NULL	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zcopy	*(char)
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_unlock_uuxqt_file	(*(char))->(int)
(	O
zfile	*(char)
)	O
const	O
char	O
*	O
zfile	*(char)
;	O
{	O
char	O
*	O
zcopy	*(char)
,	O
*	O
z	*(char)
;	O
boolean	int
fret	int
;	O
zcopy	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
zfile	*(char)
)	O
;	O
z	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
zcopy	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
z	*(char)
==	O
NULL	O
)	O
*	O
zcopy	*(char)
=	O
'L'	O
;	O
else	O
*	O
(	O
z	*(char)
+	O
1	int
)	O
=	O
'L'	O
;	O
fret	int
=	O
fsdo_unlock	(*(char),int)->(int)
(	O
zcopy	*(char)
,	O
TRUE	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zcopy	*(char)
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsysdep_lock_uuxqt_dir	(int)->(int)
(	O
iseq	int
)	O
int	O
iseq	int
;	O
{	O
const	O
char	O
*	O
zxqtdir	*(char)
;	O
char	O
abxqtdir	array(char)
[	O
sizeof	O
XQTDIR	*(char)
+	O
4	int
]	O
;	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	*(char)
=	O
XQTDIR	*(char)
;	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
abxqtdir	array(char)
,	O
"%s%04d"	*(char)
,	O
XQTDIR	*(char)
,	O
iseq	int
)	O
;	O
zxqtdir	*(char)
=	O
abxqtdir	array(char)
;	O
}	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
zxqtdir	*(char)
,	O
S_IRWXU	O
)	O
<	O
0	int
&&	O
errno	O
!=	O
EEXIST	int
&&	O
errno	O
!=	O
EISDIR	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"mkdir (%s): %s"	*(char)
,	O
zxqtdir	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
fclean_uuxqt_dir	(*(char))->(int)
(	O
zxqtdir	*(char)
)	O
;	O
}	O
boolean	int
fsysdep_unlock_uuxqt_dir	(int)->(int)
(	O
iseq	int
)	O
int	O
iseq	int
;	O
{	O
const	O
char	O
*	O
zxqtdir	*(char)
;	O
char	O
abxqtdir	array(char)
[	O
sizeof	O
XQTDIR	*(char)
+	O
4	int
]	O
;	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	*(char)
=	O
XQTDIR	*(char)
;	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
abxqtdir	array(char)
,	O
"%s%04d"	*(char)
,	O
XQTDIR	*(char)
,	O
iseq	int
)	O
;	O
zxqtdir	*(char)
=	O
abxqtdir	array(char)
;	O
}	O
return	O
fclean_uuxqt_dir	(*(char))->(int)
(	O
zxqtdir	*(char)
)	O
;	O
}	O
static	O
boolean	int
fclean_uuxqt_dir	(*(char))->(int)
(	O
zxqtdir	*(char)
)	O
const	O
char	O
*	O
zxqtdir	*(char)
;	O
{	O
DIR	struct
*	O
qdir	*(struct)
;	O
qdir	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
(	O
char	O
*	O
)	O
zxqtdir	*(char)
)	O
;	O
if	O
(	O
qdir	*(struct)
!=	O
NULL	O
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
qentry	*(struct(long,long,short,char,array(char)))
;	O
while	O
(	O
(	O
qentry	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
qdir	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
z	*(char)
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
qentry	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
"."	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
qentry	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
,	O
".."	*(char)
)	O
==	O
0	int
)	O
continue	O
;	O
z	*(char)
=	O
zsysdep_in_dir	(*(char),*(char))->(*(char))
(	O
zxqtdir	*(char)
,	O
qentry	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
remove	(*(char))->(int)
(	O
z	*(char)
)	O
<	O
0	int
)	O
{	O
int	O
ierr	int
;	O
ierr	int
=	O
errno	O
;	O
if	O
(	O
!	O
fsysdep_directory	(*(char))->(int)
(	O
z	*(char)
)	O
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"remove (%s): %s"	*(char)
,	O
z	*(char)
,	O
strerror	(int)->(*(char))
(	O
ierr	int
)	O
)	O
;	O
else	O
(	O
void	O
)	O
fsysdep_rmdir	(*(char))->(int)
(	O
z	*(char)
)	O
;	O
}	O
ubuffree	(*(char))->(void)
(	O
z	*(char)
)	O
;	O
}	O
closedir	(*(struct))->(int)
(	O
qdir	*(struct)
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
boolean	int
fsysdep_copy_uuxqt_files	(int,*(*(char)),*(*(char)),int,*(*(char)))->(int)
(	O
cfiles	int
,	O
pzfrom	*(*(char))
,	O
pzto	*(*(char))
,	O
iseq	int
,	O
pzinput	*(*(char))
)	O
int	O
cfiles	int
;	O
const	O
char	O
*	O
const	O
*	O
pzfrom	*(*(char))
;	O
const	O
char	O
*	O
const	O
*	O
pzto	*(*(char))
;	O
int	O
iseq	int
;	O
char	O
*	O
*	O
pzinput	*(*(char))
;	O
{	O
char	O
*	O
zinput	*(char)
;	O
const	O
char	O
*	O
zxqtdir	*(char)
;	O
char	O
abxqtdir	array(char)
[	O
sizeof	O
XQTDIR	*(char)
+	O
4	int
]	O
;	O
int	O
i	int
;	O
if	O
(	O
pzinput	*(*(char))
==	O
NULL	O
)	O
zinput	*(char)
=	O
NULL	O
;	O
else	O
zinput	*(char)
=	O
*	O
pzinput	*(*(char))
;	O
if	O
(	O
iseq	int
==	O
0	int
)	O
zxqtdir	*(char)
=	O
XQTDIR	*(char)
;	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
abxqtdir	array(char)
,	O
"%s%04d"	*(char)
,	O
XQTDIR	*(char)
,	O
iseq	int
)	O
;	O
zxqtdir	*(char)
=	O
abxqtdir	array(char)
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cfiles	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
zfrom	*(char)
,	O
*	O
zto	*(char)
;	O
char	O
*	O
zfree	*(char)
;	O
if	O
(	O
pzto	*(*(char))
[	O
i	int
]	O
==	O
NULL	O
)	O
continue	O
;	O
zfree	*(char)
=	O
zsysdep_in_dir	(*(char),*(char))->(*(char))
(	O
zxqtdir	*(char)
,	O
pzto	*(*(char))
[	O
i	int
]	O
)	O
;	O
zfrom	*(char)
=	O
pzfrom	*(*(char))
[	O
i	int
]	O
;	O
zto	*(char)
=	O
zfree	*(char)
;	O
if	O
(	O
zinput	*(char)
!=	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
zinput	*(char)
,	O
zfrom	*(char)
)	O
==	O
0	int
)	O
{	O
*	O
pzinput	*(*(char))
=	O
zbufcpy	(*(char))->(*(char))
(	O
zto	*(char)
)	O
;	O
zinput	*(char)
=	O
NULL	O
;	O
}	O
if	O
(	O
link	(*(char),*(char))->(int)
(	O
zfrom	*(char)
,	O
zto	*(char)
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EXDEV	int
&&	O
errno	O
!=	O
EEXIST	int
&&	O
errno	O
!=	O
EMLINK	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"link (%s, %s): %s"	*(char)
,	O
zfrom	*(char)
,	O
zto	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
fcopy_file	(*(char),*(char),int,int,int)->(int)
(	O
zfrom	*(char)
,	O
zto	*(char)
,	O
FALSE	O
,	O
FALSE	O
,	O
FALSE	O
)	O
)	O
{	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
(	O
void	O
)	O
chmod	(*(char),int)->(int)
(	O
zto	*(char)
,	O
IPUBLIC_FILE_MODE	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
}	O
return	O
TRUE	O
;	O
}	O
