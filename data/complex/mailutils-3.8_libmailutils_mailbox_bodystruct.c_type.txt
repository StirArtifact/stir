void	O
mu_list_free_bodystructure	(*(void))->(void)
(	O
void	O
*	O
item	*(void)
)	O
{	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
item	*(void)
)	O
;	O
}	O
void	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
{	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
return	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
)	O
;	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_param	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_id	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_descr	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_encoding	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_md5	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disposition	*(char)
)	O
;	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disp_param	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_language	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_location	*(char)
)	O
;	O
switch	O
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
)	O
{	O
case	O
mu_message_other	int
:	O
case	O
mu_message_text	int
:	O
break	O
;	O
case	O
mu_message_rfc822	int
:	O
mu_message_imapenvelope_free	(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char))))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_env	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char)))
)	O
;	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_struct	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char)))
)	O
;	O
break	O
;	O
case	O
mu_message_multipart	int
:	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
}	O
static	O
int	O
bodystructure_fill	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
static	O
int	O
bodystructure_init	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
*	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
)	O
;	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
bodystructure_fill	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
msg	*(struct)
,	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
else	O
*	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
=	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
bodystructure_fill	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
{	O
mu_header_t	*(struct)
header	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
buffer	*(char)
=	O
NULL	O
;	O
mu_body_t	*(struct)
body	*(struct)
=	O
NULL	O
;	O
int	O
rc	int
;	O
int	O
is_multipart	int
=	O
0	int
;	O
rc	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
header	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
,	O
&	O
buffer	*(char)
)	O
==	O
0	int
)	O
{	O
char	O
*	O
value	*(void)
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
len	long
;	O
rc	int
=	O
mu_mime_header_parse	(*(char),*(char),*(*(char)),*(*(struct)))->(int)
(	O
buffer	*(char)
,	O
"UTF-8"	*(char)
,	O
&	O
value	*(void)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_param	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
value	*(void)
,	O
"/"	*(char)
)	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"MESSAGE/RFC822"	*(char)
)	O
==	O
0	int
)	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_rfc822	int
;	O
else	O
if	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"TEXT"	*(char)
,	O
len	long
)	O
==	O
0	int
)	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_text	int
;	O
p	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
value	*(void)
,	O
len	long
)	O
;	O
p	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
=	O
p	*(char)
;	O
mu_strupper	(*(char))->(int)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
)	O
;	O
if	O
(	O
value	*(void)
[	O
len	long
]	O
)	O
{	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	*(void)
+	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
)	O
return	O
ENOMEM	int
;	O
mu_strupper	(*(char))->(int)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
)	O
;	O
}	O
rc	int
=	O
mu_message_is_multipart	(*(struct),*(int))->(int)
(	O
msg	*(struct)
,	O
&	O
is_multipart	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
is_multipart	int
)	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_multipart	int
;	O
}	O
else	O
{	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
param	*(char)
;	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"TEXT"	*(char)
)	O
;	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
)	O
return	O
ENOMEM	int
;	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"PLAIN"	*(char)
)	O
;	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_mime_param_assoc_create	(*(*(struct)))->(int)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_param	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
param	*(char)
,	O
0	int
,	O
sizeof	O
(	O
param	*(char)
)	O
)	O
;	O
param	*(char)
.	O
value	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
"US-ASCII"	*(char)
)	O
;	O
if	O
(	O
!	O
param	*(char)
.	O
value	*(void)
)	O
{	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_subtype	*(char)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_param	*(struct)
,	O
"CHARSET"	*(char)
,	O
&	O
param	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
param	*(char)
.	O
value	*(void)
)	O
;	O
return	O
rc	int
;	O
}	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_text	int
;	O
}	O
if	O
(	O
is_multipart	int
)	O
{	O
size_t	long
i	long
,	O
nparts	*(long)
;	O
rc	int
=	O
mu_message_get_num_parts	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
nparts	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
,	O
mu_list_free_bodystructure	(*(void))->(void)
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
nparts	*(long)
;	O
i	long
++	O
)	O
{	O
mu_message_t	*(struct)
partmsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
;	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
partbs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
;	O
rc	int
=	O
mu_message_get_part	(*(struct),long,*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
i	long
,	O
&	O
partmsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
bodystructure_init	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
partmsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
&	O
partbs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
,	O
partbs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
partbs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
}	O
else	O
{	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_ID	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_id	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_DESCRIPTION	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_descr	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_encoding	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"7BIT"	*(char)
)	O
;	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_encoding	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
else	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_body_size	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
==	O
mu_message_text	int
)	O
{	O
rc	int
=	O
mu_body_lines	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
text	struct(long)
.	O
body_lines	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
if	O
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
==	O
mu_message_rfc822	int
)	O
{	O
mu_message_t	*(struct)
emsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
=	O
NULL	O
;	O
rc	int
=	O
mu_message_unencapsulate	(*(struct),*(*(struct)),*(struct))->(int)
(	O
msg	*(struct)
,	O
&	O
emsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_get_imapenvelope	(*(struct),*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char)))))->(int)
(	O
emsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_env	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
bodystructure_init	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
emsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_struct	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
emsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct)))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_lines	long
)	O
;	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
emsg	*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(struct),*(struct),long,*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(int))->(int)),*((*(struct`),*(long),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
NULL	O
)	O
;	O
}	O
}	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_MD5	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_md5	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_sget_value	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_DISPOSITION	*(char)
,	O
&	O
buffer	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_mime_header_parse	(*(char),*(char),*(*(char)),*(*(struct)))->(int)
(	O
buffer	*(char)
,	O
"UTF-8"	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disposition	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disp_param	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_LANGUAGE	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_language	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
header	*(struct)
,	O
MU_HEADER_CONTENT_LOCATION	*(char)
,	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_location	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
rc	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_get_bodystructure	(*(struct),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
*	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
)	O
{	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	*(struct)
->	O
_bodystructure	*((*(struct),*(*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))))->(int))
)	O
return	O
msg	*(struct)
->	O
_bodystructure	*((*(struct),*(*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))))->(int))
(	O
msg	*(struct)
,	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
)	O
;	O
return	O
bodystructure_init	(*(struct(int,*(void),*(struct),*(struct),*(struct),int,*(struct),*(struct),*(struct),*(struct(*`,*`,int,int)),*(struct),*(struct),*(struct),long,*((*`,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`)->(int)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
msg	*(struct)
,	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
)	O
;	O
}	O
int	O
mu_message_set_bodystructure	(*(struct),*((*(struct),*(*(struct`)))->(int)),*(void))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
int	O
(	O
*	O
_bodystructure	*((*(struct),*(*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))))->(int))
)	O
(	O
mu_message_t	*(struct)
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
*	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
msg	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
msg	*(struct)
->	O
_bodystructure	*((*(struct),*(*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))))->(int))
=	O
_bodystructure	*((*(struct),*(*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))))->(int))
;	O
return	O
0	int
;	O
}	O
