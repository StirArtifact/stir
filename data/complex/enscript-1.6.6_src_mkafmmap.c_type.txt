static	O
void	O
usage	()->(void)
(	O
)	O
;	O
static	O
char	O
*	O
fname	*(char)
=	O
"font.map"	*(char)
;	O
static	O
char	O
*	O
program	*(char)
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"output-file"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'p'	O
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
}	O
,	O
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
AFMError	int
error	int
;	O
AFMHandle	*(struct)
afm	*(struct)
;	O
AFMFont	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
;	O
int	O
i	int
;	O
FILE	struct
*	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
FILE	struct
*	O
mfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
program	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
program	*(char)
==	O
NULL	O
)	O
program	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
else	O
program	*(char)
++	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
program	*(char)
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_MESSAGES	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
int	O
c	int
;	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"p:h"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'h'	O
:	O
usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
case	O
'p'	O
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
fname	*(char)
=	O
NULL	O
;	O
else	O
fname	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'V'	O
:	O
printf	(*(char))->(int)
(	O
"%s for GNU %s %s\n"	*(char)
,	O
program	*(char)
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
break	O
;	O
case	O
'?'	O
:	O
usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
printf	(*(char))->(int)
(	O
_	O
(	O
"file=%s\n"	*(char)
)	O
,	O
fname	*(char)
?	O
fname	*(char)
:	O
_	O
(	O
"stdout"	*(char)
)	O
)	O
;	O
if	O
(	O
fname	*(char)
)	O
{	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fname	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
_	O
(	O
"%s: couldn't open output file \"%s\""	*(char)
)	O
,	O
program	*(char)
,	O
fname	*(char)
)	O
;	O
perror	(*(char))->(void)
(	O
buf	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
mfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
else	O
{	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
mfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
error	int
=	O
afm_create	(*(char),int,*(*(struct)))->(int)
(	O
NULL	O
,	O
0	int
,	O
&	O
afm	*(struct)
)	O
;	O
HANDLE_ERROR	O
(	O
_	O
(	O
"couldn't create AFM library"	*(char)
)	O
)	O
;	O
for	O
(	O
i	int
=	O
optind	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
mfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s...\n"	*(char)
,	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
error	int
=	O
afm_open_file	(*(struct),int,*(char),*(*(struct(*(struct`),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*`,*`,*`,*`,double,double,double,double,*`,*`,*`,long,long,*`,long,enum(int,int),double,double,enum(int,int),double,double,double,double,*`,*`,*`,*`),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct`),long,*(struct`),long,*(struct`),long,*(struct`)))))->(int)
(	O
afm	*(struct)
,	O
AFM_I_MINIMUM	int
,	O
argv	*(*(char))
[	O
i	int
]	O
,	O
&	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
if	O
(	O
error	int
==	O
AFM_SUCCESS	int
)	O
{	O
char	O
*	O
cp	*(char)
;	O
char	O
*	O
sf	*(char)
;	O
int	O
len	int
;	O
cp	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
i	int
]	O
,	O
'/'	O
)	O
;	O
if	O
(	O
cp	*(char)
==	O
NULL	O
)	O
cp	*(char)
=	O
argv	*(*(char))
[	O
i	int
]	O
;	O
else	O
cp	*(char)
++	O
;	O
sf	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
i	int
]	O
,	O
'.'	O
)	O
;	O
if	O
(	O
sf	*(char)
)	O
len	int
=	O
sf	*(char)
-	O
cp	*(char)
;	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%-30s\t%.*s\n"	*(char)
,	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
->	O
global_info	struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))),*(struct(double,*(struct(int,union`)))))
.	O
FontName	*(char)
,	O
len	int
,	O
cp	*(char)
)	O
;	O
(	O
void	O
)	O
afm_close_font	(*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct`),*(struct`),*(struct`),*(struct`)),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*`,double,double,double,double,double,double,double,*`)),long,*(struct(*`,long,*`)),long,*(struct(*`,*`,double,double)),long,*(struct(long,double,double,double,double)))))->(int)
(	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
)	O
;	O
}	O
else	O
{	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
afm_error_to_string	(int,*(char))->(void)
(	O
error	int
,	O
buf	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
mfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %s\n"	*(char)
,	O
program	*(char)
,	O
buf	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
fname	*(char)
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
usage	()->(void)
(	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION]... FILE...\nMandatory arguments to long options are mandatory for short options too.\n  -h, --help              print this help and exit\n  -p, --output-file=NAME  print output to file NAME (default file is\n                          font.map).  If FILE is `-', leavy output to\n                          stdout.\n  -V, --version           print version number\n"	*(char)
)	O
,	O
program	*(char)
)	O
;	O
}	O
