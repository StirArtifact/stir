double	O
*	O
LogTransformArray	(long,*(double),*(double))->(*(double))
(	O
long	O
nElems	long
,	O
double	O
*	O
rgdSrc	*(double)
,	O
double	O
*	O
rgdDes	*(double)
)	O
{	O
register	O
long	O
l	O
;	O
for	O
(	O
l	O
=	O
0	int
;	O
l	O
<	O
nElems	long
;	O
l	O
++	O
)	O
rgdDes	*(double)
[	O
l	O
]	O
=	O
log	(double)->(double)
(	O
rgdSrc	*(double)
[	O
l	O
]	O
)	O
;	O
return	O
rgdDes	*(double)
;	O
}	O
double	O
*	O
InitdVector	(long)->(*(double))
(	O
long	O
cVectors	long
)	O
{	O
if	O
(	O
cVectors	long
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: zero length array allocation in InitdVector - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
return	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cVectors	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
}	O
int	O
*	O
InitiVector	(long)->(*(int))
(	O
long	O
cVectors	long
)	O
{	O
if	O
(	O
cVectors	long
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: zero length array allocation in InitiVector - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
return	O
(	O
int	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cVectors	long
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
}	O
long	O
*	O
InitlVector	(long)->(*(long))
(	O
long	O
cVectors	long
)	O
{	O
if	O
(	O
cVectors	long
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: zero length array allocation in InitlVector - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
return	O
(	O
long	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cVectors	long
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
}	O
double	O
*	O
*	O
InitpdVector	(long)->(*(*(double)))
(	O
long	O
cVectors	long
)	O
{	O
if	O
(	O
cVectors	long
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: zero length array allocation in InitpdVector - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
return	O
(	O
double	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cVectors	long
*	O
sizeof	O
(	O
double	O
*	O
)	O
)	O
;	O
}	O
double	O
*	O
*	O
InitdMatrix	(long,long)->(*(*(double)))
(	O
long	O
cVectors	long
,	O
long	O
cElemsEach	long
)	O
{	O
register	O
long	O
i	O
;	O
double	O
*	O
*	O
rgp	O
;	O
if	O
(	O
(	O
cVectors	long
==	O
0	int
)	O
||	O
(	O
cElemsEach	long
==	O
0	int
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: zero length array allocation in InitdMatrix - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
rgp	O
=	O
(	O
double	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cVectors	long
*	O
sizeof	O
(	O
double	O
*	O
)	O
)	O
;	O
if	O
(	O
rgp	O
)	O
{	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
cVectors	long
;	O
i	O
++	O
)	O
{	O
rgp	O
[	O
i	O
]	O
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cElemsEach	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
!	O
rgp	O
[	O
i	O
]	O
)	O
{	O
rgp	O
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
(	O
rgp	O
)	O
;	O
}	O
long	O
*	O
*	O
InitlMatrix	(long,long)->(*(*(long)))
(	O
long	O
cVectors	long
,	O
long	O
cElemsEach	long
)	O
{	O
register	O
long	O
i	O
;	O
long	O
*	O
*	O
rgp	O
;	O
if	O
(	O
(	O
cVectors	long
==	O
0	int
)	O
||	O
(	O
cElemsEach	long
==	O
0	int
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error: zero length array allocation in InitlMatrix - Exiting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
rgp	O
=	O
(	O
long	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cVectors	long
*	O
sizeof	O
(	O
long	O
*	O
)	O
)	O
;	O
if	O
(	O
rgp	O
)	O
{	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
cVectors	long
;	O
i	O
++	O
)	O
{	O
rgp	O
[	O
i	O
]	O
=	O
(	O
long	O
*	O
)	O
malloc	(long)->(*(void))
(	O
cElemsEach	long
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
if	O
(	O
!	O
rgp	O
[	O
i	O
]	O
)	O
{	O
rgp	O
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
return	O
(	O
rgp	O
)	O
;	O
}	O
void	O
ColumnMeans	(long,long,*(*(double)),*(double))->(void)
(	O
long	O
cRows	long
,	O
long	O
cCols	long
,	O
double	O
*	O
*	O
x	*(*(double))
,	O
double	O
*	O
x_bar	*(double)
)	O
{	O
register	O
long	O
i	O
,	O
l	O
;	O
for	O
(	O
l	O
=	O
0	int
;	O
l	O
<	O
cCols	long
;	O
l	O
++	O
)	O
x_bar	*(double)
[	O
l	O
]	O
=	O
0.0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
cRows	long
;	O
i	O
++	O
)	O
for	O
(	O
l	O
=	O
0	int
;	O
l	O
<	O
cCols	long
;	O
l	O
++	O
)	O
x_bar	*(double)
[	O
l	O
]	O
+=	O
x	*(*(double))
[	O
i	O
]	O
[	O
l	O
]	O
;	O
for	O
(	O
l	O
=	O
0	int
;	O
l	O
<	O
cCols	long
;	O
l	O
++	O
)	O
x_bar	*(double)
[	O
l	O
]	O
/=	O
cRows	long
;	O
}	O
int	O
Cholesky	(*(*(double)),*(*(double)),long)->(int)
(	O
PDOUBLE	*(double)
*	O
prgdVariance	*(*(double))
,	O
PDOUBLE	*(double)
*	O
prgdComponent	*(*(double))
,	O
long	O
lNparams	long
)	O
{	O
register	O
int	O
i	O
,	O
j	O
,	O
k	O
;	O
double	O
dSum	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
lNparams	long
;	O
i	O
++	O
)	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
lNparams	long
;	O
j	O
++	O
)	O
prgdComponent	*(*(double))
[	O
i	O
]	O
[	O
j	O
]	O
=	O
0.0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
lNparams	long
;	O
i	O
++	O
)	O
for	O
(	O
j	O
=	O
i	O
;	O
j	O
<	O
lNparams	long
;	O
j	O
++	O
)	O
{	O
dSum	O
=	O
prgdVariance	*(*(double))
[	O
i	O
]	O
[	O
j	O
]	O
;	O
for	O
(	O
k	O
=	O
i	O
-	O
1	int
;	O
k	O
>=	O
0	int
;	O
k	O
--	O
)	O
dSum	O
=	O
dSum	O
-	O
prgdVariance	*(*(double))
[	O
i	O
]	O
[	O
k	O
]	O
*	O
prgdVariance	*(*(double))
[	O
j	O
]	O
[	O
k	O
]	O
;	O
if	O
(	O
i	O
==	O
j	O
)	O
{	O
if	O
(	O
dSum	O
<=	O
0.0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Warning: input matrix for Cholesky is not "	*(char)
"positive definite\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
prgdComponent	*(*(double))
[	O
i	O
]	O
[	O
i	O
]	O
=	O
sqrt	(double)->(double)
(	O
dSum	O
)	O
;	O
}	O
else	O
prgdVariance	*(*(double))
[	O
j	O
]	O
[	O
i	O
]	O
=	O
dSum	O
/	O
prgdComponent	*(*(double))
[	O
i	O
]	O
[	O
i	O
]	O
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
lNparams	long
;	O
i	O
++	O
)	O
for	O
(	O
j	O
=	O
i	O
+	O
1	int
;	O
j	O
<	O
lNparams	long
;	O
j	O
++	O
)	O
prgdComponent	*(*(double))
[	O
j	O
]	O
[	O
i	O
]	O
=	O
prgdVariance	*(*(double))
[	O
j	O
]	O
[	O
i	O
]	O
;	O
return	O
1	int
;	O
}	O
