int	O
show_index_match	int
=	O
1	int
;	O
static	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
NULL	O
;	O
static	O
int	O
index_offset	int
=	O
0	int
;	O
static	O
int	O
index_initial	int
=	O
0	int
;	O
static	O
int	O
index_partial	int
=	O
0	int
;	O
static	O
char	O
*	O
index_search	*(char)
=	O
NULL	O
;	O
static	O
char	O
*	O
initial_index_filename	*(char)
=	O
NULL	O
;	O
static	O
char	O
*	O
initial_index_nodename	*(char)
=	O
NULL	O
;	O
typedef	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
int	O
first	int
;	O
int	O
last	int
;	O
}	O
INDEX_NAME_ASSOC	struct(*(char),int,int)
;	O
static	O
INDEX_NAME_ASSOC	struct(*(char),int,int)
*	O
*	O
index_nodenames	*(*(struct(*(char),int,int)))
=	O
NULL	O
;	O
static	O
size_t	long
index_nodenames_index	long
=	O
0	int
;	O
static	O
size_t	long
index_nodenames_slots	long
=	O
0	int
;	O
static	O
void	O
add_index_to_index_nodenames	(*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(void)
(	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
array	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
{	O
register	O
int	O
i	int
,	O
last	int
;	O
INDEX_NAME_ASSOC	struct(*(char),int,int)
*	O
assoc	*(struct(*(char),int,int))
;	O
for	O
(	O
last	int
=	O
0	int
;	O
array	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
last	int
+	O
1	int
]	O
;	O
last	int
++	O
)	O
;	O
assoc	*(struct(*(char),int,int))
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
INDEX_NAME_ASSOC	struct(*(char),int,int)
)	O
)	O
;	O
assoc	*(struct(*(char),int,int))
->	O
name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
nodename	*(char)
)	O
;	O
if	O
(	O
!	O
index_nodenames_index	long
)	O
{	O
assoc	*(struct(*(char),int,int))
->	O
first	int
=	O
0	int
;	O
assoc	*(struct(*(char),int,int))
->	O
last	int
=	O
last	int
;	O
}	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
i	int
+	O
1	int
]	O
;	O
i	int
++	O
)	O
;	O
assoc	*(struct(*(char),int,int))
->	O
first	int
=	O
1	int
+	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
last	int
;	O
assoc	*(struct(*(char),int,int))
->	O
last	int
=	O
assoc	*(struct(*(char),int,int))
->	O
first	int
+	O
last	int
;	O
}	O
add_pointer_to_array	O
(	O
assoc	*(struct(*(char),int,int))
,	O
index_nodenames_index	long
,	O
index_nodenames	*(*(struct(*(char),int,int)))
,	O
index_nodenames_slots	long
,	O
10	int
)	O
;	O
}	O
static	O
void	O
info_indices_of_file_buffer	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))->(void)
(	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
{	O
register	O
int	O
i	int
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
NULL	O
;	O
if	O
(	O
!	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
{	O
free	(*(void))->(void)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
0	int
;	O
return	O
;	O
}	O
if	O
(	O
initial_index_filename	*(char)
&&	O
FILENAME_CMP	O
(	O
initial_index_filename	*(char)
,	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
)	O
==	O
0	int
)	O
{	O
return	O
;	O
}	O
if	O
(	O
info_windows_initialized_p	int
)	O
window_message_in_echo_area	(*(char))->(void)
(	O
_	O
(	O
"Finding index entries..."	*(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
initial_index_filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
initial_index_nodename	*(char)
)	O
;	O
initial_index_filename	*(char)
=	O
NULL	O
;	O
initial_index_nodename	*(char)
=	O
NULL	O
;	O
if	O
(	O
index_nodenames	*(*(struct(*(char),int,int)))
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
free	(*(void))->(void)
(	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
i	int
]	O
)	O
;	O
}	O
index_nodenames_index	long
=	O
0	int
;	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
0	int
]	O
=	O
NULL	O
;	O
}	O
if	O
(	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
tags	*(*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int))))
)	O
{	O
TAG	struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
*	O
tag	*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
tag	*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
=	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
tags	*(*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int))))
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
strcasestr	(*(char),*(char))->(*(char))
(	O
tag	*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
->	O
nodename	*(char)
,	O
"Index"	*(char)
)	O
&&	O
tag	*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
->	O
cache	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
.	O
nodelen	long
!=	O
0	int
)	O
{	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
menu	int
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
info_node_of_tag	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))))->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
&	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
tags	*(*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int))))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
continue	O
;	O
if	O
(	O
!	O
initial_index_filename	*(char)
)	O
{	O
initial_index_filename	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
)	O
;	O
initial_index_nodename	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
tag	*(struct(*(char),*(char),long,long,int,struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
->	O
nodename	*(char)
)	O
;	O
}	O
menu	int
=	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
if	O
(	O
menu	int
&&	O
menu	int
[	O
0	int
]	O
)	O
{	O
add_index_to_index_nodenames	(*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(void)
(	O
menu	int
,	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
old_result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
info_concatenate_references	(*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(*(struct(*(char),*(char),*(char),int,int,long,int))))->(*(*(struct(*(char),*(char),*(char),int,int,long,int))))
(	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
menu	int
)	O
;	O
free	(*(void))->(void)
(	O
old_result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
}	O
}	O
free_history_node	(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(void)
(	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
}	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
&&	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
)	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
if	O
(	O
info_windows_initialized_p	int
)	O
window_clear_echo_area	()->(void)
(	O
)	O
;	O
}	O
void	O
info_next_index_match	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
int	O
count	*(int)
)	O
;	O
DECLARE_INFO_COMMAND	O
(	O
info_index_search	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"Look up a string in the index for this file"	*(char)
)	O
)	O
{	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
;	O
char	O
*	O
line	*(char)
;	O
int	O
old_offset	int
;	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
=	O
file_buffer_of_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
if	O
(	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
info_indices_of_file_buffer	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))->(void)
(	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
;	O
if	O
(	O
!	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
||	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
info_error	(*(char))->(void)
(	O
_	O
(	O
"No indices found"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
line	*(char)
=	O
info_read_maybe_completing	(*(char),*(*(struct(*(char),*(char),*(char),int,int,long,int))))->(*(char))
(	O
_	O
(	O
"Index entry: "	*(char)
)	O
,	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
info_abort_key	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
*	O
line	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
if	O
(	O
initial_index_filename	*(char)
&&	O
initial_index_nodename	*(char)
)	O
{	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
info_get_node	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
initial_index_filename	*(char)
,	O
initial_index_nodename	*(char)
)	O
;	O
info_set_node_of_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(void)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
}	O
return	O
;	O
}	O
if	O
(	O
count	*(int)
<	O
0	int
)	O
{	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
;	O
index_offset	int
=	O
i	int
;	O
}	O
else	O
{	O
index_offset	int
=	O
-	O
1	int
;	O
index_initial	int
=	O
0	int
;	O
index_partial	int
=	O
0	int
;	O
}	O
old_offset	int
=	O
index_offset	int
;	O
free	(*(void))->(void)
(	O
index_search	*(char)
)	O
;	O
index_search	*(char)
=	O
line	*(char)
;	O
info_next_index_match	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
count	*(int)
)	O
;	O
if	O
(	O
index_offset	int
==	O
old_offset	int
)	O
index_offset	int
=	O
0	int
;	O
}	O
static	O
int	O
index_entry_matches	(*(struct(*(char),*(char),*(char),int,int,long,int)),*(char),long)->(int)
(	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
ent	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
)	O
{	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
ent	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
label	*(char)
,	O
str	*(char)
,	O
len	long
)	O
)	O
return	O
0	int
;	O
p	*(void)
=	O
ent	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
label	*(char)
+	O
len	long
;	O
if	O
(	O
!	O
*	O
p	*(void)
)	O
return	O
1	int
;	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
' '	O
&&	O
p	*(void)
[	O
1	int
]	O
==	O
'<'	O
)	O
{	O
for	O
(	O
p	*(void)
+=	O
2	int
;	O
*	O
p	*(void)
;	O
p	*(void)
++	O
)	O
{	O
if	O
(	O
p	*(void)
[	O
0	int
]	O
==	O
'>'	O
&&	O
p	*(void)
[	O
1	int
]	O
==	O
0	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
*	O
p	*(void)
)	O
)	O
return	O
0	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
next_index_match	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(char),int,int,*(int),*(int))->(*(struct(*(char),*(char),*(char),int,int,long,int)))
(	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
char	O
*	O
string	*(char)
,	O
int	O
offset	long
,	O
int	O
dir	int
,	O
int	O
*	O
found_offset	*(int)
,	O
int	O
*	O
match_offset	*(int)
)	O
{	O
int	O
i	int
;	O
int	O
partial_match	int
;	O
size_t	long
search_len	long
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
partial_match	int
=	O
0	int
;	O
search_len	long
=	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
;	O
info_indices_of_file_buffer	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))->(void)
(	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
;	O
if	O
(	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
info_error	(*(char))->(void)
(	O
_	O
(	O
"No indices found."	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
index_search	*(char)
!=	O
string	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
index_search	*(char)
)	O
;	O
index_search	*(char)
=	O
string	*(char)
;	O
}	O
if	O
(	O
!	O
index_initial	int
&&	O
!	O
index_partial	int
)	O
{	O
for	O
(	O
i	int
=	O
offset	long
+	O
dir	int
;	O
i	int
>	O
-	O
1	int
&&	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
+=	O
dir	int
)	O
if	O
(	O
index_entry_matches	(*(struct(*(char),*(char),*(char),int,int,long,int)),*(char),long)->(int)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
,	O
string	*(char)
,	O
search_len	long
)	O
)	O
{	O
*	O
match_offset	*(int)
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
)	O
{	O
offset	long
=	O
0	int
;	O
index_initial	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
index_initial	int
)	O
{	O
for	O
(	O
i	int
=	O
offset	long
+	O
dir	int
;	O
i	int
>	O
-	O
1	int
&&	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
+=	O
dir	int
)	O
if	O
(	O
!	O
index_entry_matches	(*(struct(*(char),*(char),*(char),int,int,long,int)),*(char),long)->(int)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
,	O
string	*(char)
,	O
search_len	long
)	O
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
label	*(char)
,	O
string	*(char)
,	O
search_len	long
)	O
)	O
{	O
*	O
match_offset	*(int)
=	O
search_len	long
;	O
break	O
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
)	O
{	O
offset	long
=	O
0	int
;	O
index_initial	int
=	O
0	int
;	O
index_partial	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
index_partial	int
)	O
{	O
for	O
(	O
i	int
=	O
offset	long
+	O
dir	int
;	O
i	int
>	O
-	O
1	int
&&	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
+=	O
dir	int
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
label	*(char)
,	O
string	*(char)
,	O
search_len	long
)	O
!=	O
0	int
)	O
{	O
partial_match	int
=	O
string_in_line	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
label	*(char)
)	O
;	O
if	O
(	O
partial_match	int
!=	O
-	O
1	int
)	O
{	O
*	O
match_offset	*(int)
=	O
partial_match	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
partial_match	int
<=	O
0	int
)	O
index_partial	int
=	O
0	int
;	O
}	O
if	O
(	O
i	int
<	O
0	int
||	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
)	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
0	int
;	O
else	O
{	O
index_offset	int
=	O
i	int
;	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
}	O
*	O
found_offset	*(int)
=	O
i	int
;	O
return	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
}	O
void	O
report_index_match	(int,int)->(void)
(	O
int	O
i	int
,	O
int	O
match_offset	*(int)
)	O
{	O
register	O
int	O
j	int
;	O
const	O
char	O
*	O
name	*(char)
=	O
"CAN'T SEE THIS"	*(char)
;	O
char	O
*	O
match	*(char)
;	O
for	O
(	O
j	int
=	O
0	int
;	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
j	int
]	O
;	O
j	int
++	O
)	O
{	O
if	O
(	O
(	O
i	int
>=	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
j	int
]	O
->	O
first	int
)	O
&&	O
(	O
i	int
<=	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
j	int
]	O
->	O
last	int
)	O
)	O
{	O
name	*(char)
=	O
index_nodenames	*(*(struct(*(char),int,int)))
[	O
j	int
]	O
->	O
name	*(char)
;	O
break	O
;	O
}	O
}	O
match	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
label	*(char)
)	O
;	O
if	O
(	O
match_offset	*(int)
>	O
0	int
&&	O
show_index_match	int
)	O
{	O
int	O
k	int
,	O
ls	int
,	O
start	int
,	O
upper	int
;	O
ls	int
=	O
strlen	(*(char))->(long)
(	O
index_search	*(char)
)	O
;	O
start	int
=	O
match_offset	*(int)
-	O
ls	int
;	O
upper	int
=	O
isupper	(int)->(int)
(	O
match	*(char)
[	O
start	int
]	O
)	O
?	O
1	int
:	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
ls	int
;	O
k	int
++	O
)	O
if	O
(	O
upper	int
)	O
match	*(char)
[	O
k	int
+	O
start	int
]	O
=	O
tolower	(int)->(int)
(	O
match	*(char)
[	O
k	int
+	O
start	int
]	O
)	O
;	O
else	O
match	*(char)
[	O
k	int
+	O
start	int
]	O
=	O
toupper	(int)->(int)
(	O
match	*(char)
[	O
k	int
+	O
start	int
]	O
)	O
;	O
}	O
{	O
char	O
*	O
format	*(char)
;	O
format	*(char)
=	O
replace_in_documentation	(*(char),int)->(*(char))
(	O
_	O
(	O
"Found '%s' in %s. ('\\[next-index-match]' tries to find next.)"	*(char)
)	O
,	O
0	int
)	O
;	O
window_message_in_echo_area	(*(char))->(void)
(	O
format	*(char)
,	O
match	*(char)
,	O
(	O
char	O
*	O
)	O
name	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
match	*(char)
)	O
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_next_index_match	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"Go to the next matching index item from the last '\\[index-search]' command"	*(char)
)	O
)	O
{	O
int	O
i	int
;	O
int	O
match_offset	*(int)
;	O
int	O
dir	int
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
if	O
(	O
!	O
index_search	*(char)
)	O
{	O
info_error	(*(char))->(void)
(	O
_	O
(	O
"No previous index search string"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
count	*(int)
<	O
0	int
)	O
dir	int
=	O
-	O
1	int
;	O
else	O
dir	int
=	O
1	int
;	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
next_index_match	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(char),int,int,*(int),*(int))->(*(struct(*(char),*(char),*(char),int,int,long,int)))
(	O
file_buffer_of_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
,	O
index_search	*(char)
,	O
index_offset	int
,	O
dir	int
,	O
&	O
i	int
,	O
&	O
match_offset	*(int)
)	O
;	O
if	O
(	O
!	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
info_error	(*(char))->(void)
(	O
index_offset	int
>	O
0	int
?	O
_	O
(	O
"No more index entries containing '%s'"	*(char)
)	O
:	O
_	O
(	O
"No index entries containing '%s'"	*(char)
)	O
,	O
index_search	*(char)
)	O
;	O
index_offset	int
=	O
0	int
;	O
return	O
;	O
}	O
report_index_match	(int,int)->(void)
(	O
i	int
,	O
match_offset	*(int)
)	O
;	O
info_select_reference	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(char),*(char),*(char),int,int,long,int)))->(int)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
}	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
look_in_indices	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(char),int)->(*(struct(*(char),*(char),*(char),int,int,long,int)))
(	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
char	O
*	O
string	*(char)
,	O
int	O
sloppy	int
)	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
nearest	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
0	int
;	O
free	(*(void))->(void)
(	O
index_search	*(char)
)	O
;	O
index_search	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
string	*(char)
)	O
;	O
info_indices_of_file_buffer	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))->(void)
(	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
;	O
if	O
(	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
return	O
0	int
;	O
for	O
(	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
*	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
string	*(char)
,	O
(	O
*	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
->	O
label	*(char)
)	O
)	O
{	O
nearest	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
*	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
break	O
;	O
}	O
if	O
(	O
sloppy	int
&&	O
!	O
nearest	*(struct(*(char),*(char),*(char),int,int,long,int))
&&	O
!	O
mbsncasecmp	(*(char),*(char),long)->(int)
(	O
string	*(char)
,	O
(	O
*	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
->	O
label	*(char)
,	O
mbslen	(*(char))->(long)
(	O
string	*(char)
)	O
)	O
)	O
{	O
nearest	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
*	O
index_ptr	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
}	O
}	O
return	O
nearest	*(struct(*(char),*(char),*(char),int,int,long,int))
;	O
}	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
apropos_in_all_indices	(*(char),int)->(*(*(struct(*(char),*(char),*(char),int,int,long,int))))
(	O
char	O
*	O
search_string	*(char)
,	O
int	O
inform	int
)	O
{	O
size_t	long
i	int
,	O
dir_index	long
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
NULL	O
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
NULL	O
;	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
dir_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
dir_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
get_dir_node	()->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
)	O
;	O
if	O
(	O
dir_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
dir_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
references	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
if	O
(	O
!	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
free	(*(void))->(void)
(	O
dir_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
dir_index	long
=	O
0	int
;	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
dir_index	long
]	O
;	O
dir_index	long
++	O
)	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
*	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
;	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
*	O
loaded_file	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
=	O
0	int
;	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
dir_index	long
]	O
;	O
if	O
(	O
!	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
)	O
continue	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dir_index	long
;	O
i	int
++	O
)	O
if	O
(	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
&&	O
FILENAME_CMP	O
(	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
,	O
dir_menu	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
i	int
<	O
dir_index	long
)	O
continue	O
;	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
=	O
check_loaded_file	(*(char))->(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))
(	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
=	O
loaded_file	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
=	O
info_find_file	(*(char))->(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))
(	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
continue	O
;	O
if	O
(	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
&&	O
inform	int
)	O
message_in_echo_area	(*(char))->(void)
(	O
_	O
(	O
"Scanning indices of '%s'..."	*(char)
)	O
,	O
this_item	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
)	O
;	O
info_indices_of_file_buffer	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))->(void)
(	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
;	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
if	O
(	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
&&	O
inform	int
)	O
unmessage_in_echo_area	()->(void)
(	O
)	O
;	O
if	O
(	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
&&	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
)	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
this_fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
)	O
;	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
old_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
info_concatenate_references	(*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(*(struct(*(char),*(char),*(char),int,int,long,int))))->(*(*(struct(*(char),*(char),*(char),int,int,long,int))))
(	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
this_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
free	(*(void))->(void)
(	O
old_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
}	O
}	O
if	O
(	O
loaded_file	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
{	O
free	(*(void))->(void)
(	O
loaded_file	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
contents	*(char)
)	O
;	O
loaded_file	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
contents	*(char)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
*	O
*	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
NULL	O
;	O
size_t	long
apropos_list_index	long
=	O
0	int
;	O
size_t	long
apropos_list_slots	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
=	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
string_in_line	(*(char),*(char))->(int)
(	O
search_string	*(char)
,	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
label	*(char)
)	O
!=	O
-	O
1	int
)	O
{	O
add_pointer_to_array	O
(	O
entry	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
apropos_list_index	long
,	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
,	O
apropos_list_slots	long
,	O
100	int
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
}	O
free	(*(void))->(void)
(	O
dir_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
return	O
all_indices	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
}	O
static	O
char	O
*	O
apropos_list_nodename	*(char)
=	O
"*Apropos*"	*(char)
;	O
DECLARE_INFO_COMMAND	O
(	O
info_index_apropos	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"Grovel all known info file's indices for a string and build a menu"	*(char)
)	O
)	O
{	O
char	O
*	O
line	*(char)
,	O
*	O
prompt	*(char)
;	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
*	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
struct	O
text_buffer	struct(*(char),long,long)
message	*(char)
;	O
if	O
(	O
index_search	*(char)
)	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%s [%s]: "	*(char)
,	O
_	O
(	O
"Index apropos"	*(char)
)	O
,	O
index_search	*(char)
)	O
;	O
else	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%s: "	*(char)
,	O
_	O
(	O
"Index apropos"	*(char)
)	O
)	O
;	O
line	*(char)
=	O
info_read_in_echo_area	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
prompt	*(char)
)	O
;	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
info_abort_key	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
index_search	*(char)
)	O
;	O
index_search	*(char)
=	O
line	*(char)
;	O
}	O
else	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
if	O
(	O
index_search	*(char)
&&	O
*	O
index_search	*(char)
)	O
{	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
apropos_in_all_indices	(*(char),int)->(*(*(struct(*(char),*(char),*(char),int,int,long,int))))
(	O
index_search	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
!	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
info_error	(*(char))->(void)
(	O
_	O
(	O
APROPOS_NONE	O
)	O
,	O
index_search	*(char)
)	O
;	O
return	O
;	O
}	O
else	O
{	O
register	O
int	O
i	int
;	O
text_buffer_init	(*(struct(*(char),long,long)))->(void)
(	O
&	O
message	*(char)
)	O
;	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
message	*(char)
,	O
'\n'	O
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
message	*(char)
,	O
_	O
(	O
"Index entries containing "	*(char)
"'%s':\n"	*(char)
)	O
,	O
index_search	*(char)
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
message	*(char)
,	O
"\n* Menu:"	*(char)
)	O
;	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
&	O
message	*(char)
,	O
"\0\b[index\0\b]"	*(char)
,	O
11	int
)	O
;	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
message	*(char)
,	O
'\n'	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
int	O
line_start	int
=	O
text_buffer_off	O
(	O
&	O
message	*(char)
)	O
;	O
char	O
*	O
filename	*(char)
;	O
filename	*(char)
=	O
program_name_from_file_name	(*(char))->(*(char))
(	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
filename	*(char)
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
message	*(char)
,	O
"* %s [%s]: "	*(char)
,	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
label	*(char)
,	O
filename	*(char)
)	O
;	O
while	O
(	O
text_buffer_off	O
(	O
&	O
message	*(char)
)	O
-	O
line_start	int
<	O
40	int
)	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
message	*(char)
,	O
' '	O
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
message	*(char)
,	O
"(%s)%s."	*(char)
,	O
filename	*(char)
,	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
nodename	*(char)
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
message	*(char)
,	O
" (line %ld)\n"	*(char)
,	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
->	O
line_number	long
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
}	O
}	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
text_buffer_to_node	(*(struct))->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
&	O
message	*(char)
)	O
;	O
{	O
char	O
*	O
old_contents	*(char)
=	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
;	O
scan_node_contents	(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))))->(void)
(	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
old_contents	*(char)
!=	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
)	O
free	(*(void))->(void)
(	O
old_contents	*(char)
)	O
;	O
}	O
name_internal_node	(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),*(char))->(void)
(	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
,	O
xstrdup	(*(char))->(*(char))
(	O
apropos_list_nodename	*(char)
)	O
)	O
;	O
{	O
WINDOW	struct(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),long,long,struct(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*(struct`),long,long))),long,long)
*	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
for	O
(	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
windows	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
next	*(char)
)	O
{	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
if	O
(	O
internal_info_node_p	(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(int)
(	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
nodename	*(char)
,	O
apropos_list_nodename	*(char)
)	O
==	O
0	int
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
&&	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
next	*(char)
)	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
next	*(char)
;	O
if	O
(	O
!	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
window_make_window	()->(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))
(	O
)	O
;	O
if	O
(	O
!	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
->	O
flags	int
|=	O
W_NoWrap	int
;	O
info_set_node_of_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(void)
(	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
apropos_node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
active_window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
=	O
new	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
;	O
}	O
free	(*(void))->(void)
(	O
apropos_list	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
}	O
}	O
static	O
void	O
format_reference	(*(struct(*(char),*(char),*(char),int,int,long,int)),*(char),*(struct(*(char),long,long)))->(void)
(	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
,	O
const	O
char	O
*	O
filename	*(char)
,	O
struct	O
text_buffer	struct(*(char),long,long)
*	O
buf	array(char)
)	O
{	O
size_t	long
n	long
;	O
n	long
=	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
buf	array(char)
,	O
"* %s: "	*(char)
,	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
label	*(char)
)	O
;	O
if	O
(	O
n	long
<	O
NODECOL	int
)	O
n	long
+=	O
text_buffer_fill	(*(struct(*(char),long,long)),int,long)->(long)
(	O
buf	array(char)
,	O
' '	O
,	O
NODECOL	int
-	O
n	long
)	O
;	O
if	O
(	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
,	O
filename	*(char)
)	O
)	O
n	long
+=	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
buf	array(char)
,	O
"(%s)"	*(char)
,	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
filename	*(char)
)	O
;	O
n	long
+=	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
buf	array(char)
,	O
"%s. "	*(char)
,	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
nodename	*(char)
)	O
;	O
if	O
(	O
n	long
<	O
LINECOL	int
)	O
n	long
+=	O
text_buffer_fill	(*(struct(*(char),long,long)),int,long)->(long)
(	O
buf	array(char)
,	O
' '	O
,	O
LINECOL	int
-	O
n	long
)	O
;	O
else	O
{	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
buf	array(char)
,	O
'\n'	O
)	O
;	O
text_buffer_fill	(*(struct(*(char),long,long)),int,long)->(long)
(	O
buf	array(char)
,	O
' '	O
,	O
LINECOL	int
)	O
;	O
}	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
buf	array(char)
,	O
"(line %4d)\n"	*(char)
,	O
ref	*(struct(*(char),*(char),*(char),int,int,long,int))
->	O
line_number	long
)	O
;	O
}	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
create_virtual_index	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
char	O
*	O
index_search	*(char)
)	O
{	O
struct	O
text_buffer	struct(*(char),long,long)
text	struct(*(char),long,long)
;	O
int	O
i	int
;	O
size_t	long
cnt	long
;	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
text_buffer_init	(*(struct(*(char),long,long)))->(void)
(	O
&	O
text	struct(*(char),long,long)
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
text	struct(*(char),long,long)
,	O
"File: %s,  Node: Index for '%s'\n\n"	*(char)
,	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
,	O
index_search	*(char)
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
text	struct(*(char),long,long)
,	O
_	O
(	O
"Virtual Index\n"	*(char)
"*************\n\n"	*(char)
"Index entries that match '%s':\n"	*(char)
)	O
,	O
index_search	*(char)
)	O
;	O
text_buffer_add_string	(*(struct(*(char),long,long)),*(char),long)->(long)
(	O
&	O
text	struct(*(char),long,long)
,	O
"\0\b[index\0\b]"	*(char)
,	O
11	int
)	O
;	O
text_buffer_printf	(*(struct(*(char),long,long)),*(char))->(long)
(	O
&	O
text	struct(*(char),long,long)
,	O
"\n* Menu:\n\n"	*(char)
)	O
;	O
cnt	long
=	O
0	int
;	O
index_offset	int
=	O
0	int
;	O
index_initial	int
=	O
0	int
;	O
index_partial	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
REFERENCE	struct(*(char),*(char),*(char),int,int,long,int)
*	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
;	O
int	O
match_offset	*(int)
;	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
=	O
next_index_match	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(char),int,int,*(int),*(int))->(*(struct(*(char),*(char),*(char),int,int,long,int)))
(	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
index_search	*(char)
,	O
index_offset	int
,	O
1	int
,	O
&	O
i	int
,	O
&	O
match_offset	*(int)
)	O
;	O
if	O
(	O
!	O
result	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
break	O
;	O
format_reference	(*(struct(*(char),*(char),*(char),int,int,long,int)),*(char),*(struct(*(char),long,long)))->(void)
(	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
[	O
i	int
]	O
,	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
,	O
&	O
text	struct(*(char),long,long)
)	O
;	O
cnt	long
++	O
;	O
}	O
text_buffer_add_char	(*(struct(*(char),long,long)),int)->(void)
(	O
&	O
text	struct(*(char),long,long)
,	O
'\0'	O
)	O
;	O
if	O
(	O
cnt	long
==	O
0	int
)	O
{	O
text_buffer_free	(*(struct(*(char),long,long)))->(void)
(	O
&	O
text	struct(*(char),long,long)
)	O
;	O
return	O
0	int
;	O
}	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
info_create_node	()->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
)	O
;	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
nodename	*(char)
,	O
"Index for '%s'"	*(char)
,	O
index_search	*(char)
)	O
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
fullpath	*(char)
=	O
file_buffer	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
=	O
text_buffer_base	O
(	O
&	O
text	struct(*(char),long,long)
)	O
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
nodelen	long
=	O
text_buffer_off	O
(	O
&	O
text	struct(*(char),long,long)
)	O
-	O
1	int
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
body_start	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
contents	*(char)
,	O
"\n"	*(char)
)	O
;	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
->	O
flags	int
|=	O
N_IsInternal	int
|	O
N_WasRewritten	int
;	O
scan_node_contents	(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)),*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))))->(void)
(	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
,	O
0	int
,	O
0	int
)	O
;	O
return	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
}	O
DECLARE_INFO_COMMAND	O
(	O
info_virtual_index	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
,	O
_	O
(	O
"List all matches of a string in the index"	*(char)
)	O
)	O
{	O
char	O
*	O
prompt	*(char)
,	O
*	O
line	*(char)
;	O
FILE_BUFFER	struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*(char),*(char),long,long,int,struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)))),long,int,*(char))
*	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
;	O
NODE	struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*(char),*(char),*(char),int,int,long,int))),*(char),*(char),*(char),int)
*	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
;	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
=	O
file_buffer_of_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)))->(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
)	O
;	O
if	O
(	O
!	O
initial_index_filename	*(char)
||	O
!	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
||	O
(	O
FILENAME_CMP	O
(	O
initial_index_filename	*(char)
,	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
->	O
filename	*(char)
)	O
!=	O
0	int
)	O
)	O
{	O
window_message_in_echo_area	(*(char))->(void)
(	O
_	O
(	O
"Finding index entries..."	*(char)
)	O
)	O
;	O
info_indices_of_file_buffer	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))))->(void)
(	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
)	O
;	O
}	O
if	O
(	O
!	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
{	O
info_error	(*(char))->(void)
(	O
_	O
(	O
"No indices found."	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
index_search	*(char)
)	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%s [%s]: "	*(char)
,	O
_	O
(	O
"Index topic"	*(char)
)	O
,	O
index_search	*(char)
)	O
;	O
else	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
prompt	*(char)
,	O
"%s: "	*(char)
,	O
_	O
(	O
"Index topic"	*(char)
)	O
)	O
;	O
line	*(char)
=	O
info_read_maybe_completing	(*(char),*(*(struct(*(char),*(char),*(char),int,int,long,int))))->(*(char))
(	O
prompt	*(char)
,	O
index_index	*(*(struct(*(char),*(char),*(char),int,int,long,int)))
)	O
;	O
free	(*(void))->(void)
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
info_abort_key	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),int)->(void)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
1	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
*	O
line	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
index_search	*(char)
)	O
;	O
index_search	*(char)
=	O
line	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
index_search	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
return	O
;	O
}	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
=	O
create_virtual_index	(*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct`)),long,int,*(char))),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))
(	O
fb	*(struct(*(char),*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(char),long,*(*(char)),*(*(struct(*`,*`,long,long,int,struct`))),long,int,*(char)))
,	O
index_search	*(char)
)	O
;	O
if	O
(	O
!	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
{	O
info_error	(*(char))->(void)
(	O
_	O
(	O
"No index entries containing '%s'."	*(char)
)	O
,	O
index_search	*(char)
)	O
;	O
return	O
;	O
}	O
info_set_node_of_window	(*(struct(*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),*(struct(*`,*`,long,long,long,long,*`,long,long,struct`,*`,*`,*`,long,long,int,*`,int,struct`,*`,long,long)),long,long,long,long,*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,struct(*(struct`),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct`),long,long,int,struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char),long),*(*(struct`)),long,long)),*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct`)),*(char),*(char),*(char),int)))->(void)
(	O
window	*(struct(*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),*(struct(*(struct`),*(struct`),long,long,long,long,*(struct`),long,long,struct(*`,long,long,long,*`),*(char),*(long),*(long),long,long,int,*(char),int,struct(*`,long,long,int,struct`,*`,long),*(*`),long,long)),long,long,long,long,*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*`),*(char),*(char),*(char),int)),long,long,struct(*(struct(*`,*`,*`,*`,long,long,long,int,*`,*`,*`,*`,int)),long,long,long,*(long)),*(char),*(long),*(long),long,long,int,*(char),int,struct(*(struct(long,long)),long,long,int,struct(*(struct`),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char),long),*(*(struct(*`,long,long))),long,long))
,	O
node	*(struct(*(char),*(char),*(char),*(char),long,long,long,int,*(*(struct(*`,*`,*`,int,int,long,int))),*(char),*(char),*(char),int))
)	O
;	O
}	O
