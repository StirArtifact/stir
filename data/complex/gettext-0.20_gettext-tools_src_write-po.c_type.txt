const	O
char	O
*	O
make_format_description_string	(enum(int,int,int,int,int,int),*(char),bool)->(*(char))
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
,	O
const	O
char	O
*	O
lang	*(char)
,	O
bool	bool
debug	bool
)	O
{	O
static	O
char	O
result	*(*(void))
[	O
100	int
]	O
;	O
switch	O
(	O
is_format	enum(int,int,int,int,int,int)
)	O
{	O
case	O
possible	int
:	O
if	O
(	O
debug	bool
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
result	*(*(void))
,	O
"possible-%s-format"	*(char)
,	O
lang	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
yes_according_to_context	int
:	O
case	O
yes	int
:	O
sprintf	(*(char),*(char))->(int)
(	O
result	*(*(void))
,	O
"%s-format"	*(char)
,	O
lang	*(char)
)	O
;	O
break	O
;	O
case	O
no	int
:	O
sprintf	(*(char),*(char))->(int)
(	O
result	*(*(void))
,	O
"no-%s-format"	*(char)
,	O
lang	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
result	*(*(void))
;	O
}	O
bool	bool
significant_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
)	O
{	O
return	O
is_format	enum(int,int,int,int,int,int)
!=	O
undecided	int
&&	O
is_format	enum(int,int,int,int,int,int)
!=	O
impossible	int
;	O
}	O
static	O
bool	bool
has_significant_format_p	O
(	O
const	O
enum	O
is_format	enum(int,int,int,int,int,int)
is_format	enum(int,int,int,int,int,int)
[	O
NFORMATS	int
]	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
significant_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
)	O
return	O
true	int
;	O
return	O
false	int
;	O
}	O
char	O
*	O
make_range_description_string	(struct(int,int))->(*(char))
(	O
struct	O
argument_range	struct(int,int)
range	struct(int,int)
)	O
{	O
return	O
xasprintf	O
(	O
"range: %d..%d"	*(char)
,	O
range	struct(int,int)
.	O
min	int
,	O
range	struct(int,int)
.	O
max	int
)	O
;	O
}	O
static	O
const	O
char	O
*	O
make_c_width_description_string	O
(	O
enum	O
is_wrap	O
do_wrap	enum(int,int,int,int,int,int)
)	O
{	O
const	O
char	O
*	O
result	*(*(void))
=	O
NULL	O
;	O
switch	O
(	O
do_wrap	enum(int,int,int,int,int,int)
)	O
{	O
case	O
yes	int
:	O
result	*(*(void))
=	O
"wrap"	*(char)
;	O
break	O
;	O
case	O
no	int
:	O
result	*(*(void))
=	O
"no-wrap"	*(char)
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
result	*(*(void))
;	O
}	O
static	O
inline	O
void	O
begin_css_class	O
(	O
ostream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
classname	*(char)
)	O
{	O
styled_ostream_begin_use_class	(*(struct),*(char))->(void)
(	O
(	O
styled_ostream_t	*(struct)
)	O
stream	*(struct)
,	O
classname	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
end_css_class	O
(	O
ostream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
classname	*(char)
)	O
{	O
styled_ostream_end_use_class	(*(struct),*(char))->(void)
(	O
(	O
styled_ostream_t	*(struct)
)	O
stream	*(struct)
,	O
classname	*(char)
)	O
;	O
}	O
static	O
const	O
char	O
class_header	O
[	O
]	O
=	O
"header"	*(char)
;	O
static	O
const	O
char	O
class_translated	O
[	O
]	O
=	O
"translated"	*(char)
;	O
static	O
const	O
char	O
class_untranslated	O
[	O
]	O
=	O
"untranslated"	*(char)
;	O
static	O
const	O
char	O
class_fuzzy	O
[	O
]	O
=	O
"fuzzy"	*(char)
;	O
static	O
const	O
char	O
class_obsolete	O
[	O
]	O
=	O
"obsolete"	*(char)
;	O
static	O
const	O
char	O
class_comment	O
[	O
]	O
=	O
"comment"	*(char)
;	O
static	O
const	O
char	O
class_translator_comment	O
[	O
]	O
=	O
"translator-comment"	*(char)
;	O
static	O
const	O
char	O
class_extracted_comment	O
[	O
]	O
=	O
"extracted-comment"	*(char)
;	O
static	O
const	O
char	O
class_reference_comment	O
[	O
]	O
=	O
"reference-comment"	*(char)
;	O
static	O
const	O
char	O
class_reference	O
[	O
]	O
=	O
"reference"	*(char)
;	O
static	O
const	O
char	O
class_flag_comment	O
[	O
]	O
=	O
"flag-comment"	*(char)
;	O
static	O
const	O
char	O
class_flag	O
[	O
]	O
=	O
"flag"	*(char)
;	O
static	O
const	O
char	O
class_fuzzy_flag	O
[	O
]	O
=	O
"fuzzy-flag"	*(char)
;	O
static	O
const	O
char	O
class_previous_comment	O
[	O
]	O
=	O
"previous-comment"	*(char)
;	O
static	O
const	O
char	O
class_previous	O
[	O
]	O
=	O
"previous"	*(char)
;	O
static	O
const	O
char	O
class_msgid	O
[	O
]	O
=	O
"msgid"	*(char)
;	O
static	O
const	O
char	O
class_msgstr	O
[	O
]	O
=	O
"msgstr"	*(char)
;	O
static	O
const	O
char	O
class_keyword	O
[	O
]	O
=	O
"keyword"	*(char)
;	O
static	O
const	O
char	O
class_string	O
[	O
]	O
=	O
"string"	*(char)
;	O
static	O
const	O
char	O
class_text	O
[	O
]	O
=	O
"text"	*(char)
;	O
static	O
const	O
char	O
class_escape_sequence	O
[	O
]	O
=	O
"escape-sequence"	*(char)
;	O
static	O
const	O
char	O
class_format_directive	O
[	O
]	O
=	O
"format-directive"	*(char)
;	O
static	O
const	O
char	O
class_invalid_format_directive	O
[	O
]	O
=	O
"invalid-format-directive"	*(char)
;	O
enum	O
{	O
ATTR_ESCAPE_SEQUENCE	O
=	O
1	int
<<	O
0	int
,	O
ATTR_FORMAT_DIRECTIVE	O
=	O
1	int
<<	O
1	int
,	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
=	O
1	int
<<	O
2	int
}	O
;	O
static	O
bool	bool
print_comment	O
=	O
true	int
;	O
void	O
message_print_style_comment	(bool)->(void)
(	O
bool	bool
flag	bool
)	O
{	O
print_comment	O
=	O
flag	bool
;	O
}	O
void	O
message_print_comment	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct))->(void)
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
)	O
{	O
if	O
(	O
print_comment	O
&&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment	*(struct(*(*(char)),long,long))
!=	O
NULL	O
)	O
{	O
size_t	long
j	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_translator_comment	O
)	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
++	O
j	O
)	O
{	O
const	O
char	O
*	O
s	*(char)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
do	O
{	O
const	O
char	O
*	O
e	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"#"	*(char)
)	O
;	O
if	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
e	O
=	O
strchr	(*(char),int)->(*(char))
(	O
s	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
e	O
==	O
NULL	O
)	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
s	*(char)
)	O
;	O
s	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
s	*(char)
,	O
e	O
-	O
s	*(char)
)	O
;	O
s	*(char)
=	O
e	O
+	O
1	int
;	O
}	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
while	O
(	O
s	*(char)
!=	O
NULL	O
)	O
;	O
}	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_translator_comment	O
)	O
;	O
}	O
}	O
void	O
message_print_comment_dot	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct))->(void)
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
)	O
{	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
!=	O
NULL	O
)	O
{	O
size_t	long
j	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_extracted_comment	O
)	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
nitems	long
;	O
++	O
j	O
)	O
{	O
const	O
char	O
*	O
s	*(char)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment_dot	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"#."	*(char)
)	O
;	O
if	O
(	O
*	O
s	*(char)
!=	O
'\0'	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
s	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_extracted_comment	O
)	O
;	O
}	O
}	O
static	O
enum	O
filepos_comment_type	enum(int,int,int)
filepos_comment_type	enum(int,int,int)
=	O
filepos_comment_full	int
;	O
void	O
message_print_comment_filepos	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct),bool,long)->(void)
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
,	O
bool	bool
uniforum	bool
,	O
size_t	long
page_width	long
)	O
{	O
if	O
(	O
filepos_comment_type	enum(int,int,int)
!=	O
filepos_comment_none	int
&&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos_count	long
!=	O
0	int
)	O
{	O
size_t	long
filepos_count	long
;	O
lex_pos_ty	struct
*	O
filepos	*(struct(*(char),long))
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_reference_comment	O
)	O
;	O
if	O
(	O
filepos_comment_type	enum(int,int,int)
==	O
filepos_comment_file	int
)	O
{	O
size_t	long
i	long
;	O
filepos_count	long
=	O
0	int
;	O
filepos	*(struct(*(char),long))
=	O
XNMALLOC	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos_count	long
,	O
lex_pos_ty	struct
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos_count	long
;	O
++	O
i	long
)	O
{	O
lex_pos_ty	struct
*	O
pp	*(struct(*(char),long))
=	O
&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
[	O
i	long
]	O
;	O
size_t	long
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
filepos_count	long
;	O
j	O
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
filepos	*(struct(*(char),long))
[	O
j	O
]	O
.	O
file_name	*(char)
,	O
pp	*(struct(*(char),long))
->	O
file_name	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
j	O
==	O
filepos_count	long
)	O
{	O
filepos	*(struct(*(char),long))
[	O
filepos_count	long
]	O
.	O
file_name	*(char)
=	O
pp	*(struct(*(char),long))
->	O
file_name	*(char)
;	O
filepos	*(struct(*(char),long))
[	O
filepos_count	long
]	O
.	O
line_number	long
=	O
(	O
size_t	long
)	O
-	O
1	int
;	O
filepos_count	long
++	O
;	O
}	O
}	O
}	O
else	O
{	O
filepos	*(struct(*(char),long))
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
;	O
filepos_count	long
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos_count	long
;	O
}	O
if	O
(	O
uniforum	bool
)	O
{	O
size_t	long
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
filepos_count	long
;	O
++	O
j	O
)	O
{	O
lex_pos_ty	struct
*	O
pp	*(struct(*(char),long))
=	O
&	O
filepos	*(struct(*(char),long))
[	O
j	O
]	O
;	O
const	O
char	O
*	O
cp	O
=	O
pp	*(struct(*(char),long))
->	O
file_name	*(char)
;	O
char	O
*	O
str	O
;	O
while	O
(	O
cp	O
[	O
0	int
]	O
==	O
'.'	O
&&	O
cp	O
[	O
1	int
]	O
==	O
'/'	O
)	O
cp	O
+=	O
2	int
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"# "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_reference	O
)	O
;	O
str	O
=	O
xasprintf	O
(	O
"File: %s, line: %ld"	*(char)
,	O
cp	O
,	O
(	O
long	O
)	O
pp	*(struct(*(char),long))
->	O
line_number	long
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
str	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_reference	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
}	O
}	O
else	O
{	O
size_t	long
column	O
;	O
size_t	long
j	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"#:"	*(char)
)	O
;	O
column	O
=	O
2	int
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
filepos_count	long
;	O
++	O
j	O
)	O
{	O
lex_pos_ty	struct
*	O
pp	*(struct(*(char),long))
;	O
char	O
buffer	O
[	O
21	int
]	O
;	O
const	O
char	O
*	O
cp	O
;	O
size_t	long
len	long
;	O
pp	*(struct(*(char),long))
=	O
&	O
filepos	*(struct(*(char),long))
[	O
j	O
]	O
;	O
cp	O
=	O
pp	*(struct(*(char),long))
->	O
file_name	*(char)
;	O
while	O
(	O
cp	O
[	O
0	int
]	O
==	O
'.'	O
&&	O
cp	O
[	O
1	int
]	O
==	O
'/'	O
)	O
cp	O
+=	O
2	int
;	O
if	O
(	O
filepos_comment_type	enum(int,int,int)
==	O
filepos_comment_file	int
||	O
pp	*(struct(*(char),long))
->	O
line_number	long
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
buffer	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	O
,	O
":%ld"	*(char)
,	O
(	O
long	O
)	O
pp	*(struct(*(char),long))
->	O
line_number	long
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
cp	O
)	O
+	O
strlen	(*(char))->(long)
(	O
buffer	O
)	O
+	O
1	int
;	O
if	O
(	O
column	O
>	O
2	int
&&	O
column	O
+	O
len	long
>	O
page_width	long
)	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n#:"	*(char)
)	O
;	O
column	O
=	O
2	int
;	O
}	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_reference	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
cp	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
buffer	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_reference	O
)	O
;	O
column	O
+=	O
len	long
;	O
}	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
if	O
(	O
filepos	*(struct(*(char),long))
!=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
filepos	*(struct(*(char),long))
)	O
free	(*(void))->(void)
(	O
filepos	*(struct(*(char),long))
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_reference_comment	O
)	O
;	O
}	O
}	O
void	O
message_print_comment_flags	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct),bool)->(void)
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
,	O
bool	bool
debug	bool
)	O
{	O
if	O
(	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
&&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
||	O
has_significant_format_p	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
)	O
||	O
has_range_p	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
)	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
==	O
no	int
)	O
{	O
bool	bool
first_flag	O
=	O
true	int
;	O
size_t	long
i	long
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_flag_comment	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"#,"	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
&&	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_fuzzy_flag	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"fuzzy"	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_fuzzy_flag	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
significant_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
!	O
first_flag	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
","	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
make_format_description_string	(enum(int,int,int,int,int,int),*(char),bool)->(*(char))
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
,	O
format_language	array(*(char))
[	O
i	long
]	O
,	O
debug	bool
)	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
if	O
(	O
has_range_p	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
)	O
)	O
{	O
char	O
*	O
string	*(char)
;	O
if	O
(	O
!	O
first_flag	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
","	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
string	*(char)
=	O
make_range_description_string	(struct(int,int))->(*(char))
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
range	struct(int,int)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
string	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
==	O
no	int
)	O
{	O
if	O
(	O
!	O
first_flag	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
","	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
make_c_width_description_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
)	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_flag	O
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_flag_comment	O
)	O
;	O
}	O
}	O
static	O
bool	bool
wrap_strings	O
=	O
true	int
;	O
void	O
message_page_width_ignore	()->(void)
(	O
)	O
{	O
wrap_strings	O
=	O
false	int
;	O
}	O
static	O
bool	bool
indent	O
=	O
false	int
;	O
static	O
bool	bool
uniforum	bool
=	O
false	int
;	O
static	O
bool	bool
escape	O
=	O
false	int
;	O
void	O
message_print_style_indent	()->(void)
(	O
)	O
{	O
indent	O
=	O
true	int
;	O
}	O
void	O
message_print_style_uniforum	()->(void)
(	O
)	O
{	O
uniforum	bool
=	O
true	int
;	O
}	O
void	O
message_print_style_escape	(bool)->(void)
(	O
bool	bool
flag	bool
)	O
{	O
escape	O
=	O
flag	bool
;	O
}	O
void	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
enum	O
filepos_comment_type	enum(int,int,int)
type	enum(int,int,int)
)	O
{	O
filepos_comment_type	enum(int,int,int)
=	O
type	enum(int,int,int)
;	O
}	O
bool	bool
handle_filepos_comment_option	(*(char))->(bool)
(	O
const	O
char	O
*	O
option	*(char)
)	O
{	O
if	O
(	O
option	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
option	*(char)
,	O
"never"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
option	*(char)
,	O
"no"	*(char)
)	O
==	O
0	int
)	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_none	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
option	*(char)
,	O
"full"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
option	*(char)
,	O
"yes"	*(char)
)	O
==	O
0	int
)	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_full	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
option	*(char)
,	O
"file"	*(char)
)	O
==	O
0	int
)	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_file	int
)	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"invalid --add-location argument: %s\n"	*(char)
,	O
option	*(char)
)	O
;	O
return	O
true	int
;	O
}	O
}	O
else	O
message_print_style_filepos	(enum(int,int,int))->(void)
(	O
filepos_comment_full	int
)	O
;	O
return	O
false	int
;	O
}	O
static	O
inline	O
void	O
memcpy_small	O
(	O
void	O
*	O
dst	O
,	O
const	O
void	O
*	O
src	O
,	O
size_t	long
n	long
)	O
{	O
if	O
(	O
n	long
>	O
0	int
)	O
{	O
char	O
*	O
q	O
=	O
(	O
char	O
*	O
)	O
dst	O
;	O
const	O
char	O
*	O
p	*(void)
=	O
(	O
const	O
char	O
*	O
)	O
src	O
;	O
*	O
q	O
=	O
*	O
p	*(void)
;	O
if	O
(	O
--	O
n	long
>	O
0	int
)	O
do	O
*	O
++	O
q	O
=	O
*	O
++	O
p	*(void)
;	O
while	O
(	O
--	O
n	long
>	O
0	int
)	O
;	O
}	O
}	O
static	O
inline	O
void	O
memset_small	O
(	O
void	O
*	O
dst	O
,	O
char	O
c	int
,	O
size_t	long
n	long
)	O
{	O
if	O
(	O
n	long
>	O
0	int
)	O
{	O
char	O
*	O
p	*(void)
=	O
(	O
char	O
*	O
)	O
dst	O
;	O
*	O
p	*(void)
=	O
c	int
;	O
if	O
(	O
--	O
n	long
>	O
0	int
)	O
do	O
*	O
++	O
p	*(void)
=	O
c	int
;	O
while	O
(	O
--	O
n	long
>	O
0	int
)	O
;	O
}	O
}	O
static	O
void	O
wrap	O
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
line_prefix	O
,	O
int	O
extra_indent	O
,	O
const	O
char	O
*	O
css_class	O
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	O
,	O
enum	O
is_wrap	O
do_wrap	enum(int,int,int,int,int,int)
,	O
size_t	long
page_width	long
,	O
const	O
char	O
*	O
charset	*(char)
)	O
{	O
const	O
char	O
*	O
canon_charset	*(char)
;	O
char	O
*	O
fmtdir	O
;	O
char	O
*	O
fmtdirattr	O
;	O
const	O
char	O
*	O
s	*(char)
;	O
bool	bool
first_line	O
;	O
const	O
char	O
*	O
envval	O
;	O
iconv_t	*(void)
conv	O
;	O
bool	bool
weird_cjk	O
;	O
canon_charset	*(char)
=	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
charset	*(char)
)	O
;	O
envval	O
=	O
getenv	(*(char))->(*(char))
(	O
"OLD_PO_FILE_OUTPUT"	*(char)
)	O
;	O
if	O
(	O
envval	O
!=	O
NULL	O
&&	O
*	O
envval	O
!=	O
'\0'	O
)	O
conv	O
=	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
;	O
else	O
if	O
(	O
canon_charset	*(char)
==	O
NULL	O
)	O
conv	O
=	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
;	O
else	O
conv	O
=	O
iconv_open	(*(char),*(char))->(*(void))
(	O
"UTF-8"	*(char)
,	O
canon_charset	*(char)
)	O
;	O
if	O
(	O
conv	O
!=	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
)	O
weird_cjk	O
=	O
false	int
;	O
else	O
if	O
(	O
canon_charset	*(char)
==	O
NULL	O
)	O
weird_cjk	O
=	O
false	int
;	O
else	O
weird_cjk	O
=	O
po_is_charset_weird_cjk	(*(char))->(bool)
(	O
canon_charset	*(char)
)	O
;	O
if	O
(	O
canon_charset	*(char)
==	O
NULL	O
)	O
canon_charset	*(char)
=	O
po_charset_ascii	*(char)
;	O
fmtdir	O
=	O
NULL	O
;	O
fmtdirattr	O
=	O
NULL	O
;	O
if	O
(	O
value	O
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
bool	bool
is_msgstr	O
=	O
(	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
>=	O
6	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
,	O
"msgstr"	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
possible_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
value	O
)	O
;	O
struct	O
formatstring_parser	O
*	O
parser	O
=	O
formatstring_parsers	O
[	O
i	long
]	O
;	O
char	O
*	O
invalid_reason	O
=	O
NULL	O
;	O
void	O
*	O
descr	O
;	O
const	O
char	O
*	O
fdp	O
;	O
const	O
char	O
*	O
fd_end	O
;	O
char	O
*	O
fdap	O
;	O
fmtdir	O
=	O
XCALLOC	O
(	O
len	long
,	O
char	O
)	O
;	O
descr	O
=	O
parser	O
->	O
parse	O
(	O
value	O
,	O
is_msgstr	O
,	O
fmtdir	O
,	O
&	O
invalid_reason	O
)	O
;	O
if	O
(	O
descr	O
!=	O
NULL	O
)	O
parser	O
->	O
free	(*(void))->(void)
(	O
descr	O
)	O
;	O
fmtdirattr	O
=	O
XCALLOC	O
(	O
len	long
,	O
char	O
)	O
;	O
fd_end	O
=	O
fmtdir	O
+	O
len	long
;	O
for	O
(	O
fdp	O
=	O
fmtdir	O
,	O
fdap	O
=	O
fmtdirattr	O
;	O
fdp	O
<	O
fd_end	O
;	O
fdp	O
++	O
,	O
fdap	O
++	O
)	O
if	O
(	O
*	O
fdp	O
&	O
FMTDIR_START	O
)	O
{	O
const	O
char	O
*	O
fdq	O
;	O
for	O
(	O
fdq	O
=	O
fdp	O
;	O
fdq	O
<	O
fd_end	O
;	O
fdq	O
++	O
)	O
if	O
(	O
*	O
fdq	O
&	O
(	O
FMTDIR_END	O
|	O
FMTDIR_ERROR	O
)	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
fdq	O
<	O
fd_end	O
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
*	O
fdq	O
&	O
FMTDIR_ERROR	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
fdap	O
,	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
,	O
fdq	O
-	O
fdp	O
+	O
1	int
)	O
;	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
fdap	O
,	O
ATTR_FORMAT_DIRECTIVE	O
,	O
fdq	O
-	O
fdp	O
+	O
1	int
)	O
;	O
fdap	O
+=	O
fdq	O
-	O
fdp	O
;	O
fdp	O
=	O
fdq	O
;	O
}	O
else	O
*	O
fdap	O
=	O
0	int
;	O
break	O
;	O
}	O
}	O
s	*(char)
=	O
value	O
;	O
first_line	O
=	O
true	int
;	O
do	O
{	O
const	O
char	O
*	O
es	O
;	O
const	O
char	O
*	O
ep	O
;	O
size_t	long
portion_len	O
;	O
char	O
*	O
portion	O
;	O
char	O
*	O
overrides	O
;	O
char	O
*	O
attributes	O
;	O
char	O
*	O
linebreaks	O
;	O
char	O
*	O
pp	*(struct(*(char),long))
;	O
char	O
*	O
op	O
;	O
char	O
*	O
ap	O
;	O
int	O
startcol	O
,	O
startcol_after_break	O
,	O
width	O
;	O
size_t	long
i	long
;	O
for	O
(	O
es	O
=	O
s	*(char)
;	O
*	O
es	O
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
es	O
++	O
==	O
'\n'	O
)	O
break	O
;	O
for	O
(	O
ep	O
=	O
s	*(char)
,	O
portion_len	O
=	O
0	int
;	O
ep	O
<	O
es	O
;	O
ep	O
++	O
)	O
{	O
char	O
c	int
=	O
*	O
ep	O
;	O
if	O
(	O
is_escape	O
(	O
c	int
)	O
)	O
portion_len	O
+=	O
2	int
;	O
else	O
if	O
(	O
escape	O
&&	O
!	O
c_isprint	(int)->(bool)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
)	O
portion_len	O
+=	O
4	int
;	O
else	O
if	O
(	O
c	int
==	O
'\\'	O
||	O
c	int
==	O
'"'	O
)	O
portion_len	O
+=	O
2	int
;	O
else	O
{	O
if	O
(	O
conv	O
!=	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
)	O
{	O
char	O
scratchbuf	O
[	O
64	int
]	O
;	O
const	O
char	O
*	O
inptr	O
=	O
ep	O
;	O
size_t	long
insize	O
;	O
char	O
*	O
outptr	O
=	O
&	O
scratchbuf	O
[	O
0	int
]	O
;	O
size_t	long
outsize	O
=	O
sizeof	O
(	O
scratchbuf	O
)	O
;	O
size_t	long
res	O
;	O
res	O
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
for	O
(	O
insize	O
=	O
1	int
;	O
inptr	O
+	O
insize	O
<=	O
es	O
;	O
insize	O
++	O
)	O
{	O
res	O
=	O
iconv	(*(void),*(*(char)),*(long),*(*(char)),*(long))->(long)
(	O
conv	O
,	O
(	O
ICONV_CONST	O
char	O
*	O
*	O
)	O
&	O
inptr	O
,	O
&	O
insize	O
,	O
&	O
outptr	O
,	O
&	O
outsize	O
)	O
;	O
if	O
(	O
!	O
(	O
res	O
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
&&	O
errno	O
==	O
EINVAL	O
)	O
)	O
break	O
;	O
if	O
(	O
inptr	O
!=	O
ep	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
res	O
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EILSEQ	O
)	O
{	O
po_xerror	O
(	O
PO_SEVERITY_ERROR	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"invalid multibyte sequence"	*(char)
)	O
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
errno	O
==	O
EINVAL	O
)	O
{	O
po_xerror	O
(	O
PO_SEVERITY_ERROR	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"incomplete multibyte sequence"	*(char)
)	O
)	O
;	O
continue	O
;	O
}	O
else	O
abort	()->(void)
(	O
)	O
;	O
}	O
insize	O
=	O
inptr	O
-	O
ep	O
;	O
portion_len	O
+=	O
insize	O
;	O
ep	O
+=	O
insize	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
weird_cjk	O
&&	O
ep	O
+	O
2	int
<=	O
es	O
&&	O
(	O
unsigned	O
char	O
)	O
ep	O
[	O
0	int
]	O
>=	O
0x80	int
&&	O
(	O
unsigned	O
char	O
)	O
ep	O
[	O
1	int
]	O
>=	O
0x30	int
)	O
{	O
portion_len	O
+=	O
2	int
;	O
ep	O
+=	O
1	int
;	O
}	O
else	O
portion_len	O
+=	O
1	int
;	O
}	O
}	O
}	O
portion	O
=	O
XNMALLOC	O
(	O
portion_len	O
,	O
char	O
)	O
;	O
overrides	O
=	O
XNMALLOC	O
(	O
portion_len	O
,	O
char	O
)	O
;	O
attributes	O
=	O
XNMALLOC	O
(	O
portion_len	O
,	O
char	O
)	O
;	O
for	O
(	O
ep	O
=	O
s	*(char)
,	O
pp	*(struct(*(char),long))
=	O
portion	O
,	O
op	O
=	O
overrides	O
,	O
ap	O
=	O
attributes	O
;	O
ep	O
<	O
es	O
;	O
ep	O
++	O
)	O
{	O
char	O
c	int
=	O
*	O
ep	O
;	O
char	O
attr	O
=	O
(	O
fmtdirattr	O
!=	O
NULL	O
?	O
fmtdirattr	O
[	O
ep	O
-	O
value	O
]	O
:	O
0	int
)	O
;	O
char	O
brk	O
=	O
UC_BREAK_UNDEFINED	O
;	O
if	O
(	O
attr	O
==	O
ATTR_FORMAT_DIRECTIVE	O
&&	O
(	O
fmtdir	O
[	O
ep	O
-	O
value	O
]	O
&	O
FMTDIR_START	O
)	O
==	O
0	int
)	O
brk	O
=	O
UC_BREAK_PROHIBITED	O
;	O
if	O
(	O
is_escape	O
(	O
c	int
)	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\a'	O
:	O
c	int
=	O
'a'	O
;	O
break	O
;	O
case	O
'\b'	O
:	O
c	int
=	O
'b'	O
;	O
break	O
;	O
case	O
'\f'	O
:	O
c	int
=	O
'f'	O
;	O
break	O
;	O
case	O
'\n'	O
:	O
c	int
=	O
'n'	O
;	O
break	O
;	O
case	O
'\r'	O
:	O
c	int
=	O
'r'	O
;	O
break	O
;	O
case	O
'\t'	O
:	O
c	int
=	O
't'	O
;	O
break	O
;	O
case	O
'\v'	O
:	O
c	int
=	O
'v'	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
'\\'	O
;	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
c	int
;	O
*	O
op	O
++	O
=	O
brk	O
;	O
*	O
op	O
++	O
=	O
UC_BREAK_PROHIBITED	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
if	O
(	O
c	int
!=	O
'n'	O
&&	O
c	int
!=	O
't'	O
)	O
{	O
char	O
*	O
error_message	O
=	O
xasprintf	O
(	O
_	O
(	O
"internationalized messages should not contain the '\\%c' escape sequence"	*(char)
)	O
,	O
c	int
)	O
;	O
po_xerror	O
(	O
PO_SEVERITY_WARNING	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
error_message	O
)	O
;	O
free	(*(void))->(void)
(	O
error_message	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
escape	O
&&	O
!	O
c_isprint	(int)->(bool)
(	O
(	O
unsigned	O
char	O
)	O
c	int
)	O
)	O
{	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
'\\'	O
;	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
'0'	O
+	O
(	O
(	O
(	O
unsigned	O
char	O
)	O
c	int
>>	O
6	int
)	O
&	O
7	int
)	O
;	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
'0'	O
+	O
(	O
(	O
(	O
unsigned	O
char	O
)	O
c	int
>>	O
3	int
)	O
&	O
7	int
)	O
;	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
'0'	O
+	O
(	O
(	O
unsigned	O
char	O
)	O
c	int
&	O
7	int
)	O
;	O
*	O
op	O
++	O
=	O
brk	O
;	O
*	O
op	O
++	O
=	O
UC_BREAK_PROHIBITED	O
;	O
*	O
op	O
++	O
=	O
UC_BREAK_PROHIBITED	O
;	O
*	O
op	O
++	O
=	O
UC_BREAK_PROHIBITED	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\\'	O
||	O
c	int
==	O
'"'	O
)	O
{	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
'\\'	O
;	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
c	int
;	O
*	O
op	O
++	O
=	O
brk	O
;	O
*	O
op	O
++	O
=	O
UC_BREAK_PROHIBITED	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
*	O
ap	O
++	O
=	O
attr	O
|	O
ATTR_ESCAPE_SEQUENCE	O
;	O
}	O
else	O
{	O
if	O
(	O
conv	O
!=	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
)	O
{	O
char	O
scratchbuf	O
[	O
64	int
]	O
;	O
const	O
char	O
*	O
inptr	O
=	O
ep	O
;	O
size_t	long
insize	O
;	O
char	O
*	O
outptr	O
=	O
&	O
scratchbuf	O
[	O
0	int
]	O
;	O
size_t	long
outsize	O
=	O
sizeof	O
(	O
scratchbuf	O
)	O
;	O
size_t	long
res	O
;	O
res	O
=	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
;	O
for	O
(	O
insize	O
=	O
1	int
;	O
inptr	O
+	O
insize	O
<=	O
es	O
;	O
insize	O
++	O
)	O
{	O
res	O
=	O
iconv	(*(void),*(*(char)),*(long),*(*(char)),*(long))->(long)
(	O
conv	O
,	O
(	O
ICONV_CONST	O
char	O
*	O
*	O
)	O
&	O
inptr	O
,	O
&	O
insize	O
,	O
&	O
outptr	O
,	O
&	O
outsize	O
)	O
;	O
if	O
(	O
!	O
(	O
res	O
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
&&	O
errno	O
==	O
EINVAL	O
)	O
)	O
break	O
;	O
if	O
(	O
inptr	O
!=	O
ep	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
res	O
==	O
(	O
size_t	long
)	O
(	O
-	O
1	int
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
EILSEQ	O
)	O
{	O
po_xerror	O
(	O
PO_SEVERITY_ERROR	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
false	int
,	O
_	O
(	O
"invalid multibyte sequence"	*(char)
)	O
)	O
;	O
continue	O
;	O
}	O
else	O
abort	()->(void)
(	O
)	O
;	O
}	O
insize	O
=	O
inptr	O
-	O
ep	O
;	O
memcpy_small	O
(	O
pp	*(struct(*(char),long))
,	O
ep	O
,	O
insize	O
)	O
;	O
pp	*(struct(*(char),long))
+=	O
insize	O
;	O
*	O
op	O
=	O
brk	O
;	O
memset_small	O
(	O
op	O
+	O
1	int
,	O
UC_BREAK_PROHIBITED	O
,	O
insize	O
-	O
1	int
)	O
;	O
op	O
+=	O
insize	O
;	O
memset_small	O
(	O
ap	O
,	O
attr	O
,	O
insize	O
)	O
;	O
ap	O
+=	O
insize	O
;	O
ep	O
+=	O
insize	O
-	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
weird_cjk	O
&&	O
ep	O
+	O
2	int
<=	O
es	O
&&	O
(	O
unsigned	O
char	O
)	O
c	int
>=	O
0x80	int
&&	O
(	O
unsigned	O
char	O
)	O
ep	O
[	O
1	int
]	O
>=	O
0x30	int
)	O
{	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
c	int
;	O
ep	O
+=	O
1	int
;	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
*	O
ep	O
;	O
*	O
op	O
++	O
=	O
brk	O
;	O
*	O
op	O
++	O
=	O
UC_BREAK_PROHIBITED	O
;	O
*	O
ap	O
++	O
=	O
attr	O
;	O
*	O
ap	O
++	O
=	O
attr	O
;	O
}	O
else	O
{	O
*	O
pp	*(struct(*(char),long))
++	O
=	O
c	int
;	O
*	O
op	O
++	O
=	O
brk	O
;	O
*	O
ap	O
++	O
=	O
attr	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
es	O
>	O
s	*(char)
&&	O
es	O
[	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
overrides	O
[	O
portion_len	O
-	O
2	int
]	O
=	O
UC_BREAK_PROHIBITED	O
;	O
linebreaks	O
=	O
XNMALLOC	O
(	O
portion_len	O
,	O
char	O
)	O
;	O
startcol_after_break	O
=	O
(	O
line_prefix	O
?	O
strlen	(*(char))->(long)
(	O
line_prefix	O
)	O
:	O
0	int
)	O
;	O
if	O
(	O
indent	O
)	O
startcol_after_break	O
=	O
(	O
startcol_after_break	O
+	O
extra_indent	O
+	O
8	int
)	O
&	O
~	O
7	int
;	O
startcol_after_break	O
++	O
;	O
width	O
=	O
(	O
wrap_strings	O
&&	O
do_wrap	enum(int,int,int,int,int,int)
!=	O
no	int
?	O
page_width	long
:	O
INT_MAX	O
)	O
-	O
1	int
;	O
width	O
-=	O
startcol_after_break	O
;	O
recompute	O
:	O
startcol	O
=	O
(	O
line_prefix	O
?	O
strlen	(*(char))->(long)
(	O
line_prefix	O
)	O
:	O
0	int
)	O
;	O
if	O
(	O
first_line	O
)	O
{	O
startcol	O
+=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
indent	O
)	O
startcol	O
=	O
(	O
startcol	O
+	O
extra_indent	O
+	O
8	int
)	O
&	O
~	O
7	int
;	O
else	O
startcol	O
++	O
;	O
}	O
else	O
{	O
if	O
(	O
indent	O
)	O
startcol	O
=	O
(	O
startcol	O
+	O
extra_indent	O
+	O
8	int
)	O
&	O
~	O
7	int
;	O
}	O
startcol	O
++	O
;	O
startcol	O
-=	O
startcol_after_break	O
;	O
ulc_width_linebreaks	O
(	O
portion	O
,	O
portion_len	O
,	O
width	O
,	O
startcol	O
,	O
0	int
,	O
overrides	O
,	O
canon_charset	*(char)
,	O
linebreaks	O
)	O
;	O
if	O
(	O
first_line	O
&&	O
!	O
indent	O
&&	O
portion_len	O
>	O
0	int
&&	O
(	O
*	O
es	O
!=	O
'\0'	O
||	O
startcol	O
>	O
width	O
||	O
memchr	(*(void),int,long)->(*(void))
(	O
linebreaks	O
,	O
UC_BREAK_POSSIBLE	O
,	O
portion_len	O
)	O
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
line_prefix	O
!=	O
NULL	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
line_prefix	O
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
css_class	O
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_keyword	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
name	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_keyword	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\"\""	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
css_class	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
first_line	O
=	O
false	int
;	O
goto	O
recompute	O
;	O
}	O
{	O
int	O
currcol	O
=	O
0	int
;	O
if	O
(	O
line_prefix	O
!=	O
NULL	O
)	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
line_prefix	O
)	O
;	O
currcol	O
=	O
strlen	(*(char))->(long)
(	O
line_prefix	O
)	O
;	O
}	O
begin_css_class	O
(	O
stream	*(struct)
,	O
css_class	O
)	O
;	O
if	O
(	O
first_line	O
)	O
{	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_keyword	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
name	*(char)
)	O
;	O
currcol	O
+=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_keyword	O
)	O
;	O
if	O
(	O
indent	O
)	O
{	O
if	O
(	O
extra_indent	O
>	O
0	int
)	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
"        "	*(char)
,	O
extra_indent	O
)	O
;	O
currcol	O
+=	O
extra_indent	O
;	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
"        "	*(char)
,	O
8	int
-	O
(	O
currcol	O
&	O
7	int
)	O
)	O
;	O
currcol	O
=	O
(	O
currcol	O
+	O
8	int
)	O
&	O
~	O
7	int
;	O
}	O
else	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
currcol	O
++	O
;	O
}	O
first_line	O
=	O
false	int
;	O
}	O
else	O
{	O
if	O
(	O
indent	O
)	O
{	O
if	O
(	O
extra_indent	O
>	O
0	int
)	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
"        "	*(char)
,	O
extra_indent	O
)	O
;	O
currcol	O
+=	O
extra_indent	O
;	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
"        "	*(char)
,	O
8	int
-	O
(	O
currcol	O
&	O
7	int
)	O
)	O
;	O
currcol	O
=	O
(	O
currcol	O
+	O
8	int
)	O
&	O
~	O
7	int
;	O
}	O
}	O
}	O
{	O
char	O
currattr	O
=	O
0	int
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\""	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_text	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
portion_len	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
linebreaks	O
[	O
i	long
]	O
==	O
UC_BREAK_POSSIBLE	O
)	O
{	O
int	O
currcol	O
;	O
if	O
(	O
currattr	O
&	O
ATTR_ESCAPE_SEQUENCE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_escape_sequence	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_ESCAPE_SEQUENCE	O
;	O
}	O
if	O
(	O
currattr	O
&	O
ATTR_FORMAT_DIRECTIVE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_format_directive	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_FORMAT_DIRECTIVE	O
;	O
}	O
else	O
if	O
(	O
currattr	O
&	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_invalid_format_directive	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
;	O
}	O
if	O
(	O
!	O
(	O
currattr	O
==	O
0	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_text	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\""	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
css_class	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
currcol	O
=	O
0	int
;	O
if	O
(	O
line_prefix	O
!=	O
NULL	O
)	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
line_prefix	O
)	O
;	O
currcol	O
=	O
strlen	(*(char))->(long)
(	O
line_prefix	O
)	O
;	O
}	O
begin_css_class	O
(	O
stream	*(struct)
,	O
css_class	O
)	O
;	O
if	O
(	O
indent	O
)	O
{	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
"        "	*(char)
,	O
8	int
-	O
(	O
currcol	O
&	O
7	int
)	O
)	O
;	O
currcol	O
=	O
(	O
currcol	O
+	O
8	int
)	O
&	O
~	O
7	int
;	O
}	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\""	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_text	O
)	O
;	O
}	O
if	O
(	O
attributes	O
[	O
i	long
]	O
!=	O
currattr	O
)	O
{	O
if	O
(	O
currattr	O
&	O
ATTR_ESCAPE_SEQUENCE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_escape_sequence	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_ESCAPE_SEQUENCE	O
;	O
}	O
if	O
(	O
~	O
attributes	O
[	O
i	long
]	O
&	O
currattr	O
&	O
ATTR_FORMAT_DIRECTIVE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_format_directive	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_FORMAT_DIRECTIVE	O
;	O
}	O
else	O
if	O
(	O
~	O
attributes	O
[	O
i	long
]	O
&	O
currattr	O
&	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_invalid_format_directive	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
;	O
}	O
if	O
(	O
attributes	O
[	O
i	long
]	O
&	O
~	O
currattr	O
&	O
ATTR_FORMAT_DIRECTIVE	O
)	O
{	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_format_directive	O
)	O
;	O
currattr	O
|=	O
ATTR_FORMAT_DIRECTIVE	O
;	O
}	O
else	O
if	O
(	O
attributes	O
[	O
i	long
]	O
&	O
~	O
currattr	O
&	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
)	O
{	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_invalid_format_directive	O
)	O
;	O
currattr	O
|=	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
;	O
}	O
if	O
(	O
attributes	O
[	O
i	long
]	O
&	O
~	O
currattr	O
&	O
ATTR_ESCAPE_SEQUENCE	O
)	O
{	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_escape_sequence	O
)	O
;	O
currattr	O
|=	O
ATTR_ESCAPE_SEQUENCE	O
;	O
}	O
}	O
ostream_write_mem	(*(struct),*(void),long)->(void)
(	O
stream	*(struct)
,	O
&	O
portion	O
[	O
i	long
]	O
,	O
1	int
)	O
;	O
}	O
if	O
(	O
currattr	O
&	O
ATTR_ESCAPE_SEQUENCE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_escape_sequence	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_ESCAPE_SEQUENCE	O
;	O
}	O
if	O
(	O
currattr	O
&	O
ATTR_FORMAT_DIRECTIVE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_format_directive	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_FORMAT_DIRECTIVE	O
;	O
}	O
else	O
if	O
(	O
currattr	O
&	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
)	O
{	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_invalid_format_directive	O
)	O
;	O
currattr	O
&=	O
~	O
ATTR_INVALID_FORMAT_DIRECTIVE	O
;	O
}	O
if	O
(	O
!	O
(	O
currattr	O
==	O
0	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_text	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\""	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
css_class	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
linebreaks	O
)	O
;	O
free	(*(void))->(void)
(	O
attributes	O
)	O
;	O
free	(*(void))->(void)
(	O
overrides	O
)	O
;	O
free	(*(void))->(void)
(	O
portion	O
)	O
;	O
s	*(char)
=	O
es	O
;	O
}	O
while	O
(	O
*	O
s	*(char)
)	O
;	O
if	O
(	O
fmtdirattr	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
fmtdirattr	O
)	O
;	O
if	O
(	O
fmtdir	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
fmtdir	O
)	O
;	O
if	O
(	O
conv	O
!=	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
)	O
iconv_close	(*(void))->(int)
(	O
conv	O
)	O
;	O
}	O
static	O
void	O
print_blank_line	O
(	O
ostream_t	*(struct)
stream	*(struct)
)	O
{	O
if	O
(	O
uniforum	bool
)	O
{	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_comment	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"#\n"	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_comment	O
)	O
;	O
}	O
else	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
static	O
void	O
message_print	O
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
charset	*(char)
,	O
size_t	long
page_width	long
,	O
bool	bool
blank_line	O
,	O
bool	bool
debug	bool
)	O
{	O
int	O
extra_indent	O
;	O
if	O
(	O
blank_line	O
&&	O
(	O
!	O
uniforum	bool
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment	*(struct(*(*(char)),long,long))
==	O
NULL	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment	*(struct(*(*(char)),long,long))
->	O
nitems	long
==	O
0	int
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
comment	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
0	int
]	O
[	O
0	int
]	O
!=	O
'\0'	O
)	O
)	O
print_blank_line	O
(	O
stream	*(struct)
)	O
;	O
if	O
(	O
is_header	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
)	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_header	O
)	O
;	O
else	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_untranslated	O
)	O
;	O
else	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
)	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_fuzzy	O
)	O
;	O
else	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_translated	O
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_comment	O
)	O
;	O
message_print_comment	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
)	O
;	O
message_print_comment_dot	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
)	O
;	O
message_print_comment_filepos	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct),bool,long)->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
uniforum	bool
,	O
page_width	long
)	O
;	O
message_print_comment_flags	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct),bool)->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
debug	bool
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_previous_comment	O
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#| "	*(char)
,	O
0	int
,	O
class_previous	O
,	O
"msgctxt"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#| "	*(char)
,	O
0	int
,	O
class_previous	O
,	O
"msgid"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#| "	*(char)
,	O
0	int
,	O
class_previous	O
,	O
"msgid_plural"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_previous_comment	O
)	O
;	O
extra_indent	O
=	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
!=	O
NULL	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
!=	O
NULL	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
!=	O
NULL	O
?	O
3	int
:	O
0	int
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_comment	O
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
!=	O
NULL	O
&&	O
!	O
is_ascii_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
)	O
&&	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
charset	*(char)
)	O
!=	O
po_charset_utf8	*(char)
)	O
{	O
char	O
*	O
warning_message	O
=	O
xasprintf	O
(	O
_	O
(	O
"The following msgctxt contains non-ASCII characters.\nThis will cause problems to translators who use a character encoding\ndifferent from yours. Consider using a pure ASCII msgctxt instead.\n%s\n"	*(char)
)	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
)	O
;	O
po_xerror	O
(	O
PO_SEVERITY_WARNING	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
true	int
,	O
warning_message	O
)	O
;	O
free	(*(void))->(void)
(	O
warning_message	O
)	O
;	O
}	O
if	O
(	O
!	O
is_ascii_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
)	O
&&	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
charset	*(char)
)	O
!=	O
po_charset_utf8	*(char)
)	O
{	O
char	O
*	O
warning_message	O
=	O
xasprintf	O
(	O
_	O
(	O
"The following msgid contains non-ASCII characters.\nThis will cause problems to translators who use a character encoding\ndifferent from yours. Consider using a pure ASCII msgid instead.\n%s\n"	*(char)
)	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
)	O
;	O
po_xerror	O
(	O
PO_SEVERITY_WARNING	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
true	int
,	O
warning_message	O
)	O
;	O
free	(*(void))->(void)
(	O
warning_message	O
)	O
;	O
}	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
NULL	O
,	O
extra_indent	O
,	O
class_msgid	O
,	O
"msgctxt"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
NULL	O
,	O
extra_indent	O
,	O
class_msgid	O
,	O
"msgid"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
NULL	O
,	O
extra_indent	O
,	O
class_msgid	O
,	O
"msgid_plural"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
==	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
NULL	O
,	O
extra_indent	O
,	O
class_msgstr	O
,	O
"msgstr"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
else	O
{	O
char	O
prefix_buf	O
[	O
20	int
]	O
;	O
unsigned	O
int	O
i	long
;	O
const	O
char	O
*	O
p	*(void)
;	O
for	O
(	O
p	*(void)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
i	long
=	O
0	int
;	O
p	*(void)
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
+	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
+	O
1	int
,	O
i	long
++	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
prefix_buf	O
,	O
"msgstr[%u]"	*(char)
,	O
i	long
)	O
;	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
NULL	O
,	O
extra_indent	O
,	O
class_msgstr	O
,	O
prefix_buf	O
,	O
p	*(void)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
is_header	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
)	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_header	O
)	O
;	O
else	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_untranslated	O
)	O
;	O
else	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
)	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_fuzzy	O
)	O
;	O
else	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_translated	O
)	O
;	O
}	O
static	O
void	O
message_print_obsolete	O
(	O
const	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
ostream_t	*(struct)
stream	*(struct)
,	O
const	O
char	O
*	O
charset	*(char)
,	O
size_t	long
page_width	long
,	O
bool	bool
blank_line	O
,	O
bool	bool
debug	bool
)	O
{	O
int	O
extra_indent	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
;	O
if	O
(	O
blank_line	O
)	O
print_blank_line	O
(	O
stream	*(struct)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_obsolete	O
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_comment	O
)	O
;	O
message_print_comment	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
)	O
;	O
message_print_comment_dot	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
)	O
;	O
message_print_comment_filepos	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(struct),bool,long)->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
uniforum	bool
,	O
page_width	long
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
||	O
has_significant_format_p	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
)	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
==	O
no	int
)	O
{	O
bool	bool
first_flag	O
=	O
true	int
;	O
size_t	long
i	long
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"#,"	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
)	O
{	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" fuzzy"	*(char)
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NFORMATS	int
;	O
i	long
++	O
)	O
if	O
(	O
significant_format_p	(enum(int,int,int,int,int,int))->(bool)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
)	O
)	O
{	O
if	O
(	O
!	O
first_flag	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
","	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
make_format_description_string	(enum(int,int,int,int,int,int),*(char),bool)->(*(char))
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_format	enum(int,int,int,int,int,int)
[	O
i	long
]	O
,	O
format_language	array(*(char))
[	O
i	long
]	O
,	O
debug	bool
)	O
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
==	O
no	int
)	O
{	O
if	O
(	O
!	O
first_flag	O
)	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
","	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
make_c_width_description_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
)	O
)	O
;	O
first_flag	O
=	O
false	int
;	O
}	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_previous_comment	O
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~| "	*(char)
,	O
0	int
,	O
class_previous	O
,	O
"msgctxt"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~| "	*(char)
,	O
0	int
,	O
class_previous	O
,	O
"msgid"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~| "	*(char)
,	O
0	int
,	O
class_previous	O
,	O
"msgid_plural"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_previous_comment	O
)	O
;	O
extra_indent	O
=	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgctxt	*(char)
!=	O
NULL	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid	*(char)
!=	O
NULL	O
||	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
prev_msgid_plural	*(char)
!=	O
NULL	O
?	O
1	int
:	O
0	int
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_comment	O
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
!=	O
NULL	O
&&	O
!	O
is_ascii_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
)	O
&&	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
charset	*(char)
)	O
!=	O
po_charset_utf8	*(char)
)	O
{	O
char	O
*	O
warning_message	O
=	O
xasprintf	O
(	O
_	O
(	O
"The following msgctxt contains non-ASCII characters.\nThis will cause problems to translators who use a character encoding\ndifferent from yours. Consider using a pure ASCII msgctxt instead.\n%s\n"	*(char)
)	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
)	O
;	O
po_xerror	O
(	O
PO_SEVERITY_WARNING	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
true	int
,	O
warning_message	O
)	O
;	O
free	(*(void))->(void)
(	O
warning_message	O
)	O
;	O
}	O
if	O
(	O
!	O
is_ascii_string	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
)	O
&&	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
charset	*(char)
)	O
!=	O
po_charset_utf8	*(char)
)	O
{	O
char	O
*	O
warning_message	O
=	O
xasprintf	O
(	O
_	O
(	O
"The following msgid contains non-ASCII characters.\nThis will cause problems to translators who use a character encoding\ndifferent from yours. Consider using a pure ASCII msgid instead.\n%s\n"	*(char)
)	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
)	O
;	O
po_xerror	O
(	O
PO_SEVERITY_WARNING	O
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
true	int
,	O
warning_message	O
)	O
;	O
free	(*(void))->(void)
(	O
warning_message	O
)	O
;	O
}	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~ "	*(char)
,	O
extra_indent	O
,	O
class_msgid	O
,	O
"msgctxt"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgctxt	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~ "	*(char)
,	O
extra_indent	O
,	O
class_msgid	O
,	O
"msgid"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~ "	*(char)
,	O
extra_indent	O
,	O
class_msgid	O
,	O
"msgid_plural"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
==	O
NULL	O
)	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~ "	*(char)
,	O
extra_indent	O
,	O
class_msgstr	O
,	O
"msgstr"	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
else	O
{	O
char	O
prefix_buf	O
[	O
20	int
]	O
;	O
unsigned	O
int	O
i	long
;	O
const	O
char	O
*	O
p	*(void)
;	O
for	O
(	O
p	*(void)
=	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
,	O
i	long
=	O
0	int
;	O
p	*(void)
<	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr	*(char)
+	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgstr_len	long
;	O
p	*(void)
+=	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
+	O
1	int
,	O
i	long
++	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
prefix_buf	O
,	O
"msgstr[%u]"	*(char)
,	O
i	long
)	O
;	O
wrap	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
stream	*(struct)
,	O
"#~ "	*(char)
,	O
extra_indent	O
,	O
class_msgstr	O
,	O
prefix_buf	O
,	O
p	*(void)
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
do_wrap	enum(int,int,int,int,int,int)
,	O
page_width	long
,	O
charset	*(char)
)	O
;	O
}	O
}	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_obsolete	O
)	O
;	O
}	O
static	O
void	O
msgdomain_list_print_po	O
(	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
,	O
ostream_t	*(struct)
stream	*(struct)
,	O
size_t	long
page_width	long
,	O
bool	bool
debug	bool
)	O
{	O
size_t	long
j	O
,	O
k	O
;	O
bool	bool
blank_line	O
;	O
blank_line	O
=	O
false	int
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
k	O
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
const	O
char	O
*	O
header	O
;	O
const	O
char	O
*	O
charset	*(char)
;	O
char	O
*	O
allocated_charset	O
;	O
if	O
(	O
!	O
(	O
k	O
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
domain	*(char)
,	O
MESSAGE_DOMAIN_DEFAULT	O
)	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
blank_line	O
)	O
print_blank_line	O
(	O
stream	*(struct)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_keyword	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"domain"	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_keyword	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
" "	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\""	*(char)
)	O
;	O
begin_css_class	O
(	O
stream	*(struct)
,	O
class_text	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
domain	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_text	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\""	*(char)
)	O
;	O
end_css_class	O
(	O
stream	*(struct)
,	O
class_string	O
)	O
;	O
ostream_write_str	(*(struct),*(char))->(void)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
blank_line	O
=	O
true	int
;	O
}	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
k	O
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
header	O
=	O
NULL	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
++	O
j	O
)	O
if	O
(	O
is_header	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
)	O
&&	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
header	O
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
msgstr	*(char)
;	O
break	O
;	O
}	O
charset	*(char)
=	O
"ASCII"	*(char)
;	O
allocated_charset	O
=	O
NULL	O
;	O
if	O
(	O
header	O
!=	O
NULL	O
)	O
{	O
const	O
char	O
*	O
charsetstr	O
=	O
c_strstr	O
(	O
header	O
,	O
"charset="	*(char)
)	O
;	O
if	O
(	O
charsetstr	O
!=	O
NULL	O
)	O
{	O
size_t	long
len	long
;	O
charsetstr	O
+=	O
strlen	(*(char))->(long)
(	O
"charset="	*(char)
)	O
;	O
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
charsetstr	O
,	O
" \t\n"	*(char)
)	O
;	O
allocated_charset	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
allocated_charset	O
,	O
charsetstr	O
,	O
len	long
)	O
;	O
allocated_charset	O
[	O
len	long
]	O
=	O
'\0'	O
;	O
charset	*(char)
=	O
allocated_charset	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
charset	*(char)
,	O
"CHARSET"	*(char)
)	O
==	O
0	int
)	O
charset	*(char)
=	O
"ASCII"	*(char)
;	O
}	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
++	O
j	O
)	O
if	O
(	O
!	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
message_print	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
,	O
stream	*(struct)
,	O
charset	*(char)
,	O
page_width	long
,	O
blank_line	O
,	O
debug	bool
)	O
;	O
blank_line	O
=	O
true	int
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
++	O
j	O
)	O
if	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
->	O
obsolete	bool
)	O
{	O
message_print_obsolete	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
,	O
stream	*(struct)
,	O
charset	*(char)
,	O
page_width	long
,	O
blank_line	O
,	O
debug	bool
)	O
;	O
blank_line	O
=	O
true	int
;	O
}	O
if	O
(	O
allocated_charset	O
!=	O
NULL	O
)	O
freea	O
(	O
allocated_charset	O
)	O
;	O
}	O
}	O
const	O
struct	O
catalog_output_format	O
output_format_po	struct
=	O
{	O
msgdomain_list_print_po	O
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
false	int
}	O
;	O
