static	O
int	O
triangular_inverse_L2	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
int	O
gsl_linalg_tri_invert	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
static	O
int	O
triangular_inverse_L2	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
size_t	long
i	long
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasUpper	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
aii	double
;	O
if	O
(	O
Diag	enum(int,int)
==	O
CblasNonUnit	int
)	O
{	O
double	O
*	O
Tii	*(double)
=	O
gsl_matrix_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
*	O
Tii	*(double)
=	O
1.0	int
/	O
*	O
Tii	*(double)
;	O
aii	double
=	O
-	O
(	O
*	O
Tii	*(double)
)	O
;	O
}	O
else	O
{	O
aii	double
=	O
-	O
1.0	int
;	O
}	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
i	long
,	O
i	long
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
aii	double
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
ajj	double
;	O
size_t	long
j	long
=	O
N	int
-	O
i	long
-	O
1	int
;	O
if	O
(	O
Diag	enum(int,int)
==	O
CblasNonUnit	int
)	O
{	O
double	O
*	O
Tjj	*(double)
=	O
gsl_matrix_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
j	long
)	O
;	O
*	O
Tjj	*(double)
=	O
1.0	int
/	O
*	O
Tjj	*(double)
;	O
ajj	double
=	O
-	O
(	O
*	O
Tjj	*(double)
)	O
;	O
}	O
else	O
{	O
ajj	double
=	O
-	O
1.0	int
;	O
}	O
if	O
(	O
j	long
<	O
N	int
-	O
1	int
)	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
+	O
1	int
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
ajj	double
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_INVTRI	O
)	O
{	O
return	O
triangular_inverse_L2	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasLower	int
)	O
{	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
-	O
1.0	int
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
1.0	int
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
-	O
1.0	int
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
1.0	int
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
status	int
=	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
++	O
i	long
)	O
{	O
double	O
Tii	*(double)
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
Tii	*(double)
==	O
0.0	int
)	O
return	O
GSL_ESING	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_tri_upper_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_tri_lower_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_tri_upper_unit_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasUnit	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_tri_lower_unit_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
=	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
triangular_inverse_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
