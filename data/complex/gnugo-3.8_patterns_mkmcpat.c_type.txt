static	O
char	O
*	O
copy_and_trim_name	(*(char))->(*(char))
(	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
int	O
name_length	int
=	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
;	O
char	O
*	O
name	short
=	O
malloc	(long)->(*(void))
(	O
name_length	int
+	O
1	int
)	O
;	O
char	O
*	O
start	*(char)
=	O
name	short
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
name2	*(char)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name	short
,	O
filename	*(char)
)	O
;	O
p	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
name	short
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
p	*(char)
++	O
;	O
name_length	int
-=	O
(	O
p	*(char)
-	O
name	short
)	O
;	O
start	*(char)
=	O
p	*(char)
;	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
start	*(char)
,	O
"mc_"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
start	*(char)
+=	O
3	int
;	O
name_length	int
-=	O
3	int
;	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
start	*(char)
+	O
name_length	int
-	O
3	int
,	O
".db"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
start	*(char)
[	O
name_length	int
-	O
3	int
]	O
=	O
'\0'	O
;	O
name2	*(char)
=	O
malloc	(long)->(*(void))
(	O
name_length	int
+	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
name2	*(char)
,	O
start	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	short
)	O
;	O
return	O
name2	*(char)
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
N	int
=	O
mc_get_size_of_pattern_values_table	()->(int)
(	O
)	O
;	O
unsigned	O
int	O
*	O
values	array(float)
;	O
int	O
i	int
;	O
int	O
k	int
;	O
char	O
*	O
name	short
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: ...\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\\\n * This is GNU Go, a Go program. Contact gnugo@gnu.org, or see       *\n * http://www.gnu.org/software/gnugo/ for more information.          *\n *                                                                   *\n * Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,   *\n * 2008 and 2009 by the Free Software Foundation.                    *\n *                                                                   *\n * This program is free software; you can redistribute it and/or     *\n * modify it under the terms of the GNU General Public License as    *\n * published by the Free Software Foundation - version 3             *\n * or (at your option) any later version                             *\n *                                                                   *\n * This program is distributed in the hope that it will be useful,   *\n * but WITHOUT ANY WARRANTY; without even the implied warranty of    *\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     *\n * GNU General Public License in file COPYING for more details.      *\n *                                                                   *\n * You should have received a copy of the GNU General Public         *\n * License along with this program; if not, write to the Free        *\n * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,       *\n * Boston, MA 02111, USA.                                            *\n\\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"/* This file is automatically generated by mkmcpat. Do not\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
" * edit it directly. Instead, edit the pattern databases\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
" * mc_*.db.\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
" */\n\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#include <stdio.h> /* for NULL */\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#include \"liberty.h\"\n\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#include \"patterns.h\"\n\n"	*(char)
)	O
;	O
values	array(float)
=	O
malloc	(long)->(*(void))
(	O
N	int
*	O
sizeof	O
(	O
*	O
values	array(float)
)	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
mc_load_patterns_from_db	(*(char),*(int))->(int)
(	O
argv	array(*(char))
[	O
i	int
]	O
,	O
values	array(float)
)	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
name	short
=	O
copy_and_trim_name	(*(char))->(*(char))
(	O
argv	array(*(char))
[	O
i	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"static const unsigned int %s_values[] = {\n"	*(char)
,	O
name	short
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
N	int
;	O
k	int
++	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%u, "	*(char)
,	O
values	array(float)
[	O
k	int
]	O
)	O
;	O
if	O
(	O
k	int
%	O
16	int
==	O
15	int
)	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n};\n\n"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	short
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"struct mc_pattern_database mc_pattern_databases[] = {\n"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
name	short
=	O
copy_and_trim_name	(*(char))->(*(char))
(	O
argv	array(*(char))
[	O
i	int
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"  {\"%s\", %s_values},\n"	*(char)
,	O
name	short
,	O
name	short
)	O
;	O
free	(*(void))->(void)
(	O
name	short
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"  {NULL, NULL}};\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
