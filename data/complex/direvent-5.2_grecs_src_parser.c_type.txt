int	O
grecs_error_count	int
=	O
0	int
;	O
int	O
grecs_default_port	int
=	O
0	int
;	O
int	O
grecs_trace_flags	int
=	O
0	int
;	O
int	O
grecs_parser_options	int
=	O
0	int
;	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
(	O
*	O
grecs_parser_fun	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
)	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
trace	int
)	O
=	O
GRECS_DEFAULT_PARSER	O
;	O
void	O
grecs_gram_trace	(int)->(void)
(	O
int	O
n	long
)	O
{	O
if	O
(	O
n	long
)	O
grecs_trace_flags	int
|=	O
GRECS_TRACE_GRAM	int
;	O
else	O
grecs_trace_flags	int
&=	O
~	O
GRECS_TRACE_GRAM	int
;	O
}	O
void	O
grecs_lex_trace	(int)->(void)
(	O
int	O
n	long
)	O
{	O
if	O
(	O
n	long
)	O
grecs_trace_flags	int
|=	O
GRECS_TRACE_LEX	int
;	O
else	O
grecs_trace_flags	int
&=	O
~	O
GRECS_TRACE_LEX	int
;	O
}	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
grecs_parse	(*(char))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
!	O
grecs_trace_flags	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"GRECS_DEBUG"	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
while	O
(	O
*	O
p	*(char)
)	O
{	O
switch	O
(	O
*	O
p	*(char)
++	O
)	O
{	O
case	O
'g'	O
:	O
case	O
'G'	O
:	O
grecs_trace_flags	int
|=	O
GRECS_TRACE_GRAM	int
;	O
break	O
;	O
case	O
'l'	O
:	O
case	O
'L'	O
:	O
grecs_trace_flags	int
|=	O
GRECS_TRACE_LEX	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
grecs_error_count	int
=	O
0	int
;	O
grecs_current_locus_point	struct(*(char),int,int)
.	O
file	*(char)
=	O
grecs_install_text	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
grecs_current_locus_point	struct(*(char),int,int)
.	O
line	int
=	O
1	int
;	O
grecs_current_locus_point	struct(*(char),int,int)
.	O
col	int
=	O
0	int
;	O
return	O
grecs_parser_fun	*((*(char),int)->(*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`)))))
(	O
name	*(char)
,	O
grecs_trace_flags	int
)	O
;	O
}	O
