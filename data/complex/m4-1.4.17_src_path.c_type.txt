struct	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
{	O
struct	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
*	O
next	*(struct(*(struct(*(struct`),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union`))),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union(struct(*`),*((*`,int,*`)->(void))))))
;	O
const	O
char	O
*	O
dir	*(struct(*(char),bool))
;	O
int	O
len	int
;	O
}	O
;	O
typedef	O
struct	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
;	O
static	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
*	O
dir_list	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
static	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
*	O
dir_list_end	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
static	O
int	O
dir_max_length	int
;	O
void	O
include_init	()->(void)
(	O
void	O
)	O
{	O
dir_list	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
NULL	O
;	O
dir_list_end	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
NULL	O
;	O
dir_max_length	int
=	O
0	int
;	O
}	O
void	O
include_env_init	()->(void)
(	O
void	O
)	O
{	O
char	O
*	O
path	*(char)
;	O
char	O
*	O
path_end	*(char)
;	O
char	O
*	O
env_path	*(char)
;	O
if	O
(	O
no_gnu_extensions	int
)	O
return	O
;	O
env_path	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"M4PATH"	*(char)
)	O
;	O
if	O
(	O
env_path	*(char)
==	O
NULL	O
)	O
return	O
;	O
env_path	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
env_path	*(char)
)	O
;	O
path	*(char)
=	O
env_path	*(char)
;	O
do	O
{	O
path_end	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
path	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
path_end	*(char)
)	O
*	O
path_end	*(char)
=	O
'\0'	O
;	O
add_include_directory	(*(char))->(void)
(	O
path	*(char)
)	O
;	O
path	*(char)
=	O
path_end	*(char)
+	O
1	int
;	O
}	O
while	O
(	O
path_end	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
env_path	*(char)
)	O
;	O
}	O
void	O
add_include_directory	(*(char))->(void)
(	O
const	O
char	O
*	O
dir	*(struct(*(char),bool))
)	O
{	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
*	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
if	O
(	O
no_gnu_extensions	int
)	O
return	O
;	O
if	O
(	O
*	O
dir	*(struct(*(char),bool))
==	O
'\0'	O
)	O
dir	*(struct(*(char),bool))
=	O
"."	*(char)
;	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
(	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
)	O
)	O
;	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union`))),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union(struct(*`),*((*`,int,*`)->(void))))))
=	O
NULL	O
;	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
len	int
=	O
strlen	(*(char))->(long)
(	O
dir	*(struct(*(char),bool))
)	O
;	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
dir	*(struct(*(char),bool))
=	O
xstrdup	(*(char))->(*(char))
(	O
dir	*(struct(*(char),bool))
)	O
;	O
if	O
(	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
len	int
>	O
dir_max_length	int
)	O
dir_max_length	int
=	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
len	int
;	O
if	O
(	O
dir_list_end	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
==	O
NULL	O
)	O
dir_list	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
else	O
dir_list_end	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union`))),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union(struct(*`),*((*`,int,*`)->(void))))))
=	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
dir_list_end	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
}	O
static	O
FILE	struct
*	O
m4_fopen	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
int	O
fd	int
=	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
S_ISDIR	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
errno	O
=	O
EISDIR	int
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
set_cloexec_flag	(int,bool)->(int)
(	O
fd	int
,	O
true	int
)	O
!=	O
0	int
)	O
M4ERROR	O
(	O
(	O
warning_status	int
,	O
errno	O
,	O
"Warning: cannot protect input file across forks"	*(char)
)	O
)	O
;	O
}	O
return	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
FILE	struct
*	O
m4_path_search	(*(char),*(*(char)))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
const	O
char	O
*	O
file	*(char)
,	O
char	O
*	O
*	O
result	*(*(char))
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
includes	struct(*(struct(*(struct(*(struct`),*(char),int)),*(char),int)),*(char),int)
*	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
char	O
*	O
name	*(char)
;	O
int	O
e	int
;	O
if	O
(	O
result	*(*(char))
)	O
*	O
result	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
!	O
*	O
file	*(char)
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
NULL	O
;	O
}	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
m4_fopen	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
if	O
(	O
result	*(*(char))
)	O
*	O
result	*(*(char))
=	O
xstrdup	(*(char))->(*(char))
(	O
file	*(char)
)	O
;	O
return	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
if	O
(	O
IS_ABSOLUTE_FILE_NAME	O
(	O
file	*(char)
)	O
||	O
no_gnu_extensions	int
)	O
return	O
NULL	O
;	O
e	int
=	O
errno	O
;	O
for	O
(	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
dir_list	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
;	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
!=	O
NULL	O
;	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
=	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
next	*(struct(*(struct(*(struct`),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union`))),bool,bool,bool,bool,bool,int,*(char),struct(enum(int,int,int),union(struct(*`),*((*`,int,*`)->(void))))))
)	O
{	O
name	*(char)
=	O
file_name_concat	(*(char),*(char),*(*(char)))->(*(char))
(	O
incl	*(struct(*(struct(*(struct`),*(char),int)),*(char),int))
->	O
dir	*(struct(*(char),bool))
,	O
file	*(char)
,	O
NULL	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
m4_fopen	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
name	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
if	O
(	O
debug_level	int
&	O
DEBUG_TRACE_PATH	int
)	O
DEBUG_MESSAGE2	O
(	O
"path search for `%s' found `%s'"	*(char)
,	O
file	*(char)
,	O
name	*(char)
)	O
;	O
if	O
(	O
result	*(*(char))
)	O
*	O
result	*(*(char))
=	O
name	*(char)
;	O
else	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
errno	O
=	O
e	int
;	O
return	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
