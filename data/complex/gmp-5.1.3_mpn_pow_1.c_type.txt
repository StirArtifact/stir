mp_size_t	long
mpn_pow_1	O
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_srcptr	*(long)
bp	*(long)
,	O
mp_size_t	long
bn	long
,	O
mp_limb_t	long
exp	int
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_limb_t	long
x	long
;	O
int	O
cnt	int
,	O
i	long
;	O
mp_size_t	long
rn	long
;	O
int	O
par	int
;	O
ASSERT	O
(	O
bn	long
>=	O
1	int
)	O
;	O
if	O
(	O
exp	int
<=	O
1	int
)	O
{	O
if	O
(	O
exp	int
==	O
0	int
)	O
{	O
rp	*(long)
[	O
0	int
]	O
=	O
1	int
;	O
return	O
1	int
;	O
}	O
else	O
{	O
MPN_COPY	O
(	O
rp	*(long)
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
return	O
bn	long
;	O
}	O
}	O
par	int
=	O
0	int
;	O
cnt	int
=	O
GMP_LIMB_BITS	int
;	O
for	O
(	O
x	long
=	O
exp	int
;	O
x	long
!=	O
0	int
;	O
x	long
>>=	O
1	int
)	O
{	O
par	int
^=	O
x	long
&	O
1	int
;	O
cnt	int
--	O
;	O
}	O
exp	int
<<=	O
cnt	int
;	O
if	O
(	O
bn	long
==	O
1	int
)	O
{	O
mp_limb_t	long
bl	long
=	O
bp	*(long)
[	O
0	int
]	O
;	O
if	O
(	O
(	O
cnt	int
&	O
1	int
)	O
!=	O
0	int
)	O
MP_PTR_SWAP	O
(	O
rp	*(long)
,	O
tp	*(long)
)	O
;	O
mpn_sqr	O
(	O
rp	*(long)
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
rn	long
=	O
2	int
*	O
bn	long
;	O
rn	long
-=	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
for	O
(	O
i	long
=	O
GMP_LIMB_BITS	int
-	O
cnt	int
-	O
1	int
;	O
;	O
)	O
{	O
exp	int
<<=	O
1	int
;	O
if	O
(	O
(	O
exp	int
&	O
GMP_LIMB_HIGHBIT	O
)	O
!=	O
0	int
)	O
{	O
rp	*(long)
[	O
rn	long
]	O
=	O
mpn_mul_1	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
rn	long
,	O
bl	long
)	O
;	O
rn	long
+=	O
rp	*(long)
[	O
rn	long
]	O
!=	O
0	int
;	O
}	O
if	O
(	O
--	O
i	long
==	O
0	int
)	O
break	O
;	O
mpn_sqr	O
(	O
tp	*(long)
,	O
rp	*(long)
,	O
rn	long
)	O
;	O
rn	long
=	O
2	int
*	O
rn	long
;	O
rn	long
-=	O
tp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
MP_PTR_SWAP	O
(	O
rp	*(long)
,	O
tp	*(long)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
(	O
(	O
par	int
^	O
cnt	int
)	O
&	O
1	int
)	O
==	O
0	int
)	O
MP_PTR_SWAP	O
(	O
rp	*(long)
,	O
tp	*(long)
)	O
;	O
mpn_sqr	O
(	O
rp	*(long)
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
rn	long
=	O
2	int
*	O
bn	long
;	O
rn	long
-=	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
for	O
(	O
i	long
=	O
GMP_LIMB_BITS	int
-	O
cnt	int
-	O
1	int
;	O
;	O
)	O
{	O
exp	int
<<=	O
1	int
;	O
if	O
(	O
(	O
exp	int
&	O
GMP_LIMB_HIGHBIT	O
)	O
!=	O
0	int
)	O
{	O
rn	long
=	O
rn	long
+	O
bn	long
-	O
(	O
mpn_mul	O
(	O
tp	*(long)
,	O
rp	*(long)
,	O
rn	long
,	O
bp	*(long)
,	O
bn	long
)	O
==	O
0	int
)	O
;	O
MP_PTR_SWAP	O
(	O
rp	*(long)
,	O
tp	*(long)
)	O
;	O
}	O
if	O
(	O
--	O
i	long
==	O
0	int
)	O
break	O
;	O
mpn_sqr	O
(	O
tp	*(long)
,	O
rp	*(long)
,	O
rn	long
)	O
;	O
rn	long
=	O
2	int
*	O
rn	long
;	O
rn	long
-=	O
tp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
MP_PTR_SWAP	O
(	O
rp	*(long)
,	O
tp	*(long)
)	O
;	O
}	O
}	O
return	O
rn	long
;	O
}	O
