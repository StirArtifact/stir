object	O
IisSymbol	(int)->(int)
(	O
object	O
f	int
)	O
{	O
if	O
(	O
type_of	()->(int)
(	O
f	int
)	O
!=	O
t_symbol	O
)	O
{	O
FEerror	()->(int)
(	O
"Not a symbol ~s"	*(char)
,	O
1	int
,	O
f	int
)	O
;	O
}	O
return	O
f	int
;	O
}	O
object	O
IisArray	(int)->(int)
(	O
object	O
f	int
)	O
{	O
if	O
(	O
TS_MEMBER	()->(int)
(	O
type_of	()->(int)
(	O
f	int
)	O
,	O
TS	()->(int)
(	O
t_array	O
)	O
|	O
TS	()->(int)
(	O
t_vector	O
)	O
|	O
TS	()->(int)
(	O
t_bitvector	O
)	O
|	O
TS	()->(int)
(	O
t_string	O
)	O
)	O
)	O
return	O
f	int
;	O
else	O
{	O
FEwrong_type_argument	()->(int)
(	O
sLarray	O
,	O
f	int
)	O
;	O
return	O
f	int
;	O
}	O
}	O
object	O
Iis_fixnum	(int)->(int)
(	O
object	O
f	int
)	O
{	O
if	O
(	O
type_of	()->(int)
(	O
f	int
)	O
==	O
t_fixnum	O
)	O
{	O
return	O
f	int
;	O
}	O
else	O
{	O
FEerror	()->(int)
(	O
"Not a fixnum ~s"	*(char)
,	O
1	int
,	O
f	int
)	O
;	O
return	O
f	int
;	O
}	O
}	O
void	O
Wrong_type_error	(*(char),int)->(void)
(	O
char	O
*	O
str	*(char)
,	O
int	O
n	int
,	O
...	O
)	O
{	O
FEerror	()->(int)
(	O
"Wrong type error"	*(char)
,	O
0	int
)	O
;	O
}	O
object	O
Ifuncall_n	(int,int)->(int)
(	O
object	O
fun	int
,	O
int	O
n	int
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
object	O
*	O
new	O
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
n	int
)	O
;	O
{	O
COERCE_VA_LIST	()->(int)
(	O
new	O
,	O
ap	array(struct(int,int,*(void),*(void)))
,	O
n	int
)	O
;	O
}	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
IapplyVector	()->(int)
(	O
fun	int
,	O
n	int
,	O
new	O
)	O
;	O
}	O
object	O
Icheck_one_type	(int,enum)->(int)
(	O
object	O
x	int
,	O
enum	O
type	int
t	enum
)	O
{	O
if	O
(	O
x	int
->	O
d	O
.	O
t	enum
!=	O
t	enum
)	O
{	O
return	O
CEerror	()->(int)
(	O
"Expected a ~a "	*(char)
,	O
"Supply right type"	*(char)
,	O
1	int
,	O
type_name	()->(int)
(	O
t	enum
)	O
,	O
Cnil	O
,	O
Cnil	O
,	O
Cnil	O
)	O
;	O
}	O
return	O
x	int
;	O
}	O
object	O
fSincorrect_type	(int,int)->(int)
(	O
object	O
val	int
,	O
object	O
type	int
)	O
{	O
return	O
CEerror	()->(int)
(	O
"Got ~a,Expected a ~a"	*(char)
,	O
"Supply a new one"	*(char)
,	O
1	int
,	O
val	int
,	O
type	int
,	O
Cnil	O
,	O
Cnil	O
)	O
;	O
}	O
object	O
Ivs_values	()->(int)
(	O
void	O
)	O
{	O
fixnum	O
n	int
=	O
fcall	O
.	O
nvalues	O
=	O
vs_top	O
-	O
vs_base	O
;	O
object	O
*	O
b	O
=	O
vs_base	O
,	O
*	O
p	O
=	O
&	O
fcall	O
.	O
values	O
[	O
0	int
]	O
;	O
object	O
res	O
=	O
(	O
n	int
>	O
0	int
?	O
b	O
[	O
0	int
]	O
:	O
sLnil	O
)	O
;	O
if	O
(	O
n	int
>=	O
(	O
fixnum	O
)	O
(	O
sizeof	O
(	O
fcall	O
.	O
values	O
)	O
/	O
sizeof	O
(	O
*	O
fcall	O
.	O
values	O
)	O
)	O
)	O
FEerror	()->(int)
(	O
"Too many function call values"	*(char)
,	O
0	int
)	O
;	O
while	O
(	O
--	O
n	int
>	O
0	int
)	O
{	O
*	O
++	O
p	O
=	O
*	O
++	O
b	O
;	O
}	O
return	O
res	O
;	O
}	O
char	O
*	O
lisp_copy_to_null_terminated	(int,*(char),int)->(*(char))
(	O
object	O
string	int
,	O
char	O
*	O
buf	*(char)
,	O
int	O
n	int
)	O
{	O
if	O
(	O
type_of	()->(int)
(	O
string	int
)	O
!=	O
t_string	O
&&	O
type_of	()->(int)
(	O
string	int
)	O
!=	O
t_symbol	O
)	O
FEerror	()->(int)
(	O
"Need to give symbol or string"	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
string	int
->	O
st	O
.	O
st_fillp	O
+	O
1	int
>	O
n	int
)	O
{	O
buf	*(char)
=	O
(	O
void	O
*	O
)	O
malloc	(long)->(*(void))
(	O
string	int
->	O
st	O
.	O
st_fillp	O
+	O
1	int
)	O
;	O
}	O
bcopy	(*(void),*(void),long)->(void)
(	O
string	int
->	O
st	O
.	O
st_self	O
,	O
buf	*(char)
,	O
string	int
->	O
st	O
.	O
st_fillp	O
)	O
;	O
buf	*(char)
[	O
string	int
->	O
st	O
.	O
st_fillp	O
]	O
=	O
0	int
;	O
return	O
buf	*(char)
;	O
}	O
