static	O
void	O
obstack_grow_escaped	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),int)->(void)
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
char	O
*	O
str	*(char)
,	O
int	O
len	int
)	O
{	O
for	O
(	O
;	O
len	int
>	O
0	int
;	O
len	int
--	O
,	O
str	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
str	*(char)
)	O
{	O
case	O
'"'	O
:	O
case	O
'\''	O
:	O
case	O
'\\'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\\'	O
)	O
;	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
*	O
str	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
isprint	(int)->(int)
(	O
*	O
str	*(char)
)	O
)	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
*	O
str	*(char)
)	O
;	O
else	O
{	O
char	O
buf	*(char)
[	O
4	int
]	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
"%03o"	*(char)
,	O
*	O
(	O
u_char	char
*	O
)	O
str	*(char)
)	O
;	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\\'	O
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
buf	*(char)
,	O
3	int
)	O
;	O
}	O
}	O
}	O
}	O
static	O
void	O
attr_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),*(char),int)->(void)
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pairlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_dict_attr_t	struct
*	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
,	O
char	O
*	O
defval	*(char)
,	O
int	O
escape	int
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
int	O
len	int
;	O
char	O
tmp	array(char)
[	O
GRAD_STRING_LENGTH	int
+	O
1	int
]	O
;	O
char	O
*	O
str	*(char)
;	O
if	O
(	O
!	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
)	O
{	O
grad_log_req	(int,*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
"attribute not found"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
pairlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
value	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
defval	*(char)
)	O
{	O
if	O
(	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
type	int
==	O
GRAD_TYPE_STRING	int
)	O
defval	*(char)
=	O
"-"	*(char)
;	O
else	O
defval	*(char)
=	O
"-0"	*(char)
;	O
}	O
switch	O
(	O
*	O
defval	*(char)
++	O
)	O
{	O
case	O
'-'	O
:	O
len	int
=	O
strlen	(*(char))->(long)
(	O
defval	*(char)
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
defval	*(char)
,	O
len	int
)	O
;	O
break	O
;	O
case	O
'+'	O
:	O
break	O
;	O
case	O
'?'	O
:	O
if	O
(	O
*	O
defval	*(char)
==	O
0	int
)	O
defval	*(char)
=	O
"Attribute is not present"	*(char)
;	O
grad_log_req	(int,*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
"%s: %s"	*(char)
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
name	*(char)
,	O
defval	*(char)
)	O
;	O
break	O
;	O
case	O
'='	O
:	O
if	O
(	O
pairlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_locus_t	struct(*(char),long)
loc	struct(*(char),long)
;	O
loc	struct(*(char),long)
.	O
file	*(char)
=	O
__FILE__	O
;	O
loc	struct(*(char),long)
.	O
line	long
=	O
__LINE__	O
;	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_create_pair	(*(struct(*(char),long)),*(char),enum(int,int,int,int,int,int,int),*(char))->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
&	O
loc	struct(*(char),long)
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
name	*(char)
,	O
grad_operator_equal	int
,	O
defval	*(char)
)	O
;	O
if	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
grad_avl_add_list	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
&	O
pairlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
defval	*(char)
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
"invalid : substitution: %s"	*(char)
,	O
defval	*(char)
)	O
;	O
else	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
"null : substitution"	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
!	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
return	O
;	O
}	O
else	O
if	O
(	O
defval	*(char)
&&	O
*	O
defval	*(char)
==	O
'+'	O
)	O
{	O
defval	*(char)
++	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
defval	*(char)
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
defval	*(char)
,	O
len	int
)	O
;	O
return	O
;	O
}	O
tmp	array(char)
[	O
GRAD_STRING_LENGTH	int
-	O
1	int
]	O
=	O
0	int
;	O
switch	O
(	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
if	O
(	O
(	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
prop	int
&	O
GRAD_AP_ENCRYPT	O
)	O
&&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
req_decrypt_password	(*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
tmp	array(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
str	*(char)
=	O
tmp	array(char)
;	O
}	O
else	O
str	*(char)
=	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
;	O
if	O
(	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
prop	int
&	O
GRAD_AP_BINARY_STRING	int
)	O
len	int
=	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strlength	O
;	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
escape	int
)	O
obstack_grow_escaped	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
str	*(char)
,	O
len	int
)	O
;	O
else	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
str	*(char)
,	O
len	int
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
{	O
grad_dict_value_t	struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int)
*	O
dval	*(struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int))
;	O
if	O
(	O
escape	int
&&	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
prop	int
&	O
GRAD_AP_TRANSLATE	int
)	O
)	O
dval	*(struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int))
=	O
grad_value_lookup	(int,*(char))->(*(struct(*(char),*(struct(*`,int,int,int,int,*`)),int)))
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
,	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
name	*(char)
)	O
;	O
else	O
dval	*(struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int))
=	O
NULL	O
;	O
if	O
(	O
!	O
dval	*(struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int))
)	O
{	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	array(char)
,	O
sizeof	O
(	O
tmp	array(char)
)	O
,	O
"%lu"	*(char)
,	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
tmp	array(char)
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
tmp	array(char)
,	O
len	int
)	O
;	O
}	O
else	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
dval	*(struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int))
->	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
dval	*(struct(*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),int))
->	O
name	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
case	O
GRAD_TYPE_IPADDR	int
:	O
grad_ip_iptostr	(int,*(char))->(*(char))
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
,	O
tmp	array(char)
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
tmp	array(char)
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
tmp	array(char)
,	O
len	int
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_DATE	int
:	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	array(char)
,	O
sizeof	O
(	O
tmp	array(char)
)	O
,	O
"%ld"	*(char)
,	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
tmp	array(char)
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
tmp	array(char)
,	O
len	int
)	O
;	O
break	O
;	O
default	O
:	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"INTERNAL ERROR (%s:%d): attribute %d has bad type (%d)"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
value	*(char)
,	O
attr	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
type	int
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
curtime_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(void)
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
int	O
gmt	int
)	O
{	O
time_t	long
curtime	long
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
tms	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
char	O
tbuf	array(char)
[	O
GRAD_STRING_LENGTH	int
]	O
;	O
int	O
len	int
;	O
curtime	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
if	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
DA_ACCT_DELAY_TIME	int
)	O
)	O
curtime	long
-=	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
;	O
if	O
(	O
gmt	int
)	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
gmtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
curtime	long
)	O
;	O
else	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
localtime_r	(*(long),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
curtime	long
,	O
&	O
tms	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
len	int
=	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
tbuf	array(char)
,	O
GRAD_STRING_LENGTH	int
,	O
"%Y-%m-%d %H:%M:%S"	*(char)
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
obstack_grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
tbuf	array(char)
,	O
len	int
)	O
;	O
}	O
static	O
void	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pairlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
int	O
attr_no	int
,	O
char	O
*	O
defval	*(char)
,	O
int	O
escape_str	int
)	O
{	O
attr_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
pairlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
grad_attr_number_to_dict	(int)->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
attr_no	int
)	O
,	O
defval	*(char)
,	O
escape_str	int
)	O
;	O
}	O
static	O
grad_dict_attr_t	struct
*	O
parse_dict_attr	(*(char),*(*(char)),*(*(char)))->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
char	O
*	O
p	*(struct)
,	O
char	O
*	O
*	O
endp	*(*(char))
,	O
char	O
*	O
*	O
defval	*(char)
)	O
{	O
char	O
namebuf	array(char)
[	O
GRAD_MAX_DICTNAME	int
]	O
;	O
*	O
defval	*(char)
=	O
NULL	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
p	*(struct)
)	O
)	O
{	O
return	O
grad_attr_number_to_dict	(int)->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
p	*(struct)
,	O
endp	*(*(char))
,	O
10	int
)	O
)	O
;	O
}	O
if	O
(	O
*	O
p	*(struct)
==	O
'{'	O
)	O
{	O
int	O
len	int
,	O
off	long
;	O
p	*(struct)
++	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
p	*(struct)
)	O
;	O
off	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
p	*(struct)
,	O
":}"	*(char)
)	O
;	O
if	O
(	O
off	long
==	O
len	int
||	O
off	long
>=	O
sizeof	O
namebuf	array(char)
)	O
return	O
NULL	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
namebuf	array(char)
,	O
p	*(struct)
,	O
off	long
)	O
;	O
namebuf	array(char)
[	O
off	long
]	O
=	O
0	int
;	O
p	*(struct)
+=	O
off	long
;	O
if	O
(	O
*	O
p	*(struct)
==	O
':'	O
)	O
{	O
int	O
size	int
;	O
char	O
*	O
start	*(struct(long,long))
=	O
p	*(struct)
+	O
1	int
;	O
for	O
(	O
;	O
*	O
p	*(struct)
&&	O
*	O
p	*(struct)
!=	O
'}'	O
;	O
p	*(struct)
++	O
)	O
{	O
if	O
(	O
*	O
p	*(struct)
==	O
'\\'	O
&&	O
*	O
++	O
p	*(struct)
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
*	O
p	*(struct)
==	O
0	int
)	O
return	O
NULL	O
;	O
size	int
=	O
p	*(struct)
-	O
start	*(struct(long,long))
+	O
1	int
;	O
*	O
defval	*(char)
=	O
grad_emalloc	(long)->(*(void))
(	O
size	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
defval	*(char)
,	O
start	*(struct(long,long))
,	O
size	int
-	O
1	int
)	O
;	O
(	O
*	O
defval	*(char)
)	O
[	O
size	int
-	O
1	int
]	O
=	O
0	int
;	O
}	O
*	O
endp	*(*(char))
=	O
p	*(struct)
+	O
1	int
;	O
return	O
grad_attr_name_to_dict	(*(char))->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
namebuf	array(char)
)	O
;	O
}	O
*	O
endp	*(*(char))
=	O
p	*(struct)
;	O
return	O
NULL	O
;	O
}	O
void	O
radius_xlate0	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
char	O
*	O
str	*(char)
,	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
int	O
c	*(void)
;	O
char	O
*	O
p	*(struct)
;	O
grad_dict_attr_t	struct
*	O
da	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
;	O
char	O
*	O
defval	*(char)
;	O
int	O
escape	int
;	O
for	O
(	O
p	*(struct)
=	O
str	*(char)
;	O
*	O
p	*(struct)
;	O
)	O
{	O
switch	O
(	O
c	*(void)
=	O
*	O
p	*(struct)
++	O
)	O
{	O
default	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
c	*(void)
)	O
;	O
break	O
;	O
case	O
0	int
:	O
goto	O
end	*(long)
;	O
case	O
'\n'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\r'	O
)	O
;	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
c	*(void)
)	O
;	O
break	O
;	O
case	O
'%'	O
:	O
if	O
(	O
!	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
c	*(void)
)	O
;	O
break	O
;	O
}	O
escape	int
=	O
(	O
p	*(struct)
>	O
str	*(char)
+	O
1	int
&&	O
(	O
p	*(struct)
[	O
-	O
2	int
]	O
==	O
'\''	O
||	O
p	*(struct)
[	O
-	O
2	int
]	O
==	O
'"'	O
)	O
)	O
;	O
switch	O
(	O
c	*(void)
=	O
*	O
p	*(struct)
++	O
)	O
{	O
case	O
'%'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
c	*(void)
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
curtime_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'G'	O
:	O
curtime_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
NULL	O
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FRAMED_IP_ADDRESS	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_NAS_IP_ADDRESS	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
NULL	O
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FRAMED_MTU	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_NAS_PORT_ID	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'u'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_USER_NAME	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
NULL	O
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_CALLBACK_NUMBER	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_CALLING_STATION_ID	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
NULL	O
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_FRAMED_PROTOCOL	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
attrno_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int,*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_CONNECT_INFO	int
,	O
NULL	O
,	O
escape	int
)	O
;	O
break	O
;	O
case	O
'C'	O
:	O
if	O
(	O
*	O
p	*(struct)
==	O
'\\'	O
)	O
{	O
escape	int
=	O
1	int
;	O
p	*(struct)
++	O
;	O
}	O
da	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
=	O
parse_dict_attr	(*(char),*(*(char)),*(*(char)))->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
p	*(struct)
,	O
&	O
p	*(struct)
,	O
&	O
defval	*(char)
)	O
;	O
attr_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
avlist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
da	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
,	O
defval	*(char)
,	O
escape	int
)	O
;	O
grad_free	(*(void))->(void)
(	O
defval	*(char)
)	O
;	O
break	O
;	O
case	O
'R'	O
:	O
if	O
(	O
*	O
p	*(struct)
==	O
'\\'	O
)	O
{	O
escape	int
=	O
1	int
;	O
p	*(struct)
++	O
;	O
}	O
da	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
=	O
parse_dict_attr	(*(char),*(*(char)),*(*(char)))->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
p	*(struct)
,	O
&	O
p	*(struct)
,	O
&	O
defval	*(char)
)	O
;	O
attr_to_str	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))),*(char),int)->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
NULL	O
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
da	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
,	O
defval	*(char)
,	O
escape	int
)	O
;	O
break	O
;	O
default	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'%'	O
)	O
;	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
c	*(void)
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'\\'	O
:	O
switch	O
(	O
c	*(void)
=	O
*	O
p	*(struct)
++	O
)	O
{	O
case	O
'a'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\a'	O
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\b'	O
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\f'	O
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\033'	O
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\n'	O
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\r'	O
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\t'	O
)	O
;	O
break	O
;	O
case	O
0	int
:	O
goto	O
end	*(long)
;	O
default	O
:	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\\'	O
)	O
;	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
c	*(void)
)	O
;	O
break	O
;	O
}	O
}	O
}	O
end	*(long)
:	O
return	O
;	O
}	O
char	O
*	O
radius_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(char))
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
char	O
*	O
str	*(char)
,	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
radius_xlate0	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
str	*(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
obstack_1grow	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
0	int
)	O
;	O
return	O
obstack_finish	O
(	O
obp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
)	O
;	O
}	O
char	O
*	O
util_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(*(char))
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
char	O
*	O
fmt	*(char)
,	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
char	O
*	O
str	*(char)
;	O
if	O
(	O
fmt	*(char)
[	O
0	int
]	O
==	O
'='	O
)	O
{	O
grad_value_t	struct(enum(int,int,int),union(int,struct(long,*(char))))
val	array(int)
;	O
if	O
(	O
rewrite_interpret	(*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(int)
(	O
fmt	*(char)
+	O
1	int
,	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
val	array(int)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
val	array(int)
.	O
type	int
!=	O
String	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
"%s: %s"	*(char)
,	O
fmt	*(char)
+	O
1	int
,	O
_	O
(	O
"wrong return type"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
obstack_grow	O
(	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
val	array(int)
.	O
datum	union(int,struct(long,*(char)))
.	O
sval	struct(long,*(char))
.	O
data	*(void)
,	O
val	array(int)
.	O
datum	union(int,struct(long,*(char)))
.	O
sval	struct(long,*(char))
.	O
size	int
+	O
1	int
)	O
;	O
grad_value_free	(*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(void)
(	O
&	O
val	array(int)
)	O
;	O
str	*(char)
=	O
obstack_finish	O
(	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
)	O
;	O
}	O
else	O
{	O
str	*(char)
=	O
radius_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(char))
(	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
fmt	*(char)
,	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
;	O
}	O
return	O
str	*(char)
;	O
}	O
static	O
void	O
pair_set_value	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(void)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
,	O
grad_value_t	struct(enum(int,int,int),union(int,struct(long,*(char))))
*	O
val	array(int)
)	O
{	O
char	O
buf	*(char)
[	O
64	int
]	O
;	O
char	O
*	O
endp	*(*(char))
;	O
switch	O
(	O
val	array(int)
->	O
type	int
)	O
{	O
case	O
Integer	int
:	O
switch	O
(	O
p	*(struct)
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
sizeof	O
buf	*(char)
,	O
"%lu"	*(char)
,	O
val	array(int)
->	O
datum	union(int,struct(long,*(char)))
.	O
ival	int
)	O
;	O
grad_string_replace	(*(*(char)),*(char))->(*(char))
(	O
&	O
p	*(struct)
->	O
avp_strvalue	O
,	O
buf	*(char)
)	O
;	O
p	*(struct)
->	O
avp_strlength	O
=	O
strlen	(*(char))->(long)
(	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
case	O
GRAD_TYPE_DATE	int
:	O
p	*(struct)
->	O
avp_lvalue	O
=	O
val	array(int)
->	O
datum	union(int,struct(long,*(char)))
.	O
ival	int
;	O
}	O
break	O
;	O
case	O
String	int
:	O
switch	O
(	O
p	*(struct)
->	O
type	int
)	O
{	O
case	O
GRAD_TYPE_STRING	int
:	O
grad_string_replace	(*(*(char)),*(char))->(*(char))
(	O
&	O
p	*(struct)
->	O
avp_strvalue	O
,	O
val	array(int)
->	O
datum	union(int,struct(long,*(char)))
.	O
sval	struct(long,*(char))
.	O
data	*(void)
)	O
;	O
p	*(struct)
->	O
avp_strlength	O
=	O
strlen	(*(char))->(long)
(	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
break	O
;	O
case	O
GRAD_TYPE_INTEGER	int
:	O
case	O
GRAD_TYPE_IPADDR	int
:	O
case	O
GRAD_TYPE_DATE	int
:	O
p	*(struct)
->	O
avp_lvalue	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
val	array(int)
->	O
datum	union(int,struct(long,*(char)))
.	O
sval	struct(long,*(char))
.	O
data	*(void)
,	O
&	O
endp	*(*(char))
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endp	*(*(char))
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"cannot convert \"%s\" to integer"	*(char)
)	O
,	O
val	array(int)
->	O
datum	union(int,struct(long,*(char)))
.	O
sval	struct(long,*(char))
)	O
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
grad_insist_fail	O
(	O
"bad datatype"	*(char)
)	O
;	O
}	O
p	*(struct)
->	O
eval_type	enum(int,int,int)
=	O
grad_eval_const	int
;	O
}	O
int	O
radius_eval_avp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
int	O
allow_xlate	int
)	O
{	O
grad_value_t	struct(enum(int,int,int),union(int,struct(long,*(char))))
val	array(int)
;	O
switch	O
(	O
p	*(struct)
->	O
eval_type	enum(int,int,int)
)	O
{	O
case	O
grad_eval_const	int
:	O
if	O
(	O
allow_xlate	int
&&	O
strchr	(*(char),int)->(*(char))
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
'%'	O
)	O
)	O
{	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
s	*(*(char))
;	O
char	O
*	O
ptr	*(*(void))
;	O
obstack_init	O
(	O
&	O
s	*(*(char))
)	O
;	O
ptr	*(*(void))
=	O
radius_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(*(char))
(	O
&	O
s	*(*(char))
,	O
p	*(struct)
->	O
avp_strvalue	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ptr	*(*(void))
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
)	O
{	O
grad_string_replace	(*(*(char)),*(char))->(*(char))
(	O
&	O
p	*(struct)
->	O
avp_strvalue	O
,	O
ptr	*(*(void))
)	O
;	O
p	*(struct)
->	O
avp_strlength	O
=	O
strlen	(*(char))->(long)
(	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
}	O
obstack_free	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void))->(void)
(	O
&	O
s	*(*(char))
,	O
NULL	O
)	O
;	O
}	O
break	O
;	O
case	O
grad_eval_interpret	int
:	O
if	O
(	O
rewrite_interpret	(*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
val	array(int)
)	O
)	O
return	O
1	int
;	O
pair_set_value	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(void)
(	O
p	*(struct)
,	O
&	O
val	array(int)
)	O
;	O
grad_value_free	(*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(void)
(	O
&	O
val	array(int)
)	O
;	O
break	O
;	O
case	O
grad_eval_compiled	int
:	O
if	O
(	O
rewrite_eval	(*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
&	O
val	array(int)
)	O
)	O
return	O
1	int
;	O
pair_set_value	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(void)
(	O
p	*(struct)
,	O
&	O
val	array(int)
)	O
;	O
grad_value_free	(*(struct(enum(int,int,int),union(int,struct(long,*`)))))->(void)
(	O
&	O
val	array(int)
)	O
;	O
break	O
;	O
default	O
:	O
grad_insist_fail	O
(	O
"bad eval_type"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
p	*(struct)
->	O
eval_type	enum(int,int,int)
=	O
grad_eval_const	int
;	O
return	O
0	int
;	O
}	O
int	O
radius_eval_avl	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
for	O
(	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
status	int
|=	O
radius_eval_avp	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
p	*(struct)
,	O
NULL	O
,	O
0	int
)	O
;	O
return	O
status	int
;	O
}	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radiusd_request_alloc	(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))
(	O
grad_request_t	struct(int,short,char,char,array(char),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
ret	*(struct(*(struct(int,short,char,char,array(char),*(char),*(struct`))),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),*(struct),*(struct(array(char),*(struct`),*(struct`))),int,int,int,int,*(char),array(char),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ret	*(struct(*(struct(int,short,char,char,array(char),*(char),*(struct`))),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),*(struct),*(struct(array(char),*(struct`),*(struct`))),int,int,int,int,*(char),array(char),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
)	O
;	O
ret	*(struct(*(struct(int,short,char,char,array(char),*(char),*(struct`))),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),*(struct),*(struct(array(char),*(struct`),*(struct`))),int,int,int,int,*(char),array(char),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
;	O
return	O
ret	*(struct(*(struct(int,short,char,char,array(char),*(char),*(struct`))),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),*(struct),*(struct(array(char),*(struct`),*(struct`))),int,int,int,int,*(char),array(char),int,*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
;	O
}	O
void	O
radiusd_request_free	(*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(void)
(	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
locus_list	*(struct)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
grad_free	(*(void))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
remote_user	*(char)
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_free	(*(void))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
reply_msg	*(char)
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
server_reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_request_free	(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
grad_free	(*(void))->(void)
(	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
