static	O
int	O
laguerre_large_n	(int,double,double,*(struct(double,double)))->(int)
(	O
const	O
int	O
n	int
,	O
const	O
double	O
alpha	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
a	double
=	O
-	O
n	int
;	O
const	O
double	O
b	double
=	O
alpha	double
+	O
1.0	int
;	O
const	O
double	O
eta	double
=	O
2.0	int
*	O
b	double
-	O
4.0	int
*	O
a	double
;	O
const	O
double	O
cos2th	double
=	O
x	double
/	O
eta	double
;	O
const	O
double	O
sin2th	double
=	O
1.0	int
-	O
cos2th	double
;	O
const	O
double	O
eps	double
=	O
asin	(double)->(double)
(	O
sqrt	(double)->(double)
(	O
cos2th	double
)	O
)	O
;	O
const	O
double	O
pre_h	double
=	O
0.25	int
*	O
M_PI	int
*	O
M_PI	int
*	O
eta	double
*	O
eta	double
*	O
cos2th	double
*	O
sin2th	double
;	O
gsl_sf_result	struct(double,double)
lg_b	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
lnfact	struct(double,double)
;	O
int	O
stat_lg	int
=	O
gsl_sf_lngamma_e	(double,*(struct(double,double)))->(int)
(	O
b	double
+	O
n	int
,	O
&	O
lg_b	struct(double,double)
)	O
;	O
int	O
stat_lf	int
=	O
gsl_sf_lnfact_e	(int,*(struct(double,double)))->(int)
(	O
n	int
,	O
&	O
lnfact	struct(double,double)
)	O
;	O
double	O
pre_term1	double
=	O
0.5	int
*	O
(	O
1.0	int
-	O
b	double
)	O
*	O
log	(double)->(double)
(	O
0.25	int
*	O
x	double
*	O
eta	double
)	O
;	O
double	O
pre_term2	double
=	O
0.25	int
*	O
log	(double)->(double)
(	O
pre_h	double
)	O
;	O
double	O
lnpre_val	double
=	O
lg_b	struct(double,double)
.	O
val	double
-	O
lnfact	struct(double,double)
.	O
val	double
+	O
0.5	int
*	O
x	double
+	O
pre_term1	double
-	O
pre_term2	double
;	O
double	O
lnpre_err	double
=	O
lg_b	struct(double,double)
.	O
err	double
+	O
lnfact	struct(double,double)
.	O
err	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
pre_term1	double
)	O
+	O
fabs	(double)->(double)
(	O
pre_term2	double
)	O
)	O
;	O
double	O
phi1	double
=	O
0.25	int
*	O
eta	double
*	O
(	O
2	int
*	O
eps	double
+	O
sin	(double)->(double)
(	O
2.0	int
*	O
eps	double
)	O
)	O
;	O
double	O
ser_term1	double
=	O
-	O
sin	(double)->(double)
(	O
phi1	double
)	O
;	O
double	O
A1	double
=	O
(	O
1.0	int
/	O
12.0	int
)	O
*	O
(	O
5.0	int
/	O
(	O
4.0	int
*	O
sin2th	double
)	O
+	O
(	O
3.0	int
*	O
b	double
*	O
b	double
-	O
6.0	int
*	O
b	double
+	O
2.0	int
)	O
*	O
sin2th	double
-	O
1.0	int
)	O
;	O
double	O
ser_term2	double
=	O
-	O
A1	double
*	O
cos	(double)->(double)
(	O
phi1	double
)	O
/	O
(	O
0.25	int
*	O
eta	double
*	O
sin	(double)->(double)
(	O
2.0	int
*	O
eps	double
)	O
)	O
;	O
double	O
ser_val	double
=	O
ser_term1	double
+	O
ser_term2	double
;	O
double	O
ser_err	double
=	O
ser_term2	double
*	O
ser_term2	double
+	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
ser_term1	double
)	O
+	O
fabs	(double)->(double)
(	O
ser_term2	double
)	O
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	(double,double,double,double,*(struct(double,double)))->(int)
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
ser_val	double
,	O
ser_err	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_SQRT_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_e	int
,	O
stat_lf	int
,	O
stat_lg	int
)	O
;	O
}	O
static	O
int	O
laguerre_n_cp	(int,double,double,*(struct(double,double)))->(int)
(	O
const	O
int	O
n	int
,	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
gsl_sf_result	struct(double,double)
lnfact	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
lg1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
lg2	struct(double,double)
;	O
double	O
s1	double
,	O
s2	double
;	O
int	O
stat_f	int
=	O
gsl_sf_lnfact_e	(int,*(struct(double,double)))->(int)
(	O
n	int
,	O
&	O
lnfact	struct(double,double)
)	O
;	O
int	O
stat_g1	int
=	O
gsl_sf_lngamma_sgn_e	(double,*(struct(double,double)),*(double))->(int)
(	O
a	double
+	O
1.0	int
+	O
n	int
,	O
&	O
lg1	struct(double,double)
,	O
&	O
s1	double
)	O
;	O
int	O
stat_g2	int
=	O
gsl_sf_lngamma_sgn_e	(double,*(struct(double,double)),*(double))->(int)
(	O
a	double
+	O
1.0	int
,	O
&	O
lg2	struct(double,double)
,	O
&	O
s2	double
)	O
;	O
double	O
poly_1F1_val	double
=	O
1.0	int
;	O
double	O
poly_1F1_err	double
=	O
0.0	int
;	O
int	O
stat_e	int
;	O
int	O
k	int
;	O
double	O
lnpre_val	double
=	O
(	O
lg1	struct(double,double)
.	O
val	double
-	O
lg2	struct(double,double)
.	O
val	double
)	O
-	O
lnfact	struct(double,double)
.	O
val	double
;	O
double	O
lnpre_err	double
=	O
lg1	struct(double,double)
.	O
err	double
+	O
lg2	struct(double,double)
.	O
err	double
+	O
lnfact	struct(double,double)
.	O
err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
lnpre_val	double
)	O
;	O
for	O
(	O
k	int
=	O
n	int
-	O
1	int
;	O
k	int
>=	O
0	int
;	O
k	int
--	O
)	O
{	O
double	O
t	double
=	O
(	O
-	O
n	int
+	O
k	int
)	O
/	O
(	O
a	double
+	O
1.0	int
+	O
k	int
)	O
*	O
(	O
x	double
/	O
(	O
k	int
+	O
1	int
)	O
)	O
;	O
double	O
r	*(struct(double,double))
=	O
t	double
+	O
1.0	int
/	O
poly_1F1_val	double
;	O
if	O
(	O
r	*(struct(double,double))
>	O
0.9	int
*	O
GSL_DBL_MAX	int
/	O
poly_1F1_val	double
)	O
{	O
INTERNAL_OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
poly_1F1_val	double
=	O
1.0	int
+	O
t	double
*	O
poly_1F1_val	double
;	O
poly_1F1_err	double
+=	O
GSL_DBL_EPSILON	int
+	O
fabs	(double)->(double)
(	O
t	double
)	O
*	O
poly_1F1_err	double
;	O
}	O
}	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	(double,double,double,double,*(struct(double,double)))->(int)
(	O
lnpre_val	double
,	O
lnpre_err	double
,	O
poly_1F1_val	double
,	O
poly_1F1_err	double
,	O
result	*(struct(double,double))
)	O
;	O
return	O
GSL_ERROR_SELECT_4	O
(	O
stat_e	int
,	O
stat_f	int
,	O
stat_g1	int
,	O
stat_g2	int
)	O
;	O
}	O
static	O
int	O
laguerre_n_poly_safe	(int,double,double,*(struct(double,double)))->(int)
(	O
const	O
int	O
n	int
,	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
b	double
=	O
a	double
+	O
1.0	int
;	O
const	O
double	O
mx	double
=	O
-	O
x	double
;	O
const	O
double	O
tc_sgn	double
=	O
(	O
x	double
<	O
0.0	int
?	O
1.0	int
:	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
?	O
-	O
1.0	int
:	O
1.0	int
)	O
)	O
;	O
gsl_sf_result	struct(double,double)
tc	struct(double,double)
;	O
int	O
stat_tc	int
=	O
gsl_sf_taylorcoeff_e	(int,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
fabs	(double)->(double)
(	O
x	double
)	O
,	O
&	O
tc	struct(double,double)
)	O
;	O
if	O
(	O
stat_tc	int
==	O
GSL_SUCCESS	int
)	O
{	O
double	O
term	double
=	O
tc	struct(double,double)
.	O
val	double
*	O
tc_sgn	double
;	O
double	O
sum_val	double
=	O
term	double
;	O
double	O
sum_err	double
=	O
tc	struct(double,double)
.	O
err	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
n	int
-	O
1	int
;	O
k	int
>=	O
0	int
;	O
k	int
--	O
)	O
{	O
term	double
*=	O
(	O
(	O
b	double
+	O
k	int
)	O
/	O
(	O
n	int
-	O
k	int
)	O
)	O
*	O
(	O
k	int
+	O
1.0	int
)	O
/	O
mx	double
;	O
sum_val	double
+=	O
term	double
;	O
sum_err	double
+=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
term	double
)	O
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
sum_val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
sum_err	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
stat_tc	int
==	O
GSL_EOVRFLW	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_tc	int
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
stat_tc	int
;	O
}	O
}	O
int	O
gsl_sf_laguerre_1_e	(double,double,*(struct(double,double)))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
+	O
a	double
-	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	(double)->(double)
(	O
a	double
)	O
+	O
fabs	(double)->(double)
(	O
x	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_laguerre_2_e	(double,double,*(struct(double,double)))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
a	double
==	O
-	O
2.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.5	int
*	O
x	double
*	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
c0	double
=	O
0.5	int
*	O
(	O
2.0	int
+	O
a	double
)	O
*	O
(	O
1.0	int
+	O
a	double
)	O
;	O
double	O
c1	double
=	O
-	O
(	O
2.0	int
+	O
a	double
)	O
;	O
double	O
c2	double
=	O
-	O
0.5	int
/	O
(	O
2.0	int
+	O
a	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c0	double
+	O
c1	double
*	O
x	double
*	O
(	O
1.0	int
+	O
c2	double
*	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
c0	double
)	O
+	O
2.0	int
*	O
fabs	(double)->(double)
(	O
c1	double
*	O
x	double
)	O
*	O
(	O
1.0	int
+	O
2.0	int
*	O
fabs	(double)->(double)
(	O
c2	double
*	O
x	double
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_laguerre_3_e	(double,double,*(struct(double,double)))->(int)
(	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
a	double
==	O
-	O
2.0	int
)	O
{	O
double	O
x2_6	double
=	O
x	double
*	O
x	double
/	O
6.0	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x2_6	double
*	O
(	O
3.0	int
-	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x2_6	double
*	O
(	O
3.0	int
+	O
fabs	(double)->(double)
(	O
x	double
)	O
)	O
*	O
2.0	int
*	O
GSL_DBL_EPSILON	int
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
a	double
==	O
-	O
3.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
x	double
*	O
x	double
/	O
6.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
c0	double
=	O
(	O
3.0	int
+	O
a	double
)	O
*	O
(	O
2.0	int
+	O
a	double
)	O
*	O
(	O
1.0	int
+	O
a	double
)	O
/	O
6.0	int
;	O
double	O
c1	double
=	O
-	O
c0	double
*	O
3.0	int
/	O
(	O
1.0	int
+	O
a	double
)	O
;	O
double	O
c2	double
=	O
-	O
1.0	int
/	O
(	O
2.0	int
+	O
a	double
)	O
;	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
(	O
3.0	int
*	O
(	O
3.0	int
+	O
a	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
c0	double
+	O
c1	double
*	O
x	double
*	O
(	O
1.0	int
+	O
c2	double
*	O
x	double
*	O
(	O
1.0	int
+	O
c3	double
*	O
x	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
1.0	int
+	O
2.0	int
*	O
fabs	(double)->(double)
(	O
c3	double
*	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
1.0	int
+	O
2.0	int
*	O
fabs	(double)->(double)
(	O
c2	double
*	O
x	double
)	O
*	O
result	*(struct(double,double))
->	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
c0	double
)	O
+	O
2.0	int
*	O
fabs	(double)->(double)
(	O
c1	double
*	O
x	double
)	O
*	O
result	*(struct(double,double))
->	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_laguerre_n_e	(int,double,double,*(struct(double,double)))->(int)
(	O
const	O
int	O
n	int
,	O
const	O
double	O
a	double
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
+	O
a	double
-	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
1.0	int
+	O
fabs	(double)->(double)
(	O
a	double
)	O
+	O
fabs	(double)->(double)
(	O
x	double
)	O
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
double	O
product	double
=	O
a	double
+	O
1.0	int
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<=	O
n	int
;	O
k	int
++	O
)	O
{	O
product	double
*=	O
(	O
a	double
+	O
k	int
)	O
/	O
k	int
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
product	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
(	O
n	int
+	O
1.0	int
)	O
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
product	double
)	O
+	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
0.0	int
&&	O
a	double
>	O
-	O
1.0	int
)	O
{	O
return	O
laguerre_n_cp	(int,double,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
a	double
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
n	int
<	O
5	int
||	O
(	O
x	double
>	O
0.0	int
&&	O
a	double
<	O
-	O
n	int
-	O
1	int
)	O
)	O
{	O
if	O
(	O
laguerre_n_cp	(int,double,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
a	double
,	O
x	double
,	O
result	*(struct(double,double))
)	O
==	O
GSL_SUCCESS	int
)	O
return	O
GSL_SUCCESS	int
;	O
else	O
return	O
laguerre_n_poly_safe	(int,double,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
a	double
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
n	int
>	O
1.0e+07	int
&&	O
x	double
>	O
0.0	int
&&	O
a	double
>	O
-	O
1.0	int
&&	O
x	double
<	O
2.0	int
*	O
(	O
a	double
+	O
1.0	int
)	O
+	O
4.0	int
*	O
n	int
)	O
{	O
return	O
laguerre_large_n	(int,double,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
a	double
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
a	double
>=	O
0.0	int
||	O
(	O
x	double
>	O
0.0	int
&&	O
a	double
<	O
-	O
n	int
-	O
1	int
)	O
)	O
{	O
gsl_sf_result	struct(double,double)
lg2	struct(double,double)
;	O
int	O
stat_lg2	int
=	O
gsl_sf_laguerre_2_e	(double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
x	double
,	O
&	O
lg2	struct(double,double)
)	O
;	O
double	O
Lkm1	double
=	O
1.0	int
+	O
a	double
-	O
x	double
;	O
double	O
Lk	double
=	O
lg2	struct(double,double)
.	O
val	double
;	O
double	O
Lkp1	double
;	O
int	O
k	int
;	O
for	O
(	O
k	int
=	O
2	int
;	O
k	int
<	O
n	int
;	O
k	int
++	O
)	O
{	O
Lkp1	double
=	O
(	O
-	O
(	O
k	int
+	O
a	double
)	O
*	O
Lkm1	double
+	O
(	O
2.0	int
*	O
k	int
+	O
a	double
+	O
1.0	int
-	O
x	double
)	O
*	O
Lk	double
)	O
/	O
(	O
k	int
+	O
1.0	int
)	O
;	O
Lkm1	double
=	O
Lk	double
;	O
Lk	double
=	O
Lkp1	double
;	O
}	O
result	*(struct(double,double))
->	O
val	double
=	O
Lk	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
(	O
fabs	(double)->(double)
(	O
lg2	struct(double,double)
.	O
err	double
/	O
lg2	struct(double,double)
.	O
val	double
)	O
+	O
GSL_DBL_EPSILON	int
)	O
*	O
n	int
*	O
fabs	(double)->(double)
(	O
Lk	double
)	O
;	O
return	O
stat_lg2	int
;	O
}	O
else	O
{	O
return	O
laguerre_n_poly_safe	(int,double,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
a	double
,	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
}	O
double	O
gsl_sf_laguerre_1	(double,double)->(double)
(	O
double	O
a	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_laguerre_1_e	(double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_laguerre_2	(double,double)->(double)
(	O
double	O
a	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_laguerre_2_e	(double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_laguerre_3	(double,double)->(double)
(	O
double	O
a	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_laguerre_3_e	(double,double,*(struct(double,double)))->(int)
(	O
a	double
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_laguerre_n	(int,double,double)->(double)
(	O
int	O
n	int
,	O
double	O
a	double
,	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_laguerre_n_e	(int,double,double,*(struct(double,double)))->(int)
(	O
n	int
,	O
a	double
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
