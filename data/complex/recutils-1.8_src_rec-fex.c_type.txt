struct	O
rec_fex_elem_s	struct(*(char),*(char),*(char),int,int,*(char),*(void))
{	O
char	O
*	O
str	*(char)
;	O
char	O
*	O
field_name	*(char)
;	O
char	O
*	O
rewrite_to	*(char)
;	O
int	O
max	int
;	O
int	O
min	int
;	O
char	O
*	O
function_name	*(char)
;	O
void	O
*	O
function_data	*(void)
;	O
}	O
;	O
struct	O
rec_fex_s	struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))
{	O
int	O
num_elems	int
;	O
char	O
*	O
str	*(char)
;	O
rec_fex_elem_t	*(struct)
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
REC_FEX_MAX_ELEMS	int
]	O
;	O
}	O
;	O
static	O
void	O
rec_fex_init	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))))->(void)
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
;	O
static	O
bool	bool
rec_fex_parse_str_simple	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char),*(char))->(bool)
(	O
rec_fex_t	*(struct)
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
sep	*(char)
)	O
;	O
static	O
bool	bool
rec_fex_parse_str_subscripts	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char))->(bool)
(	O
rec_fex_t	*(struct)
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
static	O
bool	bool
rec_fex_parse_elem	(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))),*(char))->(bool)
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
,	O
const	O
char	O
*	O
str	*(char)
)	O
;	O
rec_fex_t	*(struct)
rec_fex_new	(*(char),enum(int,int,int))->(*(struct))
(	O
const	O
char	O
*	O
str	*(char)
,	O
enum	O
rec_fex_kind_e	enum(int,int,int)
kind	enum(int,int,int)
)	O
{	O
rec_fex_t	*(struct)
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
;	O
int	O
i	long
;	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_fex_s	struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))
)	O
)	O
;	O
if	O
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
{	O
rec_fex_init	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
=	O
0	int
;	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
str	*(char)
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
REC_FEX_MAX_ELEMS	int
;	O
i	long
++	O
)	O
{	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
=	O
0	int
;	O
}	O
if	O
(	O
str	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
kind	enum(int,int,int)
==	O
REC_FEX_SUBSCRIPTS	int
)	O
{	O
if	O
(	O
!	O
rec_fex_parse_str_subscripts	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char))->(bool)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
str	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
if	O
(	O
kind	enum(int,int,int)
==	O
REC_FEX_SIMPLE	int
)	O
{	O
if	O
(	O
!	O
rec_fex_parse_str_simple	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char),*(char))->(bool)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
str	*(char)
,	O
" \t\n"	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
rec_fex_parse_str_simple	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char),*(char))->(bool)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
str	*(char)
,	O
","	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
}	O
}	O
return	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
;	O
}	O
void	O
rec_fex_destroy	(*(struct))->(void)
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
int	O
i	long
;	O
if	O
(	O
fex	*(struct)
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	*(struct)
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
free	(*(void))->(void)
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
rewrite_to	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
fex	*(struct)
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
fex	*(struct)
)	O
;	O
}	O
}	O
rec_fex_t	*(struct)
rec_fex_dup	(*(struct))->(*(struct))
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
rec_fex_t	*(struct)
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
=	O
NULL	O
;	O
size_t	long
i	long
=	O
0	int
;	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_fex_s	struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))
)	O
)	O
;	O
if	O
(	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
{	O
rec_fex_init	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))))->(void)
(	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
=	O
fex	*(struct)
->	O
num_elems	int
;	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fex	*(struct)
->	O
str	*(char)
)	O
;	O
if	O
(	O
!	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
str	*(char)
)	O
{	O
rec_fex_destroy	(*(struct))->(void)
(	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
return	O
NULL	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	*(struct)
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
==	O
NULL	O
)	O
{	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
=	O
NULL	O
;	O
continue	O
;	O
}	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct(*(char),*(char),*(char),int,int,*(char),*(void))
)	O
)	O
;	O
if	O
(	O
!	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
)	O
{	O
rec_fex_destroy	(*(struct))->(void)
(	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
)	O
;	O
return	O
NULL	O
;	O
}	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
max	int
=	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
max	int
;	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
min	int
=	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
min	int
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
str	*(char)
)	O
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
field_name	*(char)
)	O
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
rewrite_to	*(char)
)	O
;	O
REC_COPY_STR_MAYBE_RETURN	O
(	O
function_name	*(char)
)	O
;	O
}	O
}	O
return	O
copy	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
;	O
}	O
bool	bool
rec_fex_check	(*(char),enum(int,int,int))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
enum	O
rec_fex_kind_e	enum(int,int,int)
kind	enum(int,int,int)
)	O
{	O
char	O
*	O
regexp_str	*(char)
;	O
switch	O
(	O
kind	enum(int,int,int)
)	O
{	O
case	O
REC_FEX_SIMPLE	int
:	O
{	O
regexp_str	*(char)
=	O
"^"	*(char)
REC_FNAME_LIST_RE	O
"$"	*(char)
;	O
break	O
;	O
}	O
case	O
REC_FEX_CSV	int
:	O
{	O
regexp_str	*(char)
=	O
"^"	*(char)
REC_FNAME_LIST_CS_RE	O
"$"	*(char)
;	O
break	O
;	O
}	O
case	O
REC_FEX_SUBSCRIPTS	int
:	O
{	O
regexp_str	*(char)
=	O
"^"	*(char)
REC_FNAME_LIST_SUB_RE	O
"$"	*(char)
;	O
break	O
;	O
}	O
default	O
:	O
{	O
regexp_str	*(char)
=	O
NULL	O
;	O
break	O
;	O
}	O
}	O
return	O
rec_match	(*(char),*(char))->(bool)
(	O
str	*(char)
,	O
regexp_str	*(char)
)	O
;	O
}	O
size_t	long
rec_fex_size	(*(struct))->(long)
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
return	O
fex	*(struct)
->	O
num_elems	int
;	O
}	O
rec_fex_elem_t	*(struct)
rec_fex_get	(*(struct),long)->(*(struct))
(	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
size_t	long
position	long
)	O
{	O
if	O
(	O
(	O
position	long
<	O
0	int
)	O
||	O
(	O
position	long
>=	O
fex	*(struct)
->	O
num_elems	int
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
return	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
position	long
]	O
;	O
}	O
const	O
char	O
*	O
rec_fex_elem_field_name	(*(struct))->(*(char))
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
)	O
{	O
return	O
elem	*(struct)
->	O
field_name	*(char)
;	O
}	O
bool	bool
rec_fex_elem_set_field_name	(*(struct),*(char))->(bool)
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
elem	*(struct)
->	O
field_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
return	O
(	O
elem	*(struct)
->	O
field_name	*(char)
!=	O
NULL	O
)	O
;	O
}	O
int	O
rec_fex_elem_min	(*(struct))->(int)
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
)	O
{	O
return	O
elem	*(struct)
->	O
min	int
;	O
}	O
int	O
rec_fex_elem_max	(*(struct))->(int)
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
)	O
{	O
return	O
elem	*(struct)
->	O
max	int
;	O
}	O
const	O
char	O
*	O
rec_fex_elem_rewrite_to	(*(struct))->(*(char))
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
)	O
{	O
return	O
elem	*(struct)
->	O
rewrite_to	*(char)
;	O
}	O
void	O
rec_fex_sort	(*(struct))->(void)
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
bool	bool
done	bool
;	O
rec_fex_elem_t	*(struct)
aux	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
;	O
int	O
i	long
,	O
j	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
fex	*(struct)
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
aux	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
=	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
;	O
j	long
=	O
i	long
-	O
1	int
;	O
done	bool
=	O
false	int
;	O
while	O
(	O
!	O
done	bool
)	O
{	O
if	O
(	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
j	long
]	O
->	O
min	int
==	O
-	O
1	int
)	O
||	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
j	long
]	O
->	O
min	int
>	O
aux	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
min	int
)	O
)	O
{	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
j	long
+	O
1	int
]	O
=	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
j	long
]	O
;	O
j	long
=	O
j	long
-	O
1	int
;	O
if	O
(	O
j	long
<	O
0	int
)	O
{	O
done	bool
=	O
true	int
;	O
}	O
}	O
else	O
{	O
done	bool
=	O
true	int
;	O
}	O
}	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
j	long
+	O
1	int
]	O
=	O
aux	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
;	O
}	O
}	O
char	O
*	O
rec_fex_str	(*(struct),enum(int,int,int))->(*(char))
(	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
enum	O
rec_fex_kind_e	enum(int,int,int)
kind	enum(int,int,int)
)	O
{	O
char	O
*	O
result	*(*(char))
;	O
size_t	long
result_size	long
;	O
rec_buf_t	*(struct)
buf	*(struct)
;	O
size_t	long
i	long
;	O
char	O
*	O
tmp	*(char)
;	O
result	*(*(char))
=	O
NULL	O
;	O
buf	*(struct)
=	O
rec_buf_new	(*(*(char)),*(long))->(*(struct))
(	O
&	O
result	*(*(char))
,	O
&	O
result_size	long
)	O
;	O
if	O
(	O
buf	*(struct)
)	O
{	O
char	O
*	O
field_str	*(char)
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	*(struct)
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
{	O
if	O
(	O
kind	enum(int,int,int)
==	O
REC_FEX_SIMPLE	int
)	O
{	O
rec_buf_putc	(int,*(struct))->(int)
(	O
' '	O
,	O
buf	*(struct)
)	O
;	O
}	O
else	O
{	O
rec_buf_putc	(int,*(struct))->(int)
(	O
','	O
,	O
buf	*(struct)
)	O
;	O
}	O
}	O
field_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
field_name	*(char)
)	O
;	O
if	O
(	O
!	O
field_str	*(char)
)	O
{	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
result	*(*(char))
)	O
;	O
return	O
NULL	O
;	O
}	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
field_str	*(char)
,	O
buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
field_str	*(char)
)	O
;	O
if	O
(	O
kind	enum(int,int,int)
==	O
REC_FEX_SUBSCRIPTS	int
)	O
{	O
if	O
(	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
min	int
!=	O
-	O
1	int
)	O
||	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
max	int
!=	O
-	O
1	int
)	O
)	O
{	O
rec_buf_putc	(int,*(struct))->(int)
(	O
'['	O
,	O
buf	*(struct)
)	O
;	O
if	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
min	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
tmp	*(char)
,	O
"%d"	*(char)
,	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
min	int
)	O
!=	O
-	O
1	int
)	O
{	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
tmp	*(char)
,	O
buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
max	int
!=	O
-	O
1	int
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
tmp	*(char)
,	O
"-%d"	*(char)
,	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
max	int
)	O
!=	O
-	O
1	int
)	O
{	O
rec_buf_puts	(*(char),*(struct))->(int)
(	O
tmp	*(char)
,	O
buf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
}	O
rec_buf_putc	(int,*(struct))->(int)
(	O
']'	O
,	O
buf	*(struct)
)	O
;	O
}	O
}	O
}	O
}	O
rec_buf_close	(*(struct))->(void)
(	O
buf	*(struct)
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
bool	bool
rec_fex_member_p	(*(struct),*(char),int,int)->(bool)
(	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
bool	bool
res	bool
=	O
false	int
;	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	*(struct)
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
fname	*(char)
,	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
field_name	*(char)
)	O
&&	O
(	O
(	O
min	int
==	O
-	O
1	int
)	O
||	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
min	int
==	O
min	int
)	O
)	O
&&	O
(	O
(	O
max	int
==	O
-	O
1	int
)	O
||	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
max	int
==	O
max	int
)	O
)	O
)	O
{	O
res	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
return	O
res	bool
;	O
}	O
rec_fex_elem_t	*(struct)
rec_fex_append	(*(struct),*(char),int,int)->(*(struct))
(	O
rec_fex_t	*(struct)
fex	*(struct)
,	O
const	O
char	O
*	O
fname	*(char)
,	O
int	O
min	int
,	O
int	O
max	int
)	O
{	O
rec_fex_elem_t	*(struct)
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
;	O
if	O
(	O
fex	*(struct)
->	O
num_elems	int
>=	O
REC_FEX_MAX_ELEMS	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"internal error: REC_FEX_MAX_ELEMS exceeded.  Please report this.\n"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct(*(char),*(char),*(char),int,int,*(char),*(void))
)	O
)	O
;	O
if	O
(	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
,	O
0	int
,	O
sizeof	O
(	O
*	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
)	O
)	O
;	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
field_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
if	O
(	O
!	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
field_name	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
if	O
(	O
!	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
str	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
)	O
;	O
return	O
NULL	O
;	O
}	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
min	int
=	O
min	int
;	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
->	O
max	int
=	O
max	int
;	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
fex	*(struct)
->	O
num_elems	int
++	O
]	O
=	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
;	O
}	O
return	O
new_elem	*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))
;	O
}	O
const	O
char	O
*	O
rec_fex_elem_function_name	(*(struct))->(*(char))
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
)	O
{	O
return	O
elem	*(struct)
->	O
function_name	*(char)
;	O
}	O
void	O
*	O
*	O
rec_fex_elem_function_data	(*(struct))->(*(*(void)))
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
)	O
{	O
return	O
elem	*(struct)
->	O
function_data	*(void)
;	O
}	O
bool	bool
rec_fex_all_calls_p	(*(struct))->(bool)
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
bool	bool
result	*(*(char))
=	O
true	int
;	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fex	*(struct)
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
fex	*(struct)
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
function_name	*(char)
==	O
NULL	O
)	O
{	O
result	*(*(char))
=	O
false	int
;	O
break	O
;	O
}	O
}	O
return	O
result	*(*(char))
;	O
}	O
static	O
void	O
rec_fex_init	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))))->(void)
(	O
rec_fex_t	*(struct)
fex	*(struct)
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
fex	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
struct	O
rec_fex_s	struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_fex_parse_str_simple	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char),*(char))->(bool)
(	O
rec_fex_t	*(struct)
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
sep	*(char)
)	O
{	O
bool	bool
res	bool
;	O
rec_fex_elem_t	*(struct)
elem	*(struct)
;	O
char	O
*	O
fex_str	*(char)
,	O
*	O
fex_str_orig	*(char)
;	O
char	O
*	O
elem_str	*(char)
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
str	*(char)
)	O
{	O
return	O
false	int
;	O
}	O
fex_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
if	O
(	O
!	O
fex_str	*(char)
)	O
{	O
return	O
false	int
;	O
}	O
fex_str_orig	*(char)
=	O
fex_str	*(char)
;	O
res	bool
=	O
true	int
;	O
elem_str	*(char)
=	O
strsep	(*(*(char)),*(char))->(*(char))
(	O
&	O
fex_str	*(char)
,	O
sep	*(char)
)	O
;	O
do	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
elem_str	*(char)
)	O
>	O
0	int
)	O
{	O
if	O
(	O
(	O
elem	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct(*(char),*(char),*(char),int,int,*(char),*(void))
)	O
)	O
)	O
)	O
{	O
const	O
char	O
*	O
p	*(void)
=	O
elem_str	*(char)
;	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_RE	*(char)
,	O
&	O
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
'.'	O
)	O
{	O
char	O
*	O
subname	*(char)
=	O
NULL	O
;	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_RE	*(char)
,	O
&	O
subname	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
elem	*(struct)
->	O
field_name	*(char)
=	O
rec_concat_strings	(*(char),*(char),*(char))->(*(char))
(	O
elem	*(struct)
->	O
field_name	*(char)
,	O
"_"	*(char)
,	O
subname	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
!=	O
'\0'	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
elem	*(struct)
->	O
function_name	*(char)
=	O
NULL	O
;	O
elem	*(struct)
->	O
function_data	*(void)
=	O
NULL	O
;	O
elem	*(struct)
->	O
rewrite_to	*(char)
=	O
NULL	O
;	O
elem	*(struct)
->	O
str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
elem_str	*(char)
)	O
;	O
elem	*(struct)
->	O
min	int
=	O
-	O
1	int
;	O
elem	*(struct)
->	O
max	int
=	O
-	O
1	int
;	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
++	O
]	O
=	O
elem	*(struct)
;	O
}	O
else	O
{	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
}	O
}	O
while	O
(	O
(	O
elem_str	*(char)
=	O
strsep	(*(*(char)),*(char))->(*(char))
(	O
&	O
fex_str	*(char)
,	O
sep	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
==	O
0	int
)	O
{	O
res	bool
=	O
false	int
;	O
}	O
if	O
(	O
res	bool
)	O
{	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
rewrite_to	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
fex_str_orig	*(char)
)	O
;	O
return	O
res	bool
;	O
}	O
static	O
bool	bool
rec_fex_parse_str_subscripts	(*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void)))))),*(char))->(bool)
(	O
rec_fex_t	*(struct)
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
,	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
bool	bool
res	bool
;	O
char	O
*	O
elem_str	*(char)
;	O
char	O
*	O
fex_str	*(char)
,	O
*	O
fex_str_orig	*(char)
;	O
rec_fex_elem_t	*(struct)
elem	*(struct)
;	O
int	O
i	long
;	O
res	bool
=	O
true	int
;	O
fex_str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
if	O
(	O
!	O
fex_str	*(char)
)	O
{	O
return	O
false	int
;	O
}	O
fex_str_orig	*(char)
=	O
fex_str	*(char)
;	O
elem_str	*(char)
=	O
strsep	(*(*(char)),*(char))->(*(char))
(	O
&	O
fex_str	*(char)
,	O
","	*(char)
)	O
;	O
do	O
{	O
elem	*(struct)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_fex_elem_s	struct(*(char),*(char),*(char),int,int,*(char),*(void))
)	O
)	O
;	O
if	O
(	O
!	O
elem	*(struct)
)	O
{	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
rec_fex_parse_elem	(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))),*(char))->(bool)
(	O
elem	*(struct)
,	O
elem_str	*(char)
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
;	O
i	long
++	O
)	O
{	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
i	long
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
elem	*(struct)
)	O
;	O
res	bool
=	O
false	int
;	O
break	O
;	O
}	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
elems	array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))
[	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
num_elems	int
++	O
]	O
=	O
elem	*(struct)
;	O
}	O
while	O
(	O
(	O
elem_str	*(char)
=	O
strsep	(*(*(char)),*(char))->(*(char))
(	O
&	O
fex_str	*(char)
,	O
","	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
new	*(struct(int,*(char),array(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))))))
->	O
str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
fex_str_orig	*(char)
)	O
;	O
return	O
res	bool
;	O
}	O
static	O
bool	bool
rec_fex_parse_elem	(*(struct(*(char),*(char),*(char),int,int,*(char),*(void))),*(char))->(bool)
(	O
rec_fex_elem_t	*(struct)
elem	*(struct)
,	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
bool	bool
ret	bool
;	O
const	O
char	O
*	O
p	*(void)
;	O
ret	bool
=	O
true	int
;	O
p	*(void)
=	O
str	*(char)
;	O
elem	*(struct)
->	O
field_name	*(char)
=	O
NULL	O
;	O
elem	*(struct)
->	O
function_name	*(char)
=	O
NULL	O
;	O
elem	*(struct)
->	O
function_data	*(void)
=	O
NULL	O
;	O
elem	*(struct)
->	O
str	*(char)
=	O
NULL	O
;	O
elem	*(struct)
->	O
rewrite_to	*(char)
=	O
NULL	O
;	O
elem	*(struct)
->	O
min	int
=	O
-	O
1	int
;	O
elem	*(struct)
->	O
max	int
=	O
-	O
1	int
;	O
elem	*(struct)
->	O
str	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
if	O
(	O
rec_match	(*(char),*(char))->(bool)
(	O
p	*(void)
,	O
"^"	*(char)
REC_FEX_CALL	O
)	O
)	O
{	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FEX_FUNCTION_NAME	*(char)
,	O
&	O
(	O
elem	*(struct)
->	O
function_name	*(char)
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
p	*(void)
++	O
;	O
}	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_RE	*(char)
,	O
&	O
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
'.'	O
)	O
{	O
char	O
*	O
subname	*(char)
=	O
NULL	O
;	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_RE	*(char)
,	O
&	O
subname	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
elem	*(struct)
->	O
field_name	*(char)
=	O
rec_concat_strings	(*(char),*(char),*(char))->(*(char))
(	O
elem	*(struct)
->	O
field_name	*(char)
,	O
"_"	*(char)
,	O
subname	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
'['	O
)	O
{	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
rec_parse_int	(*(*(char)),*(int))->(bool)
(	O
&	O
p	*(void)
,	O
&	O
(	O
elem	*(struct)
->	O
min	int
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
'-'	O
)	O
{	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
rec_parse_int	(*(*(char)),*(int))->(bool)
(	O
&	O
p	*(void)
,	O
&	O
(	O
elem	*(struct)
->	O
max	int
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
*	O
p	*(void)
!=	O
']'	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
p	*(void)
++	O
;	O
}	O
if	O
(	O
elem	*(struct)
->	O
function_name	*(char)
)	O
{	O
p	*(void)
++	O
;	O
}	O
if	O
(	O
*	O
p	*(void)
==	O
':'	O
)	O
{	O
p	*(void)
++	O
;	O
if	O
(	O
!	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^"	*(char)
REC_FNAME_RE	*(char)
,	O
&	O
(	O
elem	*(struct)
->	O
rewrite_to	*(char)
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
}	O
if	O
(	O
*	O
p	*(void)
!=	O
'\0'	O
)	O
{	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
field_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct)
->	O
rewrite_to	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
return	O
ret	bool
;	O
}	O
