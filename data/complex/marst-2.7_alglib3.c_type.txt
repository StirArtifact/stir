static	O
void	O
outputf	O
(	O
char	O
*	O
fmt	O
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
arg	O
;	O
char	O
str	O
[	O
255	int
+	O
1	int
]	O
,	O
*	O
ptr	O
;	O
va_start	O
(	O
arg	O
,	O
fmt	O
)	O
;	O
vsprintf	(*(char),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
str	O
,	O
fmt	O
,	O
arg	O
)	O
;	O
assert	O
(	O
strlen	(*(char))->(long)
(	O
str	O
)	O
<=	O
sizeof	O
(	O
str	O
)	O
-	O
1	int
)	O
;	O
va_end	O
(	O
arg	O
)	O
;	O
for	O
(	O
ptr	O
=	O
str	O
;	O
*	O
ptr	O
!=	O
'\0'	O
;	O
ptr	O
++	O
)	O
outchar	O
(	O
1	int
,	O
*	O
ptr	O
)	O
;	O
return	O
;	O
}	O
static	O
void	O
outarray	O
(	O
char	O
*	O
name	O
,	O
struct	O
dv	O
*	O
dv	O
,	O
int	O
type	O
)	O
{	O
int	O
n	O
=	O
dv	O
->	O
n	O
,	O
i	O
[	O
9	int
]	O
,	O
k	O
;	O
void	O
*	O
base	O
=	O
dv	O
->	O
base	O
;	O
assert	O
(	O
1	int
<=	O
n	O
&&	O
n	O
<=	O
9	int
)	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
n	O
;	O
k	O
++	O
)	O
i	O
[	O
k	O
]	O
=	O
dv	O
->	O
d	O
[	O
k	O
]	O
.	O
lo	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
outputf	O
(	O
"%s"	*(char)
,	O
name	O
)	O
;	O
for	O
(	O
k	O
=	O
0	int
;	O
k	O
<	O
n	O
;	O
k	O
++	O
)	O
outputf	O
(	O
"%c%d"	*(char)
,	O
k	O
==	O
0	int
?	O
'['	O
:	O
','	O
,	O
i	O
[	O
k	O
]	O
)	O
;	O
outputf	O
(	O
"] = "	*(char)
)	O
;	O
switch	O
(	O
type	O
)	O
{	O
case	O
'r'	O
:	O
outputf	O
(	O
REAL_FMT	O
"\n"	*(char)
,	O
*	O
(	O
double	O
*	O
)	O
base	O
)	O
;	O
base	O
=	O
(	O
(	O
double	O
*	O
)	O
base	O
)	O
+	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
outputf	O
(	O
"%d\n"	*(char)
,	O
*	O
(	O
int	O
*	O
)	O
base	O
)	O
;	O
base	O
=	O
(	O
(	O
int	O
*	O
)	O
base	O
)	O
+	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
outputf	O
(	O
"%s\n"	*(char)
,	O
*	O
(	O
bool	int
*	O
)	O
base	O
?	O
"true"	*(char)
:	O
"false"	*(char)
)	O
;	O
base	O
=	O
(	O
(	O
bool	int
*	O
)	O
base	O
)	O
+	O
1	int
;	O
break	O
;	O
default	O
:	O
assert	O
(	O
type	O
!=	O
type	O
)	O
;	O
}	O
for	O
(	O
k	O
=	O
n	O
-	O
1	int
;	O
k	O
>=	O
0	int
;	O
k	O
--	O
)	O
{	O
i	O
[	O
k	O
]	O
++	O
;	O
if	O
(	O
i	O
[	O
k	O
]	O
<=	O
dv	O
->	O
d	O
[	O
k	O
]	O
.	O
up	O
)	O
break	O
;	O
i	O
[	O
k	O
]	O
=	O
dv	O
->	O
d	O
[	O
k	O
]	O
.	O
lo	O
;	O
}	O
if	O
(	O
k	O
<	O
0	int
)	O
break	O
;	O
}	O
return	O
;	O
}	O
void	O
print	O
(	O
int	O
n	O
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
arg	O
;	O
int	O
k	O
;	O
va_start	O
(	O
arg	O
,	O
n	O
)	O
;	O
for	O
(	O
k	O
=	O
1	int
;	O
k	O
<=	O
n	O
;	O
k	O
++	O
)	O
{	O
int	O
flags	O
=	O
va_arg	O
(	O
arg	O
,	O
int	O
)	O
;	O
char	O
*	O
name	O
=	O
va_arg	O
(	O
arg	O
,	O
char	O
*	O
)	O
;	O
switch	O
(	O
flags	O
)	O
{	O
case	O
F_REAL	O
:	O
{	O
double	O
val	O
=	O
va_arg	O
(	O
arg	O
,	O
double	O
)	O
;	O
if	O
(	O
name	O
!=	O
NULL	O
)	O
outputf	O
(	O
"%s = "	*(char)
,	O
name	O
)	O
;	O
outputf	O
(	O
REAL_FMT	O
"\n"	*(char)
,	O
val	O
)	O
;	O
}	O
break	O
;	O
case	O
F_INT	O
:	O
{	O
int	O
val	O
=	O
va_arg	O
(	O
arg	O
,	O
int	O
)	O
;	O
if	O
(	O
name	O
!=	O
NULL	O
)	O
outputf	O
(	O
"%s = "	*(char)
,	O
name	O
)	O
;	O
outputf	O
(	O
"%d\n"	*(char)
,	O
val	O
)	O
;	O
}	O
break	O
;	O
case	O
F_BOOL	O
:	O
{	O
bool	int
val	O
=	O
va_arg	O
(	O
arg	O
,	O
bool	int
)	O
;	O
if	O
(	O
name	O
!=	O
NULL	O
)	O
outputf	O
(	O
"%s = "	*(char)
,	O
name	O
)	O
;	O
outputf	O
(	O
"%s\n"	*(char)
,	O
val	O
?	O
"true"	*(char)
:	O
"false"	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
F_LABEL	O
:	O
{	O
struct	O
label	O
val	O
=	O
va_arg	O
(	O
arg	O
,	O
struct	O
label	O
)	O
;	O
if	O
(	O
name	O
!=	O
NULL	O
)	O
outputf	O
(	O
"%s = "	*(char)
,	O
name	O
)	O
;	O
outputf	O
(	O
"(%p,%d)\n"	*(char)
,	O
val	O
.	O
jump	O
,	O
val	O
.	O
kase	O
)	O
;	O
}	O
break	O
;	O
case	O
F_ARRAY	O
:	O
{	O
struct	O
arg	O
val	O
=	O
va_arg	O
(	O
arg	O
,	O
struct	O
arg	O
)	O
;	O
struct	O
dv	O
*	O
dv	O
=	O
val	O
.	O
arg1	O
;	O
int	O
type	O
=	O
(	O
int	O
)	O
val	O
.	O
arg2	O
;	O
assert	O
(	O
name	O
!=	O
NULL	O
)	O
;	O
if	O
(	O
dv	O
->	O
base	O
==	O
NULL	O
)	O
outputf	O
(	O
"array `%s' has no elements\n"	*(char)
,	O
name	O
)	O
;	O
else	O
outarray	O
(	O
name	O
,	O
dv	O
,	O
type	O
)	O
;	O
}	O
break	O
;	O
case	O
F_STRING	O
:	O
{	O
struct	O
arg	O
val	O
=	O
va_arg	O
(	O
arg	O
,	O
struct	O
arg	O
)	O
;	O
char	O
*	O
str	O
=	O
val	O
.	O
arg1	O
,	O
*	O
ptr	O
;	O
if	O
(	O
name	O
!=	O
NULL	O
)	O
outputf	O
(	O
"%s = "	*(char)
,	O
name	O
)	O
;	O
outputf	O
(	O
"\""	*(char)
)	O
;	O
for	O
(	O
ptr	O
=	O
str	O
;	O
*	O
ptr	O
!=	O
'\0'	O
;	O
ptr	O
++	O
)	O
{	O
if	O
(	O
iscntrl	(int)->(int)
(	O
*	O
ptr	O
)	O
)	O
outputf	O
(	O
"\\x%02X"	*(char)
,	O
*	O
ptr	O
)	O
;	O
else	O
if	O
(	O
*	O
ptr	O
==	O
'"'	O
)	O
outputf	O
(	O
"\\\""	*(char)
)	O
;	O
else	O
outputf	O
(	O
"%c"	*(char)
,	O
*	O
ptr	O
)	O
;	O
}	O
outputf	O
(	O
"\"\n"	*(char)
)	O
;	O
}	O
break	O
;	O
default	O
:	O
assert	O
(	O
flags	O
!=	O
flags	O
)	O
;	O
}	O
}	O
va_end	O
(	O
arg	O
)	O
;	O
return	O
;	O
}	O
