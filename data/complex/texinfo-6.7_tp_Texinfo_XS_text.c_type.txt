static	O
void	O
text_alloc	(*(struct(*(char),long,long)),long)->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
,	O
size_t	long
len	long
)	O
{	O
if	O
(	O
t	*(struct(*(char),long,long))
->	O
end	long
+	O
len	long
>	O
t	*(struct(*(char),long,long))
->	O
space	long
)	O
{	O
t	*(struct(*(char),long,long))
->	O
space	long
=	O
t	*(struct(*(char),long,long))
->	O
end	long
+	O
len	long
;	O
if	O
(	O
t	*(struct(*(char),long,long))
->	O
space	long
<	O
10	int
)	O
t	*(struct(*(char),long,long))
->	O
space	long
=	O
10	int
;	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
,	O
t	*(struct(*(char),long,long))
->	O
space	long
)	O
;	O
if	O
(	O
!	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
void	O
text_printf	(*(struct(*(char),long,long)),*(char))->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
,	O
char	O
*	O
format	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
v	array(struct(int,int,*(void),*(void)))
;	O
char	O
*	O
s	*(char)
;	O
va_start	O
(	O
v	array(struct(int,int,*(void),*(void)))
,	O
format	*(char)
)	O
;	O
vasprintf	(*(*(char)),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
&	O
s	*(char)
,	O
format	*(char)
,	O
v	array(struct(int,int,*(void),*(void)))
)	O
;	O
text_append	(*(struct(*(char),long,long)),*(char))->(void)
(	O
t	*(struct(*(char),long,long))
,	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
va_end	O
(	O
v	array(struct(int,int,*(void),*(void)))
)	O
;	O
}	O
void	O
text_append_n	(*(struct(*(char),long,long)),*(char),long)->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
,	O
char	O
*	O
s	*(char)
,	O
size_t	long
len	long
)	O
{	O
text_alloc	(*(struct(*(char),long,long)),long)->(void)
(	O
t	*(struct(*(char),long,long))
,	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
+	O
t	*(struct(*(char),long,long))
->	O
end	long
,	O
s	*(char)
,	O
len	long
)	O
;	O
t	*(struct(*(char),long,long))
->	O
end	long
+=	O
len	long
;	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
[	O
t	*(struct(*(char),long,long))
->	O
end	long
]	O
=	O
'\0'	O
;	O
}	O
void	O
text_append	(*(struct(*(char),long,long)),*(char))->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
,	O
char	O
*	O
s	*(char)
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
;	O
text_append_n	(*(struct(*(char),long,long)),*(char),long)->(void)
(	O
t	*(struct(*(char),long,long))
,	O
s	*(char)
,	O
len	long
)	O
;	O
}	O
void	O
text_reset	(*(struct(*(char),long,long)))->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
)	O
{	O
if	O
(	O
t	*(struct(*(char),long,long))
->	O
end	long
>	O
0	int
)	O
{	O
t	*(struct(*(char),long,long))
->	O
end	long
=	O
0	int
;	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
}	O
}	O
void	O
text_init	(*(struct(*(char),long,long)))->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
)	O
{	O
t	*(struct(*(char),long,long))
->	O
end	long
=	O
t	*(struct(*(char),long,long))
->	O
space	long
=	O
0	int
;	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
=	O
0	int
;	O
}	O
void	O
text_destroy	(*(struct(*(char),long,long)))->(void)
(	O
TEXT	struct(*(char),long,long)
*	O
t	*(struct(*(char),long,long))
)	O
{	O
t	*(struct(*(char),long,long))
->	O
end	long
=	O
t	*(struct(*(char),long,long))
->	O
space	long
=	O
0	int
;	O
free	(*(void))->(void)
(	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
)	O
;	O
t	*(struct(*(char),long,long))
->	O
text	*(char)
=	O
0	int
;	O
}	O
