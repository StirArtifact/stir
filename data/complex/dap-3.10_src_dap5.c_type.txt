extern	O
dataobs	struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int)
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
]	O
;	O
extern	O
FILE	struct
*	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
FILE	struct
*	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
int	O
dap_ono	int
;	O
extern	O
char	O
*	O
dap_dapname	*(char)
;	O
static	O
int	O
matchmark	(*(int),*(int),int,double)->(int)
(	O
int	O
*	O
markv	array(int)
,	O
int	O
*	O
xmarkv	*(int)
,	O
int	O
nmark	int
,	O
double	O
level	double
)	O
{	O
int	O
i	int
;	O
int	O
diff	int
;	O
if	O
(	O
xmarkv	*(int)
[	O
0	int
]	O
<	O
0	int
)	O
return	O
!	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
for	O
(	O
diff	int
=	O
0	int
,	O
i	int
=	O
0	int
;	O
!	O
diff	int
&&	O
i	int
<	O
nmark	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
i	int
]	O
]	O
>	O
0	int
)	O
diff	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
i	int
]	O
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
1	int
]	O
.	O
do_str	*(*(char))
[	O
xmarkv	*(int)
[	O
i	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
i	int
]	O
]	O
==	O
INT	int
)	O
diff	int
=	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
i	int
]	O
]	O
!=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
1	int
]	O
.	O
do_int	*(int)
[	O
xmarkv	*(int)
[	O
i	int
]	O
]	O
)	O
;	O
else	O
diff	int
=	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
i	int
]	O
]	O
!=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
1	int
]	O
.	O
do_dbl	*(double)
[	O
xmarkv	*(int)
[	O
i	int
]	O
]	O
)	O
;	O
}	O
return	O
!	O
diff	int
;	O
}	O
void	O
linreg1	(*(*(double)),*(int),int,int,int,int,*(int),*(int),*(int),int,double,int,int,int,int,array(int))->(void)
(	O
double	O
*	O
*	O
xymat	*(*(double))
,	O
int	O
*	O
varv	array(int)
,	O
int	O
nx0	int
,	O
int	O
nx	int
,	O
int	O
ny	int
,	O
int	O
nobs	int
,	O
int	O
*	O
xvarv	*(int)
,	O
int	O
*	O
markv	array(int)
,	O
int	O
*	O
xmarkv	*(int)
,	O
int	O
nmark	int
,	O
double	O
level	double
,	O
int	O
respn	int
,	O
int	O
param1n	int
,	O
int	O
param2n	int
,	O
int	O
covn	int
,	O
int	O
partv	array(int)
[	O
]	O
)	O
{	O
double	O
*	O
invmem	*(double)
;	O
double	O
*	O
*	O
inv	*(*(double))
;	O
int	O
r	double
,	O
c	int
;	O
int	O
rr	int
,	O
cc	int
;	O
double	O
pivot	double
;	O
double	O
tmp	double
,	O
tmp2	double
;	O
int	O
typen	int
;	O
double	O
dnobs	double
;	O
double	O
*	O
rss0	*(double)
,	O
*	O
rss1	*(double)
,	O
*	O
rss	*(double)
;	O
double	O
*	O
f	*(()->(double))
,	O
*	O
fch	*(double)
;	O
int	O
df	int
;	O
double	O
ddf	double
;	O
double	O
xi	double
,	O
xj	double
;	O
static	O
double	O
tpt	double
;	O
int	O
yn	(int,double)->(double)
;	O
int	O
i	int
,	O
j	int
;	O
double	O
*	O
pred	*(double)
;	O
double	O
*	O
sepred	*(double)
;	O
int	O
v	int
;	O
dap_swap	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(linreg1) Missing _type_ variable.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
invmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
*	O
nx	int
,	O
""	*(char)
)	O
;	O
inv	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
nx	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nx	int
;	O
r	double
++	O
)	O
inv	*(*(double))
[	O
r	double
]	O
=	O
invmem	*(double)
+	O
r	double
*	O
nx	int
;	O
rss0	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
rss1	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
rss	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
f	*(()->(double))
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
fch	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
pred	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
sepred	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
ny	int
,	O
""	*(char)
)	O
;	O
dnobs	double
=	O
(	O
double	O
)	O
nobs	int
;	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
+	O
ny	int
;	O
c	int
++	O
)	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
c	int
]	O
/=	O
dnobs	double
;	O
for	O
(	O
r	double
=	O
1	int
;	O
r	double
<	O
nx	int
;	O
r	double
++	O
)	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
{	O
if	O
(	O
r	double
==	O
c	int
)	O
inv	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
=	O
1.0	int
;	O
else	O
inv	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
=	O
0.0	int
;	O
}	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
{	O
if	O
(	O
c	int
==	O
1	int
)	O
{	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ny	int
;	O
cc	int
++	O
)	O
rss0	*(double)
[	O
cc	int
]	O
=	O
xymat	*(*(double))
[	O
nx	int
+	O
cc	int
]	O
[	O
nx	int
+	O
cc	int
]	O
;	O
}	O
if	O
(	O
c	int
==	O
nx0	int
)	O
{	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
ny	int
;	O
cc	int
++	O
)	O
rss1	*(double)
[	O
cc	int
]	O
=	O
xymat	*(*(double))
[	O
nx	int
+	O
cc	int
]	O
[	O
nx	int
+	O
cc	int
]	O
;	O
}	O
pivot	double
=	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
c	int
]	O
;	O
if	O
(	O
pivot	double
!=	O
0.0	int
)	O
{	O
for	O
(	O
rr	int
=	O
c	int
+	O
1	int
;	O
rr	int
<	O
nx	int
+	O
ny	int
;	O
rr	int
++	O
)	O
{	O
tmp	double
=	O
xymat	*(*(double))
[	O
rr	int
]	O
[	O
c	int
]	O
/	O
pivot	double
;	O
xymat	*(*(double))
[	O
rr	int
]	O
[	O
c	int
]	O
=	O
0.0	int
;	O
for	O
(	O
cc	int
=	O
c	int
+	O
1	int
;	O
cc	int
<	O
nx	int
+	O
ny	int
;	O
cc	int
++	O
)	O
{	O
if	O
(	O
rr	int
<	O
nx	int
||	O
cc	int
<	O
nx	int
||	O
rr	int
==	O
cc	int
)	O
{	O
xymat	*(*(double))
[	O
rr	int
]	O
[	O
cc	int
]	O
-=	O
tmp	double
*	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
xymat	*(*(double))
[	O
rr	int
]	O
[	O
cc	int
]	O
)	O
<	O
dap_tol	double
*	O
pivot	double
)	O
xymat	*(*(double))
[	O
rr	int
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
}	O
}	O
if	O
(	O
rr	int
<	O
nx	int
)	O
{	O
for	O
(	O
cc	int
=	O
1	int
;	O
cc	int
<	O
nx	int
;	O
cc	int
++	O
)	O
{	O
inv	*(*(double))
[	O
rr	int
]	O
[	O
cc	int
]	O
-=	O
tmp	double
*	O
inv	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
inv	*(*(double))
[	O
rr	int
]	O
[	O
cc	int
]	O
)	O
<	O
dap_tol	double
*	O
pivot	double
)	O
inv	*(*(double))
[	O
rr	int
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(linreg1) X'X matrix is singular.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
for	O
(	O
c	int
=	O
nx	int
-	O
1	int
;	O
c	int
>	O
0	int
;	O
--	O
c	int
)	O
{	O
for	O
(	O
r	double
=	O
c	int
-	O
1	int
;	O
r	double
>	O
0	int
;	O
--	O
r	double
)	O
{	O
tmp	double
=	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
/	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
c	int
]	O
;	O
for	O
(	O
cc	int
=	O
c	int
+	O
1	int
;	O
cc	int
<	O
nx	int
+	O
ny	int
;	O
cc	int
++	O
)	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
cc	int
]	O
-=	O
tmp	double
*	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
nx	int
;	O
cc	int
++	O
)	O
inv	*(*(double))
[	O
r	double
]	O
[	O
cc	int
]	O
-=	O
tmp	double
*	O
inv	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
}	O
for	O
(	O
cc	int
=	O
c	int
+	O
1	int
;	O
cc	int
<	O
nx	int
+	O
ny	int
;	O
cc	int
++	O
)	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
/=	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
c	int
]	O
;	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
nx	int
;	O
cc	int
++	O
)	O
inv	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
/=	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
c	int
]	O
;	O
}	O
df	int
=	O
nobs	int
-	O
nx	int
;	O
ddf	double
=	O
(	O
double	O
)	O
df	int
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
ny	int
;	O
c	int
++	O
)	O
{	O
rss	*(double)
[	O
c	int
]	O
=	O
xymat	*(*(double))
[	O
nx	int
+	O
c	int
]	O
[	O
nx	int
+	O
c	int
]	O
;	O
f	*(()->(double))
[	O
c	int
]	O
=	O
(	O
rss0	*(double)
[	O
c	int
]	O
-	O
rss	*(double)
[	O
c	int
]	O
)	O
/	O
rss	*(double)
[	O
c	int
]	O
*	O
ddf	double
/	O
(	O
(	O
double	O
)	O
nx	int
-	O
1	int
)	O
;	O
fch	*(double)
[	O
c	int
]	O
=	O
(	O
rss1	*(double)
[	O
c	int
]	O
-	O
rss	*(double)
[	O
c	int
]	O
)	O
/	O
rss	*(double)
[	O
c	int
]	O
*	O
ddf	double
/	O
(	O
(	O
double	O
)	O
nx	int
-	O
nx0	int
)	O
;	O
}	O
for	O
(	O
r	double
=	O
1	int
;	O
r	double
<	O
nx	int
;	O
r	double
++	O
)	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
=	O
inv	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
;	O
for	O
(	O
r	double
=	O
1	int
;	O
r	double
<	O
nx	int
;	O
r	double
++	O
)	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
0	int
]	O
-=	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
*	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
c	int
]	O
;	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
1.0	int
/	O
dnobs	double
;	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
0	int
]	O
-=	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
c	int
]	O
*	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
0	int
]	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
ny	int
;	O
c	int
++	O
)	O
for	O
(	O
cc	int
=	O
1	int
;	O
cc	int
<	O
nx	int
;	O
cc	int
++	O
)	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
nx	int
+	O
c	int
]	O
-=	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
cc	int
]	O
*	O
xymat	*(*(double))
[	O
cc	int
]	O
[	O
nx	int
+	O
c	int
]	O
;	O
for	O
(	O
c	int
=	O
1	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
c	int
]	O
=	O
xymat	*(*(double))
[	O
c	int
]	O
[	O
0	int
]	O
;	O
dap_ono	int
=	O
2	int
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
partv	array(int)
[	O
v	int
]	O
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_int	*(int)
[	O
partv	array(int)
[	O
v	int
]	O
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
partv	array(int)
[	O
v	int
]	O
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Reduced | full model regressors:"	*(char)
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nx0	int
;	O
r	double
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
r	double
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" |"	*(char)
)	O
;	O
while	O
(	O
r	double
<	O
nx	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
r	double
++	O
]	O
]	O
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of observations = %d\n"	*(char)
,	O
nobs	int
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
ny	int
;	O
c	int
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nResponse: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
nx	int
+	O
c	int
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"   F0(%d, %d) = %.6g, Prob[F > F0] = %.5f\n   R-sq = %.6g, Adj R-sq = %.6g\n"	*(char)
,	O
nx	int
-	O
1	int
,	O
nobs	int
-	O
nx	int
,	O
f	*(()->(double))
[	O
c	int
]	O
,	O
0.00001	int
*	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
probf	(double,int,int)->(double)
(	O
f	*(()->(double))
[	O
c	int
]	O
,	O
nx	int
-	O
1	int
,	O
nobs	int
-	O
nx	int
)	O
)	O
,	O
1.0	int
-	O
rss	*(double)
[	O
c	int
]	O
/	O
rss0	*(double)
[	O
c	int
]	O
,	O
1.0	int
-	O
rss	*(double)
[	O
c	int
]	O
*	O
(	O
(	O
double	O
)	O
(	O
nobs	int
-	O
1	int
)	O
)	O
/	O
(	O
rss0	*(double)
[	O
c	int
]	O
*	O
ddf	double
)	O
)	O
;	O
if	O
(	O
nx0	int
>	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"   F-change(%d, %d) = %.6g, Prob[F > F-change] = %.5f\n"	*(char)
,	O
nx	int
-	O
nx0	int
,	O
nobs	int
-	O
nx	int
,	O
fch	*(double)
[	O
c	int
]	O
,	O
0.00001	int
*	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
probf	(double,int,int)->(double)
(	O
fch	*(double)
[	O
c	int
]	O
,	O
nx	int
-	O
nx0	int
,	O
nobs	int
-	O
nx	int
)	O
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n   Parameter           Estimate    Std Error   T0[%6d]  Prob[|T|>|T0|]\n"	*(char)
,	O
nobs	int
-	O
nx	int
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nx	int
;	O
r	double
++	O
)	O
{	O
tmp	double
=	O
sqrt	(double)->(double)
(	O
rss	*(double)
[	O
c	int
]	O
/	O
ddf	double
*	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
r	double
]	O
)	O
;	O
tmp2	double
=	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
nx	int
+	O
c	int
]	O
/	O
tmp	double
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"   %-15s %12.6g %12.6g %12.6g  %14.5f\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
r	double
]	O
]	O
,	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
nx	int
+	O
c	int
]	O
,	O
tmp	double
,	O
tmp2	double
,	O
0.00001	int
*	O
ceil	(double)->(double)
(	O
200000.0	int
*	O
probt	(double,int)->(double)
(	O
fabs	(double)->(double)
(	O
tmp2	double
)	O
,	O
nobs	int
-	O
nx	int
)	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ESTIMATE"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
respn	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
nx	int
+	O
c	int
]	O
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param2n	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
r	double
]	O
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param1n	int
]	O
,	O
""	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
covn	int
]	O
=	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
nx	int
+	O
c	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"COVAR"	*(char)
)	O
;	O
for	O
(	O
yn	(int,double)->(double)
=	O
0	int
;	O
yn	(int,double)->(double)
<	O
ny	int
;	O
yn	(int,double)->(double)
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
respn	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
nx	int
+	O
yn	(int,double)->(double)
]	O
]	O
)	O
;	O
tmp	double
=	O
rss	*(double)
[	O
yn	(int,double)->(double)
]	O
/	O
ddf	double
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nx	int
;	O
r	double
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param1n	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
r	double
]	O
]	O
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
nx	int
;	O
c	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param2n	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
c	int
]	O
]	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
covn	int
]	O
=	O
tmp	double
*	O
xymat	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
dap_ono	int
=	O
0	int
;	O
if	O
(	O
level	double
<	O
1.0	int
)	O
tpt	double
=	O
tpoint	(double,int)->(double)
(	O
0.5	int
*	O
(	O
1.0	int
-	O
level	double
)	O
,	O
nobs	int
-	O
nx	int
)	O
;	O
else	O
tpt	double
=	O
0.0	int
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
1.0	int
;	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
<	O
0	int
)	O
{	O
dap_rewind	()->(void)
(	O
)	O
;	O
step	()->(int)
(	O
)	O
;	O
}	O
while	O
(	O
matchmark	(*(int),*(int),int,double)->(int)
(	O
markv	array(int)
,	O
xmarkv	*(int)
,	O
nmark	int
,	O
level	double
)	O
)	O
{	O
dap_ono	int
=	O
0	int
;	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
>=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
i	int
]	O
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
1	int
]	O
.	O
do_dbl	*(double)
[	O
xvarv	*(int)
[	O
i	int
-	O
1	int
]	O
]	O
;	O
}	O
else	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"OBS"	*(char)
)	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
for	O
(	O
yn	(int,double)->(double)
=	O
0	int
;	O
yn	(int,double)->(double)
<	O
ny	int
;	O
yn	(int,double)->(double)
++	O
)	O
{	O
for	O
(	O
pred	*(double)
[	O
yn	(int,double)->(double)
]	O
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
pred	*(double)
[	O
yn	(int,double)->(double)
]	O
+=	O
xymat	*(*(double))
[	O
i	int
]	O
[	O
nx	int
+	O
yn	(int,double)->(double)
]	O
*	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
i	int
]	O
]	O
;	O
for	O
(	O
sepred	*(double)
[	O
yn	(int,double)->(double)
]	O
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
xi	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
i	int
]	O
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nx	int
;	O
j	int
++	O
)	O
{	O
xj	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
j	int
]	O
]	O
;	O
sepred	*(double)
[	O
yn	(int,double)->(double)
]	O
+=	O
xi	double
*	O
rss	*(double)
[	O
yn	(int,double)->(double)
]	O
/	O
ddf	double
*	O
xymat	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
*	O
xj	double
;	O
}	O
}	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"PRED"	*(char)
)	O
;	O
for	O
(	O
yn	(int,double)->(double)
=	O
0	int
;	O
yn	(int,double)->(double)
<	O
ny	int
;	O
yn	(int,double)->(double)
++	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
+	O
yn	(int,double)->(double)
]	O
]	O
=	O
pred	*(double)
[	O
yn	(int,double)->(double)
]	O
;	O
output	()->(void)
(	O
)	O
;	O
if	O
(	O
tpt	double
!=	O
0.0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LOWER"	*(char)
)	O
;	O
for	O
(	O
yn	(int,double)->(double)
=	O
0	int
;	O
yn	(int,double)->(double)
<	O
ny	int
;	O
yn	(int,double)->(double)
++	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
+	O
yn	(int,double)->(double)
]	O
]	O
=	O
pred	*(double)
[	O
yn	(int,double)->(double)
]	O
-	O
tpt	double
*	O
sqrt	(double)->(double)
(	O
sepred	*(double)
[	O
yn	(int,double)->(double)
]	O
)	O
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"UPPER"	*(char)
)	O
;	O
for	O
(	O
yn	(int,double)->(double)
=	O
0	int
;	O
yn	(int,double)->(double)
<	O
ny	int
;	O
yn	(int,double)->(double)
++	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
+	O
yn	(int,double)->(double)
]	O
]	O
=	O
pred	*(double)
[	O
yn	(int,double)->(double)
]	O
+	O
tpt	double
*	O
sqrt	(double)->(double)
(	O
sepred	*(double)
[	O
yn	(int,double)->(double)
]	O
)	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
>=	O
0	int
)	O
dap_ono	int
=	O
1	int
;	O
dap_mark	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
step	()->(int)
(	O
)	O
)	O
break	O
;	O
}	O
dap_ono	int
=	O
0	int
;	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
>=	O
0	int
)	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
invmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
inv	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rss0	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rss1	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rss	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
f	*(()->(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
fch	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
pred	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
sepred	*(double)
,	O
""	*(char)
)	O
;	O
}	O
void	O
linreg	(array(char),array(char),array(char),array(char),array(char),array(char),double)->(void)
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
ylist	array(char)
,	O
char	O
*	O
x0list	array(char)
,	O
char	O
*	O
x1list	array(char)
,	O
char	O
*	O
marks	array(char)
,	O
char	O
*	O
xname	array(char)
,	O
double	O
level	double
)	O
{	O
char	O
*	O
regname	*(char)
;	O
int	O
*	O
varv	array(int)
;	O
int	O
*	O
xvarv	*(int)
;	O
int	O
ny	int
;	O
int	O
nx0	int
,	O
nx1	int
;	O
int	O
nx	int
;	O
int	O
nvar	int
;	O
int	O
nxx	int
;	O
int	O
*	O
markv	array(int)
;	O
int	O
*	O
xmarkv	*(int)
;	O
int	O
nmark	int
;	O
int	O
v	int
,	O
w	int
;	O
double	O
tmp	double
;	O
int	O
nobs	int
;	O
double	O
dnobs	double
;	O
double	O
*	O
xymem	*(double)
;	O
double	O
*	O
*	O
xymat	*(*(double))
;	O
int	O
more	int
;	O
char	O
*	O
covset	*(char)
;	O
int	O
param1n	int
,	O
param2n	int
,	O
respn	int
,	O
covn	int
;	O
int	O
paramlen1	int
,	O
paramlen	int
;	O
char	O
paramstr	array(char)
[	O
14	int
]	O
;	O
char	O
*	O
partstr	*(char)
;	O
int	O
*	O
partv	array(int)
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(linreg) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
varv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
xvarv	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
xmarkv	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
partv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
regname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
dap_suffix	(array(char),array(char),array(char))->(void)
(	O
regname	*(char)
,	O
fname	array(char)
,	O
".reg"	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
dap_vd	(array(char),int)->(int)
(	O
"_intercept_ -1"	*(char)
,	O
0	int
)	O
;	O
nx0	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
"_intercept_"	*(char)
,	O
varv	array(int)
,	O
dap_maxvar	int
)	O
;	O
nx0	int
+=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x0list	array(char)
,	O
varv	array(int)
+	O
1	int
,	O
dap_maxvar	int
)	O
;	O
nx1	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x1list	array(char)
,	O
varv	array(int)
+	O
nx0	int
,	O
dap_maxvar	int
)	O
;	O
nx	int
=	O
nx0	int
+	O
nx1	int
;	O
ny	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
ylist	array(char)
,	O
varv	array(int)
+	O
nx	int
,	O
dap_maxvar	int
)	O
;	O
nvar	int
=	O
nx	int
+	O
ny	int
;	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
covset	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
covset	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
covset	*(char)
,	O
".cov"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
1	int
,	O
paramlen	int
=	O
strlen	(*(char))->(long)
(	O
"_intercept_"	*(char)
)	O
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
{	O
paramlen1	int
=	O
strlen	(*(char))->(long)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
if	O
(	O
paramlen1	int
>	O
paramlen	int
)	O
paramlen	int
=	O
paramlen1	int
;	O
}	O
dap_ono	int
=	O
2	int
;	O
dap_clearobs	(*(char))->(int)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
paramstr	array(char)
,	O
"_response_ %d"	*(char)
,	O
paramlen	int
)	O
;	O
respn	int
=	O
dap_vd	(array(char),int)->(int)
(	O
paramstr	array(char)
,	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
paramstr	array(char)
,	O
"_param1_ %d"	*(char)
,	O
paramlen	int
)	O
;	O
param1n	int
=	O
dap_vd	(array(char),int)->(int)
(	O
paramstr	array(char)
,	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
paramstr	array(char)
,	O
"_param2_ %d"	*(char)
,	O
paramlen	int
)	O
;	O
param2n	int
=	O
dap_vd	(array(char),int)->(int)
(	O
paramstr	array(char)
,	O
0	int
)	O
;	O
covn	int
=	O
dap_vd	(array(char),int)->(int)
(	O
"_cov_ -1"	*(char)
,	O
0	int
)	O
;	O
partstr	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
partstr	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
partstr	*(char)
+	O
strlen	(*(char))->(long)
(	O
partstr	*(char)
)	O
,	O
" %d"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
partv	array(int)
[	O
v	int
]	O
=	O
dap_vd	(array(char),int)->(int)
(	O
partstr	*(char)
,	O
1	int
)	O
;	O
}	O
outset	(array(char),array(char))->(void)
(	O
covset	*(char)
,	O
""	*(char)
)	O
;	O
dap_ono	int
=	O
0	int
;	O
xymem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nvar	int
*	O
nvar	int
,	O
""	*(char)
)	O
;	O
xymat	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
nvar	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
xymat	*(*(double))
[	O
v	int
]	O
=	O
xymem	*(double)
+	O
v	int
*	O
nvar	int
;	O
dap_ono	int
=	O
1	int
;	O
if	O
(	O
xname	array(char)
&&	O
xname	array(char)
[	O
0	int
]	O
)	O
{	O
inset	(array(char))->(void)
(	O
xname	array(char)
)	O
;	O
nxx	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x0list	array(char)
,	O
xvarv	*(int)
,	O
dap_maxvar	int
)	O
;	O
nxx	int
+=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x1list	array(char)
,	O
xvarv	*(int)
+	O
nxx	int
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
nxx	int
!=	O
nx	int
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(linreg) %s and %s have different numbers (%d and %d) of x-variables.\n"	*(char)
,	O
fname	array(char)
,	O
xname	array(char)
,	O
nx	int
-	O
1	int
,	O
nxx	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
nmark	int
)	O
{	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
(	O
xmarkv	*(int)
[	O
v	int
]	O
=	O
dap_varnum	(array(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(linreg) Mark variable %s in %s not in %s.\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
,	O
fname	array(char)
,	O
xname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
step	()->(int)
(	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(linreg) No data in %s.\n"	*(char)
,	O
xname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
xvarv	*(int)
[	O
0	int
]	O
=	O
-	O
1	int
;	O
xmarkv	*(int)
[	O
0	int
]	O
=	O
-	O
1	int
;	O
}	O
dap_ono	int
=	O
0	int
;	O
for	O
(	O
w	int
=	O
0	int
;	O
w	int
<	O
nvar	int
;	O
w	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
w	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(linreg) Variable %s not double.\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
w	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
xymat	*(*(double))
[	O
v	int
]	O
[	O
w	int
]	O
=	O
0.0	int
;	O
}	O
outset	(array(char),array(char))->(void)
(	O
regname	*(char)
,	O
""	*(char)
)	O
;	O
for	O
(	O
nobs	int
=	O
0	int
,	O
dap_mark	()->(void)
(	O
)	O
,	O
more	int
=	O
1	int
;	O
more	int
;	O
nobs	int
++	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
linreg1	(*(*(double)),*(int),int,int,int,int,*(int),*(int),*(int),int,double,int,int,int,int,array(int))->(void)
(	O
xymat	*(*(double))
,	O
varv	array(int)
,	O
nx0	int
,	O
nx	int
,	O
ny	int
,	O
nobs	int
,	O
xvarv	*(int)
,	O
markv	array(int)
,	O
xmarkv	*(int)
,	O
nmark	int
,	O
level	double
,	O
respn	int
,	O
param1n	int
,	O
param2n	int
,	O
covn	int
,	O
partv	array(int)
)	O
;	O
for	O
(	O
w	int
=	O
0	int
;	O
w	int
<	O
nvar	int
;	O
w	int
++	O
)	O
{	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
xymat	*(*(double))
[	O
v	int
]	O
[	O
w	int
]	O
=	O
0.0	int
;	O
}	O
nobs	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
)	O
{	O
dnobs	double
=	O
(	O
double	O
)	O
nobs	int
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
{	O
tmp	double
=	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
v	int
]	O
-	O
dnobs	double
*	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
v	int
]	O
]	O
;	O
for	O
(	O
w	int
=	O
1	int
;	O
w	int
<	O
nvar	int
;	O
w	int
++	O
)	O
{	O
if	O
(	O
v	int
<	O
nx	int
||	O
w	int
<	O
nx	int
||	O
v	int
==	O
w	int
)	O
xymat	*(*(double))
[	O
v	int
]	O
[	O
w	int
]	O
+=	O
tmp	double
*	O
(	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
w	int
]	O
-	O
dnobs	double
*	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
w	int
]	O
]	O
)	O
/	O
(	O
dnobs	double
*	O
(	O
dnobs	double
+	O
1.0	int
)	O
)	O
;	O
}	O
}	O
}	O
for	O
(	O
w	int
=	O
1	int
;	O
w	int
<	O
nvar	int
;	O
w	int
++	O
)	O
xymat	*(*(double))
[	O
0	int
]	O
[	O
w	int
]	O
+=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
w	int
]	O
]	O
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
regname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xvarv	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xmarkv	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xymem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xymat	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
covset	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
partstr	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
partv	array(int)
,	O
""	*(char)
)	O
;	O
}	O
void	O
dap_parsey	(array(char),array(int))->(void)
(	O
char	O
*	O
yspec	array(char)
,	O
int	O
*	O
varv	array(int)
)	O
{	O
int	O
l	int
;	O
int	O
i	int
;	O
char	O
*	O
vname	array(char)
;	O
int	O
vn	int
;	O
int	O
ntrials	int
;	O
vname	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_namelen	int
+	O
1	int
,	O
"dap_namelen"	*(char)
)	O
;	O
for	O
(	O
l	int
=	O
0	int
;	O
yspec	array(char)
[	O
l	int
]	O
==	O
' '	O
;	O
l	int
++	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
&&	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
!=	O
' '	O
&&	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
!=	O
'/'	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
<	O
dap_namelen	int
)	O
vname	array(char)
[	O
i	int
]	O
=	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Variable name too long: %s\n"	*(char)
,	O
yspec	array(char)
+	O
l	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
vname	array(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
l	int
+=	O
i	int
;	O
if	O
(	O
(	O
vn	int
=	O
dap_varnum	(array(char))->(int)
(	O
vname	array(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Unknown variable: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_len	*(int)
[	O
vn	int
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Events variable not double: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
varv	array(int)
[	O
0	int
]	O
=	O
vn	int
;	O
while	O
(	O
yspec	array(char)
[	O
l	int
]	O
==	O
' '	O
)	O
l	int
++	O
;	O
if	O
(	O
yspec	array(char)
[	O
l	int
]	O
==	O
'/'	O
)	O
{	O
for	O
(	O
l	int
++	O
;	O
yspec	array(char)
[	O
l	int
]	O
==	O
' '	O
;	O
l	int
++	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
&&	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
!=	O
' '	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
i	int
<	O
dap_namelen	int
)	O
vname	array(char)
[	O
i	int
]	O
=	O
yspec	array(char)
[	O
l	int
+	O
i	int
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Variable name too long: %s\n"	*(char)
,	O
yspec	array(char)
+	O
l	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
vname	array(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ntrials	int
=	O
0	int
;	O
'0'	O
<=	O
vname	array(char)
[	O
i	int
]	O
&&	O
vname	array(char)
[	O
i	int
]	O
<=	O
'9'	O
;	O
i	int
++	O
)	O
ntrials	int
=	O
10	int
*	O
ntrials	int
+	O
vname	array(char)
[	O
i	int
]	O
-	O
'0'	O
;	O
if	O
(	O
i	int
)	O
{	O
if	O
(	O
vname	array(char)
[	O
i	int
]	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Invalid number of trials: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
varv	array(int)
[	O
1	int
]	O
=	O
-	O
ntrials	int
;	O
}	O
else	O
{	O
if	O
(	O
(	O
vn	int
=	O
dap_varnum	(array(char))->(int)
(	O
vname	array(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Unknown variable: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_len	*(int)
[	O
vn	int
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Trials variable not double: %s\n"	*(char)
,	O
vname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
varv	array(int)
[	O
1	int
]	O
=	O
vn	int
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(parsey) Expected / in yspec at: %s\n"	*(char)
,	O
yspec	array(char)
+	O
l	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
vname	array(char)
,	O
""	*(char)
)	O
;	O
}	O
static	O
double	O
vlen	(*(double),int)->(double)
(	O
double	O
*	O
v	int
,	O
int	O
nv	int
)	O
{	O
int	O
i	int
;	O
double	O
len	double
;	O
for	O
(	O
len	double
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nv	int
;	O
i	int
++	O
)	O
len	double
+=	O
v	int
[	O
i	int
]	O
*	O
v	int
[	O
i	int
]	O
;	O
return	O
sqrt	(double)->(double)
(	O
len	double
)	O
;	O
}	O
static	O
double	O
vdiff	(*(double),*(double),int)->(double)
(	O
double	O
*	O
v0	*(double)
,	O
double	O
*	O
v1	*(double)
,	O
int	O
nv	int
)	O
{	O
int	O
i	int
;	O
double	O
tmp	double
;	O
double	O
diff	int
;	O
for	O
(	O
diff	int
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nv	int
;	O
i	int
++	O
)	O
{	O
tmp	double
=	O
v0	*(double)
[	O
i	int
]	O
-	O
v1	*(double)
[	O
i	int
]	O
;	O
diff	int
+=	O
tmp	double
*	O
tmp	double
;	O
}	O
return	O
sqrt	(double)->(double)
(	O
diff	int
)	O
;	O
}	O
int	O
dap_invert	(*(*(double)),int)->(int)
(	O
double	O
*	O
*	O
a	double
,	O
int	O
nrc	int
)	O
{	O
double	O
*	O
invmem	*(double)
;	O
double	O
*	O
*	O
inv	*(*(double))
;	O
int	O
r	double
,	O
c	int
;	O
int	O
cc	int
;	O
double	O
tmp	double
;	O
double	O
mult	double
;	O
invmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nrc	int
*	O
nrc	int
,	O
""	*(char)
)	O
;	O
inv	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
nrc	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nrc	int
;	O
r	double
++	O
)	O
{	O
inv	*(*(double))
[	O
r	double
]	O
=	O
invmem	*(double)
+	O
r	double
*	O
nrc	int
;	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
nrc	int
;	O
c	int
++	O
)	O
{	O
if	O
(	O
r	double
==	O
c	int
)	O
inv	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
=	O
1.0	int
;	O
else	O
inv	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
=	O
0.0	int
;	O
}	O
}	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
nrc	int
;	O
c	int
++	O
)	O
{	O
if	O
(	O
a	double
[	O
c	int
]	O
[	O
c	int
]	O
!=	O
0.0	int
)	O
{	O
tmp	double
=	O
a	double
[	O
c	int
]	O
[	O
c	int
]	O
;	O
for	O
(	O
r	double
=	O
c	int
+	O
1	int
;	O
r	double
<	O
nrc	int
;	O
r	double
++	O
)	O
{	O
mult	double
=	O
a	double
[	O
r	double
]	O
[	O
c	int
]	O
/	O
tmp	double
;	O
a	double
[	O
r	double
]	O
[	O
c	int
]	O
=	O
0.0	int
;	O
for	O
(	O
cc	int
=	O
c	int
+	O
1	int
;	O
cc	int
<	O
nrc	int
;	O
cc	int
++	O
)	O
{	O
a	double
[	O
r	double
]	O
[	O
cc	int
]	O
-=	O
mult	double
*	O
a	double
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
a	double
[	O
r	double
]	O
[	O
cc	int
]	O
)	O
<	O
dap_tol	double
*	O
tmp	double
)	O
a	double
[	O
r	double
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
}	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
nrc	int
;	O
cc	int
++	O
)	O
{	O
inv	*(*(double))
[	O
r	double
]	O
[	O
cc	int
]	O
-=	O
mult	double
*	O
inv	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
inv	*(*(double))
[	O
r	double
]	O
[	O
cc	int
]	O
)	O
<	O
dap_tol	double
*	O
tmp	double
)	O
inv	*(*(double))
[	O
r	double
]	O
[	O
cc	int
]	O
=	O
0.0	int
;	O
}	O
}	O
}	O
else	O
return	O
0	int
;	O
}	O
for	O
(	O
c	int
=	O
nrc	int
-	O
1	int
;	O
c	int
>=	O
0	int
;	O
--	O
c	int
)	O
{	O
tmp	double
=	O
a	double
[	O
c	int
]	O
[	O
c	int
]	O
;	O
for	O
(	O
cc	int
=	O
c	int
+	O
1	int
;	O
cc	int
<	O
nrc	int
;	O
cc	int
++	O
)	O
a	double
[	O
c	int
]	O
[	O
cc	int
]	O
/=	O
tmp	double
;	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
nrc	int
;	O
cc	int
++	O
)	O
inv	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
/=	O
tmp	double
;	O
for	O
(	O
r	double
=	O
c	int
-	O
1	int
;	O
r	double
>=	O
0	int
;	O
--	O
r	double
)	O
{	O
tmp	double
=	O
a	double
[	O
r	double
]	O
[	O
c	int
]	O
;	O
for	O
(	O
cc	int
=	O
c	int
;	O
cc	int
<	O
nrc	int
;	O
cc	int
++	O
)	O
a	double
[	O
r	double
]	O
[	O
cc	int
]	O
-=	O
tmp	double
*	O
a	double
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
for	O
(	O
cc	int
=	O
0	int
;	O
cc	int
<	O
nrc	int
;	O
cc	int
++	O
)	O
inv	*(*(double))
[	O
r	double
]	O
[	O
cc	int
]	O
-=	O
tmp	double
*	O
inv	*(*(double))
[	O
c	int
]	O
[	O
cc	int
]	O
;	O
}	O
}	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nrc	int
;	O
r	double
++	O
)	O
for	O
(	O
c	int
=	O
0	int
;	O
c	int
<	O
nrc	int
;	O
c	int
++	O
)	O
a	double
[	O
r	double
]	O
[	O
c	int
]	O
=	O
inv	*(*(double))
[	O
r	double
]	O
[	O
c	int
]	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
invmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
inv	*(*(double))
,	O
""	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
static	O
double	O
irls	(*(*(double)),*(*(double)),*(double),*(double),*(*(double)),int,int)->(double)
(	O
double	O
*	O
*	O
x	array(double)
,	O
double	O
*	O
*	O
y	*(*(double))
,	O
double	O
*	O
pr	double
,	O
double	O
*	O
beta0	*(double)
,	O
double	O
*	O
*	O
cov	*(*(double))
,	O
int	O
nx	int
,	O
int	O
nobs	int
)	O
{	O
int	O
i	int
,	O
j	int
;	O
int	O
n	int
;	O
double	O
*	O
beta1	*(double)
;	O
double	O
*	O
v	int
;	O
double	O
*	O
step	()->(int)
;	O
double	O
loglike0	double
,	O
loglike1	double
;	O
int	O
niter	int
;	O
double	O
maxv	double
;	O
double	O
maxcov	double
;	O
double	O
tmp	double
;	O
beta1	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	*(char)
)	O
;	O
v	int
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	*(char)
)	O
;	O
step	()->(int)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
beta1	*(double)
[	O
i	int
]	O
=	O
0.0	int
;	O
for	O
(	O
loglike1	double
=	O
0.0	int
,	O
n	int
=	O
0	int
;	O
n	int
<	O
nobs	int
;	O
n	int
++	O
)	O
{	O
pr	double
[	O
n	int
]	O
=	O
0.5	int
;	O
loglike1	double
+=	O
y	*(*(double))
[	O
1	int
]	O
[	O
n	int
]	O
;	O
}	O
loglike1	double
*=	O
log	(double)->(double)
(	O
0.5	int
)	O
;	O
niter	int
=	O
0	int
;	O
do	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
beta0	*(double)
[	O
i	int
]	O
=	O
beta1	*(double)
[	O
i	int
]	O
;	O
loglike0	double
=	O
loglike1	double
;	O
for	O
(	O
i	int
=	O
0	int
,	O
maxv	double
=	O
0.0	int
,	O
maxcov	double
=	O
0.0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
v	int
[	O
i	int
]	O
=	O
0.0	int
,	O
n	int
=	O
0	int
;	O
n	int
<	O
nobs	int
;	O
n	int
++	O
)	O
v	int
[	O
i	int
]	O
+=	O
x	array(double)
[	O
i	int
]	O
[	O
n	int
]	O
*	O
(	O
y	*(*(double))
[	O
0	int
]	O
[	O
n	int
]	O
-	O
y	*(*(double))
[	O
1	int
]	O
[	O
n	int
]	O
*	O
pr	double
[	O
n	int
]	O
)	O
;	O
if	O
(	O
(	O
tmp	double
=	O
fabs	(double)->(double)
(	O
v	int
[	O
i	int
]	O
)	O
)	O
>	O
maxv	double
)	O
maxv	double
=	O
tmp	double
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nx	int
;	O
j	int
++	O
)	O
{	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
=	O
0.0	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nobs	int
;	O
n	int
++	O
)	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
+=	O
y	*(*(double))
[	O
1	int
]	O
[	O
n	int
]	O
*	O
pr	double
[	O
n	int
]	O
*	O
(	O
1.0	int
-	O
pr	double
[	O
n	int
]	O
)	O
*	O
x	array(double)
[	O
i	int
]	O
[	O
n	int
]	O
*	O
x	array(double)
[	O
j	int
]	O
[	O
n	int
]	O
;	O
if	O
(	O
(	O
tmp	double
=	O
fabs	(double)->(double)
(	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
)	O
)	O
>	O
maxcov	double
)	O
maxcov	double
=	O
tmp	double
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
v	int
[	O
i	int
]	O
)	O
<	O
dap_ctol	double
*	O
maxv	double
)	O
v	int
[	O
i	int
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nx	int
;	O
j	int
++	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
)	O
<	O
dap_ctol	double
*	O
maxcov	double
)	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
=	O
0.0	int
;	O
}	O
}	O
if	O
(	O
!	O
dap_invert	(*(*(double)),int)->(int)
(	O
cov	*(*(double))
,	O
nx	int
)	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(irls) X'DX matrix is singular\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
step	()->(int)
[	O
i	int
]	O
=	O
0.0	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nx	int
;	O
j	int
++	O
)	O
step	()->(int)
[	O
i	int
]	O
+=	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
*	O
v	int
[	O
j	int
]	O
;	O
}	O
for	O
(	O
;	O
niter	int
<=	O
dap_maxiter	int
;	O
niter	int
++	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
beta1	*(double)
[	O
i	int
]	O
=	O
beta0	*(double)
[	O
i	int
]	O
+	O
step	()->(int)
[	O
i	int
]	O
;	O
for	O
(	O
n	int
=	O
0	int
,	O
loglike1	double
=	O
0.0	int
;	O
n	int
<	O
nobs	int
;	O
n	int
++	O
)	O
{	O
for	O
(	O
pr	double
[	O
n	int
]	O
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
pr	double
[	O
n	int
]	O
+=	O
x	array(double)
[	O
i	int
]	O
[	O
n	int
]	O
*	O
beta1	*(double)
[	O
i	int
]	O
;	O
pr	double
[	O
n	int
]	O
=	O
1.0	int
/	O
(	O
1.0	int
+	O
exp	(double)->(double)
(	O
-	O
pr	double
[	O
n	int
]	O
)	O
)	O
;	O
loglike1	double
+=	O
y	*(*(double))
[	O
0	int
]	O
[	O
n	int
]	O
*	O
log	(double)->(double)
(	O
pr	double
[	O
n	int
]	O
)	O
+	O
(	O
y	*(*(double))
[	O
1	int
]	O
[	O
n	int
]	O
-	O
y	*(*(double))
[	O
0	int
]	O
[	O
n	int
]	O
)	O
*	O
log	(double)->(double)
(	O
1.0	int
-	O
pr	double
[	O
n	int
]	O
)	O
;	O
}	O
if	O
(	O
loglike1	double
>=	O
loglike0	double
)	O
break	O
;	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
step	()->(int)
[	O
i	int
]	O
*=	O
0.5	int
;	O
}	O
}	O
}	O
while	O
(	O
++	O
niter	int
<=	O
dap_maxiter	int
&&	O
vdiff	(*(double),*(double),int)->(double)
(	O
beta1	*(double)
,	O
beta0	*(double)
,	O
nx	int
)	O
>	O
dap_ctol	double
*	O
vlen	(*(double),int)->(double)
(	O
beta0	*(double)
,	O
nx	int
)	O
)	O
;	O
if	O
(	O
niter	int
>	O
dap_maxiter	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Failed to converge after %d iterations.\n"	*(char)
,	O
dap_maxiter	int
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
beta1	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
v	int
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
step	()->(int)
,	O
""	*(char)
)	O
;	O
return	O
loglike0	double
;	O
}	O
void	O
logreg1	(*(*(double)),*(*(double)),int,int,int,*(int),*(int),*(int),*(int),int,double,int,int,int,array(int))->(void)
(	O
double	O
*	O
*	O
y	*(*(double))
,	O
double	O
*	O
*	O
x	array(double)
,	O
int	O
nx0	int
,	O
int	O
nx	int
,	O
int	O
nobs	int
,	O
int	O
*	O
varv	array(int)
,	O
int	O
*	O
xvarv	*(int)
,	O
int	O
*	O
markv	array(int)
,	O
int	O
*	O
xmarkv	*(int)
,	O
int	O
nmark	int
,	O
double	O
level	double
,	O
int	O
param1n	int
,	O
int	O
param2n	int
,	O
int	O
covn	int
,	O
int	O
partv	array(int)
[	O
]	O
)	O
{	O
int	O
typen	int
;	O
double	O
*	O
covmem	*(double)
;	O
double	O
*	O
*	O
cov	*(*(double))
;	O
double	O
*	O
pr	double
;	O
double	O
*	O
beta	*(double)
;	O
int	O
i	int
,	O
j	int
;	O
double	O
tmp	double
,	O
tmp2	double
;	O
double	O
loglike0	double
,	O
loglike1	double
;	O
static	O
double	O
npt	double
;	O
double	O
xi	double
,	O
xj	double
;	O
double	O
logit	double
;	O
double	O
selogit	double
;	O
int	O
ntrials	int
;	O
int	O
v	int
;	O
covmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxvar	int
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
cov	*(*(double))
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
dap_maxvar	int
;	O
i	int
++	O
)	O
cov	*(*(double))
[	O
i	int
]	O
=	O
covmem	*(double)
+	O
i	int
*	O
dap_maxvar	int
;	O
beta	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
,	O
""	*(char)
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(logreg1) Missing _type_ variable.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
pr	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
nobs	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Reduced | full model regressors:"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx0	int
;	O
i	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
i	int
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" |"	*(char)
)	O
;	O
while	O
(	O
i	int
<	O
nx	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
i	int
++	O
]	O
]	O
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of observations = %d\n"	*(char)
,	O
nobs	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
ntrials	int
=	O
0	int
;	O
i	int
<	O
nobs	int
;	O
i	int
++	O
)	O
ntrials	int
+=	O
(	O
int	O
)	O
rint	(double)->(double)
(	O
y	*(*(double))
[	O
1	int
]	O
[	O
i	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of trials = %d\n"	*(char)
,	O
ntrials	int
)	O
;	O
if	O
(	O
varv	array(int)
[	O
nx	int
+	O
1	int
]	O
>=	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Events / Trials: %s / %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
nx	int
]	O
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
nx	int
+	O
1	int
]	O
]	O
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Events / Trials: %s / %d\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
nx	int
]	O
]	O
,	O
-	O
varv	array(int)
[	O
nx	int
+	O
1	int
]	O
)	O
;	O
loglike0	double
=	O
irls	(*(*(double)),*(*(double)),*(double),*(double),*(*(double)),int,int)->(double)
(	O
x	array(double)
,	O
y	*(*(double))
,	O
pr	double
,	O
beta	*(double)
,	O
cov	*(*(double))
,	O
nx0	int
,	O
nobs	int
)	O
;	O
loglike1	double
=	O
irls	(*(*(double)),*(*(double)),*(double),*(double),*(*(double)),int,int)->(double)
(	O
x	array(double)
,	O
y	*(*(double))
,	O
pr	double
,	O
beta	*(double)
,	O
cov	*(*(double))
,	O
nx	int
,	O
nobs	int
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
pr	double
,	O
""	*(char)
)	O
;	O
dap_ono	int
=	O
2	int
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
partv	array(int)
[	O
v	int
]	O
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_int	*(int)
[	O
partv	array(int)
[	O
v	int
]	O
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
partv	array(int)
[	O
v	int
]	O
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"-2 (Lred - Lfull) = %.6g = ChiSq0[%d]\n"	*(char)
,	O
tmp	double
=	O
-	O
2.0	int
*	O
(	O
loglike0	double
-	O
loglike1	double
)	O
,	O
nx	int
-	O
nx0	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[ChiSq > ChiSq0] = %.5f\n\n"	*(char)
,	O
0.00001	int
*	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
probchisq	(double,int)->(double)
(	O
fabs	(double)->(double)
(	O
tmp	double
)	O
,	O
nx	int
-	O
nx0	int
)	O
)	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"  Parameter           Estimate    Std Error   Wald ChiSq  Prob[ChiSq>Wald ChiSq]\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
tmp	double
=	O
sqrt	(double)->(double)
(	O
cov	*(*(double))
[	O
i	int
]	O
[	O
i	int
]	O
)	O
;	O
tmp2	double
=	O
beta	*(double)
[	O
i	int
]	O
*	O
beta	*(double)
[	O
i	int
]	O
/	O
cov	*(*(double))
[	O
i	int
]	O
[	O
i	int
]	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"  %-15s %12.6g %12.6g %12.6g  %14.5f\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
i	int
]	O
]	O
,	O
beta	*(double)
[	O
i	int
]	O
,	O
tmp	double
,	O
tmp2	double
,	O
0.00001	int
*	O
ceil	(double)->(double)
(	O
100000.0	int
*	O
probchisq	(double,int)->(double)
(	O
fabs	(double)->(double)
(	O
tmp2	double
)	O
,	O
1	int
)	O
)	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"ESTIMATE"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param2n	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
i	int
]	O
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param1n	int
]	O
,	O
""	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
covn	int
]	O
=	O
beta	*(double)
[	O
i	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"COVAR"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param1n	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
i	int
]	O
]	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nx	int
;	O
j	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_str	*(*(char))
[	O
param2n	int
]	O
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
j	int
]	O
]	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
covn	int
]	O
=	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
}	O
dap_ono	int
=	O
0	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
level	double
)	O
<	O
1.0	int
)	O
npt	double
=	O
-	O
zpoint	(double)->(double)
(	O
0.5	int
*	O
(	O
1.0	int
-	O
level	double
)	O
)	O
;	O
else	O
npt	double
=	O
0.0	int
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
=	O
1.0	int
;	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
<	O
0	int
)	O
{	O
dap_rewind	()->(void)
(	O
)	O
;	O
step	()->(int)
(	O
)	O
;	O
}	O
while	O
(	O
matchmark	(*(int),*(int),int,double)->(int)
(	O
markv	array(int)
,	O
xmarkv	*(int)
,	O
nmark	int
,	O
level	double
)	O
)	O
{	O
dap_ono	int
=	O
0	int
;	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
>=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
i	int
]	O
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
1	int
]	O
.	O
do_dbl	*(double)
[	O
xvarv	*(int)
[	O
i	int
-	O
1	int
]	O
]	O
;	O
}	O
for	O
(	O
logit	double
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
logit	double
+=	O
beta	*(double)
[	O
i	int
]	O
*	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
i	int
]	O
]	O
;	O
for	O
(	O
selogit	double
=	O
0.0	int
,	O
i	int
=	O
0	int
;	O
i	int
<	O
nx	int
;	O
i	int
++	O
)	O
{	O
xi	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
i	int
]	O
]	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nx	int
;	O
j	int
++	O
)	O
{	O
xj	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
j	int
]	O
]	O
;	O
selogit	double
+=	O
xi	double
*	O
cov	*(*(double))
[	O
i	int
]	O
[	O
j	int
]	O
*	O
xj	double
;	O
}	O
}	O
selogit	double
=	O
sqrt	(double)->(double)
(	O
selogit	double
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"PRED"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
]	O
]	O
=	O
1.0	int
/	O
(	O
1.0	int
+	O
exp	(double)->(double)
(	O
-	O
logit	double
)	O
)	O
;	O
output	()->(void)
(	O
)	O
;	O
if	O
(	O
npt	double
!=	O
0.0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LOWER"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
]	O
]	O
=	O
1.0	int
/	O
(	O
1.0	int
+	O
exp	(double)->(double)
(	O
-	O
logit	double
+	O
npt	double
*	O
selogit	double
)	O
)	O
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"UPPER"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
]	O
]	O
=	O
1.0	int
/	O
(	O
1.0	int
+	O
exp	(double)->(double)
(	O
-	O
logit	double
-	O
npt	double
*	O
selogit	double
)	O
)	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
>=	O
0	int
)	O
dap_ono	int
=	O
1	int
;	O
dap_mark	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
step	()->(int)
(	O
)	O
)	O
break	O
;	O
}	O
dap_ono	int
=	O
0	int
;	O
if	O
(	O
xvarv	*(int)
[	O
0	int
]	O
>=	O
0	int
)	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
covmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
cov	*(*(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
beta	*(double)
,	O
""	*(char)
)	O
;	O
}	O
void	O
logreg	(array(char),array(char),array(char),array(char),array(char),array(char),double)->(void)
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
yspec	array(char)
,	O
char	O
*	O
x0list	array(char)
,	O
char	O
*	O
x1list	array(char)
,	O
char	O
*	O
marks	array(char)
,	O
char	O
*	O
xname	array(char)
,	O
double	O
level	double
)	O
{	O
char	O
*	O
regname	*(char)
;	O
int	O
*	O
varv	array(int)
;	O
int	O
*	O
xvarv	*(int)
;	O
int	O
nx0	int
,	O
nx1	int
;	O
int	O
nx	int
;	O
int	O
nxx	int
;	O
int	O
*	O
markv	array(int)
;	O
int	O
*	O
xmarkv	*(int)
;	O
int	O
nmark	int
;	O
double	O
*	O
xmem	*(double)
;	O
double	O
*	O
*	O
x	array(double)
;	O
double	O
*	O
ymem	*(double)
;	O
double	O
*	O
y	*(*(double))
[	O
2	int
]	O
;	O
int	O
v	int
;	O
int	O
nobs	int
;	O
int	O
more	int
;	O
char	O
*	O
covset	*(char)
;	O
int	O
param1n	int
,	O
param2n	int
,	O
covn	int
;	O
int	O
paramlen1	int
,	O
paramlen	int
;	O
char	O
paramstr	array(char)
[	O
14	int
]	O
;	O
char	O
*	O
partstr	*(char)
;	O
int	O
*	O
partv	array(int)
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(logreg) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
varv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
xvarv	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
xmarkv	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
partv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
regname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
dap_suffix	(array(char),array(char),array(char))->(void)
(	O
regname	*(char)
,	O
fname	array(char)
,	O
".lgr"	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
dap_vd	(array(char),int)->(int)
(	O
"_intercept_ -1"	*(char)
,	O
0	int
)	O
;	O
nx0	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
"_intercept_"	*(char)
,	O
varv	array(int)
,	O
dap_maxvar	int
)	O
;	O
nx0	int
+=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x0list	array(char)
,	O
varv	array(int)
+	O
1	int
,	O
dap_maxvar	int
)	O
;	O
nx1	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x1list	array(char)
,	O
varv	array(int)
+	O
nx0	int
,	O
dap_maxvar	int
)	O
;	O
nx	int
=	O
nx0	int
+	O
nx1	int
;	O
dap_parsey	(array(char),array(int))->(void)
(	O
yspec	array(char)
,	O
varv	array(int)
+	O
nx	int
)	O
;	O
xmem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nx	int
*	O
dap_maxval	int
,	O
"dap_maxval"	*(char)
)	O
;	O
x	array(double)
=	O
(	O
double	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
*	O
)	O
*	O
nx	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nx	int
;	O
v	int
++	O
)	O
x	array(double)
[	O
v	int
]	O
=	O
xmem	*(double)
+	O
v	int
*	O
dap_maxval	int
;	O
ymem	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
2	int
*	O
dap_maxval	int
,	O
"dap_maxval"	*(char)
)	O
;	O
y	*(*(double))
[	O
0	int
]	O
=	O
ymem	*(double)
;	O
y	*(*(double))
[	O
1	int
]	O
=	O
ymem	*(double)
+	O
dap_maxval	int
;	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
covset	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
covset	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
covset	*(char)
,	O
".cov"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
1	int
,	O
paramlen	int
=	O
strlen	(*(char))->(long)
(	O
"_intercept_"	*(char)
)	O
;	O
v	int
<	O
nx	int
;	O
v	int
++	O
)	O
{	O
paramlen1	int
=	O
strlen	(*(char))->(long)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
if	O
(	O
paramlen1	int
>	O
paramlen	int
)	O
paramlen	int
=	O
paramlen1	int
;	O
}	O
dap_ono	int
=	O
2	int
;	O
dap_clearobs	(*(char))->(int)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
paramstr	array(char)
,	O
"_param1_ %d"	*(char)
,	O
paramlen	int
)	O
;	O
param1n	int
=	O
dap_vd	(array(char),int)->(int)
(	O
paramstr	array(char)
,	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
paramstr	array(char)
,	O
"_param2_ %d"	*(char)
,	O
paramlen	int
)	O
;	O
param2n	int
=	O
dap_vd	(array(char),int)->(int)
(	O
paramstr	array(char)
,	O
0	int
)	O
;	O
covn	int
=	O
dap_vd	(array(char),int)->(int)
(	O
"_cov_ -1"	*(char)
,	O
0	int
)	O
;	O
partstr	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
partstr	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
partstr	*(char)
+	O
strlen	(*(char))->(long)
(	O
partstr	*(char)
)	O
,	O
" %d"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
partv	array(int)
[	O
v	int
]	O
=	O
dap_vd	(array(char),int)->(int)
(	O
partstr	*(char)
,	O
1	int
)	O
;	O
}	O
outset	(array(char),array(char))->(void)
(	O
covset	*(char)
,	O
""	*(char)
)	O
;	O
dap_ono	int
=	O
1	int
;	O
if	O
(	O
xname	array(char)
&&	O
xname	array(char)
[	O
0	int
]	O
)	O
{	O
inset	(array(char))->(void)
(	O
xname	array(char)
)	O
;	O
nxx	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x0list	array(char)
,	O
xvarv	*(int)
,	O
dap_maxvar	int
)	O
;	O
nxx	int
+=	O
dap_list	(array(char),array(int),int)->(int)
(	O
x1list	array(char)
,	O
xvarv	*(int)
+	O
nxx	int
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
nxx	int
!=	O
nx	int
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(logreg) %s and %s have different numbers (%d and %d) of x-variables.\n"	*(char)
,	O
fname	array(char)
,	O
xname	array(char)
,	O
nx	int
-	O
1	int
,	O
nxx	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
nmark	int
)	O
{	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
(	O
xmarkv	*(int)
[	O
v	int
]	O
=	O
dap_varnum	(array(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(logreg) Mark variable %s in %s not in %s.\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
,	O
fname	array(char)
,	O
xname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
step	()->(int)
(	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(logreg) No data in %s.\n"	*(char)
,	O
(	O
xname	array(char)
[	O
0	int
]	O
?	O
xname	array(char)
:	O
fname	array(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
xvarv	*(int)
[	O
0	int
]	O
=	O
-	O
1	int
;	O
xmarkv	*(int)
[	O
0	int
]	O
=	O
-	O
1	int
;	O
}	O
dap_ono	int
=	O
0	int
;	O
outset	(array(char),array(char))->(void)
(	O
regname	*(char)
,	O
""	*(char)
)	O
;	O
for	O
(	O
nobs	int
=	O
0	int
,	O
dap_mark	()->(void)
(	O
)	O
,	O
more	int
=	O
1	int
;	O
more	int
;	O
nobs	int
++	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
logreg1	(*(*(double)),*(*(double)),int,int,int,*(int),*(int),*(int),*(int),int,double,int,int,int,array(int))->(void)
(	O
y	*(*(double))
,	O
x	array(double)
,	O
nx0	int
,	O
nx	int
,	O
nobs	int
,	O
varv	array(int)
,	O
xvarv	*(int)
,	O
markv	array(int)
,	O
xmarkv	*(int)
,	O
nmark	int
,	O
level	double
,	O
param1n	int
,	O
param2n	int
,	O
covn	int
,	O
partv	array(int)
)	O
;	O
nobs	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
x	array(double)
[	O
0	int
]	O
[	O
nobs	int
]	O
=	O
1.0	int
;	O
for	O
(	O
v	int
=	O
1	int
;	O
v	int
<	O
nx	int
;	O
v	int
++	O
)	O
x	array(double)
[	O
v	int
]	O
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
v	int
]	O
]	O
;	O
y	*(*(double))
[	O
0	int
]	O
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
]	O
]	O
;	O
if	O
(	O
varv	array(int)
[	O
nx	int
+	O
1	int
]	O
>=	O
0	int
)	O
y	*(*(double))
[	O
1	int
]	O
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
dap_ono	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
nx	int
+	O
1	int
]	O
]	O
;	O
else	O
y	*(*(double))
[	O
1	int
]	O
[	O
nobs	int
]	O
=	O
-	O
(	O
double	O
)	O
varv	array(int)
[	O
nx	int
+	O
1	int
]	O
;	O
}	O
else	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(logreg) Too many data.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
regname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xvarv	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xmarkv	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xmem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
x	array(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
ymem	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
covset	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
partstr	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
partv	array(int)
,	O
""	*(char)
)	O
;	O
}	O
typedef	O
struct	O
{	O
int	O
val_class	int
;	O
double	O
val_val	double
;	O
}	O
value	struct(int,double)
;	O
static	O
int	O
valcmp1	(*(struct(int,double)),*(struct(int,double)))->(int)
(	O
value	struct(int,double)
*	O
v1	*(double)
,	O
value	struct(int,double)
*	O
v2	*(struct(int,double))
)	O
{	O
if	O
(	O
v1	*(double)
->	O
val_val	double
<	O
v2	*(struct(int,double))
->	O
val_val	double
)	O
return	O
-	O
1	int
;	O
if	O
(	O
v1	*(double)
->	O
val_val	double
>	O
v2	*(struct(int,double))
->	O
val_val	double
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
double	O
probkol	(double,double)->(double)
(	O
double	O
d	double
,	O
double	O
n	int
)	O
{	O
double	O
lambda	double
;	O
double	O
l	int
;	O
double	O
k	double
;	O
double	O
term	double
;	O
int	O
sign	int
;	O
if	O
(	O
d	double
==	O
0.0	int
)	O
return	O
0.0	int
;	O
lambda	double
=	O
d	double
*	O
sqrt	(double)->(double)
(	O
n	int
)	O
;	O
lambda	double
*=	O
-	O
2.0	int
*	O
lambda	double
;	O
for	O
(	O
k	double
=	O
1.0	int
,	O
l	int
=	O
0.0	int
,	O
sign	int
=	O
1	int
;	O
(	O
term	double
=	O
exp	(double)->(double)
(	O
k	double
*	O
k	double
*	O
lambda	double
)	O
)	O
>	O
dap_ktol	double
;	O
k	double
+=	O
1.0	int
,	O
sign	int
=	O
-	O
sign	int
)	O
l	int
+=	O
(	O
sign	int
>	O
0	int
?	O
term	double
:	O
-	O
term	double
)	O
;	O
return	O
2.0	int
*	O
l	int
;	O
}	O
static	O
int	O
(	O
*	O
pvalcmp1	*(()->(int))
)	O
(	O
)	O
=	O
&	O
valcmp1	(*(struct(int,double)),*(struct(int,double)))->(int)
;	O
static	O
void	O
nonpar1	(*(struct(int,double)),int,*(*(char)),int,*(int),int)->(void)
(	O
value	struct(int,double)
*	O
val	*(struct(int,double))
,	O
int	O
nval	int
,	O
char	O
*	O
*	O
level	double
,	O
int	O
nlevels	int
,	O
int	O
*	O
varv	array(int)
,	O
int	O
nvar	int
)	O
{	O
int	O
rank	int
,	O
ntied	int
,	O
tied	int
;	O
int	O
tottied	int
;	O
double	O
tiecorr	double
;	O
double	O
drank	double
;	O
double	O
dn	double
;	O
double	O
stat0	double
,	O
stat	double
;	O
double	O
prob	double
;	O
int	O
*	O
levnobs	*(int)
;	O
int	O
minnobs	int
;	O
int	O
*	O
rank1	*(int)
;	O
int	O
r	double
;	O
int	O
levn	int
;	O
double	O
*	O
sumr	*(double)
;	O
double	O
tmp	double
,	O
tmp1	double
;	O
double	O
kold	double
;	O
int	O
kolr	int
;	O
double	O
kolval	double
;	O
double	O
f	*(()->(double))
[	O
2	int
]	O
;	O
tmp	double
=	O
0.0	int
;	O
tmp1	double
=	O
0.0	int
;	O
kolr	int
=	O
0	int
;	O
kolval	double
=	O
0.0	int
;	O
dap_swap	()->(void)
(	O
)	O
;	O
levnobs	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
nlevels	int
,	O
""	*(char)
)	O
;	O
sumr	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
nlevels	int
,	O
""	*(char)
)	O
;	O
rank1	*(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxex2	int
,	O
"dap_maxex2"	*(char)
)	O
;	O
dn	double
=	O
(	O
double	O
)	O
nval	int
;	O
if	O
(	O
nvar	int
==	O
2	int
)	O
{	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
val	*(struct(int,double))
,	O
nval	int
,	O
sizeof	O
(	O
value	struct(int,double)
)	O
,	O
pvalcmp1	*(()->(int))
)	O
;	O
for	O
(	O
levn	int
=	O
0	int
;	O
levn	int
<	O
nlevels	int
;	O
levn	int
++	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
=	O
0	int
;	O
for	O
(	O
rank	int
=	O
0	int
;	O
rank	int
<	O
nval	int
;	O
rank	int
++	O
)	O
levnobs	*(int)
[	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
]	O
++	O
;	O
if	O
(	O
nlevels	int
==	O
2	int
)	O
{	O
for	O
(	O
rank	int
=	O
0	int
,	O
stat0	double
=	O
0.0	int
,	O
stat	double
=	O
0.0	int
,	O
tottied	int
=	O
0	int
,	O
tiecorr	double
=	O
0.0	int
,	O
f	*(()->(double))
[	O
0	int
]	O
=	O
0.0	int
,	O
f	*(()->(double))
[	O
1	int
]	O
=	O
0.0	int
,	O
kold	double
=	O
0.0	int
;	O
rank	int
<	O
nval	int
;	O
)	O
{	O
for	O
(	O
ntied	int
=	O
1	int
;	O
rank	int
+	O
ntied	int
<	O
nval	int
&&	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
+	O
ntied	int
]	O
.	O
val_val	double
-	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
)	O
<	O
dap_tol	double
*	O
(	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
+	O
ntied	int
]	O
.	O
val_val	double
)	O
+	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
)	O
)	O
;	O
ntied	int
++	O
)	O
;	O
drank	double
=	O
(	O
(	O
double	O
)	O
(	O
2	int
*	O
rank	int
+	O
ntied	int
+	O
1	int
)	O
)	O
/	O
2.0	int
;	O
if	O
(	O
ntied	int
>	O
1	int
)	O
{	O
tottied	int
+=	O
ntied	int
;	O
tiecorr	double
+=	O
(	O
double	O
)	O
(	O
ntied	int
*	O
(	O
ntied	int
+	O
1	int
)	O
*	O
(	O
ntied	int
-	O
1	int
)	O
)	O
;	O
}	O
for	O
(	O
tied	int
=	O
0	int
;	O
tied	int
<	O
ntied	int
;	O
tied	int
++	O
,	O
rank	int
++	O
)	O
{	O
if	O
(	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
)	O
{	O
stat0	double
+=	O
drank	double
;	O
f	*(()->(double))
[	O
1	int
]	O
+=	O
1.0	int
;	O
}	O
else	O
{	O
stat	double
+=	O
drank	double
;	O
f	*(()->(double))
[	O
0	int
]	O
+=	O
1.0	int
;	O
}	O
tmp1	double
=	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
;	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
=	O
drank	double
;	O
}	O
tmp	double
=	O
fabs	(double)->(double)
(	O
f	*(()->(double))
[	O
1	int
]	O
/	O
(	O
(	O
double	O
)	O
levnobs	*(int)
[	O
1	int
]	O
)	O
-	O
f	*(()->(double))
[	O
0	int
]	O
/	O
(	O
(	O
double	O
)	O
levnobs	*(int)
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
tmp	double
>	O
kold	double
)	O
{	O
kold	double
=	O
tmp	double
;	O
kolr	int
=	O
rank	int
;	O
kolval	double
=	O
tmp1	double
;	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nResponse: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Classified by %s:"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
1	int
]	O
]	O
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nlevels	int
;	O
r	double
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s (%d)"	*(char)
,	O
level	double
[	O
r	double
]	O
,	O
levnobs	*(int)
[	O
r	double
]	O
)	O
;	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of tied observations = %d\n"	*(char)
,	O
tottied	int
)	O
;	O
if	O
(	O
levnobs	*(int)
[	O
0	int
]	O
<	O
levnobs	*(int)
[	O
1	int
]	O
)	O
{	O
levn	int
=	O
0	int
;	O
stat0	double
=	O
stat	double
;	O
}	O
else	O
levn	int
=	O
1	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nWilcoxon rank sum statistic S0 (%s) = %g\n"	*(char)
,	O
level	double
[	O
0	int
]	O
,	O
stat0	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Expected under H0 = %g\n"	*(char)
,	O
(	O
(	O
double	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
)	O
*	O
(	O
dn	double
+	O
1.0	int
)	O
/	O
2.0	int
)	O
;	O
stat0	double
=	O
fabs	(double)->(double)
(	O
stat0	double
-	O
(	O
(	O
double	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
)	O
*	O
(	O
dn	double
+	O
1.0	int
)	O
/	O
2.0	int
)	O
;	O
if	O
(	O
nval	int
<	O
dap_maxex2	int
)	O
{	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
levnobs	*(int)
[	O
levn	int
]	O
;	O
r	double
++	O
)	O
rank1	*(int)
[	O
r	double
]	O
=	O
r	double
;	O
rank1	*(int)
[	O
r	double
]	O
=	O
nval	int
;	O
for	O
(	O
prob	double
=	O
0.0	int
;	O
;	O
)	O
{	O
for	O
(	O
r	double
=	O
0	int
,	O
stat	double
=	O
-	O
(	O
(	O
double	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
)	O
*	O
(	O
dn	double
+	O
1.0	int
)	O
/	O
2.0	int
;	O
r	double
<	O
levnobs	*(int)
[	O
levn	int
]	O
;	O
r	double
++	O
)	O
stat	double
+=	O
val	*(struct(int,double))
[	O
rank1	*(int)
[	O
r	double
]	O
]	O
.	O
val_val	double
;	O
if	O
(	O
fabs	(double)->(double)
(	O
stat	double
)	O
>=	O
stat0	double
)	O
prob	double
+=	O
1.0	int
;	O
for	O
(	O
r	double
=	O
levnobs	*(int)
[	O
levn	int
]	O
-	O
1	int
;	O
r	double
>=	O
0	int
&&	O
rank1	*(int)
[	O
r	double
]	O
+	O
1	int
==	O
rank1	*(int)
[	O
r	double
+	O
1	int
]	O
;	O
--	O
r	double
)	O
;	O
if	O
(	O
r	double
>=	O
0	int
)	O
{	O
rank1	*(int)
[	O
r	double
]	O
++	O
;	O
for	O
(	O
r	double
++	O
;	O
r	double
<	O
levnobs	*(int)
[	O
levn	int
]	O
;	O
r	double
++	O
)	O
rank1	*(int)
[	O
r	double
]	O
=	O
rank1	*(int)
[	O
r	double
-	O
1	int
]	O
+	O
1	int
;	O
}	O
else	O
break	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[|S - E(S)| >= |S0 - E(S)|] = %.4g (exact)\n"	*(char)
,	O
prob	double
/	O
dap_bincoeff	(double,double)->(double)
(	O
dn	double
,	O
(	O
double	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
stat0	double
>=	O
0.5	int
)	O
stat0	double
-=	O
0.5	int
;	O
prob	double
=	O
2.0	int
*	O
(	O
1.0	int
-	O
probz	(double)->(double)
(	O
stat0	double
/	O
sqrt	(double)->(double)
(	O
(	O
(	O
double	O
)	O
(	O
levnobs	*(int)
[	O
0	int
]	O
*	O
levnobs	*(int)
[	O
1	int
]	O
)	O
)	O
*	O
(	O
(	O
dn	double
+	O
1.0	int
)	O
-	O
tiecorr	double
/	O
(	O
dn	double
*	O
(	O
dn	double
-	O
1.0	int
)	O
)	O
)	O
/	O
12.0	int
)	O
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[|S - E(S)| >= |S0 - E(S)|] = %.4g\n"	*(char)
,	O
prob	double
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(normal approximation, with continuity correction)\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nKolmogorov statistic D0 = %g\n"	*(char)
,	O
kold	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Maximum deviation at %g for level %s\n"	*(char)
,	O
kolval	double
,	O
level	double
[	O
val	*(struct(int,double))
[	O
kolr	int
]	O
.	O
val_class	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[D >= D0] = %.4g\n"	*(char)
,	O
probkol	(double,double)->(double)
(	O
kold	double
,	O
(	O
(	O
double	O
)	O
(	O
levnobs	*(int)
[	O
0	int
]	O
*	O
levnobs	*(int)
[	O
1	int
]	O
)	O
)	O
/	O
dn	double
)	O
)	O
;	O
}	O
else	O
if	O
(	O
nlevels	int
>	O
2	int
)	O
{	O
for	O
(	O
levn	int
=	O
0	int
;	O
levn	int
<	O
nlevels	int
;	O
levn	int
++	O
)	O
sumr	*(double)
[	O
levn	int
]	O
=	O
0.0	int
;	O
for	O
(	O
rank	int
=	O
0	int
,	O
tottied	int
=	O
0	int
,	O
tiecorr	double
=	O
0.0	int
;	O
rank	int
<	O
nval	int
;	O
)	O
{	O
for	O
(	O
ntied	int
=	O
1	int
;	O
rank	int
+	O
ntied	int
<	O
nval	int
&&	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
+	O
ntied	int
]	O
.	O
val_val	double
-	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
)	O
<	O
dap_tol	double
*	O
(	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
+	O
ntied	int
]	O
.	O
val_val	double
)	O
+	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
)	O
)	O
;	O
ntied	int
++	O
)	O
;	O
drank	double
=	O
(	O
(	O
double	O
)	O
(	O
2	int
*	O
rank	int
+	O
ntied	int
+	O
1	int
)	O
)	O
/	O
2.0	int
;	O
if	O
(	O
ntied	int
>	O
1	int
)	O
{	O
tottied	int
+=	O
ntied	int
;	O
tiecorr	double
+=	O
(	O
double	O
)	O
(	O
ntied	int
*	O
(	O
ntied	int
+	O
1	int
)	O
*	O
(	O
ntied	int
-	O
1	int
)	O
)	O
;	O
}	O
for	O
(	O
tied	int
=	O
0	int
;	O
tied	int
<	O
ntied	int
;	O
tied	int
++	O
,	O
rank	int
++	O
)	O
{	O
sumr	*(double)
[	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
]	O
+=	O
drank	double
;	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
=	O
drank	double
;	O
}	O
}	O
for	O
(	O
stat0	double
=	O
0.0	int
,	O
levn	int
=	O
0	int
;	O
levn	int
<	O
nlevels	int
;	O
levn	int
++	O
)	O
{	O
tmp	double
=	O
sumr	*(double)
[	O
levn	int
]	O
/	O
(	O
(	O
double	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
)	O
-	O
0.5	int
*	O
(	O
dn	double
+	O
1.0	int
)	O
;	O
stat0	double
+=	O
tmp	double
*	O
tmp	double
*	O
(	O
double	O
)	O
levnobs	*(int)
[	O
levn	int
]	O
;	O
}	O
stat0	double
*=	O
12.0	int
/	O
(	O
dn	double
*	O
(	O
dn	double
+	O
1.0	int
)	O
-	O
tiecorr	double
/	O
(	O
dn	double
-	O
1.0	int
)	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nResponse: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Classified by %s:"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
1	int
]	O
]	O
)	O
;	O
for	O
(	O
levn	int
=	O
0	int
,	O
minnobs	int
=	O
levnobs	*(int)
[	O
0	int
]	O
;	O
levn	int
<	O
nlevels	int
;	O
levn	int
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s (%d)"	*(char)
,	O
level	double
[	O
levn	int
]	O
,	O
levnobs	*(int)
[	O
levn	int
]	O
)	O
;	O
if	O
(	O
levnobs	*(int)
[	O
levn	int
]	O
<	O
minnobs	int
)	O
minnobs	int
=	O
levnobs	*(int)
[	O
levn	int
]	O
;	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of tied observations = %d\n"	*(char)
,	O
tottied	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Kruskal-Wallis statistic T0 = %g\n"	*(char)
,	O
stat0	double
)	O
;	O
prob	double
=	O
probchisq	(double,int)->(double)
(	O
stat0	double
,	O
nlevels	int
-	O
1	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[T >= T0] = %g (chi-squared approximation, df = %d)\n"	*(char)
,	O
prob	double
,	O
nlevels	int
-	O
1	int
)	O
;	O
if	O
(	O
(	O
nlevels	int
==	O
3	int
&&	O
minnobs	int
<	O
6	int
)	O
||	O
minnobs	int
<	O
5	int
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Warning: sample may be too small for this approximation.\n"	*(char)
,	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nResponse: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of non-zero observations = %d\n"	*(char)
,	O
nval	int
)	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
val	*(struct(int,double))
,	O
nval	int
,	O
sizeof	O
(	O
value	struct(int,double)
)	O
,	O
pvalcmp1	*(()->(int))
)	O
;	O
for	O
(	O
rank	int
=	O
0	int
,	O
stat0	double
=	O
0.0	int
,	O
tottied	int
=	O
0	int
,	O
tiecorr	double
=	O
0	int
,	O
levnobs	*(int)
[	O
0	int
]	O
=	O
0	int
;	O
rank	int
<	O
nval	int
;	O
)	O
{	O
for	O
(	O
ntied	int
=	O
1	int
;	O
rank	int
+	O
ntied	int
<	O
nval	int
&&	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
+	O
ntied	int
]	O
.	O
val_val	double
-	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
)	O
<	O
dap_tol	double
*	O
(	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
+	O
ntied	int
]	O
.	O
val_val	double
)	O
+	O
fabs	(double)->(double)
(	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
)	O
)	O
;	O
ntied	int
++	O
)	O
;	O
drank	double
=	O
(	O
(	O
double	O
)	O
(	O
2	int
*	O
rank	int
+	O
ntied	int
+	O
1	int
)	O
)	O
/	O
2.0	int
;	O
if	O
(	O
ntied	int
>	O
1	int
)	O
{	O
tottied	int
+=	O
ntied	int
;	O
tiecorr	double
+=	O
(	O
(	O
double	O
)	O
(	O
ntied	int
*	O
(	O
ntied	int
+	O
1	int
)	O
*	O
(	O
ntied	int
-	O
1	int
)	O
)	O
)	O
/	O
2.0	int
;	O
}	O
for	O
(	O
tied	int
=	O
0	int
;	O
tied	int
<	O
ntied	int
;	O
tied	int
++	O
,	O
rank	int
++	O
)	O
{	O
if	O
(	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
)	O
{	O
stat0	double
+=	O
drank	double
;	O
levnobs	*(int)
[	O
0	int
]	O
++	O
;	O
}	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
=	O
drank	double
;	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of tied observations = %d\n"	*(char)
,	O
tottied	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of positive observations = %d\n"	*(char)
,	O
levnobs	*(int)
[	O
0	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nWilcoxon signed rank statistic W0 = %g\n"	*(char)
,	O
stat0	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Expected under H0 = %g\n"	*(char)
,	O
(	O
dn	double
*	O
(	O
dn	double
+	O
1.0	int
)	O
)	O
/	O
4.0	int
)	O
;	O
stat0	double
=	O
fabs	(double)->(double)
(	O
stat0	double
-	O
(	O
dn	double
*	O
(	O
dn	double
+	O
1.0	int
)	O
)	O
/	O
4.0	int
)	O
;	O
if	O
(	O
nval	int
<=	O
dap_maxex1	int
)	O
{	O
for	O
(	O
rank	int
=	O
0	int
;	O
rank	int
<	O
nval	int
;	O
rank	int
++	O
)	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
=	O
0	int
;	O
prob	double
=	O
0.0	int
;	O
do	O
{	O
for	O
(	O
rank	int
=	O
0	int
,	O
stat	double
=	O
-	O
(	O
dn	double
*	O
(	O
dn	double
+	O
1.0	int
)	O
)	O
/	O
4.0	int
;	O
rank	int
<	O
nval	int
;	O
rank	int
++	O
)	O
{	O
if	O
(	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
)	O
stat	double
+=	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_val	double
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
stat	double
)	O
>=	O
stat0	double
)	O
prob	double
+=	O
1.0	int
;	O
for	O
(	O
rank	int
=	O
0	int
;	O
rank	int
<	O
nval	int
;	O
rank	int
++	O
)	O
{	O
if	O
(	O
!	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
)	O
{	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
val	*(struct(int,double))
[	O
rank	int
]	O
.	O
val_class	int
=	O
0	int
;	O
}	O
}	O
while	O
(	O
rank	int
<	O
nval	int
)	O
;	O
for	O
(	O
rank	int
=	O
0	int
;	O
rank	int
<	O
nval	int
;	O
rank	int
++	O
)	O
prob	double
/=	O
2.0	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[|W - E(W)| >= |W0 - E(W)|] = %.4g (exact)\n"	*(char)
,	O
prob	double
)	O
;	O
}	O
else	O
{	O
prob	double
=	O
2.0	int
*	O
probt	(double,int)->(double)
(	O
stat0	double
*	O
sqrt	(double)->(double)
(	O
(	O
dn	double
-	O
1.0	int
)	O
/	O
(	O
dn	double
*	O
(	O
dn	double
*	O
(	O
dn	double
+	O
1.0	int
)	O
*	O
(	O
2.0	int
*	O
dn	double
+	O
1.0	int
)	O
-	O
tiecorr	double
)	O
/	O
24.0	int
-	O
stat0	double
*	O
stat0	double
)	O
)	O
,	O
nval	int
-	O
1	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Prob[|W - E(W)| >= |W0 - E(W)|] = %.4g\n"	*(char)
,	O
prob	double
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(t-approximation, df = %d, with continuity correction)\n"	*(char)
,	O
nval	int
-	O
1	int
)	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
levnobs	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
rank1	*(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
sumr	*(double)
,	O
""	*(char)
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
}	O
static	O
int	O
findlev	(*(char),*(*(char)),*(int))->(int)
(	O
char	O
*	O
levname	*(char)
,	O
char	O
*	O
*	O
level	double
,	O
int	O
*	O
nlevels	int
)	O
{	O
int	O
l	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<	O
*	O
nlevels	int
;	O
l	int
++	O
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
levname	*(char)
,	O
level	double
[	O
l	int
]	O
)	O
)	O
return	O
l	int
;	O
}	O
if	O
(	O
*	O
nlevels	int
<	O
dap_maxlev	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
level	double
[	O
*	O
nlevels	int
]	O
,	O
levname	*(char)
)	O
;	O
return	O
(	O
*	O
nlevels	int
)	O
++	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(findlev) Too many levels (%s)\n"	*(char)
,	O
levname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
void	O
nonparam	(*(char),*(char),*(char))->(void)
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
variables	*(char)
,	O
char	O
*	O
marks	array(char)
)	O
{	O
int	O
varv	array(int)
[	O
2	int
]	O
;	O
int	O
nvar	int
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
value	struct(int,double)
*	O
val	*(struct(int,double))
;	O
int	O
nval	int
;	O
int	O
nobs	int
;	O
char	O
*	O
levmem	*(char)
;	O
char	O
*	O
*	O
level	double
;	O
int	O
nlevels	int
;	O
int	O
more	int
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(nonparam) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
"dap_maxvar"	*(char)
)	O
;	O
levmem	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxlev	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
,	O
"dap_maxlev, dap_strlen"	*(char)
)	O
;	O
level	double
=	O
(	O
char	O
*	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
dap_maxlev	int
,	O
"dap_maxlev"	*(char)
)	O
;	O
for	O
(	O
nlevels	int
=	O
0	int
;	O
nlevels	int
<	O
dap_maxlev	int
;	O
nlevels	int
++	O
)	O
level	double
[	O
nlevels	int
]	O
=	O
levmem	*(char)
+	O
nlevels	int
*	O
(	O
dap_strlen	int
+	O
1	int
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
nvar	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
variables	*(char)
,	O
varv	array(int)
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
!	O
nvar	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(nonparam) No variables specified.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
nvar	int
>	O
2	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(nonparam) At most one response and one class variable allowed\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(nonparam) Variable must be dap_double: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
nvar	int
==	O
2	int
&&	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
1	int
]	O
]	O
<=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(nonparam) Classification variable must be dap_char: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
1	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
val	*(struct(int,double))
=	O
(	O
value	struct(int,double)
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
value	struct(int,double)
)	O
*	O
dap_maxval	int
,	O
"dap_maxval"	*(char)
)	O
;	O
for	O
(	O
more	int
=	O
1	int
,	O
nlevels	int
=	O
0	int
,	O
nval	int
=	O
0	int
,	O
nobs	int
=	O
0	int
;	O
more	int
;	O
nobs	int
++	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Number of observations = %d\n"	*(char)
,	O
nobs	int
)	O
;	O
nonpar1	(*(struct(int,double)),int,*(*(char)),int,*(int),int)->(void)
(	O
val	*(struct(int,double))
,	O
nval	int
,	O
level	double
,	O
nlevels	int
,	O
varv	array(int)
,	O
nvar	int
)	O
;	O
if	O
(	O
!	O
more	int
)	O
break	O
;	O
nval	int
=	O
0	int
;	O
nobs	int
=	O
0	int
;	O
nlevels	int
=	O
0	int
;	O
}	O
if	O
(	O
nval	int
>=	O
dap_maxval	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(nonparam) Too many values.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
nvar	int
==	O
2	int
)	O
{	O
val	*(struct(int,double))
[	O
nval	int
]	O
.	O
val_class	int
=	O
findlev	(*(char),*(*(char)),*(int))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
varv	array(int)
[	O
1	int
]	O
]	O
,	O
level	double
,	O
&	O
nlevels	int
)	O
;	O
val	*(struct(int,double))
[	O
nval	int
]	O
.	O
val_val	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
nval	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
!=	O
0.0	int
)	O
{	O
val	*(struct(int,double))
[	O
nval	int
]	O
.	O
val_class	int
=	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
>	O
0.0	int
)	O
;	O
val	*(struct(int,double))
[	O
nval	int
]	O
.	O
val_val	double
=	O
fabs	(double)->(double)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
nval	int
++	O
;	O
}	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
val	*(struct(int,double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
levmem	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
level	double
,	O
""	*(char)
)	O
;	O
}	O
