void	O
time2date	(long,array(char))->(void)
(	O
time_t	long
unixtime	long
,	O
char	O
date	*(char)
[	O
datesize	O
]	O
)	O
{	O
register	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
const	O
*	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
time2tm	(long,bool)->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
unixtime	long
,	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
date	*(char)
,	O
proper_dot_2	O
(	O
"%.2d.%.2d.%.2d.%.2d.%.2d.%.2d"	*(char)
,	O
"%02d.%02d.%02d.%02d.%02d.%02d"	*(char)
)	O
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_year	int
+	O
(	O
(	O
unsigned	O
)	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_year	int
<	O
100	int
?	O
0	int
:	O
1900	int
)	O
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mon	int
+	O
1	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_mday	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_hour	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_min	int
,	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
->	O
tm_sec	int
)	O
;	O
}	O
static	O
time_t	long
str2time_checked	(*(char),long,long)->(long)
(	O
char	O
const	O
*	O
source	*(char)
,	O
time_t	long
default_time	long
,	O
long	O
default_zone	long
)	O
{	O
time_t	long
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
=	O
str2time	(*(char),long,long)->(long)
(	O
source	*(char)
,	O
default_time	long
,	O
default_zone	long
)	O
;	O
if	O
(	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
==	O
-	O
1	int
)	O
PFATAL	O
(	O
"unknown date/time: %s"	*(char)
,	O
source	*(char)
)	O
;	O
return	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
;	O
}	O
void	O
str2date	(*(char),array(char))->(void)
(	O
char	O
const	O
*	O
source	*(char)
,	O
char	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
[	O
datesize	O
]	O
)	O
{	O
time2date	(long,array(char))->(void)
(	O
str2time_checked	(*(char),long,long)->(long)
(	O
source	*(char)
,	O
BE	O
(	O
now	long
)	O
,	O
BE	O
(	O
zone_offset	struct(bool,long)
.	O
valid	bool
)	O
?	O
BE	O
(	O
zone_offset	struct(bool,long)
.	O
seconds	long
)	O
:	O
(	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
?	O
TM_LOCAL_ZONE	O
:	O
0	int
)	O
)	O
,	O
target	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))
)	O
;	O
}	O
time_t	long
date2time	(array(char))->(long)
(	O
char	O
const	O
source	*(char)
[	O
datesize	O
]	O
)	O
{	O
char	O
s	*(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
return	O
str2time_checked	(*(char),long,long)->(long)
(	O
date2str	(array(char),array(char))->(*(char))
(	O
source	*(char)
,	O
s	*(char)
)	O
,	O
(	O
time_t	long
)	O
0	int
,	O
0	int
)	O
;	O
}	O
void	O
zone_set	(*(char))->(void)
(	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
if	O
(	O
(	O
BE	O
(	O
zone_offset	struct(bool,long)
.	O
valid	bool
)	O
=	O
!	O
!	O
(	O
*	O
s	*(char)
)	O
)	O
)	O
{	O
long	O
zone	long
;	O
char	O
const	O
*	O
zonetail	*(char)
=	O
parzone	(*(char),*(long))->(*(char))
(	O
s	*(char)
,	O
&	O
zone	long
)	O
;	O
if	O
(	O
!	O
zonetail	*(char)
||	O
*	O
zonetail	*(char)
)	O
PERR	O
(	O
"%s: not a known time zone"	*(char)
,	O
s	*(char)
)	O
;	O
else	O
BE	O
(	O
zone_offset	struct(bool,long)
.	O
seconds	long
)	O
=	O
zone	long
;	O
}	O
}	O
char	O
const	O
*	O
date2str	(array(char),array(char))->(*(char))
(	O
char	O
const	O
date	*(char)
[	O
datesize	O
]	O
,	O
char	O
datebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
)	O
{	O
register	O
char	O
const	O
*	O
p	*(char)
=	O
date	*(char)
;	O
while	O
(	O
*	O
p	*(char)
++	O
!=	O
'.'	O
)	O
continue	O
;	O
if	O
(	O
!	O
BE	O
(	O
zone_offset	struct(bool,long)
.	O
valid	bool
)	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
datebuf	array(char)
,	O
(	O
"19%.*s/%.2s/%.2s %.2s:%.2s:%s"	*(char)
+	O
(	O
date	*(char)
[	O
2	int
]	O
==	O
'.'	O
&&	O
VERSION	O
(	O
5	int
)	O
<=	O
BE	O
(	O
version	int
)	O
?	O
0	int
:	O
2	int
)	O
)	O
,	O
(	O
int	O
)	O
(	O
p	*(char)
-	O
date	*(char)
-	O
1	int
)	O
,	O
date	*(char)
,	O
p	*(char)
,	O
p	*(char)
+	O
3	int
,	O
p	*(char)
+	O
6	int
,	O
p	*(char)
+	O
9	int
,	O
p	*(char)
+	O
12	int
)	O
;	O
else	O
{	O
char	O
*	O
q	*(char)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
const	O
*	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
z_stash	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
int	O
non_hour	int
,	O
w	int
;	O
long	O
zone	long
;	O
char	O
c	int
;	O
p	*(char)
=	O
date	*(char)
;	O
MORE	O
(	O
tm_year	int
)	O
;	O
if	O
(	O
'.'	O
!=	O
date	*(char)
[	O
2	int
]	O
)	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
.	O
tm_year	int
-=	O
1900	int
;	O
MORE	O
(	O
tm_mon	int
)	O
;	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
.	O
tm_mon	int
--	O
;	O
MORE	O
(	O
tm_mday	int
)	O
;	O
MORE	O
(	O
tm_hour	int
)	O
;	O
MORE	O
(	O
tm_min	int
)	O
;	O
MORE	O
(	O
tm_sec	int
)	O
;	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
.	O
tm_wday	int
=	O
-	O
1	int
;	O
zone	long
=	O
BE	O
(	O
zone_offset	struct(bool,long)
.	O
seconds	long
)	O
;	O
if	O
(	O
zone	long
==	O
TM_LOCAL_ZONE	O
)	O
{	O
time_t	long
u	struct(*(char),*(char))
=	O
tm2time	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),bool,int)->(long)
(	O
&	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
,	O
false	int
,	O
TM_UNDEFINED	O
)	O
,	O
d	long
;	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
local_tm	(*(long),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
u	struct(*(char),*(char))
,	O
&	O
z_stash	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
d	long
=	O
difftm	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
,	O
&	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
)	O
;	O
zone	long
=	O
(	O
time_t	long
)	O
-	O
1	int
<	O
0	int
||	O
d	long
<	O
-	O
d	long
?	O
d	long
:	O
-	O
(	O
long	O
)	O
-	O
d	long
;	O
}	O
else	O
{	O
adjzone	(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),long)->(void)
(	O
&	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
,	O
zone	long
)	O
;	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
=	O
&	O
t	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),int,int,long))
;	O
}	O
c	int
=	O
'+'	O
;	O
if	O
(	O
zone	long
<	O
0	int
)	O
{	O
zone	long
=	O
-	O
zone	long
;	O
c	int
=	O
'-'	O
;	O
}	O
w	int
=	O
sprintf	(*(char),*(char))->(int)
(	O
datebuf	array(char)
,	O
proper_dot_2	O
(	O
"%.2d-%.2d-%.2d %.2d:%.2d:%.2d%c%.2d"	*(char)
,	O
"%02d-%02d-%02d %02d:%02d:%02d%c%02d"	*(char)
)	O
,	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_year	int
+	O
1900	int
,	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mon	int
+	O
1	int
,	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_mday	int
,	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_hour	int
,	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_min	int
,	O
z	*(struct(int,int,int,int,int,int,int,int,int,long,*(char)))
->	O
tm_sec	int
,	O
c	int
,	O
(	O
int	O
)	O
(	O
zone	long
/	O
(	O
60	int
*	O
60	int
)	O
)	O
)	O
;	O
if	O
(	O
(	O
non_hour	int
=	O
zone	long
%	O
(	O
60	int
*	O
60	int
)	O
)	O
)	O
{	O
const	O
char	O
*	O
fmt	*(char)
=	O
proper_dot_2	O
(	O
":%.2d"	*(char)
,	O
":%02d"	*(char)
)	O
;	O
w	int
+=	O
sprintf	(*(char),*(char))->(int)
(	O
datebuf	array(char)
+	O
w	int
,	O
fmt	*(char)
,	O
non_hour	int
/	O
60	int
)	O
;	O
if	O
(	O
(	O
non_hour	int
%=	O
60	int
)	O
)	O
w	int
+=	O
sprintf	(*(char),*(char))->(int)
(	O
datebuf	array(char)
+	O
w	int
,	O
fmt	*(char)
,	O
non_hour	int
)	O
;	O
}	O
}	O
return	O
datebuf	array(char)
;	O
}	O
