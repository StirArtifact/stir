static	O
mp_limb_t	long
id_to_n	(long)->(long)
(	O
mp_limb_t	long
id	long
)	O
{	O
return	O
id	long
*	O
3	int
+	O
1	int
+	O
(	O
id	long
&	O
1	int
)	O
;	O
}	O
static	O
mp_limb_t	long
n_to_bit	(long)->(long)
(	O
mp_limb_t	long
n	long
)	O
{	O
return	O
(	O
(	O
n	long
-	O
5	int
)	O
|	O
1	int
)	O
/	O
3U	int
;	O
}	O
static	O
mp_limb_t	long
limb_apprsqrt	(long)->(long)
(	O
mp_limb_t	long
x	long
)	O
{	O
int	O
s	array(char)
;	O
ASSERT	O
(	O
x	long
>	O
2	int
)	O
;	O
count_leading_zeros	O
(	O
s	array(char)
,	O
x	long
-	O
1	int
)	O
;	O
s	array(char)
=	O
GMP_LIMB_BITS	int
-	O
1	int
-	O
s	array(char)
;	O
return	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
s	array(char)
>>	O
1	int
)	O
)	O
+	O
(	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
(	O
(	O
s	array(char)
-	O
1	int
)	O
>>	O
1	int
)	O
)	O
;	O
}	O
static	O
void	O
mpz_2multiswing_1	(*(struct(int,int,*(long))),long,*(long),*(long))->(void)
(	O
mpz_ptr	*(struct(int,int,*(long)))
x	long
,	O
mp_limb_t	long
n	long
,	O
mp_ptr	*(long)
sieve	*(long)
,	O
mp_ptr	*(long)
factors	*(long)
)	O
{	O
mp_limb_t	long
prod	long
,	O
max_prod	long
;	O
mp_size_t	long
j	long
;	O
ASSERT	O
(	O
n	long
>=	O
26	int
)	O
;	O
j	long
=	O
0	int
;	O
prod	long
=	O
-	O
(	O
n	long
&	O
1	int
)	O
;	O
n	long
&=	O
~	O
CNST_LIMB	O
(	O
1	int
)	O
;	O
prod	long
=	O
(	O
prod	long
&	O
n	long
)	O
+	O
1	int
;	O
max_prod	long
=	O
GMP_NUMB_MAX	O
/	O
(	O
n	long
-	O
1	int
)	O
;	O
SWING_A_PRIME	O
(	O
3	int
,	O
n	long
,	O
prod	long
,	O
max_prod	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
{	O
mp_limb_t	long
s	array(char)
;	O
{	O
mp_limb_t	long
prime	long
;	O
s	array(char)
=	O
limb_apprsqrt	(long)->(long)
(	O
n	long
)	O
;	O
ASSERT	O
(	O
s	array(char)
>=	O
5	int
)	O
;	O
s	array(char)
=	O
n_to_bit	(long)->(long)
(	O
s	array(char)
)	O
;	O
LOOP_ON_SIEVE_BEGIN	O
(	O
prime	long
,	O
n_to_bit	(long)->(long)
(	O
5	int
)	O
,	O
s	array(char)
,	O
0	int
,	O
sieve	*(long)
)	O
;	O
SWING_A_PRIME	O
(	O
prime	long
,	O
n	long
,	O
prod	long
,	O
max_prod	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
LOOP_ON_SIEVE_END	O
;	O
s	array(char)
++	O
;	O
}	O
ASSERT	O
(	O
max_prod	long
<=	O
GMP_NUMB_MAX	O
/	O
3	int
)	O
;	O
ASSERT	O
(	O
bit_to_n	O
(	O
s	array(char)
)	O
*	O
bit_to_n	O
(	O
s	array(char)
)	O
>	O
n	long
)	O
;	O
ASSERT	O
(	O
s	array(char)
<=	O
n_to_bit	(long)->(long)
(	O
n	long
/	O
3	int
)	O
)	O
;	O
{	O
mp_limb_t	long
prime	long
;	O
mp_limb_t	long
l_max_prod	long
=	O
max_prod	long
*	O
3	int
;	O
LOOP_ON_SIEVE_BEGIN	O
(	O
prime	long
,	O
s	array(char)
,	O
n_to_bit	(long)->(long)
(	O
n	long
/	O
3	int
)	O
,	O
0	int
,	O
sieve	*(long)
)	O
;	O
SH_SWING_A_PRIME	O
(	O
prime	long
,	O
n	long
,	O
prod	long
,	O
l_max_prod	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
LOOP_ON_SIEVE_END	O
;	O
}	O
}	O
{	O
mp_limb_t	long
prime	long
;	O
LOOP_ON_SIEVE_BEGIN	O
(	O
prime	long
,	O
n_to_bit	(long)->(long)
(	O
n	long
>>	O
1	int
)	O
+	O
1	int
,	O
n_to_bit	(long)->(long)
(	O
n	long
)	O
,	O
0	int
,	O
sieve	*(long)
)	O
;	O
FACTOR_LIST_STORE	O
(	O
prime	long
,	O
prod	long
,	O
max_prod	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
LOOP_ON_SIEVE_END	O
;	O
}	O
if	O
(	O
LIKELY	O
(	O
j	long
!=	O
0	int
)	O
)	O
{	O
factors	*(long)
[	O
j	long
++	O
]	O
=	O
prod	long
;	O
mpz_prodlimbs	O
(	O
x	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
}	O
else	O
{	O
PTR	O
(	O
x	long
)	O
[	O
0	int
]	O
=	O
prod	long
;	O
SIZ	O
(	O
x	long
)	O
=	O
1	int
;	O
}	O
}	O
void	O
mpz_oddfac_1	O
(	O
mpz_ptr	*(struct(int,int,*(long)))
x	long
,	O
mp_limb_t	long
n	long
,	O
unsigned	O
flag	int
)	O
{	O
ASSERT	O
(	O
n	long
<=	O
GMP_NUMB_MAX	O
)	O
;	O
ASSERT	O
(	O
flag	int
==	O
0	int
||	O
(	O
flag	int
==	O
1	int
&&	O
n	long
>	O
ODD_FACTORIAL_TABLE_LIMIT	O
&&	O
ABOVE_THRESHOLD	O
(	O
n	long
,	O
FAC_DSC_THRESHOLD	int
)	O
)	O
)	O
;	O
if	O
(	O
n	long
<=	O
ODD_FACTORIAL_TABLE_LIMIT	O
)	O
{	O
PTR	O
(	O
x	long
)	O
[	O
0	int
]	O
=	O
__gmp_oddfac_table	array(long)
[	O
n	long
]	O
;	O
SIZ	O
(	O
x	long
)	O
=	O
1	int
;	O
}	O
else	O
if	O
(	O
n	long
<=	O
ODD_DOUBLEFACTORIAL_TABLE_LIMIT	O
+	O
1	int
)	O
{	O
mp_ptr	*(long)
px	*(long)
;	O
px	*(long)
=	O
MPZ_NEWALLOC	O
(	O
x	long
,	O
2	int
)	O
;	O
umul_ppmm	O
(	O
px	*(long)
[	O
1	int
]	O
,	O
px	*(long)
[	O
0	int
]	O
,	O
__gmp_odd2fac_table	array(long)
[	O
(	O
n	long
-	O
1	int
)	O
>>	O
1	int
]	O
,	O
__gmp_oddfac_table	array(long)
[	O
n	long
>>	O
1	int
]	O
)	O
;	O
SIZ	O
(	O
x	long
)	O
=	O
2	int
;	O
}	O
else	O
{	O
unsigned	O
s	array(char)
;	O
mp_ptr	*(long)
factors	*(long)
;	O
s	array(char)
=	O
0	int
;	O
{	O
mp_limb_t	long
tn	long
;	O
mp_limb_t	long
prod	long
,	O
max_prod	long
,	O
i	long
;	O
mp_size_t	long
j	long
;	O
TMP_SDECL	O
;	O
for	O
(	O
tn	long
=	O
n	long
;	O
ABOVE_THRESHOLD	O
(	O
tn	long
,	O
FAC_DSC_THRESHOLD	int
)	O
;	O
s	array(char)
++	O
)	O
tn	long
>>=	O
1	int
;	O
j	long
=	O
0	int
;	O
TMP_SMARK	O
;	O
factors	*(long)
=	O
TMP_SALLOC_LIMBS	O
(	O
1	int
+	O
tn	long
/	O
FACTORS_PER_LIMB	O
)	O
;	O
ASSERT	O
(	O
tn	long
>=	O
FACTORS_PER_LIMB	O
)	O
;	O
prod	long
=	O
1	int
;	O
max_prod	long
=	O
GMP_NUMB_MAX	O
/	O
FAC_DSC_THRESHOLD	int
;	O
ASSERT	O
(	O
tn	long
>	O
ODD_DOUBLEFACTORIAL_TABLE_LIMIT	O
+	O
1	int
)	O
;	O
do	O
{	O
i	long
=	O
ODD_DOUBLEFACTORIAL_TABLE_LIMIT	O
+	O
2	int
;	O
factors	*(long)
[	O
j	long
++	O
]	O
=	O
ODD_DOUBLEFACTORIAL_TABLE_MAX	O
;	O
do	O
{	O
FACTOR_LIST_STORE	O
(	O
i	long
,	O
prod	long
,	O
max_prod	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
i	long
+=	O
2	int
;	O
}	O
while	O
(	O
i	long
<=	O
tn	long
)	O
;	O
max_prod	long
<<=	O
1	int
;	O
tn	long
>>=	O
1	int
;	O
}	O
while	O
(	O
tn	long
>	O
ODD_DOUBLEFACTORIAL_TABLE_LIMIT	O
+	O
1	int
)	O
;	O
factors	*(long)
[	O
j	long
++	O
]	O
=	O
prod	long
;	O
factors	*(long)
[	O
j	long
++	O
]	O
=	O
__gmp_odd2fac_table	array(long)
[	O
(	O
tn	long
-	O
1	int
)	O
>>	O
1	int
]	O
;	O
factors	*(long)
[	O
j	long
++	O
]	O
=	O
__gmp_oddfac_table	array(long)
[	O
tn	long
>>	O
1	int
]	O
;	O
mpz_prodlimbs	O
(	O
x	long
,	O
factors	*(long)
,	O
j	long
)	O
;	O
TMP_SFREE	O
;	O
}	O
if	O
(	O
s	array(char)
!=	O
0	int
)	O
{	O
mpz_t	array(struct(int,int,*(long)))
mswing	array(struct(int,int,*(long)))
;	O
mp_ptr	*(long)
sieve	*(long)
;	O
mp_size_t	long
size	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
flag	int
--	O
;	O
size	long
=	O
n	long
/	O
GMP_NUMB_BITS	O
+	O
4	int
;	O
ASSERT	O
(	O
primesieve_size	O
(	O
n	long
-	O
1	int
)	O
<=	O
size	long
-	O
(	O
size	long
/	O
2	int
+	O
1	int
)	O
)	O
;	O
MPZ_TMP_INIT	O
(	O
mswing	array(struct(int,int,*(long)))
,	O
size	long
)	O
;	O
ASSERT_CODE	O
(	O
SIZ	O
(	O
mswing	array(struct(int,int,*(long)))
)	O
=	O
0	int
)	O
;	O
sieve	*(long)
=	O
PTR	O
(	O
mswing	array(struct(int,int,*(long)))
)	O
+	O
size	long
/	O
2	int
+	O
1	int
;	O
size	long
=	O
(	O
gmp_primesieve	O
(	O
sieve	*(long)
,	O
n	long
-	O
1	int
)	O
+	O
1	int
)	O
/	O
log_n_max	(long)->(int)
(	O
n	long
)	O
+	O
1	int
;	O
factors	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
size	long
)	O
;	O
do	O
{	O
mp_ptr	*(long)
square	*(long)
,	O
px	*(long)
;	O
mp_size_t	long
nx	long
,	O
ns	long
;	O
mp_limb_t	long
cy	long
;	O
TMP_DECL	O
;	O
s	array(char)
--	O
;	O
ASSERT	O
(	O
ABSIZ	O
(	O
mswing	array(struct(int,int,*(long)))
)	O
<	O
ALLOC	O
(	O
mswing	array(struct(int,int,*(long)))
)	O
/	O
2	int
)	O
;	O
mpz_2multiswing_1	(*(struct(int,int,*(long))),long,*(long),*(long))->(void)
(	O
mswing	array(struct(int,int,*(long)))
,	O
n	long
>>	O
s	array(char)
,	O
sieve	*(long)
,	O
factors	*(long)
)	O
;	O
TMP_MARK	O
;	O
nx	long
=	O
SIZ	O
(	O
x	long
)	O
;	O
if	O
(	O
s	array(char)
==	O
flag	int
)	O
{	O
size	long
=	O
nx	long
;	O
square	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
size	long
)	O
;	O
MPN_COPY	O
(	O
square	*(long)
,	O
PTR	O
(	O
x	long
)	O
,	O
nx	long
)	O
;	O
}	O
else	O
{	O
size	long
=	O
nx	long
<<	O
1	int
;	O
square	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
size	long
)	O
;	O
mpn_sqr	O
(	O
square	*(long)
,	O
PTR	O
(	O
x	long
)	O
,	O
nx	long
)	O
;	O
size	long
-=	O
(	O
square	*(long)
[	O
size	long
-	O
1	int
]	O
==	O
0	int
)	O
;	O
}	O
ns	long
=	O
SIZ	O
(	O
mswing	array(struct(int,int,*(long)))
)	O
;	O
nx	long
=	O
size	long
+	O
ns	long
;	O
px	*(long)
=	O
MPZ_NEWALLOC	O
(	O
x	long
,	O
nx	long
)	O
;	O
ASSERT	O
(	O
ns	long
<=	O
size	long
)	O
;	O
cy	long
=	O
mpn_mul	O
(	O
px	*(long)
,	O
square	*(long)
,	O
size	long
,	O
PTR	O
(	O
mswing	array(struct(int,int,*(long)))
)	O
,	O
ns	long
)	O
;	O
TMP_FREE	O
;	O
SIZ	O
(	O
x	long
)	O
=	O
nx	long
-	O
(	O
cy	long
==	O
0	int
)	O
;	O
}	O
while	O
(	O
s	array(char)
!=	O
0	int
)	O
;	O
TMP_FREE	O
;	O
}	O
}	O
}	O
