struct	O
_mu_mime_io_buffer	struct(int,*(char),*(struct),*(struct),*(struct),*(struct))
{	O
unsigned	O
int	O
refcnt	int
;	O
char	O
*	O
charset	*(char)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
mu_stream_t	*(struct)
fstream	*(struct)
;	O
}	O
;	O
static	O
int	O
at_hdr	(*(struct),*(char),*(char),*(char),*(char))->(int)
(	O
mu_header_t	*(struct)
hdr	*(struct)
,	O
const	O
char	O
*	O
content_type	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
val	array(int)
,	O
*	O
str	*(char)
;	O
if	O
(	O
!	O
name	*(char)
)	O
{	O
if	O
(	O
filename	*(char)
)	O
{	O
name	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
filename	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
name	*(char)
)	O
name	*(char)
++	O
;	O
else	O
name	*(char)
=	O
filename	*(char)
;	O
}	O
}	O
if	O
(	O
name	*(char)
)	O
{	O
rc	int
=	O
mu_c_str_escape	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
name	*(char)
,	O
"\\\""	*(char)
,	O
NULL	O
,	O
&	O
str	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
val	array(int)
,	O
"%s; name=\"%s\""	*(char)
,	O
content_type	*(char)
,	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
,	O
val	array(int)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
val	array(int)
)	O
;	O
}	O
else	O
rc	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
,	O
content_type	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
filename	*(char)
)	O
{	O
rc	int
=	O
mu_c_str_escape	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
filename	*(char)
,	O
"\\\""	*(char)
,	O
NULL	O
,	O
&	O
str	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
val	array(int)
,	O
"%s; filename=\"%s\""	*(char)
,	O
"attachment"	*(char)
,	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_DISPOSITION	*(char)
,	O
val	array(int)
,	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
val	array(int)
)	O
;	O
}	O
else	O
rc	int
=	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_DISPOSITION	*(char)
,	O
"attachment"	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
mu_header_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	*(char)
,	O
encoding	*(char)
?	O
encoding	*(char)
:	O
"8bit"	*(char)
,	O
1	int
)	O
;	O
}	O
int	O
mu_attachment_create	(*(*(struct)),*(char),*(char),*(char),*(char))->(int)
(	O
mu_message_t	*(struct)
*	O
newmsg	*(*(struct))
,	O
const	O
char	O
*	O
content_type	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
int	O
rc	int
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
if	O
(	O
newmsg	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_header_create	(*(*(struct)),*(char),long)->(int)
(	O
&	O
hdr	*(struct)
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
mu_message_set_header	(*(struct),*(struct),*(void))->(int)
(	O
*	O
newmsg	*(*(struct))
,	O
hdr	*(struct)
,	O
NULL	O
)	O
;	O
rc	int
=	O
at_hdr	(*(struct),*(char),*(char),*(char),*(char))->(int)
(	O
hdr	*(struct)
,	O
content_type	*(char)
,	O
encoding	*(char)
,	O
name	*(char)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
newmsg	*(*(struct))
,	O
NULL	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_attachment_copy_from_stream	(*(struct),*(struct))->(int)
(	O
mu_message_t	*(struct)
att	*(struct)
,	O
mu_stream_t	*(struct)
stream	*(struct)
)	O
{	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_stream_t	*(struct)
bstr	*(struct)
;	O
mu_stream_t	*(struct)
tstream	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
int	O
rc	int
;	O
char	O
*	O
encoding	*(char)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
att	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
rc	int
=	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	*(char)
,	O
&	O
encoding	*(char)
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
return	O
EINVAL	int
;	O
default	O
:	O
return	O
rc	int
;	O
}	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
att	*(struct)
,	O
&	O
body	*(struct)
)	O
;	O
rc	int
=	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
bstr	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
tstream	*(struct)
,	O
stream	*(struct)
,	O
encoding	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
bstr	*(struct)
,	O
tstream	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
tstream	*(struct)
)	O
;	O
}	O
mu_stream_unref	(*(struct))->(void)
(	O
bstr	*(struct)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
encoding	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_attachment_copy_from_file	(*(struct),*(char))->(int)
(	O
mu_message_t	*(struct)
att	*(struct)
,	O
char	O
const	O
*	O
filename	*(char)
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
stream	*(struct)
,	O
filename	*(char)
,	O
MU_STREAM_READ	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_attachment_copy_from_stream	(*(struct),*(struct))->(int)
(	O
att	*(struct)
,	O
stream	*(struct)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
stream	*(struct)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_message_create_attachment	(*(char),*(char),*(char),*(*(struct)))->(int)
(	O
const	O
char	O
*	O
content_type	*(char)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
mu_message_t	*(struct)
*	O
newmsg	*(*(struct))
)	O
{	O
int	O
rc	int
;	O
char	O
const	O
*	O
name	*(char)
;	O
mu_message_t	*(struct)
att	*(struct)
;	O
if	O
(	O
content_type	*(char)
==	O
NULL	O
)	O
content_type	*(char)
=	O
"text/plain"	*(char)
;	O
name	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
filename	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
name	*(char)
)	O
name	*(char)
++	O
;	O
else	O
name	*(char)
=	O
filename	*(char)
;	O
rc	int
=	O
mu_attachment_create	(*(*(struct)),*(char),*(char),*(char),*(char))->(int)
(	O
&	O
att	*(struct)
,	O
content_type	*(char)
,	O
encoding	*(char)
,	O
name	*(char)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
rc	int
=	O
mu_attachment_copy_from_file	(*(struct),*(char))->(int)
(	O
att	*(struct)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
att	*(struct)
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
*	O
newmsg	*(*(struct))
=	O
att	*(struct)
;	O
return	O
rc	int
;	O
}	O
int	O
mu_mime_io_buffer_create	(*(*(struct)))->(int)
(	O
mu_mime_io_buffer_t	*(struct)
*	O
pinfo	*(*(struct))
)	O
{	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
;	O
if	O
(	O
(	O
info	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
info	*(struct)
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
info	*(struct)
->	O
refcnt	int
=	O
1	int
;	O
*	O
pinfo	*(*(struct))
=	O
info	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_mime_io_buffer_set_charset	(*(struct),*(char))->(int)
(	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
,	O
const	O
char	O
*	O
charset	*(char)
)	O
{	O
char	O
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
strdup	(*(char))->(*(char))
(	O
charset	*(char)
)	O
;	O
if	O
(	O
!	O
cp	*(struct(int,int,array(char),array(char)))
)	O
return	O
ENOMEM	int
;	O
free	(*(void))->(void)
(	O
info	*(struct)
->	O
charset	*(char)
)	O
;	O
info	*(struct)
->	O
charset	*(char)
=	O
cp	*(struct(int,int,array(char),array(char)))
;	O
return	O
0	int
;	O
}	O
void	O
mu_mime_io_buffer_sget_charset	(*(struct),*(*(char)))->(void)
(	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
,	O
const	O
char	O
*	O
*	O
charset	*(char)
)	O
{	O
*	O
charset	*(char)
=	O
info	*(struct)
->	O
charset	*(char)
;	O
}	O
int	O
mu_mime_io_buffer_aget_charset	(*(struct),*(*(char)))->(int)
(	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
,	O
const	O
char	O
*	O
*	O
charset	*(char)
)	O
{	O
*	O
charset	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
info	*(struct)
->	O
charset	*(char)
)	O
;	O
if	O
(	O
!	O
charset	*(char)
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
void	O
mu_mime_io_buffer_destroy	(*(*(struct)))->(void)
(	O
mu_mime_io_buffer_t	*(struct)
*	O
pinfo	*(*(struct))
)	O
{	O
if	O
(	O
pinfo	*(*(struct))
&&	O
*	O
pinfo	*(*(struct))
)	O
{	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
=	O
*	O
pinfo	*(*(struct))
;	O
free	(*(void))->(void)
(	O
info	*(struct)
->	O
charset	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
info	*(struct)
)	O
;	O
*	O
pinfo	*(*(struct))
=	O
NULL	O
;	O
}	O
}	O
static	O
void	O
_attachment_free	(*(struct(int,*(char),*(struct),*(struct),*(struct),*(struct))),int)->(void)
(	O
struct	O
_mu_mime_io_buffer	struct(int,*(char),*(struct),*(struct),*(struct),*(struct))
*	O
info	*(struct)
,	O
int	O
free_message	int
)	O
{	O
if	O
(	O
free_message	int
)	O
{	O
if	O
(	O
info	*(struct)
->	O
msg	*(struct)
)	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
info	*(struct)
->	O
msg	*(struct)
,	O
NULL	O
)	O
;	O
else	O
if	O
(	O
info	*(struct)
->	O
hdr	*(struct)
)	O
mu_header_destroy	(*(*(struct)))->(void)
(	O
&	O
info	*(struct)
->	O
hdr	*(struct)
)	O
;	O
}	O
info	*(struct)
->	O
msg	*(struct)
=	O
NULL	O
;	O
info	*(struct)
->	O
hdr	*(struct)
=	O
NULL	O
;	O
info	*(struct)
->	O
stream	*(struct)
=	O
NULL	O
;	O
info	*(struct)
->	O
fstream	*(struct)
=	O
NULL	O
;	O
if	O
(	O
--	O
info	*(struct)
->	O
refcnt	int
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
info	*(struct)
->	O
charset	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
info	*(struct)
)	O
;	O
}	O
}	O
static	O
int	O
_attachment_setup	(*(*(struct(int,*(char),*(struct`),*(struct`),*(struct`),*(struct`)))),*(struct),*(*(struct)))->(int)
(	O
mu_mime_io_buffer_t	*(struct)
*	O
pinfo	*(*(struct))
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
)	O
{	O
int	O
ret	int
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
if	O
(	O
(	O
ret	int
=	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
)	O
!=	O
0	int
||	O
(	O
ret	int
=	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
stream	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
*	O
pstream	*(*(struct))
=	O
stream	*(struct)
;	O
if	O
(	O
*	O
pinfo	*(*(struct))
)	O
{	O
info	*(struct)
=	O
*	O
pinfo	*(*(struct))
;	O
info	*(struct)
->	O
refcnt	int
++	O
;	O
}	O
else	O
{	O
ret	int
=	O
mu_mime_io_buffer_create	(*(*(struct)))->(int)
(	O
&	O
info	*(struct)
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
ret	int
;	O
}	O
*	O
pinfo	*(*(struct))
=	O
info	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_message_save_attachment	(*(struct),*(char),*(struct))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
,	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
)	O
{	O
mu_stream_t	*(struct)
istream	*(struct)
;	O
int	O
ret	int
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
const	O
char	O
*	O
fname	*(char)
=	O
NULL	O
;	O
char	O
*	O
partname	*(char)
=	O
NULL	O
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
(	O
ret	int
=	O
_attachment_setup	(*(*(struct(int,*(char),*(struct`),*(struct`),*(struct`),*(struct`)))),*(struct),*(*(struct)))->(int)
(	O
&	O
info	*(struct)
,	O
msg	*(struct)
,	O
&	O
istream	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
(	O
ret	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
filename	*(char)
==	O
NULL	O
)	O
{	O
ret	int
=	O
mu_message_aget_decoded_attachment_name	(*(struct),*(char),*(*(char)),*(*(char)))->(int)
(	O
msg	*(struct)
,	O
info	*(struct)
->	O
charset	*(char)
,	O
&	O
partname	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
partname	*(char)
)	O
fname	*(char)
=	O
partname	*(char)
;	O
}	O
else	O
fname	*(char)
=	O
filename	*(char)
;	O
if	O
(	O
fname	*(char)
&&	O
(	O
ret	int
=	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
info	*(struct)
->	O
fstream	*(struct)
,	O
fname	*(char)
,	O
MU_STREAM_WRITE	int
|	O
MU_STREAM_CREAT	int
)	O
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
content_encoding	*(char)
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	*(char)
,	O
&	O
content_encoding	*(char)
)	O
)	O
content_encoding	*(char)
=	O
"7bit"	*(char)
;	O
ret	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
info	*(struct)
->	O
stream	*(struct)
,	O
istream	*(struct)
,	O
content_encoding	*(char)
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
}	O
}	O
if	O
(	O
info	*(struct)
->	O
stream	*(struct)
&&	O
istream	*(struct)
)	O
ret	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
info	*(struct)
->	O
fstream	*(struct)
,	O
info	*(struct)
->	O
stream	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
!=	O
EAGAIN	int
&&	O
info	*(struct)
)	O
{	O
mu_stream_close	(*(struct))->(int)
(	O
info	*(struct)
->	O
fstream	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
info	*(struct)
->	O
stream	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
info	*(struct)
->	O
fstream	*(struct)
)	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
istream	*(struct)
)	O
;	O
_attachment_free	(*(struct(int,*(char),*(struct),*(struct),*(struct),*(struct))),int)->(void)
(	O
info	*(struct)
,	O
ret	int
)	O
;	O
if	O
(	O
partname	*(char)
)	O
free	(*(void))->(void)
(	O
partname	*(char)
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
mu_message_encapsulate	(*(struct),*(*(struct)),*(struct))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_message_t	*(struct)
*	O
newmsg	*(*(struct))
,	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
)	O
{	O
mu_stream_t	*(struct)
istream	*(struct)
,	O
ostream	*(struct)
;	O
int	O
ret	int
=	O
0	int
;	O
mu_message_t	*(struct)
tmsg	*(struct)
=	O
NULL	O
;	O
if	O
(	O
newmsg	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
ret	int
=	O
mu_message_create	(*(*(struct)),*(void))->(int)
(	O
&	O
tmsg	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
)	O
return	O
ret	int
;	O
msg	*(struct)
=	O
tmsg	*(struct)
;	O
if	O
(	O
(	O
ret	int
=	O
mu_header_create	(*(*(struct)),*(char),long)->(int)
(	O
&	O
hdr	*(struct)
,	O
MSG822_HEADER	O
,	O
sizeof	O
(	O
MSG822_HEADER	O
)	O
-	O
1	int
)	O
)	O
==	O
0	int
)	O
ret	int
=	O
mu_message_set_header	(*(struct),*(struct),*(void))->(int)
(	O
msg	*(struct)
,	O
hdr	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
msg	*(struct)
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
}	O
if	O
(	O
(	O
ret	int
=	O
_attachment_setup	(*(*(struct(int,*(char),*(struct`),*(struct`),*(struct`),*(struct`)))),*(struct),*(*(struct)))->(int)
(	O
&	O
info	*(struct)
,	O
msg	*(struct)
,	O
&	O
ostream	*(struct)
)	O
)	O
!=	O
0	int
)	O
{	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
tmsg	*(struct)
,	O
NULL	O
)	O
;	O
return	O
ret	int
;	O
}	O
info	*(struct)
->	O
msg	*(struct)
=	O
msg	*(struct)
;	O
if	O
(	O
ret	int
==	O
0	int
&&	O
(	O
ret	int
=	O
mu_message_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
istream	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
istream	*(struct)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
ret	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
ostream	*(struct)
,	O
istream	*(struct)
,	O
0	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
istream	*(struct)
)	O
;	O
}	O
if	O
(	O
ret	int
==	O
0	int
)	O
*	O
newmsg	*(*(struct))
=	O
info	*(struct)
->	O
msg	*(struct)
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
ostream	*(struct)
)	O
;	O
_attachment_free	(*(struct(int,*(char),*(struct),*(struct),*(struct),*(struct))),int)->(void)
(	O
info	*(struct)
,	O
ret	int
&&	O
ret	int
!=	O
EAGAIN	int
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
mu_message_unencapsulate	(*(struct),*(*(struct)),*(struct))->(int)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
mu_message_t	*(struct)
*	O
newmsg	*(*(struct))
,	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
)	O
{	O
int	O
ret	int
=	O
0	int
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_stream_t	*(struct)
istream	*(struct)
;	O
if	O
(	O
msg	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
newmsg	*(*(struct))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
info	*(struct)
==	O
NULL	O
&&	O
(	O
ret	int
=	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
!	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
,	O
&	O
s	*(char)
)	O
==	O
0	int
&&	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
MESSAGE_RFC822_STR	*(char)
,	O
sizeof	O
(	O
MESSAGE_RFC822_STR	*(char)
)	O
-	O
1	int
)	O
==	O
0	int
)	O
)	O
return	O
EINVAL	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
_attachment_setup	(*(*(struct(int,*(char),*(struct`),*(struct`),*(struct`),*(struct`)))),*(struct),*(*(struct)))->(int)
(	O
&	O
info	*(struct)
,	O
msg	*(struct)
,	O
&	O
istream	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
ret	int
;	O
ret	int
=	O
mu_stream_to_message	(*(struct),*(*(struct)))->(int)
(	O
istream	*(struct)
,	O
&	O
info	*(struct)
->	O
msg	*(struct)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
istream	*(struct)
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
*	O
newmsg	*(*(struct))
=	O
info	*(struct)
->	O
msg	*(struct)
;	O
_attachment_free	(*(struct(int,*(char),*(struct),*(struct),*(struct),*(struct))),int)->(void)
(	O
info	*(struct)
,	O
ret	int
&&	O
ret	int
!=	O
EAGAIN	int
)	O
;	O
return	O
ret	int
;	O
}	O
