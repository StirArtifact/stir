char	O
*	O
proc_stat_state_tags	*(char)
=	O
"TZRHDSIN<u+slfmpoxwg"	*(char)
;	O
typedef	O
typeof	O
(	O
(	O
(	O
struct	O
procinfo	O
*	O
)	O
0	int
)	O
->	O
threadinfos	O
[	O
0	int
]	O
)	O
threadinfo_data_t	int
;	O
typedef	O
threadinfo_data_t	int
*	O
threadinfo_t	*(int)
;	O
static	O
int	O
thread_state	(int)->(int)
(	O
thread_basic_info_t	O
bi	int
)	O
{	O
int	O
state	int
=	O
0	int
;	O
switch	O
(	O
bi	int
->	O
run_state	O
)	O
{	O
case	O
TH_STATE_RUNNING	O
:	O
state	int
|=	O
PSTAT_STATE_T_RUN	O
;	O
break	O
;	O
case	O
TH_STATE_UNINTERRUPTIBLE	O
:	O
state	int
|=	O
PSTAT_STATE_T_WAIT	O
;	O
break	O
;	O
case	O
TH_STATE_HALTED	O
:	O
state	int
|=	O
PSTAT_STATE_T_HALT	O
;	O
break	O
;	O
case	O
TH_STATE_STOPPED	O
:	O
state	int
|=	O
PSTAT_STATE_T_HALT	O
|	O
PSTAT_STATE_T_UNCLEAN	O
;	O
break	O
;	O
case	O
TH_STATE_WAITING	O
:	O
state	int
|=	O
bi	int
->	O
sleep_time	O
<	O
20	int
?	O
PSTAT_STATE_T_SLEEP	O
:	O
PSTAT_STATE_T_IDLE	O
;	O
break	O
;	O
}	O
if	O
(	O
bi	int
->	O
base_priority	O
<	O
25	int
)	O
state	int
|=	O
PSTAT_STATE_T_NASTY	O
;	O
else	O
if	O
(	O
bi	int
->	O
base_priority	O
>	O
25	int
)	O
state	int
|=	O
PSTAT_STATE_T_NICE	O
;	O
return	O
state	int
;	O
}	O
static	O
error_t	O
fetch_procinfo	(int,int,int,*(int),*(*(struct)),*(long),*(*(char)),*(long))->(int)
(	O
process_t	O
server	int
,	O
pid_t	O
pid	int
,	O
ps_flags_t	O
need	int
,	O
ps_flags_t	O
*	O
have	*(int)
,	O
struct	O
procinfo	O
*	O
*	O
pi	*(*(struct))
,	O
size_t	long
*	O
pi_size	*(long)
,	O
char	O
*	O
*	O
waits	*(*(char))
,	O
size_t	long
*	O
waits_len	*(long)
)	O
{	O
static	O
const	O
struct	O
{	O
ps_flags_t	O
ps_flag	int
;	O
int	O
pi_flags	int
;	O
}	O
map	array(struct(int,int))
[	O
]	O
=	O
{	O
{	O
PSTAT_TASK_BASIC	O
,	O
PI_FETCH_TASKINFO	O
}	O
,	O
{	O
PSTAT_TASK_EVENTS	O
,	O
PI_FETCH_TASKEVENTS	O
}	O
,	O
{	O
PSTAT_NUM_THREADS	O
,	O
PI_FETCH_THREADS	O
}	O
,	O
{	O
PSTAT_THREAD_BASIC	O
,	O
PI_FETCH_THREAD_BASIC	O
|	O
PI_FETCH_THREADS	O
}	O
,	O
{	O
PSTAT_THREAD_SCHED	O
,	O
PI_FETCH_THREAD_SCHED	O
|	O
PI_FETCH_THREADS	O
}	O
,	O
{	O
PSTAT_THREAD_WAITS	O
,	O
PI_FETCH_THREAD_WAITS	O
|	O
PI_FETCH_THREADS	O
}	O
,	O
{	O
0	int
,	O
}	O
}	O
;	O
int	O
pi_flags	int
=	O
0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
ps_flag	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
need	int
&	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
ps_flag	int
)	O
&&	O
!	O
(	O
*	O
have	*(int)
&	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
ps_flag	int
)	O
)	O
pi_flags	int
|=	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
pi_flags	int
;	O
if	O
(	O
pi_flags	int
||	O
(	O
(	O
need	int
&	O
PSTAT_PROC_INFO	O
)	O
&&	O
!	O
(	O
*	O
have	*(int)
&	O
PSTAT_PROC_INFO	O
)	O
)	O
)	O
{	O
error_t	O
err	O
;	O
*	O
pi_size	*(long)
/=	O
sizeof	O
(	O
int	O
)	O
;	O
err	O
=	O
proc_getprocinfo	()->(int)
(	O
server	int
,	O
pid	int
,	O
&	O
pi_flags	int
,	O
(	O
procinfo_t	O
*	O
)	O
pi	*(*(struct))
,	O
pi_size	*(long)
,	O
waits	*(*(char))
,	O
waits_len	*(long)
)	O
;	O
*	O
pi_size	*(long)
*=	O
sizeof	O
(	O
int	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
*	O
have	*(int)
|=	O
PSTAT_PROC_INFO	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
ps_flag	int
;	O
i	int
++	O
)	O
if	O
(	O
(	O
pi_flags	int
&	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
pi_flags	int
)	O
==	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
pi_flags	int
)	O
*	O
have	*(int)
|=	O
map	array(struct(int,int))
[	O
i	int
]	O
.	O
ps_flag	int
;	O
}	O
return	O
err	O
;	O
}	O
else	O
return	O
0	int
;	O
}	O
static	O
ps_flags_t	O
merge_procinfo	(*(struct),int,int)->(int)
(	O
struct	O
proc_stat	O
*	O
ps	*(struct)
,	O
ps_flags_t	O
need	int
,	O
ps_flags_t	O
have	*(int)
)	O
{	O
error_t	O
err	O
;	O
struct	O
procinfo	O
*	O
new_pi	*(struct)
,	O
old_pi_hdr	struct
;	O
size_t	long
new_pi_size	long
;	O
char	O
*	O
new_waits	*(char)
=	O
0	int
;	O
size_t	long
new_waits_len	long
=	O
0	int
;	O
ps_flags_t	O
really_need	O
=	O
need	int
|	O
(	O
have	*(int)
&	O
PSTAT_PROCINFO_REFETCH	O
)	O
;	O
ps_flags_t	O
really_have	O
=	O
have	*(int)
&	O
~	O
PSTAT_PROCINFO_REFETCH	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_PROCINFO	O
)	O
old_pi_hdr	struct
=	O
*	O
ps	*(struct)
->	O
proc_info	O
;	O
else	O
{	O
ps	*(struct)
->	O
proc_info	O
=	O
malloc	O
(	O
PROCINFO_MALLOC_SIZE	O
)	O
;	O
ps	*(struct)
->	O
proc_info_size	O
=	O
PROCINFO_MALLOC_SIZE	O
;	O
ps	*(struct)
->	O
proc_info_vm_alloced	O
=	O
0	int
;	O
if	O
(	O
!	O
ps	*(struct)
->	O
proc_info	O
)	O
return	O
ENOMEM	O
;	O
}	O
new_pi	*(struct)
=	O
ps	*(struct)
->	O
proc_info	O
;	O
new_pi_size	long
=	O
ps	*(struct)
->	O
proc_info_size	O
;	O
if	O
(	O
really_need	O
&	O
PSTAT_THREAD_WAITS	O
)	O
{	O
if	O
(	O
!	O
(	O
have	*(int)
&	O
PSTAT_THREAD_WAITS	O
)	O
)	O
{	O
ps	*(struct)
->	O
thread_waits	O
=	O
malloc	O
(	O
WAITS_MALLOC_SIZE	int
)	O
;	O
ps	*(struct)
->	O
thread_waits_len	O
=	O
WAITS_MALLOC_SIZE	int
;	O
ps	*(struct)
->	O
thread_waits_vm_alloced	O
=	O
0	int
;	O
}	O
new_waits	*(char)
=	O
ps	*(struct)
->	O
thread_waits	O
;	O
new_waits_len	long
=	O
ps	*(struct)
->	O
thread_waits_len	O
;	O
}	O
err	O
=	O
fetch_procinfo	(int,int,int,*(int),*(*(struct)),*(long),*(*(char)),*(long))->(int)
(	O
ps	*(struct)
->	O
context	*(struct)
->	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
really_need	O
,	O
&	O
really_have	O
,	O
&	O
new_pi	*(struct)
,	O
&	O
new_pi_size	long
,	O
&	O
new_waits	*(char)
,	O
&	O
new_waits_len	long
)	O
;	O
if	O
(	O
err	O
)	O
{	O
if	O
(	O
!	O
(	O
have	*(int)
&	O
PSTAT_PROCINFO	O
)	O
)	O
free	()->(int)
(	O
new_pi	*(struct)
)	O
;	O
if	O
(	O
(	O
really_need	O
&	O
PSTAT_THREAD_WAITS	O
)	O
&&	O
!	O
(	O
have	*(int)
&	O
PSTAT_THREAD_WAITS	O
)	O
)	O
free	()->(int)
(	O
new_waits	*(char)
)	O
;	O
return	O
have	*(int)
;	O
}	O
if	O
(	O
have	*(int)
&	O
PSTAT_TASK_BASIC	O
)	O
bcopy	()->(int)
(	O
&	O
old_pi_hdr	struct
.	O
taskinfo	O
,	O
&	O
new_pi	*(struct)
->	O
taskinfo	O
,	O
sizeof	O
(	O
struct	O
task_basic_info	O
)	O
)	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_TASK_EVENTS	O
)	O
bcopy	()->(int)
(	O
&	O
old_pi_hdr	struct
.	O
taskevents	O
,	O
&	O
new_pi	*(struct)
->	O
taskevents	O
,	O
sizeof	O
(	O
struct	O
task_events_info	O
)	O
)	O
;	O
if	O
(	O
new_pi	*(struct)
!=	O
ps	*(struct)
->	O
proc_info	O
)	O
{	O
if	O
(	O
ps	*(struct)
->	O
proc_info_vm_alloced	O
)	O
munmap	()->(int)
(	O
ps	*(struct)
->	O
proc_info	O
,	O
ps	*(struct)
->	O
proc_info_size	O
)	O
;	O
else	O
free	()->(int)
(	O
ps	*(struct)
->	O
proc_info	O
)	O
;	O
ps	*(struct)
->	O
proc_info	O
=	O
new_pi	*(struct)
;	O
ps	*(struct)
->	O
proc_info_size	O
=	O
new_pi_size	long
;	O
ps	*(struct)
->	O
proc_info_vm_alloced	O
=	O
1	int
;	O
}	O
if	O
(	O
really_need	O
&	O
PSTAT_THREAD_WAITS	O
)	O
{	O
if	O
(	O
!	O
(	O
really_have	O
&	O
PSTAT_THREAD_WAITS	O
)	O
)	O
new_waits	*(char)
=	O
0	int
;	O
if	O
(	O
new_waits	*(char)
!=	O
ps	*(struct)
->	O
thread_waits	O
)	O
{	O
if	O
(	O
ps	*(struct)
->	O
thread_waits_vm_alloced	O
)	O
munmap	()->(int)
(	O
ps	*(struct)
->	O
thread_waits	O
,	O
ps	*(struct)
->	O
thread_waits_len	O
)	O
;	O
else	O
free	()->(int)
(	O
ps	*(struct)
->	O
thread_waits	O
)	O
;	O
ps	*(struct)
->	O
thread_waits	O
=	O
new_waits	*(char)
;	O
ps	*(struct)
->	O
thread_waits_len	O
=	O
new_waits_len	long
;	O
ps	*(struct)
->	O
thread_waits_vm_alloced	O
=	O
1	int
;	O
}	O
}	O
return	O
really_have	O
;	O
}	O
static	O
ps_flags_t	O
add_preconditions	(int,*(struct))->(int)
(	O
ps_flags_t	O
flags	int
,	O
struct	O
ps_context	O
*	O
context	*(struct)
)	O
{	O
if	O
(	O
(	O
flags	int
&	O
PSTAT_USER_MASK	O
)	O
&&	O
context	*(struct)
->	O
user_hooks	O
&&	O
context	*(struct)
->	O
user_hooks	O
->	O
dependencies	O
)	O
flags	int
|=	O
(	O
*	O
context	*(struct)
->	O
user_hooks	O
->	O
dependencies	O
)	O
(	O
flags	int
&	O
PSTAT_USER_MASK	O
)	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_TTY	O
)	O
flags	int
|=	O
PSTAT_CTTYID	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_STATE	O
)	O
flags	int
|=	O
PSTAT_PROC_INFO	O
|	O
PSTAT_THREAD_BASIC	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_OWNER	O
)	O
flags	int
|=	O
PSTAT_OWNER_UID	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_OWNER_UID	O
)	O
flags	int
|=	O
PSTAT_PROC_INFO	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_SUSPEND_COUNT	O
)	O
flags	int
|=	O
PSTAT_TASK_BASIC	O
|	O
PSTAT_THREAD_BASIC	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_TIMES	O
)	O
flags	int
|=	O
PSTAT_TASK_BASIC	O
|	O
PSTAT_THREAD_BASIC	O
;	O
if	O
(	O
flags	int
&	O
(	O
PSTAT_CTTYID	O
|	O
PSTAT_CWDIR	O
|	O
PSTAT_AUTH	O
|	O
PSTAT_UMASK	O
)	O
&&	O
!	O
(	O
flags	int
&	O
PSTAT_NO_MSGPORT	O
)	O
)	O
{	O
flags	int
|=	O
PSTAT_MSGPORT	O
;	O
flags	int
|=	O
PSTAT_TASK	O
;	O
}	O
return	O
flags	int
;	O
}	O
static	O
int	O
should_suppress_msgport	(*(struct))->(int)
(	O
struct	O
proc_stat	O
*	O
ps	*(struct)
)	O
{	O
ps_flags_t	O
have	*(int)
=	O
ps	*(struct)
->	O
flags	int
;	O
if	O
(	O
(	O
have	*(int)
&	O
PSTAT_SUSPEND_COUNT	O
)	O
&&	O
ps	*(struct)
->	O
suspend_count	O
!=	O
0	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
(	O
have	*(int)
&	O
PSTAT_THREAD_BASIC	O
)	O
&&	O
ps	*(struct)
->	O
thread_basic_info	O
->	O
suspend_count	O
!=	O
0	int
)	O
return	O
TRUE	O
;	O
if	O
(	O
(	O
have	*(int)
&	O
PSTAT_NUM_THREADS	O
)	O
&&	O
ps	*(struct)
->	O
num_threads	int
==	O
0	int
)	O
return	O
TRUE	O
;	O
return	O
FALSE	O
;	O
}	O
static	O
struct	O
thread_basic_info	O
*	O
summarize_thread_basic_info	(*(struct),int)->(*(struct))
(	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
,	O
ps_flags_t	O
have	*(int)
)	O
{	O
int	O
i	int
;	O
unsigned	O
num_threads	int
=	O
0	int
,	O
num_run_threads	int
=	O
0	int
;	O
thread_basic_info_t	O
tbi	O
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
thread_basic_info	O
)	O
)	O
;	O
int	O
run_base_priority	int
=	O
0	int
,	O
run_cur_priority	int
=	O
0	int
;	O
int	O
total_base_priority	int
=	O
0	int
,	O
total_cur_priority	int
=	O
0	int
;	O
if	O
(	O
!	O
tbi	O
)	O
return	O
0	int
;	O
memset	O
(	O
tbi	O
,	O
0	int
,	O
sizeof	O
*	O
tbi	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pi	*(*(struct))
->	O
nthreads	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
died	O
&&	O
!	O
(	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_bi	O
.	O
flags	int
&	O
TH_FLAGS_IDLE	O
)	O
)	O
{	O
thread_basic_info_t	O
bi	int
=	O
&	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_bi	O
;	O
int	O
thread_run_state	int
=	O
bi	int
->	O
run_state	O
;	O
if	O
(	O
tbi	O
->	O
run_state	O
==	O
0	int
)	O
tbi	O
->	O
run_state	O
=	O
thread_run_state	int
;	O
else	O
if	O
(	O
tbi	O
->	O
run_state	O
==	O
TH_STATE_RUNNING	O
||	O
thread_run_state	int
==	O
TH_STATE_RUNNING	O
)	O
tbi	O
->	O
run_state	O
=	O
TH_STATE_RUNNING	O
;	O
else	O
if	O
(	O
tbi	O
->	O
run_state	O
!=	O
bi	int
->	O
run_state	O
)	O
tbi	O
->	O
run_state	O
=	O
-	O
1	int
;	O
tbi	O
->	O
cpu_usage	O
+=	O
bi	int
->	O
cpu_usage	O
;	O
tbi	O
->	O
sleep_time	O
+=	O
bi	int
->	O
sleep_time	O
;	O
if	O
(	O
i	int
==	O
0	int
||	O
tbi	O
->	O
suspend_count	O
>	O
bi	int
->	O
suspend_count	O
)	O
tbi	O
->	O
suspend_count	O
=	O
bi	int
->	O
suspend_count	O
;	O
tbi	O
->	O
user_time	O
.	O
seconds	O
+=	O
bi	int
->	O
user_time	O
.	O
seconds	O
;	O
tbi	O
->	O
user_time	O
.	O
microseconds	O
+=	O
bi	int
->	O
user_time	O
.	O
microseconds	O
;	O
tbi	O
->	O
system_time	O
.	O
seconds	O
+=	O
bi	int
->	O
system_time	O
.	O
seconds	O
;	O
tbi	O
->	O
system_time	O
.	O
microseconds	O
+=	O
bi	int
->	O
system_time	O
.	O
microseconds	O
;	O
if	O
(	O
tbi	O
->	O
run_state	O
==	O
TH_STATE_RUNNING	O
)	O
{	O
run_base_priority	int
+=	O
bi	int
->	O
base_priority	O
;	O
run_cur_priority	int
+=	O
bi	int
->	O
base_priority	O
;	O
num_run_threads	int
++	O
;	O
}	O
else	O
{	O
total_base_priority	int
+=	O
bi	int
->	O
base_priority	O
;	O
total_cur_priority	int
+=	O
bi	int
->	O
base_priority	O
;	O
}	O
num_threads	int
++	O
;	O
}	O
if	O
(	O
num_threads	int
>	O
0	int
)	O
{	O
tbi	O
->	O
sleep_time	O
/=	O
num_threads	int
;	O
if	O
(	O
num_run_threads	int
>	O
0	int
)	O
{	O
tbi	O
->	O
base_priority	O
=	O
run_base_priority	int
/	O
num_run_threads	int
;	O
tbi	O
->	O
cur_priority	O
=	O
run_cur_priority	int
/	O
num_run_threads	int
;	O
}	O
else	O
{	O
tbi	O
->	O
base_priority	O
=	O
total_base_priority	int
/	O
num_threads	int
;	O
tbi	O
->	O
cur_priority	O
=	O
total_cur_priority	int
/	O
num_threads	int
;	O
}	O
}	O
if	O
(	O
have	*(int)
&	O
PSTAT_TASK_BASIC	O
)	O
{	O
tbi	O
->	O
user_time	O
.	O
seconds	O
+=	O
pi	*(*(struct))
->	O
taskinfo	O
.	O
user_time	O
.	O
seconds	O
;	O
tbi	O
->	O
user_time	O
.	O
microseconds	O
+=	O
pi	*(*(struct))
->	O
taskinfo	O
.	O
user_time	O
.	O
microseconds	O
;	O
tbi	O
->	O
system_time	O
.	O
seconds	O
+=	O
pi	*(*(struct))
->	O
taskinfo	O
.	O
system_time	O
.	O
seconds	O
;	O
tbi	O
->	O
system_time	O
.	O
microseconds	O
+=	O
pi	*(*(struct))
->	O
taskinfo	O
.	O
system_time	O
.	O
microseconds	O
;	O
}	O
tbi	O
->	O
user_time	O
.	O
seconds	O
+=	O
tbi	O
->	O
user_time	O
.	O
microseconds	O
/	O
1000000	int
;	O
tbi	O
->	O
user_time	O
.	O
microseconds	O
%=	O
1000000	int
;	O
tbi	O
->	O
system_time	O
.	O
seconds	O
+=	O
tbi	O
->	O
system_time	O
.	O
microseconds	O
/	O
1000000	int
;	O
tbi	O
->	O
system_time	O
.	O
microseconds	O
%=	O
1000000	int
;	O
return	O
tbi	O
;	O
}	O
static	O
struct	O
thread_sched_info	O
*	O
summarize_thread_sched_info	(*(struct))->(*(struct))
(	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
)	O
{	O
int	O
i	int
;	O
unsigned	O
num_threads	int
=	O
0	int
;	O
thread_sched_info_t	O
tsi	O
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
thread_sched_info	O
)	O
)	O
;	O
if	O
(	O
!	O
tsi	O
)	O
return	O
0	int
;	O
memset	O
(	O
tsi	O
,	O
0	int
,	O
sizeof	O
*	O
tsi	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pi	*(*(struct))
->	O
nthreads	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
died	O
&&	O
!	O
(	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_bi	O
.	O
flags	int
&	O
TH_FLAGS_IDLE	O
)	O
)	O
{	O
thread_sched_info_t	O
si	O
=	O
&	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_si	O
;	O
tsi	O
->	O
base_priority	O
+=	O
si	O
->	O
base_priority	O
;	O
tsi	O
->	O
cur_priority	O
+=	O
si	O
->	O
cur_priority	O
;	O
tsi	O
->	O
max_priority	O
+=	O
si	O
->	O
max_priority	O
;	O
tsi	O
->	O
depress_priority	O
+=	O
si	O
->	O
depress_priority	O
;	O
num_threads	int
++	O
;	O
}	O
if	O
(	O
num_threads	int
>	O
0	int
)	O
{	O
tsi	O
->	O
base_priority	O
/=	O
num_threads	int
;	O
tsi	O
->	O
cur_priority	O
/=	O
num_threads	int
;	O
tsi	O
->	O
max_priority	O
/=	O
num_threads	int
;	O
tsi	O
->	O
depress_priority	O
/=	O
num_threads	int
;	O
}	O
return	O
tsi	O
;	O
}	O
static	O
int	O
summarize_thread_states	(*(struct))->(int)
(	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
)	O
{	O
int	O
i	int
;	O
int	O
state	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pi	*(*(struct))
->	O
nthreads	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
died	O
&&	O
!	O
(	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_bi	O
.	O
flags	int
&	O
TH_FLAGS_IDLE	O
)	O
)	O
state	int
|=	O
thread_state	(int)->(int)
(	O
&	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_bi	O
)	O
;	O
return	O
state	int
;	O
}	O
static	O
void	O
summarize_thread_waits	(*(struct),*(char),long,*(*(char)),*(int))->(void)
(	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
,	O
char	O
*	O
waits	*(*(char))
,	O
size_t	long
waits_len	*(long)
,	O
char	O
*	O
*	O
wait	*(*(char))
,	O
mach_msg_id_t	O
*	O
rpc	*(int)
)	O
{	O
int	O
i	int
;	O
char	O
*	O
next_wait	*(char)
=	O
waits	*(*(char))
;	O
*	O
wait	*(*(char))
=	O
0	int
;	O
*	O
rpc	*(int)
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pi	*(*(struct))
->	O
nthreads	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
died	O
)	O
{	O
if	O
(	O
next_wait	*(char)
>	O
waits	*(*(char))
+	O
waits_len	*(long)
)	O
break	O
;	O
else	O
{	O
int	O
left	int
=	O
waits	*(*(char))
+	O
waits_len	*(long)
-	O
next_wait	*(char)
;	O
if	O
(	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
pis_bi	O
.	O
flags	int
&	O
TH_FLAGS_IDLE	O
)	O
;	O
else	O
if	O
(	O
strncmp	O
(	O
next_wait	*(char)
,	O
"msgport"	*(char)
,	O
left	int
)	O
==	O
0	int
||	O
strncmp	O
(	O
next_wait	*(char)
,	O
"itimer"	*(char)
,	O
left	int
)	O
==	O
0	int
)	O
;	O
else	O
if	O
(	O
*	O
wait	*(*(char))
)	O
{	O
*	O
wait	*(*(char))
=	O
"*"	*(char)
;	O
*	O
rpc	*(int)
=	O
0	int
;	O
break	O
;	O
}	O
else	O
{	O
*	O
wait	*(*(char))
=	O
next_wait	*(char)
;	O
*	O
rpc	*(int)
=	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
rpc_block	O
;	O
}	O
next_wait	*(char)
+=	O
strnlen	()->(int)
(	O
next_wait	*(char)
,	O
left	int
)	O
+	O
1	int
;	O
}	O
}	O
}	O
static	O
unsigned	O
count_threads	(*(struct),int)->(int)
(	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
,	O
ps_flags_t	O
have	*(int)
)	O
{	O
if	O
(	O
have	*(int)
&	O
(	O
PSTAT_PROCINFO_TASK_THREAD_DEP	O
&	O
~	O
PSTAT_NUM_THREADS	O
)	O
)	O
{	O
int	O
i	int
;	O
unsigned	O
num_threads	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pi	*(*(struct))
->	O
nthreads	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
died	O
)	O
num_threads	int
++	O
;	O
return	O
num_threads	int
;	O
}	O
else	O
return	O
pi	*(*(struct))
->	O
nthreads	O
;	O
}	O
threadinfo_t	*(int)
get_thread_info	(*(struct),int)->(*(int))
(	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
,	O
unsigned	O
index	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
pi	*(*(struct))
->	O
nthreads	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
.	O
died	O
&&	O
index	int
--	O
==	O
0	int
)	O
return	O
&	O
pi	*(*(struct))
->	O
threadinfos	O
[	O
i	int
]	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
get_thread_wait	(*(char),long,int)->(*(char))
(	O
char	O
*	O
waits	*(*(char))
,	O
size_t	long
waits_len	*(long)
,	O
unsigned	O
n	int
)	O
{	O
char	O
*	O
wait	*(*(char))
=	O
waits	*(*(char))
;	O
while	O
(	O
n	int
--	O
&&	O
wait	*(*(char))
)	O
if	O
(	O
wait	*(*(char))
>=	O
waits	*(*(char))
+	O
waits_len	*(long)
)	O
wait	*(*(char))
=	O
0	int
;	O
else	O
wait	*(*(char))
+=	O
strnlen	()->(int)
(	O
wait	*(*(char))
,	O
waits	*(*(char))
+	O
waits_len	*(long)
-	O
wait	*(*(char))
)	O
+	O
1	int
;	O
return	O
wait	*(*(char))
;	O
}	O
static	O
void	O
*	O
clone	(*(void),long)->(*(void))
(	O
void	O
*	O
src	*(void)
,	O
size_t	long
size	long
)	O
{	O
void	O
*	O
dst	*(void)
=	O
malloc	O
(	O
size	long
)	O
;	O
if	O
(	O
dst	*(void)
)	O
bcopy	()->(int)
(	O
src	*(void)
,	O
dst	*(void)
,	O
size	long
)	O
;	O
return	O
dst	*(void)
;	O
}	O
static	O
ps_flags_t	O
set_procinfo_flags	(*(struct),int,int)->(int)
(	O
struct	O
proc_stat	O
*	O
ps	*(struct)
,	O
ps_flags_t	O
need	int
,	O
ps_flags_t	O
have	*(int)
)	O
{	O
if	O
(	O
have	*(int)
&	O
PSTAT_PID	O
)	O
{	O
struct	O
procinfo	O
*	O
pi	*(*(struct))
;	O
ps_flags_t	O
had	O
=	O
have	*(int)
;	O
if	O
(	O
!	O
(	O
have	*(int)
&	O
PSTAT_PROCINFO	O
)	O
)	O
{	O
ps	*(struct)
->	O
proc_info	O
=	O
0	int
;	O
ps	*(struct)
->	O
proc_info_size	O
=	O
0	int
;	O
ps	*(struct)
->	O
thread_waits	O
=	O
0	int
;	O
ps	*(struct)
->	O
thread_waits_len	O
=	O
0	int
;	O
}	O
if	O
(	O
(	O
need	int
&	O
PSTAT_THREAD_WAIT	O
)	O
&&	O
!	O
(	O
need	int
&	O
PSTAT_THREAD_WAITS	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
have	*(int)
&	O
PSTAT_NUM_THREADS	O
)	O
)	O
{	O
have	*(int)
=	O
merge_procinfo	(*(struct),int,int)->(int)
(	O
ps	*(struct)
,	O
PSTAT_NUM_THREADS	O
,	O
have	*(int)
)	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_NUM_THREADS	O
)	O
ps	*(struct)
->	O
num_threads	int
=	O
count_threads	(*(struct),int)->(int)
(	O
ps	*(struct)
->	O
proc_info	O
,	O
have	*(int)
)	O
;	O
}	O
if	O
(	O
(	O
have	*(int)
&	O
PSTAT_NUM_THREADS	O
)	O
&&	O
ps	*(struct)
->	O
num_threads	int
<=	O
3	int
)	O
need	int
|=	O
PSTAT_THREAD_WAITS	O
;	O
}	O
have	*(int)
=	O
merge_procinfo	(*(struct),int,int)->(int)
(	O
ps	*(struct)
,	O
need	int
,	O
have	*(int)
)	O
;	O
pi	*(*(struct))
=	O
ps	*(struct)
->	O
proc_info	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_TASK_BASIC	O
)	O
ps	*(struct)
->	O
task_basic_info	O
=	O
&	O
pi	*(*(struct))
->	O
taskinfo	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_TASK_EVENTS	O
)	O
ps	*(struct)
->	O
task_events_info	O
=	O
&	O
pi	*(*(struct))
->	O
taskevents	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_NUM_THREADS	O
)	O
ps	*(struct)
->	O
num_threads	int
=	O
count_threads	(*(struct),int)->(int)
(	O
pi	*(*(struct))
,	O
have	*(int)
)	O
;	O
if	O
(	O
had	O
&	O
PSTAT_THREAD_BASIC	O
)	O
free	()->(int)
(	O
ps	*(struct)
->	O
thread_basic_info	O
)	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_THREAD_BASIC	O
)	O
ps	*(struct)
->	O
thread_basic_info	O
=	O
summarize_thread_basic_info	(*(struct),int)->(*(struct))
(	O
pi	*(*(struct))
,	O
have	*(int)
)	O
;	O
if	O
(	O
had	O
&	O
PSTAT_THREAD_SCHED	O
)	O
free	()->(int)
(	O
ps	*(struct)
->	O
thread_sched_info	O
)	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_THREAD_SCHED	O
)	O
ps	*(struct)
->	O
thread_sched_info	O
=	O
summarize_thread_sched_info	(*(struct))->(*(struct))
(	O
pi	*(*(struct))
)	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_THREAD_WAITS	O
)	O
{	O
summarize_thread_waits	(*(struct),*(char),long,*(*(char)),*(int))->(void)
(	O
pi	*(*(struct))
,	O
ps	*(struct)
->	O
thread_waits	O
,	O
ps	*(struct)
->	O
thread_waits_len	O
,	O
&	O
ps	*(struct)
->	O
thread_wait	O
,	O
&	O
ps	*(struct)
->	O
thread_rpc	O
)	O
;	O
have	*(int)
|=	O
PSTAT_THREAD_WAIT	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
have	*(int)
&	O
PSTAT_NO_MSGPORT	O
)	O
&&	O
(	O
have	*(int)
&	O
PSTAT_NUM_THREADS	O
)	O
&&	O
ps	*(struct)
->	O
num_threads	int
>	O
3	int
)	O
{	O
ps	*(struct)
->	O
thread_wait	O
=	O
"*"	*(char)
;	O
ps	*(struct)
->	O
thread_rpc	O
=	O
0	int
;	O
have	*(int)
|=	O
PSTAT_THREAD_WAIT	O
;	O
}	O
}	O
else	O
{	O
struct	O
proc_stat	O
*	O
origin	*(struct)
=	O
ps	*(struct)
->	O
thread_origin	O
;	O
ps_flags_t	O
oflags	O
=	O
(	O
need	int
&	O
PSTAT_PROCINFO_THREAD	O
)	O
|	O
(	O
(	O
need	int
&	O
PSTAT_THREAD_WAIT	O
)	O
?	O
PSTAT_THREAD_WAITS	O
:	O
0	int
)	O
;	O
proc_stat_set_flags	()->(int)
(	O
origin	*(struct)
,	O
oflags	O
)	O
;	O
oflags	O
=	O
origin	*(struct)
->	O
flags	int
;	O
if	O
(	O
oflags	O
&	O
PSTAT_PROCINFO_THREAD	O
)	O
{	O
threadinfo_t	*(int)
ti	*(int)
=	O
get_thread_info	(*(struct),int)->(*(int))
(	O
origin	*(struct)
->	O
proc_info	O
,	O
ps	*(struct)
->	O
thread_index	O
)	O
;	O
need	int
&=	O
~	O
have	*(int)
;	O
if	O
(	O
(	O
need	int
&	O
PSTAT_THREAD_BASIC	O
)	O
&&	O
(	O
oflags	O
&	O
PSTAT_THREAD_BASIC	O
)	O
&&	O
(	O
ps	*(struct)
->	O
thread_basic_info	O
=	O
clone	(*(void),long)->(*(void))
(	O
&	O
ti	*(int)
->	O
pis_bi	O
,	O
sizeof	O
(	O
struct	O
thread_basic_info	O
)	O
)	O
)	O
)	O
have	*(int)
|=	O
PSTAT_THREAD_BASIC	O
;	O
if	O
(	O
(	O
need	int
&	O
PSTAT_THREAD_SCHED	O
)	O
&&	O
(	O
oflags	O
&	O
PSTAT_THREAD_SCHED	O
)	O
&&	O
(	O
ps	*(struct)
->	O
thread_sched_info	O
=	O
clone	(*(void),long)->(*(void))
(	O
&	O
ti	*(int)
->	O
pis_si	O
,	O
sizeof	O
(	O
struct	O
thread_sched_info	O
)	O
)	O
)	O
)	O
have	*(int)
|=	O
PSTAT_THREAD_SCHED	O
;	O
if	O
(	O
(	O
need	int
&	O
PSTAT_THREAD_WAIT	O
)	O
&&	O
(	O
oflags	O
&	O
PSTAT_THREAD_WAITS	O
)	O
)	O
{	O
ps	*(struct)
->	O
thread_wait	O
=	O
get_thread_wait	(*(char),long,int)->(*(char))
(	O
origin	*(struct)
->	O
thread_waits	O
,	O
origin	*(struct)
->	O
thread_waits_len	O
,	O
ps	*(struct)
->	O
thread_index	O
)	O
;	O
if	O
(	O
ps	*(struct)
->	O
thread_wait	O
)	O
{	O
ps	*(struct)
->	O
thread_rpc	O
=	O
ti	*(int)
->	O
rpc_block	O
;	O
have	*(int)
|=	O
PSTAT_THREAD_WAIT	O
;	O
}	O
}	O
}	O
ps	*(struct)
->	O
inapp	O
|=	O
need	int
&	O
~	O
have	*(int)
&	O
PSTAT_PROCINFO	O
&	O
~	O
PSTAT_PROCINFO_THREAD	O
;	O
}	O
return	O
have	*(int)
;	O
}	O
error_t	O
proc_stat_set_flags	()->(int)
(	O
struct	O
proc_stat	O
*	O
ps	*(struct)
,	O
ps_flags_t	O
flags	int
)	O
{	O
ps_flags_t	O
have	*(int)
=	O
ps	*(struct)
->	O
flags	int
;	O
ps_flags_t	O
need	int
;	O
ps_flags_t	O
no_msgport_flags	O
;	O
ps_flags_t	O
test_msgport_flags	O
;	O
process_t	O
server	int
=	O
ps_context_server	O
(	O
ps	*(struct)
->	O
context	*(struct)
)	O
;	O
void	O
suppress_msgport	()->(int)
(	O
)	O
{	O
need	int
&=	O
~	O
(	O
flags	int
&	O
~	O
no_msgport_flags	O
)	O
;	O
have	*(int)
=	O
SUPPRESS_MSGPORT_FLAGS	O
(	O
have	*(int)
)	O
;	O
}	O
flags	int
&=	O
~	O
ps	*(struct)
->	O
failed	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_NO_MSGPORT	O
)	O
have	*(int)
=	O
SUPPRESS_MSGPORT_FLAGS	O
(	O
have	*(int)
)	O
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_NO_MSGPORT	O
)	O
flags	int
=	O
SUPPRESS_MSGPORT_FLAGS	O
(	O
flags	int
)	O
;	O
no_msgport_flags	O
=	O
add_preconditions	(int,*(struct))->(int)
(	O
SUPPRESS_MSGPORT_FLAGS	O
(	O
flags	int
)	O
,	O
ps	*(struct)
->	O
context	*(struct)
)	O
;	O
flags	int
=	O
add_preconditions	(int,*(struct))->(int)
(	O
flags	int
,	O
ps	*(struct)
->	O
context	*(struct)
)	O
;	O
if	O
(	O
flags	int
&	O
PSTAT_USES_MSGPORT	O
)	O
{	O
test_msgport_flags	O
=	O
add_preconditions	(int,*(struct))->(int)
(	O
PSTAT_TEST_MSGPORT	O
,	O
ps	*(struct)
->	O
context	*(struct)
)	O
;	O
flags	int
|=	O
test_msgport_flags	O
;	O
}	O
else	O
test_msgport_flags	O
=	O
0	int
;	O
need	int
=	O
flags	int
&	O
~	O
have	*(int)
&	O
~	O
ps	*(struct)
->	O
failed	O
;	O
if	O
(	O
need	int
&	O
~	O
have	*(int)
&	O
test_msgport_flags	O
&	O
PSTAT_PROCINFO	O
)	O
have	*(int)
=	O
set_procinfo_flags	(*(struct),int,int)->(int)
(	O
ps	*(struct)
,	O
need	int
&	O
~	O
have	*(int)
&	O
test_msgport_flags	O
,	O
have	*(int)
)	O
;	O
if	O
(	O
NEED	O
(	O
PSTAT_SUSPEND_COUNT	O
,	O
(	O
(	O
have	*(int)
&	O
PSTAT_PID	O
)	O
?	O
PSTAT_TASK_BASIC	O
:	O
PSTAT_THREAD_BASIC	O
)	O
)	O
)	O
{	O
if	O
(	O
have	*(int)
&	O
PSTAT_PID	O
)	O
ps	*(struct)
->	O
suspend_count	O
=	O
ps	*(struct)
->	O
task_basic_info	O
->	O
suspend_count	O
;	O
else	O
ps	*(struct)
->	O
suspend_count	O
=	O
ps	*(struct)
->	O
thread_basic_info	O
->	O
suspend_count	O
;	O
have	*(int)
|=	O
PSTAT_SUSPEND_COUNT	O
;	O
}	O
ps	*(struct)
->	O
flags	int
=	O
have	*(int)
;	O
if	O
(	O
should_suppress_msgport	(*(struct))->(int)
(	O
ps	*(struct)
)	O
)	O
suppress_msgport	()->(int)
(	O
)	O
;	O
if	O
(	O
need	int
&	O
~	O
have	*(int)
&	O
PSTAT_PROCINFO	O
)	O
have	*(int)
=	O
set_procinfo_flags	(*(struct),int,int)->(int)
(	O
ps	*(struct)
,	O
need	int
,	O
have	*(int)
)	O
;	O
MGET	O
(	O
PSTAT_MSGPORT	O
,	O
PSTAT_PID	O
,	O
proc_getmsgport	()->(int)
(	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
&	O
ps	*(struct)
->	O
msgport	O
)	O
)	O
;	O
MGET	O
(	O
PSTAT_PROCESS	O
,	O
PSTAT_PID	O
,	O
proc_pid2proc	()->(int)
(	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
&	O
ps	*(struct)
->	O
process	O
)	O
)	O
;	O
MGET	O
(	O
PSTAT_TASK	O
,	O
PSTAT_PID	O
,	O
proc_pid2task	()->(int)
(	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
&	O
ps	*(struct)
->	O
task	O
)	O
)	O
;	O
if	O
(	O
(	O
need	int
&	O
PSTAT_STATE	O
)	O
&&	O
(	O
have	*(int)
&	O
(	O
PSTAT_PROC_INFO	O
|	O
PSTAT_THREAD_BASIC	O
)	O
)	O
)	O
{	O
ps	*(struct)
->	O
state	int
=	O
0	int
;	O
if	O
(	O
have	*(int)
&	O
PSTAT_THREAD_BASIC	O
)	O
{	O
if	O
(	O
have	*(int)
&	O
PSTAT_THREAD	O
)	O
ps	*(struct)
->	O
state	int
|=	O
thread_state	(int)->(int)
(	O
ps	*(struct)
->	O
thread_basic_info	O
)	O
;	O
else	O
ps	*(struct)
->	O
state	int
|=	O
summarize_thread_states	(*(struct))->(int)
(	O
ps	*(struct)
->	O
proc_info	O
)	O
;	O
}	O
if	O
(	O
have	*(int)
&	O
PSTAT_PROC_INFO	O
)	O
{	O
int	O
pi_flags	int
=	O
ps	*(struct)
->	O
proc_info	O
->	O
state	int
;	O
if	O
(	O
pi_flags	int
&	O
PI_STOPPED	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_STOP	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_ZOMBIE	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_ZOMBIE	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_SESSLD	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_SESSLDR	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_LOGINLD	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_LOGINLDR	O
;	O
if	O
(	O
!	O
(	O
pi_flags	int
&	O
PI_EXECED	O
)	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_FORKED	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_NOMSG	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_NOMSG	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_NOPARENT	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_NOPARENT	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_ORPHAN	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_ORPHAN	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_TRACED	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_TRACE	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_WAITING	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_WAIT	O
;	O
if	O
(	O
pi_flags	int
&	O
PI_GETMSG	O
)	O
ps	*(struct)
->	O
state	int
|=	O
PSTAT_STATE_P_GETMSG	O
;	O
}	O
have	*(int)
|=	O
PSTAT_STATE	O
;	O
}	O
if	O
(	O
NEED	O
(	O
PSTAT_ARGS	O
,	O
PSTAT_PID	O
)	O
)	O
{	O
char	O
*	O
buf	*(char)
=	O
malloc	O
(	O
100	int
)	O
;	O
ps	*(struct)
->	O
args_len	O
=	O
100	int
;	O
ps	*(struct)
->	O
args	O
=	O
buf	*(char)
;	O
if	O
(	O
ps	*(struct)
->	O
args	O
)	O
{	O
if	O
(	O
proc_getprocargs	()->(int)
(	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
&	O
ps	*(struct)
->	O
args	O
,	O
&	O
ps	*(struct)
->	O
args_len	O
)	O
)	O
free	()->(int)
(	O
buf	*(char)
)	O
;	O
else	O
{	O
have	*(int)
|=	O
PSTAT_ARGS	O
;	O
ps	*(struct)
->	O
args_vm_alloced	O
=	O
(	O
ps	*(struct)
->	O
args	O
!=	O
buf	*(char)
)	O
;	O
if	O
(	O
ps	*(struct)
->	O
args_vm_alloced	O
)	O
free	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
NEED	O
(	O
PSTAT_ENV	O
,	O
PSTAT_PID	O
)	O
)	O
{	O
char	O
*	O
buf	*(char)
=	O
malloc	O
(	O
100	int
)	O
;	O
ps	*(struct)
->	O
env_len	O
=	O
100	int
;	O
ps	*(struct)
->	O
env	O
=	O
buf	*(char)
;	O
if	O
(	O
ps	*(struct)
->	O
env	O
)	O
{	O
if	O
(	O
proc_getprocenv	()->(int)
(	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
&	O
ps	*(struct)
->	O
env	O
,	O
&	O
ps	*(struct)
->	O
env_len	O
)	O
)	O
free	()->(int)
(	O
buf	*(char)
)	O
;	O
else	O
{	O
have	*(int)
|=	O
PSTAT_ENV	O
;	O
ps	*(struct)
->	O
env_vm_alloced	O
=	O
(	O
ps	*(struct)
->	O
env	O
!=	O
buf	*(char)
)	O
;	O
if	O
(	O
ps	*(struct)
->	O
env_vm_alloced	O
)	O
free	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
}	O
}	O
MP_MGET	O
(	O
PSTAT_CTTYID	O
,	O
PSTAT_TASK	O
,	O
ps_msg_get_init_port	O
(	O
ps	*(struct)
->	O
msgport	O
,	O
ps	*(struct)
->	O
task	O
,	O
INIT_PORT_CTTYID	O
,	O
&	O
ps	*(struct)
->	O
cttyid	O
)	O
)	O
;	O
MP_MGET	O
(	O
PSTAT_CWDIR	O
,	O
PSTAT_TASK	O
,	O
ps_msg_get_init_port	O
(	O
ps	*(struct)
->	O
msgport	O
,	O
ps	*(struct)
->	O
task	O
,	O
INIT_PORT_CWDIR	O
,	O
&	O
ps	*(struct)
->	O
cwdir	O
)	O
)	O
;	O
MP_MGET	O
(	O
PSTAT_AUTH	O
,	O
PSTAT_TASK	O
,	O
ps_msg_get_init_port	O
(	O
ps	*(struct)
->	O
msgport	O
,	O
ps	*(struct)
->	O
task	O
,	O
INIT_PORT_AUTH	O
,	O
&	O
ps	*(struct)
->	O
auth	O
)	O
)	O
;	O
MP_MGET	O
(	O
PSTAT_UMASK	O
,	O
PSTAT_TASK	O
,	O
ps_msg_get_init_int	O
(	O
ps	*(struct)
->	O
msgport	O
,	O
ps	*(struct)
->	O
task	O
,	O
INIT_UMASK	O
,	O
(	O
int	O
*	O
)	O
&	O
ps	*(struct)
->	O
umask	O
)	O
)	O
;	O
if	O
(	O
NEED	O
(	O
PSTAT_OWNER_UID	O
,	O
PSTAT_PROC_INFO	O
)	O
)	O
{	O
if	O
(	O
ps	*(struct)
->	O
proc_info	O
->	O
state	int
&	O
PI_NOTOWNED	O
)	O
ps	*(struct)
->	O
owner_uid	O
=	O
-	O
1	int
;	O
else	O
ps	*(struct)
->	O
owner_uid	O
=	O
ps	*(struct)
->	O
proc_info	O
->	O
owner	O
;	O
have	*(int)
|=	O
PSTAT_OWNER_UID	O
;	O
}	O
if	O
(	O
NEED	O
(	O
PSTAT_OWNER	O
,	O
PSTAT_OWNER_UID	O
)	O
)	O
{	O
if	O
(	O
ps	*(struct)
->	O
owner_uid	O
<	O
0	int
)	O
{	O
ps	*(struct)
->	O
owner	O
=	O
0	int
;	O
have	*(int)
|=	O
PSTAT_OWNER	O
;	O
}	O
else	O
if	O
(	O
!	O
ps_context_find_user	()->(int)
(	O
ps	*(struct)
->	O
context	*(struct)
,	O
ps	*(struct)
->	O
owner_uid	O
,	O
&	O
ps	*(struct)
->	O
owner	O
)	O
)	O
have	*(int)
|=	O
PSTAT_OWNER	O
;	O
}	O
if	O
(	O
NEED	O
(	O
PSTAT_TTY	O
,	O
PSTAT_CTTYID	O
)	O
)	O
if	O
(	O
ps_context_find_tty_by_cttyid	()->(int)
(	O
ps	*(struct)
->	O
context	*(struct)
,	O
ps	*(struct)
->	O
cttyid	O
,	O
&	O
ps	*(struct)
->	O
tty	O
)	O
==	O
0	int
)	O
have	*(int)
|=	O
PSTAT_TTY	O
;	O
MGET	O
(	O
PSTAT_NUM_PORTS	O
,	O
PSTAT_PID	O
,	O
proc_getnports	()->(int)
(	O
server	int
,	O
ps	*(struct)
->	O
pid	int
,	O
&	O
ps	*(struct)
->	O
num_ports	O
)	O
)	O
;	O
if	O
(	O
(	O
need	int
&	O
PSTAT_TIMES	O
)	O
&&	O
(	O
have	*(int)
&	O
(	O
PSTAT_TASK_BASIC	O
|	O
PSTAT_THREAD_BASIC	O
)	O
)	O
)	O
have	*(int)
|=	O
PSTAT_TIMES	O
;	O
ps	*(struct)
->	O
failed	O
|=	O
(	O
need	int
&	O
~	O
PSTAT_USER_MASK	O
)	O
&	O
~	O
have	*(int)
;	O
ps	*(struct)
->	O
flags	int
=	O
have	*(int)
;	O
need	int
&=	O
~	O
have	*(int)
;	O
if	O
(	O
need	int
&&	O
ps	*(struct)
->	O
context	*(struct)
->	O
user_hooks	O
&&	O
ps	*(struct)
->	O
context	*(struct)
->	O
user_hooks	O
->	O
fetch	O
)	O
{	O
have	*(int)
|=	O
(	O
*	O
ps	*(struct)
->	O
context	*(struct)
->	O
user_hooks	O
->	O
fetch	O
)	O
(	O
ps	*(struct)
,	O
need	int
,	O
have	*(int)
)	O
;	O
ps	*(struct)
->	O
failed	O
=	O
(	O
ps	*(struct)
->	O
failed	O
|	O
need	int
)	O
&	O
~	O
have	*(int)
;	O
ps	*(struct)
->	O
flags	int
=	O
have	*(int)
;	O
}	O
return	O
0	int
;	O
}	O
void	O
_proc_stat_free	(*(struct))->(void)
(	O
ps	*(struct)
)	O
struct	O
proc_stat	O
*	O
ps	*(struct)
;	O
{	O
if	O
(	O
ps	*(struct)
->	O
context	*(struct)
->	O
user_hooks	O
&&	O
ps	*(struct)
->	O
context	*(struct)
->	O
user_hooks	O
->	O
cleanup	O
)	O
(	O
*	O
ps	*(struct)
->	O
context	*(struct)
->	O
user_hooks	O
->	O
cleanup	O
)	O
(	O
ps	*(struct)
)	O
;	O
MFREEPORT	O
(	O
PSTAT_PROCESS	O
,	O
process	O
)	O
;	O
MFREEPORT	O
(	O
PSTAT_TASK	O
,	O
task	O
)	O
;	O
MFREEPORT	O
(	O
PSTAT_MSGPORT	O
,	O
msgport	O
)	O
;	O
MFREEPORT	O
(	O
PSTAT_CTTYID	O
,	O
cttyid	O
)	O
;	O
MFREEPORT	O
(	O
PSTAT_CWDIR	O
,	O
cwdir	O
)	O
;	O
MFREEPORT	O
(	O
PSTAT_AUTH	O
,	O
auth	O
)	O
;	O
MFREEMEM	O
(	O
PSTAT_PROC_INFO	O
,	O
proc_info	O
,	O
ps	*(struct)
->	O
proc_info_size	O
,	O
ps	*(struct)
->	O
proc_info_vm_alloced	O
,	O
0	int
,	O
char	O
)	O
;	O
MFREEMEM	O
(	O
PSTAT_THREAD_BASIC	O
,	O
thread_basic_info	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
MFREEMEM	O
(	O
PSTAT_THREAD_SCHED	O
,	O
thread_sched_info	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
MFREEMEM	O
(	O
PSTAT_ARGS	O
,	O
args	O
,	O
ps	*(struct)
->	O
args_len	O
,	O
ps	*(struct)
->	O
args_vm_alloced	O
,	O
0	int
,	O
char	O
)	O
;	O
MFREEMEM	O
(	O
PSTAT_ENV	O
,	O
env	O
,	O
ps	*(struct)
->	O
env_len	O
,	O
ps	*(struct)
->	O
env_vm_alloced	O
,	O
0	int
,	O
char	O
)	O
;	O
MFREEMEM	O
(	O
PSTAT_TASK_EVENTS	O
,	O
task_events_info	O
,	O
ps	*(struct)
->	O
task_events_info_size	O
,	O
0	int
,	O
&	O
ps	*(struct)
->	O
task_events_info_buf	O
,	O
char	O
)	O
;	O
MFREEMEM	O
(	O
PSTAT_THREAD_WAITS	O
,	O
thread_waits	O
,	O
ps	*(struct)
->	O
thread_waits_len	O
,	O
ps	*(struct)
->	O
thread_waits_vm_alloced	O
,	O
0	int
,	O
char	O
)	O
;	O
FREE	()->(int)
(	O
ps	*(struct)
)	O
;	O
}	O
error_t	O
_proc_stat_create	(int,*(struct),*(*(struct)))->(int)
(	O
pid_t	O
pid	int
,	O
struct	O
ps_context	O
*	O
context	*(struct)
,	O
struct	O
proc_stat	O
*	O
*	O
ps	*(struct)
)	O
{	O
*	O
ps	*(struct)
=	O
NEW	()->(int)
(	O
struct	O
proc_stat	O
)	O
;	O
if	O
(	O
*	O
ps	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
(	O
*	O
ps	*(struct)
)	O
->	O
pid	int
=	O
pid	int
;	O
(	O
*	O
ps	*(struct)
)	O
->	O
flags	int
=	O
PSTAT_PID	O
;	O
(	O
*	O
ps	*(struct)
)	O
->	O
failed	O
=	O
0	int
;	O
(	O
*	O
ps	*(struct)
)	O
->	O
inapp	O
=	O
PSTAT_THREAD	O
;	O
(	O
*	O
ps	*(struct)
)	O
->	O
context	*(struct)
=	O
context	*(struct)
;	O
(	O
*	O
ps	*(struct)
)	O
->	O
hook	O
=	O
0	int
;	O
return	O
0	int
;	O
}	O
error_t	O
proc_stat_thread_create	(*(struct),int,*(*(struct)))->(int)
(	O
struct	O
proc_stat	O
*	O
ps	*(struct)
,	O
unsigned	O
index	int
,	O
struct	O
proc_stat	O
*	O
*	O
thread_ps	*(*(struct))
)	O
{	O
error_t	O
err	O
=	O
proc_stat_set_flags	()->(int)
(	O
ps	*(struct)
,	O
PSTAT_NUM_THREADS	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
else	O
if	O
(	O
index	int
>=	O
ps	*(struct)
->	O
num_threads	int
)	O
return	O
EINVAL	O
;	O
else	O
{	O
struct	O
proc_stat	O
*	O
tps	*(struct)
=	O
NEW	()->(int)
(	O
struct	O
proc_stat	O
)	O
;	O
if	O
(	O
tps	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	O
;	O
tps	*(struct)
->	O
pid	int
=	O
-	O
1	int
;	O
tps	*(struct)
->	O
flags	int
=	O
PSTAT_THREAD	O
;	O
tps	*(struct)
->	O
failed	O
=	O
0	int
;	O
tps	*(struct)
->	O
inapp	O
=	O
PSTAT_PID	O
;	O
tps	*(struct)
->	O
thread_origin	O
=	O
ps	*(struct)
;	O
tps	*(struct)
->	O
thread_index	O
=	O
index	int
;	O
tps	*(struct)
->	O
context	*(struct)
=	O
ps	*(struct)
->	O
context	*(struct)
;	O
*	O
thread_ps	*(*(struct))
=	O
tps	*(struct)
;	O
return	O
0	int
;	O
}	O
}	O
