struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
{	O
unsigned	O
char	O
*	O
out	*(char)
;	O
unsigned	O
long	O
outlen	long
;	O
unsigned	O
long	O
outcnt	long
;	O
const	O
unsigned	O
char	O
*	O
in	*(char)
;	O
unsigned	O
long	O
inlen	long
;	O
unsigned	O
long	O
incnt	long
;	O
int	O
bitbuf	int
;	O
int	O
bitcnt	int
;	O
jmp_buf	array(struct(array(long),int,struct(array(long))))
env	array(struct(array(long),int,struct(array(long))))
;	O
}	O
;	O
local	O
int	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
*	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
int	O
need	int
)	O
{	O
long	O
val	long
;	O
val	long
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitbuf	int
;	O
while	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
<	O
need	int
)	O
{	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
==	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
inlen	long
)	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
env	array(struct(array(long),int,struct(array(long))))
,	O
1	int
)	O
;	O
val	long
|=	O
(	O
long	O
)	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
)	O
<<	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
+=	O
8	int
;	O
}	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitbuf	int
=	O
(	O
int	O
)	O
(	O
val	long
>>	O
need	int
)	O
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
-=	O
need	int
;	O
return	O
(	O
int	O
)	O
(	O
val	long
&	O
(	O
(	O
1L	int
<<	O
need	int
)	O
-	O
1	int
)	O
)	O
;	O
}	O
local	O
int	O
stored	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))))->(int)
(	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
*	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
)	O
{	O
unsigned	O
len	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitbuf	int
=	O
0	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
=	O
0	int
;	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
+	O
4	int
>	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
inlen	long
)	O
return	O
2	int
;	O
len	int
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
;	O
len	int
|=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
<<	O
8	int
;	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
!=	O
(	O
~	O
len	int
&	O
0xff	int
)	O
||	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
!=	O
(	O
(	O
~	O
len	int
>>	O
8	int
)	O
&	O
0xff	int
)	O
)	O
return	O
-	O
2	int
;	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
+	O
len	int
>	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
inlen	long
)	O
return	O
2	int
;	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
!=	O
NIL	O
)	O
{	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
+	O
len	int
>	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outlen	long
)	O
return	O
1	int
;	O
while	O
(	O
len	int
--	O
)	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
++	O
]	O
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
;	O
}	O
else	O
{	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
+=	O
len	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
+=	O
len	int
;	O
}	O
return	O
0	int
;	O
}	O
struct	O
huffman	struct(*(short),*(short))
{	O
short	O
*	O
count	*(short)
;	O
short	O
*	O
symbol	*(short)
;	O
}	O
;	O
local	O
int	O
decode	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))))->(int)
(	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
*	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
const	O
struct	O
huffman	struct(*(short),*(short))
*	O
h	*(struct(*(short),*(short)))
)	O
{	O
int	O
len	int
;	O
int	O
code	int
;	O
int	O
first	int
;	O
int	O
count	*(short)
;	O
int	O
index	int
;	O
int	O
bitbuf	int
;	O
int	O
left	int
;	O
short	O
*	O
next	*(short)
;	O
bitbuf	int
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitbuf	int
;	O
left	int
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
;	O
code	int
=	O
first	int
=	O
index	int
=	O
0	int
;	O
len	int
=	O
1	int
;	O
next	*(short)
=	O
h	*(struct(*(short),*(short)))
->	O
count	*(short)
+	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
while	O
(	O
left	int
--	O
)	O
{	O
code	int
|=	O
bitbuf	int
&	O
1	int
;	O
bitbuf	int
>>=	O
1	int
;	O
count	*(short)
=	O
*	O
next	*(short)
++	O
;	O
if	O
(	O
code	int
-	O
count	*(short)
<	O
first	int
)	O
{	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitbuf	int
=	O
bitbuf	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
=	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
bitcnt	int
-	O
len	int
)	O
&	O
7	int
;	O
return	O
h	*(struct(*(short),*(short)))
->	O
symbol	*(short)
[	O
index	int
+	O
(	O
code	int
-	O
first	int
)	O
]	O
;	O
}	O
index	int
+=	O
count	*(short)
;	O
first	int
+=	O
count	*(short)
;	O
first	int
<<=	O
1	int
;	O
code	int
<<=	O
1	int
;	O
len	int
++	O
;	O
}	O
left	int
=	O
(	O
MAXBITS	int
+	O
1	int
)	O
-	O
len	int
;	O
if	O
(	O
left	int
==	O
0	int
)	O
break	O
;	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
==	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
inlen	long
)	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
env	array(struct(array(long),int,struct(array(long))))
,	O
1	int
)	O
;	O
bitbuf	int
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
in	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
incnt	long
++	O
]	O
;	O
if	O
(	O
left	int
>	O
8	int
)	O
left	int
=	O
8	int
;	O
}	O
return	O
-	O
10	int
;	O
}	O
local	O
int	O
construct	(*(struct(*(short),*(short))),*(short),int)->(int)
(	O
struct	O
huffman	struct(*(short),*(short))
*	O
h	*(struct(*(short),*(short)))
,	O
const	O
short	O
*	O
length	*(short)
,	O
int	O
n	int
)	O
{	O
int	O
symbol	*(short)
;	O
int	O
len	int
;	O
int	O
left	int
;	O
short	O
offs	array(short)
[	O
MAXBITS	int
+	O
1	int
]	O
;	O
for	O
(	O
len	int
=	O
0	int
;	O
len	int
<=	O
MAXBITS	int
;	O
len	int
++	O
)	O
h	*(struct(*(short),*(short)))
->	O
count	*(short)
[	O
len	int
]	O
=	O
0	int
;	O
for	O
(	O
symbol	*(short)
=	O
0	int
;	O
symbol	*(short)
<	O
n	int
;	O
symbol	*(short)
++	O
)	O
(	O
h	*(struct(*(short),*(short)))
->	O
count	*(short)
[	O
length	*(short)
[	O
symbol	*(short)
]	O
]	O
)	O
++	O
;	O
if	O
(	O
h	*(struct(*(short),*(short)))
->	O
count	*(short)
[	O
0	int
]	O
==	O
n	int
)	O
return	O
0	int
;	O
left	int
=	O
1	int
;	O
for	O
(	O
len	int
=	O
1	int
;	O
len	int
<=	O
MAXBITS	int
;	O
len	int
++	O
)	O
{	O
left	int
<<=	O
1	int
;	O
left	int
-=	O
h	*(struct(*(short),*(short)))
->	O
count	*(short)
[	O
len	int
]	O
;	O
if	O
(	O
left	int
<	O
0	int
)	O
return	O
left	int
;	O
}	O
offs	array(short)
[	O
1	int
]	O
=	O
0	int
;	O
for	O
(	O
len	int
=	O
1	int
;	O
len	int
<	O
MAXBITS	int
;	O
len	int
++	O
)	O
offs	array(short)
[	O
len	int
+	O
1	int
]	O
=	O
offs	array(short)
[	O
len	int
]	O
+	O
h	*(struct(*(short),*(short)))
->	O
count	*(short)
[	O
len	int
]	O
;	O
for	O
(	O
symbol	*(short)
=	O
0	int
;	O
symbol	*(short)
<	O
n	int
;	O
symbol	*(short)
++	O
)	O
if	O
(	O
length	*(short)
[	O
symbol	*(short)
]	O
!=	O
0	int
)	O
h	*(struct(*(short),*(short)))
->	O
symbol	*(short)
[	O
offs	array(short)
[	O
length	*(short)
[	O
symbol	*(short)
]	O
]	O
++	O
]	O
=	O
symbol	*(short)
;	O
return	O
left	int
;	O
}	O
local	O
int	O
codes	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))),*(struct(*(short),*(short))))->(int)
(	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
*	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
const	O
struct	O
huffman	struct(*(short),*(short))
*	O
lencode	*(struct(*(short),*(short)))
,	O
const	O
struct	O
huffman	struct(*(short),*(short))
*	O
distcode	*(struct(*(short),*(short)))
)	O
{	O
int	O
symbol	*(short)
;	O
int	O
len	int
;	O
unsigned	O
dist	int
;	O
static	O
const	O
short	O
lens	array(short)
[	O
29	int
]	O
=	O
{	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
13	int
,	O
15	int
,	O
17	int
,	O
19	int
,	O
23	int
,	O
27	int
,	O
31	int
,	O
35	int
,	O
43	int
,	O
51	int
,	O
59	int
,	O
67	int
,	O
83	int
,	O
99	int
,	O
115	int
,	O
131	int
,	O
163	int
,	O
195	int
,	O
227	int
,	O
258	int
}	O
;	O
static	O
const	O
short	O
lext	array(short)
[	O
29	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
5	int
,	O
0	int
}	O
;	O
static	O
const	O
short	O
dists	array(short)
[	O
30	int
]	O
=	O
{	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
7	int
,	O
9	int
,	O
13	int
,	O
17	int
,	O
25	int
,	O
33	int
,	O
49	int
,	O
65	int
,	O
97	int
,	O
129	int
,	O
193	int
,	O
257	int
,	O
385	int
,	O
513	int
,	O
769	int
,	O
1025	int
,	O
1537	int
,	O
2049	int
,	O
3073	int
,	O
4097	int
,	O
6145	int
,	O
8193	int
,	O
12289	int
,	O
16385	int
,	O
24577	int
}	O
;	O
static	O
const	O
short	O
dext	array(short)
[	O
30	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
2	int
,	O
2	int
,	O
3	int
,	O
3	int
,	O
4	int
,	O
4	int
,	O
5	int
,	O
5	int
,	O
6	int
,	O
6	int
,	O
7	int
,	O
7	int
,	O
8	int
,	O
8	int
,	O
9	int
,	O
9	int
,	O
10	int
,	O
10	int
,	O
11	int
,	O
11	int
,	O
12	int
,	O
12	int
,	O
13	int
,	O
13	int
}	O
;	O
do	O
{	O
symbol	*(short)
=	O
decode	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))))->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
lencode	*(struct(*(short),*(short)))
)	O
;	O
if	O
(	O
symbol	*(short)
<	O
0	int
)	O
return	O
symbol	*(short)
;	O
if	O
(	O
symbol	*(short)
<	O
256	int
)	O
{	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
!=	O
NIL	O
)	O
{	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
==	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outlen	long
)	O
return	O
1	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
]	O
=	O
symbol	*(short)
;	O
}	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
++	O
;	O
}	O
else	O
if	O
(	O
symbol	*(short)
>	O
256	int
)	O
{	O
symbol	*(short)
-=	O
257	int
;	O
if	O
(	O
symbol	*(short)
>=	O
29	int
)	O
return	O
-	O
10	int
;	O
len	int
=	O
lens	array(short)
[	O
symbol	*(short)
]	O
+	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
lext	array(short)
[	O
symbol	*(short)
]	O
)	O
;	O
symbol	*(short)
=	O
decode	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))))->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
distcode	*(struct(*(short),*(short)))
)	O
;	O
if	O
(	O
symbol	*(short)
<	O
0	int
)	O
return	O
symbol	*(short)
;	O
dist	int
=	O
dists	array(short)
[	O
symbol	*(short)
]	O
+	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
dext	array(short)
[	O
symbol	*(short)
]	O
)	O
;	O
if	O
(	O
dist	int
>	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
)	O
return	O
-	O
11	int
;	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
!=	O
NIL	O
)	O
{	O
if	O
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
+	O
len	int
>	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outlen	long
)	O
return	O
1	int
;	O
while	O
(	O
len	int
--	O
)	O
{	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
]	O
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
out	*(char)
[	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
-	O
dist	int
]	O
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
++	O
;	O
}	O
}	O
else	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
->	O
outcnt	long
+=	O
len	int
;	O
}	O
}	O
while	O
(	O
symbol	*(short)
!=	O
256	int
)	O
;	O
return	O
0	int
;	O
}	O
local	O
int	O
fixed	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))))->(int)
(	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
*	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
)	O
{	O
static	O
int	O
virgin	int
=	O
1	int
;	O
static	O
short	O
lencnt	array(short)
[	O
MAXBITS	int
+	O
1	int
]	O
,	O
lensym	array(short)
[	O
FIXLCODES	int
]	O
;	O
static	O
short	O
distcnt	array(short)
[	O
MAXBITS	int
+	O
1	int
]	O
,	O
distsym	array(short)
[	O
MAXDCODES	int
]	O
;	O
static	O
struct	O
huffman	struct(*(short),*(short))
lencode	*(struct(*(short),*(short)))
,	O
distcode	*(struct(*(short),*(short)))
;	O
if	O
(	O
virgin	int
)	O
{	O
int	O
symbol	*(short)
;	O
short	O
lengths	array(short)
[	O
FIXLCODES	int
]	O
;	O
lencode	*(struct(*(short),*(short)))
.	O
count	*(short)
=	O
lencnt	array(short)
;	O
lencode	*(struct(*(short),*(short)))
.	O
symbol	*(short)
=	O
lensym	array(short)
;	O
distcode	*(struct(*(short),*(short)))
.	O
count	*(short)
=	O
distcnt	array(short)
;	O
distcode	*(struct(*(short),*(short)))
.	O
symbol	*(short)
=	O
distsym	array(short)
;	O
for	O
(	O
symbol	*(short)
=	O
0	int
;	O
symbol	*(short)
<	O
144	int
;	O
symbol	*(short)
++	O
)	O
lengths	array(short)
[	O
symbol	*(short)
]	O
=	O
8	int
;	O
for	O
(	O
;	O
symbol	*(short)
<	O
256	int
;	O
symbol	*(short)
++	O
)	O
lengths	array(short)
[	O
symbol	*(short)
]	O
=	O
9	int
;	O
for	O
(	O
;	O
symbol	*(short)
<	O
280	int
;	O
symbol	*(short)
++	O
)	O
lengths	array(short)
[	O
symbol	*(short)
]	O
=	O
7	int
;	O
for	O
(	O
;	O
symbol	*(short)
<	O
FIXLCODES	int
;	O
symbol	*(short)
++	O
)	O
lengths	array(short)
[	O
symbol	*(short)
]	O
=	O
8	int
;	O
construct	(*(struct(*(short),*(short))),*(short),int)->(int)
(	O
&	O
lencode	*(struct(*(short),*(short)))
,	O
lengths	array(short)
,	O
FIXLCODES	int
)	O
;	O
for	O
(	O
symbol	*(short)
=	O
0	int
;	O
symbol	*(short)
<	O
MAXDCODES	int
;	O
symbol	*(short)
++	O
)	O
lengths	array(short)
[	O
symbol	*(short)
]	O
=	O
5	int
;	O
construct	(*(struct(*(short),*(short))),*(short),int)->(int)
(	O
&	O
distcode	*(struct(*(short),*(short)))
,	O
lengths	array(short)
,	O
MAXDCODES	int
)	O
;	O
virgin	int
=	O
0	int
;	O
}	O
return	O
codes	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))),*(struct(*(short),*(short))))->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
&	O
lencode	*(struct(*(short),*(short)))
,	O
&	O
distcode	*(struct(*(short),*(short)))
)	O
;	O
}	O
local	O
int	O
dynamic	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))))->(int)
(	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
*	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
)	O
{	O
int	O
nlen	int
,	O
ndist	int
,	O
ncode	int
;	O
int	O
index	int
;	O
int	O
err	int
;	O
short	O
lengths	array(short)
[	O
MAXCODES	O
]	O
;	O
short	O
lencnt	array(short)
[	O
MAXBITS	int
+	O
1	int
]	O
,	O
lensym	array(short)
[	O
MAXLCODES	int
]	O
;	O
short	O
distcnt	array(short)
[	O
MAXBITS	int
+	O
1	int
]	O
,	O
distsym	array(short)
[	O
MAXDCODES	int
]	O
;	O
struct	O
huffman	struct(*(short),*(short))
lencode	*(struct(*(short),*(short)))
,	O
distcode	*(struct(*(short),*(short)))
;	O
static	O
const	O
short	O
order	array(short)
[	O
19	int
]	O
=	O
{	O
16	int
,	O
17	int
,	O
18	int
,	O
0	int
,	O
8	int
,	O
7	int
,	O
9	int
,	O
6	int
,	O
10	int
,	O
5	int
,	O
11	int
,	O
4	int
,	O
12	int
,	O
3	int
,	O
13	int
,	O
2	int
,	O
14	int
,	O
1	int
,	O
15	int
}	O
;	O
lencode	*(struct(*(short),*(short)))
.	O
count	*(short)
=	O
lencnt	array(short)
;	O
lencode	*(struct(*(short),*(short)))
.	O
symbol	*(short)
=	O
lensym	array(short)
;	O
distcode	*(struct(*(short),*(short)))
.	O
count	*(short)
=	O
distcnt	array(short)
;	O
distcode	*(struct(*(short),*(short)))
.	O
symbol	*(short)
=	O
distsym	array(short)
;	O
nlen	int
=	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
5	int
)	O
+	O
257	int
;	O
ndist	int
=	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
5	int
)	O
+	O
1	int
;	O
ncode	int
=	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
4	int
)	O
+	O
4	int
;	O
if	O
(	O
nlen	int
>	O
MAXLCODES	int
||	O
ndist	int
>	O
MAXDCODES	int
)	O
return	O
-	O
3	int
;	O
for	O
(	O
index	int
=	O
0	int
;	O
index	int
<	O
ncode	int
;	O
index	int
++	O
)	O
lengths	array(short)
[	O
order	array(short)
[	O
index	int
]	O
]	O
=	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
3	int
)	O
;	O
for	O
(	O
;	O
index	int
<	O
19	int
;	O
index	int
++	O
)	O
lengths	array(short)
[	O
order	array(short)
[	O
index	int
]	O
]	O
=	O
0	int
;	O
err	int
=	O
construct	(*(struct(*(short),*(short))),*(short),int)->(int)
(	O
&	O
lencode	*(struct(*(short),*(short)))
,	O
lengths	array(short)
,	O
19	int
)	O
;	O
if	O
(	O
err	int
!=	O
0	int
)	O
return	O
-	O
4	int
;	O
index	int
=	O
0	int
;	O
while	O
(	O
index	int
<	O
nlen	int
+	O
ndist	int
)	O
{	O
int	O
symbol	*(short)
;	O
int	O
len	int
;	O
symbol	*(short)
=	O
decode	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))))->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
&	O
lencode	*(struct(*(short),*(short)))
)	O
;	O
if	O
(	O
symbol	*(short)
<	O
0	int
)	O
return	O
symbol	*(short)
;	O
if	O
(	O
symbol	*(short)
<	O
16	int
)	O
lengths	array(short)
[	O
index	int
++	O
]	O
=	O
symbol	*(short)
;	O
else	O
{	O
len	int
=	O
0	int
;	O
if	O
(	O
symbol	*(short)
==	O
16	int
)	O
{	O
if	O
(	O
index	int
==	O
0	int
)	O
return	O
-	O
5	int
;	O
len	int
=	O
lengths	array(short)
[	O
index	int
-	O
1	int
]	O
;	O
symbol	*(short)
=	O
3	int
+	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
2	int
)	O
;	O
}	O
else	O
if	O
(	O
symbol	*(short)
==	O
17	int
)	O
symbol	*(short)
=	O
3	int
+	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
3	int
)	O
;	O
else	O
symbol	*(short)
=	O
11	int
+	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
7	int
)	O
;	O
if	O
(	O
index	int
+	O
symbol	*(short)
>	O
nlen	int
+	O
ndist	int
)	O
return	O
-	O
6	int
;	O
while	O
(	O
symbol	*(short)
--	O
)	O
lengths	array(short)
[	O
index	int
++	O
]	O
=	O
len	int
;	O
}	O
}	O
if	O
(	O
lengths	array(short)
[	O
256	int
]	O
==	O
0	int
)	O
return	O
-	O
9	int
;	O
err	int
=	O
construct	(*(struct(*(short),*(short))),*(short),int)->(int)
(	O
&	O
lencode	*(struct(*(short),*(short)))
,	O
lengths	array(short)
,	O
nlen	int
)	O
;	O
if	O
(	O
err	int
&&	O
(	O
err	int
<	O
0	int
||	O
nlen	int
!=	O
lencode	*(struct(*(short),*(short)))
.	O
count	*(short)
[	O
0	int
]	O
+	O
lencode	*(struct(*(short),*(short)))
.	O
count	*(short)
[	O
1	int
]	O
)	O
)	O
return	O
-	O
7	int
;	O
err	int
=	O
construct	(*(struct(*(short),*(short))),*(short),int)->(int)
(	O
&	O
distcode	*(struct(*(short),*(short)))
,	O
lengths	array(short)
+	O
nlen	int
,	O
ndist	int
)	O
;	O
if	O
(	O
err	int
&&	O
(	O
err	int
<	O
0	int
||	O
ndist	int
!=	O
distcode	*(struct(*(short),*(short)))
.	O
count	*(short)
[	O
0	int
]	O
+	O
distcode	*(struct(*(short),*(short)))
.	O
count	*(short)
[	O
1	int
]	O
)	O
)	O
return	O
-	O
8	int
;	O
return	O
codes	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),*(struct(*(short),*(short))),*(struct(*(short),*(short))))->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
&	O
lencode	*(struct(*(short),*(short)))
,	O
&	O
distcode	*(struct(*(short),*(short)))
)	O
;	O
}	O
int	O
puff	(*(char),*(long),*(char),*(long))->(int)
(	O
unsigned	O
char	O
*	O
dest	*(char)
,	O
unsigned	O
long	O
*	O
destlen	*(long)
,	O
const	O
unsigned	O
char	O
*	O
source	*(char)
,	O
unsigned	O
long	O
*	O
sourcelen	*(long)
)	O
{	O
struct	O
state	struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
;	O
int	O
last	int
,	O
type	int
;	O
int	O
err	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
out	*(char)
=	O
dest	*(char)
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
outlen	long
=	O
*	O
destlen	*(long)
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
outcnt	long
=	O
0	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
in	*(char)
=	O
source	*(char)
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
inlen	long
=	O
*	O
sourcelen	*(long)
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
incnt	long
=	O
0	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
bitbuf	int
=	O
0	int
;	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
bitcnt	int
=	O
0	int
;	O
if	O
(	O
setjmp	(array(struct(array(long),int,struct(array(long)))))->(int)
(	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
env	array(struct(array(long),int,struct(array(long))))
)	O
!=	O
0	int
)	O
err	int
=	O
2	int
;	O
else	O
{	O
do	O
{	O
last	int
=	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
&	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
1	int
)	O
;	O
type	int
=	O
bits	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))),int)->(int)
(	O
&	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
,	O
2	int
)	O
;	O
err	int
=	O
type	int
==	O
0	int
?	O
stored	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))))->(int)
(	O
&	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
)	O
:	O
(	O
type	int
==	O
1	int
?	O
fixed	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))))->(int)
(	O
&	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
)	O
:	O
(	O
type	int
==	O
2	int
?	O
dynamic	(*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long)))))))->(int)
(	O
&	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
)	O
:	O
-	O
1	int
)	O
)	O
;	O
if	O
(	O
err	int
!=	O
0	int
)	O
break	O
;	O
}	O
while	O
(	O
!	O
last	int
)	O
;	O
}	O
if	O
(	O
err	int
<=	O
0	int
)	O
{	O
*	O
destlen	*(long)
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
outcnt	long
;	O
*	O
sourcelen	*(long)
=	O
s	*(struct(*(char),long,long,*(char),long,long,int,int,array(struct(array(long),int,struct(array(long))))))
.	O
incnt	long
;	O
}	O
return	O
err	int
;	O
}	O
