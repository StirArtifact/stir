int	O
mu_pop3_uidl	(*(struct),int,*(*(char)))->(int)
(	O
mu_pop3_t	*(struct)
pop3	*(*(struct))
,	O
unsigned	O
int	O
msgno	int
,	O
char	O
*	O
*	O
uidl	*(*(char))
)	O
{	O
int	O
status	int
;	O
char	O
*	O
space	*(char)
;	O
if	O
(	O
pop3	*(*(struct))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
uidl	*(*(char))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
switch	O
(	O
pop3	*(*(struct))
->	O
state	*(int)
)	O
{	O
case	O
MU_POP3_NO_STATE	int
:	O
status	int
=	O
mu_pop3_writeline	(*(struct),*(char))->(int)
(	O
pop3	*(*(struct))
,	O
"UIDL %d\r\n"	*(char)
,	O
msgno	int
)	O
;	O
MU_POP3_CHECK_ERROR	O
(	O
pop3	*(*(struct))
,	O
status	int
)	O
;	O
MU_POP3_FCLR	O
(	O
pop3	*(*(struct))
,	O
MU_POP3_ACK	int
)	O
;	O
pop3	*(*(struct))
->	O
state	*(int)
=	O
MU_POP3_UIDL	int
;	O
case	O
MU_POP3_UIDL	int
:	O
status	int
=	O
mu_pop3_response	(*(struct),*(long))->(int)
(	O
pop3	*(*(struct))
,	O
NULL	O
)	O
;	O
MU_POP3_CHECK_EAGAIN	O
(	O
pop3	*(*(struct))
,	O
status	int
)	O
;	O
MU_POP3_CHECK_OK	O
(	O
pop3	*(*(struct))
)	O
;	O
pop3	*(*(struct))
->	O
state	*(int)
=	O
MU_POP3_NO_STATE	int
;	O
*	O
uidl	*(*(char))
=	O
NULL	O
;	O
space	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
pop3	*(*(struct))
->	O
ackbuf	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
space	*(char)
)	O
{	O
while	O
(	O
*	O
space	*(char)
==	O
' '	O
)	O
space	*(char)
++	O
;	O
space	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
space	*(char)
,	O
' '	O
)	O
;	O
if	O
(	O
space	*(char)
)	O
{	O
size_t	long
len	long
;	O
while	O
(	O
*	O
space	*(char)
==	O
' '	O
)	O
space	*(char)
++	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
space	*(char)
)	O
;	O
if	O
(	O
space	*(char)
[	O
len	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
space	*(char)
[	O
len	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
len	long
--	O
;	O
}	O
*	O
uidl	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
len	long
+	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
*	O
uidl	*(*(char))
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
uidl	*(*(char))
,	O
space	*(char)
,	O
len	long
)	O
;	O
}	O
}	O
if	O
(	O
*	O
uidl	*(*(char))
==	O
NULL	O
)	O
{	O
*	O
uidl	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
1	int
)	O
;	O
if	O
(	O
*	O
uidl	*(*(char))
)	O
*	O
*	O
uidl	*(*(char))
=	O
'\0'	O
;	O
else	O
status	int
=	O
ENOMEM	int
;	O
}	O
break	O
;	O
case	O
MU_POP3_ERROR	int
:	O
status	int
=	O
ECANCELED	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
