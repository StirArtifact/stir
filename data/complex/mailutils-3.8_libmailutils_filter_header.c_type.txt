enum	O
hflt_state	enum(int,int,int)
{	O
hflt_initial	int
,	O
hflt_newline	int
,	O
hflt_copy	int
}	O
;	O
static	O
int	O
new_state	(*(int),int)->(int)
(	O
int	O
*	O
pd	*(int)
,	O
unsigned	O
c	int
)	O
{	O
switch	O
(	O
*	O
pd	*(int)
)	O
{	O
case	O
hflt_initial	int
:	O
case	O
hflt_copy	int
:	O
*	O
pd	*(int)
=	O
(	O
c	int
==	O
'\n'	O
)	O
?	O
hflt_newline	int
:	O
hflt_copy	int
;	O
break	O
;	O
case	O
hflt_newline	int
:	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
return	O
1	int
;	O
*	O
pd	*(int)
=	O
hflt_copy	int
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_hflt_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
int	O
*	O
pd	*(int)
=	O
xd	*(void)
;	O
size_t	long
i	long
,	O
j	long
;	O
const	O
unsigned	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
*	O
pd	*(int)
=	O
hflt_initial	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
for	O
(	O
i	long
=	O
j	long
=	O
0	int
;	O
i	long
<	O
isize	long
&&	O
j	long
<	O
osize	long
;	O
i	long
++	O
)	O
{	O
unsigned	O
char	O
c	int
=	O
*	O
iptr	*(char)
++	O
;	O
if	O
(	O
new_state	(*(int),int)->(int)
(	O
pd	*(int)
,	O
c	int
)	O
)	O
{	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
eof	int
=	O
1	int
;	O
break	O
;	O
}	O
optr	*(char)
[	O
j	long
++	O
]	O
=	O
c	int
;	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
=	O
i	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
=	O
j	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
(	O
void	O
*	O
*	O
pret	*(*(struct))
,	O
int	O
mode	int
MU_ARG_UNUSED	O
,	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
int	O
*	O
pd	*(int)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
pd	*(int)
)	O
)	O
;	O
if	O
(	O
!	O
pd	*(int)
)	O
return	O
ENOMEM	int
;	O
*	O
pret	*(*(struct))
=	O
pd	*(int)
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))))
_header_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
=	O
{	O
"HEADER"	*(char)
,	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
,	O
NULL	O
,	O
_hflt_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
}	O
;	O
mu_filter_record_t	*(struct)
mu_header_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
&	O
_header_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
;	O
