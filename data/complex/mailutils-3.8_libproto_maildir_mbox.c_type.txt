struct	O
_maildir_message	O
{	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
amd_message	O
;	O
char	O
*	O
dir	*(char)
;	O
char	O
*	O
file_name	*(char)
;	O
unsigned	O
long	O
uid	int
;	O
}	O
;	O
static	O
struct	O
info_map	O
{	O
char	O
letter	O
;	O
int	O
flag	int
;	O
}	O
info_map	O
[	O
]	O
=	O
{	O
{	O
'D'	O
,	O
MU_ATTRIBUTE_DRAFT	O
}	O
,	O
{	O
'F'	O
,	O
MU_ATTRIBUTE_FLAGGED	O
}	O
,	O
{	O
'P'	O
,	O
0	int
}	O
,	O
{	O
'R'	O
,	O
MU_ATTRIBUTE_READ	O
}	O
,	O
{	O
'S'	O
,	O
MU_ATTRIBUTE_SEEN	O
}	O
,	O
{	O
'T'	O
,	O
MU_ATTRIBUTE_DELETED	O
}	O
,	O
{	O
'a'	O
,	O
MU_ATTRIBUTE_ANSWERED	O
}	O
,	O
}	O
;	O
static	O
int	O
flags_to_info	O
(	O
int	O
flags	int
,	O
char	O
*	O
buf	*(char)
)	O
{	O
struct	O
info_map	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
info_map	O
;	O
p	*(char)
<	O
info_map	O
+	O
info_map_size	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
p	*(char)
->	O
flag	int
&	O
flags	int
)	O
*	O
buf	*(char)
++	O
=	O
p	*(char)
->	O
letter	O
;	O
*	O
buf	*(char)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
info_to_flags	O
(	O
char	O
*	O
buf	*(char)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
struct	O
info_map	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
info_map	O
;	O
p	*(char)
<	O
info_map	O
+	O
info_map_size	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
buf	*(char)
,	O
p	*(char)
->	O
letter	O
)	O
)	O
flags	int
|=	O
p	*(char)
->	O
flag	int
;	O
return	O
flags	int
;	O
}	O
static	O
char	O
*	O
maildir_name_info_ptr	O
(	O
char	O
*	O
name	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(char)
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(char)
+	O
1	int
,	O
"2,"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
return	O
p	*(char)
+	O
3	int
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
maildir_message_cmp	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
a	*(struct(*(char),int,int))
,	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
b	*(struct(*(char),int,int))
)	O
{	O
char	O
*	O
name_a	O
,	O
*	O
name_b	O
;	O
unsigned	O
long	O
na	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
(	O
(	O
struct	O
_maildir_message	O
*	O
)	O
a	*(struct(*(char),int,int))
)	O
->	O
file_name	*(char)
,	O
&	O
name_a	O
,	O
10	int
)	O
;	O
unsigned	O
long	O
nb	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
(	O
(	O
struct	O
_maildir_message	O
*	O
)	O
b	*(struct(*(char),int,int))
)	O
->	O
file_name	*(char)
,	O
&	O
name_b	O
,	O
10	int
)	O
;	O
int	O
rc	int
;	O
if	O
(	O
na	O
>	O
nb	O
)	O
return	O
1	int
;	O
if	O
(	O
na	O
<	O
nb	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
name_a	O
&&	O
!	O
name_b	O
)	O
return	O
1	int
;	O
else	O
if	O
(	O
!	O
name_a	O
)	O
{	O
if	O
(	O
name_b	O
)	O
return	O
-	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
for	O
(	O
;	O
*	O
name_a	O
&&	O
*	O
name_a	O
!=	O
':'	O
&&	O
*	O
name_b	O
&&	O
*	O
name_b	O
!=	O
':'	O
;	O
name_a	O
++	O
,	O
name_b	O
++	O
)	O
if	O
(	O
(	O
rc	int
=	O
(	O
*	O
name_a	O
-	O
*	O
name_b	O
)	O
)	O
)	O
return	O
rc	int
;	O
if	O
(	O
(	O
*	O
name_a	O
==	O
':'	O
||	O
*	O
name_a	O
==	O
0	int
)	O
&&	O
(	O
*	O
name_b	O
==	O
':'	O
||	O
*	O
name_b	O
==	O
0	int
)	O
)	O
return	O
0	int
;	O
return	O
*	O
name_a	O
-	O
*	O
name_b	O
;	O
}	O
void	O
msg_free	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
)	O
{	O
struct	O
_maildir_message	O
*	O
mp	O
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amsg	O
;	O
free	(*(void))->(void)
(	O
mp	O
->	O
file_name	*(char)
)	O
;	O
}	O
char	O
*	O
maildir_gethostname	O
(	O
)	O
{	O
char	O
hostname	O
[	O
256	int
]	O
;	O
char	O
*	O
hp	O
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
s	*(char)
;	O
if	O
(	O
gethostname	(*(char),long)->(int)
(	O
hostname	O
,	O
sizeof	O
hostname	O
)	O
<	O
0	int
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
hostname	O
,	O
"localhost"	*(char)
)	O
;	O
for	O
(	O
s	*(char)
=	O
0	int
,	O
p	*(char)
=	O
hostname	O
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
if	O
(	O
*	O
p	*(char)
==	O
'/'	O
||	O
*	O
p	*(char)
==	O
':'	O
)	O
s	*(char)
+=	O
4	int
;	O
if	O
(	O
s	*(char)
)	O
{	O
char	O
*	O
q	*(char)
;	O
hp	O
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
hostname	O
)	O
+	O
s	*(char)
+	O
1	int
)	O
;	O
for	O
(	O
p	*(char)
=	O
hostname	O
,	O
q	*(char)
=	O
hp	O
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'/'	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
q	*(char)
,	O
"\\057"	*(char)
,	O
4	int
)	O
;	O
q	*(char)
+=	O
4	int
;	O
break	O
;	O
case	O
':'	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
q	*(char)
,	O
"\\072"	*(char)
,	O
4	int
)	O
;	O
q	*(char)
+=	O
4	int
;	O
break	O
;	O
default	O
:	O
*	O
q	*(char)
++	O
=	O
*	O
p	*(char)
++	O
;	O
}	O
*	O
q	*(char)
=	O
0	int
;	O
}	O
else	O
hp	O
=	O
strdup	(*(char))->(*(char))
(	O
hostname	O
)	O
;	O
return	O
hp	O
;	O
}	O
int	O
read_random	O
(	O
void	O
*	O
buf	*(char)
,	O
size_t	long
size	long
)	O
{	O
int	O
rc	int
;	O
int	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/urandom"	*(char)
,	O
O_RDONLY	O
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
rc	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buf	*(char)
,	O
size	long
)	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
rc	int
!=	O
size	long
;	O
}	O
int	O
maildir_mkfilename	O
(	O
const	O
char	O
*	O
directory	O
,	O
const	O
char	O
*	O
suffix	*(char)
,	O
const	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
*	O
ret_name	O
)	O
{	O
size_t	long
size	long
=	O
strlen	(*(char))->(long)
(	O
directory	O
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
suffix	*(char)
)	O
+	O
1	int
;	O
char	O
*	O
tmp	O
;	O
if	O
(	O
name	*(char)
)	O
size	long
+=	O
1	int
+	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
tmp	O
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
tmp	O
)	O
return	O
errno	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	O
,	O
"%s/%s"	*(char)
,	O
directory	O
,	O
suffix	*(char)
)	O
;	O
if	O
(	O
name	*(char)
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
tmp	O
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
tmp	O
,	O
name	*(char)
)	O
;	O
}	O
*	O
ret_name	O
=	O
tmp	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
mk_info_filename	O
(	O
char	O
*	O
directory	O
,	O
char	O
*	O
suffix	*(char)
,	O
char	O
*	O
name	*(char)
,	O
int	O
flags	int
,	O
char	O
*	O
*	O
ret_name	O
)	O
{	O
char	O
fbuf	O
[	O
info_map_size	O
+	O
1	int
]	O
;	O
char	O
*	O
tmp	O
;	O
int	O
namelen	O
;	O
tmp	O
=	O
strchr	(*(char),int)->(*(char))
(	O
name	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
tmp	O
)	O
namelen	O
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
else	O
namelen	O
=	O
tmp	O
-	O
name	*(char)
;	O
flags_to_info	O
(	O
flags	int
,	O
fbuf	O
)	O
;	O
return	O
mu_asprintf	O
(	O
ret_name	O
,	O
"%s/%s/%*.*s:2,%s"	*(char)
,	O
directory	O
,	O
suffix	*(char)
,	O
namelen	O
,	O
namelen	O
,	O
name	*(char)
,	O
fbuf	O
)	O
;	O
}	O
char	O
*	O
maildir_uniq	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
int	O
fd	int
)	O
{	O
char	O
buffer	*(char)
[	O
PATH_MAX	O
]	O
;	O
int	O
ind	O
=	O
0	int
;	O
char	O
*	O
hostname	O
=	O
maildir_gethostname	O
(	O
)	O
;	O
struct	O
timeval	struct(long,long)
tv	O
;	O
unsigned	O
long	O
n	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	O
,	O
NULL	O
)	O
;	O
FMT	O
(	O
"%lu"	*(char)
,	O
tv	O
.	O
tv_sec	long
)	O
;	O
COPY	O
(	O
"."	*(char)
)	O
;	O
if	O
(	O
read_random	O
(	O
&	O
n	int
,	O
sizeof	O
(	O
unsigned	O
long	O
)	O
)	O
)	O
PFX	O
(	O
'R'	O
,	O
"%lX"	*(char)
,	O
n	int
)	O
;	O
if	O
(	O
fd	int
>	O
0	int
&&	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
st	*(struct(long,long,long))
)	O
==	O
0	int
)	O
{	O
PFX	O
(	O
'I'	O
,	O
"%lX"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
st	*(struct(long,long,long))
.	O
st_ino	long
)	O
;	O
PFX	O
(	O
'V'	O
,	O
"%lX"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
st	*(struct(long,long,long))
.	O
st_dev	long
)	O
;	O
}	O
PFX	O
(	O
'M'	O
,	O
"%lu"	*(char)
,	O
tv	O
.	O
tv_usec	long
)	O
;	O
PFX	O
(	O
'P'	O
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
getpid	()->(int)
(	O
)	O
)	O
;	O
PFX	O
(	O
'Q'	O
,	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
amd	*(struct)
->	O
msg_count	O
)	O
;	O
PFX	O
(	O
'.'	O
,	O
"%s"	*(char)
,	O
hostname	O
)	O
;	O
free	(*(void))->(void)
(	O
hostname	O
)	O
;	O
buffer	*(char)
[	O
ind	O
]	O
=	O
0	int
;	O
return	O
strdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
int	O
maildir_cur_message_name	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
,	O
char	O
*	O
*	O
pname	O
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amsg	O
;	O
return	O
maildir_mkfilename	O
(	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
,	O
msg	*(struct)
->	O
dir	*(char)
,	O
msg	*(struct)
->	O
file_name	*(char)
,	O
pname	O
)	O
;	O
}	O
static	O
int	O
maildir_new_message_name	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
,	O
int	O
flags	int
,	O
int	O
expunge	int
,	O
char	O
*	O
*	O
pname	O
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amsg	O
;	O
if	O
(	O
expunge	int
&&	O
(	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	O
)	O
)	O
{	O
*	O
pname	O
=	O
NULL	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
msg	*(struct)
->	O
dir	*(char)
,	O
CURSUF	O
)	O
==	O
0	int
)	O
return	O
mk_info_filename	O
(	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
,	O
CURSUF	O
,	O
msg	*(struct)
->	O
file_name	*(char)
,	O
flags	int
,	O
pname	O
)	O
;	O
else	O
return	O
maildir_mkfilename	O
(	O
amsg	O
->	O
amd	*(struct)
->	O
name	*(char)
,	O
msg	*(struct)
->	O
dir	*(char)
,	O
msg	*(struct)
->	O
file_name	*(char)
,	O
pname	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
maildir_msg_free	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
)	O
{	O
struct	O
_maildir_message	O
*	O
mp	O
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amsg	O
;	O
if	O
(	O
mp	O
)	O
free	(*(void))->(void)
(	O
mp	O
->	O
file_name	*(char)
)	O
;	O
}	O
static	O
int	O
maildir_message_uid	O
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
size_t	long
*	O
puid	*(long)
)	O
{	O
struct	O
_maildir_message	O
*	O
mp	O
=	O
mu_message_get_owner	(*(struct))->(*(void))
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
puid	*(long)
)	O
*	O
puid	*(long)
=	O
mp	O
->	O
uid	int
;	O
return	O
0	int
;	O
}	O
static	O
size_t	long
maildir_next_uid	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
_amd_get_message	O
(	O
amd	*(struct)
,	O
amd	*(struct)
->	O
msg_count	O
)	O
;	O
return	O
(	O
msg	*(struct)
?	O
msg	*(struct)
->	O
uid	int
:	O
0	int
)	O
+	O
1	int
;	O
}	O
static	O
void	O
maildir_delete_file	O
(	O
char	O
*	O
dirname	O
,	O
char	O
*	O
filename	*(char)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
char	O
*	O
name	*(char)
;	O
int	O
rc	int
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
dirname	O
,	O
filename	*(char)
,	O
NULL	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"maildir: failed to create file name: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
time	struct(long,long)
(	O
NULL	O
)	O
-	O
st	*(struct(long,long,long))
.	O
st_atime	O
>	O
36	int
*	O
3600	int
)	O
remove	(*(char))->(int)
(	O
name	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
maildir_opendir	O
(	O
DIR	struct
*	O
*	O
dir	*(char)
,	O
char	O
*	O
name	*(char)
,	O
int	O
permissions	O
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
*	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
*	O
dir	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	O
)	O
{	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
name	*(char)
,	O
permissions	O
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't create directory %s: %s"	*(char)
,	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
*	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
name	*(char)
)	O
;	O
if	O
(	O
*	O
dir	*(char)
)	O
return	O
0	int
;	O
}	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't open directory %s: %s"	*(char)
,	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_create	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
int	O
flags	int
)	O
{	O
static	O
char	O
*	O
dirs	O
[	O
]	O
=	O
{	O
TMPSUF	O
,	O
NEWSUF	O
,	O
CURSUF	O
}	O
;	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
3	int
;	O
i	O
++	O
)	O
{	O
DIR	struct
*	O
dir	*(char)
;	O
int	O
rc	int
;	O
char	O
*	O
tmpname	O
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
dirs	O
[	O
i	O
]	O
,	O
NULL	O
,	O
&	O
tmpname	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
maildir_opendir	O
(	O
&	O
dir	*(char)
,	O
tmpname	O
,	O
PERMS	O
|	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
free	(*(void))->(void)
(	O
tmpname	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_msg_init	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amm	O
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amm	O
;	O
char	O
*	O
name	*(char)
,	O
*	O
fname	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
int	O
i	O
;	O
int	O
rc	int
;	O
name	*(char)
=	O
maildir_uniq	O
(	O
amd	*(struct)
,	O
-	O
1	int
)	O
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
NEWSUF	O
,	O
name	*(char)
,	O
&	O
fname	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
msg	*(struct)
->	O
dir	*(char)
=	O
TMPSUF	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
NTRIES	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fname	O
,	O
&	O
st	*(struct(long,long,long))
)	O
<	O
0	int
&&	O
errno	O
==	O
ENOENT	O
)	O
{	O
msg	*(struct)
->	O
uid	int
=	O
amd	*(struct)
->	O
next_uid	O
(	O
amd	*(struct)
)	O
;	O
msg	*(struct)
->	O
file_name	*(char)
=	O
name	*(char)
;	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
return	O
0	int
;	O
}	O
mu_diag_output	(int,*(char))->(void)
(	O
MU_DIAG_WARNING	O
,	O
"cannot stat %s: %s"	*(char)
,	O
fname	O
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
sleep	(int)->(int)
(	O
2	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
EAGAIN	O
;	O
}	O
static	O
int	O
maildir_msg_finish_delivery	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amm	O
,	O
const	O
mu_message_t	*(struct)
orig_msg	O
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amm	O
;	O
char	O
*	O
oldname	O
,	O
*	O
newname	O
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
int	O
flags	int
;	O
int	O
rc	int
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
TMPSUF	O
,	O
msg	*(struct)
->	O
file_name	*(char)
,	O
&	O
oldname	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
orig_msg	O
,	O
&	O
attr	*(struct)
)	O
==	O
0	int
&&	O
mu_attribute_is_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
&&	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
{	O
msg	*(struct)
->	O
dir	*(char)
=	O
CURSUF	O
;	O
rc	int
=	O
mk_info_filename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
CURSUF	O
,	O
msg	*(struct)
->	O
file_name	*(char)
,	O
flags	int
,	O
&	O
newname	O
)	O
;	O
}	O
else	O
{	O
msg	*(struct)
->	O
dir	*(char)
=	O
NEWSUF	O
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
NEWSUF	O
,	O
msg	*(struct)
->	O
file_name	*(char)
,	O
&	O
newname	O
)	O
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
unlink	(*(char))->(int)
(	O
newname	O
)	O
&&	O
errno	O
!=	O
ENOENT	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't unlink %s: %s"	*(char)
,	O
newname	O
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
else	O
if	O
(	O
link	(*(char),*(char))->(int)
(	O
oldname	O
,	O
newname	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
unlink	(*(char))->(int)
(	O
oldname	O
)	O
)	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't unlink %s: %s"	*(char)
,	O
oldname	O
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"renaming %s to %s failed: %s"	*(char)
,	O
oldname	O
,	O
newname	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
oldname	O
)	O
;	O
free	(*(void))->(void)
(	O
newname	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
maildir_flush	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
int	O
rc	int
;	O
DIR	struct
*	O
dir	*(char)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
char	O
*	O
tmpname	O
;	O
if	O
(	O
!	O
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
&	O
MU_STREAM_WRITE	O
)	O
)	O
return	O
EACCES	O
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
TMPSUF	O
,	O
NULL	O
,	O
&	O
tmpname	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
maildir_opendir	O
(	O
&	O
dir	*(char)
,	O
tmpname	O
,	O
PERMS	O
|	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
tmpname	O
)	O
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
switch	O
(	O
entry	O
->	O
d_name	array(char)
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
break	O
;	O
default	O
:	O
maildir_delete_file	O
(	O
tmpname	O
,	O
entry	O
->	O
d_name	array(char)
)	O
;	O
break	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
tmpname	O
)	O
;	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
maildir_deliver_new	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
DIR	struct
*	O
dir	*(char)
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
int	O
err	int
=	O
0	int
;	O
if	O
(	O
!	O
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
&	O
MU_STREAM_WRITE	O
)	O
)	O
return	O
EACCES	O
;	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
char	O
*	O
oldname	O
,	O
*	O
newname	O
;	O
int	O
rc	int
;	O
switch	O
(	O
entry	O
->	O
d_name	array(char)
[	O
0	int
]	O
)	O
{	O
case	O
'.'	O
:	O
break	O
;	O
default	O
:	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
NEWSUF	O
,	O
entry	O
->	O
d_name	array(char)
,	O
&	O
oldname	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mk_info_filename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
CURSUF	O
,	O
entry	O
->	O
d_name	array(char)
,	O
0	int
,	O
&	O
newname	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
oldname	O
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
rename	(*(char),*(char))->(int)
(	O
oldname	O
,	O
newname	O
)	O
)	O
{	O
err	int
=	O
MU_ERR_FAILURE	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"renaming %s to %s failed: %s"	*(char)
,	O
oldname	O
,	O
newname	O
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
oldname	O
)	O
;	O
free	(*(void))->(void)
(	O
newname	O
)	O
;	O
}	O
}	O
return	O
err	int
;	O
}	O
static	O
int	O
maildir_scan_dir	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
DIR	struct
*	O
dir	*(char)
,	O
char	O
*	O
dirname	O
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
,	O
key	*(char)
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
index	(*(char),int)->(*(char))
;	O
int	O
rc	int
=	O
0	int
;	O
int	O
need_sort	O
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
char	O
*	O
fname	O
;	O
if	O
(	O
entry	O
->	O
d_name	array(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
continue	O
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
dirname	O
,	O
entry	O
->	O
d_name	array(char)
,	O
&	O
fname	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"maildir_mkfilename"	*(char)
,	O
entry	O
->	O
d_name	array(char)
,	O
rc	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fname	O
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't stat %s: %s"	*(char)
,	O
fname	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
continue	O
;	O
}	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
if	O
(	O
!	O
S_ISREG	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
continue	O
;	O
msg	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
msg	*(struct)
)	O
{	O
rc	int
=	O
ENOMEM	O
;	O
break	O
;	O
}	O
key	*(char)
.	O
file_name	*(char)
=	O
entry	O
->	O
d_name	array(char)
;	O
if	O
(	O
!	O
amd_msg_lookup	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
&	O
key	*(char)
,	O
&	O
index	(*(char),int)->(*(char))
)	O
)	O
continue	O
;	O
rc	int
=	O
_amd_message_append	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
msg	*(struct)
)	O
;	O
break	O
;	O
}	O
msg	*(struct)
->	O
dir	*(char)
=	O
dirname	O
;	O
msg	*(struct)
->	O
file_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
entry	O
->	O
d_name	array(char)
)	O
;	O
p	*(char)
=	O
maildir_name_info_ptr	O
(	O
msg	*(struct)
->	O
file_name	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
info_to_flags	O
(	O
p	*(char)
)	O
;	O
else	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
0	int
;	O
msg	*(struct)
->	O
amd_message	O
.	O
orig_flags	int
=	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
;	O
need_sort	O
=	O
1	int
;	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
need_sort	O
)	O
amd_sort	O
(	O
amd	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_scan_unlocked	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
*	O
pcount	*(long)
,	O
int	O
do_notify	int
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
DIR	struct
*	O
dir	*(char)
;	O
int	O
status	int
=	O
0	int
;	O
char	O
*	O
name	*(char)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
size_t	long
i	O
;	O
maildir_flush	O
(	O
amd	*(struct)
)	O
;	O
status	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
NEWSUF	O
,	O
NULL	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
maildir_opendir	O
(	O
&	O
dir	*(char)
,	O
name	*(char)
,	O
PERMS	O
|	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
maildir_deliver_new	O
(	O
amd	*(struct)
,	O
dir	*(char)
)	O
)	O
status	int
=	O
maildir_scan_dir	O
(	O
amd	*(struct)
,	O
dir	*(char)
,	O
NEWSUF	O
)	O
;	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
status	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
CURSUF	O
,	O
NULL	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
maildir_opendir	O
(	O
&	O
dir	*(char)
,	O
name	*(char)
,	O
PERMS	O
|	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
maildir_scan_dir	O
(	O
amd	*(struct)
,	O
dir	*(char)
,	O
CURSUF	O
)	O
;	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
amd	*(struct)
->	O
msg_count	O
;	O
i	O
++	O
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
_amd_get_message	O
(	O
amd	*(struct)
,	O
i	O
)	O
;	O
msg	*(struct)
->	O
uid	int
=	O
i	O
;	O
if	O
(	O
do_notify	int
)	O
DISPATCH_ADD_MSG	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
amd	*(struct)
,	O
i	O
)	O
;	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
amd	*(struct)
->	O
name	*(char)
,	O
&	O
st	*(struct(long,long,long))
)	O
==	O
0	int
)	O
amd	*(struct)
->	O
mtime	long
=	O
st	*(struct(long,long,long))
.	O
st_mtime	O
;	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
amd	*(struct)
->	O
msg_count	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
maildir_scan0	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
size_t	long
msgno	long
MU_ARG_UNUSED	O
,	O
size_t	long
*	O
pcount	*(long)
,	O
int	O
do_notify	int
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
if	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
flags	int
&	O
MU_STREAM_APPEND	O
)	O
return	O
0	int
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
rc	int
=	O
maildir_scan_unlocked	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
pcount	*(long)
,	O
do_notify	int
)	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_size_dir	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
char	O
*	O
dirsuf	O
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
DIR	struct
*	O
dir	*(char)
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
entry	O
;	O
int	O
rc	int
=	O
0	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	*(struct(long,long,long))
;	O
char	O
*	O
name	*(char)
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
dirsuf	O
,	O
NULL	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
dir	*(char)
=	O
opendir	(*(char))->(*(struct))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't open directory %s: %s"	*(char)
,	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
ENOENT	O
)	O
return	O
0	int
;	O
return	O
rc	int
;	O
}	O
while	O
(	O
(	O
entry	O
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dir	*(char)
)	O
)	O
)	O
{	O
char	O
*	O
fname	O
;	O
if	O
(	O
entry	O
->	O
d_name	array(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
continue	O
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
dirsuf	O
,	O
entry	O
->	O
d_name	array(char)
,	O
&	O
fname	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"maildir_mkfilename"	*(char)
,	O
entry	O
->	O
d_name	array(char)
,	O
rc	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
fname	O
,	O
&	O
st	*(struct(long,long,long))
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't stat %s: %s"	*(char)
,	O
fname	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
continue	O
;	O
}	O
free	(*(void))->(void)
(	O
fname	O
)	O
;	O
if	O
(	O
S_ISREG	O
(	O
st	*(struct(long,long,long))
.	O
st_mode	int
)	O
)	O
*	O
psize	*(long)
+=	O
st	*(struct(long,long,long))
.	O
st_size	long
;	O
}	O
closedir	(*(struct))->(int)
(	O
dir	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_size_unlocked	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
mu_off_t	long
size	long
=	O
0	int
;	O
int	O
rc	int
;	O
rc	int
=	O
maildir_size_dir	O
(	O
amd	*(struct)
,	O
NEWSUF	O
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
maildir_size_dir	O
(	O
amd	*(struct)
,	O
CURSUF	O
,	O
&	O
size	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
psize	*(long)
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_size	O
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
mu_off_t	long
*	O
psize	*(long)
)	O
{	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
data	*(void)
;	O
int	O
rc	int
;	O
if	O
(	O
amd	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	O
;	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
rc	int
=	O
maildir_size_unlocked	O
(	O
amd	*(struct)
,	O
psize	*(long)
)	O
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
monitor	*(struct(*(void),*(void),int,int))
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_qfetch	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
,	O
mu_message_qid_t	*(char)
qid	*(char)
)	O
{	O
struct	O
_maildir_message	O
*	O
msg	*(struct)
;	O
char	O
*	O
name	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
qid	*(char)
,	O
'/'	O
)	O
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
dir	*(char)
;	O
if	O
(	O
!	O
name	*(char)
)	O
return	O
EINVAL	O
;	O
name	*(char)
++	O
;	O
if	O
(	O
name	*(char)
-	O
qid	*(char)
<	O
4	int
)	O
return	O
EINVAL	O
;	O
else	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
-	O
4	int
,	O
CURSUF	O
,	O
sizeof	O
(	O
CURSUF	O
)	O
-	O
1	int
)	O
==	O
0	int
)	O
dir	*(char)
=	O
CURSUF	O
;	O
else	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
-	O
4	int
,	O
NEWSUF	O
,	O
sizeof	O
(	O
NEWSUF	O
)	O
-	O
1	int
)	O
==	O
0	int
)	O
dir	*(char)
=	O
NEWSUF	O
;	O
else	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
-	O
4	int
,	O
TMPSUF	O
,	O
sizeof	O
(	O
TMPSUF	O
)	O
-	O
1	int
)	O
==	O
0	int
)	O
dir	*(char)
=	O
TMPSUF	O
;	O
else	O
return	O
EINVAL	O
;	O
msg	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
msg	*(struct)
)	O
)	O
;	O
msg	*(struct)
->	O
file_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
msg	*(struct)
->	O
dir	*(char)
=	O
dir	*(char)
;	O
p	*(char)
=	O
maildir_name_info_ptr	O
(	O
msg	*(struct)
->	O
file_name	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
info_to_flags	O
(	O
p	*(char)
)	O
;	O
else	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
=	O
0	int
;	O
msg	*(struct)
->	O
amd_message	O
.	O
orig_flags	int
=	O
msg	*(struct)
->	O
amd_message	O
.	O
attr_flags	int
;	O
msg	*(struct)
->	O
uid	int
=	O
amd	*(struct)
->	O
next_uid	O
(	O
amd	*(struct)
)	O
;	O
_amd_message_insert	O
(	O
amd	*(struct)
,	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
)	O
msg	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
maildir_remove	O
(	O
struct	O
_amd_data	O
*	O
amd	*(struct)
)	O
{	O
int	O
i	O
;	O
static	O
char	O
*	O
suf	*(char)
[	O
3	int
]	O
=	O
{	O
NEWSUF	O
,	O
CURSUF	O
,	O
TMPSUF	O
}	O
;	O
int	O
rc	int
=	O
0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
rc	int
==	O
0	int
&&	O
i	O
<	O
3	int
;	O
i	O
++	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
rc	int
=	O
maildir_mkfilename	O
(	O
amd	*(struct)
->	O
name	*(char)
,	O
suf	*(char)
[	O
i	O
]	O
,	O
NULL	O
,	O
&	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
amd_remove_dir	O
(	O
name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_output	(int,*(char))->(void)
(	O
MU_DIAG_WARNING	O
,	O
"removing contents of %s failed: %s"	*(char)
,	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
free	(*(void))->(void)
(	O
name	*(char)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
maildir_chattr_msg	O
(	O
struct	O
_amd_message	struct(*(struct),long,long,int,int,long,long,long,*(struct),*(struct))
*	O
amsg	O
,	O
int	O
expunge	int
)	O
{	O
struct	O
_maildir_message	O
*	O
mp	O
=	O
(	O
struct	O
_maildir_message	O
*	O
)	O
amsg	O
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
=	O
amsg	O
->	O
amd	*(struct)
;	O
int	O
rc	int
;	O
char	O
*	O
new_name	O
;	O
rc	int
=	O
amd	*(struct)
->	O
new_msg_file_name	O
(	O
amsg	O
,	O
amsg	O
->	O
attr_flags	int
,	O
expunge	int
,	O
&	O
new_name	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
new_name	O
)	O
{	O
if	O
(	O
unlink	(*(char))->(int)
(	O
mp	O
->	O
file_name	*(char)
)	O
)	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"can't unlink %s: %s"	*(char)
,	O
mp	O
->	O
file_name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
char	O
*	O
cur_name	O
;	O
rc	int
=	O
maildir_cur_message_name	O
(	O
amsg	O
,	O
&	O
cur_name	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
new_name	O
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
rename	(*(char),*(char))->(int)
(	O
cur_name	O
,	O
new_name	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	O
)	O
mu_observable_notify	(*(struct),int,*(void))->(int)
(	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
->	O
observable	*(struct)
,	O
MU_EVT_MAILBOX_CORRUPT	O
,	O
amd	*(struct)
->	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
;	O
else	O
{	O
rc	int
=	O
errno	O
;	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	O
,	O
MU_DEBUG_ERROR	O
,	O
(	O
"renaming %s to %s failed: %s"	*(char)
,	O
cur_name	O
,	O
new_name	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
cur_name	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
new_name	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
_mailbox_maildir_init	(*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*`,*`,int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*`)->(void)),*((*`,int)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,long,*`)->(int)),*((*`)->(int)),*((*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`,int,long,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)))))->(int)
(	O
mu_mailbox_t	*(struct)
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
)	O
{	O
int	O
rc	int
;	O
struct	O
_amd_data	O
*	O
amd	*(struct)
;	O
rc	int
=	O
amd_init_mailbox	O
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
sizeof	O
(	O
struct	O
_amd_data	O
)	O
,	O
&	O
amd	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
amd	*(struct)
->	O
msg_size	O
=	O
sizeof	O
(	O
struct	O
_maildir_message	O
)	O
;	O
amd	*(struct)
->	O
msg_free	O
=	O
maildir_msg_free	O
;	O
amd	*(struct)
->	O
create	O
=	O
maildir_create	O
;	O
amd	*(struct)
->	O
msg_init_delivery	O
=	O
maildir_msg_init	O
;	O
amd	*(struct)
->	O
msg_finish_delivery	O
=	O
maildir_msg_finish_delivery	O
;	O
amd	*(struct)
->	O
cur_msg_file_name	O
=	O
maildir_cur_message_name	O
;	O
amd	*(struct)
->	O
new_msg_file_name	O
=	O
maildir_new_message_name	O
;	O
amd	*(struct)
->	O
scan0	O
=	O
maildir_scan0	O
;	O
amd	*(struct)
->	O
qfetch	O
=	O
maildir_qfetch	O
;	O
amd	*(struct)
->	O
msg_cmp	O
=	O
maildir_message_cmp	O
;	O
amd	*(struct)
->	O
message_uid	O
=	O
maildir_message_uid	O
;	O
amd	*(struct)
->	O
next_uid	O
=	O
maildir_next_uid	O
;	O
amd	*(struct)
->	O
remove	(*(char))->(int)
=	O
maildir_remove	O
;	O
amd	*(struct)
->	O
chattr_msg	O
=	O
maildir_chattr_msg	O
;	O
amd	*(struct)
->	O
capabilities	O
=	O
MU_AMD_STATUS	O
;	O
amd	*(struct)
->	O
mailbox_size	O
=	O
maildir_size	O
;	O
{	O
mu_property_t	*(struct)
property	*(struct)
=	O
NULL	O
;	O
mu_mailbox_get_property	(*(struct),*(*(struct)))->(int)
(	O
mailbox	*(struct(*(struct),*(struct),*(struct),*(struct),*(struct),int,*(struct),*(struct(*(void),*(void),int,int)),*(struct),*(char),int,*(struct(short,array(char))),*(void),*((*(struct`))->(void)),*((*(struct`),int)->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),long,*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),*(char),*(*`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),int,long,*(long))->(int)),*((*(struct`),*(struct`),*(char),int)->(int)),*((*(struct`),*(long))->(int))))
,	O
&	O
property	*(struct)
)	O
;	O
mu_property_set_value	(*(struct),*(char),*(char),int)->(int)
(	O
property	*(struct)
,	O
"TYPE"	*(char)
,	O
"MAILDIR"	*(char)
,	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
