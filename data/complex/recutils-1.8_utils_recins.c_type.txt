bool	bool
recins_insert_record	(*(struct),*(char),*(struct))->(bool)
(	O
rec_db_t	*(struct)
db	*(struct)
,	O
char	O
*	O
type	enum(int,int,int,int)
,	O
rec_record_t	*(struct)
record	*(struct)
)	O
;	O
void	O
recins_parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
;	O
char	O
*	O
recutl_type	*(char)
=	O
NULL	O
;	O
rec_sex_t	*(struct)
recutl_sex	*(struct)
=	O
NULL	O
;	O
char	O
*	O
recutl_sex_str	*(char)
=	O
NULL	O
;	O
char	O
*	O
recutl_quick_str	*(char)
=	O
NULL	O
;	O
bool	bool
recutl_insensitive	bool
=	O
false	int
;	O
rec_record_t	*(struct)
recins_record	*(struct)
=	O
NULL	O
;	O
char	O
*	O
recins_file	*(char)
=	O
NULL	O
;	O
bool	bool
recins_force	bool
=	O
false	int
;	O
bool	bool
recins_verbose	bool
=	O
false	int
;	O
bool	bool
recins_external	bool
=	O
true	int
;	O
bool	bool
recins_auto	bool
=	O
true	int
;	O
char	O
*	O
recins_password	*(char)
=	O
NULL	O
;	O
size_t	long
recutl_random	long
=	O
0	int
;	O
enum	O
{	O
COMMON_ARGS	O
,	O
RECORD_SELECTION_ARGS	O
,	O
NAME_ARG	int
,	O
VALUE_ARG	int
,	O
FORCE_ARG	int
,	O
VERBOSE_ARG	int
,	O
NO_EXTERNAL_ARG	int
,	O
RECORD_ARG	int
,	O
NO_AUTO_ARG	int
}	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
GNU_longOptions	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
COMMON_LONG_ARGS	O
,	O
RECORD_SELECTION_LONG_ARGS	O
,	O
{	O
"type"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
TYPE_ARG	int
}	O
,	O
{	O
"name"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
NAME_ARG	int
}	O
,	O
{	O
"value"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
VALUE_ARG	int
}	O
,	O
{	O
"force"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
FORCE_ARG	int
}	O
,	O
{	O
"verbose"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
VERBOSE_ARG	int
}	O
,	O
{	O
"no-external"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
NO_EXTERNAL_ARG	int
}	O
,	O
{	O
"record"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
RECORD_ARG	int
}	O
,	O
{	O
"no-auto"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
NO_AUTO_ARG	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
void	O
recutl_print_help	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: recins [OPTION]... [-t TYPE] [-n NUM | -e RECORD_EXPR | -q STR | -m NUM] [(-f NAME -v STR) | -r RECDATA]... [FILE]\n"	*(char)
)	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Insert new records in a rec database.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"  -f, --field=STR                     field name; should be followed by a -v.\n  -v, --value=STR                     field value; should be preceded by an -f.\n  -r, --record=STR                    record that will be inserted in the file.\n      --force                         insert the record even if it is violating\n                                        record restrictions.\n      --no-external                   don't use external descriptors.\n      --no-auto                       don't insert auto generated fields.\n      --verbose                       give a detailed report if the integrity check\n                                        fails.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
recutl_print_help_common	()->(void)
(	O
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
recutl_print_help_record_selection	()->(void)
(	O
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"If no FILE is specified then the command acts like a filter, getting\nthe data from standard input and writing the result to standard output.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
puts	(*(char))->(int)
(	O
""	*(char)
)	O
;	O
recutl_print_help_footer	()->(void)
(	O
)	O
;	O
}	O
void	O
recins_parse_args	(int,*(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
ret	int
;	O
char	O
c	int
;	O
rec_field_t	*(struct)
field	*(struct)
=	O
NULL	O
;	O
char	O
*	O
field_name	*(char)
=	O
NULL	O
;	O
rec_record_t	*(struct)
provided_record	*(struct)
;	O
while	O
(	O
(	O
ret	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
RECORD_SELECTION_SHORT_ARGS	*(char)
ENCRYPTION_SHORT_ARGS	*(char)
"f:v:r:"	*(char)
,	O
GNU_longOptions	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
c	int
=	O
ret	int
;	O
switch	O
(	O
c	int
)	O
{	O
COMMON_ARGS_CASES	O
RECORD_SELECTION_ARGS_CASES	O
case	O
FORCE_ARG	int
:	O
{	O
recins_force	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
VERBOSE_ARG	int
:	O
{	O
recins_verbose	bool
=	O
true	int
;	O
break	O
;	O
}	O
case	O
NAME_ARG	int
:	O
case	O
'f'	O
:	O
{	O
if	O
(	O
field	*(struct)
!=	O
NULL	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"a -f should be followed by a -v\n"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
recins_record	*(struct)
==	O
NULL	O
)	O
{	O
recins_record	*(struct)
=	O
rec_record_new	()->(*(struct))
(	O
)	O
;	O
rec_record_set_source	(*(struct),*(char))->(void)
(	O
recins_record	*(struct)
,	O
"cmdli"	*(char)
)	O
;	O
rec_record_set_location	(*(struct),long)->(void)
(	O
recins_record	*(struct)
,	O
0	int
)	O
;	O
}	O
if	O
(	O
!	O
rec_field_name_p	(*(char))->(bool)
(	O
optarg	*(char)
)	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"invalid field name %s.\n"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
}	O
field	*(struct)
=	O
rec_field_new	(*(char),*(char))->(*(struct))
(	O
optarg	*(char)
,	O
"foo"	*(char)
)	O
;	O
break	O
;	O
}	O
case	O
VALUE_ARG	int
:	O
case	O
'v'	O
:	O
{	O
if	O
(	O
field	*(struct)
==	O
NULL	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"a -v should be preceded by a -f\n"	*(char)
)	O
)	O
;	O
}	O
rec_field_set_value	(*(struct),*(char))->(bool)
(	O
field	*(struct)
,	O
optarg	*(char)
)	O
;	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
recins_record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
field	*(struct)
,	O
MSET_ANY	int
)	O
;	O
field	*(struct)
=	O
NULL	O
;	O
break	O
;	O
}	O
case	O
NO_EXTERNAL_ARG	int
:	O
{	O
recins_external	bool
=	O
false	int
;	O
break	O
;	O
}	O
case	O
NO_AUTO_ARG	int
:	O
{	O
recins_auto	bool
=	O
false	int
;	O
break	O
;	O
}	O
case	O
RECORD_ARG	int
:	O
case	O
'r'	O
:	O
{	O
provided_record	*(struct)
=	O
rec_parse_record_str	(*(char))->(*(struct))
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
!	O
provided_record	*(struct)
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"error while parsing the record provided by -r\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
recins_record	*(struct)
)	O
{	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
provided_record	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
rec_mset_append	(*(struct),int,*(void),int)->(*(struct))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
recins_record	*(struct)
)	O
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
rec_field_dup	(*(struct))->(*(struct))
(	O
field	*(struct)
)	O
,	O
MSET_ANY	int
)	O
;	O
field	*(struct)
=	O
NULL	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
rec_record_destroy	(*(struct))->(void)
(	O
provided_record	*(struct)
)	O
;	O
provided_record	*(struct)
=	O
NULL	O
;	O
}	O
else	O
{	O
recins_record	*(struct)
=	O
provided_record	*(struct)
;	O
}	O
break	O
;	O
}	O
default	O
:	O
{	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
field	*(struct)
!=	O
NULL	O
)	O
{	O
recutl_fatal	(*(char))->(void)
(	O
_	O
(	O
"please provide a value for the field %s\n"	*(char)
)	O
,	O
field_name	*(char)
)	O
;	O
}	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
if	O
(	O
(	O
argc	int
-	O
optind	int
)	O
!=	O
1	int
)	O
{	O
recutl_print_help	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
recins_file	*(char)
=	O
argv	*(*(char))
[	O
optind	int
++	O
]	O
;	O
}	O
}	O
void	O
recins_add_new_record	(*(struct))->(void)
(	O
rec_db_t	*(struct)
db	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
recutl_insensitive	bool
)	O
{	O
flags	int
=	O
flags	int
|	O
REC_F_ICASE	int
;	O
}	O
if	O
(	O
!	O
recins_auto	bool
)	O
{	O
flags	int
=	O
flags	int
|	O
REC_F_NOAUTO	int
;	O
}	O
if	O
(	O
!	O
rec_db_insert	(*(struct),*(char),*(long),*(struct),*(char),long,*(char),*(struct),int)->(bool)
(	O
db	*(struct)
,	O
recutl_type	*(char)
,	O
recutl_index	()->(*(long))
(	O
)	O
,	O
recutl_sex	*(struct)
,	O
recutl_quick_str	*(char)
,	O
recutl_random	long
,	O
recins_password	*(char)
,	O
recins_record	*(struct)
,	O
flags	int
)	O
)	O
recutl_out_of_memory	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
recins_force	bool
&&	O
db	*(struct)
)	O
{	O
recutl_check_integrity	(*(struct),bool,bool)->(void)
(	O
db	*(struct)
,	O
recins_verbose	bool
,	O
recins_external	bool
)	O
;	O
}	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
rec_db_t	*(struct)
db	*(struct)
;	O
recutl_init	(*(char))->(void)
(	O
"recins"	*(char)
)	O
;	O
recins_parse_args	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
db	*(struct)
=	O
recutl_read_db_from_file	(*(char))->(*(struct))
(	O
recins_file	*(char)
)	O
;	O
if	O
(	O
!	O
db	*(struct)
)	O
{	O
db	*(struct)
=	O
rec_db_new	()->(*(struct))
(	O
)	O
;	O
}	O
recins_add_new_record	(*(struct))->(void)
(	O
db	*(struct)
)	O
;	O
if	O
(	O
!	O
recutl_file_is_writable	(*(char))->(bool)
(	O
recins_file	*(char)
)	O
)	O
{	O
recutl_error	(*(char))->(void)
(	O
_	O
(	O
"file %s is not writable.\n"	*(char)
)	O
,	O
recins_file	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
recutl_write_db_to_file	(*(struct),*(char))->(void)
(	O
db	*(struct)
,	O
recins_file	*(char)
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
