enum	O
format_arg_type	O
{	O
FAT_NONE	O
,	O
FAT_OBJECT	O
,	O
FAT_NUMBER	O
,	O
FAT_DATE	O
}	O
;	O
struct	O
numbered_arg	O
{	O
unsigned	O
int	O
number	O
;	O
enum	O
format_arg_type	O
type	O
;	O
}	O
;	O
struct	O
spec	O
{	O
unsigned	O
int	O
directives	O
;	O
unsigned	O
int	O
numbered_arg_count	O
;	O
unsigned	O
int	O
allocated	O
;	O
struct	O
numbered_arg	O
*	O
numbered	O
;	O
}	O
;	O
static	O
bool	bool
date_format_parse	O
(	O
const	O
char	O
*	O
format	O
)	O
;	O
static	O
bool	bool
number_format_parse	O
(	O
const	O
char	O
*	O
format	O
)	O
;	O
static	O
bool	bool
choice_format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
struct	O
spec	O
*	O
spec	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
;	O
static	O
bool	bool
message_format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
char	O
*	O
fdi	O
,	O
struct	O
spec	O
*	O
spec	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
const	O
char	O
*	O
const	O
format_start	O
=	O
format	O
;	O
bool	bool
quoting	O
=	O
false	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'{'	O
)	O
{	O
unsigned	O
int	O
depth	O
;	O
const	O
char	O
*	O
element_start	O
;	O
const	O
char	O
*	O
element_end	O
;	O
size_t	long
n	long
;	O
char	O
*	O
element_alloced	O
;	O
char	O
*	O
element	O
;	O
unsigned	O
int	O
number	O
;	O
enum	O
format_arg_type	O
type	O
;	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_START	O
)	O
;	O
spec	O
->	O
directives	O
++	O
;	O
element_start	O
=	O
++	O
format	O
;	O
depth	O
=	O
0	int
;	O
for	O
(	O
;	O
*	O
format	O
!=	O
'\0'	O
;	O
format	O
++	O
)	O
{	O
if	O
(	O
*	O
format	O
==	O
'{'	O
)	O
depth	O
++	O
;	O
else	O
if	O
(	O
*	O
format	O
==	O
'}'	O
)	O
{	O
if	O
(	O
depth	O
==	O
0	int
)	O
break	O
;	O
else	O
depth	O
--	O
;	O
}	O
}	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
{	O
*	O
invalid_reason	O
=	O
xstrdup	O
(	O
_	O
(	O
"The string ends in the middle of a directive: found '{' without matching '}'."	*(char)
)	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
return	O
false	O
;	O
}	O
element_end	O
=	O
format	O
++	O
;	O
n	long
=	O
element_end	O
-	O
element_start	O
;	O
element	O
=	O
element_alloced	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
n	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
element	O
,	O
element_start	O
,	O
n	long
)	O
;	O
element	O
[	O
n	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
c_isdigit	O
(	O
*	O
element	O
)	O
)	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, '{' is not followed by an argument number."	*(char)
)	O
,	O
spec	O
->	O
directives	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
number	O
=	O
0	int
;	O
do	O
{	O
number	O
=	O
10	int
*	O
number	O
+	O
(	O
*	O
element	O
-	O
'0'	O
)	O
;	O
element	O
++	O
;	O
}	O
while	O
(	O
c_isdigit	O
(	O
*	O
element	O
)	O
)	O
;	O
type	O
=	O
FAT_OBJECT	O
;	O
if	O
(	O
*	O
element	O
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
element	O
,	O
",time"	*(char)
,	O
5	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
element	O
,	O
",date"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
type	O
=	O
FAT_DATE	O
;	O
element	O
+=	O
5	int
;	O
if	O
(	O
*	O
element	O
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
*	O
element	O
==	O
','	O
)	O
{	O
element	O
++	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"short"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"medium"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"long"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"full"	*(char)
)	O
==	O
0	int
||	O
date_format_parse	O
(	O
element	O
)	O
)	O
;	O
else	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, the substring \"%s\" is not a valid date/time style."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
element	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
}	O
else	O
{	O
*	O
element	O
=	O
'\0'	O
;	O
element	O
-=	O
4	int
;	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, \"%s\" is not followed by a comma."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
element	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
element	O
,	O
",number"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
type	O
=	O
FAT_NUMBER	O
;	O
element	O
+=	O
7	int
;	O
if	O
(	O
*	O
element	O
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
*	O
element	O
==	O
','	O
)	O
{	O
element	O
++	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"currency"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"percent"	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
element	O
,	O
"integer"	*(char)
)	O
==	O
0	int
||	O
number_format_parse	O
(	O
element	O
)	O
)	O
;	O
else	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, the substring \"%s\" is not a valid number style."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
element	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
}	O
else	O
{	O
*	O
element	O
=	O
'\0'	O
;	O
element	O
-=	O
6	int
;	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, \"%s\" is not followed by a comma."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
element	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
element	O
,	O
",choice"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
type	O
=	O
FAT_NUMBER	O
;	O
element	O
+=	O
7	int
;	O
if	O
(	O
*	O
element	O
==	O
'\0'	O
)	O
;	O
else	O
if	O
(	O
*	O
element	O
==	O
','	O
)	O
{	O
element	O
++	O
;	O
if	O
(	O
choice_format_parse	O
(	O
element	O
,	O
spec	O
,	O
invalid_reason	O
)	O
)	O
;	O
else	O
{	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
}	O
else	O
{	O
*	O
element	O
=	O
'\0'	O
;	O
element	O
-=	O
6	int
;	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, \"%s\" is not followed by a comma."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
element	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
}	O
else	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, the argument number is not followed by a comma and one of \"%s\", \"%s\", \"%s\", \"%s\"."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
"time"	*(char)
,	O
"date"	*(char)
,	O
"number"	*(char)
,	O
"choice"	*(char)
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
freea	O
(	O
element_alloced	O
)	O
;	O
return	O
false	O
;	O
}	O
freea	O
(	O
element_alloced	O
)	O
;	O
if	O
(	O
spec	O
->	O
allocated	O
==	O
spec	O
->	O
numbered_arg_count	O
)	O
{	O
spec	O
->	O
allocated	O
=	O
2	int
*	O
spec	O
->	O
allocated	O
+	O
1	int
;	O
spec	O
->	O
numbered	O
=	O
(	O
struct	O
numbered_arg	O
*	O
)	O
xrealloc	O
(	O
spec	O
->	O
numbered	O
,	O
spec	O
->	O
allocated	O
*	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
)	O
;	O
}	O
spec	O
->	O
numbered	O
[	O
spec	O
->	O
numbered_arg_count	O
]	O
.	O
number	O
=	O
number	O
;	O
spec	O
->	O
numbered	O
[	O
spec	O
->	O
numbered_arg_count	O
]	O
.	O
type	O
=	O
type	O
;	O
spec	O
->	O
numbered_arg_count	O
++	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_END	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'}'	O
)	O
{	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_START	O
)	O
;	O
*	O
invalid_reason	O
=	O
xstrdup	O
(	O
_	O
(	O
"The string starts in the middle of a directive: found '}' without matching '{'."	*(char)
)	O
)	O
;	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_ERROR	O
)	O
;	O
return	O
false	O
;	O
}	O
else	O
if	O
(	O
*	O
format	O
!=	O
'\0'	O
)	O
format	O
++	O
;	O
else	O
break	O
;	O
}	O
return	O
true	O
;	O
}	O
static	O
bool	bool
date_format_parse	O
(	O
const	O
char	O
*	O
format	O
)	O
{	O
return	O
true	O
;	O
}	O
static	O
bool	bool
number_format_parse	O
(	O
const	O
char	O
*	O
format	O
)	O
{	O
bool	bool
quoting	O
=	O
false	O
;	O
bool	bool
seen_semicolon	O
=	O
false	O
;	O
HANDLE_QUOTE	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
while	O
(	O
*	O
format	O
!=	O
'\0'	O
&&	O
!	O
(	O
!	O
quoting	O
&&	O
(	O
*	O
format	O
==	O
'0'	O
||	O
*	O
format	O
==	O
'#'	O
)	O
)	O
)	O
{	O
if	O
(	O
format	O
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
format	O
[	O
1	int
]	O
==	O
'u'	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
2	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
3	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
4	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
5	int
]	O
)	O
)	O
format	O
+=	O
6	int
;	O
else	O
format	O
+=	O
2	int
;	O
}	O
else	O
format	O
+=	O
1	int
;	O
HANDLE_QUOTE	O
;	O
}	O
if	O
(	O
!	O
(	O
!	O
quoting	O
&&	O
(	O
*	O
format	O
==	O
'0'	O
||	O
*	O
format	O
==	O
'#'	O
)	O
)	O
)	O
return	O
false	O
;	O
while	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'#'	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
','	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
}	O
while	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'0'	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
','	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
}	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'.'	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
while	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'0'	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
while	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'#'	O
)	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
}	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'E'	O
)	O
{	O
const	O
char	O
*	O
format_save	O
=	O
format	O
;	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'0'	O
)	O
{	O
do	O
{	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
while	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'0'	O
)	O
;	O
}	O
else	O
{	O
format	O
=	O
format_save	O
;	O
quoting	O
=	O
false	O
;	O
}	O
}	O
while	O
(	O
*	O
format	O
!=	O
'\0'	O
&&	O
(	O
seen_semicolon	O
||	O
!	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
';'	O
)	O
)	O
)	O
{	O
if	O
(	O
format	O
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
format	O
[	O
1	int
]	O
==	O
'u'	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
2	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
3	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
4	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
5	int
]	O
)	O
)	O
format	O
+=	O
6	int
;	O
else	O
format	O
+=	O
2	int
;	O
}	O
else	O
format	O
+=	O
1	int
;	O
HANDLE_QUOTE	O
;	O
}	O
if	O
(	O
seen_semicolon	O
||	O
!	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
';'	O
)	O
)	O
break	O
;	O
}	O
return	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
;	O
}	O
static	O
bool	bool
choice_format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
struct	O
spec	O
*	O
spec	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
bool	bool
quoting	O
=	O
false	O
;	O
HANDLE_QUOTE	O
;	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
return	O
true	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
bool	bool
number_nonempty	O
;	O
char	O
*	O
msgformat	O
;	O
char	O
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
bool	bool
msgformat_valid	O
;	O
number_nonempty	O
=	O
false	O
;	O
while	O
(	O
*	O
format	O
!=	O
'\0'	O
&&	O
!	O
(	O
!	O
quoting	O
&&	O
(	O
*	O
format	O
==	O
'<'	O
||	O
*	O
format	O
==	O
'#'	O
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
format	O
,	O
"\\u2264"	*(char)
,	O
6	int
)	O
==	O
0	int
||	O
*	O
format	O
==	O
'|'	O
)	O
)	O
)	O
{	O
if	O
(	O
format	O
[	O
0	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
format	O
[	O
1	int
]	O
==	O
'u'	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
2	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
3	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
4	int
]	O
)	O
&&	O
c_isxdigit	O
(	O
format	O
[	O
5	int
]	O
)	O
)	O
format	O
+=	O
6	int
;	O
else	O
format	O
+=	O
2	int
;	O
}	O
else	O
format	O
+=	O
1	int
;	O
number_nonempty	O
=	O
true	O
;	O
HANDLE_QUOTE	O
;	O
}	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
break	O
;	O
if	O
(	O
!	O
number_nonempty	O
)	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, a choice contains no number."	*(char)
)	O
,	O
spec	O
->	O
directives	O
)	O
;	O
return	O
false	O
;	O
}	O
if	O
(	O
*	O
format	O
==	O
'<'	O
||	O
*	O
format	O
==	O
'#'	O
)	O
format	O
+=	O
1	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
format	O
,	O
"\\u2264"	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
format	O
+=	O
6	int
;	O
else	O
{	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, a choice contains a number that is not followed by '<', '#' or '%s'."	*(char)
)	O
,	O
spec	O
->	O
directives	O
,	O
"\\u2264"	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
HANDLE_QUOTE	O
;	O
msgformat	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
strlen	(*(char))->(long)
(	O
format	O
)	O
+	O
1	int
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
msgformat	O
;	O
while	O
(	O
*	O
format	O
!=	O
'\0'	O
&&	O
!	O
(	O
!	O
quoting	O
&&	O
*	O
format	O
==	O
'|'	O
)	O
)	O
{	O
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
++	O
=	O
*	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
'\0'	O
;	O
msgformat_valid	O
=	O
message_format_parse	O
(	O
msgformat	O
,	O
NULL	O
,	O
spec	O
,	O
invalid_reason	O
)	O
;	O
freea	O
(	O
msgformat	O
)	O
;	O
if	O
(	O
!	O
msgformat_valid	O
)	O
return	O
false	O
;	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
break	O
;	O
format	O
++	O
;	O
HANDLE_QUOTE	O
;	O
}	O
return	O
true	O
;	O
}	O
static	O
int	O
numbered_arg_compare	O
(	O
const	O
void	O
*	O
p1	O
,	O
const	O
void	O
*	O
p2	O
)	O
{	O
unsigned	O
int	O
n1	O
=	O
(	O
(	O
const	O
struct	O
numbered_arg	O
*	O
)	O
p1	O
)	O
->	O
number	O
;	O
unsigned	O
int	O
n2	O
=	O
(	O
(	O
const	O
struct	O
numbered_arg	O
*	O
)	O
p2	O
)	O
->	O
number	O
;	O
return	O
(	O
n1	O
>	O
n2	O
?	O
1	int
:	O
n1	O
<	O
n2	O
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
struct	O
spec	O
spec	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
spec	O
.	O
directives	O
=	O
0	int
;	O
spec	O
.	O
numbered_arg_count	O
=	O
0	int
;	O
spec	O
.	O
allocated	O
=	O
0	int
;	O
spec	O
.	O
numbered	O
=	O
NULL	O
;	O
if	O
(	O
!	O
message_format_parse	O
(	O
format	O
,	O
fdi	O
,	O
&	O
spec	O
,	O
invalid_reason	O
)	O
)	O
goto	O
bad_format	O
;	O
if	O
(	O
spec	O
.	O
numbered_arg_count	O
>	O
1	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
bool	bool
err	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
spec	O
.	O
numbered	O
,	O
spec	O
.	O
numbered_arg_count	O
,	O
sizeof	O
(	O
struct	O
numbered_arg	O
)	O
,	O
numbered_arg_compare	O
)	O
;	O
err	O
=	O
false	O
;	O
for	O
(	O
i	long
=	O
j	O
=	O
0	int
;	O
i	long
<	O
spec	O
.	O
numbered_arg_count	O
;	O
i	long
++	O
)	O
if	O
(	O
j	O
>	O
0	int
&&	O
spec	O
.	O
numbered	O
[	O
i	long
]	O
.	O
number	O
==	O
spec	O
.	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
number	O
)	O
{	O
enum	O
format_arg_type	O
type1	O
=	O
spec	O
.	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
enum	O
format_arg_type	O
type2	O
=	O
spec	O
.	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
type	O
;	O
enum	O
format_arg_type	O
type_both	O
;	O
if	O
(	O
type1	O
==	O
type2	O
||	O
type2	O
==	O
FAT_OBJECT	O
)	O
type_both	O
=	O
type1	O
;	O
else	O
if	O
(	O
type1	O
==	O
FAT_OBJECT	O
)	O
type_both	O
=	O
type2	O
;	O
else	O
{	O
type_both	O
=	O
FAT_NONE	O
;	O
if	O
(	O
!	O
err	O
)	O
*	O
invalid_reason	O
=	O
INVALID_INCOMPATIBLE_ARG_TYPES	O
(	O
spec	O
.	O
numbered	O
[	O
i	long
]	O
.	O
number	O
)	O
;	O
err	O
=	O
true	O
;	O
}	O
spec	O
.	O
numbered	O
[	O
j	O
-	O
1	int
]	O
.	O
type	O
=	O
type_both	O
;	O
}	O
else	O
{	O
if	O
(	O
j	O
<	O
i	long
)	O
{	O
spec	O
.	O
numbered	O
[	O
j	O
]	O
.	O
number	O
=	O
spec	O
.	O
numbered	O
[	O
i	long
]	O
.	O
number	O
;	O
spec	O
.	O
numbered	O
[	O
j	O
]	O
.	O
type	O
=	O
spec	O
.	O
numbered	O
[	O
i	long
]	O
.	O
type	O
;	O
}	O
j	O
++	O
;	O
}	O
spec	O
.	O
numbered_arg_count	O
=	O
j	O
;	O
if	O
(	O
err	O
)	O
goto	O
bad_format	O
;	O
}	O
result	*(*(void))
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
*	O
result	*(*(void))
=	O
spec	O
;	O
return	O
result	*(*(void))
;	O
bad_format	O
:	O
if	O
(	O
spec	O
.	O
numbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
spec	O
.	O
numbered	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
if	O
(	O
spec	O
->	O
numbered	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
spec	O
->	O
numbered	O
)	O
;	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
directives	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
spec1	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
spec2	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgstr_descr	O
;	O
bool	bool
err	O
=	O
false	O
;	O
if	O
(	O
spec1	O
->	O
numbered_arg_count	O
+	O
spec2	O
->	O
numbered_arg_count	O
>	O
0	int
)	O
{	O
unsigned	O
int	O
i	long
,	O
j	O
;	O
unsigned	O
int	O
n1	O
=	O
spec1	O
->	O
numbered_arg_count	O
;	O
unsigned	O
int	O
n2	O
=	O
spec2	O
->	O
numbered_arg_count	O
;	O
for	O
(	O
i	long
=	O
0	int
,	O
j	O
=	O
0	int
;	O
i	long
<	O
n1	O
||	O
j	O
<	O
n2	O
;	O
)	O
{	O
int	O
cmp	O
=	O
(	O
i	long
>=	O
n1	O
?	O
1	int
:	O
j	O
>=	O
n2	O
?	O
-	O
1	int
:	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
>	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
?	O
1	int
:	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
<	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
?	O
-	O
1	int
:	O
0	int
)	O
;	O
if	O
(	O
cmp	O
>	O
0	int
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument {%u}, as in '%s', doesn't exist in '%s'"	*(char)
)	O
,	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
,	O
pretty_msgstr	O
,	O
pretty_msgid	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
cmp	O
<	O
0	int
)	O
{	O
if	O
(	O
equality	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument {%u} doesn't exist in '%s'"	*(char)
)	O
,	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
,	O
pretty_msgstr	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
else	O
j	O
++	O
,	O
i	long
++	O
;	O
}	O
if	O
(	O
!	O
err	O
)	O
for	O
(	O
i	long
=	O
0	int
,	O
j	O
=	O
0	int
;	O
j	O
<	O
n2	O
;	O
)	O
{	O
if	O
(	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
number	O
==	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
)	O
{	O
if	O
(	O
spec1	O
->	O
numbered	O
[	O
i	long
]	O
.	O
type	O
!=	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
type	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
error_logger	O
(	O
_	O
(	O
"format specifications in '%s' and '%s' for argument {%u} are not the same"	*(char)
)	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
,	O
spec2	O
->	O
numbered	O
[	O
j	O
]	O
.	O
number	O
)	O
;	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
j	O
++	O
,	O
i	long
++	O
;	O
}	O
else	O
i	long
++	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_java	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
