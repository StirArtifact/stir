static	O
void	O
masklen_to_netmask	(*(char),long,long)->(void)
(	O
unsigned	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
masklen	long
)	O
{	O
int	O
i	int
,	O
cnt	int
;	O
cnt	int
=	O
masklen	long
/	O
8	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cnt	int
;	O
i	int
++	O
)	O
buf	*(char)
[	O
i	int
]	O
=	O
0xff	int
;	O
if	O
(	O
i	int
==	O
MU_INADDR_BYTES	int
)	O
return	O
;	O
cnt	int
=	O
8	int
-	O
masklen	long
%	O
8	int
;	O
buf	*(char)
[	O
i	int
++	O
]	O
=	O
(	O
0xff	int
>>	O
cnt	int
)	O
<<	O
cnt	int
;	O
for	O
(	O
;	O
i	int
<	O
MU_INADDR_BYTES	int
;	O
i	int
++	O
)	O
buf	*(char)
[	O
i	int
]	O
=	O
0	int
;	O
}	O
int	O
mu_cidr_from_string	(*(struct(int,int,array(char),array(char))),*(char))->(int)
(	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
*	O
pcidr	*(struct(int,int,array(char),array(char)))
,	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
rc	int
;	O
char	O
ipbuf	array(char)
[	O
41	int
]	O
;	O
struct	O
mu_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
len	int
;	O
union	O
{	O
struct	O
in_addr	struct(int)
in	struct(int)
;	O
struct	O
in6_addr	struct(union(array(char),array(short),array(int)))
in6	struct(union(array(char),array(short),array(int)))
;	O
}	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
len	int
=	O
p	*(char)
-	O
str	*(char)
;	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
len	int
>	O
sizeof	O
(	O
ipbuf	array(char)
)	O
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ipbuf	array(char)
,	O
str	*(char)
,	O
len	int
)	O
;	O
ipbuf	array(char)
[	O
len	int
]	O
=	O
0	int
;	O
if	O
(	O
mu_str_is_ipv4	(*(char))->(int)
(	O
ipbuf	array(char)
)	O
)	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
=	O
AF_INET	O
;	O
else	O
if	O
(	O
mu_str_is_ipv6	(*(char))->(int)
(	O
ipbuf	array(char)
)	O
)	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
=	O
AF_INET6	O
;	O
else	O
return	O
MU_ERR_FAMILY	O
;	O
rc	int
=	O
inet_pton	(int,*(char),*(void))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
ipbuf	array(char)
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
MU_ERR_FAMILY	O
;	O
else	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
MU_ERR_NONAME	O
;	O
else	O
if	O
(	O
rc	int
!=	O
1	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	int
=	O
_mu_inaddr_to_bytes	(int,*(void),*(char))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
address	array(char)
)	O
;	O
if	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	int
==	O
0	int
)	O
return	O
MU_ERR_FAMILY	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
char	O
*	O
end	*(char)
;	O
unsigned	O
long	O
masklen	long
;	O
p	*(char)
++	O
;	O
masklen	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
,	O
&	O
end	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	*(char)
==	O
0	int
)	O
masklen_to_netmask	(*(char),long,long)->(void)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
netmask	array(char)
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	int
,	O
masklen	long
)	O
;	O
else	O
if	O
(	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
==	O
AF_INET	O
&&	O
mu_str_is_ipv4	(*(char))->(int)
(	O
p	*(char)
)	O
)	O
||	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
==	O
AF_INET6	O
&&	O
mu_str_is_ipv6	(*(char))->(int)
(	O
ipbuf	array(char)
)	O
)	O
)	O
{	O
rc	int
=	O
inet_pton	(int,*(char),*(void))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
p	*(char)
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
return	O
MU_ERR_FAMILY	O
;	O
else	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
MU_ERR_NONAME	O
;	O
else	O
if	O
(	O
rc	int
!=	O
1	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
_mu_inaddr_to_bytes	(int,*(void),*(char))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
netmask	array(char)
)	O
;	O
}	O
else	O
return	O
MU_ERR_FAMILY	O
;	O
}	O
else	O
masklen_to_netmask	(*(char),long,long)->(void)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
netmask	array(char)
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	int
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	int
*	O
8	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
pcidr	*(struct(int,int,array(char),array(char)))
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
sizeof	O
(	O
*	O
pcidr	*(struct(int,int,array(char),array(char)))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
