unsigned	O
long	O
get_num	(*(char))->(long)
(	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
unsigned	O
long	O
n	*(long)
;	O
char	O
*	O
p	*(char)
;	O
errno	O
=	O
0	int
;	O
n	*(long)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
s	*(char)
,	O
&	O
p	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
p	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"not a number: %s"	*(char)
,	O
s	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
n	*(long)
;	O
}	O
struct	O
interp_env	struct(*(struct),*(struct),long)
{	O
mu_mailbox_t	*(struct)
mbx	*(struct)
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
size_t	long
msgno	long
;	O
}	O
;	O
int	O
dm_env_date	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_envelope_t	*(struct)
msg_env	*(struct)
;	O
char	O
*	O
str	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
msg_env	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_envelope_aget_date	(*(struct),*(*(char)))->(int)
(	O
msg_env	*(struct)
,	O
&	O
str	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_env_sender	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_envelope_t	*(struct)
msg_env	*(struct)
;	O
char	O
*	O
str	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
msg_env	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_envelope_aget_sender	(*(struct),*(*(char)))->(int)
(	O
msg_env	*(struct)
,	O
&	O
str	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
str	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
str	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_header_lines	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
lines	int
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_lines	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
lines	int
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
lines	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_header_count	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
n	*(long)
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
n	*(long)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_header_size	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
s	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_size	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
s	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
s	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_header_field	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
n	*(long)
=	O
get_num	(*(char))->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
char	O
const	O
*	O
s	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
n	*(long)
,	O
&	O
s	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
s	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_header_value	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
n	*(long)
=	O
get_num	(*(char))->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
char	O
const	O
*	O
s	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_sget_field_value	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
n	*(long)
,	O
&	O
s	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
s	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_headers	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
char	O
const	O
*	O
name	*(char)
;	O
char	O
*	O
val	*(char)
;	O
size_t	long
i	long
,	O
n	*(long)
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_get_field_count	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
n	*(long)
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
n	*(long)
;	O
i	long
++	O
)	O
{	O
MU_ASSERT	O
(	O
mu_header_sget_field_name	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
name	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s:"	*(char)
,	O
name	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_header_aget_field_value_unfold	(*(struct),long,*(*(char)))->(int)
(	O
hdr	*(struct)
,	O
i	long
,	O
&	O
val	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
val	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
dm_body_lines	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
size_t	long
lines	int
;	O
MU_ASSERT	O
(	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_lines	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
lines	int
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
lines	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_body_size	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
size_t	long
s	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_size	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
s	*(char)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
s	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_body_text	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_stream_t	*(struct)
str	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
str	*(char)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
str	*(char)
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
str	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_attr	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
char	O
abuf	array(char)
[	O
MU_STATUS_BUF_SIZE	O
]	O
;	O
MU_ASSERT	O
(	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_attribute_to_string	(*(struct),*(char),long,*(long))->(int)
(	O
attr	*(struct)
,	O
abuf	array(char)
,	O
sizeof	O
(	O
abuf	array(char)
)	O
,	O
NULL	O
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
abuf	array(char)
[	O
0	int
]	O
?	O
abuf	array(char)
:	O
"-"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_uid	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
size_t	long
uid	int
;	O
MU_ASSERT	O
(	O
mu_message_get_uid	(*(struct),*(long))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
,	O
&	O
uid	int
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
uid	int
)	O
;	O
return	O
0	int
;	O
}	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
seen	O
)	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
answered	O
)	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
flagged	O
)	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
deleted	O
)	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
draft	O
)	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
recent	O
)	O
ATTR_FUN	O
(	O
set	*(struct)
,	O
read	(int,*(void),long)->(long)
)	O
ATTR_FUN	O
(	O
unset	O
,	O
seen	O
)	O
ATTR_FUN	O
(	O
unset	O
,	O
answered	O
)	O
ATTR_FUN	O
(	O
unset	O
,	O
flagged	O
)	O
ATTR_FUN	O
(	O
unset	O
,	O
deleted	O
)	O
ATTR_FUN	O
(	O
unset	O
,	O
draft	O
)	O
ATTR_FUN	O
(	O
unset	O
,	O
recent	O
)	O
ATTR_FUN	O
(	O
unset	O
,	O
read	(int,*(void),long)->(long)
)	O
int	O
dm_append	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
mu_stream_t	*(struct)
str	*(char)
;	O
mu_message_t	*(struct)
newmsg	*(*(struct))
;	O
MU_ASSERT	O
(	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
str	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
MU_STREAM_READ	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_to_message	(*(struct),*(*(struct)))->(int)
(	O
str	*(char)
,	O
&	O
newmsg	*(*(struct))
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_append_message	(*(struct),*(struct))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
newmsg	*(*(struct))
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"OK"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_expunge	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
MU_ASSERT	O
(	O
mu_mailbox_expunge	(*(struct))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"OK"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_sync	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
MU_ASSERT	O
(	O
mu_mailbox_sync	(*(struct))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"OK"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_count	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
size_t	long
n	*(long)
;	O
MU_ASSERT	O
(	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
&	O
n	*(long)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_uidvalidity	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
unsigned	O
long	O
v	array(*(char))
;	O
MU_ASSERT	O
(	O
mu_mailbox_uidvalidity	(*(struct),*(long))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
&	O
v	array(*(char))
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
v	array(*(char))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_uidnext	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
size_t	long
n	*(long)
;	O
MU_ASSERT	O
(	O
mu_mailbox_uidnext	(*(struct),*(long))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
&	O
n	*(long)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_recent	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
size_t	long
n	*(long)
;	O
MU_ASSERT	O
(	O
mu_mailbox_messages_recent	(*(struct),*(long))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
&	O
n	*(long)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_unseen	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
size_t	long
n	*(long)
;	O
MU_ASSERT	O
(	O
mu_mailbox_message_unseen	(*(struct),*(long))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
&	O
n	*(long)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
char	O
const	O
*	O
mbox_actions	array(*(char))
[	O
]	O
=	O
{	O
"expunge"	*(char)
,	O
"sync"	*(char)
,	O
"append"	*(char)
,	O
"uidvalidity"	*(char)
,	O
"uidnext"	*(char)
,	O
"count"	*(char)
,	O
"recent"	*(char)
,	O
"unseen"	*(char)
,	O
NULL	O
}	O
;	O
int	O
needs_message	(*(char))->(int)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
mbox_actions	array(*(char))
[	O
i	long
]	O
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
mbox_actions	array(*(char))
[	O
i	long
]	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
return	O
1	int
;	O
}	O
int	O
dm_envinit	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
if	O
(	O
needs_message	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
{	O
if	O
(	O
!	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"no message selected"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"%lu "	*(char)
,	O
(	O
unsigned	O
long	O
)	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msgno	long
)	O
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"%s: "	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_envfini	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
dm_nocmd	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
*	O
ienv	*(struct(*(struct),*(struct),long))
=	O
env	*(struct)
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
{	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msgno	long
=	O
get_num	(*(char))->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
ienv	*(struct(*(struct),*(struct),long))
->	O
mbx	*(struct)
,	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msgno	long
,	O
&	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msg	*(struct)
)	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu current message\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
ienv	*(struct(*(struct),*(struct),long))
->	O
msgno	long
)	O
;	O
return	O
0	int
;	O
}	O
return	O
MU_ERR_PARSE	O
;	O
}	O
struct	O
mu_tesh_command	struct(*(char),*(char),*((int,*(*(char)),*(struct),*(void))->(int)),int,int,*(struct))
commands	array(struct(*(char),*(char),*((int,*(*(char)),*(struct),*(void))->(int)),int,int,*(struct)))
[	O
]	O
=	O
{	O
{	O
"__ENVINIT__"	*(char)
,	O
""	*(char)
,	O
dm_envinit	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"__ENVFINI__"	*(char)
,	O
""	*(char)
,	O
dm_envfini	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"__NOCMD__"	*(char)
,	O
""	*(char)
,	O
dm_nocmd	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"env_date"	*(char)
,	O
""	*(char)
,	O
dm_env_date	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"env_sender"	*(char)
,	O
""	*(char)
,	O
dm_env_sender	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"header_lines"	*(char)
,	O
""	*(char)
,	O
dm_header_lines	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"header_size"	*(char)
,	O
""	*(char)
,	O
dm_header_size	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"header_count"	*(char)
,	O
""	*(char)
,	O
dm_header_count	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"header_field"	*(char)
,	O
"NUMBER"	*(char)
,	O
dm_header_field	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"header_value"	*(char)
,	O
"NAME"	*(char)
,	O
dm_header_value	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"headers"	*(char)
,	O
""	*(char)
,	O
dm_headers	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"body_lines"	*(char)
,	O
""	*(char)
,	O
dm_body_lines	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"body_size"	*(char)
,	O
""	*(char)
,	O
dm_body_size	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"body_text"	*(char)
,	O
""	*(char)
,	O
dm_body_text	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"attr"	*(char)
,	O
""	*(char)
,	O
dm_attr	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"uid"	*(char)
,	O
""	*(char)
,	O
dm_uid	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_seen"	*(char)
,	O
""	*(char)
,	O
dm_set_seen	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_answered"	*(char)
,	O
""	*(char)
,	O
dm_set_answered	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_flagged"	*(char)
,	O
""	*(char)
,	O
dm_set_flagged	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_deleted"	*(char)
,	O
""	*(char)
,	O
dm_set_deleted	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_draft"	*(char)
,	O
""	*(char)
,	O
dm_set_draft	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_recent"	*(char)
,	O
""	*(char)
,	O
dm_set_recent	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"set_read"	*(char)
,	O
""	*(char)
,	O
dm_set_read	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_seen"	*(char)
,	O
""	*(char)
,	O
dm_unset_seen	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_answered"	*(char)
,	O
""	*(char)
,	O
dm_unset_answered	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_flagged"	*(char)
,	O
""	*(char)
,	O
dm_unset_flagged	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_deleted"	*(char)
,	O
""	*(char)
,	O
dm_unset_deleted	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_draft"	*(char)
,	O
""	*(char)
,	O
dm_unset_draft	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_recent"	*(char)
,	O
""	*(char)
,	O
dm_unset_recent	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unset_read"	*(char)
,	O
""	*(char)
,	O
dm_unset_read	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"expunge"	*(char)
,	O
""	*(char)
,	O
dm_expunge	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"sync"	*(char)
,	O
""	*(char)
,	O
dm_sync	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"append"	*(char)
,	O
"FILE"	*(char)
,	O
dm_append	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"uidvalidity"	*(char)
,	O
""	*(char)
,	O
dm_uidvalidity	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"uidnext"	*(char)
,	O
""	*(char)
,	O
dm_uidnext	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"count"	*(char)
,	O
""	*(char)
,	O
dm_count	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"recent"	*(char)
,	O
""	*(char)
,	O
dm_recent	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"unseen"	*(char)
,	O
""	*(char)
,	O
dm_unseen	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
interp_env	struct(*(struct),*(struct),long)
env	*(struct)
=	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
}	O
;	O
char	O
*	O
mailbox_name	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MAIL"	*(char)
)	O
;	O
mu_tesh_init	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_dotmail_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
if	O
(	O
argc	long
&&	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"-d"	*(char)
)	O
==	O
0	int
)	O
{	O
mu_debug_enable_category	(*(char),long,int)->(void)
(	O
"mailbox"	*(char)
,	O
7	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
}	O
MU_ASSERT	O
(	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
env	*(struct)
.	O
mbx	*(struct)
,	O
mailbox_name	*(char)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
env	*(struct)
.	O
mbx	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
)	O
;	O
mu_tesh_read_and_eval	(int,*(*(char)),*(struct(*(char),*(char),*((int,*`,*`,*`)->(int)),int,int,*(struct))),*(void))->(void)
(	O
argc	long
,	O
argv	*(*(char))
,	O
commands	array(struct(*(char),*(char),*((int,*(*(char)),*(struct),*(void))->(int)),int,int,*(struct)))
,	O
&	O
env	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
