static	O
int	O
DISPLAY_X	int
=	O
45	int
,	O
DISPLAY_Y	int
=	O
14	int
;	O
static	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
static	O
WRadio	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,int,int,int,*(*(char)))
*	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
;	O
static	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
user	*(*(char))
;	O
static	O
WInput	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))),int,int,int,int,int,int,int,int,int,*(char),*(struct(*(void),*(struct(*`,*`,*`)),*(struct(*`,*`,*`)))),int,*(*(char)),int,*(char))
*	O
status	int
;	O
static	O
WCheck	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,*(char),int,int)
*	O
check_status	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
;	O
static	O
int	O
current_mode	int
;	O
static	O
char	O
*	O
*	O
displays_status	*(*(char))
;	O
static	O
const	O
char	O
*	O
displays	array(*(char))
[	O
LIST_TYPES	int
]	O
=	O
{	O
N_	O
(	O
"&Full file list"	*(char)
)	O
,	O
N_	O
(	O
"&Brief file list"	*(char)
)	O
,	O
N_	O
(	O
"&Long file list"	*(char)
)	O
,	O
N_	O
(	O
"&User defined:"	*(char)
)	O
}	O
;	O
static	O
int	O
user_hotkey	int
=	O
'u'	O
;	O
static	O
cb_ret_t	enum(int,int)
display_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
dlg_msg_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
msg	*(char)
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	*(char)
)	O
{	O
case	O
DLG_UNFOCUS	int
:	O
if	O
(	O
dlg_widget_active	(*(void))->(int)
(	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
)	O
)	O
{	O
assign_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),*(char))->(void)
(	O
status	int
,	O
displays_status	*(*(char))
[	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
]	O
)	O
;	O
input_set_point	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),int)->(void)
(	O
status	int
,	O
0	int
)	O
;	O
}	O
return	O
MSG_HANDLED	int
;	O
case	O
DLG_KEY	int
:	O
if	O
(	O
parm	int
==	O
'\n'	O
)	O
{	O
if	O
(	O
dlg_widget_active	(*(void))->(int)
(	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
)	O
)	O
{	O
assign_text	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),*(char))->(void)
(	O
status	int
,	O
displays_status	*(*(char))
[	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
]	O
)	O
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
dlg_widget_active	(*(void))->(int)
(	O
user	*(*(char))
)	O
)	O
{	O
h	*(struct)
->	O
ret_value	int
=	O
B_USER	int
+	O
6	int
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
if	O
(	O
dlg_widget_active	(*(void))->(int)
(	O
status	int
)	O
)	O
{	O
h	*(struct)
->	O
ret_value	int
=	O
B_USER	int
+	O
7	int
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
}	O
if	O
(	O
tolower	(int)->(int)
(	O
parm	int
)	O
==	O
user_hotkey	int
&&	O
dlg_widget_active	(*(void))->(int)
(	O
user	*(*(char))
)	O
&&	O
dlg_widget_active	(*(void))->(int)
(	O
status	int
)	O
)	O
{	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
=	O
3	int
;	O
dlg_select_widget	(*(void))->(void)
(	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
)	O
;	O
dlg_select_widget	(*(void))->(void)
(	O
user	*(*(char))
)	O
;	O
return	O
MSG_HANDLED	int
;	O
}	O
return	O
MSG_NOT_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
h	*(struct)
,	O
msg	*(char)
,	O
parm	int
)	O
;	O
}	O
}	O
static	O
void	O
display_init	(int,*(char),int,*(*(char)))->(void)
(	O
int	O
radio_sel	int
,	O
char	O
*	O
init_text	*(char)
,	O
int	O
_check_status	int
,	O
char	O
*	O
*	O
_status	*(*(char))
)	O
{	O
static	O
const	O
char	O
*	O
display_title	*(char)
=	O
N_	O
(	O
"Listing mode"	*(char)
)	O
;	O
static	O
int	O
i18n_displays_flag	int
;	O
const	O
char	O
*	O
user_mini_status	int
=	O
_	O
(	O
"user &Mini status"	*(char)
)	O
;	O
const	O
char	O
*	O
ok_button	*(char)
=	O
_	O
(	O
"&OK"	*(char)
)	O
;	O
const	O
char	O
*	O
cancel_button	*(char)
=	O
_	O
(	O
"&Cancel"	*(char)
)	O
;	O
static	O
int	O
button_start	int
=	O
30	int
;	O
displays_status	*(*(char))
=	O
_status	*(*(char))
;	O
if	O
(	O
!	O
i18n_displays_flag	int
)	O
{	O
int	O
i	array(int)
,	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
maxlen	int
=	O
0	int
;	O
const	O
char	O
*	O
cp	*(char)
;	O
display_title	*(char)
=	O
_	O
(	O
display_title	*(char)
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
LIST_TYPES	int
;	O
i	array(int)
++	O
)	O
{	O
displays	array(*(char))
[	O
i	array(int)
]	O
=	O
_	O
(	O
displays	array(*(char))
[	O
i	array(int)
]	O
)	O
;	O
if	O
(	O
(	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
strlen	(*(char))->(long)
(	O
displays	array(*(char))
[	O
i	array(int)
]	O
)	O
)	O
>	O
maxlen	int
)	O
maxlen	int
=	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
}	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
ok_button	*(char)
)	O
+	O
5	int
;	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
strlen	(*(char))->(long)
(	O
cancel_button	*(char)
)	O
+	O
3	int
;	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
max	long
(	O
i	array(int)
,	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
i	array(int)
=	O
maxlen	int
+	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
+	O
16	int
;	O
if	O
(	O
i	array(int)
>	O
DISPLAY_X	int
)	O
DISPLAY_X	int
=	O
i	array(int)
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
user_mini_status	int
)	O
+	O
13	int
;	O
if	O
(	O
i	array(int)
>	O
DISPLAY_X	int
)	O
DISPLAY_X	int
=	O
i	array(int)
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
display_title	*(char)
)	O
+	O
10	int
;	O
if	O
(	O
i	array(int)
>	O
DISPLAY_X	int
)	O
DISPLAY_X	int
=	O
i	array(int)
;	O
button_start	int
=	O
DISPLAY_X	int
-	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
-	O
5	int
;	O
cp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
displays	array(*(char))
[	O
USER_TYPE	int
]	O
,	O
'&'	O
)	O
;	O
if	O
(	O
cp	*(char)
!=	O
NULL	O
&&	O
*	O
++	O
cp	*(char)
!=	O
'\0'	O
)	O
user_hotkey	int
=	O
tolower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
cp	*(char)
)	O
;	O
i18n_displays_flag	int
=	O
1	int
;	O
}	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
DISPLAY_Y	int
,	O
DISPLAY_X	int
,	O
dialog_colors	array(int)
,	O
display_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
,	O
"[Listing Mode...]"	*(char)
,	O
display_title	*(char)
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
4	int
,	O
button_start	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_button	*(char)
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
3	int
,	O
button_start	int
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
ok_button	*(char)
,	O
0	int
)	O
)	O
;	O
status	int
=	O
input_new	(int,int,int,int,*(char),*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))))
(	O
10	int
,	O
9	int
,	O
INPUT_COLOR	O
,	O
DISPLAY_X	int
-	O
14	int
,	O
_status	*(*(char))
[	O
radio_sel	int
]	O
,	O
"mini-input"	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
status	int
)	O
;	O
input_set_point	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),int)->(void)
(	O
status	int
,	O
0	int
)	O
;	O
check_status	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
9	int
,	O
5	int
,	O
_check_status	int
,	O
user_mini_status	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
check_status	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
)	O
;	O
user	*(*(char))
=	O
input_new	(int,int,int,int,*(char),*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))))
(	O
7	int
,	O
9	int
,	O
INPUT_COLOR	O
,	O
DISPLAY_X	int
-	O
14	int
,	O
init_text	*(char)
,	O
"user-fmt-input"	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
user	*(*(char))
)	O
;	O
input_set_point	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,int,int,int,int,int,*(char),*(struct(*`,*`,*`)),int,*(*(char)),int,*(char))),int)->(void)
(	O
user	*(*(char))
,	O
0	int
)	O
;	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
=	O
radio_new	(int,int,int,*(*(char)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,*(*(char)))))
(	O
3	int
,	O
5	int
,	O
LIST_TYPES	int
,	O
displays	array(*(char))
)	O
;	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
=	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
pos	*(char)
=	O
current_mode	int
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
)	O
;	O
}	O
int	O
display_box	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(*(char)),*(*(char)),*(int),int)->(int)
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
*	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
char	O
*	O
*	O
userp	*(*(char))
,	O
char	O
*	O
*	O
minip	*(*(char))
,	O
int	O
*	O
use_msformat	*(int)
,	O
int	O
num	int
)	O
{	O
int	O
result	long
,	O
i	array(int)
;	O
char	O
*	O
section	*(char)
=	O
NULL	O
;	O
const	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
!	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
{	O
p	*(void)
=	O
get_nth_panel_name	(int)->(*(char))
(	O
num	int
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
=	O
g_new	O
(	O
WPanel	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),struct(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),int),int,int,array(char),array(char),*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`))))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))
,	O
1	int
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
list_type	int
=	O
list_full	int
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_format	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
DEFAULT_USER_FORMAT	*(char)
)	O
;	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_mini_status	int
=	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
LIST_TYPES	int
;	O
i	array(int)
++	O
)	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_status_format	array(*(char))
[	O
i	array(int)
]	O
=	O
g_strdup	(*(char))->(*(char))
(	O
DEFAULT_USER_FORMAT	*(char)
)	O
;	O
section	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
"Temporal:"	*(char)
,	O
p	*(void)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
!	O
profile_has_section	(*(char),*(char))->(int)
(	O
section	*(char)
,	O
profile_name	*(char)
)	O
)	O
{	O
g_free	(*(void))->(void)
(	O
section	*(char)
)	O
;	O
section	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
p	*(void)
)	O
;	O
}	O
panel_load_setup	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),struct(*(struct`),int),int,int,array(char),array(char),*(struct(*`,*`,*`)),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*`,*`)->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char))),*(char))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
,	O
section	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
section	*(char)
)	O
;	O
}	O
current_mode	int
=	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
list_type	int
;	O
display_init	(int,*(char),int,*(*(char)))->(void)
(	O
current_mode	int
,	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_format	*(char)
,	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_mini_status	int
,	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_status_format	array(*(char))
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
result	long
=	O
-	O
1	int
;	O
if	O
(	O
section	*(char)
)	O
{	O
g_free	(*(void))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_format	*(char)
)	O
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
LIST_TYPES	int
;	O
i	array(int)
++	O
)	O
g_free	(*(void))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
->	O
user_status_format	array(*(char))
[	O
i	array(int)
]	O
)	O
;	O
g_free	(*(void))->(void)
(	O
panel	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),struct(*(struct(int,*`,struct`,struct`)),int),int,int,array(char),array(char),*(struct(*(void),*(struct`),*(struct`))),*(char),int,int,int,double,int,int,int,int,int,int,int,*((*(void),*(void))->(int)),*(char),int,int,*(char),array(*(char)),*(struct),*(struct),int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),int,array(char)))
)	O
;	O
}	O
if	O
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
!=	O
B_CANCEL	int
)	O
{	O
result	long
=	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
;	O
*	O
userp	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
user	*(*(char))
->	O
buffer	*(char)
)	O
;	O
*	O
minip	*(*(char))
=	O
g_strdup	(*(char))->(*(char))
(	O
status	int
->	O
buffer	*(char)
)	O
;	O
*	O
use_msformat	*(int)
=	O
check_status	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
}	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
result	long
;	O
}	O
static	O
int	O
SORT_X	int
=	O
40	int
,	O
SORT_Y	int
=	O
14	int
;	O
static	O
const	O
char	O
*	O
sort_orders_names	array(*(char))
[	O
SORT_TYPES	int
]	O
;	O
sortfn	(*(void),*(void))->(int)
*	O
sort_box	(*((*(void),*(void))->(int)),*(int),*(int))->(*((*(void),*(void))->(int)))
(	O
sortfn	(*(void),*(void))->(int)
*	O
sort_fn	*((*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))),*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))))->(int))
,	O
int	O
*	O
reverse	int
,	O
int	O
*	O
case_sensitive	int
)	O
{	O
int	O
i	array(int)
,	O
r	*(struct)
,	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
sortfn	(*(void),*(void))->(int)
*	O
result	long
;	O
WCheck	struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*((*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int))),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))))),int,*(char),int,int)
*	O
c	int
,	O
*	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
;	O
const	O
char	O
*	O
ok_button	*(char)
=	O
_	O
(	O
"&OK"	*(char)
)	O
;	O
const	O
char	O
*	O
cancel_button	*(char)
=	O
_	O
(	O
"&Cancel"	*(char)
)	O
;	O
const	O
char	O
*	O
reverse_label	*(char)
=	O
_	O
(	O
"&Reverse"	*(char)
)	O
;	O
const	O
char	O
*	O
case_label	*(char)
=	O
_	O
(	O
"case sensi&tive"	*(char)
)	O
;	O
const	O
char	O
*	O
sort_title	*(char)
=	O
_	O
(	O
"Sort order"	*(char)
)	O
;	O
static	O
int	O
i18n_sort_flag	int
=	O
0	int
,	O
check_pos	int
=	O
0	int
,	O
button_pos	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_sort_flag	int
)	O
{	O
int	O
maxlen	int
=	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
SORT_TYPES	int
-	O
1	int
;	O
i	array(int)
>=	O
0	int
;	O
i	array(int)
--	O
)	O
{	O
sort_orders_names	array(*(char))
[	O
i	array(int)
]	O
=	O
_	O
(	O
sort_orders	array(struct(*(char),*((*(struct(int,*`,struct`,struct`)),*(struct(int,*`,struct`,struct`)))->(int))))
[	O
i	array(int)
]	O
.	O
sort_name	(*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))),*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),struct(int,int,int,int))))->(int)
)	O
;	O
r	*(struct)
=	O
strlen	(*(char))->(long)
(	O
sort_orders_names	array(*(char))
[	O
i	array(int)
]	O
)	O
;	O
if	O
(	O
r	*(struct)
>	O
maxlen	int
)	O
maxlen	int
=	O
r	*(struct)
;	O
}	O
check_pos	int
=	O
maxlen	int
+	O
9	int
;	O
r	*(struct)
=	O
strlen	(*(char))->(long)
(	O
reverse_label	*(char)
)	O
+	O
4	int
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
case_label	*(char)
)	O
+	O
4	int
;	O
if	O
(	O
i	array(int)
>	O
r	*(struct)
)	O
r	*(struct)
=	O
i	array(int)
;	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
strlen	(*(char))->(long)
(	O
ok_button	*(char)
)	O
+	O
6	int
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
cancel_button	*(char)
)	O
+	O
4	int
;	O
if	O
(	O
i	array(int)
>	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
i	array(int)
;	O
i	array(int)
=	O
check_pos	int
+	O
max	long
(	O
r	*(struct)
,	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
+	O
2	int
;	O
if	O
(	O
i	array(int)
>	O
SORT_X	int
)	O
SORT_X	int
=	O
i	array(int)
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
sort_title	*(char)
)	O
+	O
6	int
;	O
if	O
(	O
i	array(int)
>	O
SORT_X	int
)	O
SORT_X	int
=	O
i	array(int)
;	O
button_pos	int
=	O
SORT_X	int
-	O
l	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
-	O
2	int
;	O
i18n_sort_flag	int
=	O
1	int
;	O
}	O
result	long
=	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
SORT_TYPES	int
;	O
i	array(int)
++	O
)	O
if	O
(	O
(	O
sortfn	(*(void),*(void))->(int)
*	O
)	O
(	O
sort_orders	array(struct(*(char),*((*(struct(int,*`,struct`,struct`)),*(struct(int,*`,struct`,struct`)))->(int))))
[	O
i	array(int)
]	O
.	O
sort_fn	*((*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))),*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))))->(int))
)	O
==	O
sort_fn	*((*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))),*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))))->(int))
)	O
{	O
current_mode	int
=	O
i	array(int)
;	O
break	O
;	O
}	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
SORT_Y	int
,	O
SORT_X	int
,	O
dialog_colors	array(int)
,	O
NULL	O
,	O
"[Sort Order...]"	*(char)
,	O
sort_title	*(char)
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
10	int
,	O
button_pos	int
,	O
B_CANCEL	int
,	O
NORMAL_BUTTON	int
,	O
cancel_button	*(char)
,	O
0	int
)	O
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
9	int
,	O
button_pos	int
,	O
B_ENTER	int
,	O
DEFPUSH_BUTTON	int
,	O
ok_button	*(char)
,	O
0	int
)	O
)	O
;	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
4	int
,	O
check_pos	int
,	O
*	O
case_sensitive	int
,	O
case_label	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
)	O
;	O
c	int
=	O
check_new	(int,int,int,*(char))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,*(char),int,int)))
(	O
3	int
,	O
check_pos	int
,	O
*	O
reverse	int
,	O
reverse_label	*(char)
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
c	int
)	O
;	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
=	O
radio_new	(int,int,int,*(*(char)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,int,*(*(char)))))
(	O
3	int
,	O
3	int
,	O
SORT_TYPES	int
,	O
sort_orders_names	array(*(char))
)	O
;	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
=	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
pos	*(char)
=	O
current_mode	int
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
r	*(struct)
=	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
;	O
if	O
(	O
r	*(struct)
!=	O
B_CANCEL	int
)	O
{	O
result	long
=	O
(	O
sortfn	(*(void),*(void))->(int)
*	O
)	O
sort_orders	array(struct(*(char),*((*(struct(int,*`,struct`,struct`)),*(struct(int,*`,struct`,struct`)))->(int))))
[	O
my_radio	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,int,int,int,*(*(char))))
->	O
sel	int
]	O
.	O
sort_fn	*((*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))),*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))))->(int))
;	O
*	O
reverse	int
=	O
c	int
->	O
state	*(int)
&	O
C_BOOL	int
;	O
*	O
case_sensitive	int
=	O
case_sense	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),int,*(char),int,int))
->	O
state	*(int)
&	O
C_BOOL	int
;	O
}	O
else	O
result	long
=	O
sort_fn	*((*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))),*(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long)),struct(int,int,int,int))))->(int))
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dd	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
result	long
;	O
}	O
static	O
int	O
my_delete	int
;	O
static	O
int	O
my_directory_hotlist_delete	int
;	O
static	O
int	O
my_overwrite	int
;	O
static	O
int	O
my_execute	int
;	O
static	O
int	O
my_exit	int
;	O
static	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
4	int
,	O
CONFY	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
3	int
,	O
CONFY	int
,	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
7	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm di&Rectory hotlist delete "	*(char)
)	O
,	O
11	int
,	O
0	int
,	O
&	O
my_directory_hotlist_delete	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
6	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm &Exit "	*(char)
)	O
,	O
9	int
,	O
0	int
,	O
&	O
my_exit	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
5	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm e&Xecute "	*(char)
)	O
,	O
10	int
,	O
0	int
,	O
&	O
my_execute	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
4	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm o&Verwrite "	*(char)
)	O
,	O
10	int
,	O
0	int
,	O
&	O
my_overwrite	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
1	int
,	O
13	int
,	O
3	int
,	O
CONFY	int
,	O
N_	O
(	O
" confirm &Delete "	*(char)
)	O
,	O
9	int
,	O
0	int
,	O
&	O
my_delete	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
static	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
=	O
{	O
CONFX	int
,	O
CONFY	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
N_	O
(	O
" Confirmation "	*(char)
)	O
,	O
"[Confirmation]"	*(char)
,	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
,	O
0	int
}	O
;	O
void	O
confirm_box	()->(void)
(	O
void	O
)	O
{	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
register	O
int	O
i	array(int)
=	O
sizeof	O
(	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
)	O
/	O
sizeof	O
(	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
)	O
-	O
1	int
;	O
int	O
l1	int
,	O
maxlen	int
=	O
0	int
;	O
while	O
(	O
i	array(int)
--	O
)	O
{	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
=	O
_	O
(	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
;	O
l1	int
=	O
strlen	(*(char))->(long)
(	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
+	O
3	int
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
}	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
(	O
maxlen	int
+	O
5	int
)	O
*	O
6	int
/	O
4	int
;	O
l1	int
=	O
strlen	(*(char))->(long)
(	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
text	*(char)
)	O
+	O
3	int
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
conf_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
)	O
+	O
5	int
;	O
if	O
(	O
i	array(int)
>	O
l1	int
)	O
l1	int
=	O
i	array(int)
;	O
i	array(int)
=	O
(	O
l1	int
+	O
3	int
)	O
*	O
6	int
/	O
2	int
;	O
if	O
(	O
i	array(int)
>	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
)	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
i	array(int)
;	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
_	O
(	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
)	O
;	O
i18n_flag	int
=	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
1	int
;	O
}	O
my_delete	int
=	O
confirm_delete	int
;	O
my_overwrite	int
=	O
confirm_overwrite	int
;	O
my_execute	int
=	O
confirm_execute	int
;	O
my_exit	int
=	O
confirm_exit	int
;	O
my_directory_hotlist_delete	int
=	O
confirm_directory_hotlist_delete	int
;	O
if	O
(	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
confirmation	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
!=	O
B_CANCEL	int
)	O
{	O
confirm_delete	int
=	O
my_delete	int
;	O
confirm_overwrite	int
=	O
my_overwrite	int
;	O
confirm_execute	int
=	O
my_execute	int
;	O
confirm_exit	int
=	O
my_exit	int
;	O
confirm_directory_hotlist_delete	int
=	O
my_directory_hotlist_delete	int
;	O
}	O
}	O
static	O
int	O
new_mode	int
;	O
static	O
int	O
new_meta	int
;	O
static	O
const	O
char	O
*	O
display_bits_str	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"Full 8 bits output"	*(char)
)	O
,	O
N_	O
(	O
"ISO 8859-1"	*(char)
)	O
,	O
N_	O
(	O
"7 bits"	*(char)
)	O
}	O
;	O
static	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
4	int
,	O
DISPY	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
4	int
,	O
6	int
,	O
3	int
,	O
DISPY	int
,	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
DISPX	int
,	O
7	int
,	O
DISPY	int
,	O
N_	O
(	O
"F&ull 8 bits input"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
&	O
new_meta	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_radio	int
,	O
4	int
,	O
DISPX	int
,	O
3	int
,	O
DISPY	int
,	O
""	*(char)
,	O
3	int
,	O
0	int
,	O
&	O
new_mode	int
,	O
const_cast	O
(	O
char	O
*	O
*	O
,	O
display_bits_str	array(*(char))
)	O
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
static	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
=	O
{	O
DISPX	int
,	O
DISPY	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
N_	O
(	O
" Display bits "	*(char)
)	O
,	O
"[Display bits]"	*(char)
,	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
,	O
0	int
}	O
;	O
void	O
display_bits_box	()->(void)
(	O
void	O
)	O
{	O
int	O
current_mode	int
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
register	O
int	O
i	array(int)
;	O
int	O
l1	int
,	O
maxlen	int
=	O
0	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
3	int
;	O
i	array(int)
++	O
)	O
{	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
=	O
_	O
(	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
i	array(int)
]	O
.	O
text	*(char)
)	O
;	O
display_bits_str	array(*(char))
[	O
i	array(int)
]	O
=	O
_	O
(	O
display_bits_str	array(*(char))
[	O
i	array(int)
]	O
)	O
;	O
l1	int
=	O
strlen	(*(char))->(long)
(	O
display_bits_str	array(*(char))
[	O
i	array(int)
]	O
)	O
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
}	O
l1	int
=	O
strlen	(*(char))->(long)
(	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
2	int
]	O
.	O
text	*(char)
)	O
;	O
if	O
(	O
l1	int
>	O
maxlen	int
)	O
maxlen	int
=	O
l1	int
;	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
(	O
maxlen	int
+	O
5	int
)	O
*	O
6	int
/	O
4	int
;	O
l1	int
=	O
strlen	(*(char))->(long)
(	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
text	*(char)
)	O
+	O
3	int
;	O
i	array(int)
=	O
strlen	(*(char))->(long)
(	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
)	O
+	O
5	int
;	O
if	O
(	O
i	array(int)
>	O
l1	int
)	O
l1	int
=	O
i	array(int)
;	O
i	array(int)
=	O
(	O
l1	int
+	O
3	int
)	O
*	O
6	int
/	O
2	int
;	O
if	O
(	O
i	array(int)
>	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
)	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
i	array(int)
;	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
_	O
(	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
)	O
;	O
i18n_flag	int
=	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
1	int
;	O
}	O
if	O
(	O
full_eight_bits	int
)	O
current_mode	int
=	O
0	int
;	O
else	O
if	O
(	O
eight_bit_clean	int
)	O
current_mode	int
=	O
1	int
;	O
else	O
current_mode	int
=	O
2	int
;	O
display_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
]	O
.	O
value	*(void)
=	O
current_mode	int
;	O
new_meta	int
=	O
!	O
use_8th_bit_as_meta	int
;	O
if	O
(	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
display_bits	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
!=	O
B_ENTER	int
)	O
return	O
;	O
eight_bit_clean	int
=	O
new_mode	int
<	O
2	int
;	O
full_eight_bits	int
=	O
new_mode	int
==	O
0	int
;	O
SLsmg_Display_Eight_Bit	int
=	O
full_eight_bits	int
?	O
128	int
:	O
160	int
;	O
use_8th_bit_as_meta	int
=	O
!	O
new_meta	int
;	O
}	O
static	O
cb_ret_t	enum(int,int)
tree_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
struct	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
h	*(struct)
,	O
dlg_msg_t	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
msg	*(char)
,	O
int	O
parm	int
)	O
{	O
switch	O
(	O
msg	*(char)
)	O
{	O
case	O
DLG_POST_KEY	int
:	O
if	O
(	O
parm	int
==	O
'\n'	O
)	O
{	O
h	*(struct)
->	O
ret_value	int
=	O
B_ENTER	int
;	O
dlg_stop	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
h	*(struct)
)	O
;	O
}	O
return	O
MSG_HANDLED	int
;	O
default	O
:	O
return	O
default_dlg_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
(	O
h	*(struct)
,	O
msg	*(char)
,	O
parm	int
)	O
;	O
}	O
}	O
char	O
*	O
tree_box	(*(char))->(*(char))
(	O
const	O
char	O
*	O
current_dir	*(char)
)	O
{	O
WTree	struct
*	O
mytree	*(struct)
;	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
char	O
*	O
val	array(int)
;	O
WButtonBar	struct
*	O
bar	*(struct)
;	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
TREE_Y	int
,	O
TREE_X	int
,	O
dialog_colors	array(int)
,	O
tree_callback	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))
,	O
"[Directory Tree]"	*(char)
,	O
NULL	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
mytree	*(struct)
=	O
tree_new	(int,int,int,int,int)->(*(struct))
(	O
0	int
,	O
2	int
,	O
2	int
,	O
TREE_Y	int
-	O
6	int
,	O
TREE_X	int
-	O
5	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
mytree	*(struct)
)	O
;	O
bar	*(struct)
=	O
buttonbar_new	(int)->(*(struct))
(	O
1	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
bar	*(struct)
)	O
;	O
(	O
(	O
Widget	struct
*	O
)	O
bar	*(struct)
)	O
->	O
x	array(long)
=	O
0	int
;	O
(	O
(	O
Widget	struct
*	O
)	O
bar	*(struct)
)	O
->	O
y	short
=	O
LINES	O
-	O
1	int
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
if	O
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
->	O
ret_value	int
==	O
B_ENTER	int
)	O
val	array(int)
=	O
g_strdup	(*(char))->(*(char))
(	O
tree_selected_name	(*(struct))->(*(char))
(	O
mytree	*(struct)
)	O
)	O
;	O
else	O
val	array(int)
=	O
0	int
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
val	array(int)
;	O
}	O
static	O
char	O
*	O
ret_timeout	*(char)
;	O
static	O
char	O
*	O
ret_passwd	*(char)
;	O
static	O
char	O
*	O
ret_directory_timeout	*(char)
;	O
static	O
char	O
*	O
ret_ftp_proxy	*(char)
;	O
static	O
int	O
ret_use_netrc	int
;	O
static	O
int	O
ret_ftpfs_use_passive_connections	int
;	O
static	O
int	O
ret_ftpfs_use_passive_connections_over_proxy	int
;	O
static	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
confvfs_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
30	int
,	O
VFSX	int
,	O
VFSY	int
-	O
3	int
,	O
VFSY	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
12	int
,	O
VFSX	int
,	O
VFSY	int
-	O
3	int
,	O
VFSY	int
,	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
12	int
,	O
VFSY	int
,	O
N_	O
(	O
"Use passive mode over pro&xy"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ret_ftpfs_use_passive_connections_over_proxy	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
11	int
,	O
VFSY	int
,	O
N_	O
(	O
"Use &passive mode"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ret_ftpfs_use_passive_connections	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
10	int
,	O
VFSY	int
,	O
N_	O
(	O
"&Use ~/.netrc"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ret_use_netrc	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
VFSX	int
,	O
9	int
,	O
VFSY	int
,	O
""	*(char)
,	O
48	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_ftp_proxy	*(char)
,	O
"input-ftp-proxy"	*(char)
}	O
,	O
{	O
quick_checkbox	int
,	O
4	int
,	O
VFSX	int
,	O
8	int
,	O
VFSY	int
,	O
N_	O
(	O
"&Always use ftp proxy"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
&	O
ftpfs_always_use_proxy	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
49	int
,	O
VFSX	int
,	O
7	int
,	O
VFSY	int
,	O
N_	O
(	O
"sec"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
38	int
,	O
VFSX	int
,	O
7	int
,	O
VFSY	int
,	O
""	*(char)
,	O
10	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_directory_timeout	*(char)
,	O
"input-timeout"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
VFSX	int
,	O
7	int
,	O
VFSY	int
,	O
N_	O
(	O
"ftpfs directory cache timeout:"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
VFSX	int
,	O
6	int
,	O
VFSY	int
,	O
""	*(char)
,	O
48	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_passwd	*(char)
,	O
"input-passwd"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
VFSX	int
,	O
5	int
,	O
VFSY	int
,	O
N_	O
(	O
"ftp anonymous password:"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_label	int
,	O
49	int
,	O
VFSX	int
,	O
3	int
,	O
VFSY	int
,	O
"sec"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
38	int
,	O
VFSX	int
,	O
3	int
,	O
VFSY	int
,	O
""	*(char)
,	O
10	int
,	O
0	int
,	O
0	int
,	O
&	O
ret_timeout	*(char)
,	O
"input-timo-vfs"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
VFSX	int
,	O
3	int
,	O
VFSY	int
,	O
N_	O
(	O
"Timeout for freeing VFSs:"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
static	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
confvfs_dlg	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
=	O
{	O
VFSX	int
,	O
VFSY	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
N_	O
(	O
" Virtual File System Setting "	*(char)
)	O
,	O
"[Virtual FS]"	*(char)
,	O
confvfs_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
,	O
0	int
}	O
;	O
void	O
configure_vfs	()->(void)
(	O
void	O
)	O
{	O
char	O
buffer2	array(char)
[	O
BUF_TINY	int
]	O
;	O
char	O
buffer3	array(char)
[	O
BUF_TINY	int
]	O
;	O
ret_use_netrc	int
=	O
use_netrc	int
;	O
ret_ftpfs_use_passive_connections	int
=	O
ftpfs_use_passive_connections	int
;	O
ret_ftpfs_use_passive_connections_over_proxy	int
=	O
ftpfs_use_passive_connections_over_proxy	int
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer3	array(char)
,	O
sizeof	O
(	O
buffer3	array(char)
)	O
,	O
"%i"	*(char)
,	O
ftpfs_directory_timeout	int
)	O
;	O
confvfs_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
8	int
]	O
.	O
text	*(char)
=	O
buffer3	array(char)
;	O
confvfs_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
10	int
]	O
.	O
text	*(char)
=	O
ftpfs_anonymous_passwd	*(char)
;	O
confvfs_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
5	int
]	O
.	O
text	*(char)
=	O
ftpfs_proxy_host	*(char)
;	O
g_snprintf	(*(char),long,*(char))->(int)
(	O
buffer2	array(char)
,	O
sizeof	O
(	O
buffer2	array(char)
)	O
,	O
"%i"	*(char)
,	O
vfs_timeout	int
)	O
;	O
confvfs_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
3	int
+	O
VFS_WIDGETBASE	int
]	O
.	O
text	*(char)
=	O
buffer2	array(char)
;	O
if	O
(	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
confvfs_dlg	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
!=	O
B_CANCEL	int
)	O
{	O
vfs_timeout	int
=	O
atoi	(*(char))->(int)
(	O
ret_timeout	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
ret_timeout	*(char)
)	O
;	O
if	O
(	O
vfs_timeout	int
<	O
0	int
||	O
vfs_timeout	int
>	O
10000	int
)	O
vfs_timeout	int
=	O
10	int
;	O
g_free	(*(void))->(void)
(	O
ftpfs_anonymous_passwd	*(char)
)	O
;	O
ftpfs_anonymous_passwd	*(char)
=	O
ret_passwd	*(char)
;	O
g_free	(*(void))->(void)
(	O
ftpfs_proxy_host	*(char)
)	O
;	O
ftpfs_proxy_host	*(char)
=	O
ret_ftp_proxy	*(char)
;	O
ftpfs_directory_timeout	int
=	O
atoi	(*(char))->(int)
(	O
ret_directory_timeout	*(char)
)	O
;	O
use_netrc	int
=	O
ret_use_netrc	int
;	O
ftpfs_use_passive_connections	int
=	O
ret_ftpfs_use_passive_connections	int
;	O
ftpfs_use_passive_connections_over_proxy	int
=	O
ret_ftpfs_use_passive_connections_over_proxy	int
;	O
g_free	(*(void))->(void)
(	O
ret_directory_timeout	*(char)
)	O
;	O
}	O
}	O
char	O
*	O
cd_dialog	()->(*(char))
(	O
void	O
)	O
{	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
;	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_input	int
,	O
6	int
,	O
57	int
,	O
2	int
,	O
0	int
,	O
""	*(char)
,	O
50	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
3	int
,	O
57	int
,	O
2	int
,	O
0	int
,	O
""	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
char	O
*	O
my_str	*(char)
;	O
int	O
len	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
57	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
_	O
(	O
"Quick cd"	*(char)
)	O
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
help	*(char)
=	O
"[Quick cd]"	*(char)
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
value	*(void)
=	O
2	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
=	O
_	O
(	O
"cd"	*(char)
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
y_divisions	int
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
y_divisions	int
=	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ylen	int
=	O
5	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
text	*(char)
)	O
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
relative_x	int
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
relative_x	int
+	O
len	int
+	O
1	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
len	int
+	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
hotkey_pos	int
+	O
7	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
x_divisions	int
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
1	int
]	O
.	O
x_divisions	int
=	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
1	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xpos	int
=	O
2	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ypos	int
=	O
LINES	O
-	O
2	int
-	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ylen	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
0	int
]	O
.	O
str_result	*(*(char))
=	O
&	O
my_str	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
if	O
(	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
!=	O
B_CANCEL	int
)	O
{	O
return	O
my_str	*(char)
;	O
}	O
else	O
return	O
0	int
;	O
}	O
void	O
symlink_dialog	(*(char),*(char),*(*(char)),*(*(char)))->(void)
(	O
const	O
char	O
*	O
existing	*(char)
,	O
const	O
char	O
*	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
char	O
*	O
*	O
ret_existing	*(*(char))
,	O
char	O
*	O
*	O
ret_new	*(*(char))
)	O
{	O
QuickDialog	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
;	O
QuickWidget	struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
]	O
=	O
{	O
{	O
quick_button	int
,	O
50	int
,	O
80	int
,	O
6	int
,	O
8	int
,	O
N_	O
(	O
"&Cancel"	*(char)
)	O
,	O
0	int
,	O
B_CANCEL	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_button	int
,	O
16	int
,	O
80	int
,	O
6	int
,	O
8	int
,	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
0	int
,	O
B_ENTER	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
5	int
,	O
8	int
,	O
""	*(char)
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-1"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
80	int
,	O
4	int
,	O
8	int
,	O
N_	O
(	O
"Symbolic link filename:"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
{	O
quick_input	int
,	O
4	int
,	O
80	int
,	O
3	int
,	O
8	int
,	O
""	*(char)
,	O
58	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
"input-2"	*(char)
}	O
,	O
{	O
quick_label	int
,	O
4	int
,	O
80	int
,	O
2	int
,	O
8	int
,	O
N_	O
(	O
"Existing filename (filename symlink will point to):"	*(char)
)	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
,	O
NULL_QuickWidget	O
}	O
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xlen	int
=	O
64	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
ylen	int
=	O
12	int
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
title	*(char)
=	O
N_	O
(	O
"Symbolic link"	*(char)
)	O
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
help	*(char)
=	O
"[File Menu]"	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
i18n	int
=	O
0	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
2	int
]	O
.	O
text	*(char)
=	O
new	*(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*(struct`),*(void))->(int)),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
4	int
]	O
.	O
text	*(char)
=	O
existing	*(char)
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
xpos	int
=	O
-	O
1	int
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
2	int
]	O
.	O
str_result	*(*(char))
=	O
ret_new	*(*(char))
;	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
[	O
4	int
]	O
.	O
str_result	*(*(char))
=	O
ret_existing	*(*(char))
;	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
.	O
widgets	*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
=	O
quick_widgets	array(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char)))
;	O
if	O
(	O
quick_dialog	(*(struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*`,int,int,*`,*`,*`)),int)))->(int)
(	O
&	O
Quick_input	struct(int,int,int,int,*(char),*(char),*(struct(int,int,int,int,int,*(char),int,int,*(int),*(*(char)),*(char))),int)
)	O
==	O
B_CANCEL	int
)	O
{	O
*	O
ret_new	*(*(char))
=	O
NULL	O
;	O
*	O
ret_existing	*(*(char))
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
JOBS_X	int
=	O
60	int
;	O
static	O
WListbox	struct
*	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
;	O
static	O
Dlg_head	struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`))))))
*	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
;	O
static	O
void	O
jobs_fill_listbox	()->(void)
(	O
void	O
)	O
{	O
static	O
const	O
char	O
*	O
state_str	array(*(char))
[	O
2	int
]	O
;	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
=	O
task_list	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
;	O
if	O
(	O
!	O
state_str	array(*(char))
[	O
0	int
]	O
)	O
{	O
state_str	array(*(char))
[	O
0	int
]	O
=	O
_	O
(	O
"Running "	*(char)
)	O
;	O
state_str	array(*(char))
[	O
1	int
]	O
=	O
_	O
(	O
"Stopped"	*(char)
)	O
;	O
}	O
while	O
(	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
)	O
{	O
char	O
*	O
s	*(char)
;	O
s	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
state_str	array(*(char))
[	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
state	*(int)
]	O
,	O
" "	*(char)
,	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
info	*(void)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
listbox_add_item	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)),enum(int,int,int),int,*(char),*(void))->(*(char))
(	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
,	O
LISTBOX_APPEND_AT_END	int
,	O
0	int
,	O
s	*(char)
,	O
(	O
void	O
*	O
)	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
)	O
;	O
g_free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
=	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
}	O
}	O
static	O
int	O
task_cb	(int)->(int)
(	O
int	O
action	int
)	O
{	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
;	O
int	O
sig	int
=	O
0	int
;	O
if	O
(	O
!	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
list	*(struct(*(void),*(struct(*(void),*(struct`),*(struct`))),*(struct(*(void),*(struct`),*(struct`)))))
)	O
return	O
0	int
;	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
=	O
(	O
TaskList	struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`))))))
*	O
)	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
->	O
current	*(struct)
->	O
data	*(void)
;	O
if	O
(	O
action	int
==	O
B_STOP	O
)	O
{	O
sig	int
=	O
SIGSTOP	int
;	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
state	*(int)
=	O
Task_Stopped	int
;	O
}	O
else	O
if	O
(	O
action	int
==	O
B_RESUME	O
)	O
{	O
sig	int
=	O
SIGCONT	int
;	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
state	*(int)
=	O
Task_Running	int
;	O
}	O
else	O
if	O
(	O
action	int
==	O
B_KILL	O
)	O
{	O
sig	int
=	O
SIGKILL	int
;	O
}	O
if	O
(	O
sig	int
==	O
SIGINT	int
)	O
unregister_task_running	(int,int)->(void)
(	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
pid	int
,	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
fd	int
)	O
;	O
kill	(int,int)->(int)
(	O
tl	*(struct(int,int,int,*(char),*(struct(int,int,int,*(char),*(struct`)))))
->	O
pid	int
,	O
sig	int
)	O
;	O
listbox_remove_list	(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))->(void)
(	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
jobs_fill_listbox	()->(void)
(	O
)	O
;	O
dlg_redraw	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
int	O
xpos	int
;	O
int	O
value	*(void)
;	O
int	O
(	O
*	O
callback	*((*(void))->(int))
)	O
(	O
int	O
)	O
;	O
}	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
]	O
=	O
{	O
{	O
N_	O
(	O
"&Stop"	*(char)
)	O
,	O
3	int
,	O
B_STOP	O
,	O
task_cb	(int)->(int)
}	O
,	O
{	O
N_	O
(	O
"&Resume"	*(char)
)	O
,	O
12	int
,	O
B_RESUME	O
,	O
task_cb	(int)->(int)
}	O
,	O
{	O
N_	O
(	O
"&Kill"	*(char)
)	O
,	O
23	int
,	O
B_KILL	O
,	O
task_cb	(int)->(int)
}	O
,	O
{	O
N_	O
(	O
"&OK"	*(char)
)	O
,	O
35	int
,	O
B_CANCEL	int
,	O
NULL	O
}	O
}	O
;	O
void	O
jobs_cmd	()->(void)
(	O
void	O
)	O
{	O
register	O
int	O
i	array(int)
;	O
int	O
n_buttons	int
=	O
sizeof	O
(	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
)	O
/	O
sizeof	O
(	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
0	int
]	O
)	O
;	O
static	O
int	O
i18n_flag	int
=	O
0	int
;	O
if	O
(	O
!	O
i18n_flag	int
)	O
{	O
int	O
startx	int
=	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
0	int
]	O
.	O
xpos	int
;	O
int	O
len	int
;	O
for	O
(	O
i	array(int)
=	O
0	int
;	O
i	array(int)
<	O
n_buttons	int
;	O
i	array(int)
++	O
)	O
{	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
name	*(char)
=	O
_	O
(	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
name	*(char)
)	O
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
name	*(char)
)	O
+	O
4	int
;	O
JOBS_X	int
=	O
max	long
(	O
JOBS_X	int
,	O
startx	int
+	O
len	int
+	O
3	int
)	O
;	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
xpos	int
=	O
startx	int
;	O
startx	int
+=	O
len	int
;	O
}	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
n_buttons	int
-	O
1	int
]	O
.	O
xpos	int
=	O
JOBS_X	int
-	O
strlen	(*(char))->(long)
(	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
n_buttons	int
-	O
1	int
]	O
.	O
name	*(char)
)	O
-	O
7	int
;	O
i18n_flag	int
=	O
1	int
;	O
}	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
=	O
create_dlg	(int,int,int,int,*(int),*((*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(char),*(char),int)->(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))
(	O
0	int
,	O
0	int
,	O
JOBS_Y	int
,	O
JOBS_X	int
,	O
dialog_colors	array(int)
,	O
NULL	O
,	O
"[Background jobs]"	*(char)
,	O
_	O
(	O
"Background Jobs"	*(char)
)	O
,	O
DLG_CENTER	O
|	O
DLG_REVERSE	O
)	O
;	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
=	O
listbox_new	(int,int,int,int,*((*(struct(struct`,*`,*`,*`,int,int,int,int,int,int,*`,int,int)))->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),*(struct(*`,int,*`,*`,*`)),int,int,int,int,int,int,*((*`)->(int)),int,int)))
(	O
2	int
,	O
3	int
,	O
JOBS_X	int
-	O
7	int
,	O
JOBS_Y	int
-	O
9	int
,	O
0	int
)	O
;	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
bg_list	*(struct(struct(int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),*(struct(*(char),int,*(void),*(struct`),*(struct`))),int,int,int,int,int,int,*((*(struct`))->(int)),int,int))
)	O
;	O
i	array(int)
=	O
n_buttons	int
;	O
while	O
(	O
i	array(int)
--	O
)	O
{	O
add_widget	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))),*(void))->(int)
(	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
,	O
button_new	(int,int,int,int,*(char),*((int)->(int)))->(*(struct(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`)),int,int,int,*(char),int,int,*((int)->(int)))))
(	O
JOBS_Y	int
-	O
4	int
,	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
xpos	int
,	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
value	*(void)
,	O
NORMAL_BUTTON	int
,	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
name	*(char)
,	O
job_buttons	array(struct(*(char),int,int,*((int)->(int))))
[	O
i	array(int)
]	O
.	O
callback	*((*(void))->(int))
)	O
)	O
;	O
}	O
jobs_fill_listbox	()->(void)
(	O
)	O
;	O
run_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(int)
(	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
destroy_dlg	(*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*`,*`,*`,*`,*`)),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*`,*`,*`,int,int,int,int,int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
jobs_dlg	*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct(int,int,int,int,int,int,*(struct`),*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*((*`,*`)->(int)),*(struct`))),*((*(struct`),enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct(int,*(char),*(int),*(char),int,int,int,int,int,int,int,int,int,*(struct`),*((*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int),int)->(enum(int,int))),*(struct`)))))
)	O
;	O
}	O
