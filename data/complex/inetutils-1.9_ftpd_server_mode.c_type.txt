static	O
void	O
reapchild	(int)->(void)
(	O
int	O
)	O
;	O
static	O
void	O
reapchild	(int)->(void)
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
int	O
save_errno	int
=	O
errno	O
;	O
while	O
(	O
waitpid	(int,*(int),int)->(int)
(	O
-	O
1	int
,	O
NULL	O
,	O
WNOHANG	int
)	O
>	O
0	int
)	O
;	O
errno	O
=	O
save_errno	int
;	O
}	O
int	O
server_mode	(*(char),*(struct(short,short,struct(int),array(char))),array(*(char)))->(int)
(	O
const	O
char	O
*	O
pidfile	*(char)
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
phis_addr	*(struct(short,short,struct(int),array(char)))
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
ctl_sock	int
,	O
fd	int
;	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
sv	*(struct(*(char),*(*(char)),int,*(char)))
;	O
int	O
port	int
;	O
static	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
server_addr	struct(short,short,struct(int),array(char))
;	O
if	O
(	O
daemon	(int,int)->(int)
(	O
1	int
,	O
1	int
)	O
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"failed to become a daemon"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
reapchild	(int)->(void)
)	O
;	O
sv	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
"ftp"	*(char)
,	O
"tcp"	*(char)
)	O
;	O
port	int
=	O
(	O
sv	*(struct(*(char),*(*(char)),int,*(char)))
==	O
NULL	O
)	O
?	O
DEFPORT	int
:	O
ntohs	(short)->(short)
(	O
sv	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
)	O
;	O
ctl_sock	int
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
;	O
if	O
(	O
ctl_sock	int
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"control socket: %m"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
ctl_sock	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"control setsockopt: %m"	*(char)
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
server_addr	struct(short,short,struct(int),array(char))
,	O
0	int
,	O
sizeof	O
server_addr	struct(short,short,struct(int),array(char))
)	O
;	O
server_addr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
server_addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	int
)	O
;	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
ctl_sock	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
server_addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
server_addr	struct(short,short,struct(int),array(char))
)	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"control bind: %m"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
listen	(int,int)->(int)
(	O
ctl_sock	int
,	O
32	int
)	O
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"control listen: %m"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
{	O
FILE	struct
*	O
pid_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
pidfile	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
pid_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"can't open %s: %m"	*(char)
,	O
PATH_FTPDPID	O
)	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
pid_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d\n"	*(char)
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
fchmod	(int,int)->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pid_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
S_IRUSR	O
|	O
S_IWUSR	O
|	O
S_IRGRP	O
|	O
S_IROTH	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pid_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
while	O
(	O
1	int
)	O
{	O
socklen_t	int
addrlen	int
=	O
sizeof	O
(	O
*	O
phis_addr	*(struct(short,short,struct(int),array(char)))
)	O
;	O
fd	int
=	O
accept	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
ctl_sock	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
phis_addr	*(struct(short,short,struct(int),array(char)))
,	O
&	O
addrlen	int
)	O
;	O
if	O
(	O
fork	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
0	int
)	O
;	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
1	int
)	O
;	O
close	*((*(void))->(int))
(	O
ctl_sock	int
)	O
;	O
break	O
;	O
}	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
}	O
return	O
fd	int
;	O
}	O
