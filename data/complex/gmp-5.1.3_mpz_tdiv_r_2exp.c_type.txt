void	O
mpz_tdiv_r_2exp	O
(	O
mpz_ptr	*(struct(int,int,*(long)))
res	*(struct(int,int,*(long)))
,	O
mpz_srcptr	*(struct(int,int,*(long)))
in	*(struct(int,int,*(long)))
,	O
mp_bitcnt_t	long
cnt	long
)	O
{	O
mp_size_t	long
in_size	long
=	O
ABSIZ	O
(	O
in	*(struct(int,int,*(long)))
)	O
;	O
mp_size_t	long
res_size	long
;	O
mp_size_t	long
limb_cnt	long
=	O
cnt	long
/	O
GMP_NUMB_BITS	O
;	O
mp_srcptr	*(long)
in_ptr	*(long)
=	O
PTR	O
(	O
in	*(struct(int,int,*(long)))
)	O
;	O
if	O
(	O
in_size	long
>	O
limb_cnt	long
)	O
{	O
mp_limb_t	long
x	long
;	O
x	long
=	O
in_ptr	*(long)
[	O
limb_cnt	long
]	O
&	O
(	O
(	O
(	O
mp_limb_t	long
)	O
1	int
<<	O
cnt	long
%	O
GMP_NUMB_BITS	O
)	O
-	O
1	int
)	O
;	O
if	O
(	O
x	long
!=	O
0	int
)	O
{	O
res_size	long
=	O
limb_cnt	long
+	O
1	int
;	O
MPZ_REALLOC	O
(	O
res	*(struct(int,int,*(long)))
,	O
res_size	long
)	O
;	O
PTR	O
(	O
res	*(struct(int,int,*(long)))
)	O
[	O
limb_cnt	long
]	O
=	O
x	long
;	O
}	O
else	O
{	O
res_size	long
=	O
limb_cnt	long
;	O
MPN_NORMALIZE	O
(	O
in_ptr	*(long)
,	O
res_size	long
)	O
;	O
MPZ_REALLOC	O
(	O
res	*(struct(int,int,*(long)))
,	O
res_size	long
)	O
;	O
limb_cnt	long
=	O
res_size	long
;	O
}	O
}	O
else	O
{	O
res_size	long
=	O
in_size	long
;	O
MPZ_REALLOC	O
(	O
res	*(struct(int,int,*(long)))
,	O
res_size	long
)	O
;	O
limb_cnt	long
=	O
res_size	long
;	O
}	O
if	O
(	O
res	*(struct(int,int,*(long)))
!=	O
in	*(struct(int,int,*(long)))
)	O
MPN_COPY	O
(	O
PTR	O
(	O
res	*(struct(int,int,*(long)))
)	O
,	O
PTR	O
(	O
in	*(struct(int,int,*(long)))
)	O
,	O
limb_cnt	long
)	O
;	O
SIZ	O
(	O
res	*(struct(int,int,*(long)))
)	O
=	O
SIZ	O
(	O
in	*(struct(int,int,*(long)))
)	O
>=	O
0	int
?	O
res_size	long
:	O
-	O
res_size	long
;	O
}	O
