char	O
const	O
ks_revno	array(char)
[	O
]	O
=	O
"revision number"	*(char)
;	O
char	O
const	O
prog_diff	array(char)
[	O
]	O
=	O
DIFF	*(char)
;	O
char	O
const	O
prog_diff3	array(char)
[	O
]	O
=	O
DIFF3	*(char)
;	O
char	O
const	O
diff_flags	array(char)
[	O
]	O
=	O
DIFFFLAGS	*(char)
;	O
char	O
const	O
equal_line	array(char)
[	O
]	O
=	O
"=============================================================================\n"	*(char)
;	O
TINY_DECL	O
(	O
ciklog	O
)	O
=	O
TINY_INIT	O
(	O
"checked in with -k by "	*(char)
)	O
;	O
TINYK	O
(	O
access	*(struct)
)	O
;	O
TINYK	O
(	O
author	*(char)
)	O
;	O
TINYK	O
(	O
branch	*(char)
)	O
;	O
TINYK	O
(	O
branches	*(struct)
)	O
;	O
TINYK	O
(	O
comment	*(struct)
)	O
;	O
TINYK	O
(	O
commitid	*(char)
)	O
;	O
TINYK	O
(	O
date	*(char)
)	O
;	O
TINYK	O
(	O
desc	*(struct)
)	O
;	O
TINYK	O
(	O
expand	int
)	O
;	O
TINYK	O
(	O
head	*(char)
)	O
;	O
TINYK	O
(	O
integrity	*(struct)
)	O
;	O
TINYK	O
(	O
locks	*(struct)
)	O
;	O
TINYK	O
(	O
log	*(struct)
)	O
;	O
TINYK	O
(	O
next	O
)	O
;	O
TINYK	O
(	O
state	*(char)
)	O
;	O
TINYK	O
(	O
strict	bool
)	O
;	O
TINYK	O
(	O
symbols	*(struct)
)	O
;	O
TINYK	O
(	O
text	*(struct)
)	O
;	O
bool	bool
looking_at	(*(struct(char,array(char))),*(char))->(bool)
(	O
struct	O
tinysym	struct(char,array(char))
const	O
*	O
sym	*(struct(char,array(char)))
,	O
char	O
const	O
*	O
start	*(char)
)	O
{	O
return	O
MEM_SAME	O
(	O
sym	*(struct(char,array(char)))
->	O
len	char
,	O
start	*(char)
,	O
sym	*(struct(char,array(char)))
->	O
bytes	array(char)
)	O
;	O
}	O
static	O
const	O
uint8_t	char
kwsub_pool	array(char)
[	O
22	int
]	O
=	O
{	O
6	int
,	O
2	int
,	O
'k'	O
,	O
'v'	O
,	O
'\0'	O
,	O
3	int
,	O
'k'	O
,	O
'v'	O
,	O
'l'	O
,	O
'\0'	O
,	O
1	int
,	O
'k'	O
,	O
'\0'	O
,	O
1	int
,	O
'v'	O
,	O
'\0'	O
,	O
1	int
,	O
'o'	O
,	O
'\0'	O
,	O
1	int
,	O
'b'	O
,	O
'\0'	O
}	O
;	O
static	O
const	O
uint8_t	char
keyword_pool	array(char)
[	O
80	int
]	O
=	O
{	O
11	int
,	O
6	int
,	O
'A'	O
,	O
'u'	O
,	O
't'	O
,	O
'h'	O
,	O
'o'	O
,	O
'r'	O
,	O
'\0'	O
,	O
4	int
,	O
'D'	O
,	O
'a'	O
,	O
't'	O
,	O
'e'	O
,	O
'\0'	O
,	O
6	int
,	O
'H'	O
,	O
'e'	O
,	O
'a'	O
,	O
'd'	O
,	O
'e'	O
,	O
'r'	O
,	O
'\0'	O
,	O
2	int
,	O
'I'	O
,	O
'd'	O
,	O
'\0'	O
,	O
6	int
,	O
'L'	O
,	O
'o'	O
,	O
'c'	O
,	O
'k'	O
,	O
'e'	O
,	O
'r'	O
,	O
'\0'	O
,	O
3	int
,	O
'L'	O
,	O
'o'	O
,	O
'g'	O
,	O
'\0'	O
,	O
4	int
,	O
'N'	O
,	O
'a'	O
,	O
'm'	O
,	O
'e'	O
,	O
'\0'	O
,	O
7	int
,	O
'R'	O
,	O
'C'	O
,	O
'S'	O
,	O
'f'	O
,	O
'i'	O
,	O
'l'	O
,	O
'e'	O
,	O
'\0'	O
,	O
8	int
,	O
'R'	O
,	O
'e'	O
,	O
'v'	O
,	O
'i'	O
,	O
's'	O
,	O
'i'	O
,	O
'o'	O
,	O
'n'	O
,	O
'\0'	O
,	O
6	int
,	O
'S'	O
,	O
'o'	O
,	O
'u'	O
,	O
'r'	O
,	O
'c'	O
,	O
'e'	O
,	O
'\0'	O
,	O
5	int
,	O
'S'	O
,	O
't'	O
,	O
'a'	O
,	O
't'	O
,	O
'e'	O
,	O
'\0'	O
}	O
;	O
static	O
bool	bool
pool_lookup	(array(char),*(struct(*(char),long)),*(struct(int,*(struct(char,array(char))))))->(bool)
(	O
const	O
uint8_t	char
pool	array(char)
[	O
]	O
,	O
struct	O
cbuf	struct(*(char),long)
const	O
*	O
x	*(struct(*(char),long))
,	O
struct	O
pool_found	struct(int,*(struct(char,array(char))))
*	O
found	*(struct(int,*(struct(char,array(char)))))
)	O
{	O
const	O
uint8_t	char
*	O
p	*(char)
=	O
pool	array(char)
+	O
1	int
;	O
for	O
(	O
size_t	long
i	int
=	O
0	int
;	O
i	int
<	O
pool	array(char)
[	O
0	int
]	O
;	O
i	int
++	O
)	O
{	O
size_t	long
symlen	long
=	O
*	O
p	*(char)
;	O
if	O
(	O
x	*(struct(*(char),long))
->	O
size	long
==	O
symlen	long
&&	O
!	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(char)
+	O
1	int
,	O
x	*(struct(*(char),long))
->	O
string	*(char)
,	O
symlen	long
)	O
)	O
{	O
found	*(struct(int,*(struct(char,array(char)))))
->	O
i	int
=	O
i	int
;	O
found	*(struct(int,*(struct(char,array(char)))))
->	O
sym	*(struct(char,array(char)))
=	O
(	O
struct	O
tinysym	struct(char,array(char))
const	O
*	O
)	O
p	*(char)
;	O
return	O
true	int
;	O
}	O
p	*(char)
+=	O
1	int
+	O
symlen	long
+	O
1	int
;	O
}	O
return	O
false	int
;	O
}	O
int	O
recognize_kwsub	(*(struct(*(char),long)))->(int)
(	O
struct	O
cbuf	struct(*(char),long)
const	O
*	O
x	*(struct(*(char),long))
)	O
{	O
struct	O
pool_found	struct(int,*(struct(char,array(char))))
found	*(struct(int,*(struct(char,array(char)))))
;	O
return	O
pool_lookup	(array(char),*(struct(*(char),long)),*(struct(int,*(struct(char,array(char))))))->(bool)
(	O
kwsub_pool	array(char)
,	O
x	*(struct(*(char),long))
,	O
&	O
found	*(struct(int,*(struct(char,array(char)))))
)	O
?	O
found	*(struct(int,*(struct(char,array(char)))))
.	O
i	int
:	O
-	O
1	int
;	O
}	O
int	O
str2expmode	(*(char))->(int)
(	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
const	O
struct	O
cbuf	struct(*(char),long)
x	*(struct(*(char),long))
=	O
{	O
.	O
string	*(char)
=	O
s	*(char)
,	O
.	O
size	long
=	O
strlen	(*(char))->(long)
(	O
s	*(char)
)	O
}	O
;	O
return	O
recognize_kwsub	(*(struct(*(char),long)))->(int)
(	O
&	O
x	*(struct(*(char),long))
)	O
;	O
}	O
char	O
const	O
*	O
kwsub_string	(enum(int,int,int,int,int,int))->(*(char))
(	O
enum	O
kwsub	enum(int,int,int,int,int,int)
i	int
)	O
{	O
size_t	long
count	long
=	O
kwsub_pool	array(char)
[	O
0	int
]	O
,	O
symlen	long
;	O
const	O
uint8_t	char
*	O
p	*(char)
=	O
kwsub_pool	array(char)
+	O
1	int
;	O
while	O
(	O
i	int
&&	O
--	O
count	long
)	O
{	O
symlen	long
=	O
*	O
p	*(char)
;	O
p	*(char)
+=	O
1	int
+	O
symlen	long
+	O
1	int
;	O
i	int
--	O
;	O
}	O
return	O
i	int
?	O
NULL	O
:	O
(	O
char	O
const	O
*	O
)	O
(	O
p	*(char)
+	O
1	int
)	O
;	O
}	O
bool	bool
recognize_keyword	(*(char),*(struct(int,*(struct(char,array(char))))))->(bool)
(	O
char	O
const	O
*	O
string	*(char)
,	O
struct	O
pool_found	struct(int,*(struct(char,array(char))))
*	O
found	*(struct(int,*(struct(char,array(char)))))
)	O
{	O
const	O
char	O
delims	array(char)
[	O
3	int
]	O
=	O
{	O
KDELIM	char
,	O
VDELIM	char
,	O
'\0'	O
}	O
;	O
size_t	long
limit	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
string	*(char)
,	O
delims	array(char)
)	O
;	O
const	O
struct	O
cbuf	struct(*(char),long)
x	*(struct(*(char),long))
=	O
{	O
.	O
string	*(char)
=	O
string	*(char)
,	O
.	O
size	long
=	O
limit	long
}	O
;	O
return	O
(	O
(	O
KDELIM	char
==	O
string	*(char)
[	O
limit	long
]	O
||	O
VDELIM	char
==	O
string	*(char)
[	O
limit	long
]	O
)	O
&&	O
pool_lookup	(array(char),*(struct(*(char),long)),*(struct(int,*(struct(char,array(char))))))->(bool)
(	O
keyword_pool	array(char)
,	O
&	O
x	*(struct(*(char),long))
,	O
found	*(struct(int,*(struct(char,array(char)))))
)	O
)	O
;	O
}	O
