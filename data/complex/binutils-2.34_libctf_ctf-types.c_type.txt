int	O
ctf_type_isparent	(*(struct),long)->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
id	int
)	O
{	O
return	O
(	O
LCTF_TYPE_ISPARENT	O
(	O
fp	*(struct)
,	O
id	int
)	O
)	O
;	O
}	O
int	O
ctf_type_ischild	(*(struct),long)->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
id	int
)	O
{	O
return	O
(	O
LCTF_TYPE_ISCHILD	O
(	O
fp	*(struct)
,	O
id	int
)	O
)	O
;	O
}	O
int	O
ctf_member_iter	(*(struct),long,*((*(char),long,long,*(void))->(int)),*(void))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_member_f	(*(char),long,long,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
size	long
,	O
increment	O
;	O
uint32_t	int
kind	O
,	O
n	O
;	O
int	O
rc	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
&	O
size	long
,	O
&	O
increment	O
)	O
;	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	O
!=	O
CTF_K_STRUCT	O
&&	O
kind	O
!=	O
CTF_K_UNION	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTSOU	int
)	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	O
)	O
{	O
const	O
ctf_member_t	struct(int,int,int)
*	O
mp	O
=	O
(	O
const	O
ctf_member_t	struct(int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
mp	O
++	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
mp	O
->	O
ctm_name	int
)	O
;	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
name	*(char)
,	O
mp	O
->	O
ctm_type	short
,	O
mp	O
->	O
ctm_offset	short
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
lmp	O
=	O
(	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
lmp	O
++	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
lmp	O
->	O
ctlm_name	int
)	O
;	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
name	*(char)
,	O
lmp	O
->	O
ctlm_type	short
,	O
(	O
unsigned	O
long	O
)	O
CTF_LMEM_OFFSET	O
(	O
lmp	O
)	O
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
dmd	O
->	O
dmd_name	O
,	O
dmd	O
->	O
dmd_type	O
,	O
dmd	O
->	O
dmd_offset	O
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_enum_iter	(*(struct),long,*((*(char),int,*(void))->(int)),*(void))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_enum_f	(*(char),int,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
const	O
ctf_enum_t	struct(int,int)
*	O
ep	O
;	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
increment	O
;	O
uint32_t	int
n	O
;	O
int	O
rc	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve_unsliced	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
!=	O
CTF_K_ENUM	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTENUM	int
)	O
)	O
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
&	O
increment	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
ofp	O
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
ep	O
=	O
(	O
const	O
ctf_enum_t	struct(int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
ep	O
++	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
ep	O
->	O
cte_name	int
)	O
;	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
name	*(char)
,	O
ep	O
->	O
cte_value	int
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
dmd	O
->	O
dmd_name	O
,	O
dmd	O
->	O
dmd_value	O
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_iter	(*(struct),*((long,*(void))->(int)),*(void))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_type_f	(long,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
ctf_id_t	long
id	int
,	O
max	O
=	O
fp	*(struct)
->	O
ctf_typemax	O
;	O
int	O
rc	O
,	O
child	O
=	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
;	O
for	O
(	O
id	int
=	O
1	int
;	O
id	int
<=	O
max	O
;	O
id	int
++	O
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
=	O
LCTF_INDEX_TO_TYPEPTR	O
(	O
fp	*(struct)
,	O
id	int
)	O
;	O
if	O
(	O
LCTF_INFO_ISROOT	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
&&	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	*(struct)
,	O
id	int
,	O
child	O
)	O
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_iter_all	(*(struct),*((long,int,*(void))->(int)),*(void))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_type_all_f	(long,int,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
ctf_id_t	long
id	int
,	O
max	O
=	O
fp	*(struct)
->	O
ctf_typemax	O
;	O
int	O
rc	O
,	O
child	O
=	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
;	O
for	O
(	O
id	int
=	O
1	int
;	O
id	int
<=	O
max	O
;	O
id	int
++	O
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
=	O
LCTF_INDEX_TO_TYPEPTR	O
(	O
fp	*(struct)
,	O
id	int
)	O
;	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	*(struct)
,	O
id	int
,	O
child	O
)	O
,	O
LCTF_INFO_ISROOT	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
?	O
CTF_ADD_ROOT	O
:	O
CTF_ADD_NONROOT	O
,	O
arg	*(void)
)	O
!=	O
0	int
)	O
)	O
return	O
rc	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_variable_iter	(*(struct),*((*(char),long,*(void))->(int)),*(void))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_variable_f	(*(char),long,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
int	O
rc	O
;	O
if	O
(	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
&&	O
(	O
fp	*(struct)
->	O
ctf_parent	O
==	O
NULL	O
)	O
)	O
return	O
ECTF_NOPARENT	int
;	O
if	O
(	O
!	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_RDWR	O
)	O
)	O
{	O
unsigned	O
long	O
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
fp	*(struct)
->	O
ctf_nvars	O
;	O
i	*(struct)
++	O
)	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
fp	*(struct)
->	O
ctf_vars	O
[	O
i	*(struct)
]	O
.	O
ctv_name	int
)	O
,	O
fp	*(struct)
->	O
ctf_vars	O
[	O
i	*(struct)
]	O
.	O
ctv_type	int
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
else	O
{	O
ctf_dvdef_t	O
*	O
dvd	O
;	O
for	O
(	O
dvd	O
=	O
ctf_list_next	O
(	O
&	O
fp	*(struct)
->	O
ctf_dvdefs	O
)	O
;	O
dvd	O
!=	O
NULL	O
;	O
dvd	O
=	O
ctf_list_next	O
(	O
dvd	O
)	O
)	O
{	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
dvd	O
->	O
dvd_name	O
,	O
dvd	O
->	O
dvd_type	O
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
ctf_id_t	long
ctf_type_resolve	(*(struct),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_id_t	long
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
type	long
,	O
otype	O
=	O
type	long
;	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NONREPRESENTABLE	int
)	O
)	O
;	O
while	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_TYPEDEF	O
:	O
case	O
CTF_K_VOLATILE	O
:	O
case	O
CTF_K_CONST	O
:	O
case	O
CTF_K_RESTRICT	O
:	O
if	O
(	O
tp	O
->	O
ctt_type	short
==	O
type	long
||	O
tp	O
->	O
ctt_type	short
==	O
otype	O
||	O
tp	O
->	O
ctt_type	short
==	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
{	O
ctf_dprintf	O
(	O
"type %ld cycle detected\n"	*(char)
,	O
otype	O
)	O
;	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_CORRUPT	int
)	O
)	O
;	O
}	O
prev	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
type	long
;	O
type	long
=	O
tp	O
->	O
ctt_type	short
;	O
break	O
;	O
default	O
:	O
return	O
type	long
;	O
}	O
if	O
(	O
type	long
==	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NONREPRESENTABLE	int
)	O
)	O
;	O
}	O
return	O
CTF_ERR	O
;	O
}	O
ctf_id_t	long
ctf_type_resolve_unsliced	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
if	O
(	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
==	O
CTF_K_SLICE	O
)	O
return	O
ctf_type_reference	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
;	O
return	O
type	long
;	O
}	O
ctf_id_t	long
ctf_lookup_by_rawname	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
int	O
kind	O
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
ctf_lookup_by_rawhash	O
(	O
fp	*(struct)
,	O
ctf_name_table	O
(	O
fp	*(struct)
,	O
kind	O
)	O
,	O
name	*(char)
)	O
;	O
}	O
ctf_id_t	long
ctf_lookup_by_rawhash	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_names_t	O
*	O
np	O
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
ctf_id_t	long
id	int
;	O
if	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_RDWR	O
)	O
id	int
=	O
(	O
ctf_id_t	long
)	O
ctf_dynhash_lookup	O
(	O
np	O
->	O
ctn_writable	O
,	O
name	*(char)
)	O
;	O
else	O
id	int
=	O
ctf_hash_lookup_type	O
(	O
np	O
->	O
ctn_readonly	O
,	O
fp	*(struct)
,	O
name	*(char)
)	O
;	O
return	O
id	int
;	O
}	O
char	O
*	O
ctf_type_aname	(*(struct),long)->(*(char))
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_decl_t	O
cd	O
;	O
ctf_decl_node_t	O
*	O
cdp	O
;	O
ctf_decl_prec_t	O
prec	O
,	O
lp	O
,	O
rp	O
;	O
int	O
ptr	*(*(char))
,	O
arr	O
;	O
uint32_t	int
k	O
;	O
char	O
*	O
buf	*(void)
;	O
if	O
(	O
fp	*(struct)
==	O
NULL	O
&&	O
type	long
==	O
CTF_ERR	O
)	O
return	O
NULL	O
;	O
ctf_decl_init	O
(	O
&	O
cd	O
)	O
;	O
ctf_decl_push	O
(	O
&	O
cd	O
,	O
fp	*(struct)
,	O
type	long
)	O
;	O
if	O
(	O
cd	O
.	O
cd_err	O
!=	O
0	int
)	O
{	O
ctf_decl_fini	O
(	O
&	O
cd	O
)	O
;	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
cd	O
.	O
cd_err	O
)	O
;	O
return	O
NULL	O
;	O
}	O
ptr	*(*(char))
=	O
cd	O
.	O
cd_order	O
[	O
CTF_PREC_POINTER	O
]	O
>	O
CTF_PREC_POINTER	O
;	O
arr	O
=	O
cd	O
.	O
cd_order	O
[	O
CTF_PREC_ARRAY	O
]	O
>	O
CTF_PREC_ARRAY	O
;	O
rp	O
=	O
arr	O
?	O
CTF_PREC_ARRAY	O
:	O
ptr	*(*(char))
?	O
CTF_PREC_POINTER	O
:	O
-	O
1	int
;	O
lp	O
=	O
ptr	*(*(char))
?	O
CTF_PREC_POINTER	O
:	O
arr	O
?	O
CTF_PREC_ARRAY	O
:	O
-	O
1	int
;	O
k	O
=	O
CTF_K_POINTER	O
;	O
for	O
(	O
prec	O
=	O
CTF_PREC_BASE	O
;	O
prec	O
<	O
CTF_PREC_MAX	O
;	O
prec	O
++	O
)	O
{	O
for	O
(	O
cdp	O
=	O
ctf_list_next	O
(	O
&	O
cd	O
.	O
cd_nodes	O
[	O
prec	O
]	O
)	O
;	O
cdp	O
!=	O
NULL	O
;	O
cdp	O
=	O
ctf_list_next	O
(	O
cdp	O
)	O
)	O
{	O
ctf_file_t	struct
*	O
rfp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
rfp	O
,	O
cdp	O
->	O
cd_type	O
)	O
;	O
const	O
char	O
*	O
name	*(char)
=	O
ctf_strptr	O
(	O
rfp	O
,	O
tp	O
->	O
ctt_name	int
)	O
;	O
if	O
(	O
k	O
!=	O
CTF_K_POINTER	O
&&	O
k	O
!=	O
CTF_K_ARRAY	O
)	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
" "	*(char)
)	O
;	O
if	O
(	O
lp	O
==	O
prec	O
)	O
{	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"("	*(char)
)	O
;	O
lp	O
=	O
-	O
1	int
;	O
}	O
switch	O
(	O
cdp	O
->	O
cd_kind	O
)	O
{	O
case	O
CTF_K_INTEGER	O
:	O
case	O
CTF_K_FLOAT	O
:	O
case	O
CTF_K_TYPEDEF	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_POINTER	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"*"	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_ARRAY	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"[%u]"	*(char)
,	O
cdp	O
->	O
cd_n	O
)	O
;	O
break	O
;	O
case	O
CTF_K_FUNCTION	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"()"	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_STRUCT	O
:	O
case	O
CTF_K_FORWARD	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"struct %s"	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_UNION	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"union %s"	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_ENUM	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"enum %s"	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_VOLATILE	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"volatile"	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_CONST	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"const"	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_RESTRICT	O
:	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
"restrict"	*(char)
)	O
;	O
break	O
;	O
case	O
CTF_K_SLICE	O
:	O
break	O
;	O
}	O
k	O
=	O
cdp	O
->	O
cd_kind	O
;	O
}	O
if	O
(	O
rp	O
==	O
prec	O
)	O
ctf_decl_sprintf	O
(	O
&	O
cd	O
,	O
")"	*(char)
)	O
;	O
}	O
if	O
(	O
cd	O
.	O
cd_enomem	O
)	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ENOMEM	O
)	O
;	O
buf	*(void)
=	O
ctf_decl_buf	O
(	O
&	O
cd	O
)	O
;	O
ctf_decl_fini	O
(	O
&	O
cd	O
)	O
;	O
return	O
buf	*(void)
;	O
}	O
ssize_t	long
ctf_type_lname	(*(struct),long,*(char),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
len	int
)	O
{	O
char	O
*	O
str	O
=	O
ctf_type_aname	(*(struct),long)->(*(char))
(	O
fp	*(struct)
,	O
type	long
)	O
;	O
size_t	long
slen	O
;	O
if	O
(	O
str	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
slen	O
=	O
strlen	O
(	O
str	O
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(void)
,	O
len	int
,	O
"%s"	*(char)
,	O
str	O
)	O
;	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
if	O
(	O
slen	O
>=	O
len	int
)	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NAMELEN	int
)	O
;	O
return	O
slen	O
;	O
}	O
char	O
*	O
ctf_type_name	(*(struct),long,*(char),long)->(*(char))
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
char	O
*	O
buf	*(void)
,	O
size_t	long
len	int
)	O
{	O
ssize_t	long
rv	O
=	O
ctf_type_lname	(*(struct),long,*(char),long)->(long)
(	O
fp	*(struct)
,	O
type	long
,	O
buf	*(void)
,	O
len	int
)	O
;	O
return	O
(	O
rv	O
>=	O
0	int
&&	O
(	O
size_t	long
)	O
rv	O
<	O
len	int
?	O
buf	*(void)
:	O
NULL	O
)	O
;	O
}	O
char	O
*	O
ctf_type_aname_raw	(*(struct),long)->(*(char))
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
ctf_strraw	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_name	int
)	O
!=	O
NULL	O
)	O
return	O
strdup	O
(	O
ctf_strraw	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_name	int
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
ssize_t	long
ctf_type_size	(*(struct),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
ssize_t	long
size	long
;	O
ctf_arinfo_t	struct(long,long,int)
ar	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_POINTER	O
:	O
return	O
fp	*(struct)
->	O
ctf_dmodel	O
->	O
ctd_pointer	O
;	O
case	O
CTF_K_FUNCTION	O
:	O
return	O
0	int
;	O
case	O
CTF_K_ENUM	O
:	O
return	O
fp	*(struct)
->	O
ctf_dmodel	O
->	O
ctd_int	O
;	O
case	O
CTF_K_ARRAY	O
:	O
if	O
(	O
(	O
size	long
=	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
>	O
0	int
)	O
return	O
size	long
;	O
if	O
(	O
ctf_array_info	(*(struct),long,*(struct(long,long,int)))->(int)
(	O
fp	*(struct)
,	O
type	long
,	O
&	O
ar	O
)	O
<	O
0	int
||	O
(	O
size	long
=	O
ctf_type_size	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
ar	O
.	O
ctr_contents	long
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
size	long
*	O
ar	O
.	O
ctr_nelems	int
;	O
default	O
:	O
return	O
(	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
}	O
}	O
ssize_t	long
ctf_type_align	(*(struct),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
int	O
kind	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
switch	O
(	O
kind	O
)	O
{	O
case	O
CTF_K_POINTER	O
:	O
case	O
CTF_K_FUNCTION	O
:	O
return	O
fp	*(struct)
->	O
ctf_dmodel	O
->	O
ctd_pointer	O
;	O
case	O
CTF_K_ARRAY	O
:	O
{	O
ctf_arinfo_t	struct(long,long,int)
r	O
;	O
if	O
(	O
ctf_array_info	(*(struct),long,*(struct(long,long,int)))->(int)
(	O
fp	*(struct)
,	O
type	long
,	O
&	O
r	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
return	O
(	O
ctf_type_align	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
r	O
.	O
ctr_contents	long
)	O
)	O
;	O
}	O
case	O
CTF_K_STRUCT	O
:	O
case	O
CTF_K_UNION	O
:	O
{	O
size_t	long
align	O
=	O
0	int
;	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
ofp	O
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
uint32_t	int
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
ssize_t	long
size	long
,	O
increment	O
;	O
const	O
void	O
*	O
vmp	O
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
&	O
size	long
,	O
&	O
increment	O
)	O
;	O
vmp	O
=	O
(	O
unsigned	O
char	O
*	O
)	O
tp	O
+	O
increment	O
;	O
if	O
(	O
kind	O
==	O
CTF_K_STRUCT	O
)	O
n	O
=	O
MIN	O
(	O
n	O
,	O
1	int
)	O
;	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	O
)	O
{	O
const	O
ctf_member_t	struct(int,int,int)
*	O
mp	O
=	O
vmp	O
;	O
for	O
(	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
mp	O
++	O
)	O
{	O
ssize_t	long
am	O
=	O
ctf_type_align	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
mp	O
->	O
ctm_type	short
)	O
;	O
align	O
=	O
MAX	O
(	O
align	O
,	O
(	O
size_t	long
)	O
am	O
)	O
;	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
lmp	O
=	O
vmp	O
;	O
for	O
(	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
lmp	O
++	O
)	O
{	O
ssize_t	long
am	O
=	O
ctf_type_align	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
lmp	O
->	O
ctlm_type	short
)	O
;	O
align	O
=	O
MAX	O
(	O
align	O
,	O
(	O
size_t	long
)	O
am	O
)	O
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
ssize_t	long
am	O
=	O
ctf_type_align	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
dmd	O
->	O
dmd_type	O
)	O
;	O
align	O
=	O
MAX	O
(	O
align	O
,	O
(	O
size_t	long
)	O
am	O
)	O
;	O
if	O
(	O
kind	O
==	O
CTF_K_STRUCT	O
)	O
break	O
;	O
}	O
}	O
return	O
align	O
;	O
}	O
case	O
CTF_K_ENUM	O
:	O
return	O
fp	*(struct)
->	O
ctf_dmodel	O
->	O
ctd_int	O
;	O
default	O
:	O
return	O
(	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
;	O
}	O
}	O
int	O
ctf_type_kind_unsliced	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
return	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
;	O
}	O
int	O
ctf_type_kind	(*(struct),long)->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
int	O
kind	O
;	O
if	O
(	O
(	O
kind	O
=	O
ctf_type_kind_unsliced	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
kind	O
==	O
CTF_K_SLICE	O
)	O
{	O
if	O
(	O
(	O
type	long
=	O
ctf_type_reference	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
kind	O
=	O
ctf_type_kind_unsliced	O
(	O
fp	*(struct)
,	O
type	long
)	O
;	O
}	O
return	O
kind	O
;	O
}	O
ctf_id_t	long
ctf_type_reference	(*(struct),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_POINTER	O
:	O
case	O
CTF_K_TYPEDEF	O
:	O
case	O
CTF_K_VOLATILE	O
:	O
case	O
CTF_K_CONST	O
:	O
case	O
CTF_K_RESTRICT	O
:	O
return	O
tp	O
->	O
ctt_type	short
;	O
case	O
CTF_K_SLICE	O
:	O
{	O
const	O
ctf_slice_t	struct(int,short,short)
*	O
sp	O
;	O
ssize_t	long
increment	O
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
&	O
increment	O
)	O
;	O
sp	O
=	O
(	O
const	O
ctf_slice_t	struct(int,short,short)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
return	O
sp	O
->	O
cts_type	int
;	O
}	O
default	O
:	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTREF	int
)	O
)	O
;	O
}	O
}	O
ctf_id_t	long
ctf_type_pointer	(*(struct),long)->(long)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
ctf_id_t	long
ntype	O
;	O
if	O
(	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
==	O
NULL	O
)	O
return	O
CTF_ERR	O
;	O
if	O
(	O
(	O
ntype	O
=	O
fp	*(struct)
->	O
ctf_ptrtab	O
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	*(struct)
,	O
type	long
)	O
]	O
)	O
!=	O
0	int
)	O
return	O
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	*(struct)
,	O
ntype	O
,	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
)	O
)	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTYPE	int
)	O
)	O
;	O
if	O
(	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTYPE	int
)	O
)	O
;	O
if	O
(	O
(	O
ntype	O
=	O
fp	*(struct)
->	O
ctf_ptrtab	O
[	O
LCTF_TYPE_TO_INDEX	O
(	O
fp	*(struct)
,	O
type	long
)	O
]	O
)	O
!=	O
0	int
)	O
return	O
(	O
LCTF_INDEX_TO_TYPE	O
(	O
fp	*(struct)
,	O
ntype	O
,	O
(	O
fp	*(struct)
->	O
ctf_flags	O
&	O
LCTF_CHILD	O
)	O
)	O
)	O
;	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTYPE	int
)	O
)	O
;	O
}	O
int	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_encoding_t	struct(int,int,int)
*	O
ep	O
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
ssize_t	long
increment	O
;	O
uint32_t	int
data	*(void)
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
ofp	O
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_INTEGER	O
:	O
case	O
CTF_K_FLOAT	O
:	O
*	O
ep	O
=	O
dtd	O
->	O
dtd_u	O
.	O
dtu_enc	O
;	O
break	O
;	O
case	O
CTF_K_SLICE	O
:	O
{	O
const	O
ctf_slice_t	struct(int,short,short)
*	O
slice	O
;	O
ctf_encoding_t	struct(int,int,int)
underlying_en	O
;	O
slice	O
=	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_slice	O
;	O
data	*(void)
=	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
fp	*(struct)
,	O
slice	O
->	O
cts_type	int
,	O
&	O
underlying_en	O
)	O
;	O
ep	O
->	O
cte_format	int
=	O
underlying_en	O
.	O
cte_format	int
;	O
ep	O
->	O
cte_offset	int
=	O
slice	O
->	O
cts_offset	short
;	O
ep	O
->	O
cte_bits	int
=	O
slice	O
->	O
cts_bits	short
;	O
break	O
;	O
}	O
default	O
:	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTINTFP	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
&	O
increment	O
)	O
;	O
switch	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
)	O
{	O
case	O
CTF_K_INTEGER	O
:	O
data	*(void)
=	O
*	O
(	O
const	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
ep	O
->	O
cte_format	int
=	O
CTF_INT_ENCODING	O
(	O
data	*(void)
)	O
;	O
ep	O
->	O
cte_offset	int
=	O
CTF_INT_OFFSET	O
(	O
data	*(void)
)	O
;	O
ep	O
->	O
cte_bits	int
=	O
CTF_INT_BITS	O
(	O
data	*(void)
)	O
;	O
break	O
;	O
case	O
CTF_K_FLOAT	O
:	O
data	*(void)
=	O
*	O
(	O
const	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
ep	O
->	O
cte_format	int
=	O
CTF_FP_ENCODING	O
(	O
data	*(void)
)	O
;	O
ep	O
->	O
cte_offset	int
=	O
CTF_FP_OFFSET	O
(	O
data	*(void)
)	O
;	O
ep	O
->	O
cte_bits	int
=	O
CTF_FP_BITS	O
(	O
data	*(void)
)	O
;	O
break	O
;	O
case	O
CTF_K_SLICE	O
:	O
{	O
const	O
ctf_slice_t	struct(int,short,short)
*	O
slice	O
;	O
ctf_encoding_t	struct(int,int,int)
underlying_en	O
;	O
slice	O
=	O
(	O
ctf_slice_t	struct(int,short,short)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
data	*(void)
=	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
fp	*(struct)
,	O
slice	O
->	O
cts_type	int
,	O
&	O
underlying_en	O
)	O
;	O
ep	O
->	O
cte_format	int
=	O
underlying_en	O
.	O
cte_format	int
;	O
ep	O
->	O
cte_offset	int
=	O
slice	O
->	O
cts_offset	short
;	O
ep	O
->	O
cte_bits	int
=	O
slice	O
->	O
cts_bits	short
;	O
break	O
;	O
}	O
default	O
:	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTINTFP	int
)	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_cmp	(*(struct),long,*(struct),long)->(int)
(	O
ctf_file_t	struct
*	O
lfp	O
,	O
ctf_id_t	long
ltype	O
,	O
ctf_file_t	struct
*	O
rfp	O
,	O
ctf_id_t	long
rtype	O
)	O
{	O
int	O
rval	O
;	O
if	O
(	O
ltype	O
<	O
rtype	O
)	O
rval	O
=	O
-	O
1	int
;	O
else	O
if	O
(	O
ltype	O
>	O
rtype	O
)	O
rval	O
=	O
1	int
;	O
else	O
rval	O
=	O
0	int
;	O
if	O
(	O
lfp	O
==	O
rfp	O
)	O
return	O
rval	O
;	O
if	O
(	O
LCTF_TYPE_ISPARENT	O
(	O
lfp	O
,	O
ltype	O
)	O
&&	O
lfp	O
->	O
ctf_parent	O
!=	O
NULL	O
)	O
lfp	O
=	O
lfp	O
->	O
ctf_parent	O
;	O
if	O
(	O
LCTF_TYPE_ISPARENT	O
(	O
rfp	O
,	O
rtype	O
)	O
&&	O
rfp	O
->	O
ctf_parent	O
!=	O
NULL	O
)	O
rfp	O
=	O
rfp	O
->	O
ctf_parent	O
;	O
if	O
(	O
lfp	O
<	O
rfp	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
lfp	O
>	O
rfp	O
)	O
return	O
1	int
;	O
return	O
rval	O
;	O
}	O
int	O
ctf_type_compat	(*(struct),long,*(struct),long)->(int)
(	O
ctf_file_t	struct
*	O
lfp	O
,	O
ctf_id_t	long
ltype	O
,	O
ctf_file_t	struct
*	O
rfp	O
,	O
ctf_id_t	long
rtype	O
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
ltp	O
,	O
*	O
rtp	O
;	O
ctf_encoding_t	struct(int,int,int)
le	O
,	O
re	O
;	O
ctf_arinfo_t	struct(long,long,int)
la	O
,	O
ra	O
;	O
uint32_t	int
lkind	O
,	O
rkind	O
;	O
int	O
same_names	O
=	O
0	int
;	O
if	O
(	O
ctf_type_cmp	(*(struct),long,*(struct),long)->(int)
(	O
lfp	O
,	O
ltype	O
,	O
rfp	O
,	O
rtype	O
)	O
==	O
0	int
)	O
return	O
1	int
;	O
ltype	O
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
lfp	O
,	O
ltype	O
)	O
;	O
lkind	O
=	O
ctf_type_kind	(*(struct),long)->(int)
(	O
lfp	O
,	O
ltype	O
)	O
;	O
rtype	O
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
rfp	O
,	O
rtype	O
)	O
;	O
rkind	O
=	O
ctf_type_kind	(*(struct),long)->(int)
(	O
rfp	O
,	O
rtype	O
)	O
;	O
ltp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
lfp	O
,	O
ltype	O
)	O
;	O
rtp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
rfp	O
,	O
rtype	O
)	O
;	O
if	O
(	O
ltp	O
!=	O
NULL	O
&&	O
rtp	O
!=	O
NULL	O
)	O
same_names	O
=	O
(	O
strcmp	O
(	O
ctf_strptr	O
(	O
lfp	O
,	O
ltp	O
->	O
ctt_name	int
)	O
,	O
ctf_strptr	O
(	O
rfp	O
,	O
rtp	O
->	O
ctt_name	int
)	O
)	O
==	O
0	int
)	O
;	O
if	O
(	O
(	O
(	O
lkind	O
==	O
CTF_K_ENUM	O
)	O
&&	O
(	O
rkind	O
==	O
CTF_K_INTEGER	O
)	O
)	O
||	O
(	O
(	O
rkind	O
==	O
CTF_K_ENUM	O
)	O
&&	O
(	O
lkind	O
==	O
CTF_K_INTEGER	O
)	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
lkind	O
!=	O
rkind	O
)	O
return	O
0	int
;	O
switch	O
(	O
lkind	O
)	O
{	O
case	O
CTF_K_INTEGER	O
:	O
case	O
CTF_K_FLOAT	O
:	O
memset	O
(	O
&	O
le	O
,	O
0	int
,	O
sizeof	O
(	O
le	O
)	O
)	O
;	O
memset	O
(	O
&	O
re	O
,	O
0	int
,	O
sizeof	O
(	O
re	O
)	O
)	O
;	O
return	O
(	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
lfp	O
,	O
ltype	O
,	O
&	O
le	O
)	O
==	O
0	int
&&	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
rfp	O
,	O
rtype	O
,	O
&	O
re	O
)	O
==	O
0	int
&&	O
memcmp	O
(	O
&	O
le	O
,	O
&	O
re	O
,	O
sizeof	O
(	O
ctf_encoding_t	struct(int,int,int)
)	O
)	O
==	O
0	int
)	O
;	O
case	O
CTF_K_POINTER	O
:	O
return	O
(	O
ctf_type_compat	(*(struct),long,*(struct),long)->(int)
(	O
lfp	O
,	O
ctf_type_reference	(*(struct),long)->(long)
(	O
lfp	O
,	O
ltype	O
)	O
,	O
rfp	O
,	O
ctf_type_reference	(*(struct),long)->(long)
(	O
rfp	O
,	O
rtype	O
)	O
)	O
)	O
;	O
case	O
CTF_K_ARRAY	O
:	O
return	O
(	O
ctf_array_info	(*(struct),long,*(struct(long,long,int)))->(int)
(	O
lfp	O
,	O
ltype	O
,	O
&	O
la	O
)	O
==	O
0	int
&&	O
ctf_array_info	(*(struct),long,*(struct(long,long,int)))->(int)
(	O
rfp	O
,	O
rtype	O
,	O
&	O
ra	O
)	O
==	O
0	int
&&	O
la	O
.	O
ctr_nelems	int
==	O
ra	O
.	O
ctr_nelems	int
&&	O
ctf_type_compat	(*(struct),long,*(struct),long)->(int)
(	O
lfp	O
,	O
la	O
.	O
ctr_contents	long
,	O
rfp	O
,	O
ra	O
.	O
ctr_contents	long
)	O
&&	O
ctf_type_compat	(*(struct),long,*(struct),long)->(int)
(	O
lfp	O
,	O
la	O
.	O
ctr_index	long
,	O
rfp	O
,	O
ra	O
.	O
ctr_index	long
)	O
)	O
;	O
case	O
CTF_K_STRUCT	O
:	O
case	O
CTF_K_UNION	O
:	O
return	O
(	O
same_names	O
&&	O
(	O
ctf_type_size	(*(struct),long)->(long)
(	O
lfp	O
,	O
ltype	O
)	O
==	O
ctf_type_size	(*(struct),long)->(long)
(	O
rfp	O
,	O
rtype	O
)	O
)	O
)	O
;	O
case	O
CTF_K_ENUM	O
:	O
{	O
int	O
lencoded	O
,	O
rencoded	O
;	O
lencoded	O
=	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
lfp	O
,	O
ltype	O
,	O
&	O
le	O
)	O
;	O
rencoded	O
=	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
rfp	O
,	O
rtype	O
,	O
&	O
re	O
)	O
;	O
if	O
(	O
(	O
lencoded	O
!=	O
rencoded	O
)	O
||	O
(	O
(	O
lencoded	O
==	O
0	int
)	O
&&	O
memcmp	O
(	O
&	O
le	O
,	O
&	O
re	O
,	O
sizeof	O
(	O
ctf_encoding_t	struct(int,int,int)
)	O
)	O
!=	O
0	int
)	O
)	O
return	O
0	int
;	O
}	O
case	O
CTF_K_FORWARD	O
:	O
return	O
same_names	O
;	O
default	O
:	O
return	O
0	int
;	O
}	O
}	O
int	O
ctf_member_info	(*(struct),long,*(char),*(struct(long,long)))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
const	O
char	O
*	O
name	*(char)
,	O
ctf_membinfo_t	struct(long,long)
*	O
mip	O
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
size	long
,	O
increment	O
;	O
uint32_t	int
kind	O
,	O
n	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
&	O
size	long
,	O
&	O
increment	O
)	O
;	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	O
!=	O
CTF_K_STRUCT	O
&&	O
kind	O
!=	O
CTF_K_UNION	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTSOU	int
)	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	O
)	O
{	O
const	O
ctf_member_t	struct(int,int,int)
*	O
mp	O
=	O
(	O
const	O
ctf_member_t	struct(int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
mp	O
++	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
mp	O
->	O
ctm_name	int
)	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
mip	O
->	O
ctm_type	short
=	O
mp	O
->	O
ctm_type	short
;	O
mip	O
->	O
ctm_offset	short
=	O
mp	O
->	O
ctm_offset	short
;	O
return	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
lmp	O
=	O
(	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
lmp	O
++	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
lmp	O
->	O
ctlm_name	int
)	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
mip	O
->	O
ctm_type	short
=	O
lmp	O
->	O
ctlm_type	short
;	O
mip	O
->	O
ctm_offset	short
=	O
(	O
unsigned	O
long	O
)	O
CTF_LMEM_OFFSET	O
(	O
lmp	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
dmd	O
->	O
dmd_name	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
mip	O
->	O
ctm_type	short
=	O
dmd	O
->	O
dmd_type	O
;	O
mip	O
->	O
ctm_offset	short
=	O
dmd	O
->	O
dmd_offset	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOMEMBNAM	int
)	O
)	O
;	O
}	O
int	O
ctf_array_info	(*(struct),long,*(struct(long,long,int)))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_arinfo_t	struct(long,long,int)
*	O
arp	O
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
const	O
ctf_array_t	struct(int,int,int)
*	O
ap	O
;	O
const	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
increment	O
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
!=	O
CTF_K_ARRAY	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTARRAY	int
)	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
ofp	O
,	O
type	long
)	O
)	O
!=	O
NULL	O
)	O
{	O
*	O
arp	O
=	O
dtd	O
->	O
dtd_u	O
.	O
dtu_arr	O
;	O
return	O
0	int
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
&	O
increment	O
)	O
;	O
ap	O
=	O
(	O
const	O
ctf_array_t	struct(int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
arp	O
->	O
ctr_contents	long
=	O
ap	O
->	O
cta_contents	short
;	O
arp	O
->	O
ctr_index	long
=	O
ap	O
->	O
cta_index	short
;	O
arp	O
->	O
ctr_nelems	int
=	O
ap	O
->	O
cta_nelems	int
;	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
ctf_enum_name	(*(struct),long,int)->(*(char))
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
int	O
value	int
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
const	O
ctf_enum_t	struct(int,int)
*	O
ep	O
;	O
const	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
increment	O
;	O
uint32_t	int
n	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve_unsliced	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
!=	O
CTF_K_ENUM	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTENUM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
&	O
increment	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
ofp	O
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
ep	O
=	O
(	O
const	O
ctf_enum_t	struct(int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
ep	O
++	O
)	O
{	O
if	O
(	O
ep	O
->	O
cte_value	int
==	O
value	int
)	O
return	O
(	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
ep	O
->	O
cte_name	int
)	O
)	O
;	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
if	O
(	O
dmd	O
->	O
dmd_value	O
==	O
value	int
)	O
return	O
dmd	O
->	O
dmd_name	O
;	O
}	O
}	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOENUMNAM	int
)	O
;	O
return	O
NULL	O
;	O
}	O
int	O
ctf_enum_value	(*(struct),long,*(char),*(int))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
*	O
valp	O
)	O
{	O
ctf_file_t	struct
*	O
ofp	O
=	O
fp	*(struct)
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
const	O
ctf_enum_t	struct(int,int)
*	O
ep	O
;	O
const	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
increment	O
;	O
uint32_t	int
n	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve_unsliced	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
!=	O
CTF_K_ENUM	O
)	O
{	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOTENUM	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
NULL	O
,	O
&	O
increment	O
)	O
;	O
ep	O
=	O
(	O
const	O
ctf_enum_t	struct(int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
ofp	O
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
ep	O
++	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
ep	O
->	O
cte_name	int
)	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
valp	O
!=	O
NULL	O
)	O
*	O
valp	O
=	O
ep	O
->	O
cte_value	int
;	O
return	O
0	int
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
if	O
(	O
strcmp	O
(	O
dmd	O
->	O
dmd_name	O
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
valp	O
!=	O
NULL	O
)	O
*	O
valp	O
=	O
dmd	O
->	O
dmd_value	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
(	O
void	O
)	O
ctf_set_errno	O
(	O
ofp	O
,	O
ECTF_NOENUMNAM	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
ctf_func_type_info	(*(struct),long,*(struct(long,int,int)))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_funcinfo_t	struct(long,int,int)
*	O
fip	O
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
uint32_t	int
kind	O
;	O
const	O
uint32_t	int
*	O
args	O
;	O
const	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
size	long
,	O
increment	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
&	O
size	long
,	O
&	O
increment	O
)	O
;	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	O
!=	O
CTF_K_FUNCTION	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTFUNC	int
)	O
)	O
;	O
fip	O
->	O
ctc_return	long
=	O
tp	O
->	O
ctt_type	short
;	O
fip	O
->	O
ctc_flags	int
=	O
0	int
;	O
fip	O
->	O
ctc_argc	int
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
args	O
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
else	O
args	O
=	O
(	O
uint32_t	int
*	O
)	O
dtd	O
->	O
dtd_u	O
.	O
dtu_argv	O
;	O
if	O
(	O
fip	O
->	O
ctc_argc	int
!=	O
0	int
&&	O
args	O
[	O
fip	O
->	O
ctc_argc	int
-	O
1	int
]	O
==	O
0	int
)	O
{	O
fip	O
->	O
ctc_flags	int
|=	O
CTF_FUNC_VARARG	O
;	O
fip	O
->	O
ctc_argc	int
--	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_func_type_args	(*(struct),long,int,*(long))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
uint32_t	int
argc	O
,	O
ctf_id_t	long
*	O
argv	*(*(char))
)	O
{	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
const	O
uint32_t	int
*	O
args	O
;	O
const	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
size	long
,	O
increment	O
;	O
ctf_funcinfo_t	struct(long,int,int)
f	O
;	O
if	O
(	O
ctf_func_type_info	(*(struct),long,*(struct(long,int,int)))->(int)
(	O
fp	*(struct)
,	O
type	long
,	O
&	O
f	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
&	O
size	long
,	O
&	O
increment	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
args	O
=	O
(	O
uint32_t	int
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
else	O
args	O
=	O
(	O
uint32_t	int
*	O
)	O
dtd	O
->	O
dtd_u	O
.	O
dtu_argv	O
;	O
for	O
(	O
argc	O
=	O
MIN	O
(	O
argc	O
,	O
f	O
.	O
ctc_argc	int
)	O
;	O
argc	O
!=	O
0	int
;	O
argc	O
--	O
)	O
*	O
argv	*(*(char))
++	O
=	O
*	O
args	O
++	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ctf_type_rvisit	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_visit_f	(*(char),long,long,int,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
,	O
const	O
char	O
*	O
name	*(char)
,	O
unsigned	O
long	O
offset	long
,	O
int	O
depth	int
)	O
{	O
ctf_id_t	long
otype	O
=	O
type	long
;	O
const	O
ctf_type_t	struct(int,int,union(int,int),int,int)
*	O
tp	O
;	O
const	O
ctf_dtdef_t	O
*	O
dtd	O
;	O
ssize_t	long
size	long
,	O
increment	O
;	O
uint32_t	int
kind	O
,	O
n	O
;	O
int	O
rc	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_type_resolve	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
CTF_ERR	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
tp	O
=	O
ctf_lookup_by_id	O
(	O
&	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
rc	O
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
name	*(char)
,	O
otype	O
,	O
offset	long
,	O
depth	int
,	O
arg	*(void)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
kind	O
=	O
LCTF_INFO_KIND	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
if	O
(	O
kind	O
!=	O
CTF_K_STRUCT	O
&&	O
kind	O
!=	O
CTF_K_UNION	O
)	O
return	O
0	int
;	O
(	O
void	O
)	O
ctf_get_ctt_size	O
(	O
fp	*(struct)
,	O
tp	O
,	O
&	O
size	long
,	O
&	O
increment	O
)	O
;	O
if	O
(	O
(	O
dtd	O
=	O
ctf_dynamic_type	O
(	O
fp	*(struct)
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
size	long
<	O
CTF_LSTRUCT_THRESH	O
)	O
{	O
const	O
ctf_member_t	struct(int,int,int)
*	O
mp	O
=	O
(	O
const	O
ctf_member_t	struct(int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
mp	O
++	O
)	O
{	O
if	O
(	O
(	O
rc	O
=	O
ctf_type_rvisit	O
(	O
fp	*(struct)
,	O
mp	O
->	O
ctm_type	short
,	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
arg	*(void)
,	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
mp	O
->	O
ctm_name	int
)	O
,	O
offset	long
+	O
mp	O
->	O
ctm_offset	short
,	O
depth	int
+	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
else	O
{	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
lmp	O
=	O
(	O
const	O
ctf_lmember_t	struct(int,int,int,int)
*	O
)	O
(	O
(	O
uintptr_t	long
)	O
tp	O
+	O
increment	O
)	O
;	O
for	O
(	O
n	O
=	O
LCTF_INFO_VLEN	O
(	O
fp	*(struct)
,	O
tp	O
->	O
ctt_info	short
)	O
;	O
n	O
!=	O
0	int
;	O
n	O
--	O
,	O
lmp	O
++	O
)	O
{	O
if	O
(	O
(	O
rc	O
=	O
ctf_type_rvisit	O
(	O
fp	*(struct)
,	O
lmp	O
->	O
ctlm_type	short
,	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
arg	*(void)
,	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
lmp	O
->	O
ctlm_name	int
)	O
,	O
offset	long
+	O
(	O
unsigned	O
long	O
)	O
CTF_LMEM_OFFSET	O
(	O
lmp	O
)	O
,	O
depth	int
+	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
}	O
else	O
{	O
ctf_dmdef_t	O
*	O
dmd	O
;	O
for	O
(	O
dmd	O
=	O
ctf_list_next	O
(	O
&	O
dtd	O
->	O
dtd_u	O
.	O
dtu_members	O
)	O
;	O
dmd	O
!=	O
NULL	O
;	O
dmd	O
=	O
ctf_list_next	O
(	O
dmd	O
)	O
)	O
{	O
if	O
(	O
(	O
rc	O
=	O
ctf_type_rvisit	O
(	O
fp	*(struct)
,	O
dmd	O
->	O
dmd_type	O
,	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
arg	*(void)
,	O
dmd	O
->	O
dmd_name	O
,	O
dmd	O
->	O
dmd_offset	O
,	O
depth	int
+	O
1	int
)	O
)	O
!=	O
0	int
)	O
return	O
rc	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
ctf_type_visit	(*(struct),long,*((*(char),long,long,int,*(void))->(int)),*(void))->(int)
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
type	long
,	O
ctf_visit_f	(*(char),long,long,int,*(void))->(int)
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
return	O
(	O
ctf_type_rvisit	O
(	O
fp	*(struct)
,	O
type	long
,	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
arg	*(void)
,	O
""	*(char)
,	O
0	int
,	O
0	int
)	O
)	O
;	O
}	O
