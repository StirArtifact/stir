struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
{	O
unsigned	O
long	O
num_calls	long
;	O
double	O
user_time	double
;	O
double	O
sys_time	double
;	O
double	O
elapsed_time	double
;	O
double	O
mem_usage	double
;	O
double	O
disk_io	double
;	O
double	O
minor_faults	double
;	O
double	O
major_faults	double
;	O
double	O
swap_count	double
;	O
}	O
;	O
struct	O
usracct	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
{	O
char	O
name	*(char)
[	O
NAME_LEN	O
]	O
;	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
s	long
;	O
}	O
;	O
char	O
*	O
program_name	*(char)
;	O
int	O
debugging_enabled	int
=	O
0	int
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
;	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
{	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
s	long
;	O
}	O
;	O
struct	O
hashtab	struct(long,long,long,*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int))))),int)
*	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
;	O
struct	O
command_key	struct(array(char),short)
{	O
char	O
comm	array(char)
[	O
COMM_LEN	O
]	O
;	O
short	O
fork_flag	short
;	O
}	O
;	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
{	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
s	long
;	O
short	O
junked	short
;	O
}	O
;	O
struct	O
savacct	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
{	O
struct	O
command_key	struct(array(char),short)
c	struct(array(char),short)
;	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
s	long
;	O
}	O
;	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
stats_totals	struct(long,double,double,double,double,double,double,double,double)
;	O
double	O
system_page_size	double
;	O
char	O
default_acct_file	array(char)
[	O
]	O
=	O
ACCT_FILE_LOC	*(char)
;	O
char	O
default_savacct_file	array(char)
[	O
]	O
=	O
SAVACCT_FILE_LOC	*(char)
;	O
char	O
default_usracct_file	array(char)
[	O
]	O
=	O
USRACCT_FILE_LOC	*(char)
;	O
char	O
*	O
acct_file_name	*(char)
=	O
default_acct_file	array(char)
;	O
char	O
*	O
savacct_file_name	*(char)
=	O
default_savacct_file	array(char)
;	O
char	O
*	O
usracct_file_name	*(char)
=	O
default_usracct_file	array(char)
;	O
int	O
print_seconds	int
=	O
0	int
;	O
int	O
dont_read_summary_files	int
=	O
0	int
;	O
int	O
print_users	int
=	O
0	int
;	O
int	O
percentages	int
=	O
0	int
;	O
int	O
user_summary_flag	int
=	O
0	int
;	O
int	O
group_summary_flag	int
=	O
0	int
;	O
int	O
ahz	int
=	O
AHZ	int
;	O
int	O
separate_times	int
=	O
0	int
;	O
int	O
print_ksec	int
=	O
0	int
;	O
int	O
print_ratio	int
=	O
0	int
;	O
int	O
total_io	int
=	O
0	int
;	O
int	O
show_paging	int
=	O
0	int
;	O
int	O
paging_as_avg	int
=	O
0	int
;	O
enum	O
{	O
sort_num_calls	int
,	O
sort_sys_plus_user	int
,	O
sort_sys_plus_user_div_calls	int
,	O
sort_avio	int
,	O
sort_tio	int
,	O
sort_cpu_mem_average	int
,	O
sort_cpu_storage	int
,	O
sort_real_time	int
}	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_sys_plus_user	int
;	O
int	O
reverse_sort	int
=	O
0	int
;	O
int	O
merge_files	int
;	O
int	O
separate_forks	int
=	O
0	int
;	O
int	O
junk_threshold	int
=	O
0	int
;	O
int	O
print_all_records	int
=	O
0	int
;	O
int	O
always_yes	int
=	O
0	int
;	O
static	O
unsigned	O
int	O
hzval	int
;	O
void	O
write_savacct_file	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
void	O
write_usracct_file	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
void	O
parse_savacct_entries	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
void	O
parse_usracct_entries	(*(char))->(void)
(	O
char	O
*	O
)	O
;	O
void	O
parse_acct_entries	()->(void)
(	O
void	O
)	O
;	O
void	O
init_flags_and_data	()->(void)
(	O
void	O
)	O
;	O
unsigned	O
long	O
hash_name	(*(char))->(long)
(	O
char	O
*	O
)	O
;	O
void	O
update_command_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)),short)->(void)
(	O
char	O
*	O
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
,	O
short	O
fork_flag	short
)	O
;	O
void	O
update_user_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
char	O
*	O
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
)	O
;	O
int	O
compare_sum_entry	(*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))),*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
,	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
)	O
;	O
int	O
compare_user_entry	(*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))),*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
,	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
)	O
;	O
int	O
compare_stats_entry	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(int)
(	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
)	O
;	O
void	O
print_command_list	()->(void)
(	O
void	O
)	O
;	O
void	O
print_user_list	()->(void)
(	O
void	O
)	O
;	O
int	O
non_printable	(*(char),int)->(int)
(	O
char	O
*	O
,	O
int	O
)	O
;	O
int	O
ask_if_junkable	(*(char),int)->(int)
(	O
char	O
*	O
,	O
int	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
c	struct(array(char),short)
;	O
hzval	int
=	O
sysconf	(int)->(long)
(	O
_SC_CLK_TCK	int
)	O
;	O
program_name	*(char)
=	O
argv	array(*(char))
[	O
0	int
]	O
;	O
system_page_size	double
=	O
(	O
double	O
)	O
getpagesize	()->(int)
(	O
)	O
/	O
1024.0	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
stats_totals	struct(long,double,double,double,double,double,double,double,double)
,	O
0	int
,	O
sizeof	O
(	O
stats_totals	struct(long,double,double,double,double,double,double,double,double)
)	O
)	O
;	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
0	int
)	O
;	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
=	O
hashtab_init	(int)->(*(struct(long,long,long,*(*(struct`)),int)))
(	O
sizeof	O
(	O
struct	O
command_key	struct(array(char),short)
)	O
)	O
;	O
pacct_init	(int)->(void)
(	O
0	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"debug"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
1	int
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
2	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
3	int
}	O
,	O
{	O
"other-acct-file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
4	int
}	O
,	O
{	O
"print-seconds"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
5	int
}	O
,	O
{	O
"dont-read-summary-files"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
6	int
}	O
,	O
{	O
"list-all-names"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
7	int
}	O
,	O
{	O
"other-savacct-file"	*(char)
,	O
1	int
,	O
NULL	O
,	O
9	int
}	O
,	O
{	O
"print-users"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
12	int
}	O
,	O
{	O
"percentages"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
14	int
}	O
,	O
{	O
"not-interactive"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
19	int
}	O
,	O
{	O
"user-summary"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
20	int
}	O
,	O
{	O
"group-summary"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
30	int
}	O
,	O
{	O
"reverse-sort"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
21	int
}	O
,	O
{	O
"merge"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
22	int
}	O
,	O
{	O
"threshold"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
23	int
}	O
,	O
{	O
"separate-forks"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
24	int
}	O
,	O
{	O
"other-usracct-file"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
25	int
}	O
,	O
{	O
"separate-times"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
8	int
}	O
,	O
{	O
"sort-ksec"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
10	int
}	O
,	O
{	O
"print-ratio"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
11	int
}	O
,	O
{	O
"sort-tio"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
13	int
}	O
,	O
{	O
"sort-sys-user-div-calls"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
15	int
}	O
,	O
{	O
"sort-avio"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
16	int
}	O
,	O
{	O
"sort-cpu-avmem"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
17	int
}	O
,	O
{	O
"sort-num-calls"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
18	int
}	O
,	O
{	O
"sort-real-time"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
26	int
}	O
,	O
{	O
"ahz"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
27	int
}	O
,	O
{	O
"show-paging"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
28	int
}	O
,	O
{	O
"show-paging-avg"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
29	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
c	struct(array(char),short)
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"ahV"	*(char)
"b"	*(char)
"c"	*(char)
"d"	*(char)
"fi"	*(char)
"l"	*(char)
"j"	*(char)
"k"	*(char)
"mMnrs"	*(char)
"t"	*(char)
"uv:"	*(char)
"D"	*(char)
"K"	*(char)
"pP"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	struct(array(char),short)
==	O
EOF	O
)	O
break	O
;	O
switch	O
(	O
c	struct(array(char),short)
)	O
{	O
case	O
1	int
:	O
debugging_enabled	int
=	O
1	int
;	O
break	O
;	O
case	O
'V'	O
:	O
case	O
2	int
:	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: GNU Accounting Utilities (release %s)\n"	*(char)
,	O
program_name	*(char)
,	O
VERSION_STRING	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
case	O
4	int
:	O
acct_file_name	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'j'	O
:	O
case	O
5	int
:	O
print_seconds	int
=	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
case	O
6	int
:	O
dont_read_summary_files	int
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
7	int
:	O
print_all_records	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
case	O
8	int
:	O
separate_times	int
=	O
1	int
;	O
break	O
;	O
case	O
9	int
:	O
savacct_file_name	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'K'	O
:	O
case	O
10	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_cpu_storage	int
;	O
print_ksec	int
=	O
1	int
;	O
break	O
;	O
case	O
't'	O
:	O
case	O
11	int
:	O
print_ratio	int
=	O
1	int
;	O
break	O
;	O
case	O
'u'	O
:	O
case	O
12	int
:	O
print_users	int
=	O
1	int
;	O
break	O
;	O
case	O
'D'	O
:	O
case	O
13	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_tio	int
;	O
total_io	int
=	O
1	int
;	O
break	O
;	O
case	O
'c'	O
:	O
case	O
14	int
:	O
percentages	int
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
case	O
15	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_sys_plus_user_div_calls	int
;	O
break	O
;	O
case	O
'd'	O
:	O
case	O
16	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_avio	int
;	O
break	O
;	O
case	O
'k'	O
:	O
case	O
17	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_cpu_mem_average	int
;	O
break	O
;	O
case	O
'n'	O
:	O
case	O
18	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_num_calls	int
;	O
break	O
;	O
case	O
'f'	O
:	O
case	O
19	int
:	O
always_yes	int
=	O
1	int
;	O
break	O
;	O
case	O
'm'	O
:	O
case	O
20	int
:	O
user_summary_flag	int
=	O
1	int
;	O
break	O
;	O
case	O
'M'	O
:	O
case	O
30	int
:	O
user_summary_flag	int
=	O
1	int
;	O
group_summary_flag	int
=	O
1	int
;	O
break	O
;	O
case	O
'r'	O
:	O
case	O
21	int
:	O
reverse_sort	int
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
case	O
22	int
:	O
merge_files	int
=	O
1	int
;	O
break	O
;	O
case	O
'v'	O
:	O
case	O
23	int
:	O
junk_threshold	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
junk_threshold	int
<	O
1	int
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: threshold must be one or greater\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
case	O
24	int
:	O
separate_forks	int
=	O
1	int
;	O
break	O
;	O
case	O
25	int
:	O
usracct_file_name	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
26	int
:	O
sort_type	enum(int,int,int,int,int,int,int,int)
=	O
sort_real_time	int
;	O
break	O
;	O
case	O
27	int
:	O
ahz	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
ahz	int
<	O
1	int
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: AHZ must be one or greater\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
break	O
;	O
case	O
'P'	O
:	O
case	O
29	int
:	O
paging_as_avg	int
=	O
1	int
;	O
case	O
'p'	O
:	O
case	O
28	int
:	O
show_paging	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
3	int
:	O
default	O
:	O
give_usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
print_users	int
&&	O
(	O
merge_files	int
||	O
user_summary_flag	int
)	O
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: can't specify `--merge' or `--user-summary' or `--group-summary' with `--print-users'\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
merge_files	int
&&	O
user_summary_flag	int
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: can't specify `--user-summary' or `--group-summary' with `--merge'\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
optind	int
==	O
(	O
argc	int
-	O
1	int
)	O
)	O
{	O
acct_file_name	*(char)
=	O
argv	array(*(char))
[	O
optind	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
optind	int
<	O
argc	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s: extra arguments "	*(char)
,	O
program_name	*(char)
)	O
;	O
while	O
(	O
optind	int
<	O
argc	int
)	O
{	O
printf	(*(char))->(int)
(	O
"`%s'"	*(char)
,	O
argv	array(*(char))
[	O
optind	int
++	O
]	O
)	O
;	O
if	O
(	O
optind	int
<	O
argc	int
)	O
printf	(*(char))->(int)
(	O
", "	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
" -- aborting\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
debugging_enabled	int
)	O
{	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"hzval -> %d\n"	*(char)
,	O
hzval	int
)	O
;	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"getpagesize() -> %d\n"	*(char)
,	O
getpagesize	()->(int)
(	O
)	O
)	O
;	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"system_page_size == %.2f\n"	*(char)
,	O
system_page_size	double
)	O
;	O
}	O
if	O
(	O
!	O
dont_read_summary_files	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
NEED_SAVACCT_INFO	O
)	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
savacct_file_name	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
parse_savacct_entries	(*(char))->(void)
(	O
savacct_file_name	*(char)
)	O
;	O
if	O
(	O
NEED_USRACCT_INFO	O
)	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
usracct_file_name	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
parse_usracct_entries	(*(char))->(void)
(	O
usracct_file_name	*(char)
)	O
;	O
}	O
add_pacct_file	(*(char))->(void)
(	O
acct_file_name	*(char)
)	O
;	O
parse_acct_entries	()->(void)
(	O
)	O
;	O
if	O
(	O
print_users	int
)	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
merge_files	int
)	O
{	O
write_savacct_file	(*(char))->(void)
(	O
savacct_file_name	*(char)
)	O
;	O
write_usracct_file	(*(char))->(void)
(	O
usracct_file_name	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
user_summary_flag	int
)	O
print_user_list	()->(void)
(	O
)	O
;	O
else	O
print_command_list	()->(void)
(	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
give_usage	()->(void)
(	O
void	O
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"\n                Usage: %s [ options ] [ file ]\n                \n                options: [-a"	*(char)
"b"	*(char)
"c"	*(char)
"d"	*(char)
"fi"	*(char)
"l"	*(char)
"j"	*(char)
"k"	*(char)
"mn"	*(char)
"p"	*(char)
"rs"	*(char)
"t"	*(char)
"u"	*(char)
"D"	*(char)
"K"	*(char)
"P"	*(char)
"] [-v <num>] [--version] [--help]\n                [--other-acct-file <name>] [--other-usracct-file <name>]\n                [--print-seconds] [--dont-read-summary-files] [--debug]\n                "	*(char)
" [--separate-times]"	*(char)
" [--other-savacct-file <name>] [--percentages]\n                "	*(char)
" [--print-ratio]"	*(char)
" [--print-users] [--merge] [--user-summary] [--group-summary]\n                [--list-all-names] [--not-interactive] [--threshold <num>]\n                "	*(char)
" [--sort-ksec]"	*(char)
" [--sort-tio]"	*(char)
" [--sort-sys-user-div-calls]"	*(char)
" [--sort-avio]"	*(char)
"\n                "	*(char)
" [--sort-cpu-avmem]"	*(char)
" [--sort-num-calls]"	*(char)
" [--sort-real-time]"	*(char)
" [--ahz hz]\n"	*(char)
"       [--show-paging] [--show-paging-avg]\n"	*(char)
"\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
print_acct_file_locations	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
add_stats	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
accum	*(struct(long,double,double,double,double,double,double,double,double))
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
)	O
{	O
ADDIT	O
(	O
user_time	double
)	O
;	O
ADDIT	O
(	O
sys_time	double
)	O
;	O
ADDIT	O
(	O
elapsed_time	double
)	O
;	O
ADDIT	O
(	O
disk_io	double
)	O
;	O
ADDIT	O
(	O
mem_usage	double
)	O
;	O
ADDIT	O
(	O
minor_faults	double
)	O
;	O
ADDIT	O
(	O
major_faults	double
)	O
;	O
ADDIT	O
(	O
swap_count	double
)	O
;	O
ADDIT	O
(	O
num_calls	long
)	O
;	O
}	O
static	O
void	O
print_stats_raw	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
,	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%10ld"	*(char)
" %10.2fu"	*(char)
" %10.2fs"	*(char)
" %10.2fe"	*(char)
" %10.2fio"	*(char)
" %10.2fmem"	*(char)
"\n"	*(char)
,	O
s	long
->	O
num_calls	long
,	O
s	long
->	O
user_time	double
,	O
s	long
->	O
sys_time	double
,	O
s	long
->	O
elapsed_time	double
,	O
s	long
->	O
disk_io	double
,	O
s	long
->	O
mem_usage	double
)	O
;	O
}	O
static	O
void	O
print_stats_nicely	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
)	O
{	O
if	O
(	O
debugging_enabled	int
)	O
{	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"raw:"	*(char)
)	O
;	O
print_stats_raw	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
if	O
(	O
NC	O
==	O
0	int
)	O
{	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"%s: ERROR -- print_stats_nicely called with num_calls == 0\n"	*(char)
,	O
program_name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%8ld "	*(char)
,	O
NC	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	(*(char))->(int)
(	O
"%7.2f%% "	*(char)
,	O
(	O
S_NC	O
?	O
(	O
DNC	O
/	O
S_DNC	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%10.2fre "	*(char)
,	O
(	O
RE	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	(*(char))->(int)
(	O
"%7.2f%% "	*(char)
,	O
(	O
S_RE	O
?	O
(	O
RE	O
/	O
S_RE	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
if	O
(	O
separate_times	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%10.2fu "	*(char)
,	O
(	O
U	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	(*(char))->(int)
(	O
"%7.2f%% "	*(char)
,	O
(	O
S_U	O
?	O
(	O
U	O
/	O
S_U	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%10.2fs"	*(char)
,	O
(	O
S	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	(*(char))->(int)
(	O
" %7.2f%%"	*(char)
,	O
(	O
S_S	O
?	O
(	O
S	O
/	O
S_S	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"%10.2fcp"	*(char)
,	O
(	O
CP	O
/	O
(	O
print_seconds	int
?	O
DNC	O
:	O
60.0	int
)	O
)	O
)	O
;	O
if	O
(	O
percentages	int
)	O
printf	(*(char))->(int)
(	O
" %7.2f%%"	*(char)
,	O
(	O
S_CP	O
?	O
(	O
CP	O
/	O
S_CP	O
)	O
*	O
100.0	int
:	O
0.0	int
)	O
)	O
;	O
}	O
if	O
(	O
print_ratio	int
)	O
{	O
if	O
(	O
CP	O
==	O
0.0	int
)	O
(	O
void	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"*ignore*"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%8.1f"	*(char)
,	O
(	O
CP	O
?	O
RE	O
/	O
CP	O
:	O
0.0	int
)	O
)	O
;	O
(	O
void	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"re/cp"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
show_paging	int
==	O
0	int
)	O
{	O
if	O
(	O
total_io	int
)	O
printf	(*(char))->(int)
(	O
"%10.0ftio "	*(char)
,	O
IO	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%10.0favio "	*(char)
,	O
IO	O
/	O
DNC	O
)	O
;	O
if	O
(	O
print_ksec	int
)	O
printf	(*(char))->(int)
(	O
"%9.0fk*sec"	*(char)
,	O
(	O
CP	O
?	O
(	O
(	O
K	O
*	O
CP	O
)	O
/	O
DNC	O
)	O
:	O
K	O
)	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%9.0fk"	*(char)
,	O
K	O
/	O
DNC	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
paging_as_avg	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%10.0fmin "	*(char)
,	O
MIN	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%10.0fmaj "	*(char)
,	O
MAJ	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%10.0fswp "	*(char)
,	O
SWP	O
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"%5.0fmin/c "	*(char)
,	O
(	O
NC	O
==	O
0	int
)	O
?	O
0	int
:	O
MIN	O
/	O
NC	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%5.0fmaj/c "	*(char)
,	O
(	O
NC	O
==	O
0	int
)	O
?	O
0	int
:	O
MAJ	O
/	O
NC	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%5.0fswp/c "	*(char)
,	O
(	O
NC	O
==	O
0	int
)	O
?	O
0	int
:	O
SWP	O
/	O
NC	O
)	O
;	O
}	O
}	O
}	O
void	O
write_savacct_file	(*(char))->(void)
(	O
char	O
*	O
filename	*(char)
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
char	O
*	O
s	long
=	O
(	O
char	O
*	O
)	O
alloca	O
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
2	int
)	O
)	O
;	O
(	O
void	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
s	long
,	O
"%s~"	*(char)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file_open	(*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
s	long
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
struct	O
command_key	struct(array(char),short)
*	O
ck	*(struct(array(char),short))
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
struct	O
savacct	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
(	O
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
.	O
c	struct(array(char),short)
)	O
,	O
ck	*(struct(array(char),short))
,	O
sizeof	O
(	O
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
.	O
c	struct(array(char),short)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
(	O
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
.	O
s	long
)	O
,	O
&	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
)	O
,	O
sizeof	O
(	O
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
.	O
s	long
)	O
)	O
;	O
if	O
(	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
,	O
sizeof	O
(	O
sa	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
)	O
,	O
1	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (write_savacct_file): probs writing to file `%s'\n"	*(char)
,	O
program_name	*(char)
,	O
s	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
rename	(*(char),*(char))->(int)
(	O
s	long
,	O
filename	*(char)
)	O
!=	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"sa"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
void	O
write_usracct_file	(*(char))->(void)
(	O
char	O
*	O
filename	*(char)
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
char	O
*	O
s	long
=	O
(	O
char	O
*	O
)	O
alloca	O
(	O
sizeof	O
(	O
char	O
)	O
*	O
(	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
2	int
)	O
)	O
;	O
(	O
void	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
s	long
,	O
"%s~"	*(char)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file_open	(*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
s	long
,	O
1	int
)	O
)	O
==	O
NULL	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
char	O
*	O
name	*(char)
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
*	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
struct	O
usracct	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
ua	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
ua	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
.	O
name	*(char)
,	O
name	*(char)
,	O
NAME_LEN	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
(	O
ua	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
.	O
s	long
)	O
,	O
&	O
(	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
,	O
sizeof	O
(	O
ua	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
.	O
s	long
)	O
)	O
;	O
if	O
(	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
ua	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
,	O
sizeof	O
(	O
ua	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
)	O
,	O
1	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (write_usracct_file): probs writing to file `%s'\n"	*(char)
,	O
program_name	*(char)
,	O
s	long
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
if	O
(	O
rename	(*(char),*(char))->(int)
(	O
s	long
,	O
filename	*(char)
)	O
!=	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"sa"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
static	O
void	O
update_totals	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
)	O
{	O
add_stats	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
stats_totals	struct(long,double,double,double,double,double,double,double,double)
,	O
s	long
)	O
;	O
}	O
void	O
parse_savacct_entries	(*(char))->(void)
(	O
char	O
*	O
filename	*(char)
)	O
{	O
struct	O
savacct	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
if	O
(	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file_open	(*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"             ----------------------------------------------------------------------\n             savacct entries in `%s'\n             ----------------------------------------------------------------------\n             "	*(char)
,	O
filename	*(char)
)	O
;	O
while	O
(	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
,	O
sizeof	O
(	O
struct	O
savacct	struct(struct(array(char),short),struct(long,double,double,double,double,double,double,double,double))
)	O
,	O
1	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
update_command_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)),short)->(void)
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
c	struct(array(char),short)
.	O
comm	array(char)
,	O
&	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
s	long
)	O
,	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
c	struct(array(char),short)
.	O
fork_flag	short
)	O
;	O
update_totals	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
s	long
)	O
)	O
;	O
}	O
(	O
void	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
parse_usracct_entries	(*(char))->(void)
(	O
char	O
*	O
filename	*(char)
)	O
{	O
struct	O
usracct	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
if	O
(	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
file_open	(*(char),int)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"             ----------------------------------------------------------------------\n             usracct entries in `%s'\n             ----------------------------------------------------------------------\n             "	*(char)
,	O
filename	*(char)
)	O
;	O
while	O
(	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
,	O
sizeof	O
(	O
struct	O
usracct	struct(array(char),struct(long,double,double,double,double,double,double,double,double))
)	O
,	O
1	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
update_user_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
name	*(char)
,	O
&	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
s	long
)	O
)	O
;	O
if	O
(	O
user_summary_flag	int
)	O
update_totals	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
.	O
s	long
)	O
)	O
;	O
}	O
(	O
void	O
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
parse_acct_entries	()->(void)
(	O
void	O
)	O
{	O
struct	O
acct	(*(char))->(int)
*	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
;	O
if	O
(	O
debugging_enabled	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"             ----------------------------------------------------------------------\n             acct entries\n             ----------------------------------------------------------------------\n             "	*(char)
)	O
;	O
while	O
(	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
=	O
pacct_get_entry	()->(*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char)))
(	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
double	O
ut	double
=	O
comp_t_2_double	(short)->(double)
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_utime	short
)	O
/	O
CURR_AHZ	O
;	O
double	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
=	O
comp_t_2_double	(short)->(double)
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_stime	short
)	O
/	O
CURR_AHZ	O
;	O
double	O
et	double
=	O
ACETIME_2_DOUBLE	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_etime	float
)	O
/	O
CURR_AHZ	O
;	O
double	O
di	double
=	O
comp_t_2_double	(short)->(double)
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_io	short
)	O
/	O
CURR_AHZ	O
;	O
double	O
mu	double
=	O
PAGES_TO_KB	O
(	O
ACMEM_2_DOUBLE	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_mem	short
)	O
)	O
;	O
double	O
minflt	double
=	O
ACMINFLT_2_DOUBLE	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_minflt	short
)	O
;	O
double	O
majflt	double
=	O
ACMAJFLT_2_DOUBLE	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_majflt	short
)	O
;	O
double	O
swaps	double
=	O
ACSWAPS_2_DOUBLE	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_swaps	short
)	O
;	O
if	O
(	O
print_users	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%-8.8s"	*(char)
" %6.2f cpu"	*(char)
" %8.0fk mem"	*(char)
" %6.0f io"	*(char)
" %-*.*s%s\n"	*(char)
,	O
(	O
!	O
group_summary_flag	int
)	O
?	O
uid_name	(int)->(*(char))
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_uid	int
)	O
:	O
gid_name	(int)->(*(char))
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_gid	int
)	O
,	O
ut	double
+	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
mu	double
,	O
di	double
,	O
COMM_LEN	O
,	O
COMM_LEN	O
,	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_comm	array(char)
,	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_flag	char
&	O
AFORK	int
)	O
?	O
"*"	*(char)
:	O
""	*(char)
)	O
;	O
}	O
else	O
{	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
s	long
;	O
s	long
.	O
num_calls	long
=	O
1	int
;	O
s	long
.	O
user_time	double
=	O
ut	double
;	O
s	long
.	O
sys_time	double
=	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
s	long
.	O
elapsed_time	double
=	O
et	double
;	O
s	long
.	O
disk_io	double
=	O
di	double
;	O
s	long
.	O
mem_usage	double
=	O
mu	double
;	O
s	long
.	O
minor_faults	double
=	O
minflt	double
;	O
s	long
.	O
major_faults	double
=	O
majflt	double
;	O
s	long
.	O
swap_count	double
=	O
swaps	double
;	O
if	O
(	O
NEED_SAVACCT_INFO	O
)	O
update_command_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)),short)->(void)
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_comm	array(char)
,	O
&	O
s	long
,	O
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_flag	char
&	O
AFORK	int
)	O
)	O
;	O
if	O
(	O
NEED_USRACCT_INFO	O
)	O
update_user_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
(	O
!	O
group_summary_flag	int
)	O
?	O
uid_name	(int)->(*(char))
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_uid	int
)	O
:	O
gid_name	(int)->(*(char))
(	O
rec	*(struct(char,char,short,int,int,int,int,int,int,float,short,short,short,short,short,short,short,short,array(char),short,short,short,short,short,char,char))
->	O
ac_gid	int
)	O
,	O
&	O
s	long
)	O
;	O
update_totals	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
s	long
)	O
;	O
}	O
}	O
}	O
void	O
update_command_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)),short)->(void)
(	O
char	O
*	O
comm	array(char)
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
,	O
short	O
fork_flag	short
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
command_key	struct(array(char),short)
ck	*(struct(array(char),short))
;	O
if	O
(	O
debugging_enabled	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"+:%-*.*s%s "	*(char)
,	O
COMM_LEN	O
,	O
COMM_LEN	O
,	O
comm	array(char)
,	O
(	O
fork_flag	short
)	O
?	O
"*"	*(char)
:	O
" "	*(char)
)	O
;	O
print_stats_raw	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ck	*(struct(array(char),short))
,	O
0	int
,	O
sizeof	O
(	O
ck	*(struct(array(char),short))
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
ck	*(struct(array(char),short))
.	O
comm	array(char)
,	O
comm	array(char)
,	O
COMM_LEN	O
)	O
;	O
ck	*(struct(array(char),short))
.	O
fork_flag	short
=	O
fork_flag	short
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ck	*(struct(array(char),short))
,	O
(	O
unsigned	O
int	O
)	O
sizeof	O
(	O
ck	*(struct(array(char),short))
)	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
==	O
NULL	O
)	O
{	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
,	O
0	int
,	O
sizeof	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
)	O
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ck	*(struct(array(char),short))
,	O
sizeof	O
(	O
ck	*(struct(array(char),short))
)	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
,	O
sizeof	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
)	O
)	O
;	O
}	O
{	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
add_stats	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
)	O
,	O
s	long
)	O
;	O
}	O
}	O
void	O
update_user_list	(*(char),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
char	O
*	O
name	*(char)
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
)	O
{	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
if	O
(	O
debugging_enabled	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"+u:%*s "	*(char)
,	O
NAME_LEN	O
,	O
name	*(char)
)	O
;	O
print_stats_raw	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_find	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
name	*(char)
,	O
(	O
unsigned	O
int	O
)	O
NAME_LEN	O
)	O
;	O
if	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
==	O
NULL	O
)	O
{	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
,	O
0	int
,	O
sizeof	O
(	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
)	O
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_create	(*(struct(long,long,long,*(*(struct`)),int)),*(void),int)->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
name	*(char)
,	O
NAME_LEN	O
)	O
;	O
hashtab_set_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(void),int)->(void)
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
&	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
,	O
sizeof	O
(	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
)	O
)	O
;	O
}	O
{	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
*	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
add_stats	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
,	O
s	long
)	O
;	O
}	O
}	O
int	O
compare_stats_entry	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(int)
(	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
,	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
)	O
{	O
double	O
v1	double
=	O
0	int
,	O
v2	double
=	O
0	int
;	O
switch	O
(	O
sort_type	enum(int,int,int,int,int,int,int,int)
)	O
{	O
case	O
sort_sys_plus_user	int
:	O
v1	double
=	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
;	O
v2	double
=	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
;	O
break	O
;	O
case	O
sort_sys_plus_user_div_calls	int
:	O
v1	double
=	O
(	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
)	O
/	O
(	O
double	O
)	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
v2	double
=	O
(	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
)	O
/	O
(	O
double	O
)	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
break	O
;	O
case	O
sort_avio	int
:	O
v1	double
=	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
disk_io	double
/	O
(	O
double	O
)	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
v2	double
=	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
disk_io	double
/	O
(	O
double	O
)	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
break	O
;	O
case	O
sort_tio	int
:	O
v1	double
=	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
disk_io	double
;	O
v2	double
=	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
disk_io	double
;	O
break	O
;	O
case	O
sort_cpu_mem_average	int
:	O
v1	double
=	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
mem_usage	double
/	O
(	O
double	O
)	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
v2	double
=	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
mem_usage	double
/	O
(	O
double	O
)	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
break	O
;	O
case	O
sort_cpu_storage	int
:	O
v1	double
=	O
(	O
(	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
)	O
?	O
(	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
)	O
*	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
mem_usage	double
:	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
mem_usage	double
)	O
;	O
v2	double
=	O
(	O
(	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
)	O
?	O
(	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
user_time	double
+	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
sys_time	double
)	O
*	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
mem_usage	double
:	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
mem_usage	double
)	O
;	O
break	O
;	O
case	O
sort_real_time	int
:	O
if	O
(	O
print_seconds	int
)	O
{	O
v1	double
=	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
elapsed_time	double
/	O
(	O
double	O
)	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
v2	double
=	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
elapsed_time	double
/	O
(	O
double	O
)	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
}	O
else	O
{	O
v1	double
=	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
elapsed_time	double
;	O
v2	double
=	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
elapsed_time	double
;	O
}	O
break	O
;	O
case	O
sort_num_calls	int
:	O
v1	double
=	O
(	O
double	O
)	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
v2	double
=	O
(	O
double	O
)	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
->	O
num_calls	long
;	O
break	O
;	O
default	O
:	O
fatal	(*(char))->(void)
(	O
"unknown sort type"	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
v1	double
<	O
v2	double
)	O
return	O
(	O
(	O
reverse_sort	int
)	O
?	O
-	O
1	int
:	O
1	int
)	O
;	O
if	O
(	O
v1	double
>	O
v2	double
)	O
return	O
(	O
(	O
reverse_sort	int
)	O
?	O
1	int
:	O
-	O
1	int
)	O
;	O
compareit	O
(	O
num_calls	long
)	O
;	O
compareit	O
(	O
user_time	double
)	O
;	O
compareit	O
(	O
sys_time	double
)	O
;	O
compareit	O
(	O
elapsed_time	double
)	O
;	O
compareit	O
(	O
disk_io	double
)	O
;	O
compareit	O
(	O
mem_usage	double
)	O
;	O
return	O
0	int
;	O
}	O
int	O
compare_user_entry	(*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))),*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
,	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
)	O
{	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
*	O
ud1	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
*	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
)	O
;	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
*	O
ud2	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
*	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
)	O
;	O
return	O
compare_stats_entry	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(int)
(	O
&	O
(	O
ud1	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
,	O
&	O
(	O
ud2	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
)	O
;	O
}	O
int	O
compare_sum_entry	(*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))),*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
,	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
)	O
{	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
ud1	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
*	O
s1	*(struct(long,double,double,double,double,double,double,double,double))
)	O
;	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
ud2	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
*	O
s2	*(struct(long,double,double,double,double,double,double,double,double))
)	O
;	O
return	O
compare_stats_entry	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(int)
(	O
&	O
(	O
ud1	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
,	O
&	O
(	O
ud2	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
)	O
;	O
}	O
void	O
print_user_list	()->(void)
(	O
void	O
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
,	O
*	O
*	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
,	O
user_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
;	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
user_totals_ud	struct(struct(long,double,double,double,double,double,double,double,double))
;	O
long	O
num_users	long
,	O
which	int
,	O
temp	long
;	O
char	O
*	O
const	O
empty_string	*(char)
=	O
""	*(char)
;	O
user_totals_ud	struct(struct(long,double,double,double,double,double,double,double,double))
.	O
s	long
=	O
stats_totals	struct(long,double,double,double,double,double,double,double,double)
;	O
user_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
key	*(void)
=	O
empty_string	*(char)
;	O
user_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
data	*(void)
=	O
&	O
user_totals_ud	struct(struct(long,double,double,double,double,double,double,double,double))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
,	O
num_users	long
=	O
0	int
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
,	O
num_users	long
++	O
)	O
;	O
num_users	long
++	O
;	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
=	O
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
)	O
*	O
num_users	long
)	O
;	O
which	int
=	O
0	int
;	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
&	O
user_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
user_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
}	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
+	O
1	int
,	O
(	O
size_t	long
)	O
num_users	long
-	O
1	int
,	O
sizeof	O
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
)	O
,	O
(	O
int	O
(	O
*	O
)	O
(	O
)	O
)	O
compare_user_entry	(*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))),*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))))->(int)
)	O
;	O
for	O
(	O
temp	long
=	O
0	int
;	O
temp	long
<	O
num_users	long
;	O
temp	long
++	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
struct	O
stats	struct(long,double,double,double,double,double,double,double,double)
*	O
s	long
;	O
struct	O
user_data	struct(struct(long,double,double,double,double,double,double,double,double))
*	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
temp	long
]	O
;	O
name	*(char)
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
s	long
=	O
&	O
(	O
ud	*(struct(struct(long,double,double,double,double,double,double,double,double)))
->	O
s	long
)	O
;	O
if	O
(	O
debugging_enabled	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stddebug	O
,	O
"t:%-10.10s "	*(char)
,	O
name	*(char)
)	O
;	O
print_stats_raw	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
s	long
,	O
stddebug	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%-*.*s "	*(char)
,	O
NAME_LEN	O
,	O
NAME_LEN	O
,	O
name	*(char)
)	O
;	O
print_stats_nicely	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
s	long
)	O
;	O
(	O
void	O
)	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
)	O
;	O
}	O
int	O
non_printable	(*(char),int)->(int)
(	O
char	O
*	O
s	long
,	O
int	O
len	int
)	O
{	O
int	O
a	int
;	O
for	O
(	O
a	int
=	O
0	int
;	O
(	O
a	int
<	O
len	int
)	O
&&	O
(	O
s	long
[	O
a	int
]	O
!=	O
'\0'	O
)	O
;	O
a	int
++	O
)	O
{	O
if	O
(	O
!	O
isprint	(int)->(int)
(	O
s	long
[	O
a	int
]	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
ask_if_junkable	(*(char),int)->(int)
(	O
char	O
*	O
s	long
,	O
int	O
len	int
)	O
{	O
char	O
line	array(char)
[	O
1000	int
]	O
;	O
char	O
word	array(char)
[	O
1000	int
]	O
;	O
if	O
(	O
always_yes	int
)	O
return	O
1	int
;	O
(	O
void	O
)	O
printf	(*(char))->(int)
(	O
"Junk `%*s'? "	*(char)
,	O
len	int
,	O
s	long
)	O
;	O
(	O
void	O
)	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
line	array(char)
,	O
1000	int
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
&&	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
line	array(char)
,	O
" %s "	*(char)
,	O
word	array(char)
)	O
>	O
0	int
)	O
&&	O
(	O
(	O
word	array(char)
[	O
0	int
]	O
==	O
'y'	O
)	O
||	O
(	O
word	array(char)
[	O
0	int
]	O
==	O
'Y'	O
)	O
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
void	O
print_command_list	()->(void)
(	O
void	O
)	O
{	O
struct	O
hashtab_order	struct(int,*(struct),*(struct))
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
,	O
*	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
sum_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
,	O
other_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
,	O
junk_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
;	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
sum_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
,	O
other_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
,	O
junk_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
;	O
struct	O
command_key	struct(array(char),short)
sum_totals_ck	struct(array(char),short)
,	O
other_totals_ck	struct(array(char),short)
,	O
junk_totals_ck	struct(array(char),short)
;	O
long	O
num_commands	long
,	O
temp	long
,	O
which	int
;	O
int	O
num_in_other_category	int
,	O
num_in_junk_category	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
sum_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
,	O
0	int
,	O
sizeof	O
(	O
sum_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
sum_totals_ck	struct(array(char),short)
,	O
0	int
,	O
sizeof	O
(	O
sum_totals_ck	struct(array(char),short)
)	O
)	O
;	O
sum_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
.	O
s	long
=	O
stats_totals	struct(long,double,double,double,double,double,double,double,double)
;	O
sum_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
key	*(void)
=	O
&	O
sum_totals_ck	struct(array(char),short)
;	O
sum_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
data	*(void)
=	O
&	O
sum_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
;	O
(	O
void	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
other_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
,	O
0	int
,	O
sizeof	O
(	O
other_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
)	O
)	O
;	O
(	O
void	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
other_totals_ck	struct(array(char),short)
,	O
0	int
,	O
sizeof	O
(	O
other_totals_ck	struct(array(char),short)
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
other_totals_ck	struct(array(char),short)
.	O
comm	array(char)
,	O
"***other"	*(char)
)	O
;	O
other_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
key	*(void)
=	O
&	O
other_totals_ck	struct(array(char),short)
;	O
other_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
data	*(void)
=	O
&	O
other_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
;	O
(	O
void	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
junk_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
,	O
0	int
,	O
sizeof	O
(	O
junk_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
)	O
)	O
;	O
(	O
void	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
junk_totals_ck	struct(array(char),short)
,	O
0	int
,	O
sizeof	O
(	O
junk_totals_ck	struct(array(char),short)
)	O
)	O
;	O
(	O
void	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
junk_totals_ck	struct(array(char),short)
.	O
comm	array(char)
,	O
"**junk**"	*(char)
)	O
;	O
junk_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
key	*(void)
=	O
&	O
junk_totals_ck	struct(array(char),short)
;	O
junk_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
.	O
data	*(void)
=	O
&	O
junk_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
,	O
num_commands	long
=	O
0	int
,	O
num_in_other_category	int
=	O
0	int
,	O
num_in_junk_category	int
=	O
0	int
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
if	O
(	O
print_all_records	int
)	O
num_commands	long
++	O
;	O
else	O
{	O
struct	O
command_key	struct(array(char),short)
*	O
ck	*(struct(array(char),short))
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
junk_threshold	int
&&	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
.	O
num_calls	long
<=	O
junk_threshold	int
)	O
&&	O
ask_if_junkable	(*(char),int)->(int)
(	O
ck	*(struct(array(char),short))
->	O
comm	array(char)
,	O
COMM_LEN	O
)	O
)	O
{	O
num_in_junk_category	int
++	O
;	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
junked	short
=	O
1	int
;	O
add_stats	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
junk_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
.	O
s	long
)	O
,	O
&	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
)	O
)	O
;	O
junk_totals_ck	struct(array(char),short)
.	O
fork_flag	short
|=	O
ck	*(struct(array(char),short))
->	O
fork_flag	short
;	O
}	O
else	O
if	O
(	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
.	O
num_calls	long
==	O
1	int
)	O
||	O
non_printable	(*(char),int)->(int)
(	O
ck	*(struct(array(char),short))
->	O
comm	array(char)
,	O
COMM_LEN	O
)	O
)	O
{	O
num_in_other_category	int
++	O
;	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
junked	short
=	O
1	int
;	O
add_stats	(*(struct(long,double,double,double,double,double,double,double,double)),*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
other_totals_cd	struct(struct(long,double,double,double,double,double,double,double,double),short)
.	O
s	long
)	O
,	O
&	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
)	O
)	O
;	O
other_totals_ck	struct(array(char),short)
.	O
fork_flag	short
|=	O
ck	*(struct(array(char),short))
->	O
fork_flag	short
;	O
}	O
else	O
num_commands	long
++	O
;	O
}	O
}	O
if	O
(	O
num_commands	long
==	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
num_commands	long
++	O
;	O
if	O
(	O
num_in_other_category	int
)	O
num_commands	long
++	O
;	O
if	O
(	O
num_in_junk_category	int
)	O
num_commands	long
++	O
;	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
=	O
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
hashtab_elem	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct))),*(struct))
*	O
)	O
*	O
num_commands	long
)	O
;	O
which	int
=	O
0	int
;	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
&	O
sum_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
;	O
if	O
(	O
num_in_other_category	int
)	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
&	O
other_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
;	O
if	O
(	O
num_in_junk_category	int
)	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
&	O
junk_totals	struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))),*(struct(long,long,long,*(*(struct`)),int)))
;	O
for	O
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_first	(*(struct(long,long,long,*(*(struct`)),int)),*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
command_table	*(struct(long,long,long,*(*(struct(*`,int,int,*`,*`,*`,*`))),int))
,	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
!=	O
NULL	O
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
hashtab_next	(*(struct(int,*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
(	O
&	O
ho	*(struct(int,*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
)	O
{	O
if	O
(	O
print_all_records	int
)	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
else	O
{	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
if	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
junked	short
)	O
{	O
}	O
else	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
which	int
++	O
]	O
=	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
;	O
}	O
}	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
+	O
1	int
,	O
(	O
size_t	long
)	O
num_commands	long
-	O
1	int
,	O
sizeof	O
(	O
struct	O
hashtab_entry	O
*	O
)	O
,	O
(	O
int	O
(	O
*	O
)	O
(	O
)	O
)	O
compare_sum_entry	(*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))),*(*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`)))))->(int)
)	O
;	O
for	O
(	O
temp	long
=	O
0	int
;	O
temp	long
<	O
num_commands	long
;	O
temp	long
++	O
)	O
{	O
struct	O
command_data	struct(struct(long,double,double,double,double,double,double,double,double),short)
*	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
;	O
struct	O
command_key	struct(array(char),short)
*	O
ck	*(struct(array(char),short))
;	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
=	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
[	O
temp	long
]	O
;	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
=	O
hashtab_get_value	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
ck	*(struct(array(char),short))
=	O
hashtab_get_key	(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))->(*(void))
(	O
he	*(struct(*(void),int,int,*(void),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(*(void),int,int,*(void),*(struct`),*(struct`),*(struct`))),*(struct(long,long,long,*(*`),int))))
)	O
;	O
print_stats_nicely	(*(struct(long,double,double,double,double,double,double,double,double)))->(void)
(	O
&	O
(	O
cd	*(struct(struct(long,double,double,double,double,double,double,double,double),short))
->	O
s	long
)	O
)	O
;	O
if	O
(	O
ck	*(struct(array(char),short))
->	O
comm	array(char)
[	O
0	int
]	O
!=	O
'\0'	O
)	O
{	O
printf	(*(char))->(int)
(	O
"   %-.*s"	*(char)
,	O
COMM_LEN	O
,	O
ck	*(struct(array(char),short))
->	O
comm	array(char)
)	O
;	O
if	O
(	O
ck	*(struct(array(char),short))
->	O
fork_flag	short
)	O
(	O
void	O
)	O
putchar	(int)->(int)
(	O
'*'	O
)	O
;	O
}	O
(	O
void	O
)	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
entry_array	*(*(struct(*(void),int,int,*(void),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`)),*(struct(long,long,long,*`,int)))))
)	O
;	O
}	O
