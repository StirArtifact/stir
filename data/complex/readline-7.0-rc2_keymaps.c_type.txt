Keymap	*(struct(char,*((int,int)->(int))))
rl_make_bare_keymap	()->(*(struct(char,*((int,int)->(int)))))
(	O
)	O
{	O
register	O
int	O
i	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
keymap	*(struct(char,*((int,int)->(int))))
;	O
keymap	*(struct(char,*((int,int)->(int))))
=	O
(	O
Keymap	*(struct(char,*((int,int)->(int))))
)	O
xmalloc	(long)->(*(void))
(	O
KEYMAP_SIZE	int
*	O
sizeof	O
(	O
KEYMAP_ENTRY	struct(char,*((int,int)->(int)))
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
KEYMAP_SIZE	int
;	O
i	int
++	O
)	O
{	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
type	char
=	O
ISFUNC	int
;	O
keymap	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
=	O
(	O
rl_command_func_t	(int,int)->(int)
*	O
)	O
NULL	O
;	O
}	O
return	O
(	O
keymap	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
Keymap	*(struct(char,*((int,int)->(int))))
rl_copy_keymap	(*(struct(char,*((int,int)->(int)))))->(*(struct(char,*((int,int)->(int)))))
(	O
map	*(struct(char,*((int,int)->(int))))
)	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
{	O
register	O
int	O
i	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
temp	*(struct(char,*((int,int)->(int))))
;	O
temp	*(struct(char,*((int,int)->(int))))
=	O
rl_make_bare_keymap	()->(*(struct(char,*((int,int)->(int)))))
(	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
KEYMAP_SIZE	int
;	O
i	int
++	O
)	O
{	O
temp	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
type	char
=	O
map	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
type	char
;	O
temp	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
=	O
map	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
;	O
}	O
return	O
(	O
temp	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
Keymap	*(struct(char,*((int,int)->(int))))
rl_make_keymap	()->(*(struct(char,*((int,int)->(int)))))
(	O
)	O
{	O
register	O
int	O
i	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
newmap	*(struct(char,*((int,int)->(int))))
;	O
newmap	*(struct(char,*((int,int)->(int))))
=	O
rl_make_bare_keymap	()->(*(struct(char,*((int,int)->(int)))))
(	O
)	O
;	O
for	O
(	O
i	int
=	O
' '	O
;	O
i	int
<	O
127	int
;	O
i	int
++	O
)	O
newmap	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
=	O
rl_insert	(int,int)->(int)
;	O
newmap	*(struct(char,*((int,int)->(int))))
[	O
TAB	char
]	O
.	O
function	*((int,int)->(int))
=	O
rl_insert	(int,int)->(int)
;	O
newmap	*(struct(char,*((int,int)->(int))))
[	O
RUBOUT	int
]	O
.	O
function	*((int,int)->(int))
=	O
rl_rubout	(int,int)->(int)
;	O
newmap	*(struct(char,*((int,int)->(int))))
[	O
CTRL	O
(	O
'H'	O
)	O
]	O
.	O
function	*((int,int)->(int))
=	O
rl_rubout	(int,int)->(int)
;	O
for	O
(	O
i	int
=	O
128	int
;	O
i	int
<	O
256	int
;	O
i	int
++	O
)	O
newmap	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
=	O
rl_insert	(int,int)->(int)
;	O
return	O
(	O
newmap	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
void	O
rl_discard_keymap	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
map	*(struct(char,*((int,int)->(int))))
)	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
{	O
int	O
i	int
;	O
if	O
(	O
map	*(struct(char,*((int,int)->(int))))
==	O
0	int
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
KEYMAP_SIZE	int
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
map	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
type	char
)	O
{	O
case	O
ISFUNC	int
:	O
break	O
;	O
case	O
ISKMAP	int
:	O
rl_discard_keymap	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
(	O
Keymap	*(struct(char,*((int,int)->(int))))
)	O
map	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
)	O
;	O
xfree	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
map	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
)	O
;	O
break	O
;	O
case	O
ISMACR	int
:	O
xfree	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
map	*(struct(char,*((int,int)->(int))))
[	O
i	int
]	O
.	O
function	*((int,int)->(int))
)	O
;	O
break	O
;	O
}	O
}	O
}	O
void	O
rl_free_keymap	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
map	*(struct(char,*((int,int)->(int))))
)	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
{	O
rl_discard_keymap	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
map	*(struct(char,*((int,int)->(int))))
)	O
;	O
xfree	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
map	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
