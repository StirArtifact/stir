static	O
void	O
uint32_to_bytes	(*(char),int)->(void)
(	O
unsigned	O
char	O
*	O
bytes	*(char)
,	O
uint32_t	int
u	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
4	int
;	O
i	int
++	O
)	O
{	O
bytes	*(char)
[	O
i	int
]	O
=	O
u	int
&	O
0xff	int
;	O
u	int
>>=	O
8	int
;	O
}	O
}	O
int	O
grecs_inaddr_to_bytes	(int,*(void),*(char))->(int)
(	O
int	O
af	int
,	O
void	O
*	O
buf	*(char)
,	O
unsigned	O
char	O
*	O
bytes	*(char)
)	O
{	O
uint32_t	int
u	int
;	O
switch	O
(	O
af	int
)	O
{	O
case	O
AF_INET	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
u	int
,	O
buf	*(char)
,	O
sizeof	O
u	int
)	O
;	O
uint32_to_bytes	(*(char),int)->(void)
(	O
bytes	*(char)
,	O
u	int
)	O
;	O
return	O
4	int
;	O
case	O
AF_INET6	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
bytes	*(char)
,	O
buf	*(char)
,	O
16	int
)	O
;	O
return	O
16	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_sockaddr_to_bytes	(*(char),*(struct(short,array(char))))->(int)
(	O
unsigned	O
char	O
*	O
bytes	*(char)
,	O
struct	O
sockaddr	struct(short,array(char))
const	O
*	O
sa	*(struct(short,array(char)))
)	O
{	O
switch	O
(	O
sa	*(struct(short,array(char)))
->	O
sa_family	short
)	O
{	O
case	O
AF_INET	O
:	O
uint32_to_bytes	(*(char),int)->(void)
(	O
bytes	*(char)
,	O
(	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
)	O
sa	*(struct(short,array(char)))
)	O
->	O
sin_addr	struct(int)
.	O
s_addr	int
)	O
;	O
return	O
4	int
;	O
case	O
AF_INET6	O
:	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
bytes	*(char)
,	O
&	O
(	O
(	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
*	O
)	O
sa	*(struct(short,array(char)))
)	O
->	O
sin6_addr	struct(union(array(char),array(short),array(int)))
,	O
16	int
)	O
;	O
return	O
16	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_sockaddr_to_cidr	(*(struct(int,int,array(char),array(char))),*(struct(short,array(char))))->(int)
(	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
*	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
const	O
struct	O
sockaddr	struct(short,array(char))
*	O
sa	*(struct(short,array(char)))
)	O
{	O
unsigned	O
char	O
address	array(char)
[	O
GRECS_INADDR_BYTES	int
]	O
;	O
int	O
len	long
;	O
int	O
i	int
;	O
len	long
=	O
grecs_sockaddr_to_bytes	(*(char),*(struct(short,array(char))))->(int)
(	O
address	array(char)
,	O
sa	*(struct(short,array(char)))
)	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
-	O
1	int
;	O
cidr	*(struct(int,int,array(char),array(char)))
->	O
family	int
=	O
sa	*(struct(short,array(char)))
->	O
sa_family	short
;	O
cidr	*(struct(int,int,array(char),array(char)))
->	O
len	long
=	O
len	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cidr	*(struct(int,int,array(char),array(char)))
->	O
address	array(char)
,	O
address	array(char)
,	O
sizeof	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
->	O
address	array(char)
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
GRECS_INADDR_BYTES	int
;	O
i	int
++	O
)	O
cidr	*(struct(int,int,array(char),array(char)))
->	O
netmask	array(char)
[	O
i	int
]	O
=	O
0xff	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
masklen_to_netmask	(*(char),long,long)->(void)
(	O
unsigned	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
masklen	long
)	O
{	O
int	O
i	int
,	O
cnt	int
;	O
cnt	int
=	O
masklen	long
/	O
8	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cnt	int
;	O
i	int
++	O
)	O
buf	*(char)
[	O
i	int
]	O
=	O
0xff	int
;	O
if	O
(	O
i	int
==	O
GRECS_INADDR_BYTES	int
)	O
return	O
;	O
cnt	int
=	O
8	int
-	O
masklen	long
%	O
8	int
;	O
buf	*(char)
[	O
i	int
++	O
]	O
=	O
(	O
0xff	int
>>	O
cnt	int
)	O
<<	O
cnt	int
;	O
for	O
(	O
;	O
i	int
<	O
GRECS_INADDR_BYTES	int
;	O
i	int
++	O
)	O
buf	*(char)
[	O
i	int
]	O
=	O
0	int
;	O
}	O
int	O
grecs_str_to_cidr	(*(struct(int,int,array(char),array(char))),*(char),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(int)
(	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
*	O
pcidr	*(struct(int,int,array(char),array(char)))
,	O
const	O
char	O
*	O
str	*(char)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
const	O
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
{	O
int	O
rc	int
;	O
char	O
ipbuf	array(char)
[	O
41	int
]	O
;	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
cidr	*(struct(int,int,array(char),array(char)))
;	O
char	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
;	O
size_t	long
len	long
;	O
union	O
{	O
struct	O
in_addr	struct(int)
in	struct(int)
;	O
struct	O
in6_addr	struct(union(array(char),array(short),array(int)))
in6	struct(union(array(char),array(short),array(int)))
;	O
}	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
)	O
len	long
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
-	O
str	*(char)
;	O
else	O
len	long
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
len	long
>	O
sizeof	O
(	O
ipbuf	array(char)
)	O
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"invalid network mask: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ipbuf	array(char)
,	O
str	*(char)
,	O
len	long
)	O
;	O
ipbuf	array(char)
[	O
len	long
]	O
=	O
0	int
;	O
if	O
(	O
grecs_str_is_ipv4	(*(char))->(int)
(	O
ipbuf	array(char)
)	O
)	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
=	O
AF_INET	O
;	O
else	O
if	O
(	O
grecs_str_is_ipv6	(*(char))->(int)
(	O
ipbuf	array(char)
)	O
)	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
=	O
AF_INET6	O
;	O
else	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"unrecognized address family: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
rc	int
=	O
inet_pton	(int,*(char),*(void))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
ipbuf	array(char)
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"unrecognized address family: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
1	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"invalid network address: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	long
=	O
grecs_inaddr_to_bytes	(int,*(void),*(char))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
address	array(char)
)	O
;	O
if	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	long
==	O
0	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"unrecognized address family: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
)	O
{	O
char	O
*	O
end	struct(*(char),int,int)
;	O
unsigned	O
long	O
masklen	long
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
++	O
;	O
masklen	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
,	O
&	O
end	struct(*(char),int,int)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
end	struct(*(char),int,int)
==	O
0	int
)	O
masklen_to_netmask	(*(char),long,long)->(void)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
netmask	array(char)
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	long
,	O
masklen	long
)	O
;	O
else	O
if	O
(	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
==	O
AF_INET	O
&&	O
grecs_str_is_ipv4	(*(char))->(int)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
)	O
)	O
||	O
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
==	O
AF_INET6	O
&&	O
grecs_str_is_ipv6	(*(char))->(int)
(	O
ipbuf	array(char)
)	O
)	O
)	O
{	O
rc	int
=	O
inet_pton	(int,*(char),*(void))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
)	O
;	O
if	O
(	O
rc	int
!=	O
1	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"invalid network mask: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
grecs_inaddr_to_bytes	(int,*(void),*(char))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
family	int
,	O
&	O
inaddr	union(struct(int),struct(union(array(char),array(short),array(int))))
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
netmask	array(char)
)	O
;	O
}	O
else	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
_	O
(	O
"invalid network mask: %s"	*(char)
)	O
,	O
str	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
masklen_to_netmask	(*(char),long,long)->(void)
(	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
netmask	array(char)
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	long
,	O
cidr	*(struct(int,int,array(char),array(char)))
.	O
len	long
*	O
8	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
pcidr	*(struct(int,int,array(char),array(char)))
,	O
&	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
sizeof	O
(	O
*	O
pcidr	*(struct(int,int,array(char),array(char)))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grecs_cidr_match	(*(struct(int,int,array(char),array(char))),*(struct(int,int,array(char),array(char))))->(int)
(	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
int	O
i	int
;	O
if	O
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
family	int
!=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
family	int
)	O
return	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
len	long
;	O
i	int
++	O
)	O
{	O
if	O
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
address	array(char)
[	O
i	int
]	O
!=	O
(	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
address	array(char)
[	O
i	int
]	O
&	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
netmask	array(char)
[	O
i	int
]	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
grecs_sockadd_cidr_match	(*(struct(short,array(char))),*(struct(int,int,array(char),array(char))))->(int)
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
sa	*(struct(short,array(char)))
,	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
*	O
cidr	*(struct(int,int,array(char),array(char)))
)	O
{	O
struct	O
grecs_cidr	struct(int,int,array(char),array(char))
t	struct(int,int,array(char),array(char))
;	O
if	O
(	O
grecs_sockaddr_to_cidr	(*(struct(int,int,array(char),array(char))),*(struct(short,array(char))))->(int)
(	O
&	O
t	struct(int,int,array(char),array(char))
,	O
sa	*(struct(short,array(char)))
)	O
)	O
return	O
1	int
;	O
return	O
grecs_cidr_match	(*(struct(int,int,array(char),array(char))),*(struct(int,int,array(char),array(char))))->(int)
(	O
cidr	*(struct(int,int,array(char),array(char)))
,	O
&	O
t	struct(int,int,array(char),array(char))
)	O
;	O
}	O
