int	O
mu_sieve_registry_require	(*(struct),*(char),enum(int,int,int))->(int)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
enum	O
mu_sieve_record	enum(int,int,int)
type	int
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
reg	long
;	O
reg	long
=	O
mu_sieve_registry_lookup	(*(struct),*(char),enum(int,int,int))->(*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*`,*`,*`,*`),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))))
(	O
mach	*(struct)
,	O
name	*(char)
,	O
type	int
)	O
;	O
if	O
(	O
!	O
reg	long
)	O
{	O
void	O
*	O
handle	*(void)
=	O
mu_sieve_load_ext	(*(struct),*(char))->(*(void))
(	O
mach	*(struct)
,	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
handle	*(void)
)	O
return	O
1	int
;	O
reg	long
=	O
mu_sieve_registry_lookup	(*(struct),*(char),enum(int,int,int))->(*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*`,*`,*`,*`),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))))
(	O
mach	*(struct)
,	O
name	*(char)
,	O
type	int
)	O
;	O
if	O
(	O
!	O
reg	long
)	O
return	O
1	int
;	O
reg	long
->	O
handle	*(void)
=	O
handle	*(void)
;	O
}	O
reg	long
->	O
required	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
void	O
regunload	(*(void))->(void)
(	O
void	O
*	O
data	*(void)
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
reg	long
=	O
data	*(void)
;	O
mu_sieve_unload_ext	(*(void))->(void)
(	O
reg	long
->	O
handle	*(void)
)	O
;	O
}	O
static	O
int	O
regcmp	(*(void),*(void))->(int)
(	O
void	O
const	O
*	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
void	O
const	O
*	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
const	O
*	O
rega	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
=	O
a	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
const	O
*	O
regb	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
=	O
b	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
rega	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
->	O
type	int
!=	O
regb	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
->	O
type	int
)	O
return	O
rega	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
->	O
type	int
-	O
regb	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
->	O
type	int
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
rega	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
->	O
name	*(char)
,	O
regb	*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct`)),array(*((*(struct(struct(struct`,struct`),int,*(struct`),*(struct`),*(struct`),*(struct`),*(*`),long,long,*(struct`),long,long,*(struct`),long,long,long,*(union`),enum(int,int,int,int,int),long,long,*(struct`),*(char),*(struct`),long,long,*(struct`),*(char),long,long,long,*((*`,*`,*`)->(int)),int,array(struct(array(long),int,struct(array(long)))),*(struct`),*(struct`),long,*(struct`),int,int,int,struct(struct`,struct`),int,struct(struct`,struct`),*(struct`),*(struct`),*((*`,*`,*`,array(struct(int,int,*(void),*(void))))->(void)),*(struct`),*(char),*(void))),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int))))))
->	O
name	*(char)
)	O
;	O
}	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
mu_sieve_registry_add	(*(struct),*(char))->(*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*`,*`,*`,*`),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
reg	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
mach	*(struct)
->	O
registry	*(struct)
)	O
{	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
mach	*(struct)
->	O
registry	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_list_create: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
mach	*(struct)
->	O
registry	*(struct)
,	O
regunload	(*(void))->(void)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
mach	*(struct)
->	O
registry	*(struct)
,	O
regcmp	(*(void),*(void))->(int)
)	O
;	O
}	O
reg	long
=	O
mu_sieve_malloc	(*(struct),long)->(*(void))
(	O
mach	*(struct)
,	O
sizeof	O
(	O
*	O
reg	long
)	O
)	O
;	O
reg	long
->	O
name	*(char)
=	O
name	*(char)
;	O
reg	long
->	O
handle	*(void)
=	O
NULL	O
;	O
reg	long
->	O
required	int
=	O
0	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
reg	long
->	O
v	array(*(char))
,	O
0	int
,	O
sizeof	O
reg	long
->	O
v	array(*(char))
)	O
;	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
mach	*(struct)
->	O
registry	*(struct)
,	O
reg	long
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
"mu_list_append: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
return	O
reg	long
;	O
}	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
mu_sieve_registry_lookup	(*(struct),*(char),enum(int,int,int))->(*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*`,*`,*`,*`),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))))
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
enum	O
mu_sieve_record	enum(int,int,int)
type	int
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
key	*(*(void))
,	O
*	O
reg	long
;	O
int	O
rc	int
;	O
key	*(*(void))
.	O
name	*(char)
=	O
name	*(char)
;	O
key	*(*(void))
.	O
type	int
=	O
type	int
;	O
rc	int
=	O
mu_list_locate	(*(struct),*(void),*(*(void)))->(int)
(	O
mach	*(struct)
->	O
registry	*(struct)
,	O
&	O
key	*(*(void))
,	O
(	O
void	O
*	O
*	O
)	O
&	O
reg	long
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
return	O
NULL	O
;	O
else	O
if	O
(	O
rc	int
)	O
{	O
mu_sieve_error	(*(struct),*(char))->(void)
(	O
mach	*(struct)
,	O
_	O
(	O
"registry lookup failed: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
mu_sieve_abort	(*(struct))->(void)
(	O
mach	*(struct)
)	O
;	O
}	O
return	O
reg	long
;	O
}	O
void	O
mu_sieve_register_test_ext	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_sieve_handler_t	*((*(struct))->(int))
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
*	O
req_args	*(enum(int,int,int,int,int))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
*	O
opt_args	*(enum(int,int,int,int,int))
,	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
*	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
,	O
int	O
required	int
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
reg	long
=	O
mu_sieve_registry_add	(*(struct),*(char))->(*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*`,*`,*`,*`),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))))
(	O
mach	*(struct)
,	O
name	*(char)
)	O
;	O
reg	long
->	O
type	int
=	O
mu_sieve_record_test	int
;	O
reg	long
->	O
required	int
=	O
required	int
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
req_args	*(enum(int,int,int,int,int))
=	O
req_args	*(enum(int,int,int,int,int))
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
opt_args	*(enum(int,int,int,int,int))
=	O
opt_args	*(enum(int,int,int,int,int))
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
=	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
;	O
}	O
void	O
mu_sieve_register_test	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_sieve_handler_t	*((*(struct))->(int))
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
*	O
arg_types	*(enum(int,int,int,int,int))
,	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
*	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
,	O
int	O
required	int
)	O
{	O
return	O
mu_sieve_register_test_ext	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
name	*(char)
,	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
,	O
arg_types	*(enum(int,int,int,int,int))
,	O
NULL	O
,	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
,	O
required	int
)	O
;	O
}	O
void	O
mu_sieve_register_action_ext	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_sieve_handler_t	*((*(struct))->(int))
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
*	O
req_args	*(enum(int,int,int,int,int))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
*	O
opt_args	*(enum(int,int,int,int,int))
,	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
*	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
,	O
int	O
required	int
)	O
{	O
mu_sieve_registry_t	struct(*(char),int,*(void),enum(int,int,int),union(struct(*((*`)->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*`,*`))),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))
*	O
reg	long
=	O
mu_sieve_registry_add	(*(struct),*(char))->(*(struct(*(char),int,*(void),enum(int,int,int),union(struct(*`,*`,*`,*`),array(*((*(struct),*(struct(int,int,*(char),*(char),*(void))),*(char))->(int)))))))
(	O
mach	*(struct)
,	O
name	*(char)
)	O
;	O
reg	long
->	O
type	int
=	O
mu_sieve_record_action	int
;	O
reg	long
->	O
required	int
=	O
required	int
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
req_args	*(enum(int,int,int,int,int))
=	O
req_args	*(enum(int,int,int,int,int))
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
opt_args	*(enum(int,int,int,int,int))
=	O
opt_args	*(enum(int,int,int,int,int))
;	O
reg	long
->	O
v	array(*(char))
.	O
command	*(char)
.	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
=	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
;	O
}	O
void	O
mu_sieve_register_action	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mu_sieve_machine_t	*(struct)
mach	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
mu_sieve_handler_t	*((*(struct))->(int))
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
,	O
mu_sieve_data_type	enum(int,int,int,int,int)
*	O
arg_types	*(enum(int,int,int,int,int))
,	O
mu_sieve_tag_group_t	struct(*(struct(*(char),enum(int,int,int,int,int))),*((*(struct))->(int)))
*	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
,	O
int	O
required	int
)	O
{	O
return	O
mu_sieve_register_action_ext	(*(struct),*(char),*((*(struct))->(int)),*(enum(int,int,int,int,int)),*(enum(int,int,int,int,int)),*(struct(*(struct(*`,enum(int,int,int,int,int))),*((*`)->(int)))),int)->(void)
(	O
mach	*(struct)
,	O
name	*(char)
,	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
,	O
arg_types	*(enum(int,int,int,int,int))
,	O
NULL	O
,	O
tags	*(struct(*(char),enum(int,int,int,int,int)))
,	O
required	int
)	O
;	O
}	O
