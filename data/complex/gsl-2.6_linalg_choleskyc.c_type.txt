static	O
void	O
cholesky_complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
int	O
complex_cholesky_decomp_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
static	O
int	O
complex_cholesky_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
int	O
gsl_linalg_complex_cholesky_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Cholesky decomposition requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
return	O
complex_cholesky_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
)	O
;	O
}	O
}	O
int	O
gsl_linalg_complex_cholesky_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	*(struct(long,*(long double)))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
)	O
{	O
if	O
(	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
b	*(struct(long,*(long double)))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_vector_complex_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	long double
,	O
b	*(struct(long,*(long double)))
)	O
;	O
return	O
gsl_linalg_complex_cholesky_svx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
}	O
}	O
int	O
gsl_linalg_complex_cholesky_svx	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
)	O
{	O
if	O
(	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_blas_ztrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
gsl_blas_ztrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasConjTrans	int
,	O
CblasNonUnit	int
,	O
cholesky	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_complex_cholesky_invert	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
if	O
(	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cholesky matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
size_t	long
N	int
=	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
size_t	long
i	long
,	O
j	long
;	O
status	int
=	O
gsl_linalg_complex_tri_invert	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNonUnit	int
,	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
gsl_linalg_complex_tri_LHL	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
i	long
;	O
++	O
j	long
)	O
{	O
gsl_complex	struct(array(double))
z	struct(array(long double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
LLT	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
i	long
,	O
gsl_complex_conjugate	(struct(array(double)))->(struct(array(double)))
(	O
z	struct(array(long double))
)	O
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
void	O
cholesky_complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
*	O
vi	double
=	O
gsl_vector_complex_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(struct(array(double))))
(	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
i	long
)	O
;	O
GSL_IMAG	O
(	O
*	O
vi	double
)	O
=	O
-	O
GSL_IMAG	O
(	O
*	O
vi	double
)	O
;	O
}	O
}	O
static	O
int	O
complex_cholesky_decomp_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Cholesky decomposition requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
gsl_complex	struct(array(double))
z	struct(array(long double))
;	O
double	O
ajj	double
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
{	O
z	struct(array(long double))
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
)	O
;	O
ajj	double
=	O
GSL_REAL	O
(	O
z	struct(array(long double))
)	O
;	O
if	O
(	O
j	long
>	O
0	int
)	O
{	O
gsl_vector_complex_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_const_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
0	int
,	O
j	long
)	O
;	O
gsl_blas_zdotc	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))))->(int)
(	O
&	O
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
z	struct(array(long double))
)	O
;	O
ajj	double
-=	O
GSL_REAL	O
(	O
z	struct(array(long double))
)	O
;	O
}	O
if	O
(	O
ajj	double
<=	O
0.0	int
)	O
{	O
GSL_ERROR	O
(	O
"matrix is not positive definite"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
ajj	double
=	O
sqrt	(double)->(double)
(	O
ajj	double
)	O
;	O
GSL_SET_COMPLEX	O
(	O
&	O
z	struct(array(long double))
,	O
ajj	double
,	O
0.0	int
)	O
;	O
gsl_matrix_complex_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,struct(array(double)))->(void)
(	O
A	*(float)
,	O
j	long
,	O
j	long
,	O
z	struct(array(long double))
)	O
;	O
if	O
(	O
j	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
av	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
if	O
(	O
j	long
>	O
0	int
)	O
{	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
,	O
0	int
,	O
j	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
am	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
j	long
+	O
1	int
,	O
0	int
,	O
N	int
-	O
j	long
-	O
1	int
,	O
j	long
)	O
;	O
cholesky_complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zgemv	(enum(int,int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
am	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
av	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
cholesky_complex_conj_vector	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
aj	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_blas_zdscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
/	O
ajj	double
,	O
&	O
av	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
complex_cholesky_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Cholesky decomposition requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_CHOLESKY	O
)	O
{	O
return	O
complex_cholesky_decomp_L2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
A	*(float)
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
complex_cholesky_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_ztrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasConjTrans	int
,	O
CblasNonUnit	int
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zherk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
complex_cholesky_decomp_L3	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
