static	O
mu_list_t	*(struct)
implist	*(struct)
;	O
mu_url_t	*(struct)
mu_dbm_hint	*(struct)
;	O
static	O
void	O
_implist_free	(*(void))->(void)
(	O
void	O
*	O
p	*(char)
)	O
{	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
*	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
=	O
p	*(char)
;	O
free	(*(void))->(void)
(	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
->	O
_dbm_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
)	O
;	O
}	O
static	O
int	O
_implist_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
const	O
void	O
*	O
b	*(struct(int,int,array(char),array(char)))
)	O
{	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
const	O
*	O
ia	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
=	O
a	*(struct(int,int,array(char),array(char)))
;	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
const	O
*	O
ib	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
=	O
b	*(struct(int,int,array(char),array(char)))
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
ia	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
->	O
_dbm_name	*(char)
,	O
ib	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
->	O
_dbm_name	*(char)
)	O
;	O
}	O
void	O
mu_dbm_init	()->(void)
(	O
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
implist	*(struct)
)	O
return	O
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
implist	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot initialize DBM subsystem: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
implist	*(struct)
,	O
_implist_free	(*(void))->(void)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
implist	*(struct)
,	O
_implist_cmp	(*(void),*(void))->(int)
)	O
;	O
if	O
(	O
!	O
mu_dbm_hint	*(struct)
)	O
{	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
*	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
;	O
if	O
(	O
(	O
rc	int
=	O
mu_list_get	(*(struct),long,*(*(void)))->(int)
(	O
implist	*(struct)
,	O
0	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
)	O
)	O
||	O
(	O
rc	int
=	O
mu_url_create_null	(*(*(struct)))->(int)
(	O
&	O
mu_dbm_hint	*(struct)
)	O
)	O
||	O
(	O
rc	int
=	O
mu_url_set_scheme	(*(struct),*(char))->(int)
(	O
mu_dbm_hint	*(struct)
,	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
->	O
_dbm_name	*(char)
)	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot initialize DBM hint: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
mu_url_t	*(struct)
mu_dbm_get_hint	()->(*(struct))
(	O
)	O
{	O
mu_dbm_init	()->(void)
(	O
)	O
;	O
return	O
mu_dbm_hint	*(struct)
;	O
}	O
int	O
mu_dbm_register	(*(struct(*(char),*((*`,int,int)->(int)),*((*`,*`,*`)->(int)),*((*`,int,int)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)),*((*`)->(*`)))))->(int)
(	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
*	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
*	O
ptr	*(*(char))
;	O
mu_dbm_init	()->(void)
(	O
)	O
;	O
ptr	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
ptr	*(*(char))
)	O
)	O
;	O
if	O
(	O
!	O
ptr	*(*(char))
)	O
return	O
ENOMEM	int
;	O
*	O
ptr	*(*(char))
=	O
*	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
;	O
ptr	*(*(char))
->	O
_dbm_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
->	O
_dbm_name	*(char)
)	O
;	O
if	O
(	O
!	O
ptr	*(*(char))
->	O
_dbm_name	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
ptr	*(*(char))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
implist	*(struct)
,	O
ptr	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
_implist_free	(*(void))->(void)
(	O
ptr	*(*(char))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_dbm_create_from_url	(*(struct),*(*(struct)),int)->(int)
(	O
mu_url_t	*(struct)
url	*(struct)
,	O
mu_dbm_file_t	*(struct)
*	O
db	*(struct)
,	O
int	O
defsafety	int
)	O
{	O
mu_dbm_file_t	*(struct)
p	*(char)
;	O
int	O
flags	int
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
db_name	*(char)
;	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
impl_key	struct(*(char),*((*(struct(*`,*`,int,int,*`,union`)),int,int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(int),*(int))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),int,int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)),*(struct(*`,long,*`,*`)),int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,long,*`,*`)))->(void)),*((*(struct(*`,*`,int,int,*`,union`)))->(*(char))))
;	O
struct	O
mu_dbm_impl	struct(*(char),*((*(struct),int,int)->(int)),*((*(struct),*(int),*(int))->(int)),*((*(struct),int,int)->(int)),*((*(struct))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))),*(struct(*(char),long,*(void),*(struct`))),int)->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct),*(struct(*(char),long,*(void),*(struct`))))->(int)),*((*(struct(*(char),long,*(void),*(struct`))))->(void)),*((*(struct))->(*(char))))
*	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
;	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
auth	*(char)
;	O
int	O
safety_flags	int
=	O
0	int
;	O
int	O
safety_flags_set	int
=	O
0	int
;	O
uid_t	int
owner_uid	int
=	O
getuid	()->(int)
(	O
)	O
;	O
mu_dbm_init	()->(void)
(	O
)	O
;	O
mu_url_get_flags	(*(struct),*(int))->(int)
(	O
url	*(struct)
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
(	O
flags	int
&	O
(	O
MU_URL_HOST	int
|	O
MU_URL_PATH	int
)	O
)	O
==	O
(	O
MU_URL_HOST	int
|	O
MU_URL_PATH	int
)	O
)	O
return	O
MU_ERR_URL_EXTRA_PARTS	O
;	O
if	O
(	O
flags	int
&	O
MU_URL_HOST	int
)	O
rc	int
=	O
mu_url_sget_host	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
db_name	*(char)
)	O
;	O
else	O
rc	int
=	O
mu_url_sget_path	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
db_name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_url_sget_scheme	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
(	O
const	O
char	O
*	O
*	O
)	O
&	O
impl_key	struct(*(char),*((*(struct(*`,*`,int,int,*`,union`)),int,int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(int),*(int))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),int,int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)),*(struct(*`,long,*`,*`)),int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,long,*`,*`)))->(void)),*((*(struct(*`,*`,int,int,*`,union`)))->(*(char))))
.	O
_dbm_name	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_locate	(*(struct),*(void),*(*(void)))->(int)
(	O
implist	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
impl_key	struct(*(char),*((*(struct(*`,*`,int,int,*`,union`)),int,int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(int),*(int))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),int,int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)),*(struct(*`,long,*`,*`)),int)->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,*`,int,int,*`,union`)),*(struct(*`,long,*`,*`)))->(int)),*((*(struct(*`,long,*`,*`)))->(void)),*((*(struct(*`,*`,int,int,*`,union`)))->(*(char))))
,	O
(	O
void	O
*	O
*	O
)	O
&	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
flags	int
&	O
MU_URL_PARAM	int
)	O
{	O
size_t	long
fvc	*(long)
,	O
i	long
;	O
char	O
*	O
*	O
fvp	*(*(*(char)))
;	O
mu_url_sget_fvpairs	(*(struct),*(long),*(*(*(char))))->(int)
(	O
url	*(struct)
,	O
&	O
fvc	*(long)
,	O
&	O
fvp	*(*(*(char)))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
fvc	*(long)
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
fvp	*(*(*(char)))
[	O
i	long
]	O
;	O
int	O
negate	int
=	O
0	int
;	O
int	O
val	*(*(char))
;	O
if	O
(	O
*	O
name	*(char)
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
safety_flags_set	int
)	O
safety_flags	int
=	O
defsafety	int
;	O
negate	int
=	O
1	int
;	O
name	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
*	O
name	*(char)
==	O
'+'	O
)	O
name	*(char)
++	O
;	O
safety_flags_set	int
=	O
1	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
name	*(char)
,	O
"owner"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
val	*(*(char))
=	O
MU_FILE_SAFETY_OWNER_MISMATCH	int
;	O
if	O
(	O
name	*(char)
[	O
5	int
]	O
==	O
'='	O
)	O
{	O
auth	*(char)
=	O
mu_get_auth_by_name	(*(char))->(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
(	O
name	*(char)
+	O
6	int
)	O
;	O
if	O
(	O
auth	*(char)
)	O
{	O
owner_uid	int
=	O
auth	*(char)
->	O
uid	*(int)
;	O
mu_auth_data_free	(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))->(void)
(	O
auth	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
end	struct(*(char),int,int)
;	O
unsigned	O
long	O
uid	*(int)
;	O
errno	O
=	O
0	int
;	O
uid	*(int)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
name	*(char)
+	O
6	int
,	O
&	O
end	struct(*(char),int,int)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
end	struct(*(char),int,int)
||	O
errno	O
)	O
return	O
MU_ERR_NO_SUCH_USER	O
;	O
owner_uid	int
=	O
uid	*(int)
;	O
}	O
}	O
else	O
if	O
(	O
name	*(char)
[	O
5	int
]	O
)	O
return	O
MU_ERR_URL_INVALID_PARAMETER	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
{	O
safety_flags	int
=	O
negate	int
?	O
MU_FILE_SAFETY_ALL	O
:	O
MU_FILE_SAFETY_NONE	int
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"all"	*(char)
)	O
==	O
0	int
)	O
{	O
safety_flags	int
=	O
negate	int
?	O
MU_FILE_SAFETY_NONE	int
:	O
MU_FILE_SAFETY_ALL	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"default"	*(char)
)	O
==	O
0	int
)	O
{	O
val	*(*(char))
=	O
defsafety	int
;	O
}	O
else	O
if	O
(	O
mu_file_safety_name_to_code	(*(char),*(int))->(int)
(	O
name	*(char)
,	O
&	O
val	*(*(char))
)	O
)	O
return	O
MU_ERR_URL_INVALID_PARAMETER	O
;	O
if	O
(	O
negate	int
)	O
safety_flags	int
&=	O
~	O
val	*(*(char))
;	O
else	O
safety_flags	int
|=	O
val	*(*(char))
;	O
}	O
}	O
p	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
p	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
p	*(char)
->	O
db_name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
db_name	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
->	O
db_name	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
p	*(char)
->	O
db_safety_flags	int
=	O
safety_flags_set	int
?	O
safety_flags	int
:	O
defsafety	int
;	O
p	*(char)
->	O
db_owner	int
=	O
owner_uid	int
;	O
p	*(char)
->	O
db_sys	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
=	O
impl	*(struct(*(char),*((*(struct`),int,int)->(int)),*((*(struct`),*(int),*(int))->(int)),*((*(struct`),int,int)->(int)),*((*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`),*(struct`),int)->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`),*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(*(char)))))
;	O
*	O
db	*(struct)
=	O
p	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_dbm_impl_iterator	(*(*(struct)))->(int)
(	O
mu_iterator_t	*(struct)
*	O
itr	*(*(struct))
)	O
{	O
mu_dbm_init	()->(void)
(	O
)	O
;	O
return	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
implist	*(struct)
,	O
itr	*(*(struct))
)	O
;	O
}	O
