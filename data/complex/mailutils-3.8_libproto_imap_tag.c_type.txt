static	O
int	O
_mu_imap_tag_incr	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
int	O
i	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
++	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
i	int
]	O
<=	O
9	int
)	O
break	O
;	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
i	int
]	O
=	O
0	int
;	O
if	O
(	O
++	O
i	int
==	O
imap	*(struct)
->	O
tag_len	long
)	O
{	O
char	O
*	O
sp	*(char)
;	O
int	O
*	O
np	*(int)
=	O
realloc	(*(void),long)->(*(void))
(	O
imap	*(struct)
->	O
tag_buf	*(int)
,	O
(	O
imap	*(struct)
->	O
tag_len	long
+	O
1	int
)	O
*	O
sizeof	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
np	*(int)
)	O
return	O
ENOMEM	int
;	O
imap	*(struct)
->	O
tag_buf	*(int)
=	O
np	*(int)
;	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
imap	*(struct)
->	O
tag_len	long
]	O
=	O
0	int
;	O
sp	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
imap	*(struct)
->	O
tag_str	*(char)
,	O
(	O
imap	*(struct)
->	O
tag_len	long
+	O
2	int
)	O
*	O
sizeof	O
imap	*(struct)
->	O
tag_str	*(char)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
sp	*(char)
)	O
return	O
ENOMEM	int
;	O
imap	*(struct)
->	O
tag_str	*(char)
=	O
sp	*(char)
;	O
imap	*(struct)
->	O
tag_len	long
++	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
_mu_imap_tag_print	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
imap	*(struct)
->	O
tag_len	long
;	O
i	int
++	O
)	O
imap	*(struct)
->	O
tag_str	*(char)
[	O
imap	*(struct)
->	O
tag_len	long
-	O
i	int
-	O
1	int
]	O
=	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
i	int
]	O
+	O
'0'	O
;	O
imap	*(struct)
->	O
tag_str	*(char)
[	O
i	int
]	O
=	O
0	int
;	O
}	O
int	O
_mu_imap_tag_clr	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
int	O
i	int
;	O
if	O
(	O
imap	*(struct)
->	O
tag_len	long
==	O
0	int
)	O
{	O
imap	*(struct)
->	O
tag_len	long
=	O
2	int
;	O
imap	*(struct)
->	O
tag_buf	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
imap	*(struct)
->	O
tag_len	long
,	O
sizeof	O
(	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
tag_buf	*(int)
)	O
{	O
imap	*(struct)
->	O
tag_len	long
=	O
0	int
;	O
return	O
ENOMEM	int
;	O
}	O
imap	*(struct)
->	O
tag_str	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
imap	*(struct)
->	O
tag_len	long
+	O
1	int
,	O
sizeof	O
(	O
imap	*(struct)
->	O
tag_str	*(char)
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
tag_str	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
imap	*(struct)
->	O
tag_buf	*(int)
)	O
;	O
imap	*(struct)
->	O
tag_buf	*(int)
=	O
NULL	O
;	O
imap	*(struct)
->	O
tag_len	long
=	O
0	int
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
imap	*(struct)
->	O
tag_len	long
;	O
i	int
++	O
)	O
imap	*(struct)
->	O
tag_buf	*(int)
[	O
i	int
]	O
=	O
0	int
;	O
_mu_imap_tag_print	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)
(	O
imap	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
)	O
{	O
int	O
status	int
;	O
status	int
=	O
_mu_imap_tag_incr	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
_mu_imap_tag_print	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)
(	O
imap	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_imap_tag	(*(struct),*(*(char)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
const	O
char	O
*	O
*	O
ptag	*(*(char))
)	O
{	O
if	O
(	O
!	O
imap	*(struct)
)	O
return	O
EINVAL	int
;	O
*	O
ptag	*(*(char))
=	O
imap	*(struct)
->	O
tag_str	*(char)
;	O
return	O
0	int
;	O
}	O
