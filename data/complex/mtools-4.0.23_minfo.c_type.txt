static	O
void	O
usage	(int)->(void)
(	O
int	O
ret	int
)	O
NORETURN	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
ret	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Mtools version %s, dated %s\n"	*(char)
,	O
mversion	*(char)
,	O
mdate	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s [-v] drive\n"	*(char)
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
ret	int
)	O
;	O
}	O
static	O
void	O
displayInfosector	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct`,struct`)))))->(void)
(	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
union	O
bootsector	union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char)))))
*	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
{	O
InfoSector_t	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char))
*	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
;	O
if	O
(	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
infoSector	array(char)
)	O
==	O
MAX16	int
)	O
return	O
;	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
=	O
(	O
InfoSector_t	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char))
*	O
)	O
safe_malloc	(long)->(*(void))
(	O
WORD	O
(	O
secsiz	array(char)
)	O
)	O
;	O
force_read	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(char),long,long)->(int)
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
(	O
char	O
*	O
)	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
,	O
(	O
mt_off_t	long
)	O
WORD	O
(	O
secsiz	array(char)
)	O
*	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
infoSector	array(char)
)	O
,	O
WORD	O
(	O
secsiz	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\nInfosector:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"signature=0x%08x\n"	*(char)
,	O
_DWORD	O
(	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
->	O
signature1	array(char)
)	O
)	O
;	O
if	O
(	O
_DWORD	O
(	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
->	O
count	array(char)
)	O
!=	O
MAX32	int
)	O
printf	(*(char))->(int)
(	O
"free clusters=%u\n"	*(char)
,	O
_DWORD	O
(	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
->	O
count	array(char)
)	O
)	O
;	O
if	O
(	O
_DWORD	O
(	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
->	O
pos	array(char)
)	O
!=	O
MAX32	int
)	O
printf	(*(char))->(int)
(	O
"last allocated cluster=%u\n"	*(char)
,	O
_DWORD	O
(	O
infosec	*(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char)))
->	O
pos	array(char)
)	O
)	O
;	O
}	O
static	O
void	O
displayBPB	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct`,struct`)))))->(void)
(	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
union	O
bootsector	union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char)))))
*	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
{	O
struct	O
label_blk_t	struct(char,char,char,array(char),array(char),array(char))
*	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
;	O
printf	(*(char))->(int)
(	O
"bootsector information\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"======================\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"banner:\"%.8s\"\n"	*(char)
,	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
->	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
banner	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"sector size: %d bytes\n"	*(char)
,	O
WORD	O
(	O
secsiz	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"cluster size: %d sectors\n"	*(char)
,	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
->	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
clsiz	char
)	O
;	O
printf	(*(char))->(int)
(	O
"reserved (boot) sectors: %d\n"	*(char)
,	O
WORD	O
(	O
nrsvsect	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"fats: %d\n"	*(char)
,	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
->	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
nfat	char
)	O
;	O
printf	(*(char))->(int)
(	O
"max available root directory slots: %d\n"	*(char)
,	O
WORD	O
(	O
dirents	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"small size: %d sectors\n"	*(char)
,	O
WORD	O
(	O
psect	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"media descriptor byte: 0x%x\n"	*(char)
,	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
->	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
descr	char
)	O
;	O
printf	(*(char))->(int)
(	O
"sectors per fat: %d\n"	*(char)
,	O
WORD	O
(	O
fatlen	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"sectors per track: %d\n"	*(char)
,	O
WORD	O
(	O
nsect	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"heads: %d\n"	*(char)
,	O
WORD	O
(	O
nheads	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"hidden sectors: %d\n"	*(char)
,	O
DWORD	O
(	O
nhs	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"big size: %d sectors\n"	*(char)
,	O
DWORD	O
(	O
bigsect	array(char)
)	O
)	O
;	O
if	O
(	O
WORD	O
(	O
fatlen	array(char)
)	O
)	O
{	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
=	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
->	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
ext	array(char)
.	O
old	struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))
.	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
;	O
}	O
else	O
{	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
=	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
->	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
.	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
;	O
}	O
if	O
(	O
has_BPB4	O
)	O
{	O
printf	(*(char))->(int)
(	O
"physical drive id: 0x%x\n"	*(char)
,	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
physdrive	char
)	O
;	O
printf	(*(char))->(int)
(	O
"reserved=0x%x\n"	*(char)
,	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
reserved	char
)	O
;	O
printf	(*(char))->(int)
(	O
"dos4=0x%x\n"	*(char)
,	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
dos4	char
)	O
;	O
printf	(*(char))->(int)
(	O
"serial number: %08X\n"	*(char)
,	O
_DWORD	O
(	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
serial	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"disk label=\"%11.11s\"\n"	*(char)
,	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
label	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"disk type=\"%8.8s\"\n"	*(char)
,	O
labelBlock	struct(char,char,char,array(char),array(char),array(char))
->	O
fat_type	array(char)
)	O
;	O
}	O
if	O
(	O
!	O
WORD	O
(	O
fatlen	array(char)
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Big fatlen=%u\n"	*(char)
,	O
DWORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
bigFat	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Extended flags=0x%04x\n"	*(char)
,	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
extFlags	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"FS version=0x%04x\n"	*(char)
,	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
fsVersion	array(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"rootCluster=%u\n"	*(char)
,	O
DWORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
rootCluster	array(char)
)	O
)	O
;	O
if	O
(	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
infoSector	array(char)
)	O
!=	O
MAX16	int
)	O
printf	(*(char))->(int)
(	O
"infoSector location=%d\n"	*(char)
,	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
infoSector	array(char)
)	O
)	O
;	O
if	O
(	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
backupBoot	array(char)
)	O
!=	O
MAX16	int
)	O
printf	(*(char))->(int)
(	O
"backup boot sector=%d\n"	*(char)
,	O
WORD	O
(	O
ext	array(char)
.	O
fat32	struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char)))
.	O
backupBoot	array(char)
)	O
)	O
;	O
displayInfosector	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct`,struct`)))))->(void)
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
;	O
}	O
}	O
void	O
minfo	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
minfo	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
{	O
union	O
bootsector	union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char)))))
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
;	O
char	O
name	*(char)
[	O
EXPAND_BUF	int
]	O
;	O
int	O
media	char
;	O
int	O
haveBPB	int
;	O
int	O
size_code	int
;	O
int	O
i	int
;	O
struct	O
device	struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
;	O
char	O
drive	char
;	O
int	O
verbose	int
=	O
0	int
;	O
int	O
c	char
;	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
;	O
int	O
have_drive	int
=	O
0	int
;	O
unsigned	O
long	O
sect_per_track	long
;	O
char	O
*	O
imgFile	*(char)
=	O
NULL	O
;	O
if	O
(	O
helpFlag	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
)	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
while	O
(	O
(	O
c	char
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
"i:vh"	*(char)
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	char
)	O
{	O
case	O
'i'	O
:	O
set_cmd_line_image	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
imgFile	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'h'	O
:	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
for	O
(	O
;	O
optind	int
<=	O
argc	int
;	O
optind	int
++	O
)	O
{	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
have_drive	int
)	O
break	O
;	O
drive	char
=	O
get_default_drive	()->(char)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
||	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
!=	O
':'	O
)	O
usage	(int)->(void)
(	O
1	int
)	O
;	O
drive	char
=	O
ch_toupper	(char)->(char)
(	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
)	O
;	O
}	O
have_drive	int
=	O
1	int
;	O
if	O
(	O
!	O
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
=	O
find_device	(char,int,*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))),*(union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct`,struct`)))),*(char),*(int),*(long),*(int))->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
(	O
drive	char
,	O
O_RDONLY	int
,	O
&	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
,	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
,	O
name	*(char)
,	O
&	O
media	char
,	O
0	int
,	O
NULL	O
)	O
)	O
)	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
haveBPB	int
=	O
media	char
>=	O
0x100	int
;	O
media	char
=	O
media	char
&	O
0xff	int
;	O
printf	(*(char))->(int)
(	O
"device information:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"===================\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"filename=\"%s\"\n"	*(char)
,	O
name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"sectors per track: %d\n"	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
sectors	short
)	O
;	O
printf	(*(char))->(int)
(	O
"heads: %d\n"	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
heads	short
)	O
;	O
printf	(*(char))->(int)
(	O
"cylinders: %d\n\n"	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
tracks	int
)	O
;	O
printf	(*(char))->(int)
(	O
"media byte: %02x\n\n"	*(char)
,	O
media	char
&	O
0xff	int
)	O
;	O
sect_per_track	long
=	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
sectors	short
*	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
heads	short
;	O
if	O
(	O
sect_per_track	long
!=	O
0	int
)	O
{	O
unsigned	O
int	O
hidden	int
;	O
unsigned	O
long	O
tot_sectors	long
;	O
int	O
tracks_match	int
=	O
0	int
;	O
printf	(*(char))->(int)
(	O
"mformat command line: mformat "	*(char)
)	O
;	O
if	O
(	O
haveBPB	int
)	O
{	O
int	O
sector_size	int
;	O
tot_sectors	long
=	O
DWORD_S	O
(	O
bigsect	array(char)
)	O
;	O
SET_INT	O
(	O
tot_sectors	long
,	O
WORD_S	O
(	O
psect	array(char)
)	O
)	O
;	O
sector_size	int
=	O
WORD_S	O
(	O
secsiz	array(char)
)	O
;	O
size_code	int
=	O
2	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
7	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
sector_size	int
==	O
128	int
<<	O
i	int
)	O
{	O
size_code	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
media	char
==	O
0xf0	int
)	O
hidden	int
=	O
DWORD_S	O
(	O
nhs	array(char)
)	O
;	O
else	O
hidden	int
=	O
0	int
;	O
}	O
else	O
{	O
tot_sectors	long
=	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
tracks	int
*	O
sect_per_track	long
;	O
size_code	int
=	O
2	int
;	O
hidden	int
=	O
0	int
;	O
}	O
if	O
(	O
tot_sectors	long
==	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
tracks	int
*	O
sect_per_track	long
-	O
hidden	int
%	O
sect_per_track	long
)	O
{	O
tracks_match	int
=	O
1	int
;	O
printf	(*(char))->(int)
(	O
"-t %d "	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
tracks	int
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"-T %ld "	*(char)
,	O
tot_sectors	long
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"-h %d -s %d "	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
heads	short
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
sectors	short
)	O
;	O
if	O
(	O
haveBPB	int
&&	O
(	O
hidden	int
||	O
!	O
tracks_match	int
)	O
)	O
printf	(*(char))->(int)
(	O
"-H %d "	*(char)
,	O
hidden	int
)	O
;	O
if	O
(	O
size_code	int
!=	O
2	int
)	O
printf	(*(char))->(int)
(	O
"-S %d "	*(char)
,	O
size_code	int
)	O
;	O
if	O
(	O
imgFile	*(char)
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"-i \"%s\" "	*(char)
,	O
imgFile	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%c:\n"	*(char)
,	O
ch_tolower	(char)->(char)
(	O
drive	char
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
if	O
(	O
haveBPB	int
||	O
verbose	int
)	O
displayBPB	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))),*(union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct`,struct`)))))->(void)
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
)	O
;	O
if	O
(	O
verbose	int
)	O
{	O
int	O
size	array(char)
;	O
unsigned	O
char	O
*	O
buf	*(char)
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
size	array(char)
=	O
WORD_S	O
(	O
secsiz	array(char)
)	O
;	O
buf	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
size	array(char)
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Out of memory error\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
size	array(char)
=	O
READS	O
(	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
,	O
buf	*(char)
,	O
(	O
mt_off_t	long
)	O
0	int
,	O
size	array(char)
)	O
;	O
if	O
(	O
size	array(char)
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"read boot sector"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
print_sector	(*(char),*(char),int)->(void)
(	O
"Boot sector hexdump"	*(char)
,	O
buf	*(char)
,	O
size	array(char)
)	O
;	O
}	O
}	O
FREE	O
(	O
&	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
