typedef	O
struct	O
{	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
int	O
priority	int
;	O
char	O
hash	*((*(void))->(int))
[	O
128	int
]	O
,	O
hash_type	array(char)
[	O
16	int
]	O
,	O
location	*(char)
[	O
8	int
]	O
;	O
long	O
long	O
length	long
;	O
}	O
metalink_context	struct(*(struct(*(char),*(struct),*(struct),*(struct),long)),int,array(char),array(char),array(char),long long)
;	O
static	O
void	O
mirror_free	(*(void))->(void)
(	O
void	O
*	O
mirror	*(void)
)	O
{	O
wget_metalink_mirror	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))
*	O
m	*(void)
=	O
mirror	*(void)
;	O
if	O
(	O
m	*(void)
)	O
{	O
wget_iri_free	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))))->(void)
(	O
&	O
m	*(void)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
xfree	O
(	O
m	*(void)
)	O
;	O
}	O
}	O
static	O
void	O
add_piece	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
metalink_context	struct(*(struct(*(char),*(struct),*(struct),*(struct),long)),int,array(char),array(char),array(char),long long)
*	O
ctx	*(void)
,	O
const	O
char	O
*	O
value	*(void)
)	O
{	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"%127s"	*(char)
,	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
)	O
;	O
if	O
(	O
ctx	*(void)
->	O
length	long
&&	O
*	O
ctx	*(void)
->	O
hash_type	array(char)
&&	O
*	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
)	O
{	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
piece	struct(struct(array(char),array(char)),long,long)
,	O
*	O
piecep	*(struct(struct(array(char),array(char)),long,long))
;	O
if	O
(	O
!	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
32	int
,	O
NULL	O
)	O
;	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
length	long
=	O
ctx	*(void)
->	O
length	long
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
hash	*((*(void))->(int))
.	O
type	*(char)
,	O
ctx	*(void)
->	O
hash_type	array(char)
,	O
sizeof	O
(	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
hash	*((*(void))->(int))
.	O
type	*(char)
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
hash	*((*(void))->(int))
.	O
hash_hex	array(char)
,	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
,	O
sizeof	O
(	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
hash	*((*(void))->(int))
.	O
hash_hex	array(char)
)	O
)	O
;	O
piecep	*(struct(struct(array(char),array(char)),long,long))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
,	O
wget_vector_size	(*(struct))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
piecep	*(struct(struct(array(char),array(char)),long,long))
&&	O
piecep	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
>	O
0	int
)	O
{	O
if	O
(	O
piecep	*(struct(struct(array(char),array(char)),long,long))
->	O
position	long
<=	O
LONG_MAX	O
-	O
piecep	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
)	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
position	long
=	O
piecep	*(struct(struct(array(char),array(char)),long,long))
->	O
position	long
+	O
piecep	*(struct(struct(array(char),array(char)),long,long))
->	O
length	long
;	O
else	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
position	long
=	O
0	int
;	O
}	O
else	O
piece	struct(struct(array(char),array(char)),long,long)
.	O
position	long
=	O
0	int
;	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
pieces	*(struct)
,	O
&	O
piece	struct(struct(array(char),array(char)),long,long)
,	O
sizeof	O
(	O
wget_metalink_piece	struct(struct(array(char),array(char)),long,long)
)	O
)	O
;	O
}	O
*	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
=	O
0	int
;	O
}	O
static	O
void	O
add_file_hash	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
metalink_context	struct(*(struct(*(char),*(struct),*(struct),*(struct),long)),int,array(char),array(char),array(char),long long)
*	O
ctx	*(void)
,	O
const	O
char	O
*	O
value	*(void)
)	O
{	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"%127s"	*(char)
,	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
)	O
;	O
if	O
(	O
*	O
ctx	*(void)
->	O
hash_type	array(char)
&&	O
*	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
)	O
{	O
wget_metalink_hash	struct(array(char),array(char))
hash	*((*(void))->(int))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hash	*((*(void))->(int))
,	O
0	int
,	O
sizeof	O
(	O
wget_metalink_hash	struct(array(char),array(char))
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
hash	*((*(void))->(int))
.	O
type	*(char)
,	O
ctx	*(void)
->	O
hash_type	array(char)
,	O
sizeof	O
(	O
hash	*((*(void))->(int))
.	O
type	*(char)
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
hash	*((*(void))->(int))
.	O
hash_hex	array(char)
,	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
,	O
sizeof	O
(	O
hash	*((*(void))->(int))
.	O
hash_hex	array(char)
)	O
)	O
;	O
if	O
(	O
!	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
)	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
4	int
,	O
NULL	O
)	O
;	O
wget_vector_add_memdup	(*(struct),*(void),long)->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
hashes	*(struct)
,	O
&	O
hash	*((*(void))->(int))
,	O
sizeof	O
(	O
wget_metalink_hash	struct(array(char),array(char))
)	O
)	O
;	O
}	O
*	O
ctx	*(void)
->	O
hash_type	array(char)
=	O
*	O
ctx	*(void)
->	O
hash	*((*(void))->(int))
=	O
0	int
;	O
}	O
static	O
void	O
add_mirror	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
metalink_context	struct(*(struct(*(char),*(struct),*(struct),*(struct),long)),int,array(char),array(char),array(char),long long)
*	O
ctx	*(void)
,	O
const	O
char	O
*	O
value	*(void)
)	O
{	O
while	O
(	O
c_isspace	(int)->(bool)
(	O
*	O
value	*(void)
)	O
)	O
value	*(void)
++	O
;	O
if	O
(	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"http:"	*(char)
,	O
5	int
)	O
&&	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
value	*(void)
,	O
"https:"	*(char)
,	O
6	int
)	O
)	O
return	O
;	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
wget_metalink_mirror	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))
*	O
mirror	*(void)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_metalink_mirror	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))
)	O
)	O
;	O
wget_strscpy	(*(char),*(char),long)->(long)
(	O
mirror	*(void)
->	O
location	*(char)
,	O
ctx	*(void)
->	O
location	*(char)
,	O
sizeof	O
(	O
mirror	*(void)
->	O
location	*(char)
)	O
)	O
;	O
mirror	*(void)
->	O
priority	int
=	O
ctx	*(void)
->	O
priority	int
;	O
mirror	*(void)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
=	O
wget_iri_parse	(*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
(	O
value	*(void)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
mirror	*(void)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
xfree	O
(	O
mirror	*(void)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
!	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
mirrors	*(struct)
)	O
{	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
mirrors	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
4	int
,	O
NULL	O
)	O
;	O
wget_vector_set_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
mirrors	*(struct)
,	O
mirror_free	(*(void))->(void)
)	O
;	O
}	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
mirrors	*(struct)
,	O
mirror	*(void)
)	O
;	O
*	O
ctx	*(void)
->	O
location	*(char)
=	O
0	int
;	O
ctx	*(void)
->	O
priority	int
=	O
999999	int
;	O
}	O
static	O
void	O
metalink_parse	(*(void),int,*(char),*(char),*(char),long,long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
int	O
flags	int
,	O
const	O
char	O
*	O
dir	array(char)
,	O
const	O
char	O
*	O
attr	array(char)
,	O
const	O
char	O
*	O
val	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
WGET_GCC_UNUSED	O
)	O
{	O
metalink_context	struct(*(struct(*(char),*(struct),*(struct),*(struct),long)),int,array(char),array(char),array(char),long long)
*	O
ctx	*(void)
=	O
context	*(void)
;	O
char	O
value	*(void)
[	O
len	long
+	O
1	int
]	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
(	O
XML_FLG_CONTENT	O
|	O
XML_FLG_ATTRIBUTE	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
dir	array(char)
,	O
"/metalink/file"	*(char)
,	O
14	int
)	O
)	O
return	O
;	O
dir	array(char)
+=	O
14	int
;	O
if	O
(	O
val	*(char)
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
value	*(void)
,	O
val	*(char)
,	O
len	long
)	O
;	O
value	*(void)
[	O
len	long
]	O
=	O
0	int
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
dir	array(char)
,	O
"s/file"	*(char)
,	O
6	int
)	O
)	O
{	O
dir	array(char)
+=	O
6	int
;	O
if	O
(	O
attr	array(char)
)	O
{	O
if	O
(	O
*	O
dir	array(char)
==	O
0	int
)	O
{	O
if	O
(	O
!	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"name"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/verification/pieces"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"type"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"%15s"	*(char)
,	O
ctx	*(void)
->	O
hash_type	array(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"length"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
length	long
=	O
atoll	(*(char))->(long long)
(	O
value	*(void)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/verification/hash"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"type"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"%15s"	*(char)
,	O
ctx	*(void)
->	O
hash_type	array(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/resources/url"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"location"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
" %2[a-zA-Z]"	*(char)
,	O
ctx	*(void)
->	O
location	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"preference"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
" %6d"	*(char)
,	O
&	O
ctx	*(void)
->	O
priority	int
)	O
;	O
if	O
(	O
ctx	*(void)
->	O
priority	int
<	O
1	int
||	O
ctx	*(void)
->	O
priority	int
>	O
999999	int
)	O
ctx	*(void)
->	O
priority	int
=	O
999999	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/verification/pieces/hash"	*(char)
)	O
)	O
{	O
add_piece	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
ctx	*(void)
,	O
value	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/verification/hash"	*(char)
)	O
)	O
{	O
add_file_hash	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
ctx	*(void)
,	O
value	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/size"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
size	*(long)
=	O
atoll	(*(char))->(long long)
(	O
value	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/resources/url"	*(char)
)	O
)	O
{	O
add_mirror	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
ctx	*(void)
,	O
value	*(void)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
attr	array(char)
)	O
{	O
if	O
(	O
*	O
dir	array(char)
==	O
0	int
)	O
{	O
if	O
(	O
!	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
&&	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"name"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/pieces"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"type"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"%15s"	*(char)
,	O
ctx	*(void)
->	O
hash_type	array(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"length"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
length	long
=	O
atoll	(*(char))->(long long)
(	O
value	*(void)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/hash"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"type"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
"%15s"	*(char)
,	O
ctx	*(void)
->	O
hash_type	array(char)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/url"	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"location"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
" %2[a-zA-Z]"	*(char)
,	O
ctx	*(void)
->	O
location	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"priority"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
attr	array(char)
,	O
"preference"	*(char)
)	O
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
value	*(void)
,	O
" %6d"	*(char)
,	O
&	O
ctx	*(void)
->	O
priority	int
)	O
;	O
if	O
(	O
ctx	*(void)
->	O
priority	int
<	O
1	int
||	O
ctx	*(void)
->	O
priority	int
>	O
999999	int
)	O
ctx	*(void)
->	O
priority	int
=	O
999999	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/pieces/hash"	*(char)
)	O
)	O
{	O
add_piece	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
ctx	*(void)
,	O
value	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/hash"	*(char)
)	O
)	O
{	O
add_file_hash	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
ctx	*(void)
,	O
value	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/size"	*(char)
)	O
)	O
{	O
ctx	*(void)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
size	*(long)
=	O
atoll	(*(char))->(long long)
(	O
value	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
dir	array(char)
,	O
"/url"	*(char)
)	O
)	O
{	O
add_mirror	(*(struct(*(struct(*`,*`,*`,*`,long)),int,array(char),array(char),array(char),long long)),*(char))->(void)
(	O
ctx	*(void)
,	O
value	*(void)
)	O
;	O
}	O
}	O
}	O
}	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
wget_metalink_parse	(*(char))->(*(struct(*(char),*(struct),*(struct),*(struct),long)))
(	O
const	O
char	O
*	O
xml	*(char)
)	O
{	O
if	O
(	O
!	O
xml	*(char)
)	O
return	O
NULL	O
;	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
)	O
)	O
;	O
metalink_context	struct(*(struct(*(char),*(struct),*(struct),*(struct),long)),int,array(char),array(char),array(char),long long)
ctx	*(void)
=	O
{	O
.	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
=	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
,	O
.	O
priority	int
=	O
999999	int
,	O
.	O
location	*(char)
=	O
"-"	*(char)
}	O
;	O
if	O
(	O
wget_xml_parse_buffer	(*(char),*((*(void),int,*(char),*(char),*(char),long,long)->(void)),*(void),int)->(int)
(	O
xml	*(char)
,	O
metalink_parse	(*(void),int,*(char),*(char),*(char),long,long)->(void)
,	O
&	O
ctx	*(void)
,	O
0	int
)	O
!=	O
WGET_E_SUCCESS	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Error in parsing XML"	*(char)
)	O
)	O
;	O
wget_metalink_free	(*(*(struct(*(char),*(struct`),*(struct`),*(struct`),long))))->(void)
(	O
&	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
;	O
}	O
return	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
;	O
}	O
void	O
wget_metalink_free	(*(*(struct(*(char),*(struct`),*(struct`),*(struct`),long))))->(void)
(	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
{	O
if	O
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
&&	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
{	O
xfree	O
(	O
(	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
->	O
name	*(char)
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
(	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
->	O
mirrors	*(struct)
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
(	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
->	O
hashes	*(struct)
)	O
;	O
wget_vector_free	(*(*(struct)))->(void)
(	O
&	O
(	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
->	O
pieces	*(struct)
)	O
;	O
xfree	O
(	O
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
;	O
}	O
}	O
WGET_GCC_PURE	O
static	O
int	O
compare_mirror	(*(*(struct(*(struct`),int,array(char)))),*(*(struct(*(struct`),int,array(char)))))->(int)
(	O
wget_metalink_mirror	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))
*	O
*	O
m1	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))))
,	O
wget_metalink_mirror	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))
*	O
*	O
m2	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))))
)	O
{	O
return	O
(	O
*	O
m1	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))))
)	O
->	O
priority	int
-	O
(	O
*	O
m2	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),int,array(char))))
)	O
->	O
priority	int
;	O
}	O
void	O
wget_metalink_sort_mirrors	(*(struct(*(char),*(struct),*(struct),*(struct),long)))->(void)
(	O
wget_metalink	struct(*(char),*(struct),*(struct),*(struct),long)
*	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
{	O
if	O
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
{	O
wget_vector_setcmpfunc	(*(struct),*((*(void),*(void))->(int)))->(void)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
mirrors	*(struct)
,	O
(	O
wget_vector_compare_fn	(*(void),*(void))->(int)
*	O
)	O
compare_mirror	(*(*(struct(*(struct`),int,array(char)))),*(*(struct(*(struct`),int,array(char)))))->(int)
)	O
;	O
wget_vector_sort	(*(struct))->(void)
(	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
mirrors	*(struct)
)	O
;	O
}	O
}	O
