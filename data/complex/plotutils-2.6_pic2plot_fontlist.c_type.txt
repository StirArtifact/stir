static	O
char	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
+	O
1	int
]	O
=	O
"                                   "	*(char)
;	O
struct	O
plHersheyFontInfoStruct	struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int))
{	O
const	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
othername	*(char)
;	O
const	O
char	O
*	O
orig_name	*(char)
;	O
short	O
chars	array(short)
[	O
256	int
]	O
;	O
int	O
typeface_index	int
;	O
int	O
font_index	int
;	O
bool	enum(int,int)
obliquing	enum(int,int)
;	O
bool	enum(int,int)
iso8859_1	enum(int,int)
;	O
bool	enum(int,int)
visible	enum(int,int)
;	O
}	O
;	O
struct	O
plPSFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int))
{	O
const	O
char	O
*	O
ps_name	*(char)
;	O
const	O
char	O
*	O
ps_name_alt	*(char)
;	O
const	O
char	O
*	O
ps_name_alt2	*(char)
;	O
const	O
char	O
*	O
x_name	*(char)
;	O
const	O
char	O
*	O
x_name_alt	*(char)
;	O
const	O
char	O
*	O
x_name_alt2	*(char)
;	O
const	O
char	O
*	O
x_name_alt3	*(char)
;	O
const	O
char	O
*	O
css_family	*(char)
;	O
const	O
char	O
*	O
css_generic_family	*(char)
;	O
const	O
char	O
*	O
css_style	*(char)
;	O
const	O
char	O
*	O
css_weight	*(char)
;	O
const	O
char	O
*	O
css_stretch	*(char)
;	O
const	O
char	O
*	O
css_panose	*(char)
;	O
int	O
pcl_typeface	int
;	O
int	O
hpgl_spacing	int
;	O
int	O
hpgl_posture	int
;	O
int	O
hpgl_stroke_weight	int
;	O
int	O
hpgl_symbol_set	int
;	O
int	O
font_ascent	int
;	O
int	O
font_descent	int
;	O
int	O
font_cap_height	int
;	O
int	O
font_x_height	int
;	O
short	O
width	array(short)
[	O
256	int
]	O
;	O
short	O
offset	int
[	O
256	int
]	O
;	O
int	O
typeface_index	int
;	O
int	O
font_index	int
;	O
int	O
fig_id	int
;	O
bool	enum(int,int)
iso8859_1	enum(int,int)
;	O
}	O
;	O
struct	O
plPCLFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int))
{	O
const	O
char	O
*	O
ps_name	*(char)
;	O
const	O
char	O
*	O
ps_name_alt	*(char)
;	O
const	O
char	O
*	O
substitute_ps_name	*(char)
;	O
const	O
char	O
*	O
x_name	*(char)
;	O
const	O
char	O
*	O
css_family	*(char)
;	O
const	O
char	O
*	O
css_generic_family	*(char)
;	O
const	O
char	O
*	O
css_style	*(char)
;	O
const	O
char	O
*	O
css_weight	*(char)
;	O
const	O
char	O
*	O
css_stretch	*(char)
;	O
const	O
char	O
*	O
css_panose	*(char)
;	O
int	O
pcl_typeface	int
;	O
int	O
hpgl_spacing	int
;	O
int	O
hpgl_posture	int
;	O
int	O
hpgl_stroke_weight	int
;	O
int	O
hpgl_symbol_set	int
;	O
int	O
font_ascent	int
;	O
int	O
font_descent	int
;	O
int	O
font_cap_height	int
;	O
int	O
font_x_height	int
;	O
short	O
width	array(short)
[	O
256	int
]	O
;	O
short	O
offset	int
[	O
256	int
]	O
;	O
int	O
typeface_index	int
;	O
int	O
font_index	int
;	O
bool	enum(int,int)
iso8859_1	enum(int,int)
;	O
}	O
;	O
struct	O
plStickFontInfoStruct	struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int))
{	O
const	O
char	O
*	O
ps_name	*(char)
;	O
bool	enum(int,int)
basic	enum(int,int)
;	O
int	O
pcl_typeface	int
;	O
int	O
hpgl_spacing	int
;	O
int	O
hpgl_posture	int
;	O
int	O
hpgl_stroke_weight	int
;	O
int	O
hpgl_symbol_set	int
;	O
int	O
font_ascent	int
;	O
int	O
font_descent	int
;	O
int	O
raster_width_lower	int
;	O
int	O
raster_height_lower	int
;	O
int	O
raster_width_upper	int
;	O
int	O
raster_height_upper	int
;	O
int	O
hpgl_charset_lower	int
;	O
int	O
hpgl_charset_upper	int
;	O
int	O
kerning_table_lower	int
;	O
int	O
kerning_table_upper	int
;	O
char	O
width	array(short)
[	O
256	int
]	O
;	O
int	O
offset	int
;	O
int	O
typeface_index	int
;	O
int	O
font_index	int
;	O
bool	enum(int,int)
obliquing	enum(int,int)
;	O
bool	enum(int,int)
iso8859_1	enum(int,int)
;	O
}	O
;	O
static	O
const	O
char	O
*	O
_known_devices	array(*(char))
[	O
]	O
=	O
{	O
"pnm"	*(char)
,	O
"gif"	*(char)
,	O
"svg"	*(char)
,	O
"ai"	*(char)
,	O
"ps"	*(char)
,	O
"cgm"	*(char)
,	O
"fig"	*(char)
,	O
"pcl"	*(char)
,	O
"hpgl"	*(char)
,	O
"regis"	*(char)
,	O
"tek"	*(char)
,	O
"meta"	*(char)
,	O
NULL	O
}	O
;	O
int	O
display_fonts	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
output_format	*(char)
,	O
const	O
char	O
*	O
progname	*(char)
)	O
{	O
plPlotter	struct
*	O
plotter	*(struct)
;	O
plPlotterParams	struct
*	O
plotter_params	*(struct)
;	O
int	O
numfonts	int
,	O
numpairs	int
,	O
i	int
,	O
j	int
,	O
k	int
;	O
bool	enum(int,int)
found	enum(int,int)
=	O
false	int
,	O
odd	enum(int,int)
;	O
const	O
char	O
*	O
*	O
device_ptr	*(*(char))
=	O
_known_devices	array(*(char))
;	O
while	O
(	O
*	O
device_ptr	*(*(char))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
output_format	*(char)
,	O
*	O
device_ptr	*(*(char))
++	O
)	O
==	O
0	int
)	O
{	O
found	enum(int,int)
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
found	enum(int,int)
==	O
false	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
output_format	*(char)
,	O
"meta"	*(char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"To list available fonts, type `%s -T \"format\" --help-fonts',\nwhere \"format\" is the output format, and is one of:\npnm or gif (bitmap formats), or\nsvg, ps, ai, cgm, fig, pcl, hpgl, regis, tek (vector formats).\n"	*(char)
,	O
progname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
plotter_params	*(struct)
=	O
pl_newplparams	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
(	O
plotter	*(struct)
=	O
pl_newpl_r	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct))->(*(struct))
(	O
output_format	*(char)
,	O
NULL	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
plotter_params	*(struct)
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: no font information on display device \"%s\" is available\n"	*(char)
,	O
progname	*(char)
,	O
output_format	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"HERSHEY_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plHersheyFontInfoStruct	struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int))
*	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
=	O
(	O
const	O
struct	O
plHersheyFontInfoStruct	struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int))
*	O
)	O
_pl_get_hershey_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
int	O
visible_num	int
;	O
numfonts	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
if	O
(	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
visible	enum(int,int)
)	O
numfonts	int
++	O
;	O
odd	enum(int,int)
=	O
(	O
numfonts	int
%	O
2	int
==	O
1	int
?	O
true	int
:	O
false	int
)	O
;	O
numpairs	int
=	O
numfonts	int
/	O
2	int
;	O
j	int
=	O
0	int
;	O
k	int
=	O
0	int
;	O
visible_num	int
=	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
if	O
(	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
visible	enum(int,int)
)	O
{	O
visible_num	int
++	O
;	O
if	O
(	O
visible_num	int
==	O
0	int
)	O
j	int
=	O
i	int
;	O
else	O
if	O
(	O
visible_num	int
==	O
numpairs	int
+	O
(	O
odd	enum(int,int)
?	O
1	int
:	O
0	int
)	O
)	O
k	int
=	O
i	int
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Names of supported Hershey vector fonts (case-insensitive):\n"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numpairs	int
;	O
i	int
++	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
j	int
]	O
.	O
name	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s"	*(char)
,	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
j	int
]	O
.	O
name	*(char)
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
'\0'	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
spaces	array(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
' '	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
k	int
]	O
.	O
name	*(char)
)	O
;	O
do	O
j	int
++	O
;	O
while	O
(	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
j	int
]	O
.	O
visible	enum(int,int)
==	O
false	int
)	O
;	O
if	O
(	O
i	int
<	O
numpairs	int
-	O
1	int
)	O
{	O
do	O
k	int
++	O
;	O
while	O
(	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
k	int
]	O
.	O
visible	enum(int,int)
==	O
false	int
)	O
;	O
}	O
}	O
if	O
(	O
odd	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s\n"	*(char)
,	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
j	int
]	O
.	O
name	*(char)
)	O
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"STICK_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plStickFontInfoStruct	struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int))
*	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
=	O
(	O
const	O
struct	O
plStickFontInfoStruct	struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int))
*	O
)	O
_pl_get_stick_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
int	O
extra_fonts	int
,	O
*	O
goodfonts	*(int)
;	O
numfonts	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
numfonts	int
++	O
;	O
extra_fonts	int
=	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"EXTRA_STICK_FONTS"	*(char)
)	O
;	O
goodfonts	*(int)
=	O
(	O
int	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
numfonts	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
extra_fonts	int
&&	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
basic	enum(int,int)
==	O
false	int
)	O
continue	O
;	O
goodfonts	*(int)
[	O
j	int
++	O
]	O
=	O
i	int
;	O
}	O
numfonts	int
=	O
j	int
;	O
odd	enum(int,int)
=	O
(	O
numfonts	int
%	O
2	int
==	O
1	int
?	O
true	int
:	O
false	int
)	O
;	O
numpairs	int
=	O
numfonts	int
/	O
2	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Names of supported HP vector fonts (case-insensitive):\n"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
,	O
k	int
=	O
numpairs	int
+	O
(	O
odd	enum(int,int)
?	O
1	int
:	O
0	int
)	O
;	O
i	int
<	O
numpairs	int
;	O
i	int
++	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
goodfonts	*(int)
[	O
j	int
]	O
]	O
.	O
ps_name	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s"	*(char)
,	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
goodfonts	*(int)
[	O
j	int
++	O
]	O
]	O
.	O
ps_name	*(char)
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
'\0'	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
spaces	array(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
' '	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
goodfonts	*(int)
[	O
k	int
++	O
]	O
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
if	O
(	O
odd	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s\n"	*(char)
,	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
goodfonts	*(int)
[	O
j	int
]	O
]	O
.	O
ps_name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
goodfonts	*(int)
)	O
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"PCL_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plPCLFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int))
*	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
=	O
(	O
const	O
struct	O
plPCLFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int))
*	O
)	O
_pl_get_pcl_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
numfonts	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
numfonts	int
++	O
;	O
odd	enum(int,int)
=	O
(	O
numfonts	int
%	O
2	int
==	O
1	int
?	O
true	int
:	O
false	int
)	O
;	O
numpairs	int
=	O
numfonts	int
/	O
2	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Names of supported PCL fonts (case-insensitive):\n"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
,	O
k	int
=	O
numpairs	int
+	O
(	O
odd	enum(int,int)
?	O
1	int
:	O
0	int
)	O
;	O
i	int
<	O
numpairs	int
;	O
i	int
++	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
j	int
]	O
.	O
ps_name	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s"	*(char)
,	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
j	int
++	O
]	O
.	O
ps_name	*(char)
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
'\0'	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
spaces	array(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
' '	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
k	int
++	O
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
if	O
(	O
odd	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s\n"	*(char)
,	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
j	int
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"PS_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plPSFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int))
*	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
=	O
(	O
const	O
struct	O
plPSFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int))
*	O
)	O
_pl_get_ps_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
numfonts	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
numfonts	int
++	O
;	O
odd	enum(int,int)
=	O
(	O
numfonts	int
%	O
2	int
==	O
1	int
?	O
true	int
:	O
false	int
)	O
;	O
numpairs	int
=	O
numfonts	int
/	O
2	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Names of supported Postscript fonts (case-insensitive):\n"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
,	O
k	int
=	O
numpairs	int
+	O
(	O
odd	enum(int,int)
?	O
1	int
:	O
0	int
)	O
;	O
i	int
<	O
numpairs	int
;	O
i	int
++	O
)	O
{	O
int	O
len	int
;	O
len	int
=	O
strlen	(*(char))->(long)
(	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
j	int
]	O
.	O
ps_name	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s"	*(char)
,	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
j	int
++	O
]	O
.	O
ps_name	*(char)
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
'\0'	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
spaces	array(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
spaces	array(char)
[	O
MAX_FONTNAME_LEN	int
-	O
len	int
]	O
=	O
' '	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
k	int
++	O
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
if	O
(	O
odd	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\t%s\n"	*(char)
,	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
j	int
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
output_format	*(char)
,	O
"X"	*(char)
)	O
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Most core X Window System fonts, such as charter-medium-r-normal,\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"can also be used.\n"	*(char)
)	O
;	O
}	O
return	O
1	int
;	O
}	O
int	O
list_fonts	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
output_format	*(char)
,	O
const	O
char	O
*	O
progname	*(char)
)	O
{	O
plPlotter	struct
*	O
plotter	*(struct)
;	O
plPlotterParams	struct
*	O
plotter_params	*(struct)
;	O
bool	enum(int,int)
found	enum(int,int)
=	O
false	int
;	O
int	O
i	int
;	O
const	O
char	O
*	O
*	O
device_ptr	*(*(char))
=	O
_known_devices	array(*(char))
;	O
while	O
(	O
*	O
device_ptr	*(*(char))
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
output_format	*(char)
,	O
*	O
device_ptr	*(*(char))
++	O
)	O
==	O
0	int
)	O
{	O
found	enum(int,int)
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
found	enum(int,int)
==	O
false	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: no font information on display device \"%s\" is available\n"	*(char)
,	O
progname	*(char)
,	O
output_format	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
plotter_params	*(struct)
=	O
pl_newplparams	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
(	O
plotter	*(struct)
=	O
pl_newpl_r	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct))->(*(struct))
(	O
output_format	*(char)
,	O
NULL	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
plotter_params	*(struct)
)	O
)	O
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: no font information on display device \"%s\" is available\n"	*(char)
,	O
progname	*(char)
,	O
output_format	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"HERSHEY_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plHersheyFontInfoStruct	struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int))
*	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
=	O
(	O
const	O
struct	O
plHersheyFontInfoStruct	struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int))
*	O
)	O
_pl_get_hershey_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
if	O
(	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
visible	enum(int,int)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
hershey_font_info	*(struct(*(char),*(char),*(char),array(short),int,int,enum(int,int),enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"STICK_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plStickFontInfoStruct	struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int))
*	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
=	O
(	O
const	O
struct	O
plStickFontInfoStruct	struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int))
*	O
)	O
_pl_get_stick_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
int	O
extra_fonts	int
=	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"EXTRA_STICK_FONTS"	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
extra_fonts	int
&&	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
basic	enum(int,int)
==	O
false	int
)	O
continue	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
stick_font_info	*(struct(*(char),enum(int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,array(char),int,int,int,enum(int,int),enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"PCL_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plPCLFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int))
*	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
=	O
(	O
const	O
struct	O
plPCLFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int))
*	O
)	O
_pl_get_pcl_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
pcl_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
if	O
(	O
pl_havecap_r	(*(struct),*(char))->(int)
(	O
plotter	*(struct)
,	O
"PS_FONTS"	*(char)
)	O
)	O
{	O
const	O
struct	O
plPSFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int))
*	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
=	O
(	O
const	O
struct	O
plPSFontInfoStruct	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int))
*	O
)	O
_pl_get_ps_font_info	(*(struct))->(*(void))
(	O
plotter	*(struct)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
;	O
i	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
ps_font_info	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),int,int,int,int,int,int,int,int,int,array(short),array(short),int,int,int,enum(int,int)))
[	O
i	int
]	O
.	O
ps_name	*(char)
)	O
;	O
}	O
return	O
1	int
;	O
}	O
