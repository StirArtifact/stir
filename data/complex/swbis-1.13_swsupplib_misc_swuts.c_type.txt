static	O
void	O
swuts_store_value	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(*(char)),*(char))->(void)
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
char	O
*	O
*	O
dest	*(struct(*(char),*(char),int,int,int,char,int))
,	O
char	O
*	O
source	*(char)
)	O
{	O
if	O
(	O
*	O
dest	*(struct(*(char),*(char),int,int,int,char,int))
)	O
free	(*(void))->(void)
(	O
*	O
dest	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
*	O
dest	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strdup	(*(char))->(*(char))
(	O
source	*(char)
)	O
;	O
}	O
static	O
int	O
compare_name	(*(char),*(char),int)->(int)
(	O
char	O
*	O
target	*(char)
,	O
char	O
*	O
sw	*(char)
,	O
int	O
verbose	int
)	O
{	O
int	O
ret	int
;	O
if	O
(	O
sw	*(char)
==	O
NULL	O
||	O
strlen	(*(char))->(long)
(	O
sw	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
target	*(char)
==	O
NULL	O
||	O
strlen	(*(char))->(long)
(	O
target	*(char)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
ret	int
=	O
fnmatch	(*(char),*(char),int)->(int)
(	O
sw	*(char)
,	O
target	*(char)
,	O
0	int
)	O
;	O
return	O
ret	int
;	O
}	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
swuts_create	()->(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)))
(	O
void	O
)	O
{	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
=	O
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
)	O
)	O
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
=	O
NULL	O
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
=	O
NULL	O
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
=	O
NULL	O
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
=	O
NULL	O
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
arch_tripletM	*(char)
=	O
NULL	O
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_machineM	char
=	O
0	int
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_sysnameM	char
=	O
0	int
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_releaseM	char
=	O
0	int
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_versionM	char
=	O
0	int
;	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
match_resultM	int
=	O
-	O
1	int
;	O
return	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
;	O
}	O
void	O
swuts_delete	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)))->(void)
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
)	O
{	O
if	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
)	O
free	(*(void))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
)	O
;	O
if	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
)	O
free	(*(void))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
)	O
;	O
if	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
)	O
free	(*(void))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
)	O
;	O
if	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
)	O
free	(*(void))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
)	O
;	O
if	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
arch_tripletM	*(char)
)	O
free	(*(void))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
arch_tripletM	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
)	O
;	O
}	O
int	O
swuts_read_from_events	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(char))->(int)
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
char	O
*	O
events	*(char)
)	O
{	O
char	O
*	O
line	*(char)
;	O
char	O
*	O
value	int
;	O
char	O
*	O
attribute	*(*(char))
;	O
int	O
ret	int
=	O
0	int
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
line	*(char)
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
events	*(char)
,	O
"\r\n"	*(char)
)	O
;	O
while	O
(	O
line	*(char)
)	O
{	O
ret	int
=	O
swevent_parse_attribute_event	(*(char),*(*(char)),*(*(char)))->(int)
(	O
line	*(char)
,	O
&	O
attribute	*(*(char))
,	O
&	O
value	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_os_name	*(char)
)	O
==	O
0	int
)	O
{	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_os_version	*(char)
)	O
==	O
0	int
)	O
{	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_os_release	*(char)
)	O
==	O
0	int
)	O
{	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_machine_type	*(char)
)	O
==	O
0	int
)	O
{	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_architecture	*(char)
)	O
==	O
0	int
)	O
{	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
arch_tripletM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	int
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"bad message in swi_uts_read_from_events: %s\n"	*(char)
,	O
attribute	*(*(char))
)	O
;	O
ret	int
=	O
-	O
1	int
;	O
}	O
}	O
line	*(char)
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
NULL	O
,	O
"\r\n"	*(char)
)	O
;	O
}	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
swuts_read_from_swdef	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)))->(int)
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
)	O
{	O
return	O
0	int
;	O
}	O
int	O
swuts_compare	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),int)->(int)
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts_target	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
int	O
verbose	int
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
compare_name	(*(char),*(char),int)->(int)
(	O
uts_target	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
,	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
,	O
verbose	int
)	O
;	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_sysnameM	char
=	O
ret	int
;	O
ret	int
=	O
compare_name	(*(char),*(char),int)->(int)
(	O
uts_target	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
,	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
,	O
verbose	int
)	O
;	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_machineM	char
=	O
ret	int
;	O
ret	int
=	O
compare_name	(*(char),*(char),int)->(int)
(	O
uts_target	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
,	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
,	O
verbose	int
)	O
;	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_releaseM	char
=	O
ret	int
;	O
ret	int
=	O
compare_name	(*(char),*(char),int)->(int)
(	O
uts_target	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
,	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
,	O
verbose	int
)	O
;	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_versionM	char
=	O
ret	int
;	O
if	O
(	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_sysnameM	char
==	O
0	int
&&	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_machineM	char
==	O
0	int
&&	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_releaseM	char
==	O
0	int
&&	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
result_versionM	char
==	O
0	int
&&	O
1	int
)	O
{	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
match_resultM	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
uts_swdef	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
match_resultM	int
=	O
1	int
;	O
return	O
1	int
;	O
}	O
}	O
void	O
swuts_add_attribute	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(char),*(char))->(void)
(	O
SWUTS	struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)
*	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
char	O
*	O
attribute	*(*(char))
,	O
char	O
*	O
value	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_os_name	*(char)
)	O
==	O
0	int
)	O
{	O
swuts_store_value	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(*(char)),*(char))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
&	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
sysnameM	*(char)
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_os_version	*(char)
)	O
==	O
0	int
)	O
{	O
swuts_store_value	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(*(char)),*(char))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
&	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
versionM	*(char)
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_os_release	*(char)
)	O
==	O
0	int
)	O
{	O
swuts_store_value	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(*(char)),*(char))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
&	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
releaseM	*(char)
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_machine_type	*(char)
)	O
==	O
0	int
)	O
{	O
swuts_store_value	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(*(char)),*(char))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
&	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
machineM	*(char)
)	O
,	O
value	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
attribute	*(*(char))
,	O
SW_A_architecture	*(char)
)	O
==	O
0	int
)	O
{	O
swuts_store_value	(*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int)),*(*(char)),*(char))->(void)
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
,	O
&	O
(	O
uts	*(struct(*(char),*(char),*(char),*(char),*(char),char,char,char,char,int))
->	O
arch_tripletM	*(char)
)	O
,	O
value	int
)	O
;	O
}	O
}	O
int	O
swuts_is_uts_attribute	(*(char))->(int)
(	O
char	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
SW_A_os_name	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
SW_A_os_release	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
SW_A_os_version	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
SW_A_machine_type	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
SW_A_architecture	*(char)
)	O
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
