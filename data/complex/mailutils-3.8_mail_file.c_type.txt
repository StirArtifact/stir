static	O
mu_url_t	*(struct)
prev_url	*(struct)
;	O
int	O
mail_expand_name	(*(char),*(*(struct)))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
mu_url_t	*(struct)
*	O
purl	*(*(struct))
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
exp	*(char)
=	O
NULL	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"#"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
prev_url	*(struct)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"No previous file"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
rc	int
=	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
prev_url	*(struct)
,	O
purl	*(*(struct))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_url_dup"	*(char)
,	O
exp	*(char)
,	O
rc	int
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
secondary_url	*(struct)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"@"	*(char)
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
secondary_url	*(struct)
,	O
purl	*(*(struct))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_url_dup"	*(char)
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
secondary_url	*(struct)
)	O
,	O
rc	int
)	O
;	O
return	O
rc	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"&"	*(char)
)	O
==	O
0	int
)	O
{	O
name	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MBOX"	*(char)
)	O
;	O
if	O
(	O
!	O
name	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"MBOX environment variable not set"	*(char)
)	O
)	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
rc	int
=	O
mu_mailbox_expand_name	(*(char),*(*(char)))->(int)
(	O
name	*(char)
,	O
&	O
exp	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Failed to expand %s: %s"	*(char)
)	O
,	O
name	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
rc	int
=	O
mu_url_create	(*(*(struct)),*(char))->(int)
(	O
purl	*(*(struct))
,	O
exp	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_url_create"	*(char)
,	O
exp	*(char)
,	O
rc	int
)	O
;	O
free	(*(void))->(void)
(	O
exp	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mail_file	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
)	O
{	O
mail_summary	(int,*(*(char)))->(int)
(	O
0	int
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
==	O
2	int
)	O
{	O
mu_url_t	*(struct)
url	*(char)
,	O
tmp_url	*(struct)
;	O
mu_mailbox_t	*(struct)
newbox	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
if	O
(	O
mail_expand_name	(*(char),*(*(struct)))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
&	O
url	*(char)
)	O
)	O
return	O
1	int
;	O
status	int
=	O
mu_mailbox_create_from_url	(*(*(struct)),*(struct))->(int)
(	O
&	O
newbox	*(struct)
,	O
url	*(char)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Cannot create mailbox %s: %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
url	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
mu_mailbox_attach_ticket	(*(struct))->(int)
(	O
newbox	*(struct)
)	O
;	O
if	O
(	O
(	O
status	int
=	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
newbox	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
)	O
!=	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Cannot open mailbox %s: %s"	*(char)
)	O
,	O
mu_url_to_string	(*(struct))->(*(char))
(	O
url	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
newbox	*(struct)
)	O
;	O
return	O
1	int
;	O
}	O
page_invalidate	(int)->(void)
(	O
1	int
)	O
;	O
mu_mailbox_get_url	(*(struct),*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
&	O
url	*(char)
)	O
;	O
mu_url_dup	(*(struct),*(*(struct)))->(int)
(	O
url	*(char)
,	O
&	O
tmp_url	*(struct)
)	O
;	O
if	O
(	O
mail_mbox_close	()->(int)
(	O
)	O
)	O
{	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp_url	*(struct)
)	O
;	O
mu_mailbox_close	(*(struct))->(int)
(	O
newbox	*(struct)
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
newbox	*(struct)
)	O
;	O
return	O
1	int
;	O
}	O
mu_url_destroy	(*(*(struct)))->(void)
(	O
&	O
prev_url	*(struct)
)	O
;	O
prev_url	*(struct)
=	O
tmp_url	*(struct)
;	O
mbox	*(struct)
=	O
newbox	*(struct)
;	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
total	long
)	O
;	O
set_cursor	(int)->(void)
(	O
1	int
)	O
;	O
if	O
(	O
mailvar_is_true	(*(char))->(int)
(	O
mailvar_name_header	*(char)
)	O
)	O
{	O
util_do_command	(*(char))->(int)
(	O
"summary"	*(char)
)	O
;	O
util_do_command	(*(char))->(int)
(	O
"headers"	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"%s takes only one argument"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
