struct	O
spec	O
{	O
void	O
*	O
base	O
;	O
}	O
;	O
struct	O
char_range	O
{	O
ucs4_t	O
start	O
;	O
ucs4_t	O
end	O
;	O
}	O
;	O
static	O
const	O
struct	O
char_range	O
name_chars1	O
[	O
]	O
=	O
{	O
{	O
':'	O
,	O
':'	O
}	O
,	O
{	O
'A'	O
,	O
'Z'	O
}	O
,	O
{	O
'_'	O
,	O
'_'	O
}	O
,	O
{	O
'a'	O
,	O
'z'	O
}	O
,	O
{	O
0xC0	int
,	O
0xD6	int
}	O
,	O
{	O
0xD8	int
,	O
0xF6	int
}	O
,	O
{	O
0xF8	int
,	O
0x2FF	int
}	O
,	O
{	O
0x370	int
,	O
0x37D	int
}	O
,	O
{	O
0x37F	int
,	O
0x1FFF	int
}	O
,	O
{	O
0x200C	int
,	O
0x200D	int
}	O
,	O
{	O
0x2070	int
,	O
0x218F	int
}	O
,	O
{	O
0x2C00	int
,	O
0x2FEF	int
}	O
,	O
{	O
0x3001	int
,	O
0xD7FF	int
}	O
,	O
{	O
0xF900	int
,	O
0xFDCF	int
}	O
,	O
{	O
0xFDF0	int
,	O
0xFFFD	int
}	O
,	O
{	O
0x10000	int
,	O
0xEFFFF	int
}	O
}	O
;	O
static	O
const	O
struct	O
char_range	O
name_chars2	O
[	O
]	O
=	O
{	O
{	O
'-'	O
,	O
'-'	O
}	O
,	O
{	O
'.'	O
,	O
'.'	O
}	O
,	O
{	O
'0'	O
,	O
'9'	O
}	O
,	O
{	O
0xB7	int
,	O
0xB7	int
}	O
,	O
{	O
0x0300	int
,	O
0x036F	int
}	O
,	O
{	O
0x203F	int
,	O
0x2040	int
}	O
}	O
;	O
static	O
bool	bool
is_reference	O
(	O
const	O
char	O
*	O
input	O
)	O
{	O
const	O
char	O
*	O
str	O
=	O
input	O
;	O
const	O
char	O
*	O
str_limit	O
=	O
str	O
+	O
strlen	(*(char))->(long)
(	O
input	O
)	O
;	O
ucs4_t	O
uc	O
;	O
int	O
i	long
;	O
str	O
+=	O
u8_mbtouc	O
(	O
&	O
uc	O
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	O
,	O
str_limit	O
-	O
str	O
)	O
;	O
assert	O
(	O
uc	O
==	O
'&'	O
)	O
;	O
str	O
+=	O
u8_mbtouc	O
(	O
&	O
uc	O
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	O
,	O
str_limit	O
-	O
str	O
)	O
;	O
if	O
(	O
uc	O
==	O
'#'	O
)	O
{	O
str	O
+=	O
u8_mbtouc	O
(	O
&	O
uc	O
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	O
,	O
str_limit	O
-	O
str	O
)	O
;	O
if	O
(	O
uc	O
==	O
'x'	O
)	O
{	O
while	O
(	O
str	O
<	O
str_limit	O
)	O
{	O
str	O
+=	O
u8_mbtouc	O
(	O
&	O
uc	O
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	O
,	O
str_limit	O
-	O
str	O
)	O
;	O
if	O
(	O
!	O
(	O
(	O
'0'	O
<=	O
uc	O
&&	O
uc	O
<=	O
'9'	O
)	O
||	O
(	O
'A'	O
<=	O
uc	O
&&	O
uc	O
<=	O
'F'	O
)	O
||	O
(	O
'a'	O
<=	O
uc	O
&&	O
uc	O
<=	O
'f'	O
)	O
)	O
)	O
break	O
;	O
}	O
return	O
uc	O
==	O
';'	O
;	O
}	O
else	O
if	O
(	O
'0'	O
<=	O
uc	O
&&	O
uc	O
<=	O
'9'	O
)	O
{	O
while	O
(	O
str	O
<	O
str_limit	O
)	O
{	O
str	O
+=	O
u8_mbtouc	O
(	O
&	O
uc	O
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	O
,	O
str_limit	O
-	O
str	O
)	O
;	O
if	O
(	O
!	O
(	O
'0'	O
<=	O
uc	O
&&	O
uc	O
<=	O
'9'	O
)	O
)	O
break	O
;	O
}	O
return	O
uc	O
==	O
';'	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SIZEOF	O
(	O
name_chars1	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
name_chars1	O
[	O
i	long
]	O
.	O
start	O
<=	O
uc	O
&&	O
uc	O
<=	O
name_chars1	O
[	O
i	long
]	O
.	O
end	O
)	O
break	O
;	O
if	O
(	O
i	long
==	O
SIZEOF	O
(	O
name_chars1	O
)	O
)	O
return	O
false	O
;	O
while	O
(	O
str	O
<	O
str_limit	O
)	O
{	O
str	O
+=	O
u8_mbtouc	O
(	O
&	O
uc	O
,	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
str	O
,	O
str_limit	O
-	O
str	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SIZEOF	O
(	O
name_chars1	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
name_chars1	O
[	O
i	long
]	O
.	O
start	O
<=	O
uc	O
&&	O
uc	O
<=	O
name_chars1	O
[	O
i	long
]	O
.	O
end	O
)	O
break	O
;	O
if	O
(	O
i	long
==	O
SIZEOF	O
(	O
name_chars1	O
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
SIZEOF	O
(	O
name_chars2	O
)	O
;	O
i	long
++	O
)	O
if	O
(	O
name_chars2	O
[	O
i	long
]	O
.	O
start	O
<=	O
uc	O
&&	O
uc	O
<=	O
name_chars2	O
[	O
i	long
]	O
.	O
end	O
)	O
break	O
;	O
if	O
(	O
i	long
==	O
SIZEOF	O
(	O
name_chars2	O
)	O
)	O
return	O
false	O
;	O
}	O
}	O
return	O
uc	O
==	O
';'	O
;	O
}	O
return	O
false	O
;	O
}	O
static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
struct	O
spec	O
spec	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
const	O
char	O
*	O
str	O
;	O
const	O
char	O
*	O
str_limit	O
;	O
size_t	long
amp_count	O
;	O
char	O
*	O
buffer	O
,	O
*	O
bp	O
;	O
spec	O
.	O
base	O
=	O
NULL	O
;	O
str	O
=	O
format	O
;	O
str_limit	O
=	O
str	O
+	O
strlen	(*(char))->(long)
(	O
format	O
)	O
;	O
for	O
(	O
amp_count	O
=	O
0	int
;	O
str	O
<	O
str_limit	O
;	O
amp_count	O
++	O
)	O
{	O
const	O
char	O
*	O
amp	O
=	O
strchrnul	(*(char),int)->(*(char))
(	O
str	O
,	O
'&'	O
)	O
;	O
if	O
(	O
*	O
amp	O
!=	O
'&'	O
)	O
break	O
;	O
str	O
=	O
amp	O
+	O
1	int
;	O
}	O
buffer	O
=	O
xmalloc	O
(	O
amp_count	O
*	O
4	int
+	O
strlen	(*(char))->(long)
(	O
format	O
)	O
+	O
strlen	(*(char))->(long)
(	O
"<gt:kuit xmlns:gt=\""	*(char)
XML_NS	O
"\"></gt:kuit>"	*(char)
)	O
+	O
1	int
)	O
;	O
*	O
buffer	O
=	O
'\0'	O
;	O
bp	O
=	O
buffer	O
;	O
bp	O
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
bp	O
,	O
"<gt:kuit xmlns:gt=\""	*(char)
XML_NS	O
"\">"	*(char)
)	O
;	O
str	O
=	O
format	O
;	O
while	O
(	O
str	O
<	O
str_limit	O
)	O
{	O
const	O
char	O
*	O
amp	O
=	O
strchrnul	(*(char),int)->(*(char))
(	O
str	O
,	O
'&'	O
)	O
;	O
bp	O
=	O
stpncpy	(*(char),*(char),long)->(*(char))
(	O
bp	O
,	O
str	O
,	O
amp	O
-	O
str	O
)	O
;	O
if	O
(	O
*	O
amp	O
!=	O
'&'	O
)	O
break	O
;	O
bp	O
=	O
stpcpy	(*(char),*(char))->(*(char))
(	O
bp	O
,	O
is_reference	O
(	O
amp	O
)	O
?	O
"&"	*(char)
:	O
"&amp;"	*(char)
)	O
;	O
str	O
=	O
amp	O
+	O
1	int
;	O
}	O
stpcpy	(*(char),*(char))->(*(char))
(	O
bp	O
,	O
"</gt:kuit>"	*(char)
)	O
;	O
{	O
xmlDocPtr	O
doc	O
;	O
doc	O
=	O
xmlReadMemory	O
(	O
buffer	O
,	O
strlen	(*(char))->(long)
(	O
buffer	O
)	O
,	O
""	*(char)
,	O
NULL	O
,	O
XML_PARSE_NONET	O
|	O
XML_PARSE_NOWARNING	O
|	O
XML_PARSE_NOERROR	O
|	O
XML_PARSE_NOBLANKS	O
)	O
;	O
if	O
(	O
doc	O
==	O
NULL	O
)	O
{	O
xmlError	O
*	O
err	O
=	O
xmlGetLastError	O
(	O
)	O
;	O
*	O
invalid_reason	O
=	O
xasprintf	O
(	O
_	O
(	O
"error while parsing: %s"	*(char)
)	O
,	O
err	O
->	O
message	O
)	O
;	O
free	(*(void))->(void)
(	O
buffer	O
)	O
;	O
xmlFreeDoc	O
(	O
doc	O
)	O
;	O
return	O
NULL	O
;	O
}	O
free	(*(void))->(void)
(	O
buffer	O
)	O
;	O
xmlFreeDoc	O
(	O
doc	O
)	O
;	O
}	O
spec	O
.	O
base	O
=	O
formatstring_kde	O
.	O
parse	O
(	O
format	O
,	O
translated	O
,	O
fdi	O
,	O
invalid_reason	O
)	O
;	O
if	O
(	O
spec	O
.	O
base	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
result	*(*(void))
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
*	O
result	*(*(void))
=	O
spec	O
;	O
return	O
result	*(*(void))
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
descr	O
;	O
formatstring_kde	O
.	O
free	(*(void))->(void)
(	O
spec	O
->	O
base	O
)	O
;	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
descr	O
;	O
return	O
formatstring_kde	O
.	O
get_number_of_directives	O
(	O
spec	O
->	O
base	O
)	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
msgid_spec	O
=	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
msgstr_spec	O
=	O
msgstr_descr	O
;	O
return	O
formatstring_kde	O
.	O
check	O
(	O
msgid_spec	O
->	O
base	O
,	O
msgstr_spec	O
->	O
base	O
,	O
equality	O
,	O
error_logger	O
,	O
pretty_msgid	O
,	O
pretty_msgstr	O
)	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_kde_kuit	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
