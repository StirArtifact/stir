static	O
wget_hashmap	struct
*	O
hosts	*(struct)
;	O
static	O
wget_thread_mutex	*(struct)
hosts_mutex	*(struct)
;	O
static	O
int	O
qsize	int
;	O
void	O
host_init	()->(void)
(	O
void	O
)	O
{	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
hosts_mutex	*(struct)
)	O
;	O
}	O
void	O
host_exit	()->(void)
(	O
void	O
)	O
{	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
hosts_mutex	*(struct)
)	O
;	O
}	O
static	O
int	O
_host_compare	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
(	O
const	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host1	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
,	O
const	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host2	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
)	O
{	O
int	O
n	long
;	O
if	O
(	O
host1	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
scheme	enum(int,int)
!=	O
host2	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
scheme	enum(int,int)
)	O
return	O
host1	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
scheme	enum(int,int)
<	O
host2	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
scheme	enum(int,int)
?	O
-	O
1	int
:	O
1	int
;	O
if	O
(	O
(	O
n	long
=	O
wget_strcmp	(*(char),*(char))->(int)
(	O
host1	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
host	*(char)
,	O
host2	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
host	*(char)
)	O
)	O
)	O
return	O
n	long
;	O
return	O
host1	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
port	short
<	O
host2	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
port	short
?	O
-	O
1	int
:	O
(	O
host1	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
port	short
>	O
host2	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
->	O
port	short
?	O
1	int
:	O
0	int
)	O
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	*(char)
)	O
)	O
)	O
static	O
unsigned	O
int	O
_host_hash	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
(	O
const	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
unsigned	O
int	O
hash	*((*(void))->(int))
=	O
host	*(char)
->	O
port	short
;	O
const	O
unsigned	O
char	O
*	O
p	*(char)
;	O
hash	*((*(void))->(int))
=	O
hash	*((*(void))->(int))
*	O
101	int
+	O
host	*(char)
->	O
scheme	enum(int,int)
;	O
for	O
(	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
host	*(char)
->	O
host	*(char)
;	O
p	*(char)
&&	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
hash	*((*(void))->(int))
=	O
hash	*((*(void))->(int))
*	O
101	int
+	O
*	O
p	*(char)
;	O
return	O
hash	*((*(void))->(int))
;	O
}	O
static	O
void	O
_free_host_entry	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
if	O
(	O
host	*(char)
)	O
{	O
host_queue_free	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
host	*(char)
)	O
;	O
wget_robots_free	(*(*(struct)))->(void)
(	O
&	O
host	*(char)
->	O
robots	*(*(struct))
)	O
;	O
wget_xfree	O
(	O
host	*(char)
)	O
;	O
}	O
}	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host_add	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
if	O
(	O
!	O
hosts	*(struct)
)	O
{	O
hosts	*(struct)
=	O
wget_hashmap_create	(int,*((*(void))->(int)),*((*(void),*(void))->(int)))->(*(struct))
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	(*(void))->(int)
*	O
)	O
_host_hash	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
,	O
(	O
wget_hashmap_compare_fn	(*(void),*(void))->(int)
*	O
)	O
_host_compare	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
)	O
;	O
wget_hashmap_set_key_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
hosts	*(struct)
,	O
(	O
wget_hashmap_key_destructor	(*(void))->(void)
*	O
)	O
_free_host_entry	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
)	O
;	O
}	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
=	O
NULL	O
,	O
host	*(char)
=	O
{	O
.	O
scheme	enum(int,int)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
,	O
.	O
host	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
.	O
port	short
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
}	O
;	O
if	O
(	O
!	O
wget_hashmap_contains	(*(struct),*(void))->(int)
(	O
hosts	*(struct)
,	O
&	O
host	*(char)
)	O
)	O
{	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
=	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
host	*(char)
,	O
sizeof	O
(	O
host	*(char)
)	O
)	O
;	O
wget_hashmap_put	(*(struct),*(void),*(void))->(int)
(	O
hosts	*(struct)
,	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
,	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
return	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
;	O
}	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host_get	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))
(	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
{	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
,	O
host	*(char)
=	O
{	O
.	O
scheme	enum(int,int)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
scheme	enum(int,int)
,	O
.	O
host	*(char)
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
host	*(char)
,	O
.	O
port	short
=	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
port	short
}	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
if	O
(	O
!	O
hosts	*(struct)
||	O
!	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
hosts	*(struct)
,	O
&	O
host	*(char)
,	O
&	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
)	O
)	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
=	O
NULL	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
return	O
hostp	*(struct(*(char),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char),*(char),*(struct`),*(struct`),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool))
;	O
}	O
struct	O
_find_free_job_context	struct(*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)
{	O
JOB	struct
*	O
job	*(struct)
;	O
long	O
long	O
now	long long
;	O
long	O
long	O
pause	()->(int)
;	O
}	O
;	O
static	O
int	O
_search_queue_for_free_job	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
struct	O
_find_free_job_context	struct(*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)
*	O
ctx	*(void)
,	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
if	O
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
PART	struct(long,long,int,long,bool,bool)
*	O
part	*(struct(long,long,int,long,bool,bool))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
job	*(struct)
->	O
parts	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
!	O
part	*(struct(long,long,int,long,bool,bool))
->	O
inuse	bool
)	O
{	O
part	*(struct(long,long,int,long,bool,bool))
->	O
inuse	bool
=	O
1	int
;	O
part	*(struct(long,long,int,long,bool,bool))
->	O
used_by	long
=	O
wget_thread_self	()->(long)
(	O
)	O
;	O
job	*(struct)
->	O
part	*(struct(long,long,int,long,bool,bool))
=	O
part	*(struct(long,long,int,long,bool,bool))
;	O
ctx	*(void)
->	O
job	*(struct)
=	O
job	*(struct)
;	O
debug_printf	O
(	O
"dequeue chunk %d/%d %s\n"	*(char)
,	O
it	int
+	O
1	int
,	O
wget_vector_size	(*(struct))->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
,	O
job	*(struct)
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
!	O
job	*(struct)
->	O
inuse	bool
)	O
{	O
job	*(struct)
->	O
inuse	bool
=	O
job	*(struct)
->	O
done	bool
=	O
1	int
;	O
job	*(struct)
->	O
used_by	long
=	O
wget_thread_self	()->(long)
(	O
)	O
;	O
job	*(struct)
->	O
part	*(struct(long,long,int,long,bool,bool))
=	O
NULL	O
;	O
ctx	*(void)
->	O
job	*(struct)
=	O
job	*(struct)
;	O
debug_printf	O
(	O
"dequeue job %s\n"	*(char)
,	O
job	*(struct)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
WGET_GCC_NONNULL_ALL	O
_search_host_for_free_job	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
(	O
struct	O
_find_free_job_context	struct(*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)
*	O
ctx	*(void)
,	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
if	O
(	O
host	*(char)
->	O
blocked	bool
)	O
{	O
debug_printf	O
(	O
"host %s is blocked (qsize=%d)\n"	*(char)
,	O
host	*(char)
->	O
host	*(char)
,	O
host	*(char)
->	O
qsize	int
)	O
;	O
return	O
0	int
;	O
}	O
long	O
long	O
pause	()->(int)
=	O
host	*(char)
->	O
retry_ts	long long
-	O
ctx	*(void)
->	O
now	long long
;	O
if	O
(	O
pause	()->(int)
>	O
0	int
)	O
{	O
debug_printf	O
(	O
"host %s is paused %lldms\n"	*(char)
,	O
host	*(char)
->	O
host	*(char)
,	O
pause	()->(int)
)	O
;	O
if	O
(	O
!	O
ctx	*(void)
->	O
pause	()->(int)
||	O
ctx	*(void)
->	O
pause	()->(int)
<	O
pause	()->(int)
)	O
ctx	*(void)
->	O
pause	()->(int)
=	O
pause	()->(int)
;	O
return	O
0	int
;	O
}	O
if	O
(	O
host	*(char)
->	O
robot_job	*(struct)
)	O
{	O
if	O
(	O
!	O
host	*(char)
->	O
robot_job	*(struct)
->	O
inuse	bool
)	O
{	O
host	*(char)
->	O
robot_job	*(struct)
->	O
inuse	bool
=	O
host	*(char)
->	O
robot_job	*(struct)
->	O
done	bool
=	O
1	int
;	O
host	*(char)
->	O
robot_job	*(struct)
->	O
used_by	long
=	O
wget_thread_self	()->(long)
(	O
)	O
;	O
ctx	*(void)
->	O
job	*(struct)
=	O
host	*(char)
->	O
robot_job	*(struct)
;	O
debug_printf	O
(	O
"host %s dequeue robot job\n"	*(char)
,	O
host	*(char)
->	O
host	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
debug_printf	O
(	O
"robot job still in progress\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
wget_list_browse	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
host	*(char)
->	O
queue	*(struct)
,	O
(	O
wget_list_browse_fn	(*(void),*(void))->(int)
*	O
)	O
_search_queue_for_free_job	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
,	O
ctx	*(void)
)	O
;	O
return	O
!	O
!	O
ctx	*(void)
->	O
job	*(struct)
;	O
}	O
JOB	struct
*	O
host_get_job	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(long long))->(*(struct))
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
,	O
long	O
long	O
*	O
pause	()->(int)
)	O
{	O
struct	O
_find_free_job_context	struct(*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)
ctx	*(void)
=	O
{	O
.	O
now	long long
=	O
wget_get_timemillis	()->(long long)
(	O
)	O
}	O
;	O
if	O
(	O
host	*(char)
)	O
{	O
_search_host_for_free_job	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
(	O
&	O
ctx	*(void)
,	O
host	*(char)
)	O
;	O
}	O
else	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
wget_hashmap_browse	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
hosts	*(struct)
,	O
(	O
wget_hashmap_browse_fn	(*(void),*(void),*(void))->(int)
*	O
)	O
_search_host_for_free_job	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),long long,long long)),*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(int)
,	O
&	O
ctx	*(void)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
if	O
(	O
pause	()->(int)
)	O
*	O
pause	()->(int)
=	O
ctx	*(void)
.	O
pause	()->(int)
;	O
return	O
ctx	*(void)
.	O
job	*(struct)
;	O
}	O
static	O
int	O
_release_job	(*(long),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
wget_thread_id	long
*	O
ctx	*(void)
,	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
wget_thread_id	long
self	long
=	O
*	O
ctx	*(void)
;	O
if	O
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
{	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
PART	struct(long,long,int,long,bool,bool)
*	O
part	*(struct(long,long,int,long,bool,bool))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
job	*(struct)
->	O
parts	*(struct)
,	O
it	int
)	O
;	O
if	O
(	O
part	*(struct(long,long,int,long,bool,bool))
->	O
inuse	bool
&&	O
part	*(struct(long,long,int,long,bool,bool))
->	O
used_by	long
==	O
self	long
)	O
{	O
part	*(struct(long,long,int,long,bool,bool))
->	O
inuse	bool
=	O
0	int
;	O
part	*(struct(long,long,int,long,bool,bool))
->	O
used_by	long
=	O
0	int
;	O
debug_printf	O
(	O
"released chunk %d/%d %s\n"	*(char)
,	O
it	int
+	O
1	int
,	O
wget_vector_size	(*(struct))->(int)
(	O
job	*(struct)
->	O
parts	*(struct)
)	O
,	O
job	*(struct)
->	O
local_filename	*(char)
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
job	*(struct)
->	O
inuse	bool
&&	O
job	*(struct)
->	O
used_by	long
==	O
self	long
)	O
{	O
job	*(struct)
->	O
inuse	bool
=	O
job	*(struct)
->	O
done	bool
=	O
0	int
;	O
job	*(struct)
->	O
used_by	long
=	O
0	int
;	O
debug_printf	O
(	O
"released job %s\n"	*(char)
,	O
job	*(struct)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
host_release_jobs	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
if	O
(	O
!	O
host	*(char)
)	O
return	O
;	O
wget_thread_id	long
self	long
=	O
wget_thread_self	()->(long)
(	O
)	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
if	O
(	O
host	*(char)
->	O
robot_job	*(struct)
)	O
{	O
if	O
(	O
host	*(char)
->	O
robot_job	*(struct)
->	O
inuse	bool
&&	O
host	*(char)
->	O
robot_job	*(struct)
->	O
used_by	long
==	O
self	long
)	O
{	O
host	*(char)
->	O
robot_job	*(struct)
->	O
inuse	bool
=	O
host	*(char)
->	O
robot_job	*(struct)
->	O
done	bool
=	O
0	int
;	O
host	*(char)
->	O
robot_job	*(struct)
->	O
used_by	long
=	O
0	int
;	O
debug_printf	O
(	O
"released robots.txt job\n"	*(char)
)	O
;	O
}	O
}	O
wget_list_browse	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
host	*(char)
->	O
queue	*(struct)
,	O
(	O
wget_list_browse_fn	(*(void),*(void))->(int)
*	O
)	O
_release_job	(*(long),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
,	O
&	O
self	long
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
void	O
host_add_job	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
,	O
const	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
JOB	struct
*	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
;	O
debug_printf	O
(	O
"%s: job fname %s\n"	*(char)
,	O
__func__	O
,	O
job	*(struct)
->	O
local_filename	*(char)
)	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
=	O
wget_list_append	(*(*(struct)),*(void),long)->(*(void))
(	O
&	O
host	*(char)
->	O
queue	*(struct)
,	O
job	*(struct)
,	O
sizeof	O
(	O
JOB	struct
)	O
)	O
;	O
host	*(char)
->	O
qsize	int
++	O
;	O
if	O
(	O
!	O
host	*(char)
->	O
blocked	bool
)	O
qsize	int
++	O
;	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
host	*(char)
=	O
host	*(char)
;	O
if	O
(	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
debug_printf	O
(	O
"%s: %p %s\n"	*(char)
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
,	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
else	O
if	O
(	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
)	O
debug_printf	O
(	O
"%s: %p %s\n"	*(char)
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
,	O
jobp	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
metalink	*(*(struct(*(char),*(struct),*(struct),*(struct),long)))
->	O
name	*(char)
)	O
;	O
debug_printf	O
(	O
"%s: qsize %d host-qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
,	O
host	*(char)
->	O
qsize	int
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
void	O
host_add_robotstxt_job	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),bool)->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
bool	bool
http_fallback	bool
)	O
{	O
JOB	struct
*	O
job	*(struct)
;	O
job	*(struct)
=	O
job_init	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),bool)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))
(	O
NULL	O
,	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
,	O
http_fallback	bool
)	O
;	O
job	*(struct)
->	O
host	*(char)
=	O
host	*(char)
;	O
job	*(struct)
->	O
robotstxt	bool
=	O
1	int
;	O
job	*(struct)
->	O
local_filename	*(char)
=	O
get_local_filename	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(*(char))
(	O
job	*(struct)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
)	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
host	*(char)
->	O
robot_job	*(struct)
=	O
job	*(struct)
;	O
host	*(char)
->	O
qsize	int
++	O
;	O
if	O
(	O
!	O
host	*(char)
->	O
blocked	bool
)	O
qsize	int
++	O
;	O
debug_printf	O
(	O
"%s: %p %s\n"	*(char)
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
job	*(struct)
,	O
job	*(struct)
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
debug_printf	O
(	O
"%s: qsize %d host-qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
,	O
host	*(char)
->	O
qsize	int
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
static	O
void	O
_host_remove_job	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
,	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
debug_printf	O
(	O
"%s: %p\n"	*(char)
,	O
__func__	O
,	O
(	O
void	O
*	O
)	O
job	*(struct)
)	O
;	O
if	O
(	O
job	*(struct)
==	O
host	*(char)
->	O
robot_job	*(struct)
)	O
{	O
if	O
(	O
host	*(char)
->	O
robots	*(*(struct))
)	O
{	O
JOB	struct
*	O
next	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
,	O
*	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
=	O
wget_list_getfirst	(*(struct))->(*(void))
(	O
host	*(char)
->	O
queue	*(struct)
)	O
;	O
for	O
(	O
int	O
max	int
=	O
host	*(char)
->	O
qsize	int
-	O
1	int
;	O
max	int
>	O
0	int
;	O
max	int
--	O
,	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
=	O
next	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
next	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
=	O
wget_list_getnext	(*(void))->(*(void))
(	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
if	O
(	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
requested_by_user	bool
)	O
continue	O
;	O
if	O
(	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
sitemap	*(char)
)	O
continue	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
,	O
n	long
=	O
wget_robots_get_path_count	(*(struct))->(int)
(	O
host	*(char)
->	O
robots	*(*(struct))
)	O
;	O
it	int
<	O
n	long
;	O
it	int
++	O
)	O
{	O
wget_string	struct(*(char),long)
*	O
path	*(char)
=	O
wget_robots_get_path	(*(struct),int)->(*(struct(*(char),long)))
(	O
host	*(char)
->	O
robots	*(*(struct))
,	O
it	int
)	O
;	O
if	O
(	O
path	*(char)
->	O
len	long
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
path	*(char)
->	O
p	*(char)
+	O
1	int
,	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
?	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
path	*(char)
:	O
""	*(char)
,	O
path	*(char)
->	O
len	long
-	O
1	int
)	O
)	O
{	O
info_printf	O
(	O
_	O
(	O
"URL '%s' not followed (disallowed by robots.txt)\n"	*(char)
)	O
,	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
->	O
iri	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))
->	O
uri	*(char)
)	O
;	O
_host_remove_job	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
host	*(char)
,	O
thejob	*(struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*(char),*(struct`),*(struct`),*(struct`),long)),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct`),*(struct`),*(struct`),long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*(struct`),*(struct`),*(struct`),*(char),long,int,*(struct`),bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
job_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
job	*(struct)
)	O
;	O
xfree	O
(	O
host	*(char)
->	O
robot_job	*(struct)
)	O
;	O
}	O
else	O
{	O
job_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
job	*(struct)
)	O
;	O
wget_list_remove	(*(*(struct)),*(void))->(void)
(	O
&	O
host	*(char)
->	O
queue	*(struct)
,	O
job	*(struct)
)	O
;	O
}	O
host	*(char)
->	O
qsize	int
--	O
;	O
if	O
(	O
!	O
host	*(char)
->	O
blocked	bool
)	O
qsize	int
--	O
;	O
}	O
void	O
host_remove_job	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
,	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
_host_remove_job	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
host	*(char)
,	O
job	*(struct)
)	O
;	O
debug_printf	O
(	O
"%s: qsize=%d host->qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
,	O
host	*(char)
->	O
qsize	int
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
void	O
hosts_free	()->(void)
(	O
void	O
)	O
{	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
hosts	*(struct)
)	O
;	O
}	O
void	O
host_increase_failure	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
host	*(char)
->	O
failures	int
++	O
;	O
host	*(char)
->	O
retry_ts	long long
=	O
wget_get_timemillis	()->(long long)
(	O
)	O
+	O
host	*(char)
->	O
failures	int
*	O
1000	int
;	O
debug_printf	O
(	O
"%s: %s failures=%d\n"	*(char)
,	O
__func__	O
,	O
host	*(char)
->	O
host	*(char)
,	O
host	*(char)
->	O
failures	int
)	O
;	O
if	O
(	O
config	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),array(enum(int,int,int,int,int,int,int,int,int,int)),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(char),*(char),long,long long,long long,long long,bool,bool,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,short,short,enum(int,int),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char)
.	O
tries	int
&&	O
host	*(char)
->	O
failures	int
>=	O
config	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),array(enum(int,int,int,int,int,int,int,int,int,int)),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),enum(int,int))),*(char),*(char),long,long long,long long,long long,bool,bool,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,short,short,enum(int,int),char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char)
.	O
tries	int
)	O
{	O
if	O
(	O
!	O
host	*(char)
->	O
blocked	bool
)	O
{	O
host	*(char)
->	O
blocked	bool
=	O
1	int
;	O
qsize	int
-=	O
host	*(char)
->	O
qsize	int
;	O
debug_printf	O
(	O
"%s: qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
)	O
;	O
}	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
void	O
host_final_failure	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
if	O
(	O
!	O
host	*(char)
->	O
blocked	bool
)	O
{	O
host	*(char)
->	O
blocked	bool
=	O
1	int
;	O
qsize	int
-=	O
host	*(char)
->	O
qsize	int
;	O
debug_printf	O
(	O
"%s: qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
void	O
host_reset_failure	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
host	*(char)
->	O
failures	int
=	O
0	int
;	O
host	*(char)
->	O
retry_ts	long long
=	O
0	int
;	O
if	O
(	O
host	*(char)
->	O
blocked	bool
)	O
{	O
host	*(char)
->	O
blocked	bool
=	O
0	int
;	O
qsize	int
+=	O
host	*(char)
->	O
qsize	int
;	O
debug_printf	O
(	O
"%s: qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
)	O
;	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
int	O
queue_empty	()->(int)
(	O
void	O
)	O
{	O
return	O
!	O
qsize	int
;	O
}	O
static	O
int	O
_queue_free_func	(*(void),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
(	O
void	O
*	O
context	*(void)
WGET_GCC_UNUSED	O
,	O
JOB	struct
*	O
job	*(struct)
)	O
{	O
job_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
job	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
host_queue_free	(*(struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)))->(void)
(	O
HOST	struct(*(char),*(struct),*(struct),*(struct),long long,int,int,enum(int,int),short,bool)
*	O
host	*(char)
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
wget_list_browse	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
host	*(char)
->	O
queue	*(struct)
,	O
(	O
wget_list_browse_fn	(*(void),*(void))->(int)
*	O
)	O
_queue_free_func	(*(void),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(int)
,	O
NULL	O
)	O
;	O
wget_list_free	(*(*(struct)))->(void)
(	O
&	O
host	*(char)
->	O
queue	*(struct)
)	O
;	O
if	O
(	O
host	*(char)
->	O
robot_job	*(struct)
)	O
{	O
job_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(struct(*`,*`,*`,*`,long)),*(struct),*(struct),*(struct),*(struct),*(struct(*`,*`,*`,*`,long long,int,int,enum(int,int),short,bool)),*(char),*(char),*(char),*(struct(long,long,int,long,bool,bool)),*(struct(*`,*`,*`,*`,long,int,*`,bool)),long,long long,long long,int,int,int,int,int,bool,bool,bool,bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
host	*(char)
->	O
robot_job	*(struct)
)	O
;	O
xfree	O
(	O
host	*(char)
->	O
robot_job	*(struct)
)	O
;	O
}	O
if	O
(	O
!	O
host	*(char)
->	O
blocked	bool
)	O
qsize	int
-=	O
host	*(char)
->	O
qsize	int
;	O
host	*(char)
->	O
qsize	int
=	O
0	int
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hosts_mutex	*(struct)
)	O
;	O
}	O
int	O
queue_size	()->(int)
(	O
void	O
)	O
{	O
debug_printf	O
(	O
"%s: qsize=%d\n"	*(char)
,	O
__func__	O
,	O
qsize	int
)	O
;	O
return	O
qsize	int
;	O
}	O
