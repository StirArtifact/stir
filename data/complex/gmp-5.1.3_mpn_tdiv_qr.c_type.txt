void	O
mpn_tdiv_qr	O
(	O
mp_ptr	*(long)
qp	*(long)
,	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_size_t	long
qxn	long
,	O
mp_srcptr	*(long)
np	*(long)
,	O
mp_size_t	long
nn	long
,	O
mp_srcptr	*(long)
dp	*(long)
,	O
mp_size_t	long
dn	long
)	O
{	O
ASSERT_ALWAYS	O
(	O
qxn	long
==	O
0	int
)	O
;	O
ASSERT	O
(	O
nn	long
>=	O
0	int
)	O
;	O
ASSERT	O
(	O
dn	long
>=	O
0	int
)	O
;	O
ASSERT	O
(	O
dn	long
==	O
0	int
||	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
!=	O
0	int
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	*(long)
,	O
nn	long
-	O
dn	long
+	O
1	int
+	O
qxn	long
,	O
np	*(long)
,	O
nn	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
qp	*(long)
,	O
nn	long
-	O
dn	long
+	O
1	int
+	O
qxn	long
,	O
dp	*(long)
,	O
dn	long
)	O
)	O
;	O
switch	O
(	O
dn	long
)	O
{	O
case	O
0	int
:	O
DIVIDE_BY_ZERO	O
;	O
case	O
1	int
:	O
{	O
rp	*(long)
[	O
0	int
]	O
=	O
mpn_divrem_1	O
(	O
qp	*(long)
,	O
(	O
mp_size_t	long
)	O
0	int
,	O
np	*(long)
,	O
nn	long
,	O
dp	*(long)
[	O
0	int
]	O
)	O
;	O
return	O
;	O
}	O
case	O
2	int
:	O
{	O
mp_ptr	*(long)
n2p	*(long)
,	O
d2p	*(long)
;	O
mp_limb_t	long
qhl	long
,	O
cy	long
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
if	O
(	O
(	O
dp	*(long)
[	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
{	O
int	O
cnt	int
;	O
mp_limb_t	long
dtmp	array(long)
[	O
2	int
]	O
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
dp	*(long)
[	O
1	int
]	O
)	O
;	O
cnt	int
-=	O
GMP_NAIL_BITS	int
;	O
d2p	*(long)
=	O
dtmp	array(long)
;	O
d2p	*(long)
[	O
1	int
]	O
=	O
(	O
dp	*(long)
[	O
1	int
]	O
<<	O
cnt	int
)	O
|	O
(	O
dp	*(long)
[	O
0	int
]	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
)	O
;	O
d2p	*(long)
[	O
0	int
]	O
=	O
(	O
dp	*(long)
[	O
0	int
]	O
<<	O
cnt	int
)	O
&	O
GMP_NUMB_MASK	O
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
+	O
1	int
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
n2p	*(long)
,	O
np	*(long)
,	O
nn	long
,	O
cnt	int
)	O
;	O
n2p	*(long)
[	O
nn	long
]	O
=	O
cy	long
;	O
qhl	long
=	O
mpn_divrem_2	O
(	O
qp	*(long)
,	O
0L	int
,	O
n2p	*(long)
,	O
nn	long
+	O
(	O
cy	long
!=	O
0	int
)	O
,	O
d2p	*(long)
)	O
;	O
if	O
(	O
cy	long
==	O
0	int
)	O
qp	*(long)
[	O
nn	long
-	O
2	int
]	O
=	O
qhl	long
;	O
rp	*(long)
[	O
0	int
]	O
=	O
(	O
n2p	*(long)
[	O
0	int
]	O
>>	O
cnt	int
)	O
|	O
(	O
(	O
n2p	*(long)
[	O
1	int
]	O
<<	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
)	O
&	O
GMP_NUMB_MASK	O
)	O
;	O
rp	*(long)
[	O
1	int
]	O
=	O
(	O
n2p	*(long)
[	O
1	int
]	O
>>	O
cnt	int
)	O
;	O
}	O
else	O
{	O
d2p	*(long)
=	O
(	O
mp_ptr	*(long)
)	O
dp	*(long)
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
)	O
;	O
MPN_COPY	O
(	O
n2p	*(long)
,	O
np	*(long)
,	O
nn	long
)	O
;	O
qhl	long
=	O
mpn_divrem_2	O
(	O
qp	*(long)
,	O
0L	int
,	O
n2p	*(long)
,	O
nn	long
,	O
d2p	*(long)
)	O
;	O
qp	*(long)
[	O
nn	long
-	O
2	int
]	O
=	O
qhl	long
;	O
rp	*(long)
[	O
0	int
]	O
=	O
n2p	*(long)
[	O
0	int
]	O
;	O
rp	*(long)
[	O
1	int
]	O
=	O
n2p	*(long)
[	O
1	int
]	O
;	O
}	O
TMP_FREE	O
;	O
return	O
;	O
}	O
default	O
:	O
{	O
int	O
adjust	int
;	O
gmp_pi1_t	struct(long)
dinv	struct(long)
;	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
adjust	int
=	O
np	*(long)
[	O
nn	long
-	O
1	int
]	O
>=	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
;	O
if	O
(	O
nn	long
+	O
adjust	int
>=	O
2	int
*	O
dn	long
)	O
{	O
mp_ptr	*(long)
n2p	*(long)
,	O
d2p	*(long)
;	O
mp_limb_t	long
cy	long
;	O
int	O
cnt	int
;	O
qp	*(long)
[	O
nn	long
-	O
dn	long
]	O
=	O
0	int
;	O
if	O
(	O
(	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
{	O
count_leading_zeros	O
(	O
cnt	int
,	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
)	O
;	O
cnt	int
-=	O
GMP_NAIL_BITS	int
;	O
d2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
mpn_lshift	O
(	O
d2p	*(long)
,	O
dp	*(long)
,	O
dn	long
,	O
cnt	int
)	O
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
+	O
1	int
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
n2p	*(long)
,	O
np	*(long)
,	O
nn	long
,	O
cnt	int
)	O
;	O
n2p	*(long)
[	O
nn	long
]	O
=	O
cy	long
;	O
nn	long
+=	O
adjust	int
;	O
}	O
else	O
{	O
cnt	int
=	O
0	int
;	O
d2p	*(long)
=	O
(	O
mp_ptr	*(long)
)	O
dp	*(long)
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
nn	long
+	O
1	int
)	O
;	O
MPN_COPY	O
(	O
n2p	*(long)
,	O
np	*(long)
,	O
nn	long
)	O
;	O
n2p	*(long)
[	O
nn	long
]	O
=	O
0	int
;	O
nn	long
+=	O
adjust	int
;	O
}	O
invert_pi1	O
(	O
dinv	struct(long)
,	O
d2p	*(long)
[	O
dn	long
-	O
1	int
]	O
,	O
d2p	*(long)
[	O
dn	long
-	O
2	int
]	O
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
DC_DIV_QR_THRESHOLD	int
)	O
)	O
mpn_sbpi1_div_qr	O
(	O
qp	*(long)
,	O
n2p	*(long)
,	O
nn	long
,	O
d2p	*(long)
,	O
dn	long
,	O
dinv	struct(long)
.	O
inv32	long
)	O
;	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
dn	long
,	O
MUPI_DIV_QR_THRESHOLD	int
)	O
||	O
BELOW_THRESHOLD	O
(	O
nn	long
,	O
2	int
*	O
MU_DIV_QR_THRESHOLD	int
)	O
||	O
(	O
double	O
)	O
(	O
2	int
*	O
(	O
MU_DIV_QR_THRESHOLD	int
-	O
MUPI_DIV_QR_THRESHOLD	int
)	O
)	O
*	O
dn	long
+	O
(	O
double	O
)	O
MUPI_DIV_QR_THRESHOLD	int
*	O
nn	long
>	O
(	O
double	O
)	O
dn	long
*	O
nn	long
)	O
mpn_dcpi1_div_qr	O
(	O
qp	*(long)
,	O
n2p	*(long)
,	O
nn	long
,	O
d2p	*(long)
,	O
dn	long
,	O
&	O
dinv	struct(long)
)	O
;	O
else	O
{	O
mp_size_t	long
itch	long
=	O
mpn_mu_div_qr_itch	O
(	O
nn	long
,	O
dn	long
,	O
0	int
)	O
;	O
mp_ptr	*(long)
scratch	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
mpn_mu_div_qr	O
(	O
qp	*(long)
,	O
rp	*(long)
,	O
n2p	*(long)
,	O
nn	long
,	O
d2p	*(long)
,	O
dn	long
,	O
scratch	*(long)
)	O
;	O
n2p	*(long)
=	O
rp	*(long)
;	O
}	O
if	O
(	O
cnt	int
!=	O
0	int
)	O
mpn_rshift	O
(	O
rp	*(long)
,	O
n2p	*(long)
,	O
dn	long
,	O
cnt	int
)	O
;	O
else	O
MPN_COPY	O
(	O
rp	*(long)
,	O
n2p	*(long)
,	O
dn	long
)	O
;	O
TMP_FREE	O
;	O
return	O
;	O
}	O
{	O
mp_size_t	long
qn	long
;	O
mp_ptr	*(long)
n2p	*(long)
,	O
d2p	*(long)
;	O
mp_ptr	*(long)
tp	*(long)
;	O
mp_limb_t	long
cy	long
;	O
mp_size_t	long
in	long
,	O
rn	long
;	O
mp_limb_t	long
quotient_too_large	long
;	O
unsigned	O
int	O
cnt	int
;	O
qn	long
=	O
nn	long
-	O
dn	long
;	O
qp	*(long)
[	O
qn	long
]	O
=	O
0	int
;	O
qn	long
+=	O
adjust	int
;	O
if	O
(	O
qn	long
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
rp	*(long)
,	O
np	*(long)
,	O
dn	long
)	O
;	O
TMP_FREE	O
;	O
return	O
;	O
}	O
in	long
=	O
dn	long
-	O
qn	long
;	O
if	O
(	O
(	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
{	O
count_leading_zeros	O
(	O
cnt	int
,	O
dp	*(long)
[	O
dn	long
-	O
1	int
]	O
)	O
;	O
cnt	int
-=	O
GMP_NAIL_BITS	int
;	O
d2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
qn	long
)	O
;	O
mpn_lshift	O
(	O
d2p	*(long)
,	O
dp	*(long)
+	O
in	long
,	O
qn	long
,	O
cnt	int
)	O
;	O
d2p	*(long)
[	O
0	int
]	O
|=	O
dp	*(long)
[	O
in	long
-	O
1	int
]	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
qn	long
+	O
1	int
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
n2p	*(long)
,	O
np	*(long)
+	O
nn	long
-	O
2	int
*	O
qn	long
,	O
2	int
*	O
qn	long
,	O
cnt	int
)	O
;	O
if	O
(	O
adjust	int
)	O
{	O
n2p	*(long)
[	O
2	int
*	O
qn	long
]	O
=	O
cy	long
;	O
n2p	*(long)
++	O
;	O
}	O
else	O
{	O
n2p	*(long)
[	O
0	int
]	O
|=	O
np	*(long)
[	O
nn	long
-	O
2	int
*	O
qn	long
-	O
1	int
]	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
;	O
}	O
}	O
else	O
{	O
cnt	int
=	O
0	int
;	O
d2p	*(long)
=	O
(	O
mp_ptr	*(long)
)	O
dp	*(long)
+	O
in	long
;	O
n2p	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
2	int
*	O
qn	long
+	O
1	int
)	O
;	O
MPN_COPY	O
(	O
n2p	*(long)
,	O
np	*(long)
+	O
nn	long
-	O
2	int
*	O
qn	long
,	O
2	int
*	O
qn	long
)	O
;	O
if	O
(	O
adjust	int
)	O
{	O
n2p	*(long)
[	O
2	int
*	O
qn	long
]	O
=	O
0	int
;	O
n2p	*(long)
++	O
;	O
}	O
}	O
if	O
(	O
qn	long
==	O
1	int
)	O
{	O
mp_limb_t	long
q0	long
,	O
r0	long
;	O
udiv_qrnnd	O
(	O
q0	long
,	O
r0	long
,	O
n2p	*(long)
[	O
1	int
]	O
,	O
n2p	*(long)
[	O
0	int
]	O
<<	O
GMP_NAIL_BITS	int
,	O
d2p	*(long)
[	O
0	int
]	O
<<	O
GMP_NAIL_BITS	int
)	O
;	O
n2p	*(long)
[	O
0	int
]	O
=	O
r0	long
>>	O
GMP_NAIL_BITS	int
;	O
qp	*(long)
[	O
0	int
]	O
=	O
q0	long
;	O
}	O
else	O
if	O
(	O
qn	long
==	O
2	int
)	O
mpn_divrem_2	O
(	O
qp	*(long)
,	O
0L	int
,	O
n2p	*(long)
,	O
4L	int
,	O
d2p	*(long)
)	O
;	O
else	O
{	O
invert_pi1	O
(	O
dinv	struct(long)
,	O
d2p	*(long)
[	O
qn	long
-	O
1	int
]	O
,	O
d2p	*(long)
[	O
qn	long
-	O
2	int
]	O
)	O
;	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
DC_DIV_QR_THRESHOLD	int
)	O
)	O
mpn_sbpi1_div_qr	O
(	O
qp	*(long)
,	O
n2p	*(long)
,	O
2	int
*	O
qn	long
,	O
d2p	*(long)
,	O
qn	long
,	O
dinv	struct(long)
.	O
inv32	long
)	O
;	O
else	O
if	O
(	O
BELOW_THRESHOLD	O
(	O
qn	long
,	O
MU_DIV_QR_THRESHOLD	int
)	O
)	O
mpn_dcpi1_div_qr	O
(	O
qp	*(long)
,	O
n2p	*(long)
,	O
2	int
*	O
qn	long
,	O
d2p	*(long)
,	O
qn	long
,	O
&	O
dinv	struct(long)
)	O
;	O
else	O
{	O
mp_size_t	long
itch	long
=	O
mpn_mu_div_qr_itch	O
(	O
2	int
*	O
qn	long
,	O
qn	long
,	O
0	int
)	O
;	O
mp_ptr	*(long)
scratch	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
itch	long
)	O
;	O
mp_ptr	*(long)
r2p	*(long)
=	O
rp	*(long)
;	O
if	O
(	O
np	*(long)
==	O
r2p	*(long)
)	O
r2p	*(long)
+=	O
nn	long
-	O
qn	long
;	O
mpn_mu_div_qr	O
(	O
qp	*(long)
,	O
r2p	*(long)
,	O
n2p	*(long)
,	O
2	int
*	O
qn	long
,	O
d2p	*(long)
,	O
qn	long
,	O
scratch	*(long)
)	O
;	O
MPN_COPY	O
(	O
n2p	*(long)
,	O
r2p	*(long)
,	O
qn	long
)	O
;	O
}	O
}	O
rn	long
=	O
qn	long
;	O
{	O
mp_limb_t	long
dl	long
,	O
x	long
;	O
mp_limb_t	long
h	long
,	O
dummy	long
;	O
if	O
(	O
in	long
-	O
2	int
<	O
0	int
)	O
dl	long
=	O
0	int
;	O
else	O
dl	long
=	O
dp	*(long)
[	O
in	long
-	O
2	int
]	O
;	O
x	long
=	O
(	O
dp	*(long)
[	O
in	long
-	O
1	int
]	O
<<	O
cnt	int
)	O
|	O
(	O
(	O
dl	long
>>	O
1	int
)	O
>>	O
(	O
(	O
~	O
cnt	int
)	O
%	O
GMP_LIMB_BITS	int
)	O
)	O
;	O
umul_ppmm	O
(	O
h	long
,	O
dummy	long
,	O
x	long
,	O
qp	*(long)
[	O
qn	long
-	O
1	int
]	O
<<	O
GMP_NAIL_BITS	int
)	O
;	O
if	O
(	O
n2p	*(long)
[	O
qn	long
-	O
1	int
]	O
<	O
h	long
)	O
{	O
mp_limb_t	long
cy	long
;	O
mpn_decr_u	O
(	O
qp	*(long)
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
cy	long
=	O
mpn_add_n	O
(	O
n2p	*(long)
,	O
n2p	*(long)
,	O
d2p	*(long)
,	O
qn	long
)	O
;	O
if	O
(	O
cy	long
)	O
{	O
n2p	*(long)
[	O
qn	long
]	O
=	O
cy	long
;	O
++	O
rn	long
;	O
}	O
}	O
}	O
quotient_too_large	long
=	O
0	int
;	O
if	O
(	O
cnt	int
!=	O
0	int
)	O
{	O
mp_limb_t	long
cy1	long
,	O
cy2	long
;	O
cy1	long
=	O
mpn_lshift	O
(	O
n2p	*(long)
,	O
n2p	*(long)
,	O
rn	long
,	O
GMP_NUMB_BITS	O
-	O
cnt	int
)	O
;	O
n2p	*(long)
[	O
0	int
]	O
|=	O
np	*(long)
[	O
in	long
-	O
1	int
]	O
&	O
(	O
GMP_NUMB_MASK	O
>>	O
cnt	int
)	O
;	O
cy2	long
=	O
mpn_submul_1	O
(	O
n2p	*(long)
,	O
qp	*(long)
,	O
qn	long
,	O
dp	*(long)
[	O
in	long
-	O
1	int
]	O
&	O
(	O
GMP_NUMB_MASK	O
>>	O
cnt	int
)	O
)	O
;	O
if	O
(	O
qn	long
!=	O
rn	long
)	O
{	O
ASSERT_ALWAYS	O
(	O
n2p	*(long)
[	O
qn	long
]	O
>=	O
cy2	long
)	O
;	O
n2p	*(long)
[	O
qn	long
]	O
-=	O
cy2	long
;	O
}	O
else	O
{	O
n2p	*(long)
[	O
qn	long
]	O
=	O
cy1	long
-	O
cy2	long
;	O
quotient_too_large	long
=	O
(	O
cy1	long
<	O
cy2	long
)	O
;	O
++	O
rn	long
;	O
}	O
--	O
in	long
;	O
}	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
dn	long
)	O
;	O
if	O
(	O
in	long
<	O
qn	long
)	O
{	O
if	O
(	O
in	long
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
rp	*(long)
,	O
n2p	*(long)
,	O
rn	long
)	O
;	O
ASSERT_ALWAYS	O
(	O
rn	long
==	O
dn	long
)	O
;	O
goto	O
foo	O
;	O
}	O
mpn_mul	O
(	O
tp	*(long)
,	O
qp	*(long)
,	O
qn	long
,	O
dp	*(long)
,	O
in	long
)	O
;	O
}	O
else	O
mpn_mul	O
(	O
tp	*(long)
,	O
dp	*(long)
,	O
in	long
,	O
qp	*(long)
,	O
qn	long
)	O
;	O
cy	long
=	O
mpn_sub	O
(	O
n2p	*(long)
,	O
n2p	*(long)
,	O
rn	long
,	O
tp	*(long)
+	O
in	long
,	O
qn	long
)	O
;	O
MPN_COPY	O
(	O
rp	*(long)
+	O
in	long
,	O
n2p	*(long)
,	O
dn	long
-	O
in	long
)	O
;	O
quotient_too_large	long
|=	O
cy	long
;	O
cy	long
=	O
mpn_sub_n	O
(	O
rp	*(long)
,	O
np	*(long)
,	O
tp	*(long)
,	O
in	long
)	O
;	O
cy	long
=	O
mpn_sub_1	O
(	O
rp	*(long)
+	O
in	long
,	O
rp	*(long)
+	O
in	long
,	O
rn	long
,	O
cy	long
)	O
;	O
quotient_too_large	long
|=	O
cy	long
;	O
foo	O
:	O
if	O
(	O
quotient_too_large	long
)	O
{	O
mpn_decr_u	O
(	O
qp	*(long)
,	O
(	O
mp_limb_t	long
)	O
1	int
)	O
;	O
mpn_add_n	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
dp	*(long)
,	O
dn	long
)	O
;	O
}	O
}	O
TMP_FREE	O
;	O
return	O
;	O
}	O
}	O
}	O
