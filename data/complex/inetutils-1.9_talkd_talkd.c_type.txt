void	O
talkd_init	()->(void)
(	O
void	O
)	O
;	O
void	O
talkd_run	(int)->(void)
(	O
int	O
fd	int
)	O
;	O
int	O
debug	int
;	O
unsigned	O
int	O
timeout	int
=	O
30	int
;	O
time_t	long
max_idle_time	long
=	O
120	int
;	O
time_t	long
max_request_ttl	long
=	O
MAX_LIFE	int
;	O
char	O
*	O
acl_file	*(char)
;	O
char	O
*	O
hostname	*(char)
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
""	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Talk daemon."	*(char)
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Sergey Poznyakoff"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"acl"	*(char)
,	O
'a'	O
,	O
"FILE"	*(char)
,	O
0	int
,	O
"read site-wide ACLs from FILE"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"enable debugging"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"idle-timeout"	*(char)
,	O
'i'	O
,	O
"SECONDS"	*(char)
,	O
0	int
,	O
"set idle timeout value to SECONDS"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"request-ttl"	*(char)
,	O
'r'	O
,	O
"SECONDS"	*(char)
,	O
0	int
,	O
"set request time-to-live value to "	*(char)
"SECONDS"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timeout"	*(char)
,	O
't'	O
,	O
"SECONDS"	*(char)
,	O
0	int
,	O
"set timeout value to SECONDS"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(struct)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'a'	O
:	O
acl_file	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'd'	O
:	O
debug	int
++	O
;	O
break	O
;	O
case	O
't'	O
:	O
timeout	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
max_idle_time	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
max_request_ttl	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"talkd"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
read_acl	(*(char))->(void)
(	O
acl_file	*(char)
)	O
;	O
talkd_init	()->(void)
(	O
)	O
;	O
talkd_run	(int)->(void)
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
talkd_init	()->(void)
(	O
void	O
)	O
{	O
openlog	(*(char),int,int)->(void)
(	O
"talkd"	*(char)
,	O
LOG_PID	int
,	O
LOG_FACILITY	O
)	O
;	O
hostname	*(char)
=	O
localhost	()->(*(char))
(	O
)	O
;	O
if	O
(	O
!	O
hostname	*(char)
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"can't determine my hostname: %m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
}	O
time_t	long
last_msg_time	long
;	O
static	O
void	O
alarm_handler	(int)->(void)
(	O
int	O
err	long
_GL_UNUSED_PARAMETER	O
)	O
{	O
if	O
(	O
(	O
time	struct(long,long)
(	O
NULL	O
)	O
-	O
last_msg_time	long
)	O
>=	O
max_idle_time	long
)	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
alarm	(int)->(int)
(	O
timeout	int
)	O
;	O
}	O
void	O
talkd_run	(int)->(void)
(	O
int	O
fd	int
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
alarm_handler	(int)->(void)
)	O
;	O
alarm	(int)->(int)
(	O
timeout	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
rc	int
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
sa_in	*(struct(short,short,struct(int),array(char)))
;	O
CTL_MSG	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
;	O
CTL_RESPONSE	struct(char,char,char,char,int,struct(short,array(char)))
resp	struct(char,char,char,char,int,struct(short,array(char)))
;	O
socklen_t	int
len	int
;	O
len	int
=	O
sizeof	O
sa_in	*(struct(short,short,struct(int),array(char)))
;	O
rc	int
=	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
fd	int
,	O
&	O
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
,	O
sizeof	O
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa_in	*(struct(short,short,struct(int),array(char)))
,	O
&	O
len	int
)	O
;	O
if	O
(	O
rc	int
!=	O
sizeof	O
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
)	O
{	O
if	O
(	O
rc	int
<	O
0	int
&&	O
errno	O
!=	O
EINTR	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"recvfrom: %m"	*(char)
)	O
;	O
continue	O
;	O
}	O
last_msg_time	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
if	O
(	O
process_request	(*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))),*(struct(short,short,struct(int),array(char))),*(struct(char,char,char,char,int,struct(short,array(char)))))->(int)
(	O
&	O
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
,	O
&	O
sa_in	*(struct(short,short,struct(int),array(char)))
,	O
&	O
resp	struct(char,char,char,char,int,struct(short,array(char)))
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
fd	int
,	O
&	O
resp	struct(char,char,char,char,int,struct(short,array(char)))
,	O
sizeof	O
resp	struct(char,char,char,char,int,struct(short,array(char)))
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
.	O
ctl_addr	struct(short,array(char))
,	O
sizeof	O
(	O
msg	*(struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char)))
.	O
ctl_addr	struct(short,array(char))
)	O
)	O
;	O
if	O
(	O
rc	int
!=	O
sizeof	O
resp	struct(char,char,char,char,int,struct(short,array(char)))
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"sendto: %m"	*(char)
)	O
;	O
}	O
}	O
}	O
