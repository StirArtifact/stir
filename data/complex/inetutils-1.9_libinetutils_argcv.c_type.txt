static	O
int	O
argcv_scan	(int,*(char),*(char),*(int),*(int),*(int))->(int)
(	O
int	O
len	int
,	O
const	O
char	O
*	O
command	*(char)
,	O
const	O
char	O
*	O
delim	*(char)
,	O
int	O
*	O
start	*(int)
,	O
int	O
*	O
end	*(int)
,	O
int	O
*	O
save	*(int)
)	O
{	O
int	O
i	int
=	O
*	O
save	*(int)
;	O
while	O
(	O
i	int
<	O
len	int
&&	O
isws	O
(	O
command	*(char)
[	O
i	int
]	O
)	O
)	O
i	int
++	O
;	O
*	O
start	*(int)
=	O
i	int
;	O
switch	O
(	O
command	*(char)
[	O
i	int
]	O
)	O
{	O
case	O
'"'	O
:	O
case	O
'\''	O
:	O
while	O
(	O
++	O
i	int
<	O
len	int
&&	O
command	*(char)
[	O
i	int
]	O
!=	O
command	*(char)
[	O
*	O
start	*(int)
]	O
)	O
;	O
if	O
(	O
i	int
<	O
len	int
)	O
break	O
;	O
default	O
:	O
if	O
(	O
isdelim	O
(	O
command	*(char)
[	O
i	int
]	O
,	O
delim	*(char)
)	O
)	O
break	O
;	O
while	O
(	O
++	O
i	int
<	O
len	int
&&	O
!	O
(	O
isws	O
(	O
command	*(char)
[	O
i	int
]	O
)	O
||	O
isdelim	O
(	O
command	*(char)
[	O
i	int
]	O
,	O
delim	*(char)
)	O
)	O
)	O
;	O
i	int
--	O
;	O
break	O
;	O
}	O
*	O
end	*(int)
=	O
i	int
;	O
*	O
save	*(int)
=	O
i	int
+	O
1	int
;	O
return	O
*	O
save	*(int)
;	O
}	O
int	O
argcv_get	(*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
const	O
char	O
*	O
command	*(char)
,	O
const	O
char	O
*	O
delim	*(char)
,	O
int	O
*	O
argc	*(int)
,	O
char	O
*	O
*	O
*	O
argv	*(*(*(char)))
)	O
{	O
int	O
len	int
=	O
strlen	(*(char))->(long)
(	O
command	*(char)
)	O
;	O
int	O
i	int
=	O
0	int
;	O
int	O
start	*(int)
,	O
end	*(int)
,	O
save	*(int)
;	O
*	O
argc	*(int)
=	O
0	int
;	O
*	O
argv	*(*(*(char)))
=	O
NULL	O
;	O
while	O
(	O
len	int
>	O
0	int
&&	O
isspace	(int)->(int)
(	O
command	*(char)
[	O
len	int
-	O
1	int
]	O
)	O
)	O
len	int
--	O
;	O
if	O
(	O
len	int
<	O
1	int
)	O
return	O
1	int
;	O
*	O
argc	*(int)
=	O
1	int
;	O
save	*(int)
=	O
0	int
;	O
while	O
(	O
argcv_scan	(int,*(char),*(char),*(int),*(int),*(int))->(int)
(	O
len	int
,	O
command	*(char)
,	O
delim	*(char)
,	O
&	O
start	*(int)
,	O
&	O
end	*(int)
,	O
&	O
save	*(int)
)	O
<	O
len	int
)	O
(	O
*	O
argc	*(int)
)	O
++	O
;	O
*	O
argv	*(*(*(char)))
=	O
calloc	(long,long)->(*(void))
(	O
(	O
*	O
argc	*(int)
+	O
1	int
)	O
,	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
i	int
=	O
0	int
;	O
save	*(int)
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
*	O
argc	*(int)
;	O
i	int
++	O
)	O
{	O
int	O
n	int
;	O
argcv_scan	(int,*(char),*(char),*(int),*(int),*(int))->(int)
(	O
len	int
,	O
command	*(char)
,	O
delim	*(char)
,	O
&	O
start	*(int)
,	O
&	O
end	*(int)
,	O
&	O
save	*(int)
)	O
;	O
if	O
(	O
command	*(char)
[	O
start	*(int)
]	O
==	O
'"'	O
&&	O
command	*(char)
[	O
end	*(int)
]	O
==	O
'"'	O
)	O
{	O
start	*(int)
++	O
;	O
end	*(int)
--	O
;	O
}	O
else	O
if	O
(	O
command	*(char)
[	O
start	*(int)
]	O
==	O
'\''	O
&&	O
command	*(char)
[	O
end	*(int)
]	O
==	O
'\''	O
)	O
{	O
start	*(int)
++	O
;	O
end	*(int)
--	O
;	O
}	O
n	int
=	O
end	*(int)
-	O
start	*(int)
+	O
1	int
;	O
(	O
*	O
argv	*(*(*(char)))
)	O
[	O
i	int
]	O
=	O
calloc	(long,long)->(*(void))
(	O
n	int
+	O
1	int
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
(	O
*	O
argv	*(*(*(char)))
)	O
[	O
i	int
]	O
==	O
NULL	O
)	O
return	O
1	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
*	O
argv	*(*(*(char)))
)	O
[	O
i	int
]	O
,	O
&	O
command	*(char)
[	O
start	*(int)
]	O
,	O
n	int
)	O
;	O
(	O
*	O
argv	*(*(*(char)))
)	O
[	O
i	int
]	O
[	O
n	int
]	O
=	O
0	int
;	O
}	O
(	O
*	O
argv	*(*(*(char)))
)	O
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
int	O
argcv_free	(int,*(*(char)))->(int)
(	O
int	O
argc	*(int)
,	O
char	O
*	O
*	O
argv	*(*(*(char)))
)	O
{	O
while	O
(	O
--	O
argc	*(int)
>=	O
0	int
)	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
[	O
argc	*(int)
]	O
)	O
;	O
free	(*(void))->(void)
(	O
argv	*(*(*(char)))
)	O
;	O
return	O
1	int
;	O
}	O
int	O
argcv_string	(int,*(*(char)),*(*(char)))->(int)
(	O
int	O
argc	*(int)
,	O
char	O
*	O
*	O
argv	*(*(*(char)))
,	O
char	O
*	O
*	O
pstring	*(*(char))
)	O
{	O
int	O
i	int
;	O
size_t	long
len	int
;	O
char	O
*	O
buffer	*(char)
;	O
if	O
(	O
pstring	*(*(char))
==	O
NULL	O
)	O
return	O
1	int
;	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
1	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
return	O
1	int
;	O
*	O
buffer	*(char)
=	O
'\0'	O
;	O
for	O
(	O
len	int
=	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	*(int)
;	O
i	int
++	O
)	O
{	O
len	int
+=	O
strlen	(*(char))->(long)
(	O
argv	*(*(*(char)))
[	O
i	int
]	O
)	O
+	O
2	int
;	O
buffer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
len	int
)	O
;	O
if	O
(	O
buffer	*(char)
==	O
NULL	O
)	O
return	O
1	int
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
strcat	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
,	O
" "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
buffer	*(char)
,	O
argv	*(*(*(char)))
[	O
i	int
]	O
)	O
;	O
}	O
if	O
(	O
*	O
buffer	*(char)
!=	O
'\0'	O
)	O
{	O
while	O
(	O
buffer	*(char)
[	O
strlen	(*(char))->(long)
(	O
buffer	*(char)
)	O
-	O
1	int
]	O
==	O
' '	O
)	O
{	O
buffer	*(char)
[	O
strlen	(*(char))->(long)
(	O
buffer	*(char)
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
if	O
(	O
pstring	*(*(char))
)	O
*	O
pstring	*(*(char))
=	O
buffer	*(char)
;	O
return	O
0	int
;	O
}	O
