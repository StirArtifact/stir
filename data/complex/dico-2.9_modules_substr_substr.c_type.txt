static	O
int	O
substr_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
(	O
int	O
cmd	int
,	O
struct	O
dico_key	struct(*(char),*(void),*(struct(*(char),*(char),*((int,*(struct`),*(char))->(int)),*(void),int,*(struct))),int)
*	O
key	*(char)
,	O
const	O
char	O
*	O
dict_word	*(char)
)	O
{	O
unsigned	O
*	O
sample	*(int)
;	O
unsigned	O
*	O
tmp	*(int)
;	O
int	O
res	int
;	O
switch	O
(	O
cmd	int
)	O
{	O
case	O
DICO_SELECT_BEGIN	int
:	O
if	O
(	O
utf8_mbstr_to_wc	(*(char),*(*(int)),*(long))->(int)
(	O
key	*(char)
->	O
word	*(char)
,	O
&	O
sample	*(int)
,	O
NULL	O
)	O
)	O
return	O
1	int
;	O
utf8_wc_strupper	(*(int))->(void)
(	O
sample	*(int)
)	O
;	O
key	*(char)
->	O
call_data	*(void)
=	O
sample	*(int)
;	O
break	O
;	O
case	O
DICO_SELECT_RUN	int
:	O
sample	*(int)
=	O
key	*(char)
->	O
call_data	*(void)
;	O
if	O
(	O
utf8_mbstr_to_wc	(*(char),*(*(int)),*(long))->(int)
(	O
dict_word	*(char)
,	O
&	O
tmp	*(int)
,	O
NULL	O
)	O
)	O
return	O
0	int
;	O
utf8_wc_strupper	(*(int))->(void)
(	O
tmp	*(int)
)	O
;	O
res	int
=	O
!	O
!	O
utf8_wc_strstr	(*(int),*(int))->(*(int))
(	O
tmp	*(int)
,	O
sample	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(int)
)	O
;	O
return	O
res	int
;	O
case	O
DICO_SELECT_END	int
:	O
free	(*(void))->(void)
(	O
key	*(char)
->	O
call_data	*(void)
)	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
dico_strategy	struct(*(char),*(char),*((int,*(struct),*(char))->(int)),*(void),int,*(struct))
substr_strat	struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct))
=	O
{	O
"substr"	*(char)
,	O
"Match a substring anywhere in the headword"	*(char)
,	O
substr_sel	(int,*(struct(*(char),*(void),*(struct(*`,*`,*`,*`,int,*`)),int)),*(char))->(int)
}	O
;	O
static	O
int	O
substr_init	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_strategy_add	(*(struct(*(char),*(char),*((int,*`,*`)->(int)),*(void),int,*(struct))))->(int)
(	O
&	O
substr_strat	struct(*(char),*(char),*((int,*(struct(*`,*`,*`,int)),*(char))->(int)),*(void),int,*(struct))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
unsigned	O
*	O
strtowc	(*(char))->(*(int))
(	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
unsigned	O
*	O
buf	*(void)
;	O
if	O
(	O
utf8_mbstr_to_wc	(*(char),*(*(int)),*(long))->(int)
(	O
str	*(struct)
,	O
&	O
buf	*(void)
,	O
NULL	O
)	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"cannot convert \"%s\""	*(char)
,	O
str	*(struct)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
buf	*(void)
;	O
}	O
static	O
int	O
substr_run_test	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
unsigned	O
*	O
wa	*(int)
,	O
*	O
wb	*(int)
;	O
unsigned	O
const	O
*	O
p	*(char)
;	O
int	O
ret	int
;	O
argc	int
--	O
;	O
argv	*(*(char))
++	O
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"bad argument list for substr test"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
wa	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
wb	*(int)
=	O
strtowc	(*(char))->(*(int))
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
p	*(char)
=	O
utf8_wc_strstr	(*(int),*(int))->(*(int))
(	O
wa	*(int)
,	O
wb	*(int)
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
ret	int
=	O
0	int
;	O
printf	(*(char))->(int)
(	O
"%td\n"	*(char)
,	O
p	*(char)
-	O
wa	*(int)
)	O
;	O
}	O
else	O
ret	int
=	O
1	int
;	O
free	(*(void))->(void)
(	O
wa	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
wb	*(int)
)	O
;	O
return	O
ret	int
;	O
}	O
struct	O
dico_database_module	struct(int,int,*((int,*(*(char)))->(int)),*((*(char),int,*(*(char)))->(*(struct))),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(*(char))),*((*(struct))->(*(char))),*((*(struct),array(*(struct)))->(int)),*((*(struct),*(struct),*(char))->(*(struct))),*((*(struct),*(char))->(*(struct))),*((*(struct),long,*(struct))->(int)),*((*(struct))->(long)),*((*(struct))->(long)),*((*(struct))->(void)),*((*(struct),*(struct))->(int)),*((int,*(*(char)))->(int)),*((*(struct))->(*(char))),*((*(char),int,*(*(char)),*(void))->(*(struct))),*((*(struct))->(int)),*((*(struct),long)->(*(struct))))
DICO_EXPORT	O
(	O
substr	O
,	O
module	O
)	O
=	O
{	O
.	O
dico_version	int
=	O
DICO_MODULE_VERSION	int
,	O
.	O
dico_capabilities	int
=	O
DICO_CAPA_NODB	int
,	O
.	O
dico_init	*((int,*(*(char)))->(int))
=	O
substr_init	(int,*(*(char)))->(int)
,	O
.	O
dico_run_test	*((int,*(*(char)))->(int))
=	O
substr_run_test	(int,*(*(char)))->(int)
}	O
;	O
