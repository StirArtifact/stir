int	O
get_addrs	(*(char),*(char))->(int)
(	O
char	O
*	O
my_machine_name	*(char)
,	O
char	O
*	O
his_machine_name	*(char)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
;	O
msg	struct(char,char,char,char,int,struct(short,array(char)),struct(short,array(char)),int,array(char),array(char),array(char))
.	O
pid	int
=	O
htonl	(int)->(int)
(	O
getpid	()->(int)
(	O
)	O
)	O
;	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
my_machine_name	*(char)
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"talk: %s: "	*(char)
,	O
my_machine_name	*(char)
)	O
;	O
herror	(*(char))->(void)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
my_machine_addr	struct(int)
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
his_machine_name	*(char)
,	O
my_machine_name	*(char)
)	O
)	O
{	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
his_machine_name	*(char)
)	O
;	O
if	O
(	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"talk: %s: "	*(char)
,	O
his_machine_name	*(char)
)	O
;	O
herror	(*(char))->(void)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
&	O
his_machine_addr	struct(int)
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
hp	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
)	O
;	O
}	O
else	O
his_machine_addr	struct(int)
=	O
my_machine_addr	struct(int)
;	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
"ntalk"	*(char)
,	O
"udp"	*(char)
)	O
;	O
if	O
(	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"talk: %s/%s: service is not registered.\n"	*(char)
,	O
"ntalk"	*(char)
,	O
"udp"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
daemon_port	short
=	O
sp	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
;	O
return	O
0	int
;	O
}	O
