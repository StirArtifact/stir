int	O
detach	(*(()->(void)))->(int)
(	O
void	O
(	O
*	O
init	*(()->(void))
)	O
(	O
)	O
)	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
oldsa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
sa	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
;	O
pid_t	int
pid	int
;	O
int	O
ec	int
;	O
init	*(()->(void))
(	O
)	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
sa	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
.	O
sa_mask	struct(array(long))
)	O
;	O
sa	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
.	O
sa_handler	*((int)->(void))
=	O
SIG_IGN	O
;	O
sa	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
.	O
sa_flags	int
=	O
0	int
;	O
if	O
(	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGHUP	int
,	O
&	O
sa	*(struct(union(*((int)->(void)),*((int,*`,*`)->(void))),struct(array(long)),int,*(()->(void))))
,	O
&	O
oldsa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
return	O
-	O
1	int
;	O
switch	O
(	O
fork	()->(int)
(	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
-	O
1	int
;	O
case	O
0	int
:	O
break	O
;	O
default	O
:	O
_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
pid	int
=	O
setsid	()->(int)
(	O
)	O
;	O
ec	int
=	O
errno	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGHUP	int
,	O
&	O
oldsa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
if	O
(	O
pid	int
==	O
-	O
1	int
)	O
{	O
errno	O
=	O
ec	int
;	O
return	O
-	O
1	int
;	O
}	O
chdir	(*(char))->(int)
(	O
"/"	*(char)
)	O
;	O
close	(int)->(int)
(	O
0	int
)	O
;	O
close	(int)->(int)
(	O
1	int
)	O
;	O
close	(int)->(int)
(	O
2	int
)	O
;	O
open	(*(char),int)->(int)
(	O
_PATH_DEVNULL	*(char)
,	O
O_RDONLY	int
)	O
;	O
open	(*(char),int)->(int)
(	O
_PATH_DEVNULL	*(char)
,	O
O_WRONLY	int
)	O
;	O
dup	(int)->(int)
(	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
