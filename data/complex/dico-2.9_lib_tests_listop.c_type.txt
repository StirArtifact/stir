void	O
usage	(int)->(void)
(	O
int	O
code	int
)	O
{	O
printf	(*(char))->(int)
(	O
"usage: listop..]\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
code	int
)	O
;	O
}	O
dico_iterator_t	*(struct)
list_iterator	(*(void))->(*(struct))
(	O
void	O
*	O
object	*(void)
)	O
{	O
return	O
dico_list_iterator	(*(struct))->(*(struct))
(	O
object	*(void)
)	O
;	O
}	O
void	O
print_item	*((*(void))->(void))
(	O
void	O
*	O
item	*(void)
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
(	O
char	O
*	O
)	O
item	*(void)
)	O
;	O
}	O
void	O
delete	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_list_t	*(struct)
list	array(*(struct))
=	O
object	*(void)
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
if	O
(	O
dico_list_remove	(*(struct),*(void),*(*(void)))->(int)
(	O
list	array(*(struct))
,	O
*	O
++	O
argv	*(*(char))
,	O
NULL	O
)	O
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_remove(%s)"	*(char)
,	O
*	O
argv	*(*(char))
)	O
;	O
}	O
}	O
void	O
add	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_list_t	*(struct)
list	array(*(struct))
=	O
object	*(void)
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
if	O
(	O
dico_list_append	(*(struct),*(void))->(int)
(	O
list	array(*(struct))
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_append"	*(char)
)	O
;	O
}	O
}	O
void	O
prep	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_list_t	*(struct)
list	array(*(struct))
=	O
object	*(void)
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
if	O
(	O
dico_list_prepend	(*(struct),*(void))->(int)
(	O
list	array(*(struct))
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_prepend"	*(char)
)	O
;	O
}	O
}	O
void	O
find	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_iterator_t	*(struct)
itr	*((*(void),*(void))->(int))
;	O
char	O
*	O
arg	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
char	O
*	O
text	*(char)
;	O
itr	*((*(void),*(void))->(int))
=	O
shell_iterator	()->(*(struct))
(	O
)	O
;	O
for	O
(	O
text	*(char)
=	O
dico_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
text	*(char)
;	O
text	*(char)
=	O
dico_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
text	*(char)
)	O
==	O
0	int
)	O
return	O
;	O
}	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"%s not in list"	*(char)
,	O
arg	*(char)
)	O
;	O
}	O
void	O
push	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_list_t	*(struct)
list	array(*(struct))
=	O
object	*(void)
;	O
while	O
(	O
--	O
argc	int
)	O
if	O
(	O
dico_list_push	O
(	O
list	array(*(struct))
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_push"	*(char)
)	O
;	O
}	O
void	O
pop	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_list_t	*(struct)
list	array(*(struct))
=	O
object	*(void)
;	O
char	O
*	O
p	*(char)
=	O
dico_list_pop	(*(struct))->(*(void))
(	O
list	array(*(struct))
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_NOTICE	int
,	O
0	int
,	O
"nothing to pop"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
p	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
}	O
void	O
number	(*(void),int,*(*(char)))->(void)
(	O
void	O
*	O
object	*(void)
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
dico_list_t	*(struct)
list	array(*(struct))
=	O
object	*(void)
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
&	O
p	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
!=	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"?\n"	*(char)
)	O
;	O
else	O
{	O
char	O
*	O
text	*(char)
=	O
dico_list_item	(*(struct),long)->(*(void))
(	O
list	array(*(struct))
,	O
n	long
)	O
;	O
if	O
(	O
!	O
text	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"dico_list_item: item not found"	*(char)
)	O
;	O
else	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
errno	O
,	O
"dico_list_item"	*(char)
)	O
;	O
return	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
}	O
}	O
static	O
int	O
string_comp	(*(void),*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
value	*(char)
,	O
void	O
*	O
ignored	*(void)
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
item	*(void)
,	O
value	*(char)
)	O
;	O
}	O
struct	O
itr_shell_command	struct(*(char),int,int,*((*(void),int,*(*(char)))->(void)),*(char),*(char))
cmdtab	*(struct(*(char),int,int,*((*(void),int,*(*`))->(void)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"del"	*(char)
,	O
2	int
,	O
0	int
,	O
delete	(*(void),int,*(*(char)))->(void)
,	O
"item..."	*(char)
,	O
"delete items"	*(char)
}	O
,	O
{	O
"add"	*(char)
,	O
2	int
,	O
0	int
,	O
add	(*(void),int,*(*(char)))->(void)
,	O
"item..."	*(char)
,	O
"add new items"	*(char)
}	O
,	O
{	O
"prep"	*(char)
,	O
2	int
,	O
0	int
,	O
prep	(*(void),int,*(*(char)))->(void)
,	O
"item..."	*(char)
,	O
"add new items at the beginning"	*(char)
}	O
,	O
{	O
"find"	*(char)
,	O
2	int
,	O
2	int
,	O
find	(*(void),int,*(*(char)))->(void)
,	O
"item"	*(char)
,	O
"find item in the list"	*(char)
}	O
,	O
{	O
"push"	*(char)
,	O
2	int
,	O
0	int
,	O
push	(*(void),int,*(*(char)))->(void)
,	O
"item..."	*(char)
,	O
"push items to the list"	*(char)
}	O
,	O
{	O
"pop"	*(char)
,	O
1	int
,	O
1	int
,	O
pop	(*(void),int,*(*(char)))->(void)
,	O
""	*(char)
,	O
"pop item from the list"	*(char)
}	O
,	O
{	O
NULL	O
,	O
1	int
,	O
1	int
,	O
number	(*(void),int,*(*(char)))->(void)
}	O
}	O
;	O
static	O
size_t	long
get_count	(*(void))->(long)
(	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
dico_list_count	(*(struct))->(long)
(	O
(	O
dico_list_t	*(struct)
)	O
data	*(void)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
itr_shell	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*(void),int,*(*`))->(void)),*(char),*(char))))
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
;	O
dico_list_t	*(struct)
list	array(*(struct))
;	O
dico_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	*(char)
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-h"	*(char)
)	O
==	O
0	int
)	O
usage	(int)->(void)
(	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
{	O
--	O
argc	int
;	O
++	O
argv	*(*(char))
;	O
break	O
;	O
}	O
else	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"unknown option %s"	*(char)
,	O
arg	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
break	O
;	O
}	O
list	array(*(struct))
=	O
dico_list_create	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
!	O
list	array(*(struct))
)	O
{	O
perror	(*(char))->(void)
(	O
"dico_list_create"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
dico_list_set_comparator	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
list	array(*(struct))
,	O
string_comp	(*(void),*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
if	O
(	O
dico_list_append	(*(struct),*(void))->(int)
(	O
list	array(*(struct))
,	O
*	O
argv	*(*(char))
++	O
)	O
)	O
{	O
perror	(*(char))->(void)
(	O
"dico_list_append"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
,	O
0	int
,	O
sizeof	O
(	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
)	O
)	O
;	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
.	O
object	*(void)
=	O
list	array(*(struct))
;	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
.	O
get_iterator	*((*(void))->(*(struct)))
=	O
list_iterator	(*(void))->(*(struct))
;	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
.	O
print_item	*((*(void))->(void))
=	O
print_item	*((*(void))->(void))
;	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
.	O
count	long
=	O
get_count	(*(void))->(long)
;	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
.	O
cmdtab	*(struct(*(char),int,int,*((*(void),int,*(*`))->(void)),*(char),*(char)))
=	O
cmdtab	*(struct(*(char),int,int,*((*(void),int,*(*`))->(void)),*(char),*(char)))
;	O
shell	(*(struct(*(void),*((*`)->(*`)),*((*`)->(void)),*((*`)->(long)),*(struct(*`,int,int,*`,*`,*`)))))->(void)
(	O
&	O
sh	struct(*(void),*((*(void))->(*(struct))),*((*(void))->(void)),*((*(void))->(long)),*(struct(*(char),int,int,*((*`,int,*`)->(void)),*(char),*(char))))
)	O
;	O
return	O
0	int
;	O
}	O
