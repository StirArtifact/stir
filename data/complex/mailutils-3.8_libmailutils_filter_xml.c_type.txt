struct	O
transcode_map	struct(*(char),long,int)
{	O
const	O
char	O
*	O
ent	*(char)
;	O
size_t	long
len	long
;	O
int	O
ch	int
;	O
}	O
;	O
static	O
struct	O
transcode_map	struct(*(char),long,int)
transcode_map	struct(*(char),long,int)
[	O
]	O
=	O
{	O
{	O
S	O
(	O
"&amp;"	*(char)
)	O
,	O
'&'	O
}	O
,	O
{	O
S	O
(	O
"&gt;"	*(char)
)	O
,	O
'>'	O
}	O
,	O
{	O
S	O
(	O
"&lt;"	*(char)
)	O
,	O
'<'	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
ch2ent	(int)->(*(struct(*(char),long,int)))
(	O
int	O
c	int
)	O
{	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
p	*(struct(*(char),long,int))
;	O
for	O
(	O
p	*(struct(*(char),long,int))
=	O
transcode_map	struct(*(char),long,int)
;	O
p	*(struct(*(char),long,int))
->	O
ent	*(char)
;	O
p	*(struct(*(char),long,int))
++	O
)	O
{	O
if	O
(	O
p	*(struct(*(char),long,int))
->	O
ch	int
==	O
c	int
)	O
return	O
p	*(struct(*(char),long,int))
;	O
}	O
return	O
NULL	O
;	O
}	O
struct	O
xml_encode_state	struct(array(char),int)
{	O
char	O
buf	array(char)
[	O
11	int
]	O
;	O
int	O
idx	int
;	O
}	O
;	O
static	O
int	O
utf8_char_width	(char)->(int)
(	O
unsigned	O
char	O
ch	int
)	O
{	O
if	O
(	O
ch	int
<=	O
0x7f	int
)	O
return	O
1	int
;	O
if	O
(	O
0xc2	int
<=	O
ch	int
&&	O
ch	int
<=	O
0xdf	int
)	O
return	O
2	int
;	O
if	O
(	O
0xe0	int
<=	O
ch	int
&&	O
ch	int
<=	O
0xef	int
)	O
return	O
3	int
;	O
if	O
(	O
0xf0	int
<=	O
ch	int
&&	O
ch	int
<=	O
0xf4	int
)	O
return	O
4	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
utf8_mbtowc	(*(char),long,*(int))->(int)
(	O
unsigned	O
char	O
const	O
*	O
s	*(char)
,	O
size_t	long
l	long
,	O
unsigned	O
int	O
*	O
pwc	*(int)
)	O
{	O
if	O
(	O
l	long
==	O
0	int
)	O
{	O
errno	O
=	O
ENODATA	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
<	O
0x80	int
)	O
{	O
*	O
pwc	*(int)
=	O
s	*(char)
[	O
0	int
]	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
<	O
0xc2	int
)	O
{	O
errno	O
=	O
EILSEQ	int
;	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
<	O
0xe0	int
)	O
{	O
if	O
(	O
l	long
<	O
2	int
)	O
{	O
errno	O
=	O
ENODATA	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
(	O
(	O
s	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
)	O
)	O
{	O
errno	O
=	O
EILSEQ	int
;	O
return	O
-	O
1	int
;	O
}	O
*	O
pwc	*(int)
=	O
(	O
(	O
unsigned	O
int	O
)	O
(	O
s	*(char)
[	O
0	int
]	O
&	O
0x1f	int
)	O
<<	O
6	int
)	O
|	O
(	O
unsigned	O
int	O
)	O
(	O
s	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
;	O
return	O
2	int
;	O
}	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
<	O
0xf0	int
)	O
{	O
if	O
(	O
l	long
<	O
3	int
)	O
{	O
errno	O
=	O
ENODATA	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
(	O
(	O
s	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
&&	O
(	O
s	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
&&	O
(	O
s	*(char)
[	O
0	int
]	O
>=	O
0xe1	int
||	O
s	*(char)
[	O
1	int
]	O
>=	O
0xa0	int
)	O
)	O
)	O
{	O
errno	O
=	O
EILSEQ	int
;	O
return	O
-	O
1	int
;	O
}	O
*	O
pwc	*(int)
=	O
(	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
0	int
]	O
&	O
0x0f	int
)	O
<<	O
12	int
)	O
|	O
(	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<<	O
6	int
)	O
|	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
;	O
return	O
3	int
;	O
}	O
if	O
(	O
s	*(char)
[	O
0	int
]	O
<	O
0xf8	int
)	O
{	O
if	O
(	O
l	long
<	O
4	int
)	O
{	O
errno	O
=	O
ENODATA	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
(	O
(	O
s	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
&&	O
(	O
s	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
&&	O
(	O
s	*(char)
[	O
3	int
]	O
^	O
0x80	int
)	O
<	O
0x40	int
&&	O
(	O
s	*(char)
[	O
0	int
]	O
>=	O
0xf1	int
||	O
s	*(char)
[	O
1	int
]	O
>=	O
0x90	int
)	O
)	O
)	O
{	O
errno	O
=	O
EILSEQ	int
;	O
return	O
-	O
1	int
;	O
}	O
*	O
pwc	*(int)
=	O
(	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
0	int
]	O
&	O
0x07	int
)	O
<<	O
18	int
)	O
|	O
(	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
1	int
]	O
^	O
0x80	int
)	O
<<	O
12	int
)	O
|	O
(	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
2	int
]	O
^	O
0x80	int
)	O
<<	O
6	int
)	O
|	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
[	O
3	int
]	O
^	O
0x80	int
)	O
;	O
return	O
4	int
;	O
}	O
errno	O
=	O
EILSEQ	int
;	O
return	O
-	O
1	int
;	O
}	O
static	O
void	O
store_buf	(*(struct(array(char),int)),*(char),long)->(void)
(	O
struct	O
xml_encode_state	struct(array(char),int)
*	O
cp	*(struct(array(char),int))
,	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
len	long
)	O
{	O
cp	*(struct(array(char),int))
->	O
idx	int
=	O
0	int
;	O
s	*(char)
+=	O
len	long
;	O
while	O
(	O
len	long
--	O
)	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
cp	*(struct(array(char),int))
->	O
idx	int
++	O
]	O
=	O
*	O
--	O
s	*(char)
;	O
}	O
static	O
void	O
store_char_ref	(*(struct(array(char),int)),int)->(void)
(	O
struct	O
xml_encode_state	struct(array(char),int)
*	O
cp	*(struct(array(char),int))
,	O
unsigned	O
wc	int
)	O
{	O
char	O
buf	array(char)
[	O
11	int
]	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
"&#x%x;"	*(char)
,	O
wc	int
)	O
;	O
store_buf	(*(struct(array(char),int)),*(char),long)->(void)
(	O
cp	*(struct(array(char),int))
,	O
buf	array(char)
,	O
strlen	(*(char))->(long)
(	O
buf	array(char)
)	O
)	O
;	O
}	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_xml_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
struct	O
xml_encode_state	struct(array(char),int)
*	O
cp	*(struct(array(char),int))
=	O
xd	*(void)
;	O
const	O
unsigned	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
cp	*(struct(array(char),int))
->	O
idx	int
=	O
-	O
1	int
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
while	O
(	O
osize	long
)	O
{	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
idx	int
>	O
0	int
)	O
{	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
--	O
cp	*(struct(array(char),int))
->	O
idx	int
]	O
;	O
--	O
osize	long
;	O
}	O
else	O
if	O
(	O
isize	long
==	O
0	int
)	O
break	O
;	O
else	O
{	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
p	*(struct(*(char),long,int))
;	O
unsigned	O
int	O
c	int
=	O
*	O
iptr	*(char)
;	O
p	*(struct(*(char),long,int))
=	O
ch2ent	(int)->(*(struct(*(char),long,int)))
(	O
c	int
)	O
;	O
if	O
(	O
p	*(struct(*(char),long,int))
)	O
{	O
store_buf	(*(struct(array(char),int)),*(char),long)->(void)
(	O
cp	*(struct(array(char),int))
,	O
p	*(struct(*(char),long,int))
->	O
ent	*(char)
,	O
p	*(struct(*(char),long,int))
->	O
len	long
)	O
;	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
{	O
int	O
count	int
=	O
utf8_char_width	(char)->(int)
(	O
c	int
)	O
;	O
if	O
(	O
count	int
==	O
0	int
)	O
{	O
store_char_ref	(*(struct(array(char),int)),int)->(void)
(	O
cp	*(struct(array(char),int))
,	O
*	O
iptr	*(char)
)	O
;	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
if	O
(	O
count	int
>	O
isize	long
)	O
{	O
if	O
(	O
cmd	enum(int,int,int,int,int)
==	O
mu_filter_lastbuf	int
)	O
{	O
store_buf	(*(struct(array(char),int)),*(char),long)->(void)
(	O
cp	*(struct(array(char),int))
,	O
(	O
char	O
*	O
)	O
iptr	*(char)
,	O
isize	long
)	O
;	O
iptr	*(char)
+=	O
isize	long
;	O
isize	long
=	O
0	int
;	O
}	O
else	O
break	O
;	O
}	O
else	O
{	O
unsigned	O
wc	int
;	O
int	O
rc	int
;	O
rc	int
=	O
utf8_mbtowc	(*(char),long,*(int))->(int)
(	O
iptr	*(char)
,	O
isize	long
,	O
&	O
wc	int
)	O
;	O
if	O
(	O
rc	int
==	O
-	O
1	int
)	O
{	O
store_char_ref	(*(struct(array(char),int)),int)->(void)
(	O
cp	*(struct(array(char),int))
,	O
*	O
iptr	*(char)
)	O
;	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
{	O
if	O
(	O
wc	int
==	O
0x9	int
||	O
wc	int
==	O
0xa	int
||	O
wc	int
==	O
0xd	int
||	O
(	O
wc	int
>=	O
0x20	int
&&	O
wc	int
<	O
0xd7ff	int
)	O
||	O
(	O
wc	int
>=	O
0xe000	int
&&	O
wc	int
<	O
0xfffd	int
)	O
||	O
(	O
wc	int
>=	O
0x10000	int
&&	O
wc	int
<	O
0x10FFFF	int
)	O
)	O
{	O
if	O
(	O
osize	long
>=	O
count	int
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
optr	*(char)
,	O
iptr	*(char)
,	O
count	int
)	O
;	O
optr	*(char)
+=	O
count	int
;	O
osize	long
-=	O
count	int
;	O
iptr	*(char)
+=	O
count	int
;	O
isize	long
-=	O
count	int
;	O
}	O
else	O
{	O
store_buf	(*(struct(array(char),int)),*(char),long)->(void)
(	O
cp	*(struct(array(char),int))
,	O
(	O
char	O
*	O
)	O
iptr	*(char)
,	O
count	int
)	O
;	O
iptr	*(char)
+=	O
count	int
;	O
isize	long
-=	O
count	int
;	O
}	O
}	O
else	O
{	O
store_char_ref	(*(struct(array(char),int)),int)->(void)
(	O
cp	*(struct(array(char),int))
,	O
wc	int
)	O
;	O
iptr	*(char)
+=	O
count	int
;	O
isize	long
-=	O
count	int
;	O
}	O
}	O
}	O
}	O
}	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
-=	O
isize	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
-=	O
osize	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
enum	O
xml_decode_phase	enum(int,int,int,int,int,int,int)
{	O
enc_init	int
,	O
enc_map	int
,	O
enc_rollback	int
,	O
enc_finish	int
,	O
enc_char_ref	int
,	O
enc_char_cont	int
,	O
enc_char_rollback	int
}	O
;	O
struct	O
xml_decode_state	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
{	O
enum	O
xml_decode_phase	enum(int,int,int,int,int,int,int)
phase	enum(int,int,int,int,int,int,int)
;	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
map	*(struct(*(char),long,int))
;	O
char	O
buf	array(char)
[	O
11	int
]	O
;	O
int	O
idx	int
;	O
int	O
pos	int
;	O
int	O
base	int
;	O
unsigned	O
wc	int
;	O
}	O
;	O
static	O
enum	O
xml_decode_phase	enum(int,int,int,int,int,int,int)
nextchar	(*(struct(enum(int,int,int,int,int,int,int),*(struct(*`,long,int)),array(char),int,int,int,int)),int)->(enum(int,int,int,int,int,int,int))
(	O
struct	O
xml_decode_state	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
*	O
s	*(char)
,	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
==	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
s	*(char)
->	O
idx	int
]	O
)	O
{	O
if	O
(	O
++	O
s	*(char)
->	O
idx	int
==	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
->	O
len	long
)	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_finish	int
;	O
else	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_map	int
;	O
}	O
else	O
if	O
(	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
==	O
enc_init	int
)	O
;	O
else	O
if	O
(	O
s	*(char)
->	O
idx	int
==	O
1	int
&&	O
c	int
==	O
'#'	O
)	O
{	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_char_ref	int
;	O
s	*(char)
->	O
base	int
=	O
0	int
;	O
s	*(char)
->	O
wc	int
=	O
0	int
;	O
s	*(char)
->	O
idx	int
=	O
0	int
;	O
s	*(char)
->	O
buf	array(char)
[	O
s	*(char)
->	O
idx	int
++	O
]	O
=	O
'&'	O
;	O
s	*(char)
->	O
buf	array(char)
[	O
s	*(char)
->	O
idx	int
++	O
]	O
=	O
c	int
;	O
}	O
else	O
{	O
struct	O
transcode_map	struct(*(char),long,int)
*	O
map	*(struct(*(char),long,int))
;	O
for	O
(	O
map	*(struct(*(char),long,int))
=	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
;	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
&&	O
c	int
>	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
s	*(char)
->	O
idx	int
]	O
;	O
map	*(struct(*(char),long,int))
++	O
)	O
;	O
if	O
(	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
==	O
NULL	O
||	O
c	int
!=	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
s	*(char)
->	O
idx	int
]	O
)	O
{	O
if	O
(	O
s	*(char)
->	O
idx	int
!=	O
0	int
)	O
{	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_rollback	int
;	O
s	*(char)
->	O
pos	int
=	O
0	int
;	O
}	O
else	O
DECODE_INIT	O
(	O
s	*(char)
)	O
;	O
}	O
else	O
{	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
=	O
map	*(struct(*(char),long,int))
;	O
if	O
(	O
++	O
s	*(char)
->	O
idx	int
==	O
s	*(char)
->	O
map	*(struct(*(char),long,int))
->	O
len	long
)	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_finish	int
;	O
else	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_map	int
;	O
}	O
}	O
return	O
s	*(char)
->	O
phase	enum(int,int,int,int,int,int,int)
;	O
}	O
static	O
enum	O
mu_filter_result	enum(int,int,int,int,int)
_xml_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
(	O
void	O
*	O
xd	*(void)
,	O
enum	O
mu_filter_command	enum(int,int,int,int,int)
cmd	enum(int,int,int,int,int)
,	O
struct	O
mu_filter_io	struct(*(char),long,*(char),long,int,int)
*	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
)	O
{	O
struct	O
xml_decode_state	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
*	O
cp	*(struct(array(char),int))
=	O
xd	*(void)
;	O
const	O
char	O
*	O
iptr	*(char)
;	O
size_t	long
isize	long
;	O
char	O
*	O
optr	*(char)
;	O
size_t	long
osize	long
;	O
switch	O
(	O
cmd	enum(int,int,int,int,int)
)	O
{	O
case	O
mu_filter_init	int
:	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
return	O
mu_filter_ok	int
;	O
case	O
mu_filter_done	int
:	O
return	O
mu_filter_ok	int
;	O
default	O
:	O
break	O
;	O
}	O
iptr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
input	*(char)
;	O
isize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
;	O
optr	*(char)
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
output	*(char)
;	O
osize	long
=	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
;	O
while	O
(	O
isize	long
&&	O
osize	long
)	O
{	O
switch	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
)	O
{	O
case	O
enc_init	int
:	O
nextchar	(*(struct(enum(int,int,int,int,int,int,int),*(struct(*`,long,int)),array(char),int,int,int,int)),int)->(enum(int,int,int,int,int,int,int))
(	O
cp	*(struct(array(char),int))
,	O
*	O
iptr	*(char)
)	O
;	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
==	O
enc_init	int
)	O
{	O
*	O
optr	*(char)
++	O
=	O
*	O
iptr	*(char)
;	O
--	O
osize	long
;	O
}	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
break	O
;	O
case	O
enc_map	int
:	O
nextchar	(*(struct(enum(int,int,int,int,int,int,int),*(struct(*`,long,int)),array(char),int,int,int,int)),int)->(enum(int,int,int,int,int,int,int))
(	O
cp	*(struct(array(char),int))
,	O
*	O
iptr	*(char)
)	O
;	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
==	O
enc_map	int
||	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
==	O
enc_finish	int
||	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
==	O
enc_char_ref	int
)	O
{	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
==	O
enc_init	int
)	O
{	O
*	O
optr	*(char)
++	O
=	O
*	O
iptr	*(char)
++	O
;	O
--	O
osize	long
;	O
--	O
isize	long
;	O
}	O
break	O
;	O
case	O
enc_finish	int
:	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
map	*(struct(*(char),long,int))
->	O
ch	int
;	O
--	O
osize	long
;	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
break	O
;	O
case	O
enc_rollback	int
:	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
map	*(struct(*(char),long,int))
->	O
ent	*(char)
[	O
cp	*(struct(array(char),int))
->	O
pos	int
]	O
;	O
--	O
osize	long
;	O
if	O
(	O
++	O
cp	*(struct(array(char),int))
->	O
pos	int
==	O
cp	*(struct(array(char),int))
->	O
idx	int
)	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
break	O
;	O
case	O
enc_char_ref	int
:	O
if	O
(	O
*	O
iptr	*(char)
==	O
'x'	O
)	O
{	O
cp	*(struct(array(char),int))
->	O
base	int
=	O
16	int
;	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
cp	*(struct(array(char),int))
->	O
idx	int
++	O
]	O
=	O
*	O
iptr	*(char)
;	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
cp	*(struct(array(char),int))
->	O
base	int
=	O
10	int
;	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_char_cont	int
;	O
break	O
;	O
case	O
enc_char_cont	int
:	O
if	O
(	O
*	O
iptr	*(char)
==	O
';'	O
)	O
{	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
wc	int
;	O
--	O
osize	long
;	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
}	O
else	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
idx	int
<	O
MU_ARRAY_SIZE	O
(	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
)	O
&&	O
mu_isxdigit	O
(	O
*	O
iptr	*(char)
)	O
)	O
{	O
static	O
char	O
xdig	array(char)
[	O
]	O
=	O
"0123456789ABCDEF"	*(char)
;	O
int	O
n	int
=	O
strchr	(*(char),int)->(*(char))
(	O
xdig	array(char)
,	O
mu_toupper	O
(	O
*	O
iptr	*(char)
)	O
)	O
-	O
xdig	array(char)
;	O
cp	*(struct(array(char),int))
->	O
wc	int
=	O
cp	*(struct(array(char),int))
->	O
wc	int
*	O
cp	*(struct(array(char),int))
->	O
base	int
+	O
n	int
;	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
cp	*(struct(array(char),int))
->	O
idx	int
++	O
]	O
=	O
*	O
iptr	*(char)
;	O
++	O
iptr	*(char)
;	O
--	O
isize	long
;	O
}	O
else	O
{	O
cp	*(struct(array(char),int))
->	O
phase	enum(int,int,int,int,int,int,int)
=	O
enc_char_rollback	int
;	O
cp	*(struct(array(char),int))
->	O
pos	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
enc_char_rollback	int
:	O
*	O
optr	*(char)
++	O
=	O
cp	*(struct(array(char),int))
->	O
buf	array(char)
[	O
cp	*(struct(array(char),int))
->	O
pos	int
++	O
]	O
;	O
--	O
osize	long
;	O
if	O
(	O
cp	*(struct(array(char),int))
->	O
pos	int
==	O
cp	*(struct(array(char),int))
->	O
idx	int
)	O
DECODE_INIT	O
(	O
cp	*(struct(array(char),int))
)	O
;	O
}	O
}	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
isize	long
-=	O
isize	long
;	O
iobuf	*(struct(*(char),long,*(char),long,int,int))
->	O
osize	long
-=	O
osize	long
;	O
return	O
mu_filter_ok	int
;	O
}	O
static	O
int	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
(	O
void	O
*	O
*	O
pret	*(*(struct))
,	O
int	O
mode	int
,	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
const	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
union	O
{	O
struct	O
xml_encode_state	struct(array(char),int)
encode	struct(array(char),int)
;	O
struct	O
xml_decode_state	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
decode	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
;	O
}	O
*	O
cp	*(struct(array(char),int))
;	O
switch	O
(	O
mode	int
)	O
{	O
case	O
MU_FILTER_ENCODE	int
:	O
cp	*(struct(array(char),int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
cp	*(struct(array(char),int))
->	O
encode	struct(array(char),int)
)	O
)	O
;	O
if	O
(	O
!	O
cp	*(struct(array(char),int))
)	O
return	O
ENOMEM	int
;	O
cp	*(struct(array(char),int))
->	O
encode	struct(array(char),int)
.	O
idx	int
=	O
-	O
1	int
;	O
break	O
;	O
case	O
MU_FILTER_DECODE	int
:	O
cp	*(struct(array(char),int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
cp	*(struct(array(char),int))
->	O
decode	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
)	O
)	O
;	O
if	O
(	O
!	O
cp	*(struct(array(char),int))
)	O
return	O
ENOMEM	int
;	O
cp	*(struct(array(char),int))
->	O
decode	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
.	O
idx	int
=	O
0	int
;	O
cp	*(struct(array(char),int))
->	O
decode	struct(enum(int,int,int,int,int,int,int),*(struct(*(char),long,int)),array(char),int,int,int,int)
.	O
map	*(struct(*(char),long,int))
=	O
transcode_map	struct(*(char),long,int)
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
*	O
pret	*(*(struct))
=	O
cp	*(struct(array(char),int))
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
_mu_filter_record	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))))
_xml_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
=	O
{	O
"xml"	*(char)
,	O
alloc_state	(*(*(void)),int,int,*(*(char)))->(int)
,	O
_xml_encoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
,	O
_xml_decoder	(*(void),enum(int,int,int,int,int),*(struct(*(char),long,*(char),long,int,int)))->(enum(int,int,int,int,int))
}	O
;	O
mu_filter_record_t	*(struct)
mu_xml_filter	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
&	O
_xml_filter	struct(*(char),*((*(*(void)),int,int,*(*(char)))->(int)),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct(*`,long,*`,long,int,int)))->(enum(int,int,int,int,int))))
;	O
