static	O
int	O
osip_body_parse_header	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),*(*(char)))->(int)
(	O
osip_body_t	struct
*	O
body	*(char)
,	O
const	O
char	O
*	O
start_of_osip_body_header	*(char)
,	O
const	O
char	O
*	O
*	O
next_body	*(*(char))
)	O
;	O
int	O
osip_body_init	(*(*(struct(*(char),long,*(struct`),*(struct`)))))->(int)
(	O
osip_body_t	struct
*	O
*	O
body	*(char)
)	O
{	O
*	O
body	*(char)
=	O
(	O
osip_body_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_body_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
(	O
*	O
body	*(char)
)	O
->	O
body	*(char)
=	O
NULL	O
;	O
(	O
*	O
body	*(char)
)	O
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
=	O
NULL	O
;	O
(	O
*	O
body	*(char)
)	O
->	O
length	long
=	O
0	int
;	O
(	O
*	O
body	*(char)
)	O
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
=	O
(	O
osip_list_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_list_t	struct
)	O
)	O
;	O
if	O
(	O
(	O
*	O
body	*(char)
)	O
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
*	O
body	*(char)
)	O
;	O
*	O
body	*(char)
=	O
NULL	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
(	O
*	O
body	*(char)
)	O
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_body	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),long)->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
length	long
)	O
{	O
osip_body_t	struct
*	O
body	*(char)
;	O
int	O
i	int
;	O
i	int
=	O
osip_body_init	(*(*(struct(*(char),long,*(struct`),*(struct`)))))->(int)
(	O
&	O
body	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_body_parse	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),long)->(int)
(	O
body	*(char)
,	O
buf	*(char)
,	O
length	long
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))))->(void)
(	O
body	*(char)
)	O
;	O
return	O
i	int
;	O
}	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
bodies	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
body	*(char)
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_clone	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(*(struct(*(char),long,*(struct`),*(struct`)))))->(int)
(	O
const	O
osip_body_t	struct
*	O
body	*(char)
,	O
osip_body_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
int	O
i	int
;	O
osip_body_t	struct
*	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
;	O
if	O
(	O
body	*(char)
==	O
NULL	O
||	O
body	*(char)
->	O
length	long
<=	O
0	int
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_body_init	(*(*(struct(*(char),long,*(struct`),*(struct`)))))->(int)
(	O
&	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
body	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
body	*(char)
->	O
length	long
+	O
2	int
)	O
;	O
if	O
(	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
body	*(char)
==	O
NULL	O
)	O
{	O
osip_body_free	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))))->(void)
(	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
length	long
=	O
body	*(char)
->	O
length	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
body	*(char)
,	O
body	*(char)
->	O
body	*(char)
,	O
body	*(char)
->	O
length	long
)	O
;	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
body	*(char)
[	O
body	*(char)
->	O
length	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
!=	O
NULL	O
)	O
{	O
i	int
=	O
osip_content_type_clone	(*(struct(*(char),*(char),struct(int,*(struct`)))),*(*(struct(*(char),*(char),struct(int,*`)))))->(int)
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
&	O
(	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))))->(void)
(	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
)	O
;	O
return	O
i	int
;	O
}	O
}	O
i	int
=	O
osip_list_clone	(*(struct(int,*(struct(*`,*`)))),*(struct(int,*(struct(*`,*`)))),*((*(void),*(*(void)))->(int)))->(int)
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_header_clone	(*(struct(*(char),*(char))),*(*(struct(*(char),*(char)))))->(int)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))))->(void)
(	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	*(char)
=	O
copy	*(struct(*(char),long,*(struct(int,*(struct`))),*(struct(*(char),*(char),struct(int,*`)))))
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_body	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),int,*(*(struct(*(char),long,*(struct`),*(struct`)))))->(int)
(	O
const	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
int	O
pos	int
,	O
osip_body_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
osip_body_t	struct
*	O
body	*(char)
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
bodies	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
body	*(char)
=	O
(	O
osip_body_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
bodies	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
*	O
dest	*(char)
=	O
body	*(char)
;	O
return	O
pos	int
;	O
}	O
int	O
osip_body_set_contenttype	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char))->(int)
(	O
osip_body_t	struct
*	O
body	*(char)
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
int	O
i	int
;	O
if	O
(	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_content_type_init	(*(*(struct(*(char),*(char),struct(int,*`)))))->(int)
(	O
&	O
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_content_type_parse	(*(struct(*(char),*(char),struct(int,*(struct`)))),*(char))->(int)
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
hvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_content_type_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
=	O
NULL	O
;	O
return	O
i	int
;	O
}	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_set_header	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),*(char))->(int)
(	O
osip_body_t	struct
*	O
body	*(char)
,	O
const	O
char	O
*	O
hname	*(char)
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
osip_header_t	struct
*	O
h	*(struct(*(char),*(char)))
;	O
int	O
i	int
;	O
if	O
(	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_header_init	(*(*(struct(*(char),*(char)))))->(int)
(	O
&	O
h	*(struct(*(char),*(char)))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
hname	*(char)
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hname	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
hvalue	*(char)
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(char)))
->	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
(	O
h	*(struct(*(char),*(char)))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
h	*(struct(*(char),*(char)))
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_set_body_mime	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char),long)->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
length	long
)	O
{	O
osip_body_t	struct
*	O
body	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_body_init	(*(*(struct(*(char),long,*(struct`),*(struct`)))))->(int)
(	O
&	O
body	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_body_parse_mime	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),long)->(int)
(	O
body	*(char)
,	O
buf	*(char)
,	O
length	long
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_body_free	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))))->(void)
(	O
body	*(char)
)	O
;	O
return	O
i	int
;	O
}	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
bodies	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
body	*(char)
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
static	O
int	O
osip_body_parse_header	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),*(*(char)))->(int)
(	O
osip_body_t	struct
*	O
body	*(char)
,	O
const	O
char	O
*	O
start_of_osip_body_header	*(char)
,	O
const	O
char	O
*	O
*	O
next_body	*(*(char))
)	O
{	O
const	O
char	O
*	O
start_of_line	*(char)
;	O
const	O
char	O
*	O
end_of_line	*(char)
;	O
const	O
char	O
*	O
colon_index	*(char)
;	O
char	O
*	O
hname	*(char)
;	O
char	O
*	O
hvalue	*(char)
;	O
int	O
i	int
;	O
*	O
next_body	*(*(char))
=	O
NULL	O
;	O
start_of_line	*(char)
=	O
start_of_osip_body_header	*(char)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
i	int
=	O
__osip_find_next_crlf	(*(char),*(*(char)))->(int)
(	O
start_of_line	*(char)
,	O
&	O
end_of_line	*(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
2	int
)	O
{	O
}	O
else	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
colon_index	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
start_of_line	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
colon_index	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
colon_index	*(char)
-	O
start_of_line	*(char)
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
hname	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
colon_index	*(char)
-	O
start_of_line	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
hname	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
hname	*(char)
,	O
start_of_line	*(char)
,	O
colon_index	*(char)
-	O
start_of_line	*(char)
)	O
;	O
if	O
(	O
(	O
end_of_line	*(char)
-	O
2	int
)	O
-	O
colon_index	*(char)
<	O
2	int
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
hvalue	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
(	O
end_of_line	*(char)
-	O
2	int
)	O
-	O
colon_index	*(char)
)	O
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
)	O
{	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
hvalue	*(char)
,	O
colon_index	*(char)
+	O
1	int
,	O
(	O
end_of_line	*(char)
-	O
2	int
)	O
-	O
colon_index	*(char)
-	O
1	int
)	O
;	O
if	O
(	O
osip_strncasecmp	(*(char),*(char),long)->(int)
(	O
hname	*(char)
,	O
"content-type"	*(char)
,	O
12	int
)	O
==	O
0	int
)	O
i	int
=	O
osip_body_set_contenttype	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char))->(int)
(	O
body	*(char)
,	O
hvalue	*(char)
)	O
;	O
else	O
i	int
=	O
osip_body_set_header	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),*(char))->(int)
(	O
body	*(char)
,	O
hname	*(char)
,	O
hvalue	*(char)
)	O
;	O
osip_free	O
(	O
hname	*(char)
)	O
;	O
osip_free	O
(	O
hvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
end_of_line	*(char)
,	O
OSIP_CRLF	*(char)
,	O
2	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
end_of_line	*(char)
,	O
"\n"	*(char)
,	O
1	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
end_of_line	*(char)
,	O
"\r"	*(char)
,	O
1	int
)	O
==	O
0	int
)	O
{	O
*	O
next_body	*(*(char))
=	O
end_of_line	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
start_of_line	*(char)
=	O
end_of_line	*(char)
;	O
}	O
}	O
int	O
osip_body_parse	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),long)->(int)
(	O
osip_body_t	struct
*	O
body	*(char)
,	O
const	O
char	O
*	O
start_of_body	*(char)
,	O
size_t	long
length	long
)	O
{	O
if	O
(	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
start_of_body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
body	*(char)
->	O
body	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
body	*(char)
->	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
body	*(char)
->	O
body	*(char)
,	O
start_of_body	*(char)
,	O
length	long
)	O
;	O
body	*(char)
->	O
body	*(char)
[	O
length	long
]	O
=	O
'\0'	O
;	O
body	*(char)
->	O
length	long
=	O
length	long
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_parse_mime	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),long)->(int)
(	O
osip_body_t	struct
*	O
body	*(char)
,	O
const	O
char	O
*	O
start_of_body	*(char)
,	O
size_t	long
length	long
)	O
{	O
const	O
char	O
*	O
end_of_osip_body_header	*(char)
;	O
const	O
char	O
*	O
start_of_osip_body_header	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
start_of_body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
start_of_osip_body_header	*(char)
=	O
start_of_body	*(char)
;	O
i	int
=	O
osip_body_parse_header	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(char),*(*(char)))->(int)
(	O
body	*(char)
,	O
start_of_osip_body_header	*(char)
,	O
&	O
end_of_osip_body_header	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
start_of_osip_body_header	*(char)
=	O
end_of_osip_body_header	*(char)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
start_of_osip_body_header	*(char)
,	O
OSIP_CRLF	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
start_of_osip_body_header	*(char)
=	O
start_of_osip_body_header	*(char)
+	O
2	int
;	O
else	O
{	O
if	O
(	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
start_of_osip_body_header	*(char)
,	O
"\n"	*(char)
,	O
1	int
)	O
==	O
0	int
)	O
||	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
start_of_osip_body_header	*(char)
,	O
"\r"	*(char)
,	O
1	int
)	O
==	O
0	int
)	O
)	O
start_of_osip_body_header	*(char)
=	O
start_of_osip_body_header	*(char)
+	O
1	int
;	O
else	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
end_of_osip_body_header	*(char)
=	O
start_of_body	*(char)
+	O
length	long
;	O
if	O
(	O
end_of_osip_body_header	*(char)
-	O
start_of_osip_body_header	*(char)
<=	O
0	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
body	*(char)
->	O
body	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
end_of_osip_body_header	*(char)
-	O
start_of_osip_body_header	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
body	*(char)
->	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
body	*(char)
->	O
body	*(char)
,	O
start_of_osip_body_header	*(char)
,	O
end_of_osip_body_header	*(char)
-	O
start_of_osip_body_header	*(char)
)	O
;	O
body	*(char)
->	O
length	long
=	O
end_of_osip_body_header	*(char)
-	O
start_of_osip_body_header	*(char)
;	O
body	*(char)
->	O
body	*(char)
[	O
body	*(char)
->	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_body_to_str	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))),*(*(char)),*(long))->(int)
(	O
const	O
osip_body_t	struct
*	O
body	*(char)
,	O
char	O
*	O
*	O
dest	*(char)
,	O
size_t	long
*	O
str_length	*(long)
)	O
{	O
char	O
*	O
tmp_body	*(char)
;	O
char	O
*	O
tmp	*(char)
;	O
char	O
*	O
ptr	*(void)
;	O
int	O
i	int
;	O
size_t	long
length	long
;	O
if	O
(	O
dest	*(char)
)	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
str_length	*(long)
)	O
*	O
str_length	*(long)
=	O
0	int
;	O
if	O
(	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	*(char)
->	O
body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
body	*(char)
->	O
length	long
<=	O
0	int
)	O
return	O
OSIP_BADPARAMETER	O
;	O
length	long
=	O
15	int
+	O
body	*(char)
->	O
length	long
+	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
*	O
40	int
)	O
;	O
tmp_body	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
length	long
)	O
;	O
if	O
(	O
tmp_body	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
ptr	*(void)
=	O
tmp_body	*(char)
;	O
if	O
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
!=	O
NULL	O
)	O
{	O
tmp_body	*(char)
=	O
osip_strn_append	(*(char),*(char),long)->(*(char))
(	O
tmp_body	*(char)
,	O
"content-type: "	*(char)
,	O
14	int
)	O
;	O
i	int
=	O
osip_content_type_to_str	(*(struct(*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
&	O
tmp	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
ptr	*(void)
)	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
length	long
<	O
tmp_body	*(char)
-	O
ptr	*(void)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
+	O
4	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	*(char)
-	O
ptr	*(void)
;	O
length	long
=	O
length	long
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
+	O
4	int
;	O
ptr	*(void)
=	O
osip_realloc	O
(	O
ptr	*(void)
,	O
length	long
)	O
;	O
tmp_body	*(char)
=	O
ptr	*(void)
+	O
len	long
;	O
}	O
tmp_body	*(char)
=	O
osip_str_append	(*(char),*(char))->(*(char))
(	O
tmp_body	*(char)
,	O
tmp	*(char)
)	O
;	O
osip_free	O
(	O
tmp	*(char)
)	O
;	O
tmp_body	*(char)
=	O
osip_strn_append	(*(char),*(char),long)->(*(char))
(	O
tmp_body	*(char)
,	O
OSIP_CRLF	*(char)
,	O
2	int
)	O
;	O
}	O
{	O
osip_list_iterator_t	struct
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
;	O
osip_header_t	struct
*	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
while	O
(	O
header	*(*(struct(*(char),*(char))))
!=	O
OSIP_SUCCESS	int
)	O
{	O
i	int
=	O
osip_header_to_str	(*(struct(*(char),*(char))),*(*(char)))->(int)
(	O
header	*(*(struct(*(char),*(char))))
,	O
&	O
tmp	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
ptr	*(void)
)	O
;	O
return	O
i	int
;	O
}	O
if	O
(	O
length	long
<	O
tmp_body	*(char)
-	O
ptr	*(void)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
+	O
4	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	*(char)
-	O
ptr	*(void)
;	O
length	long
=	O
length	long
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
+	O
4	int
;	O
ptr	*(void)
=	O
osip_realloc	O
(	O
ptr	*(void)
,	O
length	long
)	O
;	O
tmp_body	*(char)
=	O
ptr	*(void)
+	O
len	long
;	O
}	O
tmp_body	*(char)
=	O
osip_str_append	(*(char),*(char))->(*(char))
(	O
tmp_body	*(char)
,	O
tmp	*(char)
)	O
;	O
osip_free	O
(	O
tmp	*(char)
)	O
;	O
tmp_body	*(char)
=	O
osip_strn_append	(*(char),*(char),long)->(*(char))
(	O
tmp_body	*(char)
,	O
OSIP_CRLF	*(char)
,	O
2	int
)	O
;	O
header	*(*(struct(*(char),*(char))))
=	O
(	O
osip_header_t	struct
*	O
)	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
}	O
}	O
if	O
(	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
>	O
0	int
)	O
||	O
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
!=	O
NULL	O
)	O
)	O
{	O
if	O
(	O
length	long
<	O
(	O
size_t	long
)	O
(	O
tmp_body	*(char)
-	O
ptr	*(void)
+	O
3	int
)	O
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	*(char)
-	O
ptr	*(void)
;	O
length	long
=	O
length	long
+	O
3	int
+	O
body	*(char)
->	O
length	long
;	O
ptr	*(void)
=	O
osip_realloc	O
(	O
ptr	*(void)
,	O
length	long
)	O
;	O
tmp_body	*(char)
=	O
ptr	*(void)
+	O
len	long
;	O
}	O
tmp_body	*(char)
=	O
osip_strn_append	(*(char),*(char),long)->(*(char))
(	O
tmp_body	*(char)
,	O
OSIP_CRLF	*(char)
,	O
2	int
)	O
;	O
}	O
if	O
(	O
length	long
<	O
tmp_body	*(char)
-	O
ptr	*(void)
+	O
body	*(char)
->	O
length	long
+	O
4	int
)	O
{	O
size_t	long
len	long
;	O
len	long
=	O
tmp_body	*(char)
-	O
ptr	*(void)
;	O
length	long
=	O
length	long
+	O
body	*(char)
->	O
length	long
+	O
4	int
;	O
ptr	*(void)
=	O
osip_realloc	O
(	O
ptr	*(void)
,	O
length	long
)	O
;	O
tmp_body	*(char)
=	O
ptr	*(void)
+	O
len	long
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp_body	*(char)
,	O
body	*(char)
->	O
body	*(char)
,	O
body	*(char)
->	O
length	long
)	O
;	O
tmp_body	*(char)
=	O
tmp_body	*(char)
+	O
body	*(char)
->	O
length	long
;	O
if	O
(	O
str_length	*(long)
!=	O
NULL	O
)	O
*	O
str_length	*(long)
=	O
tmp_body	*(char)
-	O
ptr	*(void)
;	O
*	O
dest	*(char)
=	O
ptr	*(void)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_body_free	(*(struct(*(char),long,*(struct(int,*`)),*(struct(*`,*`,struct`)))))->(void)
(	O
osip_body_t	struct
*	O
body	*(char)
)	O
{	O
if	O
(	O
body	*(char)
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
body	*(char)
->	O
body	*(char)
)	O
;	O
if	O
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
!=	O
NULL	O
)	O
{	O
osip_content_type_free	(*(struct(*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
body	*(char)
->	O
content_type	*(struct(*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
}	O
osip_list_special_free	(*(struct(int,*(struct(*`,*`)))),*((*(void))->(void)))->(void)
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
,	O
(	O
void	O
(	O
*	O
)	O
(	O
void	O
*	O
)	O
)	O
&	O
osip_header_free	(*(struct(*(char),*(char))))->(void)
)	O
;	O
osip_free	O
(	O
body	*(char)
->	O
headers	*(struct(int,*(struct(*(struct`),*(void)))))
)	O
;	O
osip_free	O
(	O
body	*(char)
)	O
;	O
}	O
