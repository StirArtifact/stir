const	O
char	O
*	O
program_name	*(char)
=	O
NULL	O
;	O
void	O
set_program_name	(*(char))->(void)
(	O
const	O
char	O
*	O
argv0	*(char)
)	O
{	O
const	O
char	O
*	O
slash	*(char)
;	O
const	O
char	O
*	O
base	*(char)
;	O
if	O
(	O
argv0	*(char)
==	O
NULL	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"A NULL argv[0] was passed through an exec system call.\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
slash	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
argv0	*(char)
,	O
'/'	O
)	O
;	O
base	*(char)
=	O
(	O
slash	*(char)
!=	O
NULL	O
?	O
slash	*(char)
+	O
1	int
:	O
argv0	*(char)
)	O
;	O
if	O
(	O
base	*(char)
-	O
argv0	*(char)
>=	O
7	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
base	*(char)
-	O
7	int
,	O
"/.libs/"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
argv0	*(char)
=	O
base	*(char)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
base	*(char)
,	O
"lt-"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
argv0	*(char)
=	O
base	*(char)
+	O
3	int
;	O
program_invocation_short_name	*(char)
=	O
(	O
char	O
*	O
)	O
argv0	*(char)
;	O
}	O
}	O
program_name	*(char)
=	O
argv0	*(char)
;	O
program_invocation_name	*(char)
=	O
(	O
char	O
*	O
)	O
argv0	*(char)
;	O
}	O
