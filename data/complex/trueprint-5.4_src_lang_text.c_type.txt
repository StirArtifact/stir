char	O
lang_text_defaults	array(char)
[	O
]	O
=	O
"-i -n -f -b"	*(char)
;	O
char	O
lang_list_defaults	array(char)
[	O
]	O
=	O
"-i --n -w0 -l66 -b -f"	*(char)
;	O
stream_status	enum(int,int,int,int,int)
get_text_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
,	O
char_status	enum(int,int,int,int)
*	O
status	*(enum(int,int,int,int))
)	O
{	O
stream_status	enum(int,int,int,int,int)
retval	enum(int,int,int,int,int)
;	O
*	O
status	*(enum(int,int,int,int))
=	O
CHAR_NORMAL	int
;	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
if	O
(	O
*	O
input_char	*(char)
!=	O
BACKSPACE	O
)	O
{	O
char	O
nextchar	char
;	O
char_status	enum(int,int,int,int)
nextstatus	enum(int,int,int,int)
;	O
nextstatus	enum(int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
&	O
nextchar	char
)	O
;	O
if	O
(	O
nextchar	char
==	O
BACKSPACE	O
)	O
{	O
char	O
nextnextchar	char
;	O
char_status	enum(int,int,int,int)
nextnextstatus	enum(int,int,int,int)
;	O
nextnextstatus	enum(int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
&	O
nextnextchar	char
)	O
;	O
if	O
(	O
nextnextchar	char
==	O
BACKSPACE	O
)	O
{	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
nextnextchar	char
,	O
nextnextstatus	enum(int,int,int,int)
)	O
;	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
nextchar	char
,	O
nextstatus	enum(int,int,int,int)
)	O
;	O
}	O
else	O
if	O
(	O
nextnextchar	char
==	O
*	O
input_char	*(char)
)	O
{	O
*	O
status	*(enum(int,int,int,int))
=	O
CHAR_BOLD	int
;	O
}	O
else	O
if	O
(	O
nextnextchar	char
==	O
'_'	O
)	O
{	O
*	O
status	*(enum(int,int,int,int))
=	O
CHAR_UNDERLINE	int
;	O
}	O
else	O
{	O
*	O
input_char	*(char)
=	O
nextnextchar	char
;	O
}	O
}	O
else	O
{	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
nextchar	char
,	O
nextstatus	enum(int,int,int,int)
)	O
;	O
}	O
}	O
return	O
retval	enum(int,int,int,int,int)
;	O
}	O
