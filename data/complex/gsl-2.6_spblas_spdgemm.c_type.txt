int	O
gsl_spblas_dgemm	O
(	O
const	O
double	O
alpha	O
,	O
const	O
gsl_spmatrix	O
*	O
A	O
,	O
const	O
gsl_spmatrix	O
*	O
B	O
,	O
gsl_spmatrix	O
*	O
C	O
)	O
{	O
if	O
(	O
A	O
->	O
size2	O
!=	O
B	O
->	O
size1	O
||	O
A	O
->	O
size1	O
!=	O
C	O
->	O
size1	O
||	O
B	O
->	O
size2	O
!=	O
C	O
->	O
size2	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix dimensions do not match"	*(char)
,	O
GSL_EBADLEN	O
)	O
;	O
}	O
else	O
if	O
(	O
A	O
->	O
sptype	O
!=	O
B	O
->	O
sptype	O
||	O
A	O
->	O
sptype	O
!=	O
C	O
->	O
sptype	O
)	O
{	O
GSL_ERROR	O
(	O
"matrix storage formats do not match"	*(char)
,	O
GSL_EINVAL	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
GSL_SPMATRIX_ISCCS	O
(	O
A	O
)	O
)	O
{	O
GSL_ERROR	O
(	O
"compressed column format required"	*(char)
,	O
GSL_EINVAL	O
)	O
;	O
}	O
else	O
{	O
int	O
status	O
=	O
GSL_SUCCESS	O
;	O
const	O
size_t	long
M	O
=	O
A	O
->	O
size1	O
;	O
const	O
size_t	long
N	O
=	O
B	O
->	O
size2	O
;	O
int	O
*	O
Bi	O
=	O
B	O
->	O
i	O
;	O
int	O
*	O
Bp	O
=	O
B	O
->	O
p	O
;	O
double	O
*	O
Bd	O
=	O
B	O
->	O
data	O
;	O
int	O
*	O
w	O
=	O
A	O
->	O
work	O
.	O
work_int	O
;	O
double	O
*	O
x	double
=	O
C	O
->	O
work	O
.	O
work_atomic	O
;	O
int	O
*	O
Cp	O
,	O
*	O
Ci	O
;	O
double	O
*	O
Cd	O
;	O
size_t	long
j	O
;	O
int	O
p	O
;	O
size_t	long
nz	O
=	O
0	int
;	O
if	O
(	O
C	O
->	O
nzmax	O
<	O
A	O
->	O
nz	O
+	O
B	O
->	O
nz	O
)	O
{	O
status	O
=	O
gsl_spmatrix_realloc	O
(	O
A	O
->	O
nz	O
+	O
B	O
->	O
nz	O
,	O
C	O
)	O
;	O
if	O
(	O
status	O
)	O
{	O
GSL_ERROR	O
(	O
"unable to realloc matrix C"	*(char)
,	O
status	O
)	O
;	O
}	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
M	O
;	O
++	O
j	O
)	O
w	O
[	O
j	O
]	O
=	O
0	int
;	O
Cp	O
=	O
C	O
->	O
p	O
;	O
Ci	O
=	O
C	O
->	O
i	O
;	O
Cd	O
=	O
C	O
->	O
data	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
N	O
;	O
++	O
j	O
)	O
{	O
if	O
(	O
nz	O
+	O
M	O
>	O
C	O
->	O
nzmax	O
)	O
{	O
status	O
=	O
gsl_spmatrix_realloc	O
(	O
2	int
*	O
C	O
->	O
nzmax	O
+	O
M	O
,	O
C	O
)	O
;	O
if	O
(	O
status	O
)	O
{	O
GSL_ERROR	O
(	O
"unable to realloc matrix C"	*(char)
,	O
status	O
)	O
;	O
}	O
Ci	O
=	O
C	O
->	O
i	O
;	O
Cd	O
=	O
C	O
->	O
data	O
;	O
}	O
Cp	O
[	O
j	O
]	O
=	O
nz	O
;	O
for	O
(	O
p	O
=	O
Bp	O
[	O
j	O
]	O
;	O
p	O
<	O
Bp	O
[	O
j	O
+	O
1	int
]	O
;	O
++	O
p	O
)	O
{	O
nz	O
=	O
gsl_spblas_scatter	O
(	O
A	O
,	O
Bi	O
[	O
p	O
]	O
,	O
Bd	O
[	O
p	O
]	O
,	O
w	O
,	O
x	double
,	O
(	O
int	O
)	O
(	O
j	O
+	O
1	int
)	O
,	O
C	O
,	O
nz	O
)	O
;	O
}	O
for	O
(	O
p	O
=	O
Cp	O
[	O
j	O
]	O
;	O
p	O
<	O
(	O
int	O
)	O
nz	O
;	O
++	O
p	O
)	O
Cd	O
[	O
p	O
]	O
=	O
x	double
[	O
Ci	O
[	O
p	O
]	O
]	O
;	O
}	O
Cp	O
[	O
N	O
]	O
=	O
nz	O
;	O
C	O
->	O
nz	O
=	O
nz	O
;	O
gsl_spmatrix_scale	O
(	O
C	O
,	O
alpha	O
)	O
;	O
return	O
status	O
;	O
}	O
}	O
size_t	long
gsl_spblas_scatter	O
(	O
const	O
gsl_spmatrix	O
*	O
A	O
,	O
const	O
size_t	long
j	O
,	O
const	O
double	O
alpha	O
,	O
int	O
*	O
w	O
,	O
double	O
*	O
x	double
,	O
const	O
int	O
mark	O
,	O
gsl_spmatrix	O
*	O
C	O
,	O
size_t	long
nz	O
)	O
{	O
int	O
p	O
;	O
int	O
*	O
Ai	O
=	O
A	O
->	O
i	O
;	O
int	O
*	O
Ap	O
=	O
A	O
->	O
p	O
;	O
double	O
*	O
Ad	O
=	O
A	O
->	O
data	O
;	O
int	O
*	O
Ci	O
=	O
C	O
->	O
i	O
;	O
for	O
(	O
p	O
=	O
Ap	O
[	O
j	O
]	O
;	O
p	O
<	O
Ap	O
[	O
j	O
+	O
1	int
]	O
;	O
++	O
p	O
)	O
{	O
size_t	long
i	O
=	O
Ai	O
[	O
p	O
]	O
;	O
if	O
(	O
w	O
[	O
i	O
]	O
<	O
mark	O
)	O
{	O
w	O
[	O
i	O
]	O
=	O
mark	O
;	O
Ci	O
[	O
nz	O
++	O
]	O
=	O
i	O
;	O
x	double
[	O
i	O
]	O
=	O
alpha	O
*	O
Ad	O
[	O
p	O
]	O
;	O
}	O
else	O
{	O
x	double
[	O
i	O
]	O
+=	O
alpha	O
*	O
Ad	O
[	O
p	O
]	O
;	O
}	O
}	O
return	O
(	O
nz	O
)	O
;	O
}	O
