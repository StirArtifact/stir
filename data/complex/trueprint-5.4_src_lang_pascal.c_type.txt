char	O
lang_pascal_defaults	array(char)
[	O
]	O
=	O
"--f --F --i"	*(char)
;	O
typedef	O
enum	O
{	O
PAS_SPACE	int
,	O
PAS_COMMENT_START	int
,	O
PAS_COMMENT_END	int
,	O
PAS_COMMENT	int
}	O
pascal_states	enum(int,int,int,int)
;	O
typedef	O
enum	O
{	O
FN_CODE	int
,	O
FN_PROCEDURE	int
,	O
FN_FUNCTION	int
,	O
FN_BEGIN	int
,	O
FN_END	int
,	O
FN_SPACE	int
,	O
FN_NAME	int
}	O
pascal_fn_states	enum(int,int,int,int,int,int,int)
;	O
static	O
char	O
procedure_string	array(char)
[	O
]	O
=	O
"procedure"	*(char)
;	O
static	O
char	O
function_string	array(char)
[	O
]	O
=	O
"function"	*(char)
;	O
static	O
char	O
begin_string	array(char)
[	O
]	O
=	O
"begin"	*(char)
;	O
static	O
char	O
end_string	array(char)
[	O
]	O
=	O
"end"	*(char)
;	O
stream_status	enum(int,int,int,int,int)
get_pascal_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
,	O
char_status	enum(int,int,int,int)
*	O
status	enum(int,int,int,int)
)	O
{	O
stream_status	enum(int,int,int,int,int)
retval	enum(int,int,int,int,int)
;	O
static	O
pascal_states	enum(int,int,int,int)
state	*(int)
=	O
PAS_SPACE	int
;	O
static	O
pascal_fn_states	enum(int,int,int,int,int,int,int)
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
static	O
long	O
start_char	long
;	O
static	O
char	O
fn_name	array(char)
[	O
SYMBOL_LEN	int
]	O
;	O
static	O
long	O
fn_page	long
;	O
static	O
size_t	long
token_index	long
;	O
static	O
short	O
function_depth	short
=	O
0	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_NORMAL	int
;	O
if	O
(	O
restart_language	enum(int,int,int)
==	O
TRUE	int
)	O
{	O
state	*(int)
=	O
PAS_SPACE	int
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
function_depth	short
=	O
0	int
;	O
braces_depth	short
=	O
0	int
;	O
restart_language	enum(int,int,int)
=	O
FALSE	int
;	O
}	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
PAS_SPACE	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
break	O
;	O
if	O
(	O
*	O
input_char	*(char)
==	O
'{'	O
)	O
{	O
state	*(int)
=	O
PAS_COMMENT	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
}	O
else	O
if	O
(	O
*	O
input_char	*(char)
==	O
'('	O
)	O
{	O
stream_status	enum(int,int,int,int,int)
s	enum(int,int,int,int,int)
;	O
char	O
c	char
;	O
s	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
&	O
c	char
)	O
;	O
if	O
(	O
c	char
==	O
'*'	O
)	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
c	char
,	O
s	enum(int,int,int,int,int)
)	O
;	O
state	*(int)
=	O
PAS_COMMENT_START	int
;	O
}	O
break	O
;	O
case	O
PAS_COMMENT_START	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
'*'	O
)	O
{	O
state	*(int)
=	O
PAS_COMMENT	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
}	O
else	O
state	*(int)
=	O
PAS_SPACE	int
;	O
break	O
;	O
case	O
PAS_COMMENT_END	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
if	O
(	O
*	O
input_char	*(char)
==	O
')'	O
)	O
state	*(int)
=	O
PAS_SPACE	int
;	O
break	O
;	O
case	O
PAS_COMMENT	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
if	O
(	O
*	O
input_char	*(char)
==	O
'}'	O
)	O
{	O
state	*(int)
=	O
PAS_SPACE	int
;	O
}	O
else	O
if	O
(	O
*	O
input_char	*(char)
==	O
'*'	O
)	O
{	O
state	*(int)
=	O
PAS_COMMENT_END	int
;	O
}	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
(	O
state	*(int)
==	O
PAS_SPACE	int
)	O
||	O
(	O
state	*(int)
==	O
PAS_COMMENT_START	int
)	O
)	O
{	O
switch	O
(	O
fn_state	enum(int,int,int,int,int,int,int)
)	O
{	O
case	O
FN_CODE	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
'b'	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_BEGIN	int
;	O
token_index	long
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
input_char	*(char)
==	O
'e'	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_END	int
;	O
token_index	long
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
input_char	*(char)
==	O
'f'	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_FUNCTION	int
;	O
token_index	long
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
*	O
input_char	*(char)
==	O
'p'	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_PROCEDURE	int
;	O
token_index	long
=	O
1	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
FN_PROCEDURE	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
procedure_string	array(char)
[	O
token_index	long
]	O
)	O
{	O
if	O
(	O
++	O
token_index	long
==	O
strlen	(*(char))->(long)
(	O
procedure_string	array(char)
)	O
)	O
{	O
token_index	long
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_SPACE	int
;	O
}	O
}	O
else	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
break	O
;	O
case	O
FN_FUNCTION	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
function_string	array(char)
[	O
token_index	long
]	O
)	O
{	O
if	O
(	O
++	O
token_index	long
==	O
strlen	(*(char))->(long)
(	O
function_string	array(char)
)	O
)	O
{	O
token_index	long
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_SPACE	int
;	O
}	O
}	O
else	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
break	O
;	O
case	O
FN_BEGIN	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
begin_string	array(char)
[	O
token_index	long
]	O
)	O
{	O
if	O
(	O
++	O
token_index	long
==	O
strlen	(*(char))->(long)
(	O
begin_string	array(char)
)	O
)	O
{	O
token_index	long
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
braces_depth	short
++	O
;	O
}	O
}	O
else	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
break	O
;	O
case	O
FN_END	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
end_string	array(char)
[	O
token_index	long
]	O
)	O
{	O
if	O
(	O
++	O
token_index	long
==	O
strlen	(*(char))->(long)
(	O
end_string	array(char)
)	O
)	O
{	O
token_index	long
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
if	O
(	O
braces_depth	short
!=	O
0	int
)	O
if	O
(	O
--	O
braces_depth	short
==	O
function_depth	short
)	O
{	O
retval	enum(int,int,int,int,int)
|=	O
STREAM_FUNCTION_END	int
;	O
end_function	(long)->(void)
(	O
page_number	long
)	O
;	O
function_depth	short
--	O
;	O
}	O
}	O
}	O
else	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
break	O
;	O
case	O
FN_SPACE	int
:	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
{	O
if	O
(	O
isalpha	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
{	O
token_index	long
=	O
0	int
;	O
fn_name	array(char)
[	O
token_index	long
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
start_char	long
=	O
char_number	long
;	O
fn_page	long
=	O
page_number	long
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_NAME	int
;	O
}	O
else	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
}	O
break	O
;	O
case	O
FN_NAME	int
:	O
if	O
(	O
(	O
isalnum	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
||	O
*	O
input_char	*(char)
==	O
'_'	O
)	O
&&	O
(	O
token_index	long
<	O
SYMBOL_LEN	int
-	O
1	int
)	O
)	O
fn_name	array(char)
[	O
token_index	long
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
else	O
{	O
fn_name	array(char)
[	O
token_index	long
]	O
=	O
'\0'	O
;	O
add_function	(*(char),long,long,long,*(char))->(void)
(	O
fn_name	array(char)
,	O
start_char	long
,	O
char_number	long
-	O
1	int
,	O
fn_page	long
,	O
current_filename	*(char)
)	O
;	O
fn_state	enum(int,int,int,int,int,int,int)
=	O
FN_CODE	int
;	O
function_depth	short
=	O
braces_depth	short
;	O
}	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
if	O
(	O
pass	short
==	O
1	int
)	O
*	O
status	enum(int,int,int,int)
=	O
get_function_name_posn	(long,enum(int,int,int,int))->(enum(int,int,int,int))
(	O
char_number	long
,	O
*	O
status	enum(int,int,int,int)
)	O
;	O
return	O
(	O
retval	enum(int,int,int,int,int)
)	O
;	O
}	O
