static	O
void	O
print_tree_structure	O
(	O
const	O
struct	O
avl_node	O
*	O
node	O
,	O
int	O
level	O
)	O
{	O
if	O
(	O
level	O
>	O
16	int
)	O
{	O
printf	(*(char))->(int)
(	O
"[...]"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
node	O
==	O
NULL	O
)	O
return	O
;	O
printf	(*(char))->(int)
(	O
"%d"	*(char)
,	O
*	O
(	O
int	O
*	O
)	O
node	O
->	O
avl_data	O
)	O
;	O
if	O
(	O
node	O
->	O
avl_link	O
[	O
0	int
]	O
!=	O
NULL	O
||	O
node	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
putchar	(int)->(int)
(	O
'('	O
)	O
;	O
print_tree_structure	O
(	O
node	O
->	O
avl_link	O
[	O
0	int
]	O
,	O
level	O
+	O
1	int
)	O
;	O
if	O
(	O
node	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
putchar	(int)->(int)
(	O
','	O
)	O
;	O
print_tree_structure	O
(	O
node	O
->	O
avl_link	O
[	O
1	int
]	O
,	O
level	O
+	O
1	int
)	O
;	O
}	O
putchar	(int)->(int)
(	O
')'	O
)	O
;	O
}	O
}	O
void	O
print_whole_tree	O
(	O
const	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
const	O
char	O
*	O
title	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s: "	*(char)
,	O
title	O
)	O
;	O
print_tree_structure	O
(	O
tree	O
->	O
avl_root	*(struct)
,	O
0	int
)	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
static	O
int	O
check_traverser	O
(	O
struct	O
avl_traverser	O
*	O
trav	O
,	O
int	O
i	O
,	O
int	O
n	O
,	O
const	O
char	O
*	O
label	O
)	O
{	O
int	O
okay	O
=	O
1	int
;	O
int	O
*	O
cur	O
,	O
*	O
prev	O
,	O
*	O
next	O
;	O
prev	O
=	O
avl_t_prev	O
(	O
trav	O
)	O
;	O
if	O
(	O
(	O
i	O
==	O
0	int
&&	O
prev	O
!=	O
NULL	O
)	O
||	O
(	O
i	O
>	O
0	int
&&	O
(	O
prev	O
==	O
NULL	O
||	O
*	O
prev	O
!=	O
i	O
-	O
1	int
)	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"   %s traverser ahead of %d, but should be ahead of %d.\n"	*(char)
,	O
label	O
,	O
prev	O
!=	O
NULL	O
?	O
*	O
prev	O
:	O
-	O
1	int
,	O
i	O
==	O
0	int
?	O
-	O
1	int
:	O
i	O
-	O
1	int
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
avl_t_next	O
(	O
trav	O
)	O
;	O
cur	O
=	O
avl_t_cur	O
(	O
trav	O
)	O
;	O
if	O
(	O
cur	O
==	O
NULL	O
||	O
*	O
cur	O
!=	O
i	O
)	O
{	O
printf	(*(char))->(int)
(	O
"   %s traverser at %d, but should be at %d.\n"	*(char)
,	O
label	O
,	O
cur	O
!=	O
NULL	O
?	O
*	O
cur	O
:	O
-	O
1	int
,	O
i	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
next	O
=	O
avl_t_next	O
(	O
trav	O
)	O
;	O
if	O
(	O
(	O
i	O
==	O
n	O
-	O
1	int
&&	O
next	O
!=	O
NULL	O
)	O
||	O
(	O
i	O
!=	O
n	O
-	O
1	int
&&	O
(	O
next	O
==	O
NULL	O
||	O
*	O
next	O
!=	O
i	O
+	O
1	int
)	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"   %s traverser behind %d, but should be behind %d.\n"	*(char)
,	O
label	O
,	O
next	O
!=	O
NULL	O
?	O
*	O
next	O
:	O
-	O
1	int
,	O
i	O
==	O
n	O
-	O
1	int
?	O
-	O
1	int
:	O
i	O
+	O
1	int
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
avl_t_prev	O
(	O
trav	O
)	O
;	O
return	O
okay	O
;	O
}	O
static	O
int	O
compare_trees	O
(	O
struct	O
avl_node	O
*	O
a	O
,	O
struct	O
avl_node	O
*	O
b	O
)	O
{	O
int	O
okay	O
;	O
if	O
(	O
a	O
==	O
NULL	O
||	O
b	O
==	O
NULL	O
)	O
{	O
assert	O
(	O
a	O
==	O
NULL	O
&&	O
b	O
==	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
(	O
int	O
*	O
)	O
a	O
->	O
avl_data	O
!=	O
*	O
(	O
int	O
*	O
)	O
b	O
->	O
avl_data	O
||	O
(	O
(	O
a	O
->	O
avl_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
!=	O
(	O
b	O
->	O
avl_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
)	O
||	O
(	O
(	O
a	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
!=	O
(	O
b	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
)	O
||	O
a	O
->	O
avl_balance	O
!=	O
b	O
->	O
avl_balance	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Copied nodes differ: a=%d (bal=%d) b=%d (bal=%d) a:"	*(char)
,	O
*	O
(	O
int	O
*	O
)	O
a	O
->	O
avl_data	O
,	O
a	O
->	O
avl_balance	O
,	O
*	O
(	O
int	O
*	O
)	O
b	O
->	O
avl_data	O
,	O
b	O
->	O
avl_balance	O
)	O
;	O
if	O
(	O
a	O
->	O
avl_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"l"	*(char)
)	O
;	O
if	O
(	O
a	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"r"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
" b:"	*(char)
)	O
;	O
if	O
(	O
b	O
->	O
avl_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"l"	*(char)
)	O
;	O
if	O
(	O
b	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"r"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
okay	O
=	O
1	int
;	O
if	O
(	O
a	O
->	O
avl_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
okay	O
&=	O
compare_trees	O
(	O
a	O
->	O
avl_link	O
[	O
0	int
]	O
,	O
b	O
->	O
avl_link	O
[	O
0	int
]	O
)	O
;	O
if	O
(	O
a	O
->	O
avl_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
okay	O
&=	O
compare_trees	O
(	O
a	O
->	O
avl_link	O
[	O
1	int
]	O
,	O
b	O
->	O
avl_link	O
[	O
1	int
]	O
)	O
;	O
return	O
okay	O
;	O
}	O
static	O
void	O
recurse_verify_tree	O
(	O
struct	O
avl_node	O
*	O
node	O
,	O
int	O
*	O
okay	O
,	O
size_t	long
*	O
count	O
,	O
int	O
min	O
,	O
int	O
max	O
,	O
int	O
*	O
height	O
)	O
{	O
int	O
d	O
;	O
size_t	long
subcount	O
[	O
2	int
]	O
;	O
int	O
subheight	O
[	O
2	int
]	O
;	O
if	O
(	O
node	O
==	O
NULL	O
)	O
{	O
*	O
count	O
=	O
0	int
;	O
*	O
height	O
=	O
0	int
;	O
return	O
;	O
}	O
d	O
=	O
*	O
(	O
int	O
*	O
)	O
node	O
->	O
avl_data	O
;	O
if	O
(	O
min	O
>	O
max	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Parents of node %d constrain it to empty range %d...%d.\n"	*(char)
,	O
d	O
,	O
min	O
,	O
max	O
)	O
;	O
*	O
okay	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
d	O
<	O
min	O
||	O
d	O
>	O
max	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Node %d is not in range %d...%d implied by its parents.\n"	*(char)
,	O
d	O
,	O
min	O
,	O
max	O
)	O
;	O
*	O
okay	O
=	O
0	int
;	O
}	O
recurse_verify_tree	O
(	O
node	O
->	O
avl_link	O
[	O
0	int
]	O
,	O
okay	O
,	O
&	O
subcount	O
[	O
0	int
]	O
,	O
min	O
,	O
d	O
-	O
1	int
,	O
&	O
subheight	O
[	O
0	int
]	O
)	O
;	O
recurse_verify_tree	O
(	O
node	O
->	O
avl_link	O
[	O
1	int
]	O
,	O
okay	O
,	O
&	O
subcount	O
[	O
1	int
]	O
,	O
d	O
+	O
1	int
,	O
max	O
,	O
&	O
subheight	O
[	O
1	int
]	O
)	O
;	O
*	O
count	O
=	O
1	int
+	O
subcount	O
[	O
0	int
]	O
+	O
subcount	O
[	O
1	int
]	O
;	O
*	O
height	O
=	O
1	int
+	O
(	O
subheight	O
[	O
0	int
]	O
>	O
subheight	O
[	O
1	int
]	O
?	O
subheight	O
[	O
0	int
]	O
:	O
subheight	O
[	O
1	int
]	O
)	O
;	O
if	O
(	O
subheight	O
[	O
1	int
]	O
-	O
subheight	O
[	O
0	int
]	O
!=	O
node	O
->	O
avl_balance	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Balance factor of node %d is %d, but should be %d.\n"	*(char)
,	O
d	O
,	O
node	O
->	O
avl_balance	O
,	O
subheight	O
[	O
1	int
]	O
-	O
subheight	O
[	O
0	int
]	O
)	O
;	O
*	O
okay	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
node	O
->	O
avl_balance	O
<	O
-	O
1	int
||	O
node	O
->	O
avl_balance	O
>	O
+	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
" Balance factor of node %d is %d.\n"	*(char)
,	O
d	O
,	O
node	O
->	O
avl_balance	O
)	O
;	O
*	O
okay	O
=	O
0	int
;	O
}	O
}	O
static	O
int	O
verify_tree	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
array	O
[	O
]	O
,	O
size_t	long
n	O
)	O
{	O
int	O
okay	O
=	O
1	int
;	O
if	O
(	O
avl_count	long
(	O
tree	O
)	O
!=	O
n	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree count is %lu, but should be %lu.\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
avl_count	long
(	O
tree	O
)	O
,	O
(	O
unsigned	O
long	O
)	O
n	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
if	O
(	O
okay	O
)	O
{	O
size_t	long
count	O
;	O
int	O
height	O
;	O
recurse_verify_tree	O
(	O
tree	O
->	O
avl_root	*(struct)
,	O
&	O
okay	O
,	O
&	O
count	O
,	O
0	int
,	O
INT_MAX	O
,	O
&	O
height	O
)	O
;	O
if	O
(	O
count	O
!=	O
n	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree has %lu nodes, but should have %lu.\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	O
,	O
(	O
unsigned	O
long	O
)	O
n	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	O
)	O
{	O
size_t	long
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
if	O
(	O
avl_find	O
(	O
tree	O
,	O
&	O
array	O
[	O
i	O
]	O
)	O
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree does not contain expected value %d.\n"	*(char)
,	O
array	O
[	O
i	O
]	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
size_t	long
i	O
;	O
int	O
prev	O
=	O
-	O
1	int
;	O
int	O
*	O
item	O
;	O
for	O
(	O
i	O
=	O
0	int
,	O
item	O
=	O
avl_t_first	O
(	O
&	O
trav	O
,	O
tree	O
)	O
;	O
i	O
<	O
2	int
*	O
n	O
&&	O
item	O
!=	O
NULL	O
;	O
i	O
++	O
,	O
item	O
=	O
avl_t_next	O
(	O
&	O
trav	O
)	O
)	O
{	O
if	O
(	O
*	O
item	O
<=	O
prev	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree out of order: %d follows %d in traversal\n"	*(char)
,	O
*	O
item	O
,	O
prev	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
prev	O
=	O
*	O
item	O
;	O
}	O
if	O
(	O
i	O
!=	O
n	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree should have %lu items, but has %lu in traversal\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	O
,	O
(	O
unsigned	O
long	O
)	O
i	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
size_t	long
i	O
;	O
int	O
next	O
=	O
INT_MAX	O
;	O
int	O
*	O
item	O
;	O
for	O
(	O
i	O
=	O
0	int
,	O
item	O
=	O
avl_t_last	O
(	O
&	O
trav	O
,	O
tree	O
)	O
;	O
i	O
<	O
2	int
*	O
n	O
&&	O
item	O
!=	O
NULL	O
;	O
i	O
++	O
,	O
item	O
=	O
avl_t_prev	O
(	O
&	O
trav	O
)	O
)	O
{	O
if	O
(	O
*	O
item	O
>=	O
next	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree out of order: %d precedes %d in traversal\n"	*(char)
,	O
*	O
item	O
,	O
next	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
next	O
=	O
*	O
item	O
;	O
}	O
if	O
(	O
i	O
!=	O
n	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Tree should have %lu items, but has %lu in reverse\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	O
,	O
(	O
unsigned	O
long	O
)	O
i	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
}	O
if	O
(	O
okay	O
)	O
{	O
struct	O
avl_traverser	O
init	O
,	O
first	O
,	O
last	O
;	O
int	O
*	O
cur	O
,	O
*	O
prev	O
,	O
*	O
next	O
;	O
avl_t_init	O
(	O
&	O
init	O
,	O
tree	O
)	O
;	O
avl_t_first	O
(	O
&	O
first	O
,	O
tree	O
)	O
;	O
avl_t_last	O
(	O
&	O
last	O
,	O
tree	O
)	O
;	O
cur	O
=	O
avl_t_cur	O
(	O
&	O
init	O
)	O
;	O
if	O
(	O
cur	O
!=	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Inited traverser should be null, but is actually %d.\n"	*(char)
,	O
*	O
cur	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
next	O
=	O
avl_t_next	O
(	O
&	O
init	O
)	O
;	O
if	O
(	O
next	O
!=	O
avl_t_cur	O
(	O
&	O
first	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Next after null should be %d, but is actually %d.\n"	*(char)
,	O
*	O
(	O
int	O
*	O
)	O
avl_t_cur	O
(	O
&	O
first	O
)	O
,	O
*	O
next	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
avl_t_prev	O
(	O
&	O
init	O
)	O
;	O
prev	O
=	O
avl_t_prev	O
(	O
&	O
init	O
)	O
;	O
if	O
(	O
prev	O
!=	O
avl_t_cur	O
(	O
&	O
last	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Previous before null should be %d, but is actually %d.\n"	*(char)
,	O
*	O
(	O
int	O
*	O
)	O
avl_t_cur	O
(	O
&	O
last	O
)	O
,	O
*	O
prev	O
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
avl_t_next	O
(	O
&	O
init	O
)	O
;	O
}	O
return	O
okay	O
;	O
}	O
int	O
test_correctness	O
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	O
,	O
int	O
insert	O
[	O
]	O
,	O
int	O
delete	O
[	O
]	O
,	O
int	O
n	O
,	O
int	O
verbosity	O
)	O
{	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
;	O
int	O
okay	O
=	O
1	int
;	O
int	O
i	O
;	O
tree	O
=	O
avl_create	O
(	O
compare_ints	O
,	O
NULL	O
,	O
allocator	O
)	O
;	O
if	O
(	O
tree	O
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	O
>=	O
0	int
)	O
printf	(*(char))->(int)
(	O
"  Out of memory creating tree.\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
{	O
if	O
(	O
verbosity	O
>=	O
2	int
)	O
printf	(*(char))->(int)
(	O
"  Inserting %d...\n"	*(char)
,	O
insert	O
[	O
i	O
]	O
)	O
;	O
{	O
void	O
*	O
*	O
p	O
=	O
avl_probe	O
(	O
tree	O
,	O
&	O
insert	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
p	O
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	O
>=	O
0	int
)	O
printf	(*(char))->(int)
(	O
"    Out of memory in insertion.\n"	*(char)
)	O
;	O
avl_destroy	O
(	O
tree	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
*	O
p	O
!=	O
&	O
insert	O
[	O
i	O
]	O
)	O
printf	(*(char))->(int)
(	O
"    Duplicate item in tree!\n"	*(char)
)	O
;	O
}	O
if	O
(	O
verbosity	O
>=	O
3	int
)	O
print_whole_tree	O
(	O
tree	O
,	O
"    Afterward"	*(char)
)	O
;	O
if	O
(	O
!	O
verify_tree	O
(	O
tree	O
,	O
insert	O
,	O
i	O
+	O
1	int
)	O
)	O
return	O
0	int
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
{	O
struct	O
avl_traverser	O
x	O
,	O
y	O
,	O
z	O
;	O
int	O
*	O
deleted	O
;	O
if	O
(	O
insert	O
[	O
i	O
]	O
==	O
delete	O
[	O
i	O
]	O
)	O
continue	O
;	O
if	O
(	O
verbosity	O
>=	O
2	int
)	O
printf	(*(char))->(int)
(	O
"   Checking traversal from item %d...\n"	*(char)
,	O
insert	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
avl_t_find	O
(	O
&	O
x	O
,	O
tree	O
,	O
&	O
insert	O
[	O
i	O
]	O
)	O
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"    Can't find item %d in tree!\n"	*(char)
,	O
insert	O
[	O
i	O
]	O
)	O
;	O
continue	O
;	O
}	O
okay	O
&=	O
check_traverser	O
(	O
&	O
x	O
,	O
insert	O
[	O
i	O
]	O
,	O
n	O
,	O
"Predeletion"	*(char)
)	O
;	O
if	O
(	O
verbosity	O
>=	O
3	int
)	O
printf	(*(char))->(int)
(	O
"    Deleting item %d.\n"	*(char)
,	O
delete	O
[	O
i	O
]	O
)	O
;	O
deleted	O
=	O
avl_delete	O
(	O
tree	O
,	O
&	O
delete	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
deleted	O
==	O
NULL	O
||	O
*	O
deleted	O
!=	O
delete	O
[	O
i	O
]	O
)	O
{	O
okay	O
=	O
0	int
;	O
if	O
(	O
deleted	O
==	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"    Deletion failed.\n"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"    Wrong node %d returned.\n"	*(char)
,	O
*	O
deleted	O
)	O
;	O
}	O
avl_t_copy	O
(	O
&	O
y	O
,	O
&	O
x	O
)	O
;	O
if	O
(	O
verbosity	O
>=	O
3	int
)	O
printf	(*(char))->(int)
(	O
"    Re-inserting item %d.\n"	*(char)
,	O
delete	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
avl_t_insert	O
(	O
&	O
z	O
,	O
tree	O
,	O
&	O
delete	O
[	O
i	O
]	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	O
>=	O
0	int
)	O
printf	(*(char))->(int)
(	O
"    Out of memory re-inserting item.\n"	*(char)
)	O
;	O
avl_destroy	O
(	O
tree	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
okay	O
&=	O
check_traverser	O
(	O
&	O
x	O
,	O
insert	O
[	O
i	O
]	O
,	O
n	O
,	O
"Postdeletion"	*(char)
)	O
;	O
okay	O
&=	O
check_traverser	O
(	O
&	O
y	O
,	O
insert	O
[	O
i	O
]	O
,	O
n	O
,	O
"Copied"	*(char)
)	O
;	O
okay	O
&=	O
check_traverser	O
(	O
&	O
z	O
,	O
delete	O
[	O
i	O
]	O
,	O
n	O
,	O
"Insertion"	*(char)
)	O
;	O
if	O
(	O
!	O
verify_tree	O
(	O
tree	O
,	O
insert	O
,	O
n	O
)	O
)	O
return	O
0	int
;	O
}	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
{	O
int	O
*	O
deleted	O
;	O
if	O
(	O
verbosity	O
>=	O
2	int
)	O
printf	(*(char))->(int)
(	O
"  Deleting %d...\n"	*(char)
,	O
delete	O
[	O
i	O
]	O
)	O
;	O
deleted	O
=	O
avl_delete	O
(	O
tree	O
,	O
&	O
delete	O
[	O
i	O
]	O
)	O
;	O
if	O
(	O
deleted	O
==	O
NULL	O
||	O
*	O
deleted	O
!=	O
delete	O
[	O
i	O
]	O
)	O
{	O
okay	O
=	O
0	int
;	O
if	O
(	O
deleted	O
==	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"    Deletion failed.\n"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"    Wrong node %d returned.\n"	*(char)
,	O
*	O
deleted	O
)	O
;	O
}	O
if	O
(	O
verbosity	O
>=	O
3	int
)	O
print_whole_tree	O
(	O
tree	O
,	O
"    Afterward"	*(char)
)	O
;	O
if	O
(	O
!	O
verify_tree	O
(	O
tree	O
,	O
delete	O
+	O
i	O
+	O
1	int
,	O
n	O
-	O
i	O
-	O
1	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
verbosity	O
>=	O
2	int
)	O
printf	(*(char))->(int)
(	O
"  Copying tree and comparing...\n"	*(char)
)	O
;	O
{	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
copy	O
=	O
avl_copy	O
(	O
tree	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
copy	O
==	O
NULL	O
)	O
{	O
if	O
(	O
verbosity	O
>=	O
0	int
)	O
printf	(*(char))->(int)
(	O
"  Out of memory in copy\n"	*(char)
)	O
;	O
avl_destroy	O
(	O
tree	O
,	O
NULL	O
)	O
;	O
return	O
1	int
;	O
}	O
okay	O
&=	O
compare_trees	O
(	O
tree	O
->	O
avl_root	*(struct)
,	O
copy	O
->	O
avl_root	*(struct)
)	O
;	O
avl_destroy	O
(	O
copy	O
,	O
NULL	O
)	O
;	O
}	O
}	O
if	O
(	O
avl_delete	O
(	O
tree	O
,	O
&	O
insert	O
[	O
0	int
]	O
)	O
!=	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
" Deletion from empty tree succeeded.\n"	*(char)
)	O
;	O
okay	O
=	O
0	int
;	O
}	O
avl_destroy	O
(	O
tree	O
,	O
NULL	O
)	O
;	O
return	O
okay	O
;	O
}	O
static	O
int	O
test_bst_t_first	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
int	O
*	O
first	O
;	O
first	O
=	O
avl_t_first	O
(	O
&	O
trav	O
,	O
tree	O
)	O
;	O
if	O
(	O
first	O
==	O
NULL	O
||	O
*	O
first	O
!=	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    First item test failed: expected 0, got %d\n"	*(char)
,	O
first	O
!=	O
NULL	O
?	O
*	O
first	O
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_last	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
int	O
*	O
last	O
;	O
last	O
=	O
avl_t_last	O
(	O
&	O
trav	O
,	O
tree	O
)	O
;	O
if	O
(	O
last	O
==	O
NULL	O
||	O
*	O
last	O
!=	O
n	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    Last item test failed: expected %d, got %d\n"	*(char)
,	O
n	O
-	O
1	int
,	O
last	O
!=	O
NULL	O
?	O
*	O
last	O
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_find	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
int	O
*	O
iter	O
;	O
iter	O
=	O
avl_t_find	O
(	O
&	O
trav	O
,	O
tree	O
,	O
&	O
i	O
)	O
;	O
if	O
(	O
iter	O
==	O
NULL	O
||	O
*	O
iter	O
!=	O
i	O
)	O
{	O
printf	(*(char))->(int)
(	O
"    Find item test failed: looked for %d, got %d\n"	*(char)
,	O
i	O
,	O
iter	O
!=	O
NULL	O
?	O
*	O
iter	O
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_insert	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
int	O
i	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
int	O
*	O
iter	O
;	O
iter	O
=	O
avl_t_insert	O
(	O
&	O
trav	O
,	O
tree	O
,	O
&	O
i	O
)	O
;	O
if	O
(	O
iter	O
==	O
NULL	O
||	O
iter	O
==	O
&	O
i	O
||	O
*	O
iter	O
!=	O
i	O
)	O
{	O
printf	(*(char))->(int)
(	O
"    Insert item test failed: inserted dup %d, got %d\n"	*(char)
,	O
i	O
,	O
iter	O
!=	O
NULL	O
?	O
*	O
iter	O
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_next	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
int	O
i	O
;	O
avl_t_init	O
(	O
&	O
trav	O
,	O
tree	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
n	O
;	O
i	O
++	O
)	O
{	O
int	O
*	O
iter	O
=	O
avl_t_next	O
(	O
&	O
trav	O
)	O
;	O
if	O
(	O
iter	O
==	O
NULL	O
||	O
*	O
iter	O
!=	O
i	O
)	O
{	O
printf	(*(char))->(int)
(	O
"    Next item test failed: expected %d, got %d\n"	*(char)
,	O
i	O
,	O
iter	O
!=	O
NULL	O
?	O
*	O
iter	O
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_t_prev	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
struct	O
avl_traverser	O
trav	O
;	O
int	O
i	O
;	O
avl_t_init	O
(	O
&	O
trav	O
,	O
tree	O
)	O
;	O
for	O
(	O
i	O
=	O
n	O
-	O
1	int
;	O
i	O
>=	O
0	int
;	O
i	O
--	O
)	O
{	O
int	O
*	O
iter	O
=	O
avl_t_prev	O
(	O
&	O
trav	O
)	O
;	O
if	O
(	O
iter	O
==	O
NULL	O
||	O
*	O
iter	O
!=	O
i	O
)	O
{	O
printf	(*(char))->(int)
(	O
"    Previous item test failed: expected %d, got %d\n"	*(char)
,	O
i	O
,	O
iter	O
!=	O
NULL	O
?	O
*	O
iter	O
:	O
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
int	O
test_bst_copy	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
,	O
int	O
n	O
)	O
{	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
copy	O
=	O
avl_copy	O
(	O
tree	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
int	O
okay	O
=	O
compare_trees	O
(	O
tree	O
->	O
avl_root	*(struct)
,	O
copy	O
->	O
avl_root	*(struct)
)	O
;	O
avl_destroy	O
(	O
copy	O
,	O
NULL	O
)	O
;	O
return	O
okay	O
;	O
}	O
int	O
test_overflow	O
(	O
struct	O
libavl_allocator	struct(*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),long)->(*(void))),*((*(struct(*((*`,long)->(*`)),*((*`,*`)->(void)))),*(void))->(void)))
*	O
allocator	O
,	O
int	O
order	O
[	O
]	O
,	O
int	O
n	O
,	O
int	O
verbosity	O
)	O
{	O
typedef	O
int	O
test_func	O
(	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
,	O
int	O
n	O
)	O
;	O
struct	O
test	O
{	O
test_func	O
*	O
func	O
;	O
const	O
char	O
*	O
name	O
;	O
}	O
;	O
static	O
const	O
struct	O
test	O
test	O
[	O
]	O
=	O
{	O
{	O
test_bst_t_first	O
,	O
"first item"	*(char)
}	O
,	O
{	O
test_bst_t_last	O
,	O
"last item"	*(char)
}	O
,	O
{	O
test_bst_t_find	O
,	O
"find item"	*(char)
}	O
,	O
{	O
test_bst_t_insert	O
,	O
"insert item"	*(char)
}	O
,	O
{	O
test_bst_t_next	O
,	O
"next item"	*(char)
}	O
,	O
{	O
test_bst_t_prev	O
,	O
"previous item"	*(char)
}	O
,	O
{	O
test_bst_copy	O
,	O
"copy tree"	*(char)
}	O
,	O
}	O
;	O
const	O
struct	O
test	O
*	O
i	O
;	O
for	O
(	O
i	O
=	O
test	O
;	O
i	O
<	O
test	O
+	O
sizeof	O
test	O
/	O
sizeof	O
*	O
test	O
;	O
i	O
++	O
)	O
{	O
struct	O
avl_table	struct(*(struct),*((*(void),*(void),*(void))->(int)),*(void),*(struct(*((*(struct`),long)->(*(void))),*((*(struct`),*(void))->(void)))),long,long)
*	O
tree	O
;	O
int	O
j	O
;	O
if	O
(	O
verbosity	O
>=	O
2	int
)	O
printf	(*(char))->(int)
(	O
"  Running %s test...\n"	*(char)
,	O
i	O
->	O
name	O
)	O
;	O
tree	O
=	O
avl_create	O
(	O
compare_ints	O
,	O
NULL	O
,	O
allocator	O
)	O
;	O
if	O
(	O
tree	O
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"    Out of memory creating tree.\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
n	O
;	O
j	O
++	O
)	O
{	O
void	O
*	O
*	O
p	O
=	O
avl_probe	O
(	O
tree	O
,	O
&	O
order	O
[	O
j	O
]	O
)	O
;	O
if	O
(	O
p	O
==	O
NULL	O
||	O
*	O
p	O
!=	O
&	O
order	O
[	O
j	O
]	O
)	O
{	O
if	O
(	O
p	O
==	O
NULL	O
&&	O
verbosity	O
>=	O
0	int
)	O
printf	(*(char))->(int)
(	O
"    Out of memory in insertion.\n"	*(char)
)	O
;	O
else	O
if	O
(	O
p	O
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"    Duplicate item in tree!\n"	*(char)
)	O
;	O
avl_destroy	O
(	O
tree	O
,	O
NULL	O
)	O
;	O
return	O
p	O
==	O
NULL	O
;	O
}	O
}	O
if	O
(	O
i	O
->	O
func	O
(	O
tree	O
,	O
n	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
verify_tree	O
(	O
tree	O
,	O
order	O
,	O
n	O
)	O
==	O
0	int
)	O
return	O
0	int
;	O
avl_destroy	O
(	O
tree	O
,	O
NULL	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
