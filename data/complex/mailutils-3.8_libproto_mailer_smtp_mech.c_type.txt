static	O
int	O
_mech_comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
(	O
const	O
char	O
*	O
)	O
item	*(void)
,	O
(	O
const	O
char	O
*	O
)	O
data	*(void)
)	O
;	O
}	O
int	O
mu_smtp_add_auth_mech	(*(struct),*(char))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
const	O
char	O
*	O
mech	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
smtp	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
smtp	*(struct)
->	O
authmech	*(struct)
)	O
{	O
int	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
smtp	*(struct)
->	O
authmech	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
smtp	*(struct)
->	O
authmech	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
smtp	*(struct)
->	O
authmech	*(struct)
,	O
_mech_comp	(*(void),*(void))->(int)
)	O
;	O
}	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mech	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
mu_strupper	(*(char))->(int)
(	O
p	*(char)
)	O
;	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
smtp	*(struct)
->	O
authmech	*(struct)
,	O
p	*(char)
)	O
;	O
}	O
int	O
mu_smtp_clear_auth_mech	(*(struct))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
)	O
{	O
if	O
(	O
!	O
smtp	*(struct)
)	O
return	O
EINVAL	int
;	O
mu_list_clear	(*(struct))->(void)
(	O
smtp	*(struct)
->	O
authmech	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mech_append	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_smtp_t	*(struct)
smtp	*(struct)
=	O
data	*(void)
;	O
const	O
char	O
*	O
mech	*(char)
=	O
item	*(void)
;	O
return	O
mu_smtp_add_auth_mech	(*(struct),*(char))->(int)
(	O
smtp	*(struct)
,	O
mech	*(char)
)	O
;	O
}	O
int	O
mu_smtp_add_auth_mech_list	(*(struct),*(struct))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
mu_list_t	*(struct)
list	*(struct)
)	O
{	O
if	O
(	O
!	O
smtp	*(struct)
)	O
return	O
EINVAL	int
;	O
return	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
list	*(struct)
,	O
_mech_append	(*(void),*(void))->(int)
,	O
smtp	*(struct)
)	O
;	O
}	O
int	O
_mu_smtp_mech_impl	(*(struct(int,*(struct),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))),*(struct))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
mu_list_t	*(struct)
list	*(struct)
)	O
{	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
smtp	*(struct)
->	O
authimpl	*(struct)
)	O
;	O
smtp	*(struct)
->	O
authimpl	*(struct)
=	O
list	*(struct)
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
smtp	*(struct)
->	O
authimpl	*(struct)
,	O
_mech_comp	(*(void),*(void))->(int)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_mech_copy	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
const	O
char	O
*	O
mech	*(char)
=	O
item	*(void)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
data	*(void)
;	O
return	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
(	O
void	O
*	O
)	O
mech	*(char)
)	O
;	O
}	O
int	O
mu_smtp_mech_select	(*(struct),*(*(char)))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
const	O
char	O
*	O
*	O
pmech	*(*(char))
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
authstr	*(char)
;	O
mu_list_t	*(struct)
alist	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
if	O
(	O
!	O
smtp	*(struct)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_smtp_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
"AUTH"	*(char)
,	O
&	O
authstr	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
smtp	*(struct)
->	O
authimpl	*(struct)
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
smtp	*(struct)
->	O
authmech	*(struct)
)	O
{	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
alist	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
rc	int
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
smtp	*(struct)
->	O
authimpl	*(struct)
,	O
_mech_copy	(*(void),*(void))->(int)
,	O
alist	*(struct)
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
mu_list_intersect_dup	(*(*(struct)),*(struct),*(struct),*((*(*(void)),*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
alist	*(struct)
,	O
smtp	*(struct)
->	O
authmech	*(struct)
,	O
smtp	*(struct)
->	O
authimpl	*(struct)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
alist	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
int	O
res	*(int)
=	O
1	int
;	O
rc	int
=	O
MU_ERR_NOENT	O
;	O
authstr	*(char)
+=	O
5	int
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
rc	int
&&	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
const	O
char	O
*	O
mech	*(char)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
mech	*(char)
)	O
;	O
for	O
(	O
p	*(char)
=	O
authstr	*(char)
;	O
*	O
p	*(char)
;	O
)	O
{	O
char	O
*	O
end	long
;	O
p	*(char)
=	O
mu_str_stripws	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
p	*(char)
)	O
;	O
end	long
=	O
mu_str_skip_class_comp	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
MU_CTYPE_SPACE	int
)	O
;	O
res	*(int)
=	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
mech	*(char)
,	O
p	*(char)
,	O
end	long
-	O
p	*(char)
)	O
;	O
if	O
(	O
res	*(int)
==	O
0	int
)	O
{	O
*	O
pmech	*(*(char))
=	O
mech	*(char)
;	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
p	*(char)
=	O
end	long
;	O
}	O
}	O
}	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
alist	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
