struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
{	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
;	O
unsigned	O
count	int
;	O
unsigned	O
rlen	int
;	O
unsigned	O
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
;	O
}	O
;	O
static	O
void	O
TC	(*(int),int)->(void)
(	O
unsigned	O
*	O
R	*(int)
,	O
int	O
n	long
)	O
;	O
static	O
void	O
mark_profile	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char))->(void)
(	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
*	O
datum	union(int,struct(long,*(char)))
,	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
char	O
*	O
target_name	*(char)
)	O
;	O
static	O
void	O
mark_list	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
*	O
datum	union(int,struct(long,*(char)))
,	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
list	*(*(struct))
)	O
;	O
static	O
void	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char)))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
ptr	*(*(void))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
;	O
static	O
int	O
sym_counter	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
grad_symbol_t	struct
*	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
)	O
{	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
)	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
ordnum	int
=	O
(	O
*	O
(	O
int	O
*	O
)	O
closure	*(void)
)	O
++	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
radck_setbit	(*(int),int,int,int)->(void)
(	O
unsigned	O
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
,	O
unsigned	O
rowsize	int
,	O
unsigned	O
row	int
,	O
unsigned	O
col	int
)	O
{	O
SETBIT	O
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
+	O
rowsize	int
*	O
row	int
,	O
col	int
)	O
;	O
}	O
static	O
int	O
radck_bitisset	(*(int),int,int,int)->(int)
(	O
unsigned	O
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
,	O
unsigned	O
rowsize	int
,	O
unsigned	O
row	int
,	O
unsigned	O
col	int
)	O
{	O
return	O
BITISSET	O
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
+	O
rowsize	int
*	O
row	int
,	O
col	int
)	O
;	O
}	O
static	O
void	O
mark_profile	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char))->(void)
(	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
*	O
datum	union(int,struct(long,*(char)))
,	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
char	O
*	O
target_name	*(char)
)	O
{	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
target	*(struct(*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int)),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long),int))
=	O
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
)	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
datum	union(int,struct(long,*(char)))
->	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
target_name	*(char)
)	O
;	O
if	O
(	O
!	O
target	*(struct(*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int)),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long),int))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
&	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
,	O
_	O
(	O
"Match-Profile refers to non-existing profile (%s)"	*(char)
)	O
,	O
target_name	*(char)
)	O
;	O
return	O
;	O
}	O
do	O
{	O
radck_setbit	(*(int),int,int,int)->(void)
(	O
datum	union(int,struct(long,*(char)))
->	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
,	O
datum	union(int,struct(long,*(char)))
->	O
rlen	int
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
ordnum	int
,	O
target	*(struct(*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int)),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long),int))
->	O
ordnum	int
)	O
;	O
}	O
while	O
(	O
(	O
target	*(struct(*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int)),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long),int))
=	O
target	*(struct(*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int)),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long),int))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
target	*(struct(*(struct(*(struct`),*(char),*(struct`),*(struct`),struct(*`,long),int)),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),struct(*(char),long),int))
->	O
name	*(char)
,	O
target_name	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
mark_list	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
*	O
datum	union(int,struct(long,*(char)))
,	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
list	*(*(struct))
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
;	O
if	O
(	O
p	*(struct)
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
list	*(*(struct))
,	O
DA_MATCH_PROFILE	int
)	O
)	O
{	O
do	O
{	O
mark_profile	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char))->(void)
(	O
datum	union(int,struct(long,*(char)))
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
p	*(struct)
->	O
avp_strvalue	O
)	O
;	O
}	O
while	O
(	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
&&	O
(	O
p	*(struct)
=	O
grad_avl_find	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
DA_MATCH_PROFILE	int
)	O
)	O
)	O
;	O
}	O
}	O
static	O
int	O
pass1	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
grad_symbol_t	struct
*	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
)	O
{	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
*	O
datum	union(int,struct(long,*(char)))
=	O
closure	*(void)
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
)	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
;	O
mark_list	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
datum	union(int,struct(long,*(char)))
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
check	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
mark_list	(*(struct(*(struct(int,int,int,*`,*`)),int,int,*(int))),*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
datum	union(int,struct(long,*(char)))
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
pass2	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
grad_symbol_t	struct
*	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
)	O
{	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
*	O
datum	union(int,struct(long,*(char)))
=	O
closure	*(void)
;	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
(	O
User_symbol	struct(*(struct(*(struct(*`,*`,*`,*`,struct`,int)),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),struct(*(char),long),int)),*(char),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),struct(*(char),long),int)
*	O
)	O
symbol	struct(*(struct(*(struct(*(struct`),*(char))),*(char))),*(char))
;	O
if	O
(	O
radck_bitisset	(*(int),int,int,int)->(int)
(	O
datum	union(int,struct(long,*(char)))
->	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
,	O
datum	union(int,struct(long,*(char)))
->	O
rlen	int
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
ordnum	int
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
ordnum	int
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
&	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
loc	struct(*(char),long)
,	O
_	O
(	O
"circular dependency for %s"	*(char)
)	O
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
name	*(char)
)	O
;	O
grad_symtab_delete	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
datum	union(int,struct(long,*(char)))
->	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
,	O
(	O
grad_symbol_t	struct
*	O
)	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
;	O
datum	union(int,struct(long,*(char)))
->	O
count	int
--	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
radck	()->(void)
(	O
)	O
{	O
int	O
user_count	int
;	O
struct	O
check_datum	struct(*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int)))),int,int,*(int))
datum	union(int,struct(long,*(char)))
;	O
unsigned	O
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
,	O
size	int
;	O
user_count	int
=	O
0	int
;	O
grad_symtab_iterate	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*((*(void),*(struct(*`,*`)))->(int)),*(void))->(void)
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
sym_counter	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
,	O
&	O
user_count	int
)	O
;	O
if	O
(	O
user_count	int
)	O
{	O
size	int
=	O
(	O
user_count	int
+	O
BITS_PER_WORD	O
-	O
1	int
)	O
/	O
BITS_PER_WORD	O
;	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
=	O
grad_malloc	(long)->(*(void))
(	O
user_count	int
*	O
size	int
*	O
sizeof	O
(	O
unsigned	O
)	O
)	O
;	O
if	O
(	O
!	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"not enough memory for transitivity check"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
datum	union(int,struct(long,*(char)))
.	O
symtab	*(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
=	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
;	O
datum	union(int,struct(long,*(char)))
.	O
count	int
=	O
user_count	int
;	O
datum	union(int,struct(long,*(char)))
.	O
rlen	int
=	O
size	int
;	O
datum	union(int,struct(long,*(char)))
.	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
=	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
;	O
grad_symtab_iterate	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*((*(void),*(struct(*`,*`)))->(int)),*(void))->(void)
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
pass1	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
,	O
&	O
datum	union(int,struct(long,*(char)))
)	O
;	O
TC	(*(int),int)->(void)
(	O
datum	union(int,struct(long,*(char)))
.	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
,	O
user_count	int
)	O
;	O
grad_symtab_iterate	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*((*(void),*(struct(*`,*`)))->(int)),*(void))->(void)
(	O
user_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
pass2	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
,	O
&	O
datum	union(int,struct(long,*(char)))
)	O
;	O
grad_free	(*(void))->(void)
(	O
datum	union(int,struct(long,*(char)))
.	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
;	O
user_count	int
=	O
datum	union(int,struct(long,*(char)))
.	O
count	int
;	O
}	O
if	O
(	O
user_count	int
==	O
0	int
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"USER LIST IS EMPTY"	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char)))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
ptr	*(*(void))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
if	O
(	O
*	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char)))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"duplicate %s attribute"	*(char)
)	O
,	O
ptr	*(*(void))
->	O
name	*(char)
)	O
;	O
}	O
else	O
*	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char)))
=	O
ptr	*(*(void))
;	O
}	O
static	O
int	O
compile_pair	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
if	O
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
eval_type	enum(int,int,int)
==	O
grad_eval_interpret	int
)	O
{	O
char	O
*	O
symname	*(char)
=	O
rewrite_compile	(*(char))->(*(char))
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
if	O
(	O
symname	*(char)
==	O
0	int
)	O
return	O
-	O
1	int
;	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
eval_type	enum(int,int,int)
=	O
grad_eval_compiled	int
;	O
grad_free	(*(void))->(void)
(	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
)	O
;	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strvalue	O
=	O
symname	*(char)
;	O
pair	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_strlength	O
=	O
strlen	(*(char))->(long)
(	O
symname	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
fix_check_pairs	(int,*(struct(*(char),long)),*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
int	O
cf_file	int
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
,	O
char	O
*	O
name	*(char)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
auth_type	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
auth_data	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pam_auth	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
password	*(char)
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
crypt_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
chap_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
pass_loc	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
grad_dict_attr_t	struct
*	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
;	O
int	O
errcnt	long
=	O
0	int
;	O
for	O
(	O
p	*(struct)
=	O
*	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
;	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
=	O
grad_attr_number_to_dict	(int)->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
p	*(struct)
->	O
attribute	int
)	O
;	O
if	O
(	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
)	O
{	O
if	O
(	O
!	O
(	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
prop	int
&	O
GRAD_AF_LHS	O
(	O
cf_file	int
)	O
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"attribute %s not allowed in LHS"	*(char)
)	O
,	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
name	*(char)
)	O
;	O
errcnt	long
++	O
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
p	*(struct)
->	O
attribute	int
)	O
{	O
case	O
DA_AUTH_TYPE	int
:	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
auth_type	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_AUTH_DATA	int
:	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
auth_data	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_PAM_AUTH	int
:	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
pam_auth	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_USER_PASSWORD	int
:	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
password	*(char)
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_CRYPT_PASSWORD	int
:	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
crypt_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_PASSWORD_LOCATION	int
:	O
if	O
(	O
p	*(struct)
->	O
avp_lvalue	O
==	O
DV_PASSWORD_LOCATION_SQL	int
)	O
{	O
const	O
char	O
*	O
msg	*(char)
;	O
if	O
(	O
!	O
sql_auth_avail_p	()->(int)
(	O
&	O
msg	*(char)
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
msg	*(char)
)	O
;	O
errcnt	long
++	O
;	O
}	O
}	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
pass_loc	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_CHAP_PASSWORD	int
:	O
check_dup_attr	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(struct(*(char),long)))->(void)
(	O
&	O
chap_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
p	*(struct)
,	O
loc	struct(*(char),long)
)	O
;	O
break	O
;	O
case	O
DA_MATCH_PROFILE	int
:	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
"DEFAULT"	*(char)
,	O
7	int
)	O
==	O
0	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(struct)
->	O
avp_strvalue	O
,	O
"BEGIN"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"Match-Profile refers to a DEFAULT entry"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
break	O
;	O
case	O
DA_SIMULTANEOUS_USE	int
:	O
if	O
(	O
!	O
radius_mlc_enabled_p	()->(int)
(	O
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"Simultaneous-Use is used, but multiple login checking is not enabled"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
}	O
}	O
if	O
(	O
cf_file	int
!=	O
GRAD_CF_USERS	int
)	O
return	O
0	int
;	O
if	O
(	O
!	O
auth_type	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
int	O
type	int
;	O
if	O
(	O
crypt_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
type	int
=	O
DV_AUTH_TYPE_CRYPT_LOCAL	int
;	O
crypt_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
attribute	int
=	O
DA_USER_PASSWORD	int
;	O
}	O
else	O
if	O
(	O
password	*(char)
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
password	*(char)
->	O
avp_strvalue	O
,	O
"UNIX"	*(char)
)	O
)	O
type	int
=	O
DV_AUTH_TYPE_SYSTEM	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
password	*(char)
->	O
avp_strvalue	O
,	O
"PAM"	*(char)
)	O
)	O
type	int
=	O
DV_AUTH_TYPE_PAM	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
password	*(char)
->	O
avp_strvalue	O
,	O
"MYSQL"	*(char)
)	O
||	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
password	*(char)
->	O
avp_strvalue	O
,	O
"SQL"	*(char)
)	O
)	O
type	int
=	O
DV_AUTH_TYPE_SQL	int
;	O
else	O
type	int
=	O
DV_AUTH_TYPE_LOCAL	int
;	O
}	O
else	O
{	O
return	O
0	int
;	O
}	O
auth_type	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
grad_avp_create_integer	(int,int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_AUTH_TYPE	int
,	O
type	int
)	O
;	O
grad_avl_add_pair	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
auth_type	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
switch	O
(	O
auth_type	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
->	O
avp_lvalue	O
)	O
{	O
case	O
DV_AUTH_TYPE_LOCAL	int
:	O
if	O
(	O
!	O
password	*(char)
&&	O
!	O
chap_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
&&	O
!	O
pass_loc	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"No User-Password attribute in LHS"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
break	O
;	O
case	O
DV_AUTH_TYPE_SYSTEM	int
:	O
if	O
(	O
radiusd_user	struct(*(char),int,int)
.	O
username	*(char)
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"Auth-Type = System can only be used when running with root privileges"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
case	O
DV_AUTH_TYPE_REJECT	int
:	O
case	O
DV_AUTH_TYPE_ACCEPT	int
:	O
if	O
(	O
password	*(char)
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"User-Password attribute ignored for this Auth-Type"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
pass_loc	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"Password-Location attribute ignored for this Auth-Type"	*(char)
)	O
)	O
;	O
}	O
break	O
;	O
case	O
DV_AUTH_TYPE_CRYPT_LOCAL	int
:	O
if	O
(	O
!	O
password	*(char)
&&	O
!	O
crypt_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
&&	O
!	O
pass_loc	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"No User-Password attribute in LHS"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
break	O
;	O
case	O
DV_AUTH_TYPE_SECURID	int
:	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"Authentication type not supported"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
break	O
;	O
case	O
DV_AUTH_TYPE_SQL	int
:	O
{	O
const	O
char	O
*	O
msg	*(char)
;	O
if	O
(	O
!	O
sql_auth_avail_p	()->(int)
(	O
&	O
msg	*(char)
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
msg	*(char)
)	O
;	O
errcnt	long
++	O
;	O
break	O
;	O
}	O
if	O
(	O
password	*(char)
||	O
crypt_password	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"User-Password attribute ignored for this Auth-Type"	*(char)
)	O
)	O
;	O
}	O
grad_avl_delete	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(void)
(	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
DA_AUTH_TYPE	int
)	O
;	O
p	*(struct)
=	O
grad_avp_create_integer	(int,int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_AUTH_TYPE	int
,	O
DV_AUTH_TYPE_CRYPT_LOCAL	int
)	O
;	O
grad_avl_add_pair	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
p	*(struct)
)	O
;	O
p	*(struct)
=	O
grad_avp_create_integer	(int,int)->(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
(	O
DA_PASSWORD_LOCATION	int
,	O
DV_PASSWORD_LOCATION_SQL	int
)	O
;	O
grad_avl_add_pair	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
,	O
p	*(struct)
)	O
;	O
break	O
;	O
}	O
case	O
DV_AUTH_TYPE_PAM	int
:	O
if	O
(	O
pam_auth	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
&&	O
auth_data	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"Both Auth-Data and PAM-Auth attributes present"	*(char)
)	O
)	O
;	O
auth_data	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
}	O
else	O
pam_auth	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
auth_data	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
break	O
;	O
}	O
return	O
errcnt	long
;	O
}	O
int	O
fix_reply_pairs	(int,*(struct(*(char),long)),*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
int	O
cf_file	int
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
,	O
char	O
*	O
name	*(char)
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
)	O
{	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
p	*(struct)
;	O
int	O
fall_through	int
=	O
0	int
;	O
grad_dict_attr_t	struct
*	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
;	O
int	O
errcnt	long
=	O
0	int
;	O
for	O
(	O
p	*(struct)
=	O
*	O
pairs	*(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
;	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
=	O
grad_attr_number_to_dict	(int)->(*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))
(	O
p	*(struct)
->	O
attribute	int
)	O
;	O
if	O
(	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
)	O
{	O
if	O
(	O
!	O
(	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
prop	int
&	O
GRAD_AF_RHS	O
(	O
cf_file	int
)	O
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"attribute %s not allowed in RHS"	*(char)
)	O
,	O
dict	*(struct(*(char),int,int,int,int,*((*(struct`),*(*`))->(int))))
->	O
name	*(char)
)	O
;	O
errcnt	long
++	O
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
p	*(struct)
->	O
attribute	int
)	O
{	O
case	O
DA_FALL_THROUGH	int
:	O
fall_through	int
++	O
;	O
break	O
;	O
case	O
DA_ADD_PORT_TO_IP_ADDRESS	int
:	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"Use of Add-Port-To-IP-Address is deprecated"	*(char)
)	O
)	O
;	O
errcnt	long
++	O
;	O
}	O
if	O
(	O
compile_pair	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(int)
(	O
p	*(struct)
)	O
)	O
errcnt	long
++	O
;	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
name	*(char)
,	O
"BEGIN"	*(char)
,	O
5	int
)	O
==	O
0	int
&&	O
fall_through	int
==	O
0	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
loc	struct(*(char),long)
,	O
"%s"	*(char)
,	O
_	O
(	O
"BEGIN without Fall-Through"	*(char)
)	O
)	O
;	O
}	O
return	O
errcnt	long
;	O
}	O
void	O
TC	(*(int),int)->(void)
(	O
unsigned	O
*	O
R	*(int)
,	O
int	O
n	long
)	O
{	O
register	O
int	O
rowsize	int
;	O
register	O
unsigned	O
mask	int
;	O
register	O
unsigned	O
*	O
rowj	*(int)
;	O
register	O
unsigned	O
*	O
rp	*(int)
;	O
register	O
unsigned	O
*	O
rend	*(int)
;	O
register	O
unsigned	O
*	O
ccol	*(int)
;	O
unsigned	O
*	O
relend	*(int)
;	O
unsigned	O
*	O
cword	*(int)
;	O
unsigned	O
*	O
rowi	*(int)
;	O
rowsize	int
=	O
WORDSIZE	O
(	O
n	long
)	O
*	O
sizeof	O
(	O
unsigned	O
)	O
;	O
relend	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
R	*(int)
+	O
(	O
n	long
*	O
rowsize	int
)	O
)	O
;	O
cword	*(int)
=	O
R	*(int)
;	O
mask	int
=	O
1	int
;	O
rowi	*(int)
=	O
R	*(int)
;	O
while	O
(	O
rowi	*(int)
<	O
relend	*(int)
)	O
{	O
ccol	*(int)
=	O
cword	*(int)
;	O
rowj	*(int)
=	O
R	*(int)
;	O
while	O
(	O
rowj	*(int)
<	O
relend	*(int)
)	O
{	O
if	O
(	O
*	O
ccol	*(int)
&	O
mask	int
)	O
{	O
rp	*(int)
=	O
rowi	*(int)
;	O
rend	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	*(int)
+	O
rowsize	int
)	O
;	O
while	O
(	O
rowj	*(int)
<	O
rend	*(int)
)	O
*	O
rowj	*(int)
++	O
|=	O
*	O
rp	*(int)
++	O
;	O
}	O
else	O
{	O
rowj	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	*(int)
+	O
rowsize	int
)	O
;	O
}	O
ccol	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ccol	*(int)
+	O
rowsize	int
)	O
;	O
}	O
mask	int
<<=	O
1	int
;	O
if	O
(	O
mask	int
==	O
0	int
)	O
{	O
mask	int
=	O
1	int
;	O
cword	*(int)
++	O
;	O
}	O
rowi	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowi	*(int)
+	O
rowsize	int
)	O
;	O
}	O
}	O
