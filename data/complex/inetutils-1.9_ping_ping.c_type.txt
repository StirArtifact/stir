extern	O
int	O
ping_echo	(*(char))->(int)
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
extern	O
int	O
ping_timestamp	(*(char))->(int)
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
extern	O
int	O
ping_address	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
extern	O
int	O
ping_router	(*(char))->(int)
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
;	O
bool	bool
is_root	bool
=	O
false	int
;	O
unsigned	O
char	O
*	O
data_buffer	*(char)
;	O
unsigned	O
char	O
*	O
patptr	*(char)
;	O
int	O
pattern_len	*(int)
=	O
16	int
;	O
int	O
socket_type	int
;	O
size_t	long
count	long
=	O
DEFAULT_PING_COUNT	int
;	O
size_t	long
interval	long
;	O
size_t	long
data_length	long
=	O
PING_DATALEN	O
;	O
unsigned	O
options	*(struct(*(char),int,*(char),int,*(char),int))
;	O
unsigned	O
long	O
preload	long
=	O
0	int
;	O
int	O
timeout	int
=	O
-	O
1	int
;	O
int	O
linger	struct(int,int)
=	O
MAXWAIT	int
;	O
int	O
(	O
*	O
ping_type	int
)	O
(	O
char	O
*	O
hostname	*(char)
)	O
=	O
ping_echo	(*(char))->(int)
;	O
int	O
(	O
*	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
const	O
char	O
*	O
arg	*(char)
)	O
)	O
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
static	O
int	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"HOST ..."	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Send ICMP ECHO_REQUEST packets to network hosts."	*(char)
"\vOptions marked with (root only) are available only to "	*(char)
"superuser."	*(char)
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Sergey Poznyakoff"	*(char)
,	O
NULL	O
}	O
;	O
enum	O
{	O
ARG_ECHO	int
=	O
256	int
,	O
ARG_ADDRESS	int
,	O
ARG_TIMESTAMP	int
,	O
ARG_ROUTERDISCOVERY	int
}	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options controlling ICMP request types:"	*(char)
,	O
GRP	int
}	O
,	O
{	O
"address"	*(char)
,	O
ARG_ADDRESS	int
,	O
NULL	O
,	O
0	int
,	O
"send ICMP_ADDRESS packets (root only)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"echo"	*(char)
,	O
ARG_ECHO	int
,	O
NULL	O
,	O
0	int
,	O
"send ICMP_ECHO packets (default)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timestamp"	*(char)
,	O
ARG_TIMESTAMP	int
,	O
NULL	O
,	O
0	int
,	O
"send ICMP_TIMESTAMP packets"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"type"	*(char)
,	O
't'	O
,	O
"TYPE"	*(char)
,	O
0	int
,	O
"send TYPE packets"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"router"	*(char)
,	O
ARG_ROUTERDISCOVERY	int
,	O
NULL	O
,	O
OPTION_HIDDEN	int
,	O
"send "	*(char)
"ICMP_ROUTERDISCOVERY packets (root only)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for all request types:"	*(char)
,	O
GRP	int
}	O
,	O
{	O
"count"	*(char)
,	O
'c'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"stop after sending NUMBER packets"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"set the SO_DEBUG option"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"interval"	*(char)
,	O
'i'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"wait NUMBER seconds between sending each "	*(char)
"packet"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"numeric"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
0	int
,	O
"do not resolve host addresses"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"ignore-routing"	*(char)
,	O
'r'	O
,	O
NULL	O
,	O
0	int
,	O
"send directly to a host on an attached "	*(char)
"network"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"verbose"	*(char)
,	O
'v'	O
,	O
NULL	O
,	O
0	int
,	O
"verbose output"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"timeout"	*(char)
,	O
'w'	O
,	O
"N"	*(char)
,	O
0	int
,	O
"stop after N seconds"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"linger"	*(char)
,	O
'W'	O
,	O
"N"	*(char)
,	O
0	int
,	O
"number of seconds to wait for response"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
"Options valid for --echo requests:"	*(char)
,	O
GRP	int
}	O
,	O
{	O
"flood"	*(char)
,	O
'f'	O
,	O
NULL	O
,	O
0	int
,	O
"flood ping (root only)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"preload"	*(char)
,	O
'l'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"send NUMBER packets as fast as possible "	*(char)
"before falling into normal mode of behavior (root only)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"pattern"	*(char)
,	O
'p'	O
,	O
"PATTERN"	*(char)
,	O
0	int
,	O
"fill ICMP packet with given pattern (hex)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"quiet"	*(char)
,	O
'q'	O
,	O
NULL	O
,	O
0	int
,	O
"quiet output"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"route"	*(char)
,	O
'R'	O
,	O
NULL	O
,	O
0	int
,	O
"record route"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"size"	*(char)
,	O
's'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"send NUMBER data octets"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
char	O
*	O
endptr	*(*(char))
;	O
static	O
unsigned	O
char	O
pattern	array(char)
[	O
16	int
]	O
;	O
double	O
v	double
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'c'	O
:	O
count	long
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
0	int
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
socket_type	int
|=	O
SO_DEBUG	int
;	O
break	O
;	O
case	O
'i'	O
:	O
v	double
=	O
strtod	(*(char),*(*(char)))->(double)
(	O
arg	*(char)
,	O
&	O
endptr	*(*(char))
)	O
;	O
if	O
(	O
*	O
endptr	*(*(char))
)	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(int)
,	O
"invalid value (`%s' near `%s')"	*(char)
,	O
arg	*(char)
,	O
endptr	*(*(char))
)	O
;	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_INTERVAL	int
;	O
interval	long
=	O
v	double
*	O
PING_PRECISION	int
;	O
if	O
(	O
!	O
is_root	bool
&&	O
interval	long
<	O
MIN_USER_INTERVAL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"option value too small: %s"	*(char)
,	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
'r'	O
:	O
socket_type	int
|=	O
SO_DONTROUTE	int
;	O
break	O
;	O
case	O
's'	O
:	O
data_length	long
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
PING_MAX_DATALEN	O
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_NUMERIC	int
;	O
break	O
;	O
case	O
'p'	O
:	O
decode_pattern	(*(char),*(int),*(char))->(void)
(	O
arg	*(char)
,	O
&	O
pattern_len	*(int)
,	O
pattern	array(char)
)	O
;	O
patptr	*(char)
=	O
pattern	array(char)
;	O
break	O
;	O
case	O
'q'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_QUIET	int
;	O
break	O
;	O
case	O
'w'	O
:	O
timeout	int
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
INT_MAX	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'W'	O
:	O
linger	struct(int,int)
=	O
ping_cvt_number	(*(char),long,int)->(long)
(	O
arg	*(char)
,	O
INT_MAX	O
,	O
0	int
)	O
;	O
break	O
;	O
case	O
'R'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_RROUTE	int
;	O
break	O
;	O
case	O
'v'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_VERBOSE	int
;	O
break	O
;	O
case	O
'l'	O
:	O
preload	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
endptr	*(*(char))
,	O
0	int
)	O
;	O
if	O
(	O
*	O
endptr	*(*(char))
||	O
preload	long
>	O
INT_MAX	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid preload value (%s)"	*(char)
,	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
OPT_FLOOD	int
;	O
break	O
;	O
case	O
't'	O
:	O
ping_type	int
=	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
ARG_ECHO	int
:	O
ping_type	int
=	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
"echo"	*(char)
)	O
;	O
break	O
;	O
case	O
ARG_TIMESTAMP	int
:	O
ping_type	int
=	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
"timestamp"	*(char)
)	O
;	O
break	O
;	O
case	O
ARG_ADDRESS	int
:	O
ping_type	int
=	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
"address"	*(char)
)	O
;	O
break	O
;	O
case	O
ARG_ROUTERDISCOVERY	int
:	O
ping_type	int
=	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
"router"	*(char)
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_NO_ARGS	int
:	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(int)
,	O
"missing host operand"	*(char)
)	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
int	O
one	int
=	O
1	int
;	O
int	O
status	int
=	O
0	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
getuid	()->(int)
(	O
)	O
==	O
0	int
)	O
is_root	bool
=	O
true	int
;	O
iu_argp_init	O
(	O
"ping"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
=	O
ping_init	(int,int)->(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))
(	O
ICMP_ECHO	int
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
==	O
NULL	O
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
ping_set_sockopt	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),int,*(void),int)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
SO_BROADCAST	int
,	O
(	O
char	O
*	O
)	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
setuid	(int)->(int)
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
argv	*(*(char))
+=	O
index	(*(char),int)->(*(char))
;	O
argc	int
-=	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
count	long
!=	O
0	int
)	O
ping_set_count	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),long)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
count	long
)	O
;	O
if	O
(	O
socket_type	int
!=	O
0	int
)	O
ping_set_sockopt	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),int,*(void),int)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
socket_type	int
,	O
&	O
one	int
,	O
sizeof	O
(	O
one	int
)	O
)	O
;	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_INTERVAL	int
)	O
ping_set_interval	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),long)->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
interval	long
)	O
;	O
init_data_buffer	(*(char),int)->(void)
(	O
patptr	*(char)
,	O
pattern_len	*(int)
)	O
;	O
while	O
(	O
argc	int
--	O
)	O
{	O
status	int
|=	O
(	O
*	O
(	O
ping_type	int
)	O
)	O
(	O
*	O
argv	*(*(char))
++	O
)	O
;	O
ping_reset	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
}	O
free	(*(void))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
free	(*(void))->(void)
(	O
data_buffer	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
int	O
(	O
*	O
decode_type	(*(char))->(*((*(char))->(int)))
(	O
const	O
char	O
*	O
arg	*(char)
)	O
)	O
(	O
char	O
*	O
hostname	*(char)
)	O
{	O
int	O
(	O
*	O
ping_type	int
)	O
(	O
char	O
*	O
hostname	*(char)
)	O
;	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"echo"	*(char)
)	O
==	O
0	int
)	O
ping_type	int
=	O
ping_echo	(*(char))->(int)
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"timestamp"	*(char)
)	O
==	O
0	int
)	O
ping_type	int
=	O
ping_timestamp	(*(char))->(int)
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"address"	*(char)
)	O
==	O
0	int
)	O
ping_type	int
=	O
ping_address	union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int))
;	O
else	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unsupported packet type: %s"	*(char)
,	O
arg	*(char)
)	O
;	O
return	O
ping_type	int
;	O
}	O
int	O
volatile	O
stop	int
=	O
0	int
;	O
void	O
sig_int	(int)->(void)
(	O
int	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
)	O
{	O
stop	int
=	O
1	int
;	O
}	O
int	O
ping_run	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(()->(int)))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
int	O
(	O
*	O
finish	*(()->(int))
)	O
(	O
)	O
)	O
{	O
fd_set	struct(array(long))
fdset	struct(array(long))
;	O
int	O
fdmax	int
;	O
struct	O
timeval	struct(long,long)
resp_time	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
last	struct(long,long)
,	O
intvl	struct(long,long)
,	O
now	struct(long,long)
;	O
struct	O
timeval	struct(long,long)
*	O
t	*(struct(long,long))
=	O
NULL	O
;	O
int	O
finishing	int
=	O
0	int
;	O
int	O
nresp	int
=	O
0	int
;	O
int	O
i	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
sig_int	(int)->(void)
)	O
;	O
fdmax	int
=	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_fd	int
+	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
preload	long
;	O
i	int
++	O
)	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
if	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_FLOOD	int
)	O
{	O
intvl	struct(long,long)
.	O
tv_sec	long
=	O
0	int
;	O
intvl	struct(long,long)
.	O
tv_usec	long
=	O
10000	int
;	O
}	O
else	O
PING_SET_INTERVAL	O
(	O
intvl	struct(long,long)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_interval	long
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
last	struct(long,long)
,	O
NULL	O
)	O
;	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
while	O
(	O
!	O
stop	int
)	O
{	O
int	O
n	int
;	O
FD_ZERO	O
(	O
&	O
fdset	struct(array(long))
)	O
;	O
FD_SET	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_fd	int
,	O
&	O
fdset	struct(array(long))
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	struct(long,long)
,	O
NULL	O
)	O
;	O
resp_time	struct(long,long)
.	O
tv_sec	long
=	O
last	struct(long,long)
.	O
tv_sec	long
+	O
intvl	struct(long,long)
.	O
tv_sec	long
-	O
now	struct(long,long)
.	O
tv_sec	long
;	O
resp_time	struct(long,long)
.	O
tv_usec	long
=	O
last	struct(long,long)
.	O
tv_usec	long
+	O
intvl	struct(long,long)
.	O
tv_usec	long
-	O
now	struct(long,long)
.	O
tv_usec	long
;	O
while	O
(	O
resp_time	struct(long,long)
.	O
tv_usec	long
<	O
0	int
)	O
{	O
resp_time	struct(long,long)
.	O
tv_usec	long
+=	O
1000000	int
;	O
resp_time	struct(long,long)
.	O
tv_sec	long
--	O
;	O
}	O
while	O
(	O
resp_time	struct(long,long)
.	O
tv_usec	long
>=	O
1000000	int
)	O
{	O
resp_time	struct(long,long)
.	O
tv_usec	long
-=	O
1000000	int
;	O
resp_time	struct(long,long)
.	O
tv_sec	long
++	O
;	O
}	O
if	O
(	O
resp_time	struct(long,long)
.	O
tv_sec	long
<	O
0	int
)	O
resp_time	struct(long,long)
.	O
tv_sec	long
=	O
resp_time	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
n	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
fdmax	int
,	O
&	O
fdset	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
&	O
resp_time	struct(long,long)
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
perror	(*(char))->(void)
(	O
"select"	*(char)
)	O
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
n	int
==	O
1	int
)	O
{	O
if	O
(	O
ping_recv	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
==	O
0	int
)	O
nresp	int
++	O
;	O
if	O
(	O
t	*(struct(long,long))
==	O
0	int
)	O
{	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	struct(long,long)
,	O
NULL	O
)	O
;	O
t	*(struct(long,long))
=	O
&	O
now	struct(long,long)
;	O
}	O
if	O
(	O
ping_timeout_p	(*(struct(long,long)),int)->(int)
(	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_start_time	struct(long,long)
,	O
timeout	int
)	O
)	O
break	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
&&	O
nresp	int
>=	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
||	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
<	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_count	long
)	O
{	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
if	O
(	O
!	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_QUIET	int
)	O
&&	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
OPT_FLOOD	int
)	O
putchar	(int)->(int)
(	O
'.'	O
)	O
;	O
if	O
(	O
ping_timeout_p	(*(struct(long,long)),int)->(int)
(	O
&	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_start_time	struct(long,long)
,	O
timeout	int
)	O
)	O
break	O
;	O
}	O
else	O
if	O
(	O
finishing	int
)	O
break	O
;	O
else	O
{	O
finishing	int
=	O
1	int
;	O
intvl	struct(long,long)
.	O
tv_sec	long
=	O
linger	struct(int,int)
;	O
}	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
last	struct(long,long)
,	O
NULL	O
)	O
;	O
}	O
}	O
ping_unset_data	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(void)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
if	O
(	O
finish	*(()->(int))
)	O
return	O
(	O
*	O
finish	*(()->(int))
)	O
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
send_echo	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
PING	struct
*	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
{	O
int	O
off	long
=	O
0	int
;	O
if	O
(	O
PING_TIMING	O
(	O
data_length	long
)	O
)	O
{	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
ping_set_data	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(void),long,long,bool)->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
&	O
tv	struct(long,long)
,	O
0	int
,	O
sizeof	O
(	O
tv	struct(long,long)
)	O
,	O
USE_IPV6	bool
)	O
;	O
off	long
+=	O
sizeof	O
(	O
tv	struct(long,long)
)	O
;	O
}	O
if	O
(	O
data_buffer	*(char)
)	O
ping_set_data	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)),*(void),long,long,bool)->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
,	O
data_buffer	*(char)
,	O
off	long
,	O
data_length	long
>	O
PING_HEADER_LEN	O
?	O
data_length	long
-	O
PING_HEADER_LEN	O
:	O
data_length	long
,	O
USE_IPV6	bool
)	O
;	O
return	O
ping_xmit	(*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct`,array(char)),struct(short,short,int,struct`,int)),long,long,long)))->(int)
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
)	O
;	O
}	O
int	O
ping_finish	()->(int)
(	O
void	O
)	O
{	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
printf	(*(char))->(int)
(	O
"--- %s ping statistics ---\n"	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_hostname	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%ld packets transmitted, "	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
;	O
printf	(*(char))->(int)
(	O
"%ld packets received, "	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_rept	long
)	O
printf	(*(char))->(int)
(	O
"+%ld duplicates, "	*(char)
,	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_rept	long
)	O
;	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
{	O
if	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
>	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
printf	(*(char))->(int)
(	O
"-- somebody's printing up packets!"	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%d%% packet loss"	*(char)
,	O
(	O
int	O
)	O
(	O
(	O
(	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
-	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_recv	long
)	O
*	O
100	int
)	O
/	O
ping	*(struct(int,int,long,struct(long,long),long,union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),*(char),long,int,union(*((int,*`,*`,*`,*`,int)->(int)),*((int,*`,*`,*`,*`,*`,int)->(int))),*(void),int,*(char),*(char),union(struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union`),int)),long,long,long))
->	O
ping_num_xmit	long
)	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
