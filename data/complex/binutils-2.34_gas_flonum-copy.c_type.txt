void	O
flonum_copy	O
(	O
FLONUM_TYPE	O
*	O
in	O
,	O
FLONUM_TYPE	O
*	O
out	O
)	O
{	O
unsigned	O
int	O
in_length	O
;	O
unsigned	O
int	O
out_length	O
;	O
out	O
->	O
sign	O
=	O
in	O
->	O
sign	O
;	O
in_length	O
=	O
in	O
->	O
leader	O
-	O
in	O
->	O
low	O
;	O
if	O
(	O
in	O
->	O
leader	O
<	O
in	O
->	O
low	O
)	O
{	O
out	O
->	O
leader	O
=	O
out	O
->	O
low	O
-	O
1	int
;	O
}	O
else	O
{	O
out_length	O
=	O
out	O
->	O
high	O
-	O
out	O
->	O
low	O
;	O
if	O
(	O
in_length	O
<=	O
out_length	O
)	O
{	O
{	O
if	O
(	O
in_length	O
<	O
out_length	O
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
char	O
*	O
)	O
(	O
out	O
->	O
low	O
+	O
in_length	O
+	O
1	int
)	O
,	O
'\0'	O
,	O
out_length	O
-	O
in_length	O
)	O
;	O
}	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
(	O
out	O
->	O
low	O
)	O
,	O
(	O
void	O
*	O
)	O
(	O
in	O
->	O
low	O
)	O
,	O
(	O
(	O
in_length	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
LITTLENUM_TYPE	O
)	O
)	O
)	O
;	O
out	O
->	O
exponent	O
=	O
in	O
->	O
exponent	O
;	O
out	O
->	O
leader	O
=	O
in	O
->	O
leader	O
-	O
in	O
->	O
low	O
+	O
out	O
->	O
low	O
;	O
}	O
else	O
{	O
int	O
shorten	O
;	O
shorten	O
=	O
in_length	O
-	O
out_length	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
(	O
out	O
->	O
low	O
)	O
,	O
(	O
void	O
*	O
)	O
(	O
in	O
->	O
low	O
+	O
shorten	O
)	O
,	O
(	O
(	O
out_length	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
LITTLENUM_TYPE	O
)	O
)	O
)	O
;	O
out	O
->	O
leader	O
=	O
out	O
->	O
high	O
;	O
out	O
->	O
exponent	O
=	O
in	O
->	O
exponent	O
+	O
shorten	O
;	O
}	O
}	O
}	O
