static	O
void	O
gmp_rrandomb	(*(long),array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void)))),long)->(void)
(	O
mp_ptr	*(long)
,	O
gmp_randstate_t	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
mp_bitcnt_t	long
)	O
;	O
void	O
mpz_rrandomb	O
(	O
mpz_ptr	*(struct(int,int,*(long)))
x	*(struct(int,int,*(long)))
,	O
gmp_randstate_t	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
rstate	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
mp_bitcnt_t	long
nbits	long
)	O
{	O
mp_size_t	long
nl	long
;	O
mp_ptr	*(long)
xp	*(long)
;	O
nl	long
=	O
(	O
nbits	long
+	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
;	O
if	O
(	O
nbits	long
!=	O
0	int
)	O
{	O
xp	*(long)
=	O
MPZ_REALLOC	O
(	O
x	*(struct(int,int,*(long)))
,	O
nl	long
)	O
;	O
gmp_rrandomb	(*(long),array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void)))),long)->(void)
(	O
xp	*(long)
,	O
rstate	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
nbits	long
)	O
;	O
}	O
SIZ	O
(	O
x	*(struct(int,int,*(long)))
)	O
=	O
nl	long
;	O
}	O
static	O
void	O
gmp_rrandomb	(*(long),array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void)))),long)->(void)
(	O
mp_ptr	*(long)
rp	*(long)
,	O
gmp_randstate_t	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
rstate	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
mp_bitcnt_t	long
nbits	long
)	O
{	O
mp_bitcnt_t	long
bi	long
;	O
mp_limb_t	long
ranm	long
;	O
unsigned	O
cap_chunksize	int
,	O
chunksize	int
;	O
mp_size_t	long
i	long
;	O
i	long
=	O
(	O
nbits	long
+	O
GMP_NUMB_BITS	O
-	O
1	int
)	O
/	O
GMP_NUMB_BITS	O
-	O
1	int
;	O
rp	*(long)
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
>>	O
(	O
GMP_NUMB_BITS	O
-	O
(	O
nbits	long
%	O
GMP_NUMB_BITS	O
)	O
)	O
%	O
GMP_NUMB_BITS	O
;	O
for	O
(	O
i	long
=	O
i	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
rp	*(long)
[	O
i	long
]	O
=	O
GMP_NUMB_MAX	O
;	O
_gmp_rand	O
(	O
&	O
ranm	long
,	O
rstate	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
BITS_PER_RANDCALL	int
)	O
;	O
cap_chunksize	int
=	O
nbits	long
/	O
(	O
ranm	long
%	O
4	int
+	O
1	int
)	O
;	O
cap_chunksize	int
+=	O
cap_chunksize	int
==	O
0	int
;	O
bi	long
=	O
nbits	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
_gmp_rand	O
(	O
&	O
ranm	long
,	O
rstate	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
BITS_PER_RANDCALL	int
)	O
;	O
chunksize	int
=	O
1	int
+	O
ranm	long
%	O
cap_chunksize	int
;	O
bi	long
=	O
(	O
bi	long
<	O
chunksize	int
)	O
?	O
0	int
:	O
bi	long
-	O
chunksize	int
;	O
if	O
(	O
bi	long
==	O
0	int
)	O
break	O
;	O
rp	*(long)
[	O
bi	long
/	O
GMP_NUMB_BITS	O
]	O
^=	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
bi	long
%	O
GMP_NUMB_BITS	O
;	O
_gmp_rand	O
(	O
&	O
ranm	long
,	O
rstate	array(struct(array(struct(int,int,*(long))),enum(int,int),union(*(void))))
,	O
BITS_PER_RANDCALL	int
)	O
;	O
chunksize	int
=	O
1	int
+	O
ranm	long
%	O
cap_chunksize	int
;	O
bi	long
=	O
(	O
bi	long
<	O
chunksize	int
)	O
?	O
0	int
:	O
bi	long
-	O
chunksize	int
;	O
mpn_incr_u	O
(	O
rp	*(long)
+	O
bi	long
/	O
GMP_NUMB_BITS	O
,	O
CNST_LIMB	O
(	O
1	int
)	O
<<	O
bi	long
%	O
GMP_NUMB_BITS	O
)	O
;	O
if	O
(	O
bi	long
==	O
0	int
)	O
break	O
;	O
}	O
}	O
