static	O
int	O
getPolyYBounds	(*(struct(int,int)),int,*(int),*(int))->(int)
(	O
const	O
miPoint	struct(int,int)
*	O
pts	array(struct(int,int))
,	O
int	O
n	array(double)
,	O
int	O
*	O
by	*(int)
,	O
int	O
*	O
ty	*(int)
)	O
;	O
void	O
miFillConvexPoly	O
(	O
miPaintedSet	struct
*	O
paintedSet	*(struct)
,	O
const	O
miGC	struct
*	O
pGC	*(struct)
,	O
int	O
count	int
,	O
const	O
miPoint	struct(int,int)
*	O
ptsIn	*(struct(int,int))
)	O
{	O
int	O
xl	int
=	O
0	int
,	O
xr	int
=	O
0	int
;	O
int	O
dl	int
=	O
0	int
,	O
dr	int
=	O
0	int
;	O
int	O
ml	int
=	O
0	int
,	O
m1l	int
=	O
0	int
;	O
int	O
mr	int
=	O
0	int
,	O
m1r	int
=	O
0	int
;	O
int	O
incr1l	int
=	O
0	int
,	O
incr2l	int
=	O
0	int
;	O
int	O
incr1r	int
=	O
0	int
,	O
incr2r	int
=	O
0	int
;	O
int	O
dy	int
;	O
int	O
y	double
;	O
int	O
left	int
,	O
right	int
;	O
int	O
i	int
;	O
int	O
nextleft	int
,	O
nextright	int
;	O
miPoint	struct(int,int)
*	O
ptsOut	*(struct(int,int))
,	O
*	O
FirstPoint	*(struct(int,int))
;	O
unsigned	O
int	O
*	O
width	array(short)
,	O
*	O
FirstWidth	*(int)
;	O
int	O
imin	int
;	O
int	O
ymin	double
;	O
int	O
ymax	double
;	O
imin	int
=	O
getPolyYBounds	(*(struct(int,int)),int,*(int),*(int))->(int)
(	O
ptsIn	*(struct(int,int))
,	O
count	int
,	O
&	O
ymin	double
,	O
&	O
ymax	double
)	O
;	O
dy	int
=	O
ymax	double
-	O
ymin	double
+	O
1	int
;	O
if	O
(	O
(	O
count	int
<	O
3	int
)	O
||	O
(	O
dy	int
<	O
0	int
)	O
)	O
return	O
;	O
ptsOut	*(struct(int,int))
=	O
FirstPoint	*(struct(int,int))
=	O
(	O
miPoint	struct(int,int)
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPoint	struct(int,int)
)	O
*	O
dy	int
)	O
;	O
width	array(short)
=	O
FirstWidth	*(int)
=	O
(	O
unsigned	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
unsigned	O
int	O
)	O
*	O
dy	int
)	O
;	O
nextleft	int
=	O
nextright	int
=	O
imin	int
;	O
y	double
=	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
;	O
do	O
{	O
if	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
==	O
y	double
)	O
{	O
left	int
=	O
nextleft	int
;	O
nextleft	int
++	O
;	O
if	O
(	O
nextleft	int
>=	O
count	int
)	O
nextleft	int
=	O
0	int
;	O
BRESINITPGON	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
-	O
ptsIn	*(struct(int,int))
[	O
left	int
]	O
.	O
y	double
,	O
ptsIn	*(struct(int,int))
[	O
left	int
]	O
.	O
x	double
,	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
x	double
,	O
xl	int
,	O
dl	int
,	O
ml	int
,	O
m1l	int
,	O
incr1l	int
,	O
incr2l	int
)	O
;	O
}	O
if	O
(	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
==	O
y	double
)	O
{	O
right	int
=	O
nextright	int
;	O
nextright	int
--	O
;	O
if	O
(	O
nextright	int
<	O
0	int
)	O
nextright	int
=	O
count	int
-	O
1	int
;	O
BRESINITPGON	O
(	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
-	O
ptsIn	*(struct(int,int))
[	O
right	int
]	O
.	O
y	double
,	O
ptsIn	*(struct(int,int))
[	O
right	int
]	O
.	O
x	double
,	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
x	double
,	O
xr	int
,	O
dr	int
,	O
mr	int
,	O
m1r	int
,	O
incr1r	int
,	O
incr2r	int
)	O
;	O
}	O
i	int
=	O
IMIN	O
(	O
ptsIn	*(struct(int,int))
[	O
nextleft	int
]	O
.	O
y	double
,	O
ptsIn	*(struct(int,int))
[	O
nextright	int
]	O
.	O
y	double
)	O
-	O
y	double
;	O
if	O
(	O
i	int
<	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
FirstWidth	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
FirstPoint	*(struct(int,int))
)	O
;	O
return	O
;	O
}	O
while	O
(	O
i	int
--	O
>	O
0	int
)	O
{	O
ptsOut	*(struct(int,int))
->	O
y	double
=	O
y	double
;	O
if	O
(	O
xl	int
<	O
xr	int
)	O
{	O
*	O
(	O
width	array(short)
++	O
)	O
=	O
(	O
unsigned	O
int	O
)	O
(	O
xr	int
-	O
xl	int
)	O
;	O
(	O
ptsOut	*(struct(int,int))
++	O
)	O
->	O
x	double
=	O
xl	int
;	O
}	O
else	O
{	O
*	O
(	O
width	array(short)
++	O
)	O
=	O
(	O
unsigned	O
int	O
)	O
(	O
xl	int
-	O
xr	int
)	O
;	O
(	O
ptsOut	*(struct(int,int))
++	O
)	O
->	O
x	double
=	O
xr	int
;	O
}	O
y	double
++	O
;	O
BRESINCRPGON	O
(	O
dl	int
,	O
xl	int
,	O
ml	int
,	O
m1l	int
,	O
incr1l	int
,	O
incr2l	int
)	O
;	O
BRESINCRPGON	O
(	O
dr	int
,	O
xr	int
,	O
mr	int
,	O
m1r	int
,	O
incr1r	int
,	O
incr2r	int
)	O
;	O
}	O
}	O
while	O
(	O
y	double
!=	O
ymax	double
)	O
;	O
MI_PAINT_SPANS	O
(	O
paintedSet	*(struct)
,	O
pGC	*(struct)
->	O
pixels	*(struct(char,union(char,array(char))))
[	O
1	int
]	O
,	O
ptsOut	*(struct(int,int))
-	O
FirstPoint	*(struct(int,int))
,	O
FirstPoint	*(struct(int,int))
,	O
FirstWidth	*(int)
)	O
}	O
static	O
int	O
getPolyYBounds	(*(struct(int,int)),int,*(int),*(int))->(int)
(	O
const	O
miPoint	struct(int,int)
*	O
pts	array(struct(int,int))
,	O
int	O
n	array(double)
,	O
int	O
*	O
by	*(int)
,	O
int	O
*	O
ty	*(int)
)	O
{	O
const	O
miPoint	struct(int,int)
*	O
ptsStart	*(struct(int,int))
=	O
pts	array(struct(int,int))
;	O
const	O
miPoint	struct(int,int)
*	O
ptMin	*(struct(int,int))
;	O
int	O
ymin	double
,	O
ymax	double
;	O
ptMin	*(struct(int,int))
=	O
pts	array(struct(int,int))
;	O
ymin	double
=	O
ymax	double
=	O
(	O
pts	array(struct(int,int))
++	O
)	O
->	O
y	double
;	O
while	O
(	O
--	O
n	array(double)
>	O
0	int
)	O
{	O
if	O
(	O
pts	array(struct(int,int))
->	O
y	double
<	O
ymin	double
)	O
{	O
ptMin	*(struct(int,int))
=	O
pts	array(struct(int,int))
;	O
ymin	double
=	O
pts	array(struct(int,int))
->	O
y	double
;	O
}	O
if	O
(	O
pts	array(struct(int,int))
->	O
y	double
>	O
ymax	double
)	O
ymax	double
=	O
pts	array(struct(int,int))
->	O
y	double
;	O
pts	array(struct(int,int))
++	O
;	O
}	O
*	O
by	*(int)
=	O
ymin	double
;	O
*	O
ty	*(int)
=	O
ymax	double
;	O
return	O
(	O
ptMin	*(struct(int,int))
-	O
ptsStart	*(struct(int,int))
)	O
;	O
}	O
