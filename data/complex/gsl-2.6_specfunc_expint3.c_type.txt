static	O
double	O
expint3_data	array(double)
[	O
24	int
]	O
=	O
{	O
1.269198414221126014	int
,	O
-	O
0.248846446384140982	int
,	O
0.80526220717231041e-01	int
,	O
-	O
0.25772733251968330e-01	int
,	O
0.7599878873073774e-02	int
,	O
-	O
0.2030695581940405e-02	int
,	O
0.490834586699330e-03	int
,	O
-	O
0.107682239142021e-03	int
,	O
0.21551726264290e-04	int
,	O
-	O
0.3956705137384e-05	int
,	O
0.6699240933896e-06	int
,	O
-	O
0.105132180807e-06	int
,	O
0.15362580199e-07	int
,	O
-	O
0.20990960364e-08	int
,	O
0.2692109538e-09	int
,	O
-	O
0.325195242e-10	int
,	O
0.37114816e-11	int
,	O
-	O
0.4013652e-12	int
,	O
0.412334e-13	int
,	O
-	O
0.40338e-14	int
,	O
0.3766e-15	int
,	O
-	O
0.336e-16	int
,	O
0.29e-17	int
,	O
-	O
0.2e-18	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
expint3_cs	struct(*(double),int,double,double,int)
=	O
{	O
expint3_data	array(double)
,	O
23	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
15	int
}	O
;	O
static	O
double	O
expint3a_data	array(double)
[	O
23	int
]	O
=	O
{	O
1.9270464955068273729	int
,	O
-	O
0.349293565204813805e-01	int
,	O
0.14503383718983009e-02	int
,	O
-	O
0.8925336718327903e-04	int
,	O
0.70542392191184e-05	int
,	O
-	O
0.6671727454761e-06	int
,	O
0.724267589982e-07	int
,	O
-	O
0.87825825606e-08	int
,	O
0.11672234428e-08	int
,	O
-	O
0.1676631281e-09	int
,	O
0.257550158e-10	int
,	O
-	O
0.41957888e-11	int
,	O
0.7201041e-12	int
,	O
-	O
0.1294906e-12	int
,	O
0.24287e-13	int
,	O
-	O
0.47331e-14	int
,	O
0.95531e-15	int
,	O
-	O
0.1991e-15	int
,	O
0.428e-16	int
,	O
-	O
0.94e-17	int
,	O
0.21e-17	int
,	O
-	O
0.5e-18	int
,	O
0.1e-18	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
expint3a_cs	struct(*(double),int,double,double,int)
=	O
{	O
expint3a_data	array(double)
,	O
22	int
,	O
-	O
1.0	int
,	O
1.0	int
,	O
10	int
}	O
;	O
int	O
gsl_sf_expint_3_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
val_infinity	double
=	O
0.892979511569249211	int
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.6	int
*	O
GSL_ROOT3_DBL_EPSILON	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
2.0	int
)	O
{	O
const	O
double	O
t	double
=	O
x	double
*	O
x	double
*	O
x	double
/	O
4.0	int
-	O
1.0	int
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
expint3_cs	struct(*(double),int,double,double,int)
,	O
t	double
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
result_c	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x	double
*	O
result_c	struct(double,double)
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
pow	(double,double)->(double)
(	O
-	O
GSL_LOG_DBL_EPSILON	O
,	O
1.0	int
/	O
3.0	int
)	O
)	O
{	O
const	O
double	O
t	double
=	O
16.0	int
/	O
(	O
x	double
*	O
x	double
*	O
x	double
)	O
-	O
1.0	int
;	O
const	O
double	O
s	double
=	O
exp	(double)->(double)
(	O
-	O
x	double
*	O
x	double
*	O
x	double
)	O
/	O
(	O
3.0	int
*	O
x	double
*	O
x	double
)	O
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
expint3a_cs	struct(*(double),int,double,double,int)
,	O
t	double
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
val_infinity	double
-	O
result_c	struct(double,double)
.	O
val	double
*	O
s	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
val_infinity	double
*	O
GSL_DBL_EPSILON	int
+	O
s	double
*	O
result_c	struct(double,double)
.	O
err	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
val_infinity	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
val_infinity	double
*	O
GSL_DBL_EPSILON	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_expint_3	(double)->(double)
(	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_expint_3_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
