void	O
HandleEx	(int)->(void)
(	O
int	O
)	O
;	O
ESint32	long
EDMAPROC	O
edma_hotswap	(*(char))->(long)
(	O
EPChar	*(char)
s	*(char)
)	O
{	O
ESint32	long
i	long
,	O
cnt	long
;	O
ESint32	long
current_capacity	long
;	O
OBJID	long
oldid	long
,	O
newid	long
;	O
OBJID	long
script	long
;	O
CLASSID	long
cid	long
;	O
time_t	long
old_time	long
;	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_hotswap] New update available. Proceeding..."	*(char)
)	O
;	O
edma_printf	(*(char))->(long)
(	O
"[edma_hotswap] Update script is: %s"	*(char)
,	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
0	int
]	O
.	O
update_script	array(char)
)	O
;	O
old_time	long
=	O
last_checked_update	long
;	O
last_checked_update	long
=	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
time_last_update	long
;	O
script	long
=	O
-	O
1	int
;	O
if	O
(	O
(	O
script	long
=	O
edma_new_obj	(*(char))->(long)
(	O
"EDMA_SCRIPT"	*(char)
)	O
)	O
==	O
-	O
1	int
)	O
{	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"[edma_hotswap] Can't find SCRIPT "	*(char)
"component. "	*(char)
"Can't run update script"	*(char)
)	O
;	O
}	O
edma_met3	(long,*(char))->(long)
(	O
script	long
,	O
"set_script"	*(char)
,	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
0	int
]	O
.	O
update_script	array(char)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGILL	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGABRT	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGFPE	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGSEGV	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
HandleEx	(int)->(void)
)	O
;	O
pending_objects_list	*(long)
=	O
(	O
OBJID	long
*	O
)	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
OBJID	long
)	O
*	O
CAPACITY_STEP	int
)	O
;	O
current_capacity	long
=	O
CAPACITY_STEP	int
;	O
cnt	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
nObj	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
gObj	O
[	O
i	long
]	O
)	O
{	O
if	O
(	O
pClass	*(*(struct(long,struct(long,long,long,long,long,long,long,long),*(struct(array(char),array(char),char,long,char,char)),*(struct(array(char),long,char,short,long,long)),*(struct(array(char),long,*`,long,*`,long)),*(long),*(array(char)),*(array(char)),*(struct(*`)),long,*(struct(long,long,long,long,long,*`)),*(struct(long,long,long,long,long,*`)),long)))
[	O
gObj	O
[	O
i	long
]	O
->	O
IdClass	long
]	O
->	O
actual_version	long
==	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
0	int
]	O
.	O
IdClass	long
&&	O
(	O
gObj	O
[	O
i	long
]	O
->	O
IdClass	long
!=	O
pClass	*(*(struct(long,struct(long,long,long,long,long,long,long,long),*(struct(array(char),array(char),char,long,char,char)),*(struct(array(char),long,char,short,long,long)),*(struct(array(char),long,*`,long,*`,long)),*(long),*(array(char)),*(array(char)),*(struct(*`)),long,*(struct(long,long,long,long,long,*`)),*(struct(long,long,long,long,long,*`)),long)))
[	O
gObj	O
[	O
i	long
]	O
->	O
IdClass	long
]	O
->	O
actual_version	long
)	O
)	O
{	O
if	O
(	O
cnt	long
>	O
current_capacity	long
)	O
{	O
current_capacity	long
+=	O
CAPACITY_STEP	int
;	O
pending_objects_list	*(long)
=	O
(	O
OBJID	long
*	O
)	O
edma_prealloc	(long,long)->(long)
(	O
(	O
HMEM	long
)	O
pending_objects_list	*(long)
,	O
current_capacity	long
)	O
;	O
}	O
pending_objects_list	*(long)
[	O
cnt	long
]	O
=	O
i	long
;	O
cnt	long
++	O
;	O
}	O
}	O
}	O
edma_log	(*(char))->(long)
(	O
"[hotswap] %d objects affected by current update. "	*(char)
"Trying to update"	*(char)
,	O
cnt	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
cnt	long
;	O
i	long
++	O
)	O
{	O
edma_log	(*(char))->(long)
(	O
"[hotswap] Checking object %d/%d for safe update"	*(char)
,	O
pending_objects_list	*(long)
[	O
i	long
]	O
,	O
cnt	long
)	O
;	O
if	O
(	O
(	O
_edma_is_obj_in_execution_stack	(long)->(long)
(	O
pending_objects_list	*(long)
[	O
i	long
]	O
)	O
)	O
==	O
1	int
)	O
continue	O
;	O
edma_log	(*(char))->(long)
(	O
"[edma_hotswap] Object %d not in stack execution... "	*(char)
"Proceeding"	*(char)
,	O
pending_objects_list	*(long)
[	O
i	long
]	O
)	O
;	O
oldid	long
=	O
pending_objects_list	*(long)
[	O
i	long
]	O
;	O
cid	long
=	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
0	int
]	O
.	O
IdClass	long
;	O
if	O
(	O
(	O
gClass	O
[	O
cid	long
]	O
==	O
NULL	O
)	O
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"[edma_hotswap] Class %d not valid"	*(char)
,	O
cid	long
)	O
;	O
continue	O
;	O
}	O
edma_log	(*(char))->(long)
(	O
"[edma_hotswap] Creating new instance of class %d"	*(char)
,	O
cid	long
)	O
;	O
newid	long
=	O
edma_new_obj	(*(char))->(long)
(	O
gClass	O
[	O
cid	long
]	O
->	O
ClassName	array(char)
)	O
;	O
edma_met3	(long,*(char))->(long)
(	O
script	long
,	O
"update_object"	*(char)
,	O
newid	long
,	O
oldid	long
)	O
;	O
edma_log	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"Hotswap: Now swapping instances..."	*(char)
)	O
;	O
edma_swap_obj	(long,long)->(long)
(	O
oldid	long
,	O
newid	long
)	O
;	O
edma_free_obj	(long)->(long)
(	O
newid	long
)	O
;	O
}	O
edma_free_obj	(long)->(long)
(	O
script	long
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGILL	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGABRT	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGFPE	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGSEGV	int
,	O
HandleEx	(int)->(void)
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
HandleEx	(int)->(void)
)	O
;	O
edma_printf	(*(char))->(long)
(	O
"*** Update Done **************************************"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_attach_proxy	(long,*(char))->(long)
(	O
OBJID	long
IdObj	long
,	O
EPChar	*(char)
proxy	*(char)
)	O
{	O
OBJID	long
proxy_id	long
;	O
POBJ	*(struct(*(void),*(struct(char,long,array(char),*(()->(long)),*(void),*(struct`))),long,char,char,long,long,long,*(char),long,long,long,struct(long,long,long,long,long),long,long,long,long,long,*(struct(long,array(char),long,long)),long,*(struct(long,array(char),long,long))))
current	*(struct(*(void),*(struct(char,long,array(char),*(()->(long)),*(void),*(struct`))),long,char,char,long,long,long,*(char),long,long,long,struct(long,long,long,long,long),long,long,long,long,long,*(struct(long,array(char),long,long)),long,*(struct(long,array(char),long,long))))
;	O
if	O
(	O
(	O
edma_check_obj_id	(long,*(char))->(long)
(	O
IdObj	long
,	O
"edma_attach_proxy"	*(char)
)	O
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
proxy_id	long
=	O
edma_new_obj	(*(char))->(long)
(	O
proxy	*(char)
)	O
)	O
==	O
-	O
1	int
)	O
{	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[edma_attach_proxy] Proxy '%s' does "	*(char)
"not exists"	*(char)
,	O
proxy	*(char)
)	O
;	O
}	O
edma_swap_obj	(long,long)->(long)
(	O
IdObj	long
,	O
proxy_id	long
)	O
;	O
edma_wprop3	(long,*(char))->(long)
(	O
IdObj	long
,	O
"obj"	*(char)
,	O
proxy_id	long
)	O
;	O
gObj	O
[	O
IdObj	long
]	O
->	O
IdSIU	long
=	O
edma_get_class_id	(*(char))->(long)
(	O
proxy	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_deattach_proxy	(long)->(long)
(	O
OBJID	long
IdObj	long
)	O
{	O
OBJID	long
obj	long
;	O
POBJ	*(struct(*(void),*(struct(char,long,array(char),*(()->(long)),*(void),*(struct`))),long,char,char,long,long,long,*(char),long,long,long,struct(long,long,long,long,long),long,long,long,long,long,*(struct(long,array(char),long,long)),long,*(struct(long,array(char),long,long))))
current	*(struct(*(void),*(struct(char,long,array(char),*(()->(long)),*(void),*(struct`))),long,char,char,long,long,long,*(char),long,long,long,struct(long,long,long,long,long),long,long,long,long,long,*(struct(long,array(char),long,long)),long,*(struct(long,array(char),long,long))))
;	O
if	O
(	O
(	O
edma_check_obj_id	(long,*(char))->(long)
(	O
IdObj	long
,	O
"edma_deattach_proxy"	*(char)
)	O
)	O
==	O
-	O
1	int
)	O
return	O
-	O
1	int
;	O
edma_rprop3	(long,*(char))->(long)
(	O
IdObj	long
,	O
"obj"	*(char)
,	O
&	O
obj	long
)	O
;	O
edma_swap_obj	(long,long)->(long)
(	O
IdObj	long
,	O
obj	long
)	O
;	O
gObj	O
[	O
obj	long
]	O
->	O
IdSIU	long
=	O
-	O
1	int
;	O
edma_free_obj	(long)->(long)
(	O
obj	long
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_stack_execution_add_obj	(long)->(long)
(	O
OBJID	long
id	long
)	O
{	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
p	*(struct(long,long,*(long)))
;	O
if	O
(	O
(	O
p	*(struct(long,long,*(long)))
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"WARNNING:  Non registered thread accessing GNU/EDMA"	*(char)
)	O
;	O
edma_thread_register	()->(long)
(	O
)	O
;	O
p	*(struct(long,long,*(long)))
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
;	O
}	O
p	*(struct(long,long,*(long)))
->	O
current_stack_execution	*(long)
[	O
p	*(struct(long,long,*(long)))
->	O
top	long
]	O
=	O
id	long
;	O
p	*(struct(long,long,*(long)))
->	O
top	long
++	O
;	O
if	O
(	O
p	*(struct(long,long,*(long)))
->	O
top	long
==	O
MAX_STACK_EXECUTION	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[_edma_add_stack_execution_obj] "	*(char)
"Stack overflow"	*(char)
)	O
;	O
else	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_stack_execution_del_obj	(long)->(long)
(	O
OBJID	long
id	long
)	O
{	O
OBJID	long
top	long
;	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
p	*(struct(long,long,*(long)))
;	O
if	O
(	O
(	O
p	*(struct(long,long,*(long)))
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"WARNNING:  Non registered thread accessing GNU/EDMA"	*(char)
)	O
;	O
edma_thread_register	()->(long)
(	O
)	O
;	O
p	*(struct(long,long,*(long)))
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
;	O
}	O
if	O
(	O
p	*(struct(long,long,*(long)))
->	O
top	long
<	O
1	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[_edma_del_stack_execution_obj] %s"	*(char)
,	O
"Stack corrupted: Stack Empty"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
top	long
=	O
p	*(struct(long,long,*(long)))
->	O
current_stack_execution	*(long)
[	O
p	*(struct(long,long,*(long)))
->	O
top	long
-	O
1	int
]	O
;	O
if	O
(	O
top	long
!=	O
id	long
)	O
{	O
return	O
-	O
1	int
;	O
}	O
p	*(struct(long,long,*(long)))
->	O
top	long
--	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_is_obj_in_execution_stack	(long)->(long)
(	O
OBJID	long
id	long
)	O
{	O
ESint32	long
i	long
,	O
j	long
;	O
OBJID	long
*	O
current_stack	*(long)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_threads	long
;	O
i	long
++	O
)	O
{	O
current_stack	*(long)
=	O
thread_list	*(*(struct(long,long,*(long))))
[	O
i	long
]	O
->	O
current_stack_execution	*(long)
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
thread_list	*(*(struct(long,long,*(long))))
[	O
i	long
]	O
->	O
top	long
;	O
i	long
++	O
)	O
if	O
(	O
current_stack	*(long)
[	O
j	long
]	O
==	O
id	long
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
_edma_print_stack_execution	()->(long)
(	O
)	O
{	O
ESint32	long
i	long
;	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
p	*(struct(long,long,*(long)))
;	O
if	O
(	O
(	O
p	*(struct(long,long,*(long)))
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"WARNNING:  Non registered thread accessing GNU/EDMA"	*(char)
)	O
;	O
}	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"--------> Current Stack Execution <-------------------"	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
p	*(struct(long,long,*(long)))
->	O
top	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
edma_printf	(*(char))->(long)
(	O
"Entry %d: %d"	*(char)
,	O
i	long
,	O
p	*(struct(long,long,*(long)))
->	O
current_stack_execution	*(long)
[	O
i	long
]	O
)	O
;	O
edma_printf	(*(char))->(long)
(	O
"%s"	*(char)
,	O
"----------------------------------"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_add_update	(struct(long,long,array(char)))->(long)
(	O
EDMA_UPDATE	struct(long,long,array(char))
update	struct(long,long,array(char))
)	O
{	O
if	O
(	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
num_updates	long
<	O
EDMA_MAX_UPDATES	int
)	O
{	O
memcpy	(*(void),*(void),int)->(*(void))
(	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
,	O
&	O
update	struct(long,long,array(char))
,	O
sizeof	O
(	O
EDMA_UPDATE	struct(long,long,array(char))
)	O
)	O
;	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
num_updates	long
++	O
;	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
time_last_update	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
}	O
else	O
{	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"Update queue is full. "	*(char)
"Wait for pending update to be completed"	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_remove_update	(long)->(long)
(	O
ESint32	long
indx	long
)	O
{	O
if	O
(	O
(	O
indx	long
>	O
0	int
)	O
&&	O
(	O
indx	long
<	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
num_updates	long
)	O
)	O
{	O
memcpy	(*(void),*(void),int)->(*(void))
(	O
&	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
indx	long
]	O
,	O
&	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
indx	long
+	O
1	int
]	O
,	O
sizeof	O
(	O
EDMA_UPDATE	struct(long,long,array(char))
)	O
*	O
(	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
num_updates	long
-	O
indx	long
)	O
)	O
;	O
memset	(*(void),int,int)->(*(void))
(	O
&	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
pending_update	array(struct(long,long,array(char)))
[	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
num_updates	long
]	O
,	O
0	int
,	O
sizeof	O
(	O
EDMA_UPDATE	struct(long,long,array(char))
)	O
)	O
;	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
num_updates	long
--	O
;	O
}	O
return	O
0	int
;	O
}	O
