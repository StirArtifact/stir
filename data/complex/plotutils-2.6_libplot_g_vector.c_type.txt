plVector	struct(double,double)
*	O
_vscale	(*(struct(double,double)),double)->(*(struct(double,double)))
(	O
plVector	struct(double,double)
*	O
v	*(struct(double,double))
,	O
double	O
newlen	double
)	O
{	O
double	O
len	long
=	O
VLENGTH	O
(	O
*	O
v	*(struct(double,double))
)	O
;	O
if	O
(	O
len	long
!=	O
0.0	int
)	O
{	O
v	*(struct(double,double))
->	O
x	double
*=	O
newlen	double
/	O
len	long
;	O
v	*(struct(double,double))
->	O
y	double
*=	O
newlen	double
/	O
len	long
;	O
}	O
return	O
(	O
v	*(struct(double,double))
)	O
;	O
}	O
double	O
_xatan2	(double,double)->(double)
(	O
double	O
y	double
,	O
double	O
x	double
)	O
{	O
if	O
(	O
y	double
==	O
0.0	int
&&	O
x	double
>=	O
0.0	int
)	O
return	O
0.0	int
;	O
else	O
if	O
(	O
y	double
==	O
0.0	int
&&	O
x	double
<	O
0.0	int
)	O
return	O
M_PI	int
;	O
else	O
if	O
(	O
x	double
==	O
0.0	int
&&	O
y	double
>=	O
0.0	int
)	O
return	O
M_PI_2	int
;	O
else	O
if	O
(	O
x	double
==	O
0.0	int
&&	O
y	double
<	O
0.0	int
)	O
return	O
-	O
(	O
M_PI_2	int
)	O
;	O
else	O
return	O
atan2	(double,double)->(double)
(	O
y	double
,	O
x	double
)	O
;	O
}	O
double	O
_angle_of_arc	(struct(double,double),struct(double,double),struct(double,double))->(double)
(	O
plPoint	struct(double,double)
p0	struct(double,double)
,	O
plPoint	struct(double,double)
pp1	struct(double,double)
,	O
plPoint	struct(double,double)
pc	struct(double,double)
)	O
{	O
plVector	struct(double,double)
v0	struct(double,double)
,	O
v1	struct(double,double)
;	O
double	O
cross	double
,	O
angle	double
,	O
angle0	double
;	O
v0	struct(double,double)
.	O
x	double
=	O
p0	struct(double,double)
.	O
x	double
-	O
pc	struct(double,double)
.	O
x	double
;	O
v0	struct(double,double)
.	O
y	double
=	O
p0	struct(double,double)
.	O
y	double
-	O
pc	struct(double,double)
.	O
y	double
;	O
v1	struct(double,double)
.	O
x	double
=	O
pp1	struct(double,double)
.	O
x	double
-	O
pc	struct(double,double)
.	O
x	double
;	O
v1	struct(double,double)
.	O
y	double
=	O
pp1	struct(double,double)
.	O
y	double
-	O
pc	struct(double,double)
.	O
y	double
;	O
angle0	double
=	O
_xatan2	(double,double)->(double)
(	O
v0	struct(double,double)
.	O
y	double
,	O
v0	struct(double,double)
.	O
x	double
)	O
;	O
cross	double
=	O
v0	struct(double,double)
.	O
x	double
*	O
v1	struct(double,double)
.	O
y	double
-	O
v1	struct(double,double)
.	O
x	double
*	O
v0	struct(double,double)
.	O
y	double
;	O
if	O
(	O
cross	double
==	O
0.0	int
)	O
angle	double
=	O
M_PI	int
;	O
else	O
{	O
double	O
angle1	double
;	O
angle1	double
=	O
_xatan2	(double,double)->(double)
(	O
v1	struct(double,double)
.	O
y	double
,	O
v1	struct(double,double)
.	O
x	double
)	O
;	O
angle	double
=	O
angle1	double
-	O
angle0	double
;	O
if	O
(	O
angle	double
>	O
M_PI	int
)	O
angle	double
-=	O
(	O
2.0	int
*	O
M_PI	int
)	O
;	O
else	O
if	O
(	O
angle	double
<	O
-	O
(	O
M_PI	int
)	O
)	O
angle	double
+=	O
(	O
2.0	int
*	O
M_PI	int
)	O
;	O
}	O
return	O
angle	double
;	O
}	O
plPoint	struct(double,double)
_truecenter	(struct(double,double),struct(double,double),struct(double,double))->(struct(double,double))
(	O
plPoint	struct(double,double)
p0	struct(double,double)
,	O
plPoint	struct(double,double)
p1	struct(double,double)
,	O
plPoint	struct(double,double)
pc	struct(double,double)
)	O
{	O
plPoint	struct(double,double)
pm	struct(double,double)
;	O
plVector	struct(double,double)
a	struct(double,double)
,	O
b	struct(double,double)
,	O
c	char
;	O
double	O
scale	double
;	O
pm	struct(double,double)
.	O
x	double
=	O
0.5	int
*	O
(	O
p0	struct(double,double)
.	O
x	double
+	O
p1	struct(double,double)
.	O
x	double
)	O
;	O
pm	struct(double,double)
.	O
y	double
=	O
0.5	int
*	O
(	O
p0	struct(double,double)
.	O
y	double
+	O
p1	struct(double,double)
.	O
y	double
)	O
;	O
a	struct(double,double)
.	O
x	double
=	O
-	O
p1	struct(double,double)
.	O
y	double
+	O
p0	struct(double,double)
.	O
y	double
;	O
a	struct(double,double)
.	O
y	double
=	O
p1	struct(double,double)
.	O
x	double
-	O
p0	struct(double,double)
.	O
x	double
;	O
b	struct(double,double)
.	O
x	double
=	O
pc	struct(double,double)
.	O
x	double
-	O
pm	struct(double,double)
.	O
x	double
;	O
b	struct(double,double)
.	O
y	double
=	O
pc	struct(double,double)
.	O
y	double
-	O
pm	struct(double,double)
.	O
y	double
;	O
scale	double
=	O
(	O
a	struct(double,double)
.	O
x	double
*	O
b	struct(double,double)
.	O
x	double
+	O
a	struct(double,double)
.	O
y	double
*	O
b	struct(double,double)
.	O
y	double
)	O
/	O
(	O
a	struct(double,double)
.	O
x	double
*	O
a	struct(double,double)
.	O
x	double
+	O
a	struct(double,double)
.	O
y	double
*	O
a	struct(double,double)
.	O
y	double
)	O
;	O
c	char
.	O
x	double
=	O
scale	double
*	O
a	struct(double,double)
.	O
x	double
;	O
c	char
.	O
y	double
=	O
scale	double
*	O
a	struct(double,double)
.	O
y	double
;	O
pc	struct(double,double)
.	O
x	double
=	O
pm	struct(double,double)
.	O
x	double
+	O
c	char
.	O
x	double
;	O
pc	struct(double,double)
.	O
y	double
=	O
pm	struct(double,double)
.	O
y	double
+	O
c	char
.	O
y	double
;	O
return	O
pc	struct(double,double)
;	O
}	O
