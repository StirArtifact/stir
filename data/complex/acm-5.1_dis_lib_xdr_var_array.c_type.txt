extern	O
int	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
FILE	struct
*	O
,	O
const	O
char	O
*	O
,	O
...	O
)	O
;	O
bool_t	int
xdr_var_array	(*(struct(enum(int,int,int),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),*(char),int)),*(*(char)),int,int,int,*((*(struct(enum(int,int,int),*`,*`,*`,*`,int)),*(void))->(int)))->(int)
(	O
register	O
XDR	struct
*	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
,	O
caddr_t	*(char)
*	O
addrp	*(*(char))
,	O
u_int	int
size	int
,	O
u_int	int
maxsize	int
,	O
u_int	int
elsize	int
,	O
xdrproc_t	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
elproc	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
{	O
register	O
u_int	int
i	int
;	O
register	O
caddr_t	*(char)
target	*(char)
=	O
*	O
addrp	*(*(char))
;	O
register	O
u_int	int
c	int
;	O
register	O
bool_t	int
stat	int
=	O
TRUE	O
;	O
register	O
u_int	int
nodesize	int
;	O
c	int
=	O
size	int
;	O
if	O
(	O
(	O
c	int
>	O
maxsize	int
)	O
&&	O
(	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
->	O
x_op	enum(int,int,int)
!=	O
XDR_FREE	int
)	O
)	O
{	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
nodesize	int
=	O
c	int
*	O
elsize	int
;	O
if	O
(	O
target	*(char)
==	O
NULL	O
||	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
->	O
x_op	enum(int,int,int)
==	O
XDR_DECODE	int
)	O
switch	O
(	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
->	O
x_op	enum(int,int,int)
)	O
{	O
case	O
XDR_DECODE	int
:	O
if	O
(	O
c	int
==	O
0	int
)	O
return	O
(	O
TRUE	O
)	O
;	O
*	O
addrp	*(*(char))
=	O
target	*(char)
=	O
mem_alloc	O
(	O
nodesize	int
)	O
;	O
if	O
(	O
target	*(char)
==	O
NULL	O
)	O
{	O
(	O
void	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"xdr_array: out of memory\n"	*(char)
)	O
;	O
return	O
(	O
FALSE	O
)	O
;	O
}	O
bzero	O
(	O
target	*(char)
,	O
nodesize	int
)	O
;	O
break	O
;	O
case	O
XDR_FREE	int
:	O
return	O
(	O
TRUE	O
)	O
;	O
case	O
XDR_ENCODE	int
:	O
break	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
c	int
)	O
&&	O
stat	int
;	O
i	int
++	O
)	O
{	O
stat	int
=	O
(	O
*	O
elproc	*((*(struct(enum(int,int,int),*(struct`),*(char),*(char),*(char),int)),*(void))->(int))
)	O
(	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
,	O
target	*(char)
,	O
LASTUNSIGNED	O
)	O
;	O
target	*(char)
+=	O
elsize	int
;	O
}	O
if	O
(	O
xdrs	*(struct(enum(int,int,int),*(struct(*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)),*((*`,*`,int)->(int)),*((*`)->(int)),*((*`,int)->(int)),*((*`,int)->(*`)),*((*`)->(void)),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(char),*(char),*(char),int))
->	O
x_op	enum(int,int,int)
==	O
XDR_FREE	int
)	O
{	O
mem_free	O
(	O
*	O
addrp	*(*(char))
,	O
nodesize	int
)	O
;	O
*	O
addrp	*(*(char))
=	O
NULL	O
;	O
}	O
return	O
(	O
stat	int
)	O
;	O
}	O
