extern	O
int	O
spawn_flag	int
;	O
struct	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
]	O
=	O
{	O
{	O
"AUTH"	*(char)
,	O
0	int
,	O
MAX_REQUEST_TIME	int
,	O
CLEANUP_DELAY	int
,	O
radius_auth_req_decode	(*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)
,	O
radius_respond	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
,	O
radius_req_xmit	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
,	O
radius_req_cmp	(*(void),*(void))->(int)
,	O
radius_req_free	(*(void))->(void)
,	O
radius_req_drop	(int,*(void),*(void),int,*(char))->(void)
,	O
radiusd_sql_cleanup	O
,	O
radius_req_failure	(int,*(struct(short,short,struct(int),array(char))))->(int)
,	O
radius_req_update	(*(void),*(void))->(void)
,	O
}	O
,	O
{	O
"ACCT"	*(char)
,	O
0	int
,	O
MAX_REQUEST_TIME	int
,	O
CLEANUP_DELAY	int
,	O
radius_acct_req_decode	(*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)
,	O
radius_respond	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
,	O
radius_req_xmit	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
,	O
radius_req_cmp	(*(void),*(void))->(int)
,	O
radius_req_free	(*(void))->(void)
,	O
radius_req_drop	(int,*(void),*(void),int,*(char))->(void)
,	O
radiusd_sql_cleanup	O
,	O
radius_req_failure	(int,*(struct(short,short,struct(int),array(char))))->(int)
,	O
radius_req_update	(*(void),*(void))->(void)
,	O
}	O
,	O
{	O
NULL	O
,	O
}	O
}	O
;	O
static	O
grad_list_t	struct
*	O
request_list	*(struct)
;	O
REQUEST	struct
*	O
request_create	(int,int,*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(char),long)->(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))
(	O
int	O
type	int
,	O
int	O
fd	int
,	O
const	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
srv_sa	*(struct(short,short,struct(int),array(char)))
,	O
const	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
clt_sa	*(struct(short,short,struct(int),array(char)))
,	O
u_char	char
*	O
buf	*(char)
,	O
size_t	long
bufsize	long
)	O
{	O
void	O
*	O
data	*(void)
;	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
;	O
if	O
(	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
type	int
]	O
.	O
decode	*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int))
(	O
srv_sa	*(struct(short,short,struct(int),array(char)))
,	O
clt_sa	*(struct(short,short,struct(int),array(char)))
,	O
buf	*(char)
,	O
bufsize	long
,	O
&	O
data	*(void)
)	O
)	O
return	O
NULL	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
=	O
data	*(void)
;	O
time	struct(long,long)
(	O
&	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
timestamp	long
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
=	O
type	int
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
srv_addr	struct(short,short,struct(int),array(char))
=	O
*	O
srv_sa	*(struct(short,short,struct(int),array(char)))
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
addr	int
=	O
*	O
clt_sa	*(struct(short,short,struct(int),array(char)))
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
=	O
grad_emalloc	(long)->(*(void))
(	O
bufsize	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
,	O
buf	*(char)
,	O
bufsize	long
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawsize	long
=	O
bufsize	long
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
=	O
0	int
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_WAITING	int
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
fd	int
=	O
fd	int
;	O
return	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
;	O
}	O
void	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
free	*((*(void),*(void))->(int))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
)	O
;	O
grad_free	(*(void))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
)	O
;	O
grad_free	(*(void))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
}	O
void	O
request_drop	(int,*(void),*(void),int,*(char))->(void)
(	O
int	O
type	int
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
orig_data	*(void)
,	O
int	O
fd	int
,	O
const	O
char	O
*	O
status_str	*(char)
)	O
{	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
type	int
]	O
.	O
drop	*((int,*(void),*(void),int,*(char))->(void))
(	O
type	int
,	O
data	*(void)
,	O
orig_data	*(void)
,	O
fd	int
,	O
status_str	*(char)
)	O
;	O
}	O
int	O
request_respond	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
int	O
rc	int
=	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
respond	*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_COMPLETED	int
;	O
return	O
rc	int
;	O
}	O
void	O
request_xmit	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
if	O
(	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
xmit	*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void))
)	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
xmit	*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
int	O
request_cmp	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))),*(void))->(int)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
return	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
comp	*((*(void),*(void))->(int))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
,	O
ptr	*(*(void))
)	O
;	O
}	O
void	O
request_cleanup	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
if	O
(	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
cleanup	*((int,*(void))->(void))
)	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
cleanup	*((int,*(void))->(void))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
)	O
;	O
}	O
int	O
request_forward	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
if	O
(	O
spawn_flag	int
&&	O
radiusd_master	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
rpp_ready	()->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
)	O
{	O
rpp_forward_request	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_COMPLETED	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_XMIT	int
;	O
return	O
1	int
;	O
}	O
}	O
else	O
request_xmit	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
request_retransmit	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))),*(void),long)->(int)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
void	O
*	O
rawdata	*(void)
,	O
size_t	long
rawsize	long
)	O
{	O
grad_free	(*(void))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
=	O
grad_emalloc	(long)->(*(void))
(	O
rawsize	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
,	O
rawdata	*(void)
,	O
rawsize	long
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawsize	long
=	O
rawsize	long
;	O
return	O
request_forward	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
struct	O
request_closure	struct(int,*(void),*(void),long,long,*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))),long,long)
{	O
int	O
type	int
;	O
void	O
*	O
data	*(void)
;	O
void	O
*	O
rawdata	*(void)
;	O
size_t	long
rawsize	long
;	O
time_t	long
curtime	long
;	O
int	O
(	O
*	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
)	O
(	O
REQUEST	struct
*	O
)	O
;	O
int	O
state	*(char)
;	O
REQUEST	struct
*	O
orig	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
;	O
REQUEST	struct
*	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
;	O
size_t	long
request_count	long
;	O
size_t	long
request_type_count	long
;	O
}	O
;	O
int	O
request_call_handler	(*((*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))->(int)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
int	O
(	O
*	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
)	O
(	O
REQUEST	struct
*	O
)	O
,	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
int	O
rc	int
=	O
(	O
*	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
)	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
request_cleanup	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_request_iterator	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
clos	*(void)
)	O
{	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
=	O
item	*(void)
;	O
struct	O
request_closure	struct(int,*(void),*(void),long,long,*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))),long,long)
*	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
=	O
clos	*(void)
;	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
==	O
RS_COMPLETED	int
)	O
{	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
timestamp	long
+	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
cleanup_delay	int
<=	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
curtime	long
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"deleting completed %s request"	*(char)
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
)	O
;	O
grad_list_remove	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
request_list	*(struct)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
;	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
==	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
type	int
&&	O
(	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
==	O
NULL	O
||	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
->	O
timestamp	long
>	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
timestamp	long
)	O
)	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
;	O
}	O
else	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
==	O
RS_PROXY	int
)	O
{	O
if	O
(	O
!	O
spawn_flag	int
||	O
rpp_ready	()->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
)	O
{	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s proxy reply. Process %lu"	*(char)
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
u_long	long
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
;	O
request_call_handler	(*((*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))->(int)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
grad_list_remove	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
request_list	*(struct)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
;	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
else	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
timestamp	long
+	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
ttl	int
<=	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
curtime	long
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Proxy %s request expired in queue"	*(char)
)	O
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
)	O
;	O
grad_list_remove	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
request_list	*(struct)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
;	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
==	O
RS_XMIT	int
&&	O
request_forward	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
timestamp	long
+	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
ttl	int
<=	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
curtime	long
)	O
{	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
==	O
RS_XMIT	int
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_COMPLETED	int
;	O
else	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
==	O
RS_TERMINATED	int
)	O
{	O
pid_t	int
pid	int
=	O
rpp_check_pid	(int)->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
;	O
if	O
(	O
pid	int
==	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
{	O
if	O
(	O
rpp_kill	(int,int)->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
,	O
SIGKILL	int
)	O
==	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Killing unresponsive %s child %lu"	*(char)
)	O
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
;	O
}	O
else	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
,	O
_	O
(	O
"Cannot terminate child %lu. Attempting to kill inexisting process?"	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
;	O
}	O
}	O
grad_list_remove	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
request_list	*(struct)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
NULL	O
)	O
;	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
else	O
{	O
int	O
rc	int
=	O
rpp_kill	(int,int)->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
,	O
SIGTERM	int
)	O
;	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_NOTICE	int
,	O
_	O
(	O
"Terminating unresponsive %s child %lu, status: %s"	*(char)
)	O
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
,	O
rc	int
==	O
0	int
?	O
_	O
(	O
"OK"	*(char)
)	O
:	O
_	O
(	O
"FAILURE"	*(char)
)	O
)	O
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_TERMINATED	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
==	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
type	int
)	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
request_type_count	long
++	O
;	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
request_count	long
++	O
;	O
if	O
(	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
state	*(char)
!=	O
RCMP_NE	int
)	O
return	O
0	int
;	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
==	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
type	int
)	O
{	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
state	*(char)
=	O
request_cmp	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))),*(void))->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
data	*(void)
)	O
;	O
switch	O
(	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
state	*(char)
)	O
{	O
case	O
RCMP_EQ	int
:	O
if	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
==	O
RS_COMPLETED	int
&&	O
request_retransmit	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))),*(void),long)->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
rawdata	*(void)
,	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
rawsize	long
)	O
==	O
0	int
)	O
break	O
;	O
else	O
request_drop	(int,*(void),*(void),int,*(char))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
,	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
data	*(void)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
fd	int
,	O
_	O
(	O
"duplicate request"	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
RCMP_PROXY	int
:	O
rp	*(struct(int,*(void),*(void),long,long,*((*(struct`))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))),long,long))
->	O
orig	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
request_handle	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))),*((*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))->(int)))->(int)
(	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
int	O
(	O
*	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
)	O
(	O
REQUEST	struct
*	O
)	O
)	O
{	O
struct	O
request_closure	struct(int,*(void),*(void),long,long,*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),int,*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))),long,long)
rc	int
;	O
int	O
status	int
;	O
if	O
(	O
!	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
return	O
1	int
;	O
rc	int
.	O
type	int
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
;	O
rc	int
.	O
data	*(void)
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
;	O
rc	int
.	O
rawdata	*(void)
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawdata	*(void)
;	O
rc	int
.	O
rawsize	long
=	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
rawsize	long
;	O
rc	int
.	O
orig	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
=	O
NULL	O
;	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
=	O
NULL	O
;	O
rc	int
.	O
state	*(char)
=	O
RCMP_NE	int
;	O
rc	int
.	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
=	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
;	O
time	struct(long,long)
(	O
&	O
rc	int
.	O
curtime	long
)	O
;	O
rc	int
.	O
request_count	long
=	O
rc	int
.	O
request_type_count	long
=	O
0	int
;	O
if	O
(	O
!	O
request_list	*(struct)
)	O
request_list	*(struct)
=	O
grad_list_create	()->(*(struct))
(	O
)	O
;	O
else	O
grad_list_iterate	(*(struct),*((*(void),*(void))->(int)),*(void))->(void)
(	O
request_list	*(struct)
,	O
_request_iterator	(*(void),*(void))->(int)
,	O
&	O
rc	int
)	O
;	O
switch	O
(	O
rc	int
.	O
state	*(char)
)	O
{	O
case	O
RCMP_EQ	int
:	O
return	O
1	int
;	O
case	O
RCMP_PROXY	int
:	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
orig	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
=	O
rc	int
.	O
orig	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
;	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
=	O
rc	int
.	O
orig	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
->	O
child_id	int
;	O
if	O
(	O
!	O
radiusd_master	()->(int)
(	O
)	O
)	O
{	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s proxy reply. Process %lu"	*(char)
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
u_long	long
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
;	O
request_call_handler	(*((*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))->(int)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
spawn_flag	int
||	O
rpp_ready	()->(int)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
)	O
{	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s proxy reply. Process %lu"	*(char)
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
u_long	long
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
)	O
;	O
request_call_handler	(*((*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))->(int)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
else	O
{	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
=	O
RS_PROXY	int
;	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"Proxy %s request %lu added to the "	*(char)
"list. %d requests held."	*(char)
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
u_long	long
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
,	O
rc	int
.	O
request_count	long
+	O
1	int
)	O
;	O
grad_list_append	(*(struct),*(void))->(void)
(	O
request_list	*(struct)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
if	O
(	O
rc	int
.	O
request_count	long
>=	O
max_requests	int
)	O
{	O
if	O
(	O
!	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
)	O
{	O
request_drop	(int,*(void),*(void),int,*(char))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
,	O
NULL	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
fd	int
,	O
_	O
(	O
"too many requests in queue"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
if	O
(	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
max_requests	int
&&	O
rc	int
.	O
request_type_count	long
>=	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
max_requests	int
)	O
{	O
if	O
(	O
!	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
)	O
{	O
request_drop	(int,*(void),*(void),int,*(char))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
,	O
NULL	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
fd	int
,	O
_	O
(	O
"too many requests of this type"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
=	O
NULL	O
;	O
if	O
(	O
radiusd_master	()->(int)
(	O
)	O
&&	O
spawn_flag	int
&&	O
!	O
rpp_ready	()->(int)
(	O
0	int
)	O
)	O
{	O
request_drop	(int,*(void),*(void),int,*(char))->(void)
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
data	*(void)
,	O
NULL	O
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
fd	int
,	O
_	O
(	O
"Maximum number of children active"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
)	O
{	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"replacing request dated %s"	*(char)
,	O
ctime	(*(long))->(*(char))
(	O
&	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
->	O
timestamp	long
)	O
)	O
;	O
grad_list_remove	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
request_list	*(struct)
,	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
,	O
NULL	O
)	O
;	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
rc	int
.	O
lru	*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`)))))
)	O
;	O
rc	int
.	O
request_count	long
--	O
;	O
}	O
GRAD_DEBUG3	O
(	O
1	int
,	O
"%s request %lu added to the list. %d requests held."	*(char)
,	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
name	*(char)
,	O
(	O
u_long	long
)	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
child_id	int
,	O
rc	int
.	O
request_count	long
+	O
1	int
)	O
;	O
status	int
=	O
request_call_handler	(*((*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))->(int)),*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(int)
(	O
handler	*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int))
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
grad_list_append	(*(struct),*(void))->(void)
(	O
request_list	*(struct)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
return	O
status	int
;	O
}	O
void	O
request_update	(int,int,*(void))->(void)
(	O
pid_t	int
pid	int
,	O
int	O
status	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
REQUEST	struct
*	O
p	*(struct)
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
GRAD_DEBUG2	O
(	O
100	int
,	O
"enter, pid=%lu, ptr = %p"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
pid	int
,	O
ptr	*(*(void))
)	O
;	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
request_list	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
;	O
for	O
(	O
p	*(struct)
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
p	*(struct)
->	O
child_id	int
==	O
pid	int
)	O
{	O
p	*(struct)
->	O
status	int
=	O
status	int
;	O
if	O
(	O
ptr	*(*(void))
&&	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
p	*(struct)
->	O
type	int
]	O
.	O
update	*((*(void),*(void))->(void))
)	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
p	*(struct)
->	O
type	int
]	O
.	O
update	*((*(void),*(void))->(void))
(	O
p	*(struct)
->	O
data	*(void)
,	O
ptr	*(*(void))
)	O
;	O
}	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
GRAD_DEBUG	O
(	O
100	int
,	O
"exit"	*(char)
)	O
;	O
}	O
void	O
request_fail	(int,*(struct(short,short,struct(int),array(char))))->(void)
(	O
int	O
type	int
,	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
*	O
addr	int
)	O
{	O
if	O
(	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
type	int
]	O
.	O
failure	*((int,*(struct(short,short,struct(int),array(char))))->(int))
)	O
request_class	struct(*(char),int,int,int,*((*(struct(short,short,struct(int),array(char))),*(struct(short,short,struct(int),array(char))),*(void),long,*(*(void)))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(int)),*((*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct`,array(char)),struct(short,short,struct`,array(char)),*(struct`))))->(void)),*((*(void),*(void))->(int)),*((*(void))->(void)),*((int,*(void),*(void),int,*(char))->(void)),*((int,*(void))->(void)),*((int,*(struct(short,short,struct(int),array(char))))->(int)),*((*(void),*(void))->(void)))
[	O
type	int
]	O
.	O
failure	*((int,*(struct(short,short,struct(int),array(char))))->(int))
(	O
type	int
,	O
addr	int
)	O
;	O
}	O
static	O
int	O
_destroy_request	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
request_free	(*(struct(int,int,long,int,int,*(void),*(void),long,int,struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),*(struct(int,int,long,int,int,*`,*`,long,int,struct`,struct`,*`)))))->(void)
(	O
(	O
REQUEST	struct
*	O
)	O
item	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
void	O
request_init_queue	()->(void)
(	O
)	O
{	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
request_list	*(struct)
,	O
_destroy_request	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
void	O
*	O
request_scan_list	(int,*((*(void),*(void))->(int)),*(void))->(*(void))
(	O
int	O
type	int
,	O
list_iterator_t	*((*(void),*(void))->(int))
fn	*((*(void),*(struct(*(struct`),*(char))))->(int))
,	O
void	O
*	O
closure	*(void)
)	O
{	O
REQUEST	struct
*	O
p	*(struct)
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
request_list	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(struct)
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
p	*(struct)
->	O
type	int
==	O
type	int
&&	O
fn	*((*(void),*(struct(*(struct`),*(char))))->(int))
(	O
p	*(struct)
->	O
data	*(void)
,	O
closure	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
p	*(struct)
?	O
p	*(struct)
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
static	O
int	O
_count_stat	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
REQUEST	struct
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
=	O
item	*(void)
;	O
QUEUE_STAT	array(struct(long,long,long))
*	O
stat	array(struct(long,long,long))
=	O
data	*(void)
;	O
switch	O
(	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
status	int
)	O
{	O
case	O
RS_COMPLETED	int
:	O
(	O
*	O
stat	array(struct(long,long,long))
)	O
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
completed	long
++	O
;	O
break	O
;	O
case	O
RS_PROXY	int
:	O
(	O
*	O
stat	array(struct(long,long,long))
)	O
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
pending	long
++	O
;	O
break	O
;	O
case	O
RS_WAITING	int
:	O
(	O
*	O
stat	array(struct(long,long,long))
)	O
[	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
type	int
]	O
.	O
waiting	long
++	O
;	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
request_stat_list	(array(struct(long,long,long)))->(int)
(	O
QUEUE_STAT	array(struct(long,long,long))
stat	array(struct(long,long,long))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
stat	array(struct(long,long,long))
,	O
0	int
,	O
sizeof	O
(	O
QUEUE_STAT	array(struct(long,long,long))
)	O
)	O
;	O
grad_list_iterate	(*(struct),*((*(void),*(void))->(int)),*(void))->(void)
(	O
request_list	*(struct)
,	O
_count_stat	(*(void),*(void))->(int)
,	O
&	O
stat	array(struct(long,long,long))
)	O
;	O
return	O
0	int
;	O
}	O
