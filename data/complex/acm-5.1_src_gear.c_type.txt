extern	O
void	O
euler	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))))->(void)
(	O
craft	struct(int,int,int,double,*(struct(*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),int,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),*(struct),*(*(char)),array(char),array(char),array(char),long,*(struct),*(struct),*(struct(*`,long,int,int,int,int,int,int,int,int,*`,struct`,struct`,*`,int,int)),*(struct(*`,long,int,int,int,int,int,int,int,int,*`,struct`,struct`,*`,int,int)),long,array(long),array(long),array(long),long,long,long,int,*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,int,int,short,short,int,int,int,struct(*(struct`)),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),int,int,int,int,int,double,struct(short,long,*(struct`),*(struct`)),struct(short,long,*(struct`),*(struct`)),array(struct(short,short,short,short)),int,int,int,long,struct(double,double,double),struct(double,double,double))),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*`)),*(struct(int,float,*`)),*(struct(int,float,*`)),*(struct(int,float,*`)),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*`)->(double)),*(struct(int,float,*`)),*(struct(int,float,*`)),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*`,*`,*`,*`,*`)->(int)),*(char),*(struct(*`,struct`,struct`,struct`,struct`,double,int,*`,*`)),*((*`)->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void))),double,*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)))),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))
*	O
)	O
;	O
double	O
groundContactTime	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))),*(struct(double,double,double)))->(double)
(	O
craft	struct(int,int,int,double,*(struct(*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),int,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),*(struct),*(*(char)),array(char),array(char),array(char),long,*(struct),*(struct),*(struct(*`,long,int,int,int,int,int,int,int,int,*`,struct`,struct`,*`,int,int)),*(struct(*`,long,int,int,int,int,int,int,int,int,*`,struct`,struct`,*`,int,int)),long,array(long),array(long),array(long),long,long,long,int,*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,int,int,short,short,int,int,int,struct(*(struct`)),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),int,int,int,int,int,double,struct(short,long,*(struct`),*(struct`)),struct(short,long,*(struct`),*(struct`)),array(struct(short,short,short,short)),int,int,int,long,struct(double,double,double),struct(double,double,double))),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*`)),*(struct(int,float,*`)),*(struct(int,float,*`)),*(struct(int,float,*`)),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*`)->(double)),*(struct(int,float,*`)),*(struct(int,float,*`)),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*`,*`,*`,*`,*`)->(int)),*(char),*(struct(*`,struct`,struct`,struct`,struct`,double,int,*`,*`)),*((*`)->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void))),double,*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)))),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))
*	O
c	*(struct(long,short,short,short,char,char))
,	O
VPoint	struct(double,double,double)
*	O
contactSg	*(struct(double,double,double))
)	O
{	O
register	O
craftType	struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct))->(double)),*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct),*(struct(array(array(double)))),*(*(struct`)),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))),*((*(struct))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
c	*(struct(long,short,short,short,char,char))
->	O
cinfo	*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct`))->(double)),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct`),*(struct`),*(struct`),*(*`),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*`),*(short))),*((*(struct`))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void)))
;	O
register	O
double	O
tm	double
,	O
tn	double
;	O
VPoint	struct(double,double,double)
v	struct(double,double,double)
,	O
s0	struct(double,double,double)
,	O
s0n	struct(double,double,double)
,	O
Sg	struct(double,double,double)
,	O
gear	struct(double,double,double)
;	O
double	O
local_z	double
=	O
0.0	int
;	O
tm	double
=	O
tn	double
=	O
2.0	int
;	O
Sg	struct(double,double,double)
.	O
x	float
=	O
Sg	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
local_z	double
=	O
localAltitude	(*(struct(double,double,double)),*(struct(double,double,double)))->(double)
(	O
&	O
c	*(struct(long,short,short,short,char,char))
->	O
prevSg	struct(double,double,double)
,	O
&	O
c	*(struct(long,short,short,short,char,char))
->	O
prevw	struct(double,double,double)
)	O
;	O
Sg	struct(double,double,double)
.	O
z	short
=	O
-	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
-	O
local_z	double
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
localTerrain_feet	double
=	O
METERStoFEET	O
(	O
local_z	double
)	O
;	O
v	struct(double,double,double)
.	O
x	float
=	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
.	O
x	float
;	O
v	struct(double,double,double)
.	O
y	short
=	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
.	O
y	short
;	O
v	struct(double,double,double)
.	O
z	short
=	O
-	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
-	O
c	*(struct(long,short,short,short,char,char))
->	O
prevw	struct(double,double,double)
.	O
z	short
)	O
;	O
if	O
(	O
v	struct(double,double,double)
.	O
z	short
<=	O
0.0	int
)	O
{	O
return	O
-	O
1.0	int
;	O
}	O
gear	struct(double,double,double)
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
;	O
gear	struct(double,double,double)
.	O
z	short
+=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Gm	double
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cmMax	double
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
gear	struct(double,double,double)
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
,	O
&	O
s0	struct(double,double,double)
)	O
;	O
s0	struct(double,double,double)
.	O
z	short
+=	O
-	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
prevw	struct(double,double,double)
.	O
z	short
-	O
local_z	double
)	O
;	O
if	O
(	O
s0	struct(double,double,double)
.	O
z	short
>	O
(	O
0.0	int
+	O
EPSILON	int
)	O
)	O
{	O
*	O
contactSg	*(struct(double,double,double))
=	O
c	*(struct(long,short,short,short,char,char))
->	O
prevSg	struct(double,double,double)
;	O
c	*(struct(long,short,short,short,char,char))
->	O
flags	short
|=	O
FL_GND_CONTACT	O
;	O
return	O
0.0	int
;	O
}	O
if	O
(	O
(	O
s0	struct(double,double,double)
.	O
z	short
+	O
v	struct(double,double,double)
.	O
z	short
)	O
>	O
0.0	int
)	O
{	O
tm	double
=	O
-	O
s0	struct(double,double,double)
.	O
z	short
/	O
v	struct(double,double,double)
.	O
z	short
;	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
curGear	array(double)
[	O
1	int
]	O
!=	O
geardown	O
||	O
c	*(struct(long,short,short,short,char,char))
->	O
curGear	array(double)
[	O
2	int
]	O
!=	O
geardown	O
)	O
{	O
killPlayerEx	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))))->(int)
(	O
c	*(struct(long,short,short,short,char,char))
,	O
"Your main landing gear wasn't down and locked\n"	*(char)
,	O
"Either you forgot to extend the gear, or it was damaged in combat."	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
gear	struct(double,double,double)
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
;	O
gear	struct(double,double,double)
.	O
z	short
+=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Gn	double
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
gear	struct(double,double,double)
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
,	O
&	O
s0n	struct(double,double,double)
)	O
;	O
s0n	struct(double,double,double)
.	O
z	short
-=	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
prevw	struct(double,double,double)
.	O
z	short
-	O
local_z	double
)	O
;	O
if	O
(	O
s0n	struct(double,double,double)
.	O
z	short
>	O
(	O
0.0	int
+	O
EPSILON	int
)	O
)	O
{	O
*	O
contactSg	*(struct(double,double,double))
=	O
c	*(struct(long,short,short,short,char,char))
->	O
prevSg	struct(double,double,double)
;	O
c	*(struct(long,short,short,short,char,char))
->	O
flags	short
|=	O
FL_GND_CONTACT	O
;	O
return	O
0.0	int
;	O
}	O
if	O
(	O
(	O
s0n	struct(double,double,double)
.	O
z	short
+	O
v	struct(double,double,double)
.	O
z	short
)	O
>	O
0.0	int
)	O
{	O
tn	double
=	O
-	O
s0n	struct(double,double,double)
.	O
z	short
/	O
v	struct(double,double,double)
.	O
z	short
;	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
curGear	array(double)
[	O
0	int
]	O
!=	O
geardown	O
)	O
{	O
killPlayerEx	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))))->(int)
(	O
c	*(struct(long,short,short,short,char,char))
,	O
"Your nose gear wasn't down and locked"	*(char)
,	O
"Either you forgot to extend the gear, or it was damaged in combat."	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
tm	double
!=	O
2.0	int
||	O
tn	double
!=	O
2.0	int
)	O
{	O
c	*(struct(long,short,short,short,char,char))
->	O
flags	short
|=	O
FL_GND_CONTACT	O
;	O
if	O
(	O
tn	double
<	O
tm	double
)	O
{	O
tm	double
=	O
tn	double
;	O
}	O
if	O
(	O
tm	double
<	O
0.0	int
)	O
{	O
return	O
-	O
1.0	int
;	O
}	O
return	O
tm	double
*	O
deltaT	double
;	O
}	O
else	O
return	O
-	O
1.0	int
;	O
}	O
static	O
VPoint	struct(double,double,double)
zeroPt	struct(double,double,double)
=	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
int	O
groundDynamics	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))),double,double,double,double,double,double)->(int)
(	O
craft	struct(int,int,int,double,*(struct(*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),int,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),*(struct),*(*(char)),array(char),array(char),array(char),long,*(struct),*(struct),*(struct(*`,long,int,int,int,int,int,int,int,int,*`,struct`,struct`,*`,int,int)),*(struct(*`,long,int,int,int,int,int,int,int,int,*`,struct`,struct`,*`,int,int)),long,array(long),array(long),array(long),long,long,long,int,*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,int,int,short,short,int,int,int,struct(*(struct`)),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(*(struct`),int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),struct(int,int,int,int,double,int,int,int,int,int,double,*(char),int,int),int,int,int,int,int,double,struct(short,long,*(struct`),*(struct`)),struct(short,long,*(struct`),*(struct`)),array(struct(short,short,short,short)),int,int,int,long,struct(double,double,double),struct(double,double,double))),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*`)),*(struct(int,float,*`)),*(struct(int,float,*`)),*(struct(int,float,*`)),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*`)->(double)),*(struct(int,float,*`)),*(struct(int,float,*`)),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*`,*`,*`,*`,*`)->(int)),*(char),*(struct(*`,struct`,struct`,struct`,struct`,double,int,*`,*`)),*((*`)->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void))),double,*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)))),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))
*	O
c	*(struct(long,short,short,short,char,char))
,	O
double	O
startT	double
,	O
double	O
CL	double
,	O
double	O
CD	double
,	O
double	O
CM	double
,	O
double	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
double	O
qS	double
)	O
{	O
register	O
double	O
sinTheta	double
,	O
cosTheta	double
;	O
register	O
craftType	struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct))->(double)),*(struct(int,float,*(struct(float,float,float)))),*(struct(int,float,*(struct(float,float,float)))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct),*(struct(array(array(double)))),*(*(struct`)),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))),*((*(struct))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
double	O
theta	double
,	O
theta_dot	double
,	O
dT	double
,	O
cm	double
,	O
cn	int
,	O
cm_dot	double
,	O
cn_dot	double
,	O
m	float
;	O
double	O
t	double
,	O
next_t	double
,	O
muStatic	double
;	O
double	O
muKinetic	double
,	O
Mu	double
,	O
nMu	double
;	O
double	O
lift	double
,	O
drag	double
,	O
pitch_moment	double
,	O
angle	double
;	O
double	O
v	struct(double,double,double)
,	O
sinAlphaP	double
,	O
cosAlphaP	double
;	O
VPoint	struct(double,double,double)
F	struct(double,double,double)
,	O
M	struct(double,double,double)
,	O
mt	*(struct(array(array(double))))
,	O
Sg	struct(double,double,double)
,	O
Cg	struct(double,double,double)
,	O
Fm	struct(double,double,double)
,	O
Fn	struct(double,double,double)
,	O
FnMu	struct(double,double,double)
,	O
FmMu	struct(double,double,double)
,	O
r	*(struct(double,double,double))
,	O
tmpPt	struct(double,double,double)
,	O
Ftot	struct(double,double,double)
;	O
VMatrix	struct(array(array(double)))
turn	struct(array(array(double)))
,	O
mtx	struct(array(array(double)))
;	O
double	O
theta_damp	double
;	O
int	O
done	int
=	O
0	int
,	O
niter	int
=	O
0	int
;	O
double	O
smag	double
;	O
double	O
local_z	double
=	O
0.0	int
;	O
t	double
=	O
0.0	int
;	O
Fm	struct(double,double,double)
.	O
x	float
=	O
Fm	struct(double,double,double)
.	O
y	short
=	O
Fm	struct(double,double,double)
.	O
z	short
=	O
0.0	int
;	O
Fn	struct(double,double,double)
.	O
x	float
=	O
Fn	struct(double,double,double)
.	O
y	short
=	O
Fn	struct(double,double,double)
.	O
z	short
=	O
0.0	int
;	O
Ftot	struct(double,double,double)
.	O
x	float
=	O
Ftot	struct(double,double,double)
.	O
y	short
=	O
Ftot	struct(double,double,double)
.	O
z	short
=	O
0.0	int
;	O
m	float
=	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
/	O
earth_g	int
;	O
dT	double
=	O
0.002	int
;	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
c	*(struct(long,short,short,short,char,char))
->	O
cinfo	*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct`))->(double)),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct`),*(struct`),*(struct`),*(*`),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*`),*(short))),*((*(struct`))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void)))
;	O
theta_damp	double
=	O
0.25	int
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
wingS	double
*	O
c	*(struct(long,short,short,short,char,char))
->	O
rho	double
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
c	*(struct(long,short,short,short,char,char))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
c	*(struct(long,short,short,short,char,char))
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Cmq	double
;	O
v	struct(double,double,double)
=	O
mag	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
)	O
;	O
Cg	struct(double,double,double)
.	O
z	short
=	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
.	O
z	short
;	O
Cg	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
Cg	struct(double,double,double)
.	O
x	float
=	O
sqrt	(double)->(double)
(	O
v	struct(double,double,double)
*	O
v	struct(double,double,double)
-	O
Cg	struct(double,double,double)
.	O
z	short
*	O
Cg	struct(double,double,double)
.	O
z	short
)	O
;	O
Sg	struct(double,double,double)
.	O
x	float
=	O
Sg	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
local_z	double
=	O
localAltitude	(*(struct(double,double,double)),*(struct(double,double,double)))->(double)
(	O
&	O
c	*(struct(long,short,short,short,char,char))
->	O
Sg	struct(double,double,double)
,	O
&	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
)	O
;	O
Sg	struct(double,double,double)
.	O
z	short
=	O
-	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
-	O
local_z	double
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
localTerrain_feet	double
=	O
METERStoFEET	O
(	O
local_z	double
)	O
;	O
theta	double
=	O
-	O
c	*(struct(long,short,short,short,char,char))
->	O
curPitch	double
;	O
theta_dot	double
=	O
-	O
c	*(struct(long,short,short,short,char,char))
->	O
q	double
;	O
lift	double
=	O
CL	double
*	O
qS	double
;	O
drag	double
=	O
CD	double
*	O
qS	double
;	O
pitch_moment	double
=	O
CM	double
*	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
alpha	double
+	O
elevatorSetting	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))),double,double)->(double)
(	O
c	*(struct(long,short,short,short,char,char))
,	O
qS	double
,	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
)	O
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
effElevator	double
)	O
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
c	*(struct(long,short,short,short,char,char))
*	O
qS	double
;	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
flags	short
&	O
FL_BRAKES	O
)	O
{	O
muStatic	double
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
muBStatic	double
;	O
muKinetic	double
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
muBKinetic	double
;	O
}	O
else	O
{	O
muStatic	double
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
muStatic	double
;	O
muKinetic	double
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
muKinetic	double
;	O
}	O
sinAlphaP	double
=	O
sin	(double)->(double)
(	O
c	*(struct(long,short,short,short,char,char))
->	O
alpha	double
+	O
theta	double
)	O
;	O
cosAlphaP	double
=	O
cos	(double)->(double)
(	O
c	*(struct(long,short,short,short,char,char))
->	O
alpha	double
+	O
theta	double
)	O
;	O
for	O
(	O
t	double
=	O
startT	double
;	O
!	O
done	int
;	O
t	double
=	O
next_t	double
)	O
{	O
next_t	double
=	O
t	double
+	O
dT	double
;	O
if	O
(	O
next_t	double
>=	O
deltaT	double
)	O
{	O
done	int
=	O
1	int
;	O
dT	double
=	O
deltaT	double
-	O
t	double
;	O
}	O
sinTheta	double
=	O
sin	(double)->(double)
(	O
theta	double
)	O
;	O
cosTheta	double
=	O
cos	(double)->(double)
(	O
theta	double
)	O
;	O
cm	double
=	O
-	O
(	O
Sg	struct(double,double,double)
.	O
z	short
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
)	O
/	O
cosTheta	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Gm	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
.	O
z	short
;	O
cn	int
=	O
-	O
(	O
Sg	struct(double,double,double)
.	O
z	short
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
)	O
/	O
cosTheta	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Gn	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
.	O
z	short
;	O
cm_dot	double
=	O
-	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
.	O
x	float
*	O
theta_dot	double
+	O
Cg	struct(double,double,double)
.	O
z	short
/	O
cosTheta	double
+	O
(	O
(	O
Sg	struct(double,double,double)
.	O
z	short
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
)	O
*	O
sinTheta	double
*	O
theta_dot	double
)	O
/	O
(	O
cosTheta	double
*	O
cosTheta	double
)	O
)	O
;	O
cn_dot	double
=	O
-	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
.	O
x	float
*	O
theta_dot	double
+	O
Cg	struct(double,double,double)
.	O
z	short
/	O
cosTheta	double
+	O
(	O
(	O
Sg	struct(double,double,double)
.	O
z	short
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
)	O
*	O
sinTheta	double
*	O
theta_dot	double
)	O
/	O
(	O
cosTheta	double
*	O
cosTheta	double
)	O
)	O
;	O
if	O
(	O
cm	double
<	O
0.0	int
)	O
{	O
return	O
1	int
;	O
}	O
if	O
(	O
cn	int
<	O
0.0	int
)	O
{	O
return	O
1	int
;	O
}	O
if	O
(	O
cm	double
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cmMax	double
)	O
{	O
Fm	struct(double,double,double)
.	O
z	short
=	O
-	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Km	double
*	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cmMax	double
-	O
cm	double
)	O
)	O
;	O
if	O
(	O
cm_dot	double
<	O
0.0	int
)	O
Fm	struct(double,double,double)
.	O
z	short
+=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Dm	double
*	O
cm_dot	double
;	O
}	O
else	O
Fm	struct(double,double,double)
.	O
z	short
=	O
0.0	int
;	O
if	O
(	O
cn	int
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
)	O
{	O
Fn	struct(double,double,double)
.	O
z	short
=	O
-	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Kn	double
*	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
-	O
cn	int
)	O
)	O
;	O
if	O
(	O
cn_dot	double
<	O
0.0	int
)	O
Fn	struct(double,double,double)
.	O
z	short
+=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Dn	double
*	O
cn_dot	double
;	O
if	O
(	O
cn	int
<	O
0.1	int
)	O
Fn	struct(double,double,double)
.	O
z	short
+=	O
-	O
100	int
*	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Kn	double
*	O
(	O
0.1	int
-	O
cn	int
)	O
)	O
;	O
}	O
else	O
Fn	struct(double,double,double)
.	O
z	short
=	O
0.0	int
;	O
VCrossProd	(*(struct(double,double,double)),*(struct(double,double,double)),*(struct(double,double,double)))->(void)
(	O
&	O
Fm	struct(double,double,double)
,	O
&	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
,	O
&	O
M	struct(double,double,double)
)	O
;	O
VCrossProd	(*(struct(double,double,double)),*(struct(double,double,double)),*(struct(double,double,double)))->(void)
(	O
&	O
Fn	struct(double,double,double)
,	O
&	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
,	O
&	O
mt	*(struct(array(array(double))))
)	O
;	O
M	struct(double,double,double)
.	O
x	float
+=	O
mt	*(struct(array(array(double))))
.	O
x	float
;	O
M	struct(double,double,double)
.	O
y	short
+=	O
mt	*(struct(array(array(double))))
.	O
y	short
;	O
M	struct(double,double,double)
.	O
z	short
+=	O
mt	*(struct(array(array(double))))
.	O
z	short
;	O
if	O
(	O
fabs	(double)->(double)
(	O
Cg	struct(double,double,double)
.	O
x	float
)	O
<	O
0.5	int
)	O
{	O
nMu	double
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
muStatic	double
;	O
Mu	double
=	O
muStatic	double
;	O
}	O
else	O
{	O
nMu	double
=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
muKinetic	double
;	O
Mu	double
=	O
muKinetic	double
;	O
}	O
if	O
(	O
Cg	struct(double,double,double)
.	O
x	float
<	O
0.0	int
)	O
Mu	double
=	O
-	O
Mu	double
;	O
else	O
if	O
(	O
Cg	struct(double,double,double)
.	O
x	float
==	O
0.0	int
)	O
Mu	double
=	O
0.0	int
;	O
if	O
(	O
cm	double
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cmMax	double
)	O
{	O
FmMu	struct(double,double,double)
.	O
x	float
=	O
Fm	struct(double,double,double)
.	O
z	short
*	O
cosTheta	double
*	O
cosTheta	double
*	O
Mu	double
;	O
FmMu	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
FmMu	struct(double,double,double)
.	O
z	short
=	O
Fm	struct(double,double,double)
.	O
z	short
*	O
cosTheta	double
*	O
sinTheta	double
*	O
Mu	double
;	O
VCrossProd	(*(struct(double,double,double)),*(struct(double,double,double)),*(struct(double,double,double)))->(void)
(	O
&	O
FmMu	struct(double,double,double)
,	O
&	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
,	O
&	O
mt	*(struct(array(array(double))))
)	O
;	O
M	struct(double,double,double)
.	O
x	float
+=	O
mt	*(struct(array(array(double))))
.	O
x	float
;	O
M	struct(double,double,double)
.	O
y	short
+=	O
mt	*(struct(array(array(double))))
.	O
y	short
;	O
M	struct(double,double,double)
.	O
z	short
+=	O
mt	*(struct(array(array(double))))
.	O
z	short
;	O
}	O
if	O
(	O
cn	int
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
)	O
{	O
FnMu	struct(double,double,double)
.	O
x	float
=	O
Fn	struct(double,double,double)
.	O
z	short
*	O
cosTheta	double
*	O
cosTheta	double
*	O
nMu	double
;	O
FnMu	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
FnMu	struct(double,double,double)
.	O
z	short
=	O
Fn	struct(double,double,double)
.	O
z	short
*	O
cosTheta	double
*	O
sinTheta	double
*	O
nMu	double
;	O
VCrossProd	(*(struct(double,double,double)),*(struct(double,double,double)),*(struct(double,double,double)))->(void)
(	O
&	O
FnMu	struct(double,double,double)
,	O
&	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
,	O
&	O
mt	*(struct(array(array(double))))
)	O
;	O
M	struct(double,double,double)
.	O
x	float
+=	O
mt	*(struct(array(array(double))))
.	O
x	float
;	O
M	struct(double,double,double)
.	O
y	short
+=	O
mt	*(struct(array(array(double))))
.	O
y	short
;	O
M	struct(double,double,double)
.	O
z	short
+=	O
mt	*(struct(array(array(double))))
.	O
z	short
;	O
}	O
M	struct(double,double,double)
.	O
y	short
-=	O
pitch_moment	double
-	O
theta_damp	double
*	O
v	struct(double,double,double)
*	O
theta_dot	double
;	O
F	struct(double,double,double)
.	O
x	float
=	O
-	O
(	O
Fm	struct(double,double,double)
.	O
z	short
+	O
Fn	struct(double,double,double)
.	O
z	short
)	O
*	O
sinTheta	double
;	O
F	struct(double,double,double)
.	O
x	float
+=	O
(	O
Fm	struct(double,double,double)
.	O
z	short
+	O
Fn	struct(double,double,double)
.	O
z	short
)	O
*	O
cosTheta	double
*	O
Mu	double
;	O
F	struct(double,double,double)
.	O
x	float
+=	O
cosTheta	double
*	O
c	*(struct(long,short,short,short,char,char))
->	O
curThrust	double
;	O
F	struct(double,double,double)
.	O
x	float
-=	O
sinAlphaP	double
*	O
lift	double
;	O
F	struct(double,double,double)
.	O
x	float
-=	O
cosAlphaP	double
*	O
drag	double
;	O
F	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
F	struct(double,double,double)
.	O
z	short
=	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
+	O
(	O
Fm	struct(double,double,double)
.	O
z	short
+	O
Fn	struct(double,double,double)
.	O
z	short
)	O
*	O
cosTheta	double
;	O
F	struct(double,double,double)
.	O
z	short
+=	O
sinTheta	double
*	O
c	*(struct(long,short,short,short,char,char))
->	O
curThrust	double
;	O
F	struct(double,double,double)
.	O
z	short
-=	O
cosAlphaP	double
*	O
lift	double
;	O
F	struct(double,double,double)
.	O
z	short
-=	O
sinAlphaP	double
*	O
drag	double
;	O
Ftot	struct(double,double,double)
.	O
x	float
+=	O
F	struct(double,double,double)
.	O
x	float
;	O
Ftot	struct(double,double,double)
.	O
y	short
+=	O
F	struct(double,double,double)
.	O
y	short
;	O
Ftot	struct(double,double,double)
.	O
z	short
+=	O
F	struct(double,double,double)
.	O
z	short
;	O
niter	int
++	O
;	O
Sg	struct(double,double,double)
.	O
x	float
+=	O
Cg	struct(double,double,double)
.	O
x	float
*	O
dT	double
+	O
0.5	int
*	O
F	struct(double,double,double)
.	O
x	float
/	O
m	float
*	O
dT	double
*	O
dT	double
;	O
Sg	struct(double,double,double)
.	O
y	short
+=	O
Cg	struct(double,double,double)
.	O
y	short
*	O
dT	double
+	O
0.5	int
*	O
F	struct(double,double,double)
.	O
y	short
/	O
m	float
*	O
dT	double
*	O
dT	double
;	O
Sg	struct(double,double,double)
.	O
z	short
+=	O
Cg	struct(double,double,double)
.	O
z	short
*	O
dT	double
+	O
0.5	int
*	O
F	struct(double,double,double)
.	O
z	short
/	O
m	float
*	O
dT	double
*	O
dT	double
;	O
Cg	struct(double,double,double)
.	O
x	float
+=	O
F	struct(double,double,double)
.	O
x	float
/	O
m	float
*	O
dT	double
;	O
Cg	struct(double,double,double)
.	O
y	short
+=	O
F	struct(double,double,double)
.	O
y	short
/	O
m	float
*	O
dT	double
;	O
Cg	struct(double,double,double)
.	O
z	short
+=	O
F	struct(double,double,double)
.	O
z	short
/	O
m	float
*	O
dT	double
;	O
theta	double
+=	O
theta_dot	double
*	O
dT	double
+	O
0.5	int
*	O
M	struct(double,double,double)
.	O
y	short
/	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
I	int
.	O
m	float
[	O
1	int
]	O
[	O
1	int
]	O
*	O
dT	double
*	O
dT	double
;	O
theta_dot	double
+=	O
M	struct(double,double,double)
.	O
y	short
/	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
I	int
.	O
m	float
[	O
1	int
]	O
[	O
1	int
]	O
*	O
dT	double
;	O
if	O
(	O
theta	double
<	O
DEGtoRAD	O
(	O
-	O
20.0	int
)	O
)	O
{	O
theta	double
=	O
DEGtoRAD	O
(	O
-	O
20.0	int
)	O
;	O
theta_dot	double
=	O
0.0	int
;	O
}	O
}	O
Sg	struct(double,double,double)
.	O
x	float
=	O
FEETtoMETERS	O
(	O
Sg	struct(double,double,double)
.	O
x	float
)	O
;	O
Sg	struct(double,double,double)
.	O
y	short
=	O
FEETtoMETERS	O
(	O
Sg	struct(double,double,double)
.	O
y	short
)	O
;	O
Sg	struct(double,double,double)
.	O
z	short
=	O
FEETtoMETERS	O
(	O
Sg	struct(double,double,double)
.	O
z	short
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
curNWDef	double
=	O
-	O
c	*(struct(long,short,short,short,char,char))
->	O
Sa	double
*	O
c	*(struct(long,short,short,short,char,char))
->	O
cinfo	*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct`))->(double)),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct`),*(struct`),*(struct`),*(*`),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*`),*(short))),*((*(struct`))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void)))
->	O
maxNWDef	double
*	O
0.3	int
;	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
curNWDef	double
!=	O
0.0	int
&&	O
v	struct(double,double,double)
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
maxNWS	double
&&	O
cn	int
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
)	O
{	O
tmpPt	struct(double,double,double)
.	O
x	float
=	O
c	*(struct(long,short,short,short,char,char))
->	O
cinfo	*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct`))->(double)),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct`),*(struct`),*(struct`),*(*`),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*`),*(short))),*((*(struct`))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void)))
->	O
gearD2	double
;	O
tmpPt	struct(double,double,double)
.	O
y	short
=	O
c	*(struct(long,short,short,short,char,char))
->	O
cinfo	*(struct(*(char),*(char),*(char),double,double,double,double,double,double,double,double,*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct(array(array(double))),double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*((*(struct`))->(double)),*(struct(int,float,*(struct`))),*(struct(int,float,*(struct`))),double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,double,struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,double,double,struct(double,double,double),double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*((*(struct`),*(struct`),*(struct`),*(*`),*(long))->(int)),*(char),*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*`),*(short))),*((*(struct`))->(void)),struct(char,char,short,char,char,char,char),struct(char,char,short,char,char,char,char),*(void)))
->	O
gearD1	double
/	O
tan	(double)->(double)
(	O
c	*(struct(long,short,short,short,char,char))
->	O
curNWDef	double
)	O
;	O
tmpPt	struct(double,double,double)
.	O
z	short
=	O
0.0	int
;	O
angle	double
=	O
Sg	struct(double,double,double)
.	O
x	float
/	O
tmpPt	struct(double,double,double)
.	O
y	short
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
tmpPt	struct(double,double,double)
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
,	O
&	O
r	*(struct(double,double,double))
)	O
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
turn	struct(array(array(double)))
)	O
;	O
turn	struct(array(array(double)))
.	O
m	float
[	O
0	int
]	O
[	O
3	int
]	O
=	O
-	O
r	*(struct(double,double,double))
.	O
x	float
;	O
turn	struct(array(array(double)))
.	O
m	float
[	O
1	int
]	O
[	O
3	int
]	O
=	O
-	O
r	*(struct(double,double,double))
.	O
y	short
;	O
turn	struct(array(array(double)))
.	O
m	float
[	O
2	int
]	O
[	O
3	int
]	O
=	O
-	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
)	O
;	O
VRotate	(*(struct(array(array(double)))),int,double)->(*(struct(array(array(double)))))
(	O
&	O
turn	struct(array(array(double)))
,	O
ZRotation	int
,	O
angle	double
)	O
;	O
turn	struct(array(array(double)))
.	O
m	float
[	O
0	int
]	O
[	O
3	int
]	O
=	O
turn	struct(array(array(double)))
.	O
m	float
[	O
0	int
]	O
[	O
3	int
]	O
+	O
r	*(struct(double,double,double))
.	O
x	float
;	O
turn	struct(array(array(double)))
.	O
m	float
[	O
1	int
]	O
[	O
3	int
]	O
=	O
turn	struct(array(array(double)))
.	O
m	float
[	O
1	int
]	O
[	O
3	int
]	O
+	O
r	*(struct(double,double,double))
.	O
y	short
;	O
turn	struct(array(array(double)))
.	O
m	float
[	O
2	int
]	O
[	O
3	int
]	O
=	O
turn	struct(array(array(double)))
.	O
m	float
[	O
2	int
]	O
[	O
3	int
]	O
+	O
METERStoFEET	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
)	O
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
zeroPt	struct(double,double,double)
,	O
&	O
turn	struct(array(array(double)))
,	O
&	O
tmpPt	struct(double,double,double)
)	O
;	O
smag	double
=	O
sqrt	(double)->(double)
(	O
tmpPt	struct(double,double,double)
.	O
x	float
*	O
tmpPt	struct(double,double,double)
.	O
x	float
+	O
tmpPt	struct(double,double,double)
.	O
y	short
*	O
tmpPt	struct(double,double,double)
.	O
y	short
)	O
;	O
DISUpdateWorldCoordinates	(*(struct(double,double,double)),double,double,double)->(void)
(	O
&	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
tmpPt	struct(double,double,double)
.	O
x	float
/	O
smag	double
,	O
tmpPt	struct(double,double,double)
.	O
y	short
/	O
smag	double
,	O
smag	double
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
=	O
-	O
FEETtoMETERS	O
(	O
Sg	struct(double,double,double)
.	O
z	short
)	O
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
turn	struct(array(array(double)))
)	O
;	O
VRotate	(*(struct(array(array(double)))),int,double)->(*(struct(array(array(double)))))
(	O
&	O
turn	struct(array(array(double)))
,	O
ZRotation	int
,	O
angle	double
)	O
;	O
mtx	struct(array(array(double)))
=	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
;	O
VMatrixMultByRank	(*(struct(array(array(double)))),*(struct(array(array(double)))),*(struct(array(array(double)))),int)->(void)
(	O
&	O
mtx	struct(array(array(double)))
,	O
&	O
turn	struct(array(array(double)))
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
,	O
3	int
)	O
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
)	O
,	O
&	O
turn	struct(array(array(double)))
,	O
&	O
tmpPt	struct(double,double,double)
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
=	O
tmpPt	struct(double,double,double)
;	O
c	*(struct(long,short,short,short,char,char))
->	O
r	*(struct(double,double,double))
=	O
-	O
angle	double
/	O
deltaT	double
;	O
euler	(*(struct(int,int,int,double,*(struct(*`,int,*`,*`,*`,*`,*`,*`,array(char),array(char),array(char),long,*`,*`,*`,*`,long,array(long),array(long),array(long),long,long,long,int,*`,int,int,int,int,int,int,short,short,int,int,int,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,struct`,int,int,int,int,int,double,struct`,struct`,array(struct(short,short,short,short)),int,int,int,long,struct`,struct`)),struct(array(array(double))),struct(double,double,double),double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,struct(array(array(double))),double,double,double,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*(struct(*`,*`,*`,double,double,double,double,double,double,double,double,*`,*`,*`,*`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,struct`,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,*`,*`,*`,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,double,struct`,struct`,double,double,double,double,double,double,double,double,struct`,double,long,long,double,double,double,double,long,array(struct(double,double,double)),array(struct(*(char),int,int,int,double)),*`,*`,*`,*`,struct`,struct`,*`)),double,*(struct(int,int,int,double,*`,struct`,struct`,double,struct`,struct`,struct`,double,struct`,double,double,double,struct`,struct`,struct`,double,double,double,double,double,double,int,double,double,double,double,double,double,double,double,double,double,double,double,double,array(double),int,double,double,double,double,long,long,long,double,double,double,double,int,double,double,*`,double,*`,struct`,struct`,array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*`,array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct`,double,*`,*`,*`,struct`)),struct(double,double,double),struct(double,double,double),array(char),array(char),short,double,double,array(short),short,short,short,array(struct(double,double,double)),array(double),array(*(char)),array(*(char)),int,array(struct(*(char),int,int,int,double)),array(struct(short,short,short,array(char),array(char),*(struct(*(struct(*`,array(char),short,double,short,struct`,struct`,struct`,double,double,double,struct`,struct`)),array(char),short,double,short,struct(double,double,double),struct(double,double,double),struct(double,double,double),double,double,double,struct(array(array(double))),struct(array(array(double))))))),*(struct(short,short,short,array(char),array(char),*`)),array(char),array(char),array(char),array(char),array(char),array(struct(int,struct(double,double,double),double,int,int,int,int,int,int)),int,int,int,int,int,int,struct(double,double,double),double,*(void),*(void),*(void),struct(double,double,double))))->(void)
(	O
c	*(struct(long,short,short,short,char,char))
)	O
;	O
VSetPoint	O
(	O
tmpPt	struct(double,double,double)
,	O
1.0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
tmpPt	struct(double,double,double)
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
,	O
&	O
r	*(struct(double,double,double))
)	O
;	O
smag	double
=	O
sqrt	(double)->(double)
(	O
r	*(struct(double,double,double))
.	O
x	float
*	O
r	*(struct(double,double,double))
.	O
x	float
+	O
r	*(struct(double,double,double))
.	O
y	short
*	O
r	*(struct(double,double,double))
.	O
y	short
)	O
;	O
}	O
else	O
{	O
VSetPoint	O
(	O
tmpPt	struct(double,double,double)
,	O
1.0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
tmpPt	struct(double,double,double)
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
,	O
&	O
r	*(struct(double,double,double))
)	O
;	O
smag	double
=	O
sqrt	(double)->(double)
(	O
r	*(struct(double,double,double))
.	O
x	float
*	O
r	*(struct(double,double,double))
.	O
x	float
+	O
r	*(struct(double,double,double))
.	O
y	short
*	O
r	*(struct(double,double,double))
.	O
y	short
)	O
;	O
DISUpdateWorldCoordinates	(*(struct(double,double,double)),double,double,double)->(void)
(	O
&	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
,	O
r	*(struct(double,double,double))
.	O
x	float
/	O
smag	double
,	O
r	*(struct(double,double,double))
.	O
y	short
/	O
smag	double
,	O
Sg	struct(double,double,double)
.	O
x	float
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
r	*(struct(double,double,double))
=	O
0.0	int
;	O
}	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
.	O
x	float
=	O
Cg	struct(double,double,double)
.	O
x	float
*	O
r	*(struct(double,double,double))
.	O
x	float
/	O
smag	double
;	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
.	O
y	short
=	O
Cg	struct(double,double,double)
.	O
x	float
*	O
r	*(struct(double,double,double))
.	O
y	short
/	O
smag	double
;	O
c	*(struct(long,short,short,short,char,char))
->	O
Cg	struct(double,double,double)
.	O
z	short
=	O
Cg	struct(double,double,double)
.	O
z	short
;	O
c	*(struct(long,short,short,short,char,char))
->	O
groundCgx	double
=	O
Cg	struct(double,double,double)
.	O
x	float
;	O
c	*(struct(long,short,short,short,char,char))
->	O
w	*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`),*(struct`),int)),*(struct(*(struct`))),*(struct(*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int))
.	O
z	short
=	O
-	O
Sg	struct(double,double,double)
.	O
z	short
+	O
local_z	double
;	O
c	*(struct(long,short,short,short,char,char))
->	O
curPitch	double
=	O
-	O
theta	double
;	O
c	*(struct(long,short,short,short,char,char))
->	O
curRoll	double
=	O
0.0	int
;	O
c	*(struct(long,short,short,short,char,char))
->	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
0.0	int
;	O
c	*(struct(long,short,short,short,char,char))
->	O
q	double
=	O
-	O
theta_dot	double
;	O
buildEulerMatrix	(double,double,double,*(struct(array(array(double)))))->(void)
(	O
c	*(struct(long,short,short,short,char,char))
->	O
curRoll	double
,	O
c	*(struct(long,short,short,short,char,char))
->	O
curPitch	double
,	O
c	*(struct(long,short,short,short,char,char))
->	O
curHeading	double
,	O
&	O
(	O
c	*(struct(long,short,short,short,char,char))
->	O
trihedral	struct(array(array(double)))
)	O
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
linAcc	struct(double,double,double)
.	O
x	float
=	O
(	O
Ftot	struct(double,double,double)
.	O
x	float
*	O
cosTheta	double
-	O
Ftot	struct(double,double,double)
.	O
z	short
*	O
sinTheta	double
)	O
/	O
(	O
niter	int
*	O
m	float
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
linAcc	struct(double,double,double)
.	O
y	short
=	O
0.0	int
;	O
c	*(struct(long,short,short,short,char,char))
->	O
linAcc	struct(double,double,double)
.	O
z	short
=	O
-	O
(	O
Ftot	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
+	O
Ftot	struct(double,double,double)
.	O
z	short
*	O
cosTheta	double
)	O
/	O
(	O
niter	int
*	O
m	float
)	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
G	struct(double,double,double)
.	O
z	short
=	O
c	*(struct(long,short,short,short,char,char))
->	O
linAcc	struct(double,double,double)
.	O
x	float
/	O
earth_g	int
;	O
c	*(struct(long,short,short,short,char,char))
->	O
G	struct(double,double,double)
.	O
y	short
=	O
c	*(struct(long,short,short,short,char,char))
->	O
linAcc	struct(double,double,double)
.	O
y	short
/	O
earth_g	int
;	O
c	*(struct(long,short,short,short,char,char))
->	O
G	struct(double,double,double)
.	O
z	short
=	O
c	*(struct(long,short,short,short,char,char))
->	O
linAcc	struct(double,double,double)
.	O
z	short
/	O
earth_g	int
-	O
1.0	int
;	O
if	O
(	O
(	O
cm	double
>=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cmMax	double
)	O
&&	O
(	O
cn	int
>=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
)	O
)	O
{	O
cosTheta	double
=	O
cos	(double)->(double)
(	O
theta	double
)	O
;	O
sinTheta	double
=	O
sin	(double)->(double)
(	O
theta	double
)	O
;	O
cm	double
=	O
-	O
(	O
Sg	struct(double,double,double)
.	O
z	short
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
)	O
/	O
cosTheta	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Gm	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rm	struct(double,double,double)
.	O
z	short
;	O
cn	int
=	O
-	O
(	O
Sg	struct(double,double,double)
.	O
z	short
+	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
.	O
x	float
*	O
sinTheta	double
)	O
/	O
cosTheta	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
Gn	double
-	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
rn	struct(double,double,double)
.	O
z	short
;	O
if	O
(	O
(	O
cm	double
>=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cmMax	double
)	O
&&	O
(	O
cn	int
>=	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
->	O
cnMax	double
)	O
)	O
{	O
c	*(struct(long,short,short,short,char,char))
->	O
flags	short
&=	O
~	O
FL_GND_CONTACT	O
;	O
c	*(struct(long,short,short,short,char,char))
->	O
groundCgx	double
=	O
0.0	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
