int	O
mpz_congruent_p	O
(	O
mpz_srcptr	*(struct(int,int,*(long)))
a	int
,	O
mpz_srcptr	*(struct(int,int,*(long)))
c	*(struct(int,int,*(long)))
,	O
mpz_srcptr	*(struct(int,int,*(long)))
d	long
)	O
{	O
mp_size_t	long
asize	long
,	O
csize	long
,	O
dsize	long
,	O
sign	char
;	O
mp_srcptr	*(long)
ap	*(long)
,	O
cp	*(long)
,	O
dp	*(long)
;	O
mp_ptr	*(long)
xp	*(long)
;	O
mp_limb_t	long
alow	long
,	O
clow	long
,	O
dlow	long
,	O
dmask	long
,	O
r	long
;	O
int	O
result	int
;	O
TMP_DECL	O
;	O
dsize	long
=	O
SIZ	O
(	O
d	long
)	O
;	O
if	O
(	O
UNLIKELY	O
(	O
dsize	long
==	O
0	int
)	O
)	O
return	O
(	O
mpz_cmp	O
(	O
a	int
,	O
c	*(struct(int,int,*(long)))
)	O
==	O
0	int
)	O
;	O
dsize	long
=	O
ABS	O
(	O
dsize	long
)	O
;	O
dp	*(long)
=	O
PTR	O
(	O
d	long
)	O
;	O
if	O
(	O
ABSIZ	O
(	O
a	int
)	O
<	O
ABSIZ	O
(	O
c	*(struct(int,int,*(long)))
)	O
)	O
MPZ_SRCPTR_SWAP	O
(	O
a	int
,	O
c	*(struct(int,int,*(long)))
)	O
;	O
asize	long
=	O
SIZ	O
(	O
a	int
)	O
;	O
csize	long
=	O
SIZ	O
(	O
c	*(struct(int,int,*(long)))
)	O
;	O
sign	char
=	O
(	O
asize	long
^	O
csize	long
)	O
;	O
asize	long
=	O
ABS	O
(	O
asize	long
)	O
;	O
ap	*(long)
=	O
PTR	O
(	O
a	int
)	O
;	O
if	O
(	O
csize	long
==	O
0	int
)	O
return	O
mpn_divisible_p	O
(	O
ap	*(long)
,	O
asize	long
,	O
dp	*(long)
,	O
dsize	long
)	O
;	O
csize	long
=	O
ABS	O
(	O
csize	long
)	O
;	O
cp	*(long)
=	O
PTR	O
(	O
c	*(struct(int,int,*(long)))
)	O
;	O
alow	long
=	O
ap	*(long)
[	O
0	int
]	O
;	O
clow	long
=	O
cp	*(long)
[	O
0	int
]	O
;	O
dlow	long
=	O
dp	*(long)
[	O
0	int
]	O
;	O
dmask	long
=	O
LOW_ZEROS_MASK	O
(	O
dlow	long
)	O
&	O
GMP_NUMB_MASK	O
;	O
alow	long
=	O
(	O
sign	char
>=	O
0	int
?	O
alow	long
:	O
-	O
alow	long
)	O
;	O
if	O
(	O
(	O
(	O
alow	long
-	O
clow	long
)	O
&	O
dmask	long
)	O
!=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
csize	long
==	O
1	int
)	O
{	O
if	O
(	O
dsize	long
==	O
1	int
)	O
{	O
cong_1	O
:	O
if	O
(	O
sign	char
<	O
0	int
)	O
NEG_MOD	O
(	O
clow	long
,	O
clow	long
,	O
dlow	long
)	O
;	O
if	O
(	O
ABOVE_THRESHOLD	O
(	O
asize	long
,	O
BMOD_1_TO_MOD_1_THRESHOLD	int
)	O
)	O
{	O
r	long
=	O
mpn_mod_1	O
(	O
ap	*(long)
,	O
asize	long
,	O
dlow	long
)	O
;	O
if	O
(	O
clow	long
<	O
dlow	long
)	O
return	O
r	long
==	O
clow	long
;	O
else	O
return	O
r	long
==	O
(	O
clow	long
%	O
dlow	long
)	O
;	O
}	O
if	O
(	O
(	O
dlow	long
&	O
1	int
)	O
==	O
0	int
)	O
{	O
unsigned	O
twos	int
;	O
count_trailing_zeros	O
(	O
twos	int
,	O
dlow	long
)	O
;	O
dlow	long
>>=	O
twos	int
;	O
}	O
r	long
=	O
mpn_modexact_1c_odd	O
(	O
ap	*(long)
,	O
asize	long
,	O
dlow	long
,	O
clow	long
)	O
;	O
return	O
r	long
==	O
0	int
||	O
r	long
==	O
dlow	long
;	O
}	O
if	O
(	O
dsize	long
==	O
2	int
&&	O
dlow	long
!=	O
0	int
)	O
{	O
mp_limb_t	long
dsecond	long
=	O
dp	*(long)
[	O
1	int
]	O
;	O
if	O
(	O
dsecond	long
<=	O
dmask	long
)	O
{	O
unsigned	O
twos	int
;	O
count_trailing_zeros	O
(	O
twos	int
,	O
dlow	long
)	O
;	O
dlow	long
=	O
(	O
dlow	long
>>	O
twos	int
)	O
|	O
(	O
dsecond	long
<<	O
(	O
GMP_NUMB_BITS	O
-	O
twos	int
)	O
)	O
;	O
ASSERT_LIMB	O
(	O
dlow	long
)	O
;	O
goto	O
cong_1	O
;	O
}	O
}	O
}	O
TMP_MARK	O
;	O
xp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
asize	long
+	O
1	int
)	O
;	O
if	O
(	O
sign	char
>=	O
0	int
)	O
{	O
if	O
(	O
asize	long
>	O
csize	long
||	O
mpn_cmp	O
(	O
ap	*(long)
,	O
cp	*(long)
,	O
asize	long
)	O
>=	O
0	int
)	O
ASSERT_NOCARRY	O
(	O
mpn_sub	O
(	O
xp	*(long)
,	O
ap	*(long)
,	O
asize	long
,	O
cp	*(long)
,	O
csize	long
)	O
)	O
;	O
else	O
ASSERT_NOCARRY	O
(	O
mpn_sub_n	O
(	O
xp	*(long)
,	O
cp	*(long)
,	O
ap	*(long)
,	O
asize	long
)	O
)	O
;	O
MPN_NORMALIZE	O
(	O
xp	*(long)
,	O
asize	long
)	O
;	O
}	O
else	O
{	O
mp_limb_t	long
carry	long
;	O
carry	long
=	O
mpn_add	O
(	O
xp	*(long)
,	O
ap	*(long)
,	O
asize	long
,	O
cp	*(long)
,	O
csize	long
)	O
;	O
xp	*(long)
[	O
asize	long
]	O
=	O
carry	long
;	O
asize	long
+=	O
(	O
carry	long
!=	O
0	int
)	O
;	O
}	O
result	int
=	O
mpn_divisible_p	O
(	O
xp	*(long)
,	O
asize	long
,	O
dp	*(long)
,	O
dsize	long
)	O
;	O
TMP_FREE	O
;	O
return	O
result	int
;	O
}	O
