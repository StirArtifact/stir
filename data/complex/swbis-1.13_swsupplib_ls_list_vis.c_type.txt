char	O
vis_rcsid	array(char)
[	O
]	O
=	O
"Id: vis.c,v 1.1.1.1 2006/03/25 20:18:02 jhlowe Exp"	*(char)
;	O
char	O
*	O
vis	(*(char),int,int,int)->(*(char))
(	O
dst	*(char)
,	O
c	int
,	O
flag	int
,	O
nextc	int
)	O
register	O
char	O
*	O
dst	*(char)
;	O
int	O
c	int
,	O
nextc	int
;	O
register	O
int	O
flag	int
;	O
{	O
if	O
(	O
flag	int
&	O
VIS_NONE	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
*	O
dst	*(char)
=	O
'\0'	O
;	O
return	O
(	O
dst	*(char)
)	O
;	O
}	O
if	O
(	O
(	O
(	O
unsigned	O
int	O
)	O
c	int
<=	O
UCHAR_MAX	O
&&	O
isascii	(int)->(int)
(	O
c	int
)	O
&&	O
isgraph	(int)->(int)
(	O
c	int
)	O
)	O
||	O
(	O
(	O
flag	int
&	O
VIS_SP	int
)	O
==	O
0	int
&&	O
c	int
==	O
' '	O
)	O
||	O
(	O
(	O
flag	int
&	O
VIS_TAB	int
)	O
==	O
0	int
&&	O
c	int
==	O
'\t'	O
)	O
||	O
(	O
(	O
flag	int
&	O
VIS_NL	int
)	O
==	O
0	int
&&	O
c	int
==	O
'\n'	O
)	O
||	O
(	O
(	O
flag	int
&	O
VIS_SAFE	int
)	O
&&	O
(	O
c	int
==	O
'\b'	O
||	O
c	int
==	O
'\007'	O
||	O
c	int
==	O
'\r'	O
)	O
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
(	O
flag	int
&	O
VIS_NOSLASH	int
)	O
==	O
0	int
)	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
=	O
'\0'	O
;	O
return	O
(	O
dst	*(char)
)	O
;	O
}	O
if	O
(	O
flag	int
&	O
VIS_CSTYLE	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\n'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'n'	O
;	O
goto	O
done	O
;	O
case	O
'\r'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'r'	O
;	O
goto	O
done	O
;	O
case	O
'\b'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'b'	O
;	O
goto	O
done	O
;	O
case	O
'\a'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'a'	O
;	O
goto	O
done	O
;	O
case	O
'\v'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'v'	O
;	O
goto	O
done	O
;	O
case	O
'\t'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
't'	O
;	O
goto	O
done	O
;	O
case	O
'\f'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'f'	O
;	O
goto	O
done	O
;	O
case	O
' '	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
's'	O
;	O
goto	O
done	O
;	O
case	O
'\0'	O
:	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
'0'	O
;	O
if	O
(	O
isoctal	O
(	O
nextc	int
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'0'	O
;	O
*	O
dst	*(char)
++	O
=	O
'0'	O
;	O
}	O
goto	O
done	O
;	O
}	O
}	O
if	O
(	O
(	O
(	O
c	int
&	O
0177	int
)	O
==	O
' '	O
)	O
||	O
(	O
flag	int
&	O
VIS_OCTAL	int
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
(	O
u_char	char
)	O
c	int
>>	O
6	int
&	O
07	int
)	O
+	O
'0'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
(	O
u_char	char
)	O
c	int
>>	O
3	int
&	O
07	int
)	O
+	O
'0'	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
(	O
u_char	char
)	O
c	int
&	O
07	int
)	O
+	O
'0'	O
;	O
goto	O
done	O
;	O
}	O
if	O
(	O
(	O
flag	int
&	O
VIS_NOSLASH	int
)	O
==	O
0	int
)	O
*	O
dst	*(char)
++	O
=	O
'\\'	O
;	O
if	O
(	O
c	int
&	O
0200	int
)	O
{	O
c	int
&=	O
0177	int
;	O
*	O
dst	*(char)
++	O
=	O
'M'	O
;	O
}	O
if	O
(	O
iscntrl	(int)->(int)
(	O
c	int
)	O
)	O
{	O
*	O
dst	*(char)
++	O
=	O
'^'	O
;	O
if	O
(	O
c	int
==	O
0177	int
)	O
*	O
dst	*(char)
++	O
=	O
'?'	O
;	O
else	O
*	O
dst	*(char)
++	O
=	O
c	int
+	O
'@'	O
;	O
}	O
else	O
{	O
*	O
dst	*(char)
++	O
=	O
'-'	O
;	O
*	O
dst	*(char)
++	O
=	O
c	int
;	O
}	O
done	O
:	O
*	O
dst	*(char)
=	O
'\0'	O
;	O
return	O
(	O
dst	*(char)
)	O
;	O
}	O
int	O
strvis	(*(char),*(char),int)->(int)
(	O
dst	*(char)
,	O
src	*(char)
,	O
flag	int
)	O
register	O
char	O
*	O
dst	*(char)
;	O
register	O
const	O
char	O
*	O
src	*(char)
;	O
int	O
flag	int
;	O
{	O
register	O
char	O
c	int
;	O
char	O
*	O
start	*(char)
;	O
for	O
(	O
start	*(char)
=	O
dst	*(char)
;	O
(	O
c	int
=	O
*	O
src	*(char)
)	O
;	O
)	O
dst	*(char)
=	O
vis	(*(char),int,int,int)->(*(char))
(	O
dst	*(char)
,	O
c	int
,	O
flag	int
,	O
*	O
++	O
src	*(char)
)	O
;	O
*	O
dst	*(char)
=	O
'\0'	O
;	O
return	O
(	O
dst	*(char)
-	O
start	*(char)
)	O
;	O
}	O
int	O
strvisx	(*(char),*(char),long,int)->(int)
(	O
dst	*(char)
,	O
src	*(char)
,	O
len	long
,	O
flag	int
)	O
register	O
char	O
*	O
dst	*(char)
;	O
register	O
const	O
char	O
*	O
src	*(char)
;	O
register	O
size_t	long
len	long
;	O
int	O
flag	int
;	O
{	O
register	O
char	O
c	int
;	O
char	O
*	O
start	*(char)
;	O
for	O
(	O
start	*(char)
=	O
dst	*(char)
;	O
len	long
>	O
1	int
;	O
len	long
--	O
)	O
{	O
c	int
=	O
*	O
src	*(char)
;	O
dst	*(char)
=	O
vis	(*(char),int,int,int)->(*(char))
(	O
dst	*(char)
,	O
c	int
,	O
flag	int
,	O
*	O
++	O
src	*(char)
)	O
;	O
}	O
if	O
(	O
len	long
)	O
dst	*(char)
=	O
vis	(*(char),int,int,int)->(*(char))
(	O
dst	*(char)
,	O
*	O
src	*(char)
,	O
flag	int
,	O
'\0'	O
)	O
;	O
*	O
dst	*(char)
=	O
'\0'	O
;	O
return	O
(	O
dst	*(char)
-	O
start	*(char)
)	O
;	O
}	O
