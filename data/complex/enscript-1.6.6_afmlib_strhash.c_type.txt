struct	O
hash_list_st	struct(*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void))),*(char),int,*(void))
{	O
struct	O
hash_list_st	struct(*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void))),*(char),int,*(void))
*	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
char	O
*	O
key	*(char)
;	O
int	O
keylen	int
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
typedef	O
struct	O
hash_list_st	struct(*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void))),*(char),int,*(void))
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
;	O
typedef	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
HashTable	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
typedef	O
struct	O
stringhash_st	struct(*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void)))),int,*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void))))
{	O
HashTable	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
*	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
;	O
unsigned	O
int	O
next_idx	int
;	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
}	O
*	O
hash_t	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
;	O
static	O
int	O
count_hash	(*(char),int)->(int)
___P	O
(	O
(	O
const	O
char	O
*	O
key	*(char)
,	O
int	O
keylen	int
)	O
)	O
;	O
StringHashPtr	*(struct)
strhash_init	()->(*(struct))
(	O
)	O
{	O
StringHashPtr	*(struct)
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
;	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
=	O
(	O
StringHashPtr	*(struct)
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
)	O
return	O
NULL	O
;	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
=	O
(	O
HashTable	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
HASH_SIZE	int
,	O
sizeof	O
(	O
HashTable	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
)	O
{	O
free	(*(void))->(void)
(	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
tmp	*(struct(*(*(struct(*`,*`,int,*`))),int,*(struct(*(struct`),*(char),int,*(void)))))
;	O
}	O
void	O
strhash_free	(*(struct))->(void)
(	O
StringHashPtr	*(struct)
hash	*(struct)
)	O
{	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
,	O
*	O
list_next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
int	O
i	int
;	O
if	O
(	O
!	O
hash	*(struct)
)	O
return	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
HASH_SIZE	int
;	O
i	int
++	O
)	O
for	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
i	int
]	O
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list_next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
{	O
list_next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
free	(*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
;	O
}	O
free	(*(void))->(void)
(	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
)	O
;	O
free	(*(void))->(void)
(	O
hash	*(struct)
)	O
;	O
}	O
int	O
strhash_put	(*(struct),*(char),int,*(void),*(*(void)))->(int)
(	O
StringHashPtr	*(struct)
hash	*(struct)
,	O
char	O
*	O
key	*(char)
,	O
int	O
keylen	int
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
*	O
old_data	*(*(void))
)	O
{	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
NULL	O
;	O
int	O
pos	int
,	O
cmp_val	int
;	O
if	O
(	O
!	O
hash	*(struct)
||	O
!	O
key	*(char)
||	O
keylen	int
<=	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
old_data	*(*(void))
)	O
*	O
old_data	*(*(void))
=	O
NULL	O
;	O
pos	int
=	O
count_hash	(*(char),int)->(int)
(	O
key	*(char)
,	O
keylen	int
)	O
;	O
for	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
pos	int
]	O
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
,	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
if	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
==	O
keylen	int
)	O
{	O
cmp_val	int
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
key	*(char)
,	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
,	O
keylen	int
)	O
;	O
if	O
(	O
cmp_val	int
==	O
0	int
)	O
{	O
if	O
(	O
old_data	*(*(void))
)	O
*	O
old_data	*(*(void))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_val	int
<	O
0	int
)	O
{	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
>	O
keylen	int
)	O
break	O
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
(	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
)	O
)	O
;	O
if	O
(	O
!	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
return	O
0	int
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
keylen	int
)	O
;	O
if	O
(	O
!	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
;	O
return	O
0	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
,	O
key	*(char)
,	O
keylen	int
)	O
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
=	O
keylen	int
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
if	O
(	O
!	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
{	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
pos	int
]	O
;	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
pos	int
]	O
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
}	O
else	O
{	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
}	O
return	O
1	int
;	O
}	O
int	O
strhash_get	(*(struct),*(char),int,*(*(void)))->(int)
(	O
StringHashPtr	*(struct)
hash	*(struct)
,	O
const	O
char	O
*	O
key	*(char)
,	O
int	O
keylen	int
,	O
void	O
*	O
*	O
data	*(void)
)	O
{	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
int	O
pos	int
,	O
cmp_val	int
;	O
if	O
(	O
!	O
hash	*(struct)
||	O
!	O
key	*(char)
||	O
keylen	int
<=	O
0	int
||	O
!	O
data	*(void)
)	O
return	O
0	int
;	O
*	O
data	*(void)
=	O
NULL	O
;	O
pos	int
=	O
count_hash	(*(char),int)->(int)
(	O
key	*(char)
,	O
keylen	int
)	O
;	O
for	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
pos	int
]	O
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
if	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
==	O
keylen	int
)	O
{	O
cmp_val	int
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
key	*(char)
,	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
,	O
keylen	int
)	O
;	O
if	O
(	O
cmp_val	int
==	O
0	int
)	O
{	O
*	O
data	*(void)
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_val	int
<	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
>	O
keylen	int
)	O
break	O
;	O
return	O
0	int
;	O
}	O
int	O
strhash_delete	(*(struct),*(char),int,*(*(void)))->(int)
(	O
StringHashPtr	*(struct)
hash	*(struct)
,	O
const	O
char	O
*	O
key	*(char)
,	O
int	O
keylen	int
,	O
void	O
*	O
*	O
data	*(void)
)	O
{	O
HashList	struct(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))),*(char),int,*(void))
*	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
NULL	O
;	O
int	O
pos	int
,	O
cmp_val	int
;	O
if	O
(	O
!	O
hash	*(struct)
||	O
!	O
key	*(char)
||	O
keylen	int
<=	O
0	int
||	O
!	O
data	*(void)
)	O
return	O
0	int
;	O
*	O
data	*(void)
=	O
NULL	O
;	O
pos	int
=	O
count_hash	(*(char),int)->(int)
(	O
key	*(char)
,	O
keylen	int
)	O
;	O
for	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
pos	int
]	O
;	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
,	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
if	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
==	O
keylen	int
)	O
{	O
cmp_val	int
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
key	*(char)
,	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
,	O
keylen	int
)	O
;	O
if	O
(	O
cmp_val	int
==	O
0	int
)	O
{	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
==	O
NULL	O
)	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
pos	int
]	O
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
else	O
prev	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
*	O
data	*(void)
=	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
;	O
free	(*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
;	O
hash	*(struct)
->	O
next_idx	int
=	O
0	int
;	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
NULL	O
;	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
cmp_val	int
<	O
0	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
list	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
>	O
keylen	int
)	O
break	O
;	O
return	O
0	int
;	O
}	O
int	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
StringHashPtr	*(struct)
hash	*(struct)
,	O
char	O
*	O
*	O
key_return	*(*(char))
,	O
int	O
*	O
keylen_return	*(int)
,	O
void	O
*	O
*	O
data_return	*(*(void))
)	O
{	O
if	O
(	O
!	O
hash	*(struct)
||	O
!	O
key_return	*(*(char))
||	O
!	O
keylen_return	*(int)
||	O
!	O
data_return	*(*(void))
)	O
return	O
0	int
;	O
for	O
(	O
hash	*(struct)
->	O
next_idx	int
=	O
0	int
;	O
hash	*(struct)
->	O
next_idx	int
<	O
HASH_SIZE	int
;	O
hash	*(struct)
->	O
next_idx	int
++	O
)	O
{	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
hash	*(struct)
->	O
next_idx	int
]	O
;	O
if	O
(	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
{	O
*	O
key_return	*(*(char))
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
;	O
*	O
keylen_return	*(int)
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
;	O
*	O
data_return	*(*(void))
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
StringHashPtr	*(struct)
hash	*(struct)
,	O
char	O
*	O
*	O
key_return	*(*(char))
,	O
int	O
*	O
keylen_return	*(int)
,	O
void	O
*	O
*	O
data_return	*(*(void))
)	O
{	O
if	O
(	O
!	O
hash	*(struct)
||	O
!	O
key_return	*(*(char))
||	O
!	O
keylen_return	*(int)
||	O
!	O
data_return	*(*(void))
)	O
return	O
0	int
;	O
for	O
(	O
;	O
hash	*(struct)
->	O
next_idx	int
<	O
HASH_SIZE	int
;	O
hash	*(struct)
->	O
next_idx	int
++	O
)	O
{	O
if	O
(	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
==	O
NULL	O
)	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
hash_table	*(*(struct(*(struct(*`,*`,int,*`)),*(char),int,*(void))))
[	O
hash	*(struct)
->	O
next_idx	int
]	O
;	O
else	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
;	O
if	O
(	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
)	O
{	O
*	O
key_return	*(*(char))
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
key	*(char)
;	O
*	O
keylen_return	*(int)
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
keylen	int
;	O
*	O
data_return	*(*(void))
=	O
hash	*(struct)
->	O
next_item	*(struct(*(struct(*(struct`),*(char),int,*(void))),*(char),int,*(void)))
->	O
data	*(void)
;	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
count_hash	(*(char),int)->(int)
(	O
const	O
char	O
*	O
key	*(char)
,	O
int	O
keylen	int
)	O
{	O
unsigned	O
int	O
val	array(int)
=	O
0	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
keylen	int
;	O
i	int
++	O
)	O
val	array(int)
=	O
(	O
val	array(int)
<<	O
5	int
)	O
^	O
(	O
unsigned	O
char	O
)	O
key	*(char)
[	O
i	int
]	O
^	O
(	O
val	array(int)
>>	O
16	int
)	O
^	O
(	O
val	array(int)
>>	O
7	int
)	O
;	O
return	O
val	array(int)
%	O
HASH_SIZE	int
;	O
}	O
