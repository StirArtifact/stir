static	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
static	O
int	O
phase1_getc	()->(int)
(	O
)	O
{	O
int	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while reading \"%s\""	*(char)
)	O
,	O
real_file_name	*(char)
)	O
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
line_number	long
++	O
;	O
return	O
c	int
;	O
}	O
static	O
void	O
phase1_ungetc	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
c	int
!=	O
EOF	O
)	O
{	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
--	O
line_number	long
;	O
ungetc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
c	int
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
size_t	long
bufmax	long
;	O
static	O
size_t	long
buflen	long
;	O
static	O
inline	O
void	O
comment_start	()->(void)
(	O
)	O
{	O
buflen	long
=	O
0	int
;	O
}	O
static	O
inline	O
void	O
comment_add	(int)->(void)
(	O
int	O
c	int
)	O
{	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
static	O
inline	O
void	O
comment_line_end	()->(void)
(	O
)	O
{	O
while	O
(	O
buflen	long
>=	O
1	int
&&	O
(	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
' '	O
||	O
buffer	*(char)
[	O
buflen	long
-	O
1	int
]	O
==	O
'\t'	O
)	O
)	O
--	O
buflen	long
;	O
if	O
(	O
buflen	long
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
'\0'	O
;	O
savable_comment_add	(*(char))->(void)
(	O
buffer	*(char)
)	O
;	O
}	O
static	O
int	O
last_comment_line	int
;	O
static	O
int	O
last_non_comment_line	int
;	O
enum	O
token_type_ty	enum(int,int,int,int,int)
{	O
token_type_eof	int
,	O
token_type_uniq	int
,	O
token_type_symbol	int
,	O
token_type_string_literal	int
,	O
token_type_other	int
}	O
;	O
typedef	O
enum	O
token_type_ty	enum(int,int,int,int,int)
token_type_ty	enum(int,int,int,int,int)
;	O
typedef	O
struct	O
token_ty	struct
token_ty	struct
;	O
struct	O
token_ty	struct
{	O
token_type_ty	enum(int,int,int,int,int)
type	enum(int,int,int,int,int)
;	O
char	O
*	O
string	*(char)
;	O
int	O
line_number	long
;	O
}	O
;	O
static	O
token_ty	struct
phase2_pushback	array(struct(enum(int,int,int,int,int),*(char),int))
[	O
1	int
]	O
;	O
static	O
int	O
phase2_pushback_length	int
;	O
static	O
void	O
phase2_get	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
)	O
{	O
static	O
char	O
*	O
buffer	*(char)
;	O
static	O
int	O
bufmax	long
;	O
int	O
bufpos	int
;	O
int	O
c	int
;	O
if	O
(	O
phase2_pushback_length	int
)	O
{	O
*	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
=	O
phase2_pushback	array(struct(enum(int,int,int,int,int),*(char),int))
[	O
--	O
phase2_pushback_length	int
]	O
;	O
return	O
;	O
}	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
string	*(char)
=	O
NULL	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
line_number	long
=	O
line_number	long
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
EOF	O
:	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_eof	int
;	O
return	O
;	O
case	O
'"'	O
:	O
{	O
int	O
lineno	int
;	O
comment_start	()->(void)
(	O
)	O
;	O
lineno	int
=	O
line_number	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'"'	O
||	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
comment_line_end	()->(void)
(	O
)	O
;	O
comment_start	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
(	O
buflen	long
==	O
0	int
&&	O
(	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
)	O
)	O
)	O
comment_add	(int)->(void)
(	O
c	int
)	O
;	O
}	O
}	O
comment_line_end	()->(void)
(	O
)	O
;	O
last_comment_line	int
=	O
lineno	int
;	O
continue	O
;	O
}	O
case	O
'\n'	O
:	O
if	O
(	O
last_non_comment_line	int
>	O
last_comment_line	int
)	O
savable_comment_reset	()->(void)
(	O
)	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
case	O
'\r'	O
:	O
continue	O
;	O
}	O
last_non_comment_line	int
=	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
line_number	long
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'\''	O
:	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\''	O
)	O
{	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\''	O
)	O
{	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
]	O
=	O
0	int
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_string_literal	int
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
return	O
;	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
case	O
'*'	O
:	O
case	O
'/'	O
:	O
case	O
'~'	O
:	O
case	O
'|'	O
:	O
case	O
','	O
:	O
case	O
'<'	O
:	O
case	O
'>'	O
:	O
case	O
'='	O
:	O
case	O
'&'	O
:	O
case	O
'@'	O
:	O
case	O
'?'	O
:	O
case	O
'%'	O
:	O
case	O
'\\'	O
:	O
{	O
char	O
*	O
name	*(char)
;	O
int	O
c2	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c2	int
)	O
{	O
case	O
'+'	O
:	O
case	O
'-'	O
:	O
case	O
'*'	O
:	O
case	O
'/'	O
:	O
case	O
'~'	O
:	O
case	O
'|'	O
:	O
case	O
','	O
:	O
case	O
'<'	O
:	O
case	O
'>'	O
:	O
case	O
'='	O
:	O
case	O
'&'	O
:	O
case	O
'@'	O
:	O
case	O
'?'	O
:	O
case	O
'%'	O
:	O
name	*(char)
=	O
XNMALLOC	O
(	O
3	int
,	O
char	O
)	O
;	O
name	*(char)
[	O
0	int
]	O
=	O
c	int
;	O
name	*(char)
[	O
1	int
]	O
=	O
c2	int
;	O
name	*(char)
[	O
2	int
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
string	*(char)
=	O
name	*(char)
;	O
return	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c2	int
)	O
;	O
break	O
;	O
}	O
name	*(char)
=	O
XNMALLOC	O
(	O
2	int
,	O
char	O
)	O
;	O
name	*(char)
[	O
0	int
]	O
=	O
c	int
;	O
name	*(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_symbol	int
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
string	*(char)
=	O
name	*(char)
;	O
return	O
;	O
}	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
bufpos	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
continue	O
;	O
case	O
':'	O
:	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
++	O
]	O
=	O
c	int
;	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
case	O
'G'	O
:	O
case	O
'H'	O
:	O
case	O
'I'	O
:	O
case	O
'J'	O
:	O
case	O
'K'	O
:	O
case	O
'L'	O
:	O
case	O
'M'	O
:	O
case	O
'N'	O
:	O
case	O
'O'	O
:	O
case	O
'P'	O
:	O
case	O
'Q'	O
:	O
case	O
'R'	O
:	O
case	O
'S'	O
:	O
case	O
'T'	O
:	O
case	O
'U'	O
:	O
case	O
'V'	O
:	O
case	O
'W'	O
:	O
case	O
'X'	O
:	O
case	O
'Y'	O
:	O
case	O
'Z'	O
:	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
case	O
'g'	O
:	O
case	O
'h'	O
:	O
case	O
'i'	O
:	O
case	O
'j'	O
:	O
case	O
'k'	O
:	O
case	O
'l'	O
:	O
case	O
'm'	O
:	O
case	O
'n'	O
:	O
case	O
'o'	O
:	O
case	O
'p'	O
:	O
case	O
'q'	O
:	O
case	O
'r'	O
:	O
case	O
's'	O
:	O
case	O
't'	O
:	O
case	O
'u'	O
:	O
case	O
'v'	O
:	O
case	O
'w'	O
:	O
case	O
'x'	O
:	O
case	O
'y'	O
:	O
case	O
'z'	O
:	O
continue	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
phase1_ungetc	(int)->(void)
(	O
c	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
bufpos	int
>=	O
bufmax	long
)	O
{	O
bufmax	long
=	O
2	int
*	O
bufmax	long
+	O
10	int
;	O
buffer	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufmax	long
)	O
;	O
}	O
buffer	*(char)
[	O
bufpos	int
]	O
=	O
'\0'	O
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buffer	*(char)
)	O
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_symbol	int
;	O
return	O
;	O
case	O
'#'	O
:	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_uniq	int
;	O
return	O
;	O
case	O
'$'	O
:	O
c	int
=	O
phase1_getc	()->(int)
(	O
)	O
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_other	int
;	O
return	O
;	O
default	O
:	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_other	int
;	O
return	O
;	O
}	O
}	O
}	O
static	O
void	O
phase2_unget	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
)	O
{	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
!=	O
token_type_eof	int
)	O
{	O
if	O
(	O
phase2_pushback_length	int
==	O
SIZEOF	O
(	O
phase2_pushback	array(struct(enum(int,int,int,int,int),*(char),int))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
phase2_pushback	array(struct(enum(int,int,int,int,int),*(char),int))
[	O
phase2_pushback_length	int
++	O
]	O
=	O
*	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
;	O
}	O
}	O
static	O
void	O
x_smalltalk_lex	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
token_ty	struct
*	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
)	O
{	O
phase2_get	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
)	O
;	O
if	O
(	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
==	O
token_type_uniq	int
)	O
{	O
token_ty	struct
token2	struct(enum(int,int,int,int,int),*(char),int)
;	O
phase2_get	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int),*(char),int)
)	O
;	O
if	O
(	O
token2	struct(enum(int,int,int,int,int),*(char),int)
.	O
type	enum(int,int,int,int,int)
==	O
token_type_symbol	int
||	O
token2	struct(enum(int,int,int,int,int),*(char),int)
.	O
type	enum(int,int,int,int,int)
==	O
token_type_string_literal	int
)	O
{	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
type	enum(int,int,int,int,int)
=	O
token_type_string_literal	int
;	O
tp	*(struct(enum(int,int,int,int,int),*(char),int))
->	O
string	*(char)
=	O
token2	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
;	O
}	O
else	O
phase2_unget	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
&	O
token2	struct(enum(int,int,int,int,int),*(char),int)
)	O
;	O
}	O
}	O
void	O
extract_smalltalk	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),*(struct(*(*(struct`)),long,long,bool,*(char))))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
real_file_name	*(char)
=	O
real_filename	*(char)
;	O
logical_file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
logical_filename	*(char)
)	O
;	O
line_number	long
=	O
1	int
;	O
last_comment_line	int
=	O
-	O
1	int
;	O
last_non_comment_line	int
=	O
-	O
1	int
;	O
{	O
int	O
state	*(int)
;	O
message_ty	struct
*	O
plural_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
NULL	O
;	O
state	*(int)
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
token_ty	struct
token	struct(enum(int,int,int,int,int),*(char),int)
;	O
x_smalltalk_lex	(*(struct(enum(int,int,int,int,int),*(char),int)))->(void)
(	O
&	O
token	struct(enum(int,int,int,int,int),*(char),int)
)	O
;	O
switch	O
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
type	enum(int,int,int,int,int)
)	O
{	O
case	O
token_type_symbol	int
:	O
state	*(int)
=	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
"NLS"	*(char)
)	O
==	O
0	int
?	O
1	int
:	O
strcmp	(*(char),*(char))->(int)
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
"?"	*(char)
)	O
==	O
0	int
&&	O
state	*(int)
==	O
1	int
?	O
2	int
:	O
strcmp	(*(char),*(char))->(int)
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
"at:"	*(char)
)	O
==	O
0	int
&&	O
state	*(int)
==	O
1	int
?	O
3	int
:	O
strcmp	(*(char),*(char))->(int)
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
"plural:"	*(char)
)	O
==	O
0	int
&&	O
state	*(int)
==	O
4	int
?	O
5	int
:	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
)	O
;	O
break	O
;	O
case	O
token_type_string_literal	int
:	O
if	O
(	O
state	*(int)
==	O
2	int
)	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
line_number	long
;	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
state	*(int)
=	O
0	int
;	O
break	O
;	O
}	O
if	O
(	O
state	*(int)
==	O
3	int
)	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
line_number	long
;	O
plural_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
NULL	O
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
state	*(int)
=	O
4	int
;	O
break	O
;	O
}	O
if	O
(	O
state	*(int)
==	O
5	int
)	O
{	O
lex_pos_ty	struct
pos	struct(*(char),long)
;	O
pos	struct(*(char),long)
.	O
file_name	*(char)
=	O
logical_file_name	*(char)
;	O
pos	struct(*(char),long)
.	O
line_number	long
=	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
line_number	long
;	O
if	O
(	O
plural_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
!=	O
NULL	O
)	O
remember_a_message_plural	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(struct(int,struct(*(*`),long,long))),bool)->(void)
(	O
plural_mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
,	O
false	int
,	O
null_context	struct(int,int,int,int,int,int)
,	O
&	O
pos	struct(*(char),long)
,	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
,	O
false	int
)	O
;	O
state	*(int)
=	O
0	int
;	O
break	O
;	O
}	O
state	*(int)
=	O
0	int
;	O
free	(*(void))->(void)
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
string	*(char)
)	O
;	O
break	O
;	O
case	O
token_type_uniq	int
:	O
case	O
token_type_other	int
:	O
state	*(int)
=	O
0	int
;	O
break	O
;	O
case	O
token_type_eof	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
token	struct(enum(int,int,int,int,int),*(char),int)
.	O
type	enum(int,int,int,int,int)
==	O
token_type_eof	int
)	O
break	O
;	O
}	O
}	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
real_file_name	*(char)
=	O
NULL	O
;	O
logical_file_name	*(char)
=	O
NULL	O
;	O
line_number	long
=	O
0	int
;	O
}	O
