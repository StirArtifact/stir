typedef	O
struct	O
{	O
gzFile	*(struct)
handler	*(struct(int,*(char),long))
;	O
EDMAT_BUFFER	struct(long,long,*(void))
buffer	struct(long,long,*(void))
;	O
}	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
;	O
ESint32	int
EDMAPROC	O
GZFILEopenZZrS32	(int,*(char),*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
name	*(char)
,	O
EPChar	*(char)
mode	*(char)
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
=	O
gzopen	(*(char),*(char))->(*(struct(int,*(char),long)))
(	O
name	*(char)
,	O
mode	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Can't open file %s:"	*(char)
,	O
name	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEcloserS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
gzclose	(*(struct))->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEreadsAsS32rS32	(int,*(struct(long,long,*(void))),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(void)
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
buf	*(void)
)	O
if	O
(	O
buf	*(void)
->	O
Size	long
<	O
*	O
len	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Not enough allocated space to read data."	*(char)
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Using Buffer size: %ld"	*(char)
,	O
buf	*(void)
->	O
Size	long
)	O
;	O
*	O
len	int
=	O
buf	*(void)
->	O
Size	long
;	O
}	O
*	O
len	int
=	O
gzread	(*(struct),*(void),int)->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
buf	*(void)
->	O
dat	*(void)
,	O
*	O
len	int
)	O
;	O
return	O
*	O
len	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEwriteAsS32rS32	(int,struct(long,long,*(void)),*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EDMAT_BUFFER	struct(long,long,*(void))
buf	*(void)
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
*	O
len	int
=	O
gzwrite	(*(struct),*(void),int)->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
buf	*(void)
.	O
dat	*(void)
,	O
*	O
len	int
)	O
;	O
return	O
*	O
len	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEputsZS32rS32	(int,*(char),int)->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
s	*(char)
,	O
ESint32	int
len	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
EPChar	*(char)
s1	*(char)
;	O
ESint32	int
l	long
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
s1	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
l	long
=	O
len	int
;	O
if	O
(	O
l	long
>	O
strlen	(*(char))->(int)
(	O
s1	*(char)
)	O
)	O
l	long
=	O
strlen	(*(char))->(int)
(	O
s1	*(char)
)	O
;	O
else	O
s1	*(char)
[	O
l	long
]	O
=	O
0	int
;	O
gzputs	(*(struct),*(char))->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
s1	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
s1	*(char)
)	O
;	O
return	O
l	long
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEputcCS32rS32	(int,char)->(int)
(	O
OBJID	int
IdObj	int
,	O
EChar	char
c	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
gzputc	(*(struct),int)->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
c	int
)	O
;	O
}	O
EPChar	*(char)
EDMAPROC	O
GZFILEgetssZsS32rS32	(int,*(char),*(long))->(*(char))
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
s	*(char)
,	O
EPSint32	*(long)
len	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
gzgets	(*(struct),*(char),int)->(*(char))
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
s	*(char)
,	O
*	O
len	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEgetcsCrS32	(int,*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
c	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
int	O
r	int
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
r	int
=	O
gzgetc	(*(struct))->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
)	O
;	O
*	O
c	int
=	O
(	O
char	O
)	O
r	int
;	O
return	O
r	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEflushrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
gzflush	(*(struct),int)->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
Z_SYNC_FLUSH	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEseekS32ZrS32	(int,int,*(char))->(int)
(	O
OBJID	int
IdObj	int
,	O
ESint32	int
off	int
,	O
EPChar	*(char)
where	*(char)
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
int	O
w	int
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),int)->(int)
(	O
where	*(char)
,	O
"SEEK_SET"	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
w	int
=	O
SEEK_SET	int
;	O
else	O
{	O
if	O
(	O
strncmp	(*(char),*(char),int)->(int)
(	O
where	*(char)
,	O
"SEEK_END"	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"SEEK_END nor supported by zlib"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
w	int
=	O
SEEK_CUR	int
;	O
}	O
return	O
gzseek	(*(struct(int,*(char),long)),long,int)->(long)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
,	O
off	int
,	O
w	int
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEtellsS32rS32	(int,*(long))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPSint32	*(long)
off	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
*	O
off	int
=	O
gztell	(*(struct(int,*(char),long)))->(long)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
)	O
;	O
return	O
*	O
off	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILErewindrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
gztell	(*(struct(int,*(char),long)))->(long)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEeofrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
return	O
gzeof	(*(struct))->(int)
(	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
->	O
handler	*(struct(int,*(char),long))
)	O
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILEerrorrS32	(int)->(int)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Method still not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILELoadZsArS32	(int,*(char),*(struct(long,long,*(void))))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
Name	*(char)
,	O
EDMAT_BUFFER	struct(long,long,*(void))
*	O
buf	*(void)
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Method still not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	int
EDMAPROC	O
GZFILESaveZArS32	(int,*(char),struct(long,long,*(void)))->(int)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
name	*(char)
,	O
EDMAT_BUFFER	struct(long,long,*(void))
buf	*(void)
)	O
{	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
;	O
m	*(struct(*(struct(int,*(char),long)),struct(long,long,*(void))))
=	O
(	O
DtGZFILE	struct(*(struct(int,*(char),long)),struct(long,long,*(void)))
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Method still not implemented"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
