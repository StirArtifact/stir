static	O
char	O
*	O
get_value	(*(char),*(int),int)->(*(char))
(	O
char	O
*	O
output_line	*(char)
,	O
int	O
*	O
value_len	*(int)
,	O
int	O
do_terminate	int
)	O
{	O
char	O
*	O
ret	*(char)
;	O
int	O
len	int
;	O
if	O
(	O
!	O
output_line	*(char)
)	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
if	O
(	O
!	O
(	O
ret	*(char)
=	O
swheaderline_get_keyword	(*(char))->(*(char))
(	O
output_line	*(char)
)	O
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
swheaderline_get_type	(*(char))->(char)
(	O
output_line	*(char)
)	O
==	O
SWPARSE_MD_TYPE_OBJ	char
)	O
{	O
if	O
(	O
value_len	*(int)
)	O
*	O
value_len	*(int)
=	O
0	int
;	O
return	O
ret	*(char)
+	O
strlen	(*(char))->(long)
(	O
ret	*(char)
)	O
;	O
}	O
len	int
=	O
swheaderline_get_value_length	(*(char))->(int)
(	O
output_line	*(char)
)	O
;	O
if	O
(	O
value_len	*(int)
)	O
*	O
value_len	*(int)
=	O
len	int
;	O
if	O
(	O
do_terminate	int
)	O
*	O
(	O
ret	*(char)
+	O
strlen	(*(char))->(long)
(	O
ret	*(char)
)	O
+	O
1	int
+	O
len	int
)	O
=	O
'\0'	O
;	O
return	O
ret	*(char)
+	O
strlen	(*(char))->(long)
(	O
ret	*(char)
)	O
+	O
1	int
;	O
}	O
char	O
*	O
swheaderline_get_type_pointer	(*(char))->(*(char))
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
char	O
*	O
ret	*(char)
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
output_line	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
*	O
(	O
output_line	*(char)
+	O
SWPARSE_MKUP_LEN_WIDTH	int
)	O
==	O
' '	O
)	O
{	O
ret	*(char)
=	O
output_line	*(char)
+	O
SWPARSE_MKUP_LEN_WIDTH	int
+	O
1	int
;	O
}	O
else	O
{	O
char	O
*	O
t	*(char)
;	O
t	*(char)
=	O
output_line	*(char)
;	O
while	O
(	O
isdigit	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
t	*(char)
)	O
)	O
)	O
{	O
t	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
t	*(char)
==	O
'\0'	O
||	O
*	O
t	*(char)
!=	O
' '	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error in swheaderline_get_type_pointer\n"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
t	*(char)
++	O
;	O
if	O
(	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_ATT	char
||	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_OBJ	char
||	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_EXT	char
||	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_FILEREF	char
||	O
0	int
)	O
{	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error in swheaderline_get_keyword loc=2\n"	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
ret	*(char)
=	O
t	*(char)
;	O
}	O
return	O
ret	*(char)
;	O
}	O
else	O
{	O
return	O
output_line	*(char)
;	O
}	O
}	O
int	O
swheaderline_write_to_buffer	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
char	O
*	O
line	*(char)
)	O
{	O
char	O
*	O
keyword	*(char)
;	O
char	O
*	O
value	int
;	O
int	O
type	enum(int,int,int,int)
;	O
int	O
level	int
;	O
if	O
(	O
!	O
line	*(char)
)	O
return	O
-	O
1	int
;	O
keyword	*(char)
=	O
swheaderline_get_keyword	(*(char))->(*(char))
(	O
line	*(char)
)	O
;	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
line	*(char)
,	O
NULL	O
)	O
;	O
type	enum(int,int,int,int)
=	O
(	O
int	O
)	O
swheaderline_get_type	(*(char))->(char)
(	O
line	*(char)
)	O
;	O
level	int
=	O
swheaderline_get_level	(*(char))->(int)
(	O
line	*(char)
)	O
;	O
if	O
(	O
keyword	*(char)
&&	O
strlen	(*(char))->(long)
(	O
keyword	*(char)
)	O
)	O
return	O
swdef_write_attribute_to_buffer	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char),int,int)->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
keyword	*(char)
,	O
value	int
,	O
level	int
,	O
(	O
int	O
)	O
type	enum(int,int,int,int)
)	O
;	O
else	O
return	O
0	int
;	O
}	O
int	O
swheaderline_write	(*(char),int)->(int)
(	O
char	O
*	O
line	*(char)
,	O
int	O
uxfio_fd	int
)	O
{	O
int	O
len	int
;	O
char	O
*	O
keyword	*(char)
=	O
swheaderline_get_keyword	(*(char))->(*(char))
(	O
line	*(char)
)	O
;	O
char	O
*	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
line	*(char)
,	O
&	O
len	int
)	O
;	O
int	O
type	enum(int,int,int,int)
=	O
(	O
int	O
)	O
swheaderline_get_type	(*(char))->(char)
(	O
line	*(char)
)	O
;	O
int	O
level	int
=	O
swheaderline_get_level	(*(char))->(int)
(	O
line	*(char)
)	O
;	O
len	int
=	O
-	O
1	int
;	O
if	O
(	O
keyword	*(char)
)	O
return	O
swdef_write_attribute	(*(char),*(char),int,int,int,int)->(int)
(	O
keyword	*(char)
,	O
value	int
,	O
level	int
,	O
len	int
,	O
(	O
int	O
)	O
type	enum(int,int,int,int)
,	O
uxfio_fd	int
)	O
;	O
else	O
return	O
0	int
;	O
}	O
int	O
swheaderline_get_level	(*(char))->(int)
(	O
char	O
*	O
outputline	*(char)
)	O
{	O
char	O
*	O
typep	*(char)
;	O
typep	*(char)
=	O
swheaderline_get_type_pointer	(*(char))->(*(char))
(	O
outputline	*(char)
)	O
;	O
if	O
(	O
!	O
typep	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error in swheaderline_get_level\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
typep	*(char)
+=	O
2	int
;	O
return	O
(	O
int	O
)	O
(	O
(	O
*	O
typep	*(char)
)	O
-	O
0x30	int
)	O
;	O
}	O
char	O
swheaderline_get_type	(*(char))->(char)
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
swheaderline_get_type_pointer	(*(char))->(*(char))
(	O
output_line	*(char)
)	O
;	O
if	O
(	O
p	*(char)
)	O
return	O
*	O
p	*(char)
;	O
else	O
return	O
(	O
char	O
)	O
(	O
0	int
)	O
;	O
}	O
char	O
*	O
swheaderline_get_keyword	(*(char))->(*(char))
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
char	O
*	O
t	*(char)
;	O
char	O
*	O
ret	*(char)
;	O
if	O
(	O
!	O
output_line	*(char)
)	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
output_line	*(char)
)	O
)	O
)	O
{	O
t	*(char)
=	O
output_line	*(char)
+	O
SWPARSE_MKUP_LEN_WIDTH	int
+	O
1	int
;	O
}	O
else	O
{	O
t	*(char)
=	O
output_line	*(char)
;	O
}	O
if	O
(	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_ATT	char
||	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_OBJ	char
||	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_EXT	char
||	O
t	*(char)
[	O
0	int
]	O
==	O
SWPARSE_MD_TYPE_FILEREF	char
||	O
0	int
)	O
{	O
;	O
}	O
else	O
{	O
t	*(char)
=	O
swheaderline_get_type_pointer	(*(char))->(*(char))
(	O
output_line	*(char)
)	O
;	O
if	O
(	O
t	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
t	*(char)
+=	O
3	int
;	O
while	O
(	O
*	O
t	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
t	*(char)
)	O
)	O
)	O
t	*(char)
++	O
;	O
ret	*(char)
=	O
t	*(char)
;	O
while	O
(	O
*	O
t	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
t	*(char)
)	O
)	O
)	O
t	*(char)
++	O
;	O
*	O
t	*(char)
=	O
'\0'	O
;	O
return	O
ret	*(char)
;	O
}	O
int	O
swheaderline_get_value_length	(*(char))->(int)
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
int	O
i	int
;	O
char	O
*	O
t	*(char)
,	O
*	O
p	*(char)
;	O
int	O
n	long
;	O
int	O
mytens	array(int)
[	O
6	int
]	O
=	O
{	O
0	int
,	O
1	int
,	O
10	int
,	O
100	int
,	O
1000	int
,	O
10000	int
}	O
;	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
output_line	*(char)
)	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"bad parser output, value length not found\n"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
n	long
=	O
0	int
;	O
t	*(char)
=	O
output_line	*(char)
;	O
p	*(char)
=	O
output_line	*(char)
;	O
while	O
(	O
*	O
t	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
(	O
*	O
t	*(char)
)	O
)	O
)	O
t	*(char)
++	O
;	O
for	O
(	O
i	int
=	O
(	O
int	O
)	O
(	O
t	*(char)
-	O
output_line	*(char)
)	O
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
!	O
isdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error in swheaderline_get_value_length [%s]\n"	*(char)
,	O
output_line	*(char)
)	O
;	O
}	O
n	long
+=	O
(	O
(	O
int	O
)	O
(	O
(	O
int	O
)	O
(	O
*	O
p	*(char)
)	O
-	O
48	int
)	O
)	O
*	O
mytens	array(int)
[	O
i	int
]	O
;	O
p	*(char)
++	O
;	O
}	O
return	O
n	long
;	O
}	O
char	O
*	O
swheaderline_strdup	(*(char))->(*(char))
(	O
char	O
*	O
outputline	*(char)
)	O
{	O
int	O
value_length	int
=	O
0	int
;	O
char	O
*	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
outputline	*(char)
,	O
&	O
value_length	int
)	O
;	O
int	O
len	int
=	O
(	O
int	O
)	O
(	O
value	int
-	O
outputline	*(char)
)	O
+	O
value_length	int
+	O
1	int
;	O
char	O
*	O
dup	(int)->(int)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
*	O
(	O
dup	(int)->(int)
+	O
len	int
)	O
=	O
'\0'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dup	(int)->(int)
,	O
outputline	*(char)
,	O
len	int
+	O
1	int
)	O
;	O
return	O
dup	(int)->(int)
;	O
}	O
char	O
*	O
swheaderline_get_value_pointer	(*(char),*(int))->(*(char))
(	O
char	O
*	O
output_line	*(char)
,	O
int	O
*	O
value_len	*(int)
)	O
{	O
return	O
get_value	(*(char),*(int),int)->(*(char))
(	O
output_line	*(char)
,	O
value_len	*(int)
,	O
0	int
)	O
;	O
}	O
char	O
*	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
char	O
*	O
output_line	*(char)
,	O
int	O
*	O
value_len	*(int)
)	O
{	O
return	O
get_value	(*(char),*(int),int)->(*(char))
(	O
output_line	*(char)
,	O
value_len	*(int)
,	O
1	int
)	O
;	O
}	O
void	O
swheaderline_set_flag1	(*(char))->(void)
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
*	O
(	O
output_line	*(char)
+	O
1	int
)	O
=	O
'0'	O
;	O
}	O
void	O
swheaderline_clear_flag1	(*(char))->(void)
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
*	O
(	O
output_line	*(char)
+	O
1	int
)	O
=	O
' '	O
;	O
}	O
int	O
swheaderline_get_flag1	(*(char))->(int)
(	O
char	O
*	O
output_line	*(char)
)	O
{	O
return	O
*	O
(	O
output_line	*(char)
+	O
1	int
)	O
==	O
' '	O
?	O
0	int
:	O
1	int
;	O
}	O
