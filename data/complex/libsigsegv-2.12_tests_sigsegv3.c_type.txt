jmp_buf	array(struct(array(long),int,struct(array(long))))
mainloop	array(struct(array(long),int,struct(array(long))))
;	O
sigset_t	struct(array(long))
mainsigset	struct(array(long))
;	O
volatile	O
int	O
pass	int
=	O
0	int
;	O
uintptr_t	long
page	long
;	O
volatile	O
int	O
handler_called	int
=	O
0	int
;	O
static	O
void	O
handler_continuation	(*(void),*(void),*(void))->(void)
(	O
void	O
*	O
arg1	*(void)
,	O
void	O
*	O
arg2	*(void)
,	O
void	O
*	O
arg3	*(void)
)	O
{	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
mainloop	array(struct(array(long),int,struct(array(long))))
,	O
pass	int
)	O
;	O
}	O
int	O
handler	*((*(void),int)->(int))
(	O
void	O
*	O
fault_address	*(void)
,	O
int	O
serious	int
)	O
{	O
handler_called	int
++	O
;	O
if	O
(	O
handler_called	int
>	O
10	int
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
fault_address	*(void)
!=	O
(	O
void	O
*	O
)	O
(	O
(	O
page	long
+	O
0x678	int
+	O
8	int
*	O
pass	int
)	O
&	O
~	O
SIGSEGV_FAULT_ADDRESS_ROUNDOFF_BITS	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
pass	int
++	O
;	O
printf	(*(char))->(int)
(	O
"Fault %d caught.\n"	*(char)
,	O
pass	int
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
mainsigset	struct(array(long))
,	O
NULL	O
)	O
;	O
return	O
sigsegv_leave_handler	(*((*(void),*(void),*(void))->(void)),*(void),*(void),*(void))->(int)
(	O
handler_continuation	(*(void),*(void),*(void))->(void)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
void	O
crasher	(long)->(void)
(	O
uintptr_t	long
p	long
)	O
{	O
*	O
(	O
volatile	O
int	O
*	O
)	O
(	O
p	long
+	O
0x678	int
+	O
8	int
*	O
pass	int
)	O
=	O
42	int
;	O
}	O
int	O
main	()->(int)
(	O
)	O
{	O
int	O
prot_unwritable	int
;	O
void	O
*	O
p	long
;	O
sigset_t	struct(array(long))
emptyset	struct(array(long))
;	O
prot_unwritable	int
=	O
PROT_READ	int
;	O
p	long
=	O
mmap_zeromap	(*(void),long)->(*(void))
(	O
(	O
void	O
*	O
)	O
0x12340000	int
,	O
0x4000	int
)	O
;	O
if	O
(	O
p	long
==	O
(	O
void	O
*	O
)	O
(	O
-	O
1	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"mmap_zeromap failed.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
page	long
=	O
(	O
uintptr_t	long
)	O
p	long
;	O
if	O
(	O
mprotect	(*(void),long,int)->(int)
(	O
(	O
void	O
*	O
)	O
page	long
,	O
0x4000	int
,	O
prot_unwritable	int
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"mprotect failed.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
sigsegv_install_handler	(*((*(void),int)->(int)))->(int)
(	O
&	O
handler	*((*(void),int)->(int))
)	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
emptyset	struct(array(long))
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
emptyset	struct(array(long))
,	O
&	O
mainsigset	struct(array(long))
)	O
;	O
switch	O
(	O
setjmp	(array(struct(array(long),int,struct(array(long)))))->(int)
(	O
mainloop	array(struct(array(long),int,struct(array(long))))
)	O
)	O
{	O
case	O
0	int
:	O
case	O
1	int
:	O
printf	(*(char))->(int)
(	O
"Doing SIGSEGV pass %d.\n"	*(char)
,	O
pass	int
+	O
1	int
)	O
;	O
crasher	(long)->(void)
(	O
page	long
)	O
;	O
printf	(*(char))->(int)
(	O
"no SIGSEGV?!\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
2	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"Test passed.\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
