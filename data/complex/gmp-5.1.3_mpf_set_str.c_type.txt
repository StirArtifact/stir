static	O
mp_size_t	long
mpn_pow_1_highpart	(*(long),*(long),long,long,long,*(long))->(long)
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_size_t	long
*	O
ignp	*(long)
,	O
mp_limb_t	long
base	int
,	O
mp_exp_t	long
exp	int
,	O
mp_size_t	long
prec	int
,	O
mp_ptr	*(long)
tp	*(long)
)	O
{	O
mp_size_t	long
ign	long
;	O
mp_size_t	long
off	long
;	O
mp_ptr	*(long)
passed_rp	*(long)
=	O
rp	*(long)
;	O
mp_size_t	long
rn	long
;	O
int	O
cnt	int
;	O
int	O
i	long
;	O
rp	*(long)
[	O
0	int
]	O
=	O
base	int
;	O
rn	long
=	O
1	int
;	O
off	long
=	O
0	int
;	O
ign	long
=	O
0	int
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
exp	int
)	O
;	O
for	O
(	O
i	long
=	O
GMP_LIMB_BITS	int
-	O
cnt	int
-	O
2	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
{	O
mpn_sqr	O
(	O
tp	*(long)
,	O
rp	*(long)
+	O
off	long
,	O
rn	long
)	O
;	O
rn	long
=	O
2	int
*	O
rn	long
;	O
rn	long
-=	O
tp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
ign	long
<<=	O
1	int
;	O
off	long
=	O
0	int
;	O
if	O
(	O
rn	long
>	O
prec	int
)	O
{	O
ign	long
+=	O
rn	long
-	O
prec	int
;	O
off	long
=	O
rn	long
-	O
prec	int
;	O
rn	long
=	O
prec	int
;	O
}	O
MP_PTR_SWAP	O
(	O
rp	*(long)
,	O
tp	*(long)
)	O
;	O
if	O
(	O
(	O
(	O
exp	int
>>	O
i	long
)	O
&	O
1	int
)	O
!=	O
0	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
cy	long
=	O
mpn_mul_1	O
(	O
rp	*(long)
,	O
rp	*(long)
+	O
off	long
,	O
rn	long
,	O
base	int
)	O
;	O
rp	*(long)
[	O
rn	long
]	O
=	O
cy	long
;	O
rn	long
+=	O
cy	long
!=	O
0	int
;	O
off	long
=	O
0	int
;	O
}	O
}	O
if	O
(	O
rn	long
>	O
prec	int
)	O
{	O
ign	long
+=	O
rn	long
-	O
prec	int
;	O
rp	*(long)
+=	O
rn	long
-	O
prec	int
;	O
rn	long
=	O
prec	int
;	O
}	O
MPN_COPY_INCR	O
(	O
passed_rp	*(long)
,	O
rp	*(long)
+	O
off	long
,	O
rn	long
)	O
;	O
*	O
ignp	*(long)
=	O
ign	long
;	O
return	O
rn	long
;	O
}	O
int	O
mpf_set_str	O
(	O
mpf_ptr	*(struct(int,int,long,*(long)))
x	*(struct(int,int,long,*(long)))
,	O
const	O
char	O
*	O
str	*(char)
,	O
int	O
base	int
)	O
{	O
size_t	long
str_size	long
;	O
char	O
*	O
s	array(char)
,	O
*	O
begs	*(char)
;	O
size_t	long
i	long
,	O
j	long
;	O
int	O
c	int
;	O
int	O
negative	int
;	O
char	O
*	O
dotpos	*(char)
=	O
0	int
;	O
const	O
char	O
*	O
expptr	*(char)
;	O
int	O
exp_base	int
;	O
const	O
char	O
*	O
point	*(char)
=	O
GMP_DECIMAL_POINT	O
;	O
size_t	long
pointlen	long
=	O
strlen	(*(char))->(long)
(	O
point	*(char)
)	O
;	O
const	O
unsigned	O
char	O
*	O
digit_value	*(char)
;	O
TMP_DECL	O
;	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
str	*(char)
;	O
while	O
(	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
++	O
str	*(char)
;	O
negative	int
=	O
0	int
;	O
if	O
(	O
c	int
==	O
'-'	O
)	O
{	O
negative	int
=	O
1	int
;	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
++	O
str	*(char)
;	O
}	O
if	O
(	O
base	int
==	O
0	int
)	O
base	int
=	O
10	int
;	O
exp_base	int
=	O
base	int
;	O
if	O
(	O
base	int
<	O
0	int
)	O
{	O
exp_base	int
=	O
10	int
;	O
base	int
=	O
-	O
base	int
;	O
}	O
digit_value	*(char)
=	O
digit_value_tab	O
;	O
if	O
(	O
base	int
>	O
36	int
)	O
{	O
digit_value	*(char)
+=	O
224	int
;	O
if	O
(	O
base	int
>	O
62	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
digit_value	*(char)
[	O
c	int
]	O
>=	O
(	O
base	int
==	O
0	int
?	O
10	int
:	O
base	int
)	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
pointlen	long
;	O
i	long
++	O
)	O
if	O
(	O
str	*(char)
[	O
i	long
]	O
!=	O
point	*(char)
[	O
i	long
]	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
digit_value	*(char)
[	O
(	O
unsigned	O
char	O
)	O
str	*(char)
[	O
pointlen	long
]	O
]	O
>=	O
(	O
base	int
==	O
0	int
?	O
10	int
:	O
base	int
)	O
)	O
return	O
-	O
1	int
;	O
}	O
expptr	*(char)
=	O
NULL	O
;	O
str_size	long
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
str_size	long
-	O
1	int
;	O
i	long
>	O
0	int
;	O
i	long
--	O
)	O
{	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
str	*(char)
[	O
i	long
]	O
;	O
if	O
(	O
c	int
==	O
'@'	O
||	O
(	O
base	int
<=	O
10	int
&&	O
(	O
c	int
==	O
'e'	O
||	O
c	int
==	O
'E'	O
)	O
)	O
)	O
{	O
expptr	*(char)
=	O
str	*(char)
+	O
i	long
+	O
1	int
;	O
str_size	long
=	O
i	long
;	O
break	O
;	O
}	O
}	O
TMP_MARK	O
;	O
s	array(char)
=	O
begs	*(char)
=	O
(	O
char	O
*	O
)	O
TMP_ALLOC	O
(	O
str_size	long
+	O
1	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
str_size	long
;	O
i	long
++	O
)	O
{	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
str	*(char)
;	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
{	O
int	O
dig	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
pointlen	long
;	O
j	long
++	O
)	O
if	O
(	O
str	*(char)
[	O
j	long
]	O
!=	O
point	*(char)
[	O
j	long
]	O
)	O
goto	O
not_point	O
;	O
if	O
(	O
1	int
)	O
{	O
if	O
(	O
dotpos	*(char)
!=	O
0	int
)	O
{	O
TMP_FREE	O
;	O
return	O
-	O
1	int
;	O
}	O
dotpos	*(char)
=	O
s	array(char)
;	O
str	*(char)
+=	O
pointlen	long
-	O
1	int
;	O
i	long
+=	O
pointlen	long
-	O
1	int
;	O
}	O
else	O
{	O
not_point	O
:	O
dig	int
=	O
digit_value	*(char)
[	O
c	int
]	O
;	O
if	O
(	O
dig	int
>=	O
base	int
)	O
{	O
TMP_FREE	O
;	O
return	O
-	O
1	int
;	O
}	O
*	O
s	array(char)
++	O
=	O
dig	int
;	O
}	O
}	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
++	O
str	*(char)
;	O
}	O
str_size	long
=	O
s	array(char)
-	O
begs	*(char)
;	O
{	O
long	O
exp_in_base	long
;	O
mp_size_t	long
ra	long
,	O
ma	long
,	O
rn	long
,	O
mn	long
;	O
int	O
cnt	int
;	O
mp_ptr	*(long)
mp	*(long)
,	O
tp	*(long)
,	O
rp	*(long)
;	O
mp_exp_t	long
exp_in_limbs	long
;	O
mp_size_t	long
prec	int
=	O
PREC	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
+	O
1	int
;	O
int	O
divflag	int
;	O
mp_size_t	long
madj	long
,	O
radj	long
;	O
LIMBS_PER_DIGIT_IN_BASE	O
(	O
ma	long
,	O
str_size	long
,	O
base	int
)	O
;	O
mp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
ma	long
)	O
;	O
mn	long
=	O
mpn_set_str	O
(	O
mp	*(long)
,	O
(	O
unsigned	O
char	O
*	O
)	O
begs	*(char)
,	O
str_size	long
,	O
base	int
)	O
;	O
if	O
(	O
mn	long
==	O
0	int
)	O
{	O
SIZ	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
=	O
0	int
;	O
EXP	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
=	O
0	int
;	O
TMP_FREE	O
;	O
return	O
0	int
;	O
}	O
madj	long
=	O
0	int
;	O
if	O
(	O
mn	long
>	O
prec	int
)	O
{	O
madj	long
=	O
mn	long
-	O
prec	int
;	O
mp	*(long)
+=	O
mn	long
-	O
prec	int
;	O
mn	long
=	O
prec	int
;	O
}	O
if	O
(	O
expptr	*(char)
!=	O
0	int
)	O
{	O
long	O
dig	int
,	O
minus	long
,	O
plusminus	long
;	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
expptr	*(char)
;	O
minus	long
=	O
-	O
(	O
long	O
)	O
(	O
c	int
==	O
'-'	O
)	O
;	O
plusminus	long
=	O
minus	long
|	O
-	O
(	O
long	O
)	O
(	O
c	int
==	O
'+'	O
)	O
;	O
expptr	*(char)
-=	O
plusminus	long
;	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
expptr	*(char)
++	O
;	O
dig	int
=	O
digit_value	*(char)
[	O
c	int
]	O
;	O
if	O
(	O
dig	int
>=	O
exp_base	int
)	O
{	O
TMP_FREE	O
;	O
return	O
-	O
1	int
;	O
}	O
exp_in_base	long
=	O
dig	int
;	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
expptr	*(char)
++	O
;	O
dig	int
=	O
digit_value	*(char)
[	O
c	int
]	O
;	O
while	O
(	O
dig	int
<	O
exp_base	int
)	O
{	O
exp_in_base	long
=	O
exp_in_base	long
*	O
exp_base	int
;	O
exp_in_base	long
+=	O
dig	int
;	O
c	int
=	O
(	O
unsigned	O
char	O
)	O
*	O
expptr	*(char)
++	O
;	O
dig	int
=	O
digit_value	*(char)
[	O
c	int
]	O
;	O
}	O
exp_in_base	long
=	O
(	O
exp_in_base	long
^	O
minus	long
)	O
-	O
minus	long
;	O
}	O
else	O
exp_in_base	long
=	O
0	int
;	O
if	O
(	O
dotpos	*(char)
!=	O
0	int
)	O
exp_in_base	long
-=	O
s	array(char)
-	O
dotpos	*(char)
;	O
divflag	int
=	O
exp_in_base	long
<	O
0	int
;	O
exp_in_base	long
=	O
ABS	O
(	O
exp_in_base	long
)	O
;	O
if	O
(	O
exp_in_base	long
==	O
0	int
)	O
{	O
MPN_COPY	O
(	O
PTR	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
,	O
mp	*(long)
,	O
mn	long
)	O
;	O
SIZ	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
=	O
negative	int
?	O
-	O
mn	long
:	O
mn	long
;	O
EXP	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
=	O
mn	long
+	O
madj	long
;	O
TMP_FREE	O
;	O
return	O
0	int
;	O
}	O
ra	long
=	O
2	int
*	O
(	O
prec	int
+	O
1	int
)	O
;	O
rp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
ra	long
)	O
;	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
ra	long
)	O
;	O
rn	long
=	O
mpn_pow_1_highpart	(*(long),*(long),long,long,long,*(long))->(long)
(	O
rp	*(long)
,	O
&	O
radj	long
,	O
(	O
mp_limb_t	long
)	O
base	int
,	O
exp_in_base	long
,	O
prec	int
,	O
tp	*(long)
)	O
;	O
if	O
(	O
divflag	int
)	O
{	O
mp_ptr	*(long)
qp	*(long)
;	O
mp_limb_t	long
qlimb	long
;	O
if	O
(	O
mn	long
<	O
rn	long
)	O
{	O
mp_ptr	*(long)
tmp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
rn	long
+	O
1	int
)	O
;	O
MPN_ZERO	O
(	O
tmp	*(long)
,	O
rn	long
-	O
mn	long
)	O
;	O
MPN_COPY	O
(	O
tmp	*(long)
+	O
rn	long
-	O
mn	long
,	O
mp	*(long)
,	O
mn	long
)	O
;	O
mp	*(long)
=	O
tmp	*(long)
;	O
madj	long
-=	O
rn	long
-	O
mn	long
;	O
mn	long
=	O
rn	long
;	O
}	O
if	O
(	O
(	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
&	O
GMP_NUMB_HIGHBIT	O
)	O
==	O
0	int
)	O
{	O
mp_limb_t	long
cy	long
;	O
count_leading_zeros	O
(	O
cnt	int
,	O
rp	*(long)
[	O
rn	long
-	O
1	int
]	O
)	O
;	O
cnt	int
-=	O
GMP_NAIL_BITS	int
;	O
mpn_lshift	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
rn	long
,	O
cnt	int
)	O
;	O
cy	long
=	O
mpn_lshift	O
(	O
mp	*(long)
,	O
mp	*(long)
,	O
mn	long
,	O
cnt	int
)	O
;	O
if	O
(	O
cy	long
)	O
mp	*(long)
[	O
mn	long
++	O
]	O
=	O
cy	long
;	O
}	O
qp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
prec	int
+	O
1	int
)	O
;	O
qlimb	long
=	O
mpn_divrem	O
(	O
qp	*(long)
,	O
prec	int
-	O
(	O
mn	long
-	O
rn	long
)	O
,	O
mp	*(long)
,	O
mn	long
,	O
rp	*(long)
,	O
rn	long
)	O
;	O
tp	*(long)
=	O
qp	*(long)
;	O
exp_in_limbs	long
=	O
qlimb	long
+	O
(	O
mn	long
-	O
rn	long
)	O
+	O
(	O
madj	long
-	O
radj	long
)	O
;	O
rn	long
=	O
prec	int
;	O
if	O
(	O
qlimb	long
!=	O
0	int
)	O
{	O
tp	*(long)
[	O
prec	int
]	O
=	O
qlimb	long
;	O
tp	*(long)
++	O
;	O
}	O
}	O
else	O
{	O
tp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
rn	long
+	O
mn	long
)	O
;	O
if	O
(	O
rn	long
>	O
mn	long
)	O
mpn_mul	O
(	O
tp	*(long)
,	O
rp	*(long)
,	O
rn	long
,	O
mp	*(long)
,	O
mn	long
)	O
;	O
else	O
mpn_mul	O
(	O
tp	*(long)
,	O
mp	*(long)
,	O
mn	long
,	O
rp	*(long)
,	O
rn	long
)	O
;	O
rn	long
+=	O
mn	long
;	O
rn	long
-=	O
tp	*(long)
[	O
rn	long
-	O
1	int
]	O
==	O
0	int
;	O
exp_in_limbs	long
=	O
rn	long
+	O
madj	long
+	O
radj	long
;	O
if	O
(	O
rn	long
>	O
prec	int
)	O
{	O
tp	*(long)
+=	O
rn	long
-	O
prec	int
;	O
rn	long
=	O
prec	int
;	O
exp_in_limbs	long
+=	O
0	int
;	O
}	O
}	O
MPN_COPY	O
(	O
PTR	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
,	O
tp	*(long)
,	O
rn	long
)	O
;	O
SIZ	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
=	O
negative	int
?	O
-	O
rn	long
:	O
rn	long
;	O
EXP	O
(	O
x	*(struct(int,int,long,*(long)))
)	O
=	O
exp_in_limbs	long
;	O
TMP_FREE	O
;	O
return	O
0	int
;	O
}	O
}	O
