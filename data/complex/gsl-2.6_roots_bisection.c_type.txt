typedef	O
struct	O
{	O
double	O
f_lower	double
,	O
f_upper	double
;	O
}	O
bisection_state_t	struct(double,double)
;	O
static	O
int	O
bisection_init	(*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),double,double)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
*	O
root	*(double)
,	O
double	O
x_lower	double
,	O
double	O
x_upper	double
)	O
;	O
static	O
int	O
bisection_iterate	(*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),*(double),*(double))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
*	O
root	*(double)
,	O
double	O
*	O
x_lower	double
,	O
double	O
*	O
x_upper	double
)	O
;	O
static	O
int	O
bisection_init	(*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),double,double)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
*	O
root	*(double)
,	O
double	O
x_lower	double
,	O
double	O
x_upper	double
)	O
{	O
bisection_state_t	struct(double,double)
*	O
state	*(int)
=	O
(	O
bisection_state_t	struct(double,double)
*	O
)	O
vstate	*(void)
;	O
double	O
f_lower	double
,	O
f_upper	double
;	O
*	O
root	*(double)
=	O
0.5	int
*	O
(	O
x_lower	double
+	O
x_upper	double
)	O
;	O
SAFE_FUNC_CALL	O
(	O
f	*(double)
,	O
x_lower	double
,	O
&	O
f_lower	double
)	O
;	O
SAFE_FUNC_CALL	O
(	O
f	*(double)
,	O
x_upper	double
,	O
&	O
f_upper	double
)	O
;	O
state	*(int)
->	O
f_lower	double
=	O
f_lower	double
;	O
state	*(int)
->	O
f_upper	double
=	O
f_upper	double
;	O
if	O
(	O
(	O
f_lower	double
<	O
0.0	int
&&	O
f_upper	double
<	O
0.0	int
)	O
||	O
(	O
f_lower	double
>	O
0.0	int
&&	O
f_upper	double
>	O
0.0	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"endpoints do not straddle y=0"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
bisection_iterate	(*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),*(double),*(double))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
*	O
root	*(double)
,	O
double	O
*	O
x_lower	double
,	O
double	O
*	O
x_upper	double
)	O
{	O
bisection_state_t	struct(double,double)
*	O
state	*(int)
=	O
(	O
bisection_state_t	struct(double,double)
*	O
)	O
vstate	*(void)
;	O
double	O
x_bisect	double
,	O
f_bisect	double
;	O
const	O
double	O
x_left	double
=	O
*	O
x_lower	double
;	O
const	O
double	O
x_right	double
=	O
*	O
x_upper	double
;	O
const	O
double	O
f_lower	double
=	O
state	*(int)
->	O
f_lower	double
;	O
const	O
double	O
f_upper	double
=	O
state	*(int)
->	O
f_upper	double
;	O
if	O
(	O
f_lower	double
==	O
0.0	int
)	O
{	O
*	O
root	*(double)
=	O
x_left	double
;	O
*	O
x_upper	double
=	O
x_left	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
f_upper	double
==	O
0.0	int
)	O
{	O
*	O
root	*(double)
=	O
x_right	double
;	O
*	O
x_lower	double
=	O
x_right	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
x_bisect	double
=	O
(	O
x_left	double
+	O
x_right	double
)	O
/	O
2.0	int
;	O
SAFE_FUNC_CALL	O
(	O
f	*(double)
,	O
x_bisect	double
,	O
&	O
f_bisect	double
)	O
;	O
if	O
(	O
f_bisect	double
==	O
0.0	int
)	O
{	O
*	O
root	*(double)
=	O
x_bisect	double
;	O
*	O
x_lower	double
=	O
x_bisect	double
;	O
*	O
x_upper	double
=	O
x_bisect	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
(	O
f_lower	double
>	O
0.0	int
&&	O
f_bisect	double
<	O
0.0	int
)	O
||	O
(	O
f_lower	double
<	O
0.0	int
&&	O
f_bisect	double
>	O
0.0	int
)	O
)	O
{	O
*	O
root	*(double)
=	O
0.5	int
*	O
(	O
x_left	double
+	O
x_bisect	double
)	O
;	O
*	O
x_upper	double
=	O
x_bisect	double
;	O
state	*(int)
->	O
f_upper	double
=	O
f_bisect	double
;	O
}	O
else	O
{	O
*	O
root	*(double)
=	O
0.5	int
*	O
(	O
x_bisect	double
+	O
x_right	double
)	O
;	O
*	O
x_lower	double
=	O
x_bisect	double
;	O
state	*(int)
->	O
f_lower	double
=	O
f_bisect	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_root_fsolver_type	struct(*(char),long,*((*(void),*(struct(*`,*`)),*(double),double,double)->(int)),*((*(void),*(struct(*`,*`)),*(double),*(double),*(double))->(int)))
bisection_type	struct(*(char),long,*((*(void),*(struct(*`,*`)),*(double),double,double)->(int)),*((*(void),*(struct(*`,*`)),*(double),*(double),*(double))->(int)))
=	O
{	O
"bisection"	*(char)
,	O
sizeof	O
(	O
bisection_state_t	struct(double,double)
)	O
,	O
&	O
bisection_init	(*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),double,double)->(int)
,	O
&	O
bisection_iterate	(*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),*(double),*(double))->(int)
}	O
;	O
const	O
gsl_root_fsolver_type	struct(*(char),long,*((*(void),*(struct(*`,*`)),*(double),double,double)->(int)),*((*(void),*(struct(*`,*`)),*(double),*(double),*(double))->(int)))
*	O
gsl_root_fsolver_bisection	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
=	O
&	O
bisection_type	struct(*(char),long,*((*(void),*(struct(*`,*`)),*(double),double,double)->(int)),*((*(void),*(struct(*`,*`)),*(double),*(double),*(double))->(int)))
;	O
