extern	O
char	O
*	O
progname	*(char)
;	O
char	O
*	O
optarg	*(char)
=	O
NULL	O
;	O
int	O
optind	int
=	O
0	int
;	O
static	O
char	O
*	O
nextchar	*(char)
;	O
int	O
opterr	int
=	O
1	int
;	O
int	O
optopt	int
=	O
'?'	O
;	O
static	O
enum	O
{	O
REQUIRE_ORDER	int
,	O
PERMUTE	int
,	O
RETURN_IN_ORDER	int
}	O
ordering	enum(int,int,int)
;	O
static	O
int	O
first_nonopt	int
;	O
static	O
int	O
last_nonopt	int
;	O
static	O
void	O
exchange	(*(*(char)))->(void)
(	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
bottom	int
=	O
first_nonopt	int
;	O
int	O
middle	int
=	O
last_nonopt	int
;	O
int	O
top	int
=	O
optind	int
;	O
char	O
*	O
tem	*(char)
;	O
while	O
(	O
top	int
>	O
middle	int
&&	O
middle	int
>	O
bottom	int
)	O
{	O
if	O
(	O
top	int
-	O
middle	int
>	O
middle	int
-	O
bottom	int
)	O
{	O
int	O
len	int
=	O
middle	int
-	O
bottom	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
tem	*(char)
=	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
=	O
argv	*(*(char))
[	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
]	O
=	O
tem	*(char)
;	O
}	O
top	int
-=	O
len	int
;	O
}	O
else	O
{	O
int	O
len	int
=	O
top	int
-	O
middle	int
;	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
tem	*(char)
=	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
=	O
argv	*(*(char))
[	O
middle	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
middle	int
+	O
i	int
]	O
=	O
tem	*(char)
;	O
}	O
bottom	int
+=	O
len	int
;	O
}	O
}	O
first_nonopt	int
+=	O
(	O
optind	int
-	O
last_nonopt	int
)	O
;	O
last_nonopt	int
=	O
optind	int
;	O
}	O
static	O
const	O
char	O
*	O
_getopt_initialize	(*(char))->(*(char))
(	O
const	O
char	O
*	O
optstring	*(char)
)	O
{	O
first_nonopt	int
=	O
last_nonopt	int
=	O
optind	int
=	O
1	int
;	O
nextchar	*(char)
=	O
NULL	O
;	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
ordering	enum(int,int,int)
=	O
RETURN_IN_ORDER	int
;	O
++	O
optstring	*(char)
;	O
}	O
else	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
ordering	enum(int,int,int)
=	O
REQUIRE_ORDER	int
;	O
++	O
optstring	*(char)
;	O
}	O
else	O
if	O
(	O
getenv	(*(char))->(*(char))
(	O
"POSIXLY_CORRECT"	*(char)
)	O
!=	O
NULL	O
)	O
ordering	enum(int,int,int)
=	O
REQUIRE_ORDER	int
;	O
else	O
ordering	enum(int,int,int)
=	O
PERMUTE	int
;	O
return	O
optstring	*(char)
;	O
}	O
int	O
_getopt_internal	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int),int)->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
,	O
const	O
char	O
*	O
optstring	*(char)
,	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
longopts	*(struct(*(char),int,*(int),int))
,	O
int	O
*	O
longind	*(int)
,	O
int	O
long_only	int
)	O
{	O
optarg	*(char)
=	O
NULL	O
;	O
if	O
(	O
optind	int
==	O
0	int
)	O
optstring	*(char)
=	O
_getopt_initialize	(*(char))->(*(char))
(	O
optstring	*(char)
)	O
;	O
if	O
(	O
nextchar	*(char)
==	O
NULL	O
||	O
*	O
nextchar	*(char)
==	O
'\0'	O
)	O
{	O
if	O
(	O
ordering	enum(int,int,int)
==	O
PERMUTE	int
)	O
{	O
if	O
(	O
first_nonopt	int
!=	O
last_nonopt	int
&&	O
last_nonopt	int
!=	O
optind	int
)	O
exchange	(*(*(char)))->(void)
(	O
(	O
char	O
*	O
*	O
)	O
argv	*(*(char))
)	O
;	O
else	O
if	O
(	O
last_nonopt	int
!=	O
optind	int
)	O
first_nonopt	int
=	O
optind	int
;	O
while	O
(	O
optind	int
<	O
argc	int
&&	O
(	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
||	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
optind	int
++	O
;	O
last_nonopt	int
=	O
optind	int
;	O
}	O
if	O
(	O
optind	int
!=	O
argc	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
"--"	*(char)
)	O
)	O
{	O
optind	int
++	O
;	O
if	O
(	O
first_nonopt	int
!=	O
last_nonopt	int
&&	O
last_nonopt	int
!=	O
optind	int
)	O
exchange	(*(*(char)))->(void)
(	O
(	O
char	O
*	O
*	O
)	O
argv	*(*(char))
)	O
;	O
else	O
if	O
(	O
first_nonopt	int
==	O
last_nonopt	int
)	O
first_nonopt	int
=	O
optind	int
;	O
last_nonopt	int
=	O
argc	int
;	O
optind	int
=	O
argc	int
;	O
}	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
first_nonopt	int
!=	O
last_nonopt	int
)	O
optind	int
=	O
first_nonopt	int
;	O
return	O
EOF	O
;	O
}	O
if	O
(	O
(	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
!=	O
'-'	O
||	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'\0'	O
)	O
)	O
{	O
if	O
(	O
ordering	enum(int,int,int)
==	O
REQUIRE_ORDER	int
)	O
return	O
EOF	O
;	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
optind	int
++	O
]	O
;	O
return	O
1	int
;	O
}	O
nextchar	*(char)
=	O
(	O
argv	*(*(char))
[	O
optind	int
]	O
+	O
1	int
+	O
(	O
longopts	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
&&	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
)	O
;	O
}	O
if	O
(	O
longopts	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
&&	O
(	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
(	O
long_only	int
&&	O
(	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
2	int
]	O
||	O
!	O
strchr	(*(char),int)->(*(char))
(	O
optstring	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
)	O
)	O
)	O
)	O
)	O
{	O
char	O
*	O
nameend	*(char)
;	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
p	*(struct(*(char),int,*(int),int))
;	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
pfound	*(struct(*(char),int,*(int),int))
=	O
NULL	O
;	O
int	O
exact	int
=	O
0	int
;	O
int	O
ambig	int
=	O
0	int
;	O
int	O
indfound	int
=	O
0	int
;	O
int	O
option_index	int
;	O
for	O
(	O
nameend	*(char)
=	O
nextchar	*(char)
;	O
*	O
nameend	*(char)
&&	O
*	O
nameend	*(char)
!=	O
'='	O
;	O
nameend	*(char)
++	O
)	O
;	O
for	O
(	O
p	*(struct(*(char),int,*(int),int))
=	O
longopts	*(struct(*(char),int,*(int),int))
,	O
option_index	int
=	O
0	int
;	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
;	O
p	*(struct(*(char),int,*(int),int))
++	O
,	O
option_index	int
++	O
)	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
,	O
nextchar	*(char)
,	O
nameend	*(char)
-	O
nextchar	*(char)
)	O
)	O
{	O
if	O
(	O
nameend	*(char)
==	O
(	O
nextchar	*(char)
+	O
strlen	(*(char))->(long)
(	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
)	O
)	O
{	O
pfound	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
indfound	int
=	O
option_index	int
;	O
exact	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
==	O
NULL	O
)	O
{	O
pfound	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
indfound	int
=	O
option_index	int
;	O
}	O
else	O
ambig	int
=	O
1	int
;	O
}	O
if	O
(	O
ambig	int
&&	O
!	O
exact	int
)	O
{	O
if	O
(	O
opterr	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the option `%s' is ambiguous\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
nextchar	*(char)
)	O
;	O
optind	int
++	O
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
)	O
{	O
option_index	int
=	O
indfound	int
;	O
optind	int
++	O
;	O
if	O
(	O
*	O
nameend	*(char)
)	O
{	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
)	O
optarg	*(char)
=	O
nameend	*(char)
+	O
1	int
;	O
else	O
{	O
if	O
(	O
opterr	int
)	O
{	O
if	O
(	O
argv	*(*(char))
[	O
optind	int
-	O
1	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the option `--%s' doesn't allow an argument\n"	*(char)
,	O
progname	*(char)
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the option `%c%s' doesn't allow an argument\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
-	O
1	int
]	O
[	O
0	int
]	O
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
}	O
nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
nextchar	*(char)
)	O
;	O
return	O
'?'	O
;	O
}	O
}	O
else	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
==	O
1	int
)	O
{	O
if	O
(	O
optind	int
<	O
argc	int
)	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
optind	int
++	O
]	O
;	O
else	O
{	O
if	O
(	O
opterr	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the option `%s' requires an argument\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
-	O
1	int
]	O
)	O
;	O
nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
nextchar	*(char)
)	O
;	O
return	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
?	O
':'	O
:	O
'?'	O
;	O
}	O
}	O
nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
nextchar	*(char)
)	O
;	O
if	O
(	O
longind	*(int)
!=	O
NULL	O
)	O
*	O
longind	*(int)
=	O
option_index	int
;	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
)	O
{	O
*	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
)	O
=	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
return	O
0	int
;	O
}	O
return	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
}	O
if	O
(	O
!	O
long_only	int
||	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
strchr	(*(char),int)->(*(char))
(	O
optstring	*(char)
,	O
*	O
nextchar	*(char)
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
opterr	int
)	O
{	O
if	O
(	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the option `--%s' is unrecognized\n"	*(char)
,	O
progname	*(char)
,	O
nextchar	*(char)
)	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: the option `%c%s' is unrecognized\n"	*(char)
,	O
progname	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
[	O
0	int
]	O
,	O
nextchar	*(char)
)	O
;	O
}	O
nextchar	*(char)
=	O
(	O
char	O
*	O
)	O
""	*(char)
;	O
optind	int
++	O
;	O
return	O
'?'	O
;	O
}	O
}	O
{	O
char	O
c	char
=	O
*	O
nextchar	*(char)
++	O
;	O
char	O
*	O
temp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
optstring	*(char)
,	O
c	char
)	O
;	O
if	O
(	O
*	O
nextchar	*(char)
==	O
'\0'	O
)	O
++	O
optind	int
;	O
if	O
(	O
temp	*(char)
==	O
NULL	O
||	O
c	char
==	O
':'	O
)	O
{	O
if	O
(	O
opterr	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: illegal option -- %c\n"	*(char)
,	O
progname	*(char)
,	O
c	char
)	O
;	O
}	O
optopt	int
=	O
c	char
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
temp	*(char)
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
temp	*(char)
[	O
2	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
nextchar	*(char)
!=	O
'\0'	O
)	O
{	O
optarg	*(char)
=	O
nextchar	*(char)
;	O
optind	int
++	O
;	O
}	O
else	O
optarg	*(char)
=	O
NULL	O
;	O
nextchar	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
nextchar	*(char)
!=	O
'\0'	O
)	O
{	O
optarg	*(char)
=	O
nextchar	*(char)
;	O
optind	int
++	O
;	O
}	O
else	O
if	O
(	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
opterr	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: option requires an argument -- %c\n"	*(char)
,	O
progname	*(char)
,	O
c	char
)	O
;	O
}	O
optopt	int
=	O
c	char
;	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
)	O
c	char
=	O
':'	O
;	O
else	O
c	char
=	O
'?'	O
;	O
}	O
else	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
optind	int
++	O
]	O
;	O
nextchar	*(char)
=	O
NULL	O
;	O
}	O
}	O
return	O
c	char
;	O
}	O
}	O
int	O
gnu_getopt	(int,*(*(char)),*(char))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
,	O
const	O
char	O
*	O
optstring	*(char)
)	O
{	O
return	O
_getopt_internal	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int),int)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
optstring	*(char)
,	O
(	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
)	O
0	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
0	int
)	O
;	O
}	O
