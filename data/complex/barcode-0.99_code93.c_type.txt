static	O
char	O
alphabet	array(char)
[	O
]	O
=	O
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%"	*(char)
;	O
static	O
char	O
*	O
codeset	array(*(char))
[	O
]	O
=	O
{	O
"131112"	*(char)
,	O
"111213"	*(char)
,	O
"111312"	*(char)
,	O
"111411"	*(char)
,	O
"121113"	*(char)
,	O
"121212"	*(char)
,	O
"121311"	*(char)
,	O
"111114"	*(char)
,	O
"131211"	*(char)
,	O
"141111"	*(char)
,	O
"211113"	*(char)
,	O
"211212"	*(char)
,	O
"211311"	*(char)
,	O
"221112"	*(char)
,	O
"221211"	*(char)
,	O
"231111"	*(char)
,	O
"112113"	*(char)
,	O
"112212"	*(char)
,	O
"112311"	*(char)
,	O
"122112"	*(char)
,	O
"132111"	*(char)
,	O
"111123"	*(char)
,	O
"111222"	*(char)
,	O
"111321"	*(char)
,	O
"121122"	*(char)
,	O
"131121"	*(char)
,	O
"212112"	*(char)
,	O
"212211"	*(char)
,	O
"211122"	*(char)
,	O
"211221"	*(char)
,	O
"221121"	*(char)
,	O
"222111"	*(char)
,	O
"112122"	*(char)
,	O
"112221"	*(char)
,	O
"122121"	*(char)
,	O
"123111"	*(char)
,	O
"121131"	*(char)
,	O
"311112"	*(char)
,	O
"311211"	*(char)
,	O
"321111"	*(char)
,	O
"112131"	*(char)
,	O
"113121"	*(char)
,	O
"211131"	*(char)
,	O
"121221"	*(char)
,	O
"312111"	*(char)
,	O
"311121"	*(char)
,	O
"122211"	*(char)
,	O
"111141"	*(char)
}	O
;	O
static	O
char	O
shiftset	array(char)
[	O
]	O
=	O
"%$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%% ///  ///// /             /%%%%%%                          %%%%%%++++++++++++++++++++++++++%%%%%"	*(char)
;	O
static	O
char	O
shiftset2	array(char)
[	O
]	O
=	O
"UABCDEFGHIJKLMNOPQRSTUVWXYZABCDE ABC  FGHIJ L             ZFGHIJV                          KLMNOWABCDEFGHIJKLMNOPQRSTUVWXYZPQRST"	*(char)
;	O
int	O
Barcode_93_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
;	O
if	O
(	O
!	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
int	O
)	O
text	*(char)
[	O
i	int
]	O
>	O
127	int
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
Barcode_93_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
static	O
char	O
*	O
text	*(char)
;	O
static	O
char	O
*	O
partial	*(char)
;	O
static	O
char	O
*	O
textinfo	*(char)
;	O
char	O
*	O
c	*(char)
,	O
*	O
textptr	*(char)
;	O
int	O
*	O
checksum_str	*(int)
;	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
code	int
,	O
textpos	int
,	O
checksum_len	int
=	O
0	int
;	O
int	O
c_checksum	int
=	O
0	int
;	O
int	O
k_checksum	int
=	O
0	int
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
)	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"code 93"	*(char)
)	O
;	O
text	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
;	O
if	O
(	O
!	O
text	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	*(char)
=	O
malloc	(long)->(*(void))
(	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
*	O
2	int
+	O
4	int
)	O
*	O
6	int
+	O
3	int
)	O
;	O
if	O
(	O
!	O
partial	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
checksum_str	*(int)
=	O
(	O
int	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
3	int
)	O
*	O
2	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
if	O
(	O
!	O
checksum_str	*(int)
)	O
{	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	*(char)
=	O
malloc	(long)->(*(void))
(	O
10	int
*	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
checksum_str	*(int)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
textptr	*(char)
=	O
textinfo	*(char)
;	O
textpos	int
=	O
22	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
"0"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
START_STOP	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
i	int
++	O
)	O
{	O
c	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
if	O
(	O
!	O
c	*(char)
)	O
{	O
switch	O
(	O
shiftset	array(char)
[	O
(	O
int	O
)	O
(	O
text	*(char)
[	O
i	int
]	O
)	O
]	O
)	O
{	O
case	O
'$'	O
:	O
code	int
=	O
EXTEND_DOLLAR	int
;	O
break	O
;	O
case	O
'%'	O
:	O
code	int
=	O
EXTEND_PERCENT	int
;	O
break	O
;	O
case	O
'/'	O
:	O
code	int
=	O
EXTEND_SLASH	int
;	O
break	O
;	O
case	O
'+'	O
:	O
code	int
=	O
EXTEND_PLUS	int
;	O
break	O
;	O
default	O
:	O
code	int
=	O
0	int
;	O
break	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
code	int
]	O
)	O
;	O
checksum_str	*(int)
[	O
checksum_len	int
++	O
]	O
=	O
code	int
;	O
code	int
=	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
shiftset2	array(char)
[	O
(	O
int	O
)	O
(	O
text	*(char)
[	O
i	int
]	O
)	O
]	O
)	O
-	O
alphabet	array(char)
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
code	int
]	O
)	O
;	O
checksum_str	*(int)
[	O
checksum_len	int
++	O
]	O
=	O
code	int
;	O
}	O
else	O
{	O
code	int
=	O
c	*(char)
-	O
alphabet	array(char)
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
c	*(char)
-	O
alphabet	array(char)
]	O
)	O
;	O
checksum_str	*(int)
[	O
checksum_len	int
++	O
]	O
=	O
code	int
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
textptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
textpos	int
,	O
text	*(char)
[	O
i	int
]	O
)	O
;	O
textptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
textptr	*(char)
)	O
;	O
textpos	int
+=	O
9	int
;	O
}	O
c_checksum	int
=	O
0	int
;	O
k_checksum	int
=	O
0	int
;	O
if	O
(	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
flags	int
&	O
BARCODE_NO_CHECKSUM	int
)	O
==	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
1	int
,	O
j	int
=	O
1	int
,	O
k	int
=	O
2	int
;	O
i	int
<=	O
checksum_len	int
;	O
i	int
++	O
,	O
j	int
++	O
,	O
k	int
++	O
)	O
{	O
if	O
(	O
j	int
>	O
20	int
)	O
j	int
=	O
1	int
;	O
if	O
(	O
k	int
>	O
15	int
)	O
k	int
=	O
1	int
;	O
c_checksum	int
+=	O
j	int
*	O
(	O
int	O
)	O
checksum_str	*(int)
[	O
checksum_len	int
-	O
i	int
]	O
;	O
k_checksum	int
+=	O
k	int
*	O
(	O
int	O
)	O
checksum_str	*(int)
[	O
checksum_len	int
-	O
i	int
]	O
;	O
}	O
c_checksum	int
=	O
c_checksum	int
%	O
47	int
;	O
k_checksum	int
+=	O
c_checksum	int
;	O
k_checksum	int
=	O
k_checksum	int
%	O
47	int
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
c_checksum	int
]	O
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
k_checksum	int
]	O
)	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
codeset	array(*(char))
[	O
START_STOP	int
]	O
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
partial	*(char)
,	O
"1"	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
partial	*(char)
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
textinfo	*(char)
;	O
free	(*(void))->(void)
(	O
checksum_str	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
