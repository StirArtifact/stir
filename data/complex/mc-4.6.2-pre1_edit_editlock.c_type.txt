struct	O
lock_s	struct(*(char),int)
{	O
char	O
*	O
who	*(char)
;	O
pid_t	int
pid	int
;	O
}	O
;	O
static	O
char	O
*	O
lock_build_name	()->(*(char))
(	O
void	O
)	O
{	O
char	O
host	array(char)
[	O
BUF_SIZE	int
]	O
;	O
const	O
char	O
*	O
user	*(char)
;	O
user	*(char)
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
->	O
pw_name	*(char)
;	O
if	O
(	O
!	O
user	*(char)
)	O
user	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"USER"	*(char)
)	O
;	O
if	O
(	O
!	O
user	*(char)
)	O
user	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"USERNAME"	*(char)
)	O
;	O
if	O
(	O
!	O
user	*(char)
)	O
user	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LOGNAME"	*(char)
)	O
;	O
if	O
(	O
!	O
user	*(char)
)	O
user	*(char)
=	O
""	*(char)
;	O
if	O
(	O
gethostname	(*(char),long)->(int)
(	O
host	array(char)
,	O
BUF_SIZE	int
-	O
1	int
)	O
==	O
-	O
1	int
)	O
*	O
host	array(char)
=	O
'\0'	O
;	O
return	O
g_strdup_printf	(*(char))->(*(char))
(	O
"%s@%s.%d"	*(char)
,	O
user	*(char)
,	O
host	array(char)
,	O
(	O
int	O
)	O
getpid	()->(int)
(	O
)	O
)	O
;	O
}	O
static	O
char	O
*	O
lock_build_symlink_name	(*(char))->(*(char))
(	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
char	O
*	O
fname_copy	*(char)
,	O
*	O
symlink_name	*(char)
;	O
char	O
absolute_fname	array(char)
[	O
PATH_MAX	int
]	O
;	O
if	O
(	O
mc_realpath	(*(char),array(char))->(*(char))
(	O
fname	*(char)
,	O
absolute_fname	array(char)
)	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
fname	*(char)
=	O
x_basename	(*(char))->(*(char))
(	O
absolute_fname	array(char)
)	O
;	O
fname_copy	*(char)
=	O
g_strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
absolute_fname	array(char)
[	O
fname	*(char)
-	O
absolute_fname	array(char)
]	O
=	O
'\0'	O
;	O
symlink_name	*(char)
=	O
g_strconcat	(*(char))->(*(char))
(	O
absolute_fname	array(char)
,	O
".#"	*(char)
,	O
fname_copy	*(char)
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
g_free	(*(void))->(void)
(	O
fname_copy	*(char)
)	O
;	O
return	O
symlink_name	*(char)
;	O
}	O
static	O
struct	O
lock_s	struct(*(char),int)
*	O
lock_extract_info	(*(char))->(*(struct(*(char),int)))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
int	O
i	array(int)
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
s	*(char)
;	O
static	O
char	O
pid	int
[	O
PID_BUF_SIZE	int
]	O
,	O
who	*(char)
[	O
BUF_SIZE	int
]	O
;	O
static	O
struct	O
lock_s	struct(*(char),int)
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
;	O
for	O
(	O
p	*(void)
=	O
str	*(char)
+	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
-	O
1	int
;	O
p	*(void)
>=	O
str	*(char)
;	O
p	*(void)
--	O
)	O
if	O
(	O
*	O
p	*(void)
==	O
'.'	O
)	O
break	O
;	O
i	array(int)
=	O
0	int
;	O
for	O
(	O
s	*(char)
=	O
str	*(char)
;	O
s	*(char)
<	O
p	*(void)
&&	O
i	array(int)
<	O
BUF_SIZE	int
;	O
s	*(char)
++	O
)	O
who	*(char)
[	O
i	array(int)
++	O
]	O
=	O
*	O
s	*(char)
;	O
who	*(char)
[	O
i	array(int)
]	O
=	O
'\0'	O
;	O
i	array(int)
=	O
0	int
;	O
for	O
(	O
p	*(void)
=	O
p	*(void)
+	O
1	int
;	O
p	*(void)
<	O
str	*(char)
+	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
&&	O
*	O
p	*(void)
!=	O
':'	O
&&	O
i	array(int)
<	O
PID_BUF_SIZE	int
;	O
p	*(void)
++	O
)	O
pid	int
[	O
i	array(int)
++	O
]	O
=	O
*	O
p	*(void)
;	O
pid	int
[	O
i	array(int)
]	O
=	O
'\0'	O
;	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
.	O
pid	int
=	O
(	O
pid_t	int
)	O
atol	(*(char))->(long)
(	O
pid	int
)	O
;	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
.	O
who	*(char)
=	O
who	*(char)
;	O
return	O
&	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
;	O
}	O
static	O
char	O
*	O
lock_get_info	(*(char))->(*(char))
(	O
const	O
char	O
*	O
lockfname	*(char)
)	O
{	O
int	O
cnt	int
;	O
static	O
char	O
buf	*(char)
[	O
BUF_SIZE	int
]	O
;	O
if	O
(	O
(	O
cnt	int
=	O
readlink	(*(char),*(char),long)->(long)
(	O
lockfname	*(char)
,	O
buf	*(char)
,	O
BUF_SIZE	int
-	O
1	int
)	O
)	O
==	O
-	O
1	int
||	O
!	O
buf	*(char)
||	O
!	O
*	O
buf	*(char)
)	O
return	O
NULL	O
;	O
buf	*(char)
[	O
cnt	int
]	O
=	O
'\0'	O
;	O
return	O
buf	*(char)
;	O
}	O
int	O
edit_lock_file	(*(char))->(int)
(	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
char	O
*	O
lockfname	*(char)
,	O
*	O
newlock	*(char)
,	O
*	O
msg	*(char)
,	O
*	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
struct	O
lock_s	struct(*(char),int)
*	O
lockinfo	*(struct(*(char),int))
;	O
if	O
(	O
!	O
fname	*(char)
||	O
!	O
*	O
fname	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
!	O
vfs_file_is_local	(*(char))->(int)
(	O
fname	*(char)
)	O
)	O
return	O
0	int
;	O
lockfname	*(char)
=	O
lock_build_symlink_name	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
if	O
(	O
lockfname	*(char)
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
lockfname	*(char)
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
{	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
=	O
lock_get_info	(*(char))->(*(char))
(	O
lockfname	*(char)
)	O
;	O
if	O
(	O
!	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
)	O
{	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
lockinfo	*(struct(*(char),int))
=	O
lock_extract_info	(*(char))->(*(struct(*(char),int)))
(	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
)	O
;	O
if	O
(	O
!	O
lockinfo	*(struct(*(char),int))
->	O
pid	int
||	O
!	O
(	O
kill	(int,int)->(int)
(	O
lockinfo	*(struct(*(char),int))
->	O
pid	int
,	O
0	int
)	O
==	O
-	O
1	int
&&	O
errno	O
==	O
ESRCH	int
)	O
)	O
{	O
msg	*(char)
=	O
g_strdup_printf	(*(char))->(*(char))
(	O
_	O
(	O
"File \"%s\" is already being edited\n"	*(char)
"User: %s\nProcess ID: %d"	*(char)
)	O
,	O
x_basename	(*(char))->(*(char))
(	O
lockfname	*(char)
)	O
+	O
2	int
,	O
lockinfo	*(struct(*(char),int))
->	O
who	*(char)
,	O
(	O
int	O
)	O
lockinfo	*(struct(*(char),int))
->	O
pid	int
)	O
;	O
switch	O
(	O
edit_query_dialog2	O
(	O
_	O
(	O
"File locked"	*(char)
)	O
,	O
msg	*(char)
,	O
_	O
(	O
"&Grab lock"	*(char)
)	O
,	O
_	O
(	O
"&Ignore lock"	*(char)
)	O
)	O
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
case	O
-	O
1	int
:	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
msg	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
g_free	(*(void))->(void)
(	O
msg	*(char)
)	O
;	O
}	O
unlink	(*(char))->(int)
(	O
lockfname	*(char)
)	O
;	O
}	O
newlock	*(char)
=	O
lock_build_name	()->(*(char))
(	O
)	O
;	O
if	O
(	O
symlink	(*(char),*(char))->(int)
(	O
newlock	*(char)
,	O
lockfname	*(char)
)	O
==	O
-	O
1	int
)	O
{	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
newlock	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
newlock	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
int	O
edit_unlock_file	(*(char))->(int)
(	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
char	O
*	O
lockfname	*(char)
,	O
*	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
fname	*(char)
||	O
!	O
*	O
fname	*(char)
)	O
return	O
0	int
;	O
lockfname	*(char)
=	O
lock_build_symlink_name	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
if	O
(	O
lockfname	*(char)
==	O
NULL	O
)	O
return	O
0	int
;	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
lockfname	*(char)
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
{	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
=	O
lock_get_info	(*(char))->(*(char))
(	O
lockfname	*(char)
)	O
;	O
if	O
(	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
)	O
{	O
if	O
(	O
lock_extract_info	(*(char))->(*(struct(*(char),int)))
(	O
lock	*(struct(struct(*(union(*`,array(int))),union(struct(int,int,int,int,int,short,short,struct`),array(char),long)),*(struct(*(void),array(int))),*(struct(*(void),array(int))),int,int,int,int))
)	O
->	O
pid	int
!=	O
getpid	()->(int)
(	O
)	O
)	O
{	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
unlink	(*(char))->(int)
(	O
lockfname	*(char)
)	O
;	O
g_free	(*(void))->(void)
(	O
lockfname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
