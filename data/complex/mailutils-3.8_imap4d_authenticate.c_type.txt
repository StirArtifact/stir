struct	O
imap_auth	struct(*(char),*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int))))
{	O
char	O
*	O
name	*(char)
;	O
imap4d_auth_handler_fp	*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int)))
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
;	O
}	O
;	O
static	O
mu_list_t	*(struct)
imap_auth_list	*(struct)
;	O
static	O
int	O
comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
)	O
{	O
const	O
struct	O
imap_auth	struct(*(char),*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int))))
*	O
p	*(char)
=	O
item	*(void)
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(char)
->	O
name	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
data	*(void)
)	O
;	O
}	O
void	O
auth_add	(*(char),*((*(struct(*`,*`,*`,int)))->(enum(int,int,int,int))))->(void)
(	O
char	O
*	O
name	*(char)
,	O
imap4d_auth_handler_fp	*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int)))
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
)	O
{	O
struct	O
imap_auth	struct(*(char),*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int))))
*	O
p	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(char)
)	O
)	O
;	O
p	*(char)
->	O
name	*(char)
=	O
name	*(char)
;	O
p	*(char)
->	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
;	O
if	O
(	O
!	O
imap_auth_list	*(struct)
)	O
{	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
imap_auth_list	*(struct)
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
imap_auth_list	*(struct)
,	O
comp	(*(void),*(void))->(int)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
imap_auth_list	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
}	O
mu_list_append	(*(struct),*(void))->(int)
(	O
imap_auth_list	*(struct)
,	O
(	O
void	O
*	O
)	O
p	*(char)
)	O
;	O
}	O
void	O
auth_remove	(*(char))->(void)
(	O
char	O
*	O
name	*(char)
)	O
{	O
mu_list_remove	(*(struct),*(void))->(int)
(	O
imap_auth_list	*(struct)
,	O
(	O
void	O
*	O
)	O
name	*(char)
)	O
;	O
}	O
static	O
int	O
_auth_capa	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
usused	*(void)
)	O
{	O
struct	O
imap_auth	struct(*(char),*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int))))
*	O
p	*(char)
=	O
item	*(void)
;	O
io_sendf	(*(char))->(int)
(	O
" AUTH=%s"	*(char)
,	O
p	*(char)
->	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_auth_try	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
imap_auth	struct(*(char),*((*(struct(*(struct`),*(char),*(char),int)))->(enum(int,int,int,int))))
*	O
p	*(char)
=	O
item	*(void)
;	O
struct	O
imap4d_auth	struct(*(struct(*(char),*((*(struct`),*(struct`),*(struct`))->(int)),int,int,int,*(char))),*(char),*(char),int)
*	O
ap	array(struct(int,int,*(void),*(void)))
=	O
data	*(void)
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(char)
->	O
name	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
->	O
auth_type	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
res	*(int)
=	O
p	*(char)
->	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
res	*(int)
)	O
return	O
res	*(int)
;	O
}	O
return	O
0	int
;	O
}	O
void	O
imap4d_auth_capability	(*(struct(enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
struct	O
imap4d_session	struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
if	O
(	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
tls_mode	enum(int,int,int,int,int)
!=	O
tls_required	int
)	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
imap_auth_list	*(struct)
,	O
_auth_capa	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
int	O
imap4d_authenticate	(*(struct(enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)
(	O
struct	O
imap4d_session	struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
struct	O
imap4d_command	struct(*(char),*((*(struct),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)),int,int,int,*(char))
*	O
command	*(char)
,	O
imap4d_tokbuf_t	*(struct)
tok	*(*(struct))
)	O
{	O
char	O
*	O
auth_type	*(char)
;	O
struct	O
imap4d_auth	struct(*(struct(*(char),*((*(struct`),*(struct`),*(struct`))->(int)),int,int,int,*(char))),*(char),*(char),int)
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
;	O
int	O
res	*(int)
;	O
if	O
(	O
imap4d_tokbuf_argc	(*(struct))->(int)
(	O
tok	*(*(struct))
)	O
!=	O
3	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Invalid arguments"	*(char)
)	O
;	O
auth_type	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
IMAP4_ARG_1	int
)	O
;	O
if	O
(	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
tls_mode	enum(int,int,int,int,int)
==	O
tls_required	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_NO	int
,	O
"Command disabled: Use STARTTLS first"	*(char)
)	O
;	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
command	*(char)
=	O
command	*(char)
;	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
auth_type	*(char)
=	O
auth_type	*(char)
;	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
username	*(char)
=	O
NULL	O
;	O
res	*(int)
=	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
imap_auth_list	*(struct)
,	O
_auth_try	(*(void),*(void))->(int)
,	O
&	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
)	O
;	O
switch	O
(	O
res	*(int)
)	O
{	O
case	O
imap4d_auth_nosup	int
:	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_NO	int
,	O
"Authentication mechanism not supported"	*(char)
)	O
;	O
case	O
imap4d_auth_ok	int
:	O
return	O
0	int
;	O
case	O
imap4d_auth_resp	int
:	O
if	O
(	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
response	int
==	O
RESP_OK	int
&&	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
username	*(char)
)	O
{	O
if	O
(	O
imap4d_session_setup	(*(char))->(int)
(	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
username	*(char)
)	O
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_NO	int
,	O
"User name or passwd rejected"	*(char)
)	O
;	O
else	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_OK	int
,	O
"%s authentication successful"	*(char)
,	O
auth_type	*(char)
)	O
;	O
}	O
case	O
imap4d_auth_fail	int
:	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
response	int
=	O
RESP_NO	int
;	O
break	O
;	O
default	O
:	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
response	int
=	O
RESP_NO	int
;	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
res	*(int)
)	O
)	O
;	O
}	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
adata	struct(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(char),*(char),int)
.	O
response	int
,	O
"%s authentication failed"	*(char)
,	O
auth_type	*(char)
)	O
;	O
}	O
