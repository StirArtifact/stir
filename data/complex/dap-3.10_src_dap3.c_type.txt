extern	O
dataobs	struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int)
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
]	O
;	O
extern	O
FILE	struct
*	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
FILE	struct
*	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
FILE	struct
*	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
extern	O
char	O
*	O
dap_title	*(char)
;	O
extern	O
char	O
*	O
dap_dapname	*(char)
;	O
static	O
void	O
plot1	(array(double),array(double),int,array(char),array(char),array(int),int,array(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))),array(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))),int,array(char),*(()->(double)),*(()->(double)),int)->(void)
(	O
double	O
x	double
[	O
]	O
,	O
double	O
y	double
[	O
]	O
,	O
int	O
nobs	int
,	O
char	O
xvar	array(char)
[	O
]	O
,	O
char	O
yvar	array(char)
[	O
]	O
,	O
int	O
markv	array(int)
[	O
]	O
,	O
int	O
nmark	int
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
]	O
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
a	double
[	O
]	O
,	O
int	O
pn	int
,	O
char	O
style	array(char)
[	O
]	O
,	O
double	O
(	O
*	O
xfunct	*(()->(double))
)	O
(	O
)	O
,	O
double	O
(	O
*	O
yfunct	*(()->(double))
)	O
(	O
)	O
,	O
int	O
doaxes	int
)	O
{	O
int	O
titlelen	int
;	O
static	O
char	O
*	O
title0	*(char)
=	O
NULL	O
;	O
char	O
*	O
title1	*(char)
;	O
int	O
overlay	int
;	O
int	O
n	int
;	O
int	O
v	int
;	O
int	O
s	int
;	O
char	O
*	O
axspec	array(char)
;	O
int	O
t	double
;	O
double	O
pictr	double
;	O
dap_swap	()->(void)
(	O
)	O
;	O
if	O
(	O
dap_title	*(char)
)	O
titlelen	int
=	O
strlen	(*(char))->(long)
(	O
dap_title	*(char)
)	O
+	O
1	int
;	O
else	O
titlelen	int
=	O
0	int
;	O
if	O
(	O
!	O
title0	*(char)
)	O
{	O
title0	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
titlelen	int
+	O
1	int
,	O
"dap_linelen"	*(char)
)	O
;	O
if	O
(	O
dap_title	*(char)
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
title0	*(char)
,	O
dap_title	*(char)
)	O
;	O
}	O
title1	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
titlelen	int
+	O
1	int
,	O
"dap_linelen"	*(char)
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
overlay	int
=	O
0	int
;	O
if	O
(	O
style	array(char)
[	O
s	int
]	O
==	O
'o'	O
)	O
{	O
for	O
(	O
s	int
++	O
;	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
for	O
(	O
;	O
'0'	O
<=	O
style	array(char)
[	O
s	int
]	O
&&	O
style	array(char)
[	O
s	int
]	O
<=	O
'9'	O
;	O
s	int
++	O
)	O
overlay	int
=	O
10	int
*	O
overlay	int
+	O
style	array(char)
[	O
s	int
]	O
-	O
'0'	O
;	O
if	O
(	O
!	O
overlay	int
)	O
overlay	int
=	O
-	O
1	int
;	O
}	O
while	O
(	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
)	O
s	int
++	O
;	O
axspec	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
3	int
+	O
strlen	(*(char))->(long)
(	O
style	array(char)
)	O
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
axspec	array(char)
,	O
style	array(char)
+	O
s	int
)	O
;	O
if	O
(	O
overlay	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
pn	int
)	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
-	O
1	int
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
else	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
NULL	O
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
a	double
)	O
;	O
}	O
else	O
if	O
(	O
overlay	int
)	O
{	O
if	O
(	O
pn	int
%	O
overlay	int
)	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
-	O
1	int
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
else	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
NULL	O
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
a	double
+	O
(	O
pn	int
/	O
overlay	int
)	O
)	O
;	O
}	O
else	O
{	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
NULL	O
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
a	double
+	O
pn	int
)	O
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
n	int
<	O
nobs	int
;	O
n	int
++	O
)	O
pict_point	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),double,double)->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
x	double
[	O
n	int
]	O
,	O
y	double
[	O
n	int
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
]	O
.	O
pict_type	array(char)
,	O
"CIRC"	*(char)
)	O
;	O
title1	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
dap_title	*(char)
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
title1	*(char)
,	O
dap_title	*(char)
)	O
;	O
if	O
(	O
overlay	int
>=	O
0	int
&&	O
nmark	int
)	O
{	O
if	O
(	O
dap_title	*(char)
)	O
strcat	(*(char),*(char))->(*(char))
(	O
title1	*(char)
,	O
"\n"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
v	int
)	O
strcat	(*(char),*(char))->(*(char))
(	O
title1	*(char)
,	O
" "	*(char)
)	O
;	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
title1	*(char)
+	O
strlen	(*(char))->(long)
(	O
title1	*(char)
)	O
,	O
"%g"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
title1	*(char)
+	O
strlen	(*(char))->(long)
(	O
title1	*(char)
)	O
,	O
"%d"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
else	O
strcat	(*(char),*(char))->(*(char))
(	O
title1	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
if	O
(	O
overlay	int
>	O
0	int
)	O
{	O
if	O
(	O
!	O
(	O
pn	int
%	O
overlay	int
)	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
title0	*(char)
,	O
title1	*(char)
)	O
;	O
else	O
{	O
for	O
(	O
t	double
=	O
0	int
;	O
title0	*(char)
[	O
t	double
]	O
&&	O
title0	*(char)
[	O
t	double
]	O
==	O
title1	*(char)
[	O
t	double
]	O
;	O
t	double
++	O
)	O
;	O
title1	*(char)
[	O
t	double
]	O
=	O
'\0'	O
;	O
}	O
}	O
}	O
if	O
(	O
doaxes	int
)	O
{	O
if	O
(	O
overlay	int
==	O
-	O
1	int
)	O
{	O
pictr	double
=	O
0.05	int
*	O
pict_autoaxes	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),array(char),array(char),array(char),*(()->(double)),*(()->(double)),array(char),int)->(double)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
xvar	array(char)
,	O
yvar	array(char)
,	O
axspec	array(char)
,	O
xfunct	*(()->(double))
,	O
yfunct	*(()->(double))
,	O
title1	*(char)
,	O
PORTRAIT	int
)	O
;	O
while	O
(	O
pn	int
>=	O
0	int
)	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
--	O
]	O
.	O
pict_r	double
=	O
pictr	double
;	O
}	O
else	O
if	O
(	O
overlay	int
)	O
{	O
pictr	double
=	O
0.05	int
*	O
pict_autoaxes	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),array(char),array(char),array(char),*(()->(double)),*(()->(double)),array(char),int)->(double)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
(	O
pn	int
/	O
overlay	int
)	O
*	O
overlay	int
,	O
xvar	array(char)
,	O
yvar	array(char)
,	O
axspec	array(char)
,	O
xfunct	*(()->(double))
,	O
yfunct	*(()->(double))
,	O
title1	*(char)
,	O
PORTRAIT	int
)	O
;	O
while	O
(	O
pn	int
>=	O
(	O
pn	int
/	O
overlay	int
)	O
*	O
overlay	int
)	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
--	O
]	O
.	O
pict_r	double
=	O
pictr	double
;	O
}	O
else	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
]	O
.	O
pict_r	double
=	O
0.05	int
*	O
pict_autoaxes	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),array(char),array(char),array(char),*(()->(double)),*(()->(double)),array(char),int)->(double)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
xvar	array(char)
,	O
yvar	array(char)
,	O
axspec	array(char)
,	O
xfunct	*(()->(double))
,	O
yfunct	*(()->(double))
,	O
title1	*(char)
,	O
PORTRAIT	int
)	O
;	O
}	O
dap_swap	()->(void)
(	O
)	O
;	O
if	O
(	O
doaxes	int
)	O
{	O
dap_free	(*(void),*(char))->(void)
(	O
title0	*(char)
,	O
""	*(char)
)	O
;	O
title0	*(char)
=	O
NULL	O
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
title1	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
axspec	array(char)
,	O
""	*(char)
)	O
;	O
}	O
static	O
void	O
plotparse	(*(char),*(char),*(char),*(char))->(void)
(	O
char	O
*	O
xyvar	*(char)
,	O
char	O
*	O
xyname	*(char)
,	O
char	O
*	O
xname	array(char)
,	O
char	O
*	O
yname	*(char)
)	O
{	O
int	O
n	int
;	O
int	O
xyn	int
;	O
int	O
xn	int
,	O
yn	(int,double)->(double)
;	O
int	O
ystart	int
;	O
for	O
(	O
n	int
=	O
0	int
;	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
for	O
(	O
xyn	int
=	O
0	int
;	O
xyvar	*(char)
[	O
n	int
]	O
&&	O
xyvar	*(char)
[	O
n	int
]	O
!=	O
' '	O
&&	O
xyvar	*(char)
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
xyn	int
<	O
dap_namelen	int
)	O
xyname	*(char)
[	O
xyn	int
++	O
]	O
=	O
xyvar	*(char)
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plotparse) X-variable name too long: %s\n"	*(char)
,	O
xyvar	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
xname	array(char)
,	O
xyvar	*(char)
,	O
n	int
)	O
;	O
xname	array(char)
[	O
n	int
]	O
=	O
'\0'	O
;	O
xyname	*(char)
[	O
xyn	int
++	O
]	O
=	O
' '	O
;	O
while	O
(	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
)	O
n	int
++	O
;	O
if	O
(	O
xyvar	*(char)
[	O
n	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
n	int
++	O
;	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
for	O
(	O
xn	int
=	O
0	int
;	O
xyvar	*(char)
[	O
n	int
]	O
&&	O
xyvar	*(char)
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
xn	int
<	O
dap_linelen	int
)	O
xname	array(char)
[	O
xn	int
++	O
]	O
=	O
xyvar	*(char)
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plotparse) X-axis label too long: %s\n"	*(char)
,	O
xyvar	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
while	O
(	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
)	O
n	int
++	O
;	O
if	O
(	O
xyvar	*(char)
[	O
n	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
n	int
++	O
;	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plotparse) Expected ` after x-axis label: %s\n"	*(char)
,	O
xyvar	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
xname	array(char)
[	O
xn	int
]	O
=	O
'\0'	O
;	O
}	O
ystart	int
=	O
n	int
;	O
for	O
(	O
;	O
xyvar	*(char)
[	O
n	int
]	O
&&	O
xyvar	*(char)
[	O
n	int
]	O
!=	O
' '	O
&&	O
xyvar	*(char)
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
xyn	int
<	O
2	int
*	O
(	O
dap_namelen	int
+	O
1	int
)	O
)	O
xyname	*(char)
[	O
xyn	int
++	O
]	O
=	O
xyvar	*(char)
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plotparse) Y-variable name too long: %s\n"	*(char)
,	O
xyvar	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
xyname	*(char)
[	O
xyn	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
yname	*(char)
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
yname	*(char)
,	O
xyvar	*(char)
+	O
ystart	int
,	O
n	int
)	O
;	O
yname	*(char)
[	O
n	int
-	O
ystart	int
]	O
=	O
'\0'	O
;	O
xyname	*(char)
[	O
xyn	int
++	O
]	O
=	O
' '	O
;	O
while	O
(	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
)	O
n	int
++	O
;	O
if	O
(	O
xyvar	*(char)
[	O
n	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
n	int
++	O
;	O
xyvar	*(char)
[	O
n	int
]	O
==	O
' '	O
;	O
n	int
++	O
)	O
;	O
for	O
(	O
yn	(int,double)->(double)
=	O
0	int
;	O
xyvar	*(char)
[	O
n	int
]	O
&&	O
xyvar	*(char)
[	O
n	int
]	O
!=	O
'`'	O
;	O
n	int
++	O
)	O
{	O
if	O
(	O
yn	(int,double)->(double)
<	O
dap_linelen	int
)	O
yname	*(char)
[	O
yn	(int,double)->(double)
++	O
]	O
=	O
xyvar	*(char)
[	O
n	int
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plotparse) Y-axis label too long: %s\n"	*(char)
,	O
xyvar	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
yname	*(char)
[	O
yn	(int,double)->(double)
]	O
=	O
'\0'	O
;	O
}	O
}	O
xyname	*(char)
[	O
xyn	int
]	O
=	O
'\0'	O
;	O
}	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
plot	(*(char),*(char),*(char),*(char),*(()->(double)),*(()->(double)),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
xyvar	*(char)
,	O
char	O
*	O
marks	array(char)
,	O
char	O
*	O
style	array(char)
,	O
double	O
(	O
*	O
xfunct	*(()->(double))
)	O
(	O
)	O
,	O
double	O
(	O
*	O
yfunct	*(()->(double))
)	O
(	O
)	O
,	O
int	O
nplots	int
)	O
{	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
a	double
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
int	O
nobs	int
;	O
int	O
nnan	int
;	O
static	O
double	O
*	O
x	double
,	O
*	O
y	double
;	O
int	O
pn	int
;	O
int	O
xyv	array(int)
[	O
2	int
]	O
;	O
char	O
*	O
xyname	*(char)
;	O
char	O
*	O
xname	array(char)
;	O
char	O
*	O
yname	*(char)
;	O
int	O
s	int
;	O
int	O
overlay	int
;	O
int	O
more	int
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
2	int
*	O
nplots	int
*	O
sizeof	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
)	O
,	O
""	*(char)
)	O
;	O
a	double
=	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
nplots	int
;	O
x	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
y	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(plot) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
if	O
(	O
!	O
xyvar	*(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(plot) No x and y variable list given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
xyname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
2	int
*	O
(	O
dap_namelen	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
xname	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
yname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
plotparse	(*(char),*(char),*(char),*(char))->(void)
(	O
xyvar	*(char)
,	O
xyname	*(char)
,	O
xname	array(char)
,	O
yname	*(char)
)	O
;	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
dap_list	(array(char),array(int),int)->(int)
(	O
xyname	*(char)
,	O
xyv	array(int)
,	O
dap_maxvar	int
)	O
!=	O
2	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plot) Invalid x and y variable list: %s\n"	*(char)
,	O
xyvar	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
xyv	array(int)
[	O
0	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plot) x-variable is not double variable: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
xyv	array(int)
[	O
0	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
xyv	array(int)
[	O
1	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plot) y-variable is not double variable: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
xyv	array(int)
[	O
1	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
s	int
=	O
0	int
;	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
overlay	int
=	O
0	int
;	O
if	O
(	O
style	array(char)
&&	O
style	array(char)
[	O
s	int
]	O
==	O
'o'	O
)	O
{	O
for	O
(	O
s	int
++	O
;	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
for	O
(	O
;	O
'0'	O
<=	O
style	array(char)
[	O
s	int
]	O
&&	O
style	array(char)
[	O
s	int
]	O
<=	O
'9'	O
;	O
s	int
++	O
)	O
overlay	int
=	O
10	int
*	O
overlay	int
+	O
style	array(char)
[	O
s	int
]	O
-	O
'0'	O
;	O
if	O
(	O
!	O
overlay	int
)	O
overlay	int
=	O
-	O
1	int
;	O
}	O
for	O
(	O
nobs	int
=	O
0	int
,	O
nnan	int
=	O
0	int
,	O
pn	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
if	O
(	O
pn	int
<	O
nplots	int
)	O
{	O
plot1	(array(double),array(double),int,array(char),array(char),array(int),int,array(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))),array(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))),int,array(char),*(()->(double)),*(()->(double)),int)->(void)
(	O
x	double
,	O
y	double
,	O
nobs	int
,	O
xname	array(char)
,	O
yname	*(char)
,	O
markv	array(int)
,	O
nmark	int
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
a	double
,	O
pn	int
,	O
style	array(char)
,	O
xfunct	*(()->(double))
,	O
yfunct	*(()->(double))
,	O
(	O
!	O
more	int
||	O
!	O
overlay	int
||	O
(	O
overlay	int
>	O
0	int
&&	O
!	O
(	O
(	O
pn	int
+	O
1	int
)	O
%	O
overlay	int
)	O
)	O
)	O
)	O
;	O
pn	int
++	O
;	O
if	O
(	O
nnan	int
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plot) %d NaNs\n"	*(char)
,	O
nnan	int
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plot) More plots than specified by nplots (%d)\n"	*(char)
,	O
nplots	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
nobs	int
=	O
0	int
;	O
nnan	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
x	double
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
xyv	array(int)
[	O
0	int
]	O
]	O
;	O
y	double
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
xyv	array(int)
[	O
1	int
]	O
]	O
;	O
if	O
(	O
finite	(double)->(int)
(	O
x	double
[	O
nobs	int
]	O
)	O
&&	O
finite	(double)->(int)
(	O
y	double
[	O
nobs	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plot) Too many points\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
x	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
y	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xyname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xname	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
yname	*(char)
,	O
""	*(char)
)	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
static	O
int	O
dblcmp	(*(double),*(double))->(int)
(	O
double	O
*	O
x	double
,	O
double	O
*	O
y	double
)	O
{	O
if	O
(	O
*	O
x	double
<	O
*	O
y	double
)	O
return	O
-	O
1	int
;	O
if	O
(	O
*	O
x	double
>	O
*	O
y	double
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
double	O
comb	(int,int)->(double)
(	O
int	O
n	int
,	O
int	O
k	int
)	O
{	O
double	O
dn	double
,	O
dk	double
;	O
double	O
c	int
;	O
for	O
(	O
c	int
=	O
1.0	int
,	O
dn	double
=	O
(	O
double	O
)	O
n	int
,	O
dk	double
=	O
(	O
double	O
)	O
k	int
;	O
dk	double
>=	O
1.0	int
;	O
dn	double
-=	O
1.0	int
,	O
dk	double
-=	O
1.0	int
)	O
c	int
*=	O
dn	double
/	O
dk	double
;	O
return	O
c	int
;	O
}	O
static	O
double	O
dnmk	double
;	O
static	O
double	O
dkm1	double
;	O
static	O
double	O
orderf	(double)->(double)
(	O
double	O
t	double
)	O
{	O
double	O
x	double
;	O
double	O
tmp1	double
,	O
tmp2	double
;	O
if	O
(	O
t	double
==	O
-	O
1.0	int
||	O
t	double
==	O
1.0	int
)	O
return	O
0.0	int
;	O
tmp1	double
=	O
1.0	int
-	O
t	double
*	O
t	double
;	O
x	double
=	O
t	double
/	O
sqrt	(double)->(double)
(	O
tmp1	double
)	O
;	O
tmp2	double
=	O
dkm1	double
*	O
log	(double)->(double)
(	O
probz	(double)->(double)
(	O
x	double
)	O
)	O
+	O
dnmk	double
*	O
log	(double)->(double)
(	O
probz	(double)->(double)
(	O
-	O
x	double
)	O
)	O
-	O
0.5	int
*	O
x	double
*	O
x	double
;	O
if	O
(	O
finite	(double)->(int)
(	O
tmp2	double
)	O
)	O
return	O
exp	(double)->(double)
(	O
tmp2	double
)	O
*	O
t	double
/	O
(	O
tmp1	double
*	O
tmp1	double
)	O
;	O
return	O
0.0	int
;	O
}	O
static	O
void	O
geta	(array(double),int)->(void)
(	O
double	O
a	double
[	O
]	O
,	O
int	O
n	int
)	O
{	O
int	O
k	int
;	O
double	O
dn	double
;	O
double	O
c	int
;	O
if	O
(	O
n	int
<	O
7	int
)	O
{	O
switch	O
(	O
n	int
)	O
{	O
case	O
3	int
:	O
a	double
[	O
0	int
]	O
=	O
0.707107	int
;	O
break	O
;	O
case	O
4	int
:	O
a	double
[	O
0	int
]	O
=	O
0.687155	int
;	O
a	double
[	O
1	int
]	O
=	O
0.166787	int
;	O
break	O
;	O
case	O
5	int
:	O
a	double
[	O
0	int
]	O
=	O
0.664647	int
;	O
a	double
[	O
1	int
]	O
=	O
0.241337	int
;	O
break	O
;	O
case	O
6	int
:	O
a	double
[	O
0	int
]	O
=	O
0.643105	int
;	O
a	double
[	O
1	int
]	O
=	O
0.280635	int
;	O
a	double
[	O
2	int
]	O
=	O
0.0875196	int
;	O
break	O
;	O
}	O
return	O
;	O
}	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
n	int
/	O
2	int
;	O
k	int
++	O
)	O
{	O
dnmk	double
=	O
(	O
double	O
)	O
(	O
n	int
-	O
k	int
-	O
1	int
)	O
;	O
dkm1	double
=	O
(	O
double	O
)	O
k	int
;	O
a	double
[	O
k	int
]	O
=	O
(	O
(	O
double	O
)	O
k	int
+	O
1	int
)	O
*	O
comb	(int,int)->(double)
(	O
n	int
,	O
k	int
+	O
1	int
)	O
*	O
INVSQ2PI	int
*	O
dap_simp	(*(()->(double)),double,double,int)->(double)
(	O
&	O
orderf	(double)->(double)
,	O
-	O
1.0	int
,	O
1.0	int
,	O
NSTEPS	int
)	O
;	O
}	O
dn	double
=	O
(	O
double	O
)	O
n	int
;	O
if	O
(	O
n	int
<=	O
20	int
)	O
{	O
for	O
(	O
a	double
[	O
0	int
]	O
=	O
SQRTHALF	int
;	O
dn	double
>	O
2.0	int
;	O
dn	double
-=	O
2.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
(	O
dn	double
-	O
2.0	int
)	O
/	O
(	O
dn	double
-	O
1.0	int
)	O
;	O
if	O
(	O
dn	double
==	O
2.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
TWOOSQRTPI	int
;	O
else	O
a	double
[	O
0	int
]	O
*=	O
SQRTPI	int
;	O
}	O
else	O
{	O
for	O
(	O
a	double
[	O
0	int
]	O
=	O
SQRTHALF	int
;	O
dn	double
>	O
1.0	int
;	O
dn	double
-=	O
2.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
(	O
dn	double
-	O
1.0	int
)	O
/	O
dn	double
;	O
if	O
(	O
dn	double
==	O
1.0	int
)	O
a	double
[	O
0	int
]	O
*=	O
TWOOSQRTPI	int
;	O
else	O
a	double
[	O
0	int
]	O
*=	O
SQRTPI	int
;	O
}	O
for	O
(	O
c	int
=	O
0.0	int
,	O
k	int
=	O
1	int
;	O
k	int
<	O
n	int
/	O
2	int
;	O
k	int
++	O
)	O
c	int
+=	O
a	double
[	O
k	int
]	O
*	O
a	double
[	O
k	int
]	O
;	O
c	int
=	O
sqrt	(double)->(double)
(	O
(	O
1.0	int
-	O
2.0	int
*	O
a	double
[	O
0	int
]	O
)	O
/	O
(	O
2.0	int
*	O
c	int
)	O
)	O
;	O
a	double
[	O
0	int
]	O
=	O
-	O
sqrt	(double)->(double)
(	O
a	double
[	O
0	int
]	O
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
n	int
/	O
2	int
;	O
k	int
++	O
)	O
a	double
[	O
k	int
]	O
*=	O
c	int
;	O
}	O
static	O
double	O
clambda1	array(double)
[	O
3	int
]	O
=	O
{	O
0.118898	int
,	O
0.133414	int
,	O
0.327907	int
}	O
;	O
static	O
double	O
clambda2	array(double)
[	O
6	int
]	O
=	O
{	O
0.480385	int
,	O
0.318828	int
,	O
0.0	int
,	O
-	O
0.0241665	int
,	O
0.00879701	int
,	O
0.002989646	int
}	O
;	O
static	O
double	O
clogmu1	array(double)
[	O
4	int
]	O
=	O
{	O
-	O
0.37542	int
,	O
-	O
0.492145	int
,	O
-	O
1.124332	int
,	O
-	O
0.199422	int
}	O
;	O
static	O
double	O
clogmu2	array(double)
[	O
6	int
]	O
=	O
{	O
-	O
1.91487	int
,	O
-	O
1.37888	int
,	O
-	O
0.04183209	int
,	O
0.1066339	int
,	O
-	O
0.03513666	int
,	O
-	O
0.01504614	int
}	O
;	O
static	O
double	O
clogsigma1	array(double)
[	O
4	int
]	O
=	O
{	O
-	O
3.15805	int
,	O
0.729399	int
,	O
3.01855	int
,	O
1.558776	int
}	O
;	O
static	O
double	O
clogsigma2	array(double)
[	O
7	int
]	O
=	O
{	O
-	O
3.73538	int
,	O
-	O
1.015807	int
,	O
-	O
0.331885	int
,	O
0.1773538	int
,	O
-	O
0.01638782	int
,	O
-	O
0.03215018	int
,	O
0.003852646	int
}	O
;	O
static	O
double	O
au	array(array(array(double)))
[	O
3	int
]	O
[	O
2	int
]	O
[	O
5	int
]	O
=	O
{	O
{	O
{	O
-	O
1.26233	int
,	O
1.87969	int
,	O
0.0649583	int
,	O
-	O
0.0475604	int
,	O
-	O
0.0139682	int
}	O
,	O
{	O
-	O
0.287696	int
,	O
1.78953	int
,	O
-	O
0.180114	int
,	O
0.0	int
,	O
0.0	int
}	O
}	O
,	O
{	O
{	O
-	O
2.28135	int
,	O
2.26186	int
,	O
0.0	int
,	O
0.0	int
,	O
-	O
0.00865763	int
}	O
,	O
{	O
-	O
1.63638	int
,	O
5.60924	int
,	O
-	O
3.63738	int
,	O
1.08439	int
,	O
0.0	int
}	O
}	O
,	O
{	O
{	O
-	O
3.30623	int
,	O
2.76287	int
,	O
-	O
0.83484	int
,	O
1.20857	int
,	O
-	O
0.507590	int
}	O
,	O
{	O
-	O
5.991908	int
,	O
21.04575	int
,	O
-	O
24.58061	int
,	O
13.78661	int
,	O
-	O
2.835295	int
}	O
}	O
}	O
;	O
static	O
double	O
lowhigh	array(array(double))
[	O
3	int
]	O
[	O
2	int
]	O
=	O
{	O
{	O
-	O
3.8	int
,	O
8.6	int
}	O
,	O
{	O
-	O
3.0	int
,	O
5.8	int
}	O
,	O
{	O
-	O
4.0	int
,	O
5.4	int
}	O
}	O
;	O
static	O
double	O
poly	(array(double),double,int)->(double)
(	O
double	O
c	int
[	O
]	O
,	O
double	O
x	double
,	O
int	O
n	int
)	O
{	O
double	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
for	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
c	int
[	O
n	int
]	O
;	O
--	O
n	int
>=	O
0	int
;	O
)	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
*	O
x	double
+	O
c	int
[	O
n	int
]	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
static	O
double	O
probw	(int,double,double)->(double)
(	O
int	O
n	int
,	O
double	O
w0	double
,	O
double	O
a1	double
)	O
{	O
double	O
u	double
;	O
double	O
d	double
,	O
lambda	double
,	O
logmu	double
,	O
logsigma	double
;	O
double	O
y	double
;	O
double	O
eps	double
;	O
int	O
r	double
;	O
if	O
(	O
n	int
==	O
3	int
)	O
return	O
SIXOVERPI	int
*	O
(	O
asin	(double)->(double)
(	O
sqrt	(double)->(double)
(	O
w0	double
)	O
)	O
-	O
asin	(double)->(double)
(	O
sqrt	(double)->(double)
(	O
0.75	int
)	O
)	O
)	O
;	O
if	O
(	O
n	int
>=	O
7	int
)	O
{	O
if	O
(	O
n	int
<=	O
20	int
)	O
d	double
=	O
3.0	int
;	O
else	O
d	double
=	O
5.0	int
;	O
d	double
=	O
log	(double)->(double)
(	O
(	O
double	O
)	O
n	int
)	O
-	O
d	double
;	O
if	O
(	O
n	int
<=	O
20	int
)	O
{	O
lambda	double
=	O
poly	(array(double),double,int)->(double)
(	O
clambda1	array(double)
,	O
d	double
,	O
2	int
)	O
;	O
logmu	double
=	O
poly	(array(double),double,int)->(double)
(	O
clogmu1	array(double)
,	O
d	double
,	O
3	int
)	O
;	O
logsigma	double
=	O
poly	(array(double),double,int)->(double)
(	O
clogsigma1	array(double)
,	O
d	double
,	O
3	int
)	O
;	O
}	O
else	O
{	O
lambda	double
=	O
poly	(array(double),double,int)->(double)
(	O
clambda2	array(double)
,	O
d	double
,	O
5	int
)	O
;	O
logmu	double
=	O
poly	(array(double),double,int)->(double)
(	O
clogmu2	array(double)
,	O
d	double
,	O
5	int
)	O
;	O
logsigma	double
=	O
poly	(array(double),double,int)->(double)
(	O
clogsigma2	array(double)
,	O
d	double
,	O
6	int
)	O
;	O
}	O
y	double
=	O
pow	(double,double)->(double)
(	O
1.0	int
-	O
w0	double
,	O
lambda	double
)	O
;	O
return	O
probz	(double)->(double)
(	O
-	O
(	O
y	double
-	O
exp	(double)->(double)
(	O
logmu	double
)	O
)	O
/	O
exp	(double)->(double)
(	O
logsigma	double
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
w0	double
>=	O
1.0	int
)	O
return	O
1.0	int
;	O
eps	double
=	O
a1	double
*	O
a1	double
*	O
(	O
1.0	int
+	O
1.0	int
/	O
(	O
(	O
double	O
)	O
(	O
n	int
-	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
w0	double
<=	O
eps	double
)	O
return	O
0.0	int
;	O
u	double
=	O
log	(double)->(double)
(	O
(	O
w0	double
-	O
eps	double
)	O
/	O
(	O
1.0	int
-	O
w0	double
)	O
)	O
;	O
if	O
(	O
w0	double
<	O
lowhigh	array(array(double))
[	O
n	int
-	O
4	int
]	O
[	O
0	int
]	O
||	O
w0	double
>	O
lowhigh	array(array(double))
[	O
n	int
-	O
4	int
]	O
[	O
1	int
]	O
)	O
return	O
0.0	int
/	O
0.0	int
;	O
if	O
(	O
u	double
<	O
1.4	int
)	O
r	double
=	O
0	int
;	O
else	O
{	O
r	double
=	O
1	int
;	O
u	double
=	O
log	(double)->(double)
(	O
u	double
)	O
;	O
if	O
(	O
!	O
finite	(double)->(int)
(	O
u	double
)	O
)	O
return	O
0.0	int
/	O
0.0	int
;	O
}	O
u	double
=	O
poly	(array(double),double,int)->(double)
(	O
au	array(array(array(double)))
[	O
n	int
-	O
4	int
]	O
[	O
r	double
]	O
,	O
u	double
,	O
4	int
)	O
;	O
if	O
(	O
r	double
)	O
u	double
=	O
exp	(double)->(double)
(	O
u	double
)	O
;	O
u	double
=	O
exp	(double)->(double)
(	O
u	double
)	O
;	O
return	O
SIXOVERPI	int
*	O
(	O
asin	(double)->(double)
(	O
sqrt	(double)->(double)
(	O
(	O
u	double
+	O
0.75	int
)	O
/	O
(	O
1.0	int
+	O
u	double
)	O
)	O
)	O
-	O
asin	(double)->(double)
(	O
sqrt	(double)->(double)
(	O
0.75	int
)	O
)	O
)	O
;	O
}	O
}	O
static	O
void	O
normal1	(array(double),array(double),int,array(char),array(char),array(int),int,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),int)->(void)
(	O
double	O
x	double
[	O
]	O
,	O
double	O
y	double
[	O
]	O
,	O
int	O
nobs	int
,	O
char	O
varname	array(char)
[	O
]	O
,	O
char	O
varlabel	array(char)
[	O
]	O
,	O
int	O
markv	array(int)
[	O
]	O
,	O
int	O
nmark	int
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
a	double
,	O
int	O
pn	int
)	O
{	O
int	O
titlelen	int
;	O
int	O
r	double
;	O
double	O
dr	double
;	O
double	O
dnobsp25	double
;	O
double	O
sum	double
;	O
double	O
ss	double
;	O
double	O
vtmp	double
;	O
double	O
tmp	double
;	O
double	O
sd	double
;	O
double	O
minx	double
,	O
maxx	double
;	O
double	O
*	O
swa	*(double)
;	O
int	O
k	int
;	O
double	O
w	double
;	O
double	O
prob	double
;	O
int	O
v	int
;	O
char	O
*	O
caption	array(char)
;	O
int	O
(	O
*	O
cmp	*(()->(int))
)	O
(	O
)	O
;	O
dap_swap	()->(void)
(	O
)	O
;	O
cmp	*(()->(int))
=	O
&	O
dblcmp	(*(double),*(double))->(int)
;	O
if	O
(	O
dap_title	*(char)
)	O
titlelen	int
=	O
strlen	(*(char))->(long)
(	O
dap_title	*(char)
)	O
+	O
1	int
;	O
else	O
titlelen	int
=	O
0	int
;	O
if	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
)	O
caption	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
titlelen	int
+	O
47	int
,	O
"dap_linelen"	*(char)
)	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
void	O
*	O
)	O
y	double
,	O
(	O
size_t	long
)	O
nobs	int
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
double	O
)	O
,	O
cmp	*(()->(int))
)	O
;	O
dnobsp25	double
=	O
(	O
(	O
double	O
)	O
nobs	int
)	O
+	O
0.25	int
;	O
for	O
(	O
r	double
=	O
0	int
,	O
sum	double
=	O
0.0	int
,	O
ss	double
=	O
0.0	int
,	O
minx	double
=	O
0.0	int
,	O
maxx	double
=	O
0.0	int
;	O
r	double
<	O
nobs	int
;	O
r	double
++	O
)	O
{	O
dr	double
=	O
(	O
double	O
)	O
r	double
;	O
x	double
[	O
r	double
]	O
=	O
-	O
zpoint	(double)->(double)
(	O
(	O
dr	double
+	O
0.625	int
)	O
/	O
dnobsp25	double
)	O
;	O
if	O
(	O
x	double
[	O
r	double
]	O
<	O
minx	double
)	O
minx	double
=	O
x	double
[	O
r	double
]	O
;	O
if	O
(	O
x	double
[	O
r	double
]	O
>	O
maxx	double
)	O
maxx	double
=	O
x	double
[	O
r	double
]	O
;	O
vtmp	double
=	O
y	double
[	O
r	double
]	O
;	O
if	O
(	O
r	double
)	O
{	O
tmp	double
=	O
sum	double
-	O
dr	double
*	O
vtmp	double
;	O
ss	double
+=	O
tmp	double
*	O
tmp	double
/	O
(	O
dr	double
*	O
(	O
dr	double
+	O
1.0	int
)	O
)	O
;	O
}	O
sum	double
+=	O
vtmp	double
;	O
}	O
sd	double
=	O
sqrt	(double)->(double)
(	O
ss	double
/	O
(	O
(	O
double	O
)	O
(	O
nobs	int
-	O
1	int
)	O
)	O
)	O
;	O
if	O
(	O
sd	double
==	O
0.0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal1) Zero standard deviation for %s\n"	*(char)
,	O
varname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
3	int
<=	O
nobs	int
&&	O
nobs	int
<=	O
2000	int
)	O
{	O
swa	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
nobs	int
/	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
geta	(array(double),int)->(void)
(	O
swa	*(double)
,	O
nobs	int
)	O
;	O
for	O
(	O
w	double
=	O
0.0	int
,	O
k	int
=	O
0	int
;	O
k	int
<	O
nobs	int
/	O
2	int
;	O
k	int
++	O
)	O
w	double
+=	O
swa	*(double)
[	O
k	int
]	O
*	O
(	O
y	double
[	O
k	int
]	O
-	O
y	double
[	O
nobs	int
-	O
1	int
-	O
k	int
]	O
)	O
;	O
w	double
*=	O
w	double
/	O
ss	double
;	O
if	O
(	O
(	O
prob	double
=	O
probw	(int,double,double)->(double)
(	O
nobs	int
,	O
w	double
,	O
swa	*(double)
[	O
0	int
]	O
)	O
)	O
<	O
0.001	int
)	O
prob	double
=	O
0.001	int
;	O
dap_free	(*(void),*(char))->(void)
(	O
swa	*(double)
,	O
""	*(char)
)	O
;	O
if	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
)	O
sprintf	(*(char),*(char))->(int)
(	O
caption	array(char)
,	O
"q-q plot: W|0| = %.4f, P[W < W|0|] = %.3f"	*(char)
,	O
w	double
,	O
prob	double
)	O
;	O
dap_head	(array(int),int)->(void)
(	O
markv	array(int)
,	O
nmark	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_lst	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Shapiro-Wilk test for %s:\nW0 = %.4f, P[W < W0] = %.3f\n"	*(char)
,	O
varname	array(char)
,	O
w	double
,	O
prob	double
)	O
;	O
}	O
else	O
if	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
"q-q plot"	*(char)
)	O
;	O
if	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
&&	O
dap_title	*(char)
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
"\n"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
dap_title	*(char)
)	O
;	O
}	O
if	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
&&	O
nmark	int
)	O
{	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
"\n"	*(char)
)	O
;	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
caption	array(char)
+	O
strlen	(*(char))->(long)
(	O
caption	array(char)
)	O
,	O
"%g"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
caption	array(char)
+	O
strlen	(*(char))->(long)
(	O
caption	array(char)
)	O
,	O
"%d"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
else	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
}	O
if	O
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
)	O
{	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
NULL	O
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
a	double
+	O
pn	int
)	O
;	O
for	O
(	O
r	double
=	O
0	int
;	O
r	double
<	O
nobs	int
;	O
r	double
++	O
)	O
pict_point	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),double,double)->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
x	double
[	O
r	double
]	O
,	O
y	double
[	O
r	double
]	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
]	O
.	O
pict_type	array(char)
,	O
"CIRC"	*(char)
)	O
;	O
sum	double
/=	O
(	O
double	O
)	O
nobs	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
pict_line	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),double,double,double,double)->(void)
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
minx	double
,	O
sd	double
*	O
minx	double
+	O
sum	double
,	O
maxx	double
,	O
sd	double
*	O
maxx	double
+	O
sum	double
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
pn	int
]	O
.	O
pict_r	double
=	O
0.05	int
*	O
pict_autoaxes	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),array(char),array(char),array(char),*(()->(double)),*(()->(double)),array(char),int)->(double)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
"z"	*(char)
,	O
varlabel	array(char)
,	O
"-0 NXDIGITS3"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
caption	array(char)
,	O
PORTRAIT	int
)	O
;	O
free	(*(void))->(void)
(	O
caption	array(char)
)	O
;	O
}	O
dap_swap	()->(void)
(	O
)	O
;	O
}	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
normal	(*(char),*(char),*(char),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
variable	*(char)
,	O
char	O
*	O
marks	array(char)
,	O
int	O
nplots	int
)	O
{	O
char	O
*	O
varname	array(char)
;	O
char	O
*	O
varlabel	array(char)
;	O
int	O
s	int
,	O
t	double
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
a	double
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
int	O
nobs	int
;	O
int	O
nnan	int
;	O
double	O
*	O
x	double
,	O
*	O
y	double
;	O
int	O
pn	int
;	O
int	O
vy	int
;	O
int	O
more	int
;	O
varname	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_namelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
varlabel	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
if	O
(	O
nplots	int
)	O
{	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
3	int
*	O
nplots	int
*	O
sizeof	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
)	O
,	O
""	*(char)
)	O
;	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
nplots	int
;	O
a	double
=	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
2	int
*	O
nplots	int
;	O
}	O
else	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
)	O
NULL	O
;	O
x	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
y	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
variable	*(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(normal) No variable specified.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
t	double
=	O
0	int
;	O
variable	*(char)
[	O
t	double
]	O
==	O
' '	O
;	O
t	double
++	O
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
variable	*(char)
[	O
t	double
]	O
&&	O
variable	*(char)
[	O
t	double
]	O
!=	O
' '	O
&&	O
variable	*(char)
[	O
t	double
]	O
!=	O
'`'	O
;	O
t	double
++	O
)	O
{	O
if	O
(	O
s	int
<	O
dap_namelen	int
)	O
varname	array(char)
[	O
s	int
++	O
]	O
=	O
variable	*(char)
[	O
t	double
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) Variable name too long: %s\n"	*(char)
,	O
variable	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
varname	array(char)
[	O
s	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
variable	*(char)
[	O
t	double
]	O
==	O
' '	O
)	O
t	double
++	O
;	O
s	int
=	O
0	int
;	O
if	O
(	O
variable	*(char)
[	O
t	double
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
t	double
++	O
;	O
variable	*(char)
[	O
t	double
]	O
&&	O
variable	*(char)
[	O
t	double
]	O
!=	O
' '	O
&&	O
variable	*(char)
[	O
t	double
]	O
!=	O
'`'	O
;	O
t	double
++	O
)	O
{	O
if	O
(	O
s	int
<	O
dap_linelen	int
)	O
varlabel	array(char)
[	O
s	int
++	O
]	O
=	O
variable	*(char)
[	O
t	double
]	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) Variable label too long: %s\n"	*(char)
,	O
variable	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
varlabel	array(char)
[	O
s	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
varlabel	array(char)
,	O
varname	array(char)
)	O
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(normal) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
(	O
vy	int
=	O
dap_varnum	(array(char))->(int)
(	O
varname	array(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) Variable unknown: %s\n"	*(char)
,	O
varname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
vy	int
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) Variable is not double variable: %s\n"	*(char)
,	O
varname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
nobs	int
=	O
0	int
,	O
nnan	int
=	O
0	int
,	O
pn	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
if	O
(	O
!	O
nplots	int
||	O
pn	int
<	O
nplots	int
)	O
{	O
normal1	(array(double),array(double),int,array(char),array(char),array(int),int,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),int)->(void)
(	O
x	double
,	O
y	double
,	O
nobs	int
,	O
varname	array(char)
,	O
varlabel	array(char)
,	O
markv	array(int)
,	O
nmark	int
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
a	double
,	O
pn	int
++	O
)	O
;	O
if	O
(	O
nnan	int
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) %d NaNs\n"	*(char)
,	O
nnan	int
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) More plots than specified by nplots (%d)\n"	*(char)
,	O
nplots	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
nobs	int
=	O
0	int
;	O
nnan	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
y	double
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
vy	int
]	O
;	O
if	O
(	O
finite	(double)->(int)
(	O
y	double
[	O
nobs	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(normal) Too many points\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
x	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
y	double
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varname	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
varlabel	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
static	O
double	O
arint	(double)->(double)
(	O
double	O
x	double
)	O
{	O
double	O
i	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
i	int
=	O
rint	(double)->(double)
(	O
x	double
)	O
)	O
==	O
0.0	int
)	O
return	O
0.0	int
;	O
else	O
return	O
i	int
;	O
}	O
static	O
void	O
histo1	(array(double),array(array(double)),int,array(int),int,array(char),*(char),*(()->(double)),array(int),int,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),int)->(void)
(	O
double	O
x	double
[	O
]	O
,	O
double	O
xw	array(array(double))
[	O
]	O
[	O
2	int
]	O
,	O
int	O
nobs	int
,	O
int	O
varv	array(int)
[	O
]	O
,	O
int	O
nbars	int
,	O
char	O
xname	array(char)
[	O
]	O
,	O
char	O
*	O
style	array(char)
,	O
double	O
(	O
*	O
xfunct	*(()->(double))
)	O
(	O
)	O
,	O
int	O
markv	array(int)
[	O
]	O
,	O
int	O
nmark	int
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
a	double
,	O
int	O
pn	int
)	O
{	O
int	O
titlelen	int
;	O
char	O
*	O
caption	array(char)
;	O
int	O
s	int
;	O
int	O
w	double
;	O
char	O
*	O
word	*(char)
;	O
char	O
*	O
axspec	array(char)
;	O
double	O
*	O
h	*(double)
;	O
double	O
*	O
part	*(double)
;	O
int	O
equal	int
;	O
int	O
height	int
;	O
int	O
whole	int
;	O
double	O
min	double
,	O
max	double
;	O
double	O
xlen	double
,	O
xspace	double
;	O
static	O
char	O
htitle	array(char)
[	O
19	int
]	O
;	O
double	O
width	double
;	O
double	O
dnobs	double
;	O
double	O
dnbars	double
;	O
int	O
b	double
;	O
int	O
xn	int
;	O
int	O
xnm1	int
;	O
int	O
v	int
;	O
double	O
maxy	double
;	O
int	O
(	O
*	O
cmp	*(()->(int))
)	O
(	O
)	O
;	O
cmp	*(()->(int))
=	O
&	O
dblcmp	(*(double),*(double))->(int)
;	O
if	O
(	O
dap_title	*(char)
)	O
titlelen	int
=	O
strlen	(*(char))->(long)
(	O
dap_title	*(char)
)	O
+	O
1	int
;	O
else	O
titlelen	int
=	O
0	int
;	O
caption	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
titlelen	int
+	O
dap_linelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
axspec	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
style	array(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
word	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_namelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
h	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
dap_maxbars	int
,	O
""	*(char)
)	O
;	O
part	*(double)
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
double	O
)	O
*	O
(	O
dap_maxbars	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
nbars	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(histo1) Number of bars is zero.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
equal	int
=	O
1	int
;	O
height	int
=	O
UNSPEC	int
;	O
whole	int
=	O
0	int
;	O
htitle	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
x	double
)	O
{	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
void	O
*	O
)	O
x	double
,	O
(	O
size_t	long
)	O
nobs	int
,	O
(	O
size_t	long
)	O
sizeof	O
(	O
double	O
)	O
,	O
cmp	*(()->(int))
)	O
;	O
part	*(double)
[	O
0	int
]	O
=	O
x	double
[	O
0	int
]	O
;	O
part	*(double)
[	O
nbars	int
]	O
=	O
x	double
[	O
nobs	int
-	O
1	int
]	O
;	O
}	O
else	O
{	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
(	O
void	O
*	O
)	O
xw	array(array(double))
,	O
(	O
size_t	long
)	O
nobs	int
,	O
(	O
size_t	long
)	O
(	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
,	O
cmp	*(()->(int))
)	O
;	O
part	*(double)
[	O
0	int
]	O
=	O
xw	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
;	O
part	*(double)
[	O
nbars	int
]	O
=	O
xw	array(array(double))
[	O
nobs	int
-	O
1	int
]	O
[	O
0	int
]	O
;	O
}	O
maxy	double
=	O
0.0	int
;	O
axspec	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
style	array(char)
)	O
{	O
for	O
(	O
s	int
=	O
0	int
;	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
;	O
s	int
++	O
)	O
;	O
while	O
(	O
style	array(char)
[	O
s	int
]	O
)	O
{	O
for	O
(	O
w	double
=	O
0	int
;	O
style	array(char)
[	O
s	int
]	O
&&	O
style	array(char)
[	O
s	int
]	O
!=	O
' '	O
;	O
)	O
{	O
if	O
(	O
w	double
<	O
dap_namelen	int
)	O
word	*(char)
[	O
w	double
++	O
]	O
=	O
style	array(char)
[	O
s	int
++	O
]	O
;	O
else	O
{	O
word	*(char)
[	O
w	double
]	O
=	O
'\0'	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histo1) Style word too long: %s\n"	*(char)
,	O
word	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
word	*(char)
[	O
w	double
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
word	*(char)
,	O
"EQUAL"	*(char)
)	O
)	O
equal	int
=	O
1	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
word	*(char)
,	O
"VARIABLE"	*(char)
)	O
)	O
equal	int
=	O
0	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
word	*(char)
,	O
"COUNT"	*(char)
)	O
)	O
height	int
=	O
COUNT	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
word	*(char)
,	O
"PERCENT"	*(char)
)	O
)	O
height	int
=	O
PERCENT	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
word	*(char)
,	O
"FRACTION"	*(char)
)	O
)	O
height	int
=	O
FRACTION	int
;	O
else	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
word	*(char)
,	O
"ROUND"	*(char)
)	O
)	O
whole	int
=	O
1	int
;	O
else	O
{	O
strcat	(*(char),*(char))->(*(char))
(	O
axspec	array(char)
,	O
word	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
axspec	array(char)
,	O
" "	*(char)
)	O
;	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
word	*(char)
,	O
"MINX"	*(char)
,	O
4	int
)	O
)	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
word	*(char)
+	O
4	int
,	O
"%lf"	*(char)
,	O
&	O
part	*(double)
[	O
0	int
]	O
)	O
!=	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histo1) bad MINX specification: %s\n"	*(char)
,	O
word	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
word	*(char)
,	O
"MAXX"	*(char)
,	O
4	int
)	O
)	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
word	*(char)
+	O
4	int
,	O
"%lf"	*(char)
,	O
&	O
part	*(double)
[	O
nbars	int
]	O
)	O
!=	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histo1) bad MAXX specification: %s\n"	*(char)
,	O
word	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
while	O
(	O
style	array(char)
[	O
s	int
]	O
==	O
' '	O
)	O
s	int
++	O
;	O
}	O
}	O
if	O
(	O
equal	int
)	O
{	O
switch	O
(	O
height	int
)	O
{	O
case	O
UNSPEC	int
:	O
case	O
COUNT	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
htitle	array(char)
,	O
"Count"	*(char)
)	O
;	O
break	O
;	O
case	O
PERCENT	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
htitle	array(char)
,	O
"Percent"	*(char)
)	O
;	O
break	O
;	O
case	O
FRACTION	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
htitle	array(char)
,	O
"Fraction"	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
height	int
)	O
{	O
case	O
COUNT	int
:	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(histo1) Can't use count with variable width bars.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
PERCENT	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
htitle	array(char)
,	O
"Density (Percent)"	*(char)
)	O
;	O
break	O
;	O
case	O
UNSPEC	int
:	O
case	O
FRACTION	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
htitle	array(char)
,	O
"Density (Fraction)"	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
dnobs	double
=	O
(	O
double	O
)	O
nobs	int
;	O
dnbars	double
=	O
(	O
double	O
)	O
nbars	int
;	O
if	O
(	O
whole	int
)	O
{	O
xlen	double
=	O
1e5	int
/	O
(	O
part	*(double)
[	O
nbars	int
]	O
-	O
part	*(double)
[	O
0	int
]	O
)	O
;	O
xlen	double
=	O
(	O
arint	(double)->(double)
(	O
xlen	double
*	O
part	*(double)
[	O
nbars	int
]	O
)	O
-	O
arint	(double)->(double)
(	O
xlen	double
*	O
part	*(double)
[	O
0	int
]	O
)	O
)	O
/	O
xlen	double
;	O
if	O
(	O
xlen	double
>=	O
1.0	int
)	O
{	O
for	O
(	O
xspace	double
=	O
1.0	int
;	O
dnbars	double
*	O
xspace	double
<	O
xlen	double
;	O
xspace	double
*=	O
dnbars	double
)	O
;	O
xspace	double
*=	O
ceil	(double)->(double)
(	O
xlen	double
/	O
xspace	double
)	O
/	O
dnbars	double
;	O
}	O
else	O
{	O
for	O
(	O
xspace	double
=	O
0.1	int
;	O
xspace	double
/	O
nbars	int
>	O
xlen	double
;	O
xspace	double
/=	O
nbars	int
)	O
;	O
xspace	double
*=	O
ceil	(double)->(double)
(	O
xlen	double
/	O
xspace	double
)	O
/	O
dnbars	double
;	O
}	O
part	*(double)
[	O
0	int
]	O
=	O
floor	(double)->(double)
(	O
part	*(double)
[	O
0	int
]	O
/	O
xspace	double
)	O
*	O
xspace	double
;	O
part	*(double)
[	O
nbars	int
]	O
=	O
ceil	(double)->(double)
(	O
part	*(double)
[	O
nbars	int
]	O
/	O
xspace	double
)	O
*	O
xspace	double
;	O
}	O
if	O
(	O
equal	int
)	O
{	O
width	double
=	O
(	O
part	*(double)
[	O
nbars	int
]	O
-	O
part	*(double)
[	O
0	int
]	O
)	O
/	O
dnbars	double
;	O
for	O
(	O
b	double
=	O
1	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
part	*(double)
[	O
b	double
]	O
=	O
part	*(double)
[	O
0	int
]	O
+	O
width	double
*	O
(	O
(	O
double	O
)	O
b	double
)	O
;	O
for	O
(	O
b	double
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
h	*(double)
[	O
b	double
]	O
=	O
0.0	int
;	O
for	O
(	O
xn	int
=	O
0	int
,	O
b	double
=	O
0	int
;	O
xn	int
<	O
nobs	int
;	O
xn	int
++	O
)	O
{	O
if	O
(	O
x	double
)	O
{	O
while	O
(	O
b	double
<	O
nbars	int
&&	O
x	double
[	O
xn	int
]	O
>	O
part	*(double)
[	O
b	double
+	O
1	int
]	O
)	O
b	double
++	O
;	O
h	*(double)
[	O
b	double
]	O
+=	O
1.0	int
;	O
}	O
else	O
{	O
while	O
(	O
b	double
<	O
nbars	int
&&	O
xw	array(array(double))
[	O
xn	int
]	O
[	O
0	int
]	O
>	O
part	*(double)
[	O
b	double
+	O
1	int
]	O
)	O
b	double
++	O
;	O
h	*(double)
[	O
b	double
]	O
+=	O
xw	array(array(double))
[	O
xn	int
]	O
[	O
1	int
]	O
;	O
}	O
}	O
for	O
(	O
b	double
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
{	O
switch	O
(	O
height	int
)	O
{	O
case	O
PERCENT	int
:	O
h	*(double)
[	O
b	double
]	O
*=	O
100.0	int
;	O
case	O
FRACTION	int
:	O
h	*(double)
[	O
b	double
]	O
/=	O
dnobs	double
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
b	double
=	O
1	int
,	O
xnm1	int
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
{	O
xn	int
=	O
(	O
int	O
)	O
rint	(double)->(double)
(	O
dnobs	double
*	O
(	O
(	O
double	O
)	O
b	double
)	O
/	O
dnbars	double
)	O
;	O
if	O
(	O
x	double
)	O
part	*(double)
[	O
b	double
]	O
=	O
x	double
[	O
xn	int
]	O
;	O
else	O
part	*(double)
[	O
b	double
]	O
=	O
xw	array(array(double))
[	O
xn	int
]	O
[	O
0	int
]	O
;	O
if	O
(	O
part	*(double)
[	O
b	double
]	O
>	O
part	*(double)
[	O
b	double
-	O
1	int
]	O
)	O
h	*(double)
[	O
b	double
]	O
=	O
(	O
(	O
double	O
)	O
(	O
xn	int
-	O
xnm1	int
)	O
)	O
/	O
(	O
(	O
part	*(double)
[	O
b	double
]	O
-	O
part	*(double)
[	O
b	double
-	O
1	int
]	O
)	O
*	O
dnobs	double
)	O
;	O
else	O
h	*(double)
[	O
b	double
]	O
=	O
0.0	int
;	O
if	O
(	O
height	int
==	O
PERCENT	int
)	O
h	*(double)
[	O
b	double
]	O
*=	O
100.0	int
;	O
xnm1	int
=	O
xn	int
;	O
}	O
}	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
NULL	O
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
)	O
;	O
pict_initpict	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
a	double
+	O
pn	int
)	O
;	O
for	O
(	O
b	double
=	O
0	int
;	O
b	double
<	O
nbars	int
;	O
b	double
++	O
)	O
pict_rectangle	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),double,double,double,double)->(void)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
part	*(double)
[	O
b	double
]	O
,	O
0.0	int
,	O
part	*(double)
[	O
b	double
+	O
1	int
]	O
-	O
part	*(double)
[	O
b	double
]	O
,	O
h	*(double)
[	O
b	double
]	O
)	O
;	O
caption	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
dap_title	*(char)
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
dap_title	*(char)
)	O
;	O
if	O
(	O
nmark	int
)	O
{	O
if	O
(	O
dap_title	*(char)
)	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
"\n"	*(char)
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nmark	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
v	int
)	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
" "	*(char)
)	O
;	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
DBL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
caption	array(char)
+	O
strlen	(*(char))->(long)
(	O
caption	array(char)
)	O
,	O
"%g"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
==	O
INT	int
)	O
sprintf	(*(char),*(char))->(int)
(	O
caption	array(char)
+	O
strlen	(*(char))->(long)
(	O
caption	array(char)
)	O
,	O
"%d"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
else	O
strcat	(*(char),*(char))->(*(char))
(	O
caption	array(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
}	O
}	O
pict_autoaxes	(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),array(char),array(char),array(char),*(()->(double)),*(()->(double)),array(char),int)->(double)
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
pn	int
,	O
xname	array(char)
,	O
htitle	array(char)
,	O
axspec	array(char)
,	O
xfunct	*(()->(double))
,	O
NULL	O
,	O
caption	array(char)
,	O
PORTRAIT	int
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
caption	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
axspec	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
word	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
h	*(double)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
part	*(double)
,	O
""	*(char)
)	O
;	O
}	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
histogram	(*(char),*(char),*(char),int,*(char),*(()->(double)),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
vars	*(char)
,	O
char	O
*	O
marks	array(char)
,	O
int	O
nbars	int
,	O
char	O
*	O
style	array(char)
,	O
double	O
(	O
*	O
xfunct	*(()->(double))
)	O
(	O
)	O
,	O
int	O
nplots	int
)	O
{	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
a	double
;	O
int	O
*	O
markv	array(int)
;	O
int	O
nmark	int
;	O
int	O
varv	array(int)
[	O
2	int
]	O
;	O
int	O
nvar	int
;	O
int	O
nobs	int
;	O
double	O
*	O
x	double
;	O
double	O
(	O
*	O
xw	array(array(double))
)	O
[	O
2	int
]	O
;	O
char	O
*	O
xwname	*(char)
;	O
char	O
*	O
xname	array(char)
;	O
int	O
pn	int
;	O
int	O
v	int
;	O
int	O
mv	int
;	O
int	O
nnan	int
;	O
int	O
more	int
;	O
markv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
xwname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
2	int
*	O
(	O
dap_namelen	int
+	O
1	int
)	O
,	O
""	*(char)
)	O
;	O
xname	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_linelen	int
+	O
1	int
,	O
""	*(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
2	int
*	O
nplots	int
*	O
sizeof	O
(	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
)	O
,	O
""	*(char)
)	O
;	O
a	double
=	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
+	O
nplots	int
;	O
if	O
(	O
!	O
fname	array(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(histogram) No dataset name given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
nmark	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
marks	array(char)
,	O
markv	array(int)
,	O
dap_maxvar	int
)	O
;	O
if	O
(	O
!	O
vars	*(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"(histogram) No variable given.\n"	*(char)
,	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
plotparse	(*(char),*(char),*(char),*(char))->(void)
(	O
vars	*(char)
,	O
xwname	*(char)
,	O
xname	array(char)
,	O
NULL	O
)	O
;	O
nvar	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
xwname	*(char)
,	O
varv	array(int)
,	O
dap_maxvar	int
)	O
;	O
for	O
(	O
v	int
=	O
0	int
;	O
v	int
<	O
nvar	int
;	O
v	int
++	O
)	O
{	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
varv	array(int)
[	O
v	int
]	O
]	O
!=	O
DBL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histogram) Variable is not double variable: %s\n"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_nam	*(*(char))
[	O
varv	array(int)
[	O
v	int
]	O
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
nvar	int
==	O
1	int
)	O
{	O
x	double
=	O
(	O
double	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxval	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
xw	array(array(double))
=	O
(	O
double	O
(	O
*	O
)	O
[	O
2	int
]	O
)	O
NULL	O
;	O
}	O
else	O
if	O
(	O
nvar	int
==	O
2	int
)	O
{	O
xw	array(array(double))
=	O
(	O
double	O
(	O
*	O
)	O
[	O
2	int
]	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
dap_maxval	int
*	O
2	int
*	O
sizeof	O
(	O
double	O
)	O
,	O
""	*(char)
)	O
;	O
x	double
=	O
(	O
double	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histogram) Variable list contains more than two variables: %s\n"	*(char)
,	O
vars	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
nobs	int
=	O
0	int
,	O
nnan	int
=	O
0	int
,	O
pn	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
markv	array(int)
,	O
nmark	int
)	O
)	O
{	O
dap_swap	()->(void)
(	O
)	O
;	O
if	O
(	O
nnan	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histogram) %d missing values for:"	*(char)
,	O
nnan	int
)	O
;	O
for	O
(	O
mv	int
=	O
0	int
;	O
mv	int
<	O
nmark	int
;	O
mv	int
++	O
)	O
{	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
' '	O
,	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
mv	int
]	O
]	O
==	O
DBL	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
markv	array(int)
[	O
mv	int
]	O
]	O
)	O
;	O
else	O
if	O
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_len	*(int)
[	O
markv	array(int)
[	O
mv	int
]	O
]	O
==	O
INT	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d"	*(char)
,	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_int	*(int)
[	O
markv	array(int)
[	O
mv	int
]	O
]	O
)	O
;	O
else	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
markv	array(int)
[	O
mv	int
]	O
]	O
,	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
putc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
dap_log	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
nobs	int
)	O
{	O
if	O
(	O
pn	int
<	O
nplots	int
)	O
histo1	(array(double),array(array(double)),int,array(int),int,array(char),*(char),*(()->(double)),array(int),int,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),int)->(void)
(	O
x	double
,	O
xw	array(array(double))
,	O
nobs	int
,	O
varv	array(int)
,	O
nbars	int
,	O
xname	array(char)
,	O
style	array(char)
,	O
xfunct	*(()->(double))
,	O
markv	array(int)
,	O
nmark	int
,	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
,	O
a	double
,	O
pn	int
++	O
)	O
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histogram) More plots than specified by nplots (%d)\n"	*(char)
,	O
nplots	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
dap_swap	()->(void)
(	O
)	O
;	O
nobs	int
=	O
0	int
;	O
nnan	int
=	O
0	int
;	O
}	O
if	O
(	O
nobs	int
<	O
dap_maxval	int
)	O
{	O
if	O
(	O
nvar	int
==	O
1	int
)	O
{	O
x	double
[	O
nobs	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
if	O
(	O
finite	(double)->(int)
(	O
x	double
[	O
nobs	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
else	O
{	O
xw	array(array(double))
[	O
nobs	int
]	O
[	O
0	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
;	O
xw	array(array(double))
[	O
nobs	int
]	O
[	O
1	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
1	int
]	O
]	O
;	O
if	O
(	O
finite	(double)->(int)
(	O
xw	array(array(double))
[	O
nobs	int
]	O
[	O
0	int
]	O
)	O
&&	O
finite	(double)->(int)
(	O
xw	array(array(double))
[	O
nobs	int
]	O
[	O
1	int
]	O
)	O
)	O
nobs	int
++	O
;	O
else	O
nnan	int
++	O
;	O
}	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(histogram) Too many points\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
nvar	int
==	O
1	int
)	O
dap_free	(*(void),*(char))->(void)
(	O
x	double
,	O
""	*(char)
)	O
;	O
else	O
dap_free	(*(void),*(char))->(void)
(	O
xw	array(array(double))
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
markv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xwname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
xname	array(char)
,	O
""	*(char)
)	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
plotlinreg	(*(char),*(char),*(char),*(char),*(char),int,double)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
ylist0	*(char)
,	O
char	O
*	O
x1list0	*(char)
,	O
char	O
*	O
style	array(char)
,	O
char	O
*	O
marks	array(char)
,	O
int	O
nmarks	int
,	O
double	O
level	double
)	O
{	O
char	O
*	O
ylist	array(char)
;	O
char	O
*	O
x1list	array(char)
;	O
int	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
int	O
varv	array(int)
[	O
1	int
]	O
;	O
int	O
typen	int
;	O
int	O
sortord	array(int)
[	O
4	int
]	O
;	O
int	O
s	int
;	O
char	O
*	O
mnsname	*(char)
;	O
char	O
*	O
regname	*(char)
;	O
char	O
*	O
srtarg	*(char)
;	O
char	O
*	O
srtname	*(char)
;	O
char	O
*	O
plotvars	*(char)
;	O
char	O
*	O
plotmarks	*(char)
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
int	O
pn	int
;	O
char	O
*	O
plotstyle	*(char)
;	O
ylist	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
ylist0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
x1list	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
x1list0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
0	int
;	O
ylist0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
&&	O
ylist0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
!=	O
'`'	O
;	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
)	O
ylist	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
ylist0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
;	O
ylist	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
'\0'	O
;	O
for	O
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
0	int
;	O
x1list0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
&&	O
x1list0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
!=	O
'`'	O
;	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
)	O
x1list	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
x1list0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
;	O
x1list	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
'\0'	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
dap_err	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"(plotlinreg) missing type variable in %s\n"	*(char)
,	O
fname	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
step	()->(int)
(	O
)	O
;	O
for	O
(	O
s	int
=	O
0	int
;	O
s	int
<	O
4	int
;	O
s	int
++	O
)	O
sortord	array(int)
[	O
s	int
]	O
=	O
s	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"LOWER"	*(char)
)	O
<	O
0	int
)	O
{	O
sortord	array(int)
[	O
0	int
]	O
=	O
1	int
;	O
sortord	array(int)
[	O
1	int
]	O
=	O
0	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"PRED"	*(char)
)	O
<	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"UPPER"	*(char)
)	O
<	O
0	int
)	O
{	O
sortord	array(int)
[	O
1	int
]	O
=	O
2	int
;	O
sortord	array(int)
[	O
2	int
]	O
=	O
1	int
;	O
}	O
else	O
{	O
sortord	array(int)
[	O
1	int
]	O
=	O
3	int
;	O
sortord	array(int)
[	O
2	int
]	O
=	O
1	int
;	O
sortord	array(int)
[	O
3	int
]	O
=	O
2	int
;	O
}	O
dap_list	(array(char),array(int),int)->(int)
(	O
ylist	array(char)
,	O
varv	array(int)
,	O
1	int
)	O
;	O
dap_list	(array(char),array(int),int)->(int)
(	O
x1list	array(char)
,	O
varv	array(int)
,	O
1	int
)	O
;	O
mnsname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
".mns"	*(char)
)	O
;	O
regname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
regname	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
regname	*(char)
,	O
".reg"	*(char)
)	O
;	O
srtname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
regname	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
regname	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
".srt"	*(char)
)	O
;	O
means	(array(char),array(char),array(char),array(char))->(void)
(	O
fname	array(char)
,	O
x1list	array(char)
,	O
"STEP100"	*(char)
,	O
marks	array(char)
)	O
;	O
linreg	(array(char),array(char),array(char),array(char),array(char),array(char),double)->(void)
(	O
fname	array(char)
,	O
ylist	array(char)
,	O
""	*(char)
,	O
x1list	array(char)
,	O
marks	array(char)
,	O
mnsname	*(char)
,	O
level	double
)	O
;	O
dataset	*(char)
(	O
fname	array(char)
,	O
regname	*(char)
,	O
"APPEND"	*(char)
)	O
;	O
srtarg	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
x1list	array(char)
)	O
+	O
9	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
marks	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
" _type_ "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
x1list	array(char)
)	O
;	O
sort	(array(char),array(char),array(char))->(void)
(	O
regname	*(char)
,	O
srtarg	*(char)
,	O
""	*(char)
)	O
;	O
plotvars	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
x1list0	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
ylist0	*(char)
)	O
+	O
2	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
x1list0	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
" "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
ylist0	*(char)
)	O
;	O
plotmarks	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
"_type_"	*(char)
)	O
+	O
2	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotmarks	*(char)
,	O
marks	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotmarks	*(char)
,	O
" _type_"	*(char)
)	O
;	O
plotstyle	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
style	array(char)
)	O
+	O
4	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotstyle	*(char)
,	O
"o4 "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotstyle	*(char)
,	O
style	array(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
plot	(*(char),*(char),*(char),*(char),*(()->(double)),*(()->(double)),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
srtname	*(char)
,	O
plotvars	*(char)
,	O
plotmarks	*(char)
,	O
plotstyle	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
4	int
*	O
nmarks	int
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
nmarks	int
;	O
pn	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
sortord	array(int)
[	O
0	int
]	O
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
sortord	array(int)
[	O
2	int
]	O
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
sortord	array(int)
[	O
3	int
]	O
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
sortord	array(int)
[	O
0	int
]	O
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
sortord	array(int)
[	O
3	int
]	O
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
ylist	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
x1list	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mnsname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
regname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
srtarg	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
srtname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotvars	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotmarks	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotstyle	*(char)
,	O
""	*(char)
)	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
plotlogreg	(*(char),*(char),*(char),*(char),int,*(char),int,double)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
char	O
*	O
fname	array(char)
,	O
char	O
*	O
yspec0	*(char)
,	O
char	O
*	O
x1list0	*(char)
,	O
char	O
*	O
style	array(char)
,	O
int	O
ngroups	int
,	O
char	O
*	O
marks	array(char)
,	O
int	O
nmarks	int
,	O
double	O
level	double
)	O
{	O
char	O
*	O
yspec	array(char)
;	O
char	O
*	O
x1list	array(char)
;	O
int	O
varv	array(int)
[	O
3	int
]	O
;	O
char	O
*	O
trlname	*(char)
;	O
int	O
trialsn	int
;	O
char	O
varspec	array(char)
[	O
12	int
]	O
;	O
char	O
*	O
grpname	*(char)
;	O
char	O
*	O
grparg	*(char)
;	O
char	O
*	O
grpvar	*(char)
;	O
char	O
*	O
mnsarg	*(char)
;	O
char	O
*	O
mnsname	*(char)
;	O
char	O
*	O
lgrname	*(char)
;	O
char	O
*	O
srtarg	*(char)
;	O
char	O
*	O
srtname	*(char)
;	O
char	O
*	O
plotvars	*(char)
;	O
char	O
*	O
plotmarks	*(char)
;	O
char	O
*	O
casevar	*(char)
;	O
char	O
*	O
casevar0	*(char)
;	O
int	O
c	int
;	O
int	O
cs	int
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
int	O
pn	int
;	O
char	O
*	O
plotstyle	*(char)
;	O
int	O
l0	int
,	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
yspec	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
yspec0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
x1list	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
x1list0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
for	O
(	O
l0	int
=	O
0	int
,	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
0	int
;	O
yspec0	*(char)
[	O
l0	int
]	O
&&	O
yspec0	*(char)
[	O
l0	int
]	O
!=	O
'`'	O
;	O
)	O
yspec	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
]	O
=	O
yspec0	*(char)
[	O
l0	int
++	O
]	O
;	O
if	O
(	O
yspec0	*(char)
[	O
l0	int
]	O
==	O
'`'	O
)	O
{	O
for	O
(	O
l0	int
++	O
;	O
yspec0	*(char)
[	O
l0	int
]	O
&&	O
yspec0	*(char)
[	O
l0	int
]	O
!=	O
'`'	O
;	O
l0	int
++	O
)	O
;	O
for	O
(	O
l0	int
++	O
;	O
yspec0	*(char)
[	O
l0	int
]	O
;	O
)	O
yspec	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
]	O
=	O
yspec0	*(char)
[	O
l0	int
++	O
]	O
;	O
}	O
yspec	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
'\0'	O
;	O
for	O
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
0	int
;	O
x1list0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
&&	O
x1list0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
!=	O
'`'	O
;	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
)	O
x1list	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
x1list0	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
;	O
x1list	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
'\0'	O
;	O
trlname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
trlname	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
trlname	*(char)
,	O
".trl"	*(char)
)	O
;	O
grpname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
trlname	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
grpname	*(char)
,	O
trlname	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
grpname	*(char)
,	O
".grp"	*(char)
)	O
;	O
srtname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
grpname	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
grpname	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
".srt"	*(char)
)	O
;	O
mnsname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
srtname	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
srtname	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
".mns"	*(char)
)	O
;	O
lgrname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
fname	array(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
lgrname	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
lgrname	*(char)
,	O
".lgr"	*(char)
)	O
;	O
grparg	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
x1list	array(char)
)	O
+	O
14	int
,	O
""	*(char)
)	O
;	O
grpvar	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
x1list	array(char)
)	O
+	O
3	int
,	O
""	*(char)
)	O
;	O
casevar	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
yspec	array(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
casevar0	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
yspec0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
mnsarg	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
yspec	array(char)
)	O
+	O
12	int
+	O
strlen	(*(char))->(long)
(	O
x1list	array(char)
)	O
,	O
""	*(char)
)	O
;	O
srtarg	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
x1list	array(char)
)	O
+	O
9	int
,	O
""	*(char)
)	O
;	O
plotvars	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
x1list0	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
yspec0	*(char)
)	O
+	O
2	int
,	O
""	*(char)
)	O
;	O
plotmarks	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
marks	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
"_type_"	*(char)
)	O
+	O
2	int
,	O
""	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
dap_list	(array(char),array(int),int)->(int)
(	O
x1list	array(char)
,	O
varv	array(int)
,	O
1	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
grpvar	*(char)
,	O
marks	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
grpvar	*(char)
,	O
" _"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
grpvar	*(char)
,	O
x1list	array(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
casevar	*(char)
,	O
yspec	array(char)
)	O
;	O
for	O
(	O
cs	int
=	O
0	int
;	O
casevar	*(char)
[	O
cs	int
]	O
==	O
' '	O
;	O
cs	int
++	O
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
casevar	*(char)
[	O
cs	int
]	O
&&	O
casevar	*(char)
[	O
cs	int
]	O
!=	O
' '	O
&&	O
casevar	*(char)
[	O
cs	int
]	O
!=	O
'/'	O
;	O
)	O
casevar	*(char)
[	O
c	int
++	O
]	O
=	O
casevar	*(char)
[	O
cs	int
++	O
]	O
;	O
casevar	*(char)
[	O
c	int
]	O
=	O
'\0'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
casevar0	*(char)
,	O
yspec0	*(char)
)	O
;	O
for	O
(	O
cs	int
=	O
0	int
;	O
casevar0	*(char)
[	O
cs	int
]	O
==	O
' '	O
;	O
cs	int
++	O
)	O
;	O
for	O
(	O
c	int
=	O
0	int
;	O
casevar0	*(char)
[	O
cs	int
]	O
&&	O
casevar0	*(char)
[	O
cs	int
]	O
!=	O
'/'	O
;	O
)	O
casevar0	*(char)
[	O
c	int
++	O
]	O
=	O
casevar0	*(char)
[	O
cs	int
++	O
]	O
;	O
casevar0	*(char)
[	O
c	int
]	O
=	O
'\0'	O
;	O
inset	(array(char))->(void)
(	O
fname	array(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
varspec	array(char)
,	O
"_ntrials %d"	*(char)
,	O
DBL	O
)	O
;	O
trialsn	int
=	O
dap_vd	(array(char),int)->(int)
(	O
varspec	array(char)
,	O
0	int
)	O
;	O
outset	(array(char),array(char))->(void)
(	O
trlname	*(char)
,	O
""	*(char)
)	O
;	O
dap_parsey	(array(char),array(int))->(void)
(	O
yspec	array(char)
,	O
varv	array(int)
)	O
;	O
while	O
(	O
step	()->(int)
(	O
)	O
)	O
{	O
if	O
(	O
varv	array(int)
[	O
1	int
]	O
>=	O
0	int
)	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
trialsn	int
]	O
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
1	int
]	O
]	O
;	O
else	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
trialsn	int
]	O
=	O
-	O
varv	array(int)
[	O
1	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
grparg	*(char)
,	O
x1list	array(char)
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
grparg	*(char)
+	O
strlen	(*(char))->(long)
(	O
grparg	*(char)
)	O
,	O
" %d#"	*(char)
,	O
ngroups	int
)	O
;	O
group	(array(char),array(char),array(char))->(void)
(	O
trlname	*(char)
,	O
grparg	*(char)
,	O
marks	array(char)
)	O
;	O
sort	(array(char),array(char),array(char))->(void)
(	O
grpname	*(char)
,	O
grpvar	*(char)
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mnsarg	*(char)
,	O
casevar	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnsarg	*(char)
,	O
" _ntrials "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnsarg	*(char)
,	O
x1list	array(char)
)	O
;	O
means	(array(char),array(char),array(char),array(char))->(void)
(	O
srtname	*(char)
,	O
mnsarg	*(char)
,	O
"MEAN"	*(char)
,	O
grpvar	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
mnsname	*(char)
)	O
;	O
outset	(array(char),array(char))->(void)
(	O
grpname	*(char)
,	O
""	*(char)
)	O
;	O
trialsn	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_ntrials"	*(char)
)	O
;	O
dap_list	(array(char),array(int),int)->(int)
(	O
casevar	*(char)
,	O
varv	array(int)
,	O
1	int
)	O
;	O
while	O
(	O
step	()->(int)
(	O
)	O
)	O
{	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
varv	array(int)
[	O
0	int
]	O
]	O
/=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
trialsn	int
]	O
;	O
output	()->(void)
(	O
)	O
;	O
}	O
means	(array(char),array(char),array(char),array(char))->(void)
(	O
fname	array(char)
,	O
x1list	array(char)
,	O
"STEP100"	*(char)
,	O
marks	array(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
fname	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
".mns"	*(char)
)	O
;	O
logreg	(array(char),array(char),array(char),array(char),array(char),array(char),double)->(void)
(	O
fname	array(char)
,	O
yspec	array(char)
,	O
""	*(char)
,	O
x1list	array(char)
,	O
marks	array(char)
,	O
mnsname	*(char)
,	O
level	double
)	O
;	O
dataset	*(char)
(	O
grpname	*(char)
,	O
lgrname	*(char)
,	O
"APPEND"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
marks	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
" _type_ "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
x1list	array(char)
)	O
;	O
sort	(array(char),array(char),array(char))->(void)
(	O
lgrname	*(char)
,	O
srtarg	*(char)
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
lgrname	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
".srt"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
x1list0	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
" "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
casevar0	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotmarks	*(char)
,	O
marks	array(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotmarks	*(char)
,	O
" _type_"	*(char)
)	O
;	O
plotstyle	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
style	array(char)
)	O
+	O
4	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotstyle	*(char)
,	O
"o4 "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotstyle	*(char)
,	O
style	array(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
plot	(*(char),*(char),*(char),*(char),*(()->(double)),*(()->(double)),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
srtname	*(char)
,	O
plotvars	*(char)
,	O
plotmarks	*(char)
,	O
plotstyle	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
4	int
*	O
nmarks	int
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
nmarks	int
;	O
pn	int
++	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
0	int
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
2	int
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
3	int
]	O
.	O
pict_type	array(char)
,	O
"LINE"	*(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
0	int
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
4	int
*	O
pn	int
+	O
3	int
]	O
.	O
pict_dash	double
=	O
4.0	int
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
yspec	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
x1list	array(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
trlname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
grpname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
grparg	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
grpvar	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mnsarg	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mnsname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
lgrname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
srtarg	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
srtname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotvars	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotmarks	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
casevar	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
casevar0	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotstyle	*(char)
,	O
""	*(char)
)	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
plotmeans	(*(char),*(char),*(char),*(char),*(char),*(char),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
char	O
*	O
dataset	*(char)
,	O
char	O
*	O
meanvar0	*(char)
,	O
char	O
*	O
varlist0	*(char)
,	O
char	O
*	O
errbar	*(char)
,	O
char	O
*	O
style	array(char)
,	O
char	O
*	O
partvars	*(char)
,	O
int	O
noverlay	int
)	O
{	O
int	O
meanv	array(int)
[	O
1	int
]	O
;	O
int	O
*	O
partv	array(int)
;	O
int	O
npartv	int
;	O
char	O
*	O
meanvar	*(char)
;	O
char	O
*	O
varlist	array(char)
;	O
int	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
char	O
*	O
mnslist	*(char)
;	O
char	O
*	O
mnsname	*(char)
;	O
char	O
*	O
errname	*(char)
;	O
char	O
*	O
srtname	*(char)
;	O
char	O
*	O
ebar	*(char)
;	O
char	O
*	O
overstr	*(char)
;	O
int	O
e	int
;	O
double	O
scale	double
;	O
int	O
typen	int
;	O
double	O
mean	double
;	O
double	O
err	double
;	O
int	O
n	int
;	O
char	O
*	O
srtarg	*(char)
;	O
char	O
*	O
plotvars	*(char)
;	O
char	O
*	O
plotparts	*(char)
;	O
pict	struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
*	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
int	O
more	int
;	O
int	O
nparts	int
;	O
int	O
pn	int
;	O
partv	array(int)
=	O
NULL	O
;	O
mean	double
=	O
0.0	int
;	O
err	double
=	O
0.0	int
;	O
meanvar	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
meanvar0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
meanvar	*(char)
,	O
meanvar0	*(char)
)	O
;	O
for	O
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
0	int
;	O
meanvar	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
&&	O
meanvar	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
!=	O
'`'	O
;	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
)	O
;	O
meanvar	*(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
'\0'	O
;	O
varlist	array(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
varlist0	*(char)
)	O
+	O
1	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
varlist	array(char)
,	O
varlist0	*(char)
)	O
;	O
for	O
(	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
0	int
;	O
varlist	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
&&	O
varlist	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
!=	O
'`'	O
;	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
++	O
)	O
;	O
varlist	array(char)
[	O
l	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
]	O
=	O
'\0'	O
;	O
if	O
(	O
partvars	*(char)
&&	O
partvars	*(char)
[	O
0	int
]	O
)	O
{	O
partv	array(int)
=	O
(	O
int	O
*	O
)	O
dap_malloc	(int,*(char))->(*(char))
(	O
sizeof	O
(	O
int	O
)	O
*	O
dap_maxvar	int
,	O
""	*(char)
)	O
;	O
mnslist	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
varlist	array(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
partvars	*(char)
)	O
+	O
2	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mnslist	*(char)
,	O
partvars	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnslist	*(char)
,	O
" "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnslist	*(char)
,	O
varlist	array(char)
)	O
;	O
plotparts	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
partvars	*(char)
)	O
+	O
8	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotparts	*(char)
,	O
partvars	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotparts	*(char)
,	O
" _type_"	*(char)
)	O
;	O
}	O
else	O
{	O
mnslist	*(char)
=	O
varlist	array(char)
;	O
plotparts	*(char)
=	O
"_type_"	*(char)
;	O
}	O
mnsname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
dataset	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
dataset	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
mnsname	*(char)
,	O
".mns"	*(char)
)	O
;	O
errname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
dataset	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
errname	*(char)
,	O
dataset	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
errname	*(char)
,	O
".err"	*(char)
)	O
;	O
srtname	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
errname	*(char)
)	O
+	O
5	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
errname	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtname	*(char)
,	O
".srt"	*(char)
)	O
;	O
ebar	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
errbar	*(char)
)	O
+	O
6	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
ebar	*(char)
,	O
"MEAN "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
ebar	*(char)
,	O
errbar	*(char)
)	O
;	O
overstr	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
8	int
+	O
strlen	(*(char))->(long)
(	O
style	array(char)
)	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
noverlay	int
<	O
1	int
)	O
noverlay	int
=	O
1	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
overstr	*(char)
,	O
"o%d %s"	*(char)
,	O
2	int
*	O
noverlay	int
,	O
style	array(char)
)	O
;	O
srtarg	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
mnslist	*(char)
)	O
+	O
8	int
,	O
""	*(char)
)	O
;	O
if	O
(	O
partvars	*(char)
&&	O
partvars	*(char)
[	O
0	int
]	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
partvars	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
" "	*(char)
)	O
;	O
}	O
else	O
srtarg	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
"_type_ "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
srtarg	*(char)
,	O
varlist	array(char)
)	O
;	O
plotvars	*(char)
=	O
dap_malloc	(int,*(char))->(*(char))
(	O
strlen	(*(char))->(long)
(	O
meanvar0	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
varlist0	*(char)
)	O
+	O
2	int
,	O
""	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
varlist0	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
" "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
plotvars	*(char)
,	O
meanvar0	*(char)
)	O
;	O
for	O
(	O
e	int
=	O
0	int
;	O
errbar	*(char)
[	O
e	int
]	O
==	O
' '	O
;	O
e	int
++	O
)	O
;	O
while	O
(	O
errbar	*(char)
[	O
e	int
]	O
&&	O
errbar	*(char)
[	O
e	int
]	O
!=	O
' '	O
)	O
e	int
++	O
;	O
ebar	*(char)
[	O
e	int
+	O
5	int
]	O
=	O
'\0'	O
;	O
while	O
(	O
errbar	*(char)
[	O
e	int
]	O
==	O
' '	O
)	O
e	int
++	O
;	O
if	O
(	O
errbar	*(char)
[	O
e	int
]	O
)	O
{	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
errbar	*(char)
+	O
e	int
,	O
"%lf"	*(char)
,	O
&	O
scale	double
)	O
!=	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: bad scale in call to plotmeans: %s\n"	*(char)
,	O
dap_dapname	*(char)
,	O
errbar	*(char)
+	O
e	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
else	O
scale	double
=	O
1.0	int
;	O
means	(array(char),array(char),array(char),array(char))->(void)
(	O
dataset	*(char)
,	O
meanvar	*(char)
,	O
ebar	*(char)
,	O
mnslist	*(char)
)	O
;	O
inset	(array(char))->(void)
(	O
mnsname	*(char)
)	O
;	O
outset	(array(char),array(char))->(void)
(	O
errname	*(char)
,	O
""	*(char)
)	O
;	O
dap_list	(array(char),array(int),int)->(int)
(	O
varlist	array(char)
,	O
meanv	array(int)
,	O
1	int
)	O
;	O
dap_list	(array(char),array(int),int)->(int)
(	O
meanvar	*(char)
,	O
meanv	array(int)
,	O
1	int
)	O
;	O
if	O
(	O
partvars	*(char)
&&	O
partvars	*(char)
[	O
0	int
]	O
)	O
npartv	int
=	O
dap_list	(array(char),array(int),int)->(int)
(	O
partvars	*(char)
,	O
partv	array(int)
,	O
dap_maxvar	int
)	O
;	O
else	O
npartv	int
=	O
0	int
;	O
if	O
(	O
(	O
typen	int
=	O
dap_varnum	(array(char))->(int)
(	O
"_type_"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: missing _type_ variable for plotmeans\n"	*(char)
,	O
dap_dapname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
n	int
=	O
0	int
,	O
nparts	int
=	O
0	int
,	O
more	int
=	O
1	int
;	O
more	int
;	O
)	O
{	O
more	int
=	O
step	()->(int)
(	O
)	O
;	O
if	O
(	O
more	int
)	O
{	O
if	O
(	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MEAN"	*(char)
)	O
)	O
mean	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
meanv	array(int)
[	O
0	int
]	O
]	O
;	O
else	O
err	double
=	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
meanv	array(int)
[	O
0	int
]	O
]	O
;	O
if	O
(	O
++	O
n	int
==	O
2	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"MEAN"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
meanv	array(int)
[	O
0	int
]	O
]	O
=	O
mean	double
;	O
output	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_str	*(*(char))
[	O
typen	int
]	O
,	O
"BAR"	*(char)
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
meanv	array(int)
[	O
0	int
]	O
]	O
=	O
mean	double
-	O
err	double
*	O
scale	double
;	O
output	()->(void)
(	O
)	O
;	O
dap_obs	array(struct(*(int),*(*(int)),*(double),*(*(double)),*(*(char)),*(int),*(*(char)),*(int),*(int),*(int),int,int,int,int))
[	O
0	int
]	O
.	O
do_dbl	*(double)
[	O
meanv	array(int)
[	O
0	int
]	O
]	O
=	O
mean	double
+	O
err	double
*	O
scale	double
;	O
output	()->(void)
(	O
)	O
;	O
n	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
dap_newpart	(array(int),int)->(int)
(	O
partv	array(int)
,	O
npartv	int
)	O
)	O
nparts	int
++	O
;	O
}	O
sort	(array(char),array(char),array(char))->(void)
(	O
errname	*(char)
,	O
srtarg	*(char)
,	O
""	*(char)
)	O
;	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
=	O
plot	(*(char),*(char),*(char),*(char),*(()->(double)),*(()->(double)),int)->(*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)),*(struct(int,array(char),double,*`,double,double,double,double,int,*`,*`,double,*`,*`,*`,double,double,double,double,*`,*`)))))
(	O
srtname	*(char)
,	O
plotvars	*(char)
,	O
plotparts	*(char)
,	O
overstr	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
2	int
*	O
nparts	int
)	O
;	O
for	O
(	O
pn	int
=	O
0	int
;	O
pn	int
<	O
nparts	int
;	O
pn	int
++	O
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
[	O
2	int
*	O
pn	int
]	O
.	O
pict_type	array(char)
,	O
"IBEA"	*(char)
)	O
;	O
if	O
(	O
partvars	*(char)
&&	O
partvars	*(char)
[	O
0	int
]	O
)	O
{	O
dap_free	(*(void),*(char))->(void)
(	O
partv	array(int)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
mnslist	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotparts	*(char)
,	O
""	*(char)
)	O
;	O
}	O
dap_free	(*(void),*(char))->(void)
(	O
mnsname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
errname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
srtname	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
ebar	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
overstr	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
srtarg	*(char)
,	O
""	*(char)
)	O
;	O
dap_free	(*(void),*(char))->(void)
(	O
plotvars	*(char)
,	O
""	*(char)
)	O
;	O
return	O
p	*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*(char)),*(char),double,*(*(double)),*(double),*(*(char)),double,double,double,double,*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`))),*(struct(int,array(char),double,*(array(double)),double,double,double,double,int,*(*`),*(char),double,*(*`),*(double),*(*`),double,double,double,double,*(struct`),*(struct`)))))
;	O
}	O
