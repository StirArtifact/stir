static	O
void	O
memory_out	()->(void)
(	O
)	O
{	O
write	(int,*(void),long)->(long)
(	O
2	int
,	O
"virtual memory exhausted\n"	*(char)
,	O
25	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
char	O
*	O
xmalloc	(int)->(*(char))
(	O
size	int
)	O
unsigned	O
size	int
;	O
{	O
register	O
char	O
*	O
tem	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	int
)	O
;	O
if	O
(	O
!	O
tem	*(char)
)	O
memory_out	()->(void)
(	O
)	O
;	O
return	O
tem	*(char)
;	O
}	O
static	O
char	O
*	O
xrealloc	(*(char),int)->(*(char))
(	O
ptr	*(char)
,	O
size	int
)	O
char	O
*	O
ptr	*(char)
;	O
unsigned	O
size	int
;	O
{	O
register	O
char	O
*	O
tem	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
ptr	*(char)
,	O
size	int
)	O
;	O
if	O
(	O
!	O
tem	*(char)
)	O
memory_out	()->(void)
(	O
)	O
;	O
return	O
tem	*(char)
;	O
}	O
static	O
char	O
*	O
term_entry	*(char)
;	O
static	O
char	O
*	O
tgetst1	()->(*(char))
(	O
)	O
;	O
static	O
char	O
*	O
find_capability	(*(char),*(char))->(*(char))
(	O
bp	*(char)
,	O
cap	*(char)
)	O
register	O
char	O
*	O
bp	*(char)
,	O
*	O
cap	*(char)
;	O
{	O
for	O
(	O
;	O
*	O
bp	*(char)
;	O
bp	*(char)
++	O
)	O
if	O
(	O
bp	*(char)
[	O
0	int
]	O
==	O
':'	O
&&	O
bp	*(char)
[	O
1	int
]	O
==	O
cap	*(char)
[	O
0	int
]	O
&&	O
bp	*(char)
[	O
2	int
]	O
==	O
cap	*(char)
[	O
1	int
]	O
)	O
return	O
&	O
bp	*(char)
[	O
4	int
]	O
;	O
return	O
NULL	O
;	O
}	O
int	O
tgetnum	(*(char))->(int)
(	O
cap	*(char)
)	O
char	O
*	O
cap	*(char)
;	O
{	O
register	O
char	O
*	O
ptr	*(char)
=	O
find_capability	(*(char),*(char))->(*(char))
(	O
term_entry	*(char)
,	O
cap	*(char)
)	O
;	O
if	O
(	O
!	O
ptr	*(char)
||	O
ptr	*(char)
[	O
-	O
1	int
]	O
!=	O
'#'	O
)	O
return	O
-	O
1	int
;	O
return	O
atoi	(*(char))->(int)
(	O
ptr	*(char)
)	O
;	O
}	O
int	O
tgetflag	(*(char))->(int)
(	O
cap	*(char)
)	O
char	O
*	O
cap	*(char)
;	O
{	O
register	O
char	O
*	O
ptr	*(char)
=	O
find_capability	(*(char),*(char))->(*(char))
(	O
term_entry	*(char)
,	O
cap	*(char)
)	O
;	O
return	O
ptr	*(char)
&&	O
ptr	*(char)
[	O
-	O
1	int
]	O
==	O
':'	O
;	O
}	O
char	O
*	O
tgetstr	(*(char),*(*(char)))->(*(char))
(	O
cap	*(char)
,	O
area	*(*(char))
)	O
char	O
*	O
cap	*(char)
;	O
char	O
*	O
*	O
area	*(*(char))
;	O
{	O
register	O
char	O
*	O
ptr	*(char)
=	O
find_capability	(*(char),*(char))->(*(char))
(	O
term_entry	*(char)
,	O
cap	*(char)
)	O
;	O
if	O
(	O
!	O
ptr	*(char)
||	O
(	O
ptr	*(char)
[	O
-	O
1	int
]	O
!=	O
'='	O
&&	O
ptr	*(char)
[	O
-	O
1	int
]	O
!=	O
'~'	O
)	O
)	O
return	O
NULL	O
;	O
return	O
tgetst1	()->(*(char))
(	O
ptr	*(char)
,	O
area	*(*(char))
)	O
;	O
}	O
static	O
char	O
esctab	array(char)
[	O
]	O
=	O
" \007\010  \033\014       \012   \015 \011 \013         "	*(char)
;	O
static	O
char	O
*	O
tgetst1	()->(*(char))
(	O
ptr	*(char)
,	O
area	*(*(char))
)	O
char	O
*	O
ptr	*(char)
;	O
char	O
*	O
*	O
area	*(*(char))
;	O
{	O
register	O
char	O
*	O
p	*(char)
,	O
*	O
r	*(char)
;	O
register	O
int	O
c	int
;	O
register	O
int	O
size	int
;	O
char	O
*	O
ret	*(char)
;	O
register	O
int	O
c1	int
;	O
if	O
(	O
!	O
ptr	*(char)
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
area	*(*(char))
)	O
{	O
p	*(char)
=	O
ptr	*(char)
;	O
while	O
(	O
(	O
c	int
=	O
*	O
p	*(char)
++	O
)	O
&&	O
c	int
!=	O
':'	O
&&	O
c	int
!=	O
'\n'	O
)	O
;	O
ret	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(int)->(*(char))
(	O
p	*(char)
-	O
ptr	*(char)
+	O
1	int
)	O
;	O
}	O
else	O
ret	*(char)
=	O
*	O
area	*(*(char))
;	O
p	*(char)
=	O
ptr	*(char)
;	O
r	*(char)
=	O
ret	*(char)
;	O
while	O
(	O
(	O
c	int
=	O
*	O
p	*(char)
++	O
)	O
&&	O
c	int
!=	O
':'	O
&&	O
c	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
c	int
==	O
'^'	O
)	O
{	O
c	int
=	O
*	O
p	*(char)
++	O
;	O
if	O
(	O
c	int
==	O
'?'	O
)	O
c	int
=	O
0177	int
;	O
else	O
c	int
&=	O
037	int
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'\\'	O
)	O
{	O
c	int
=	O
*	O
p	*(char)
++	O
;	O
if	O
(	O
c	int
>=	O
'0'	O
&&	O
c	int
<=	O
'7'	O
)	O
{	O
c	int
-=	O
'0'	O
;	O
size	int
=	O
0	int
;	O
while	O
(	O
++	O
size	int
<	O
3	int
&&	O
(	O
c1	int
=	O
*	O
p	*(char)
)	O
>=	O
'0'	O
&&	O
c1	int
<=	O
'7'	O
)	O
{	O
c	int
*=	O
8	int
;	O
c	int
+=	O
c1	int
-	O
'0'	O
;	O
p	*(char)
++	O
;	O
}	O
}	O
else	O
if	O
(	O
c	int
>=	O
0100	int
&&	O
c	int
<	O
0200	int
)	O
{	O
c1	int
=	O
esctab	array(char)
[	O
(	O
c	int
&	O
~	O
040	int
)	O
-	O
0100	int
]	O
;	O
if	O
(	O
c1	int
!=	O
' '	O
)	O
c	int
=	O
c1	int
;	O
}	O
}	O
*	O
r	*(char)
++	O
=	O
c	int
;	O
}	O
*	O
r	*(char)
=	O
'\0'	O
;	O
if	O
(	O
area	*(*(char))
)	O
*	O
area	*(*(char))
=	O
r	*(char)
+	O
1	int
;	O
return	O
ret	*(char)
;	O
}	O
short	O
ospeed	short
;	O
int	O
tputs_baud_rate	int
;	O
char	O
PC	char
;	O
static	O
int	O
speeds	array(int)
[	O
]	O
=	O
{	O
0	int
,	O
50	int
,	O
75	int
,	O
110	int
,	O
135	int
,	O
150	int
,	O
-	O
2	int
,	O
-	O
3	int
,	O
-	O
6	int
,	O
-	O
12	int
,	O
-	O
18	int
,	O
-	O
24	int
,	O
-	O
48	int
,	O
-	O
96	int
,	O
-	O
192	int
,	O
-	O
288	int
,	O
-	O
384	int
,	O
-	O
576	int
,	O
-	O
1152	int
}	O
;	O
void	O
tputs	(*(char),int,*(()->(int)))->(void)
(	O
str	*(char)
,	O
nlines	int
,	O
outfun	*(()->(int))
)	O
register	O
char	O
*	O
str	*(char)
;	O
int	O
nlines	int
;	O
register	O
int	O
(	O
*	O
outfun	*(()->(int))
)	O
(	O
)	O
;	O
{	O
register	O
int	O
padcount	int
=	O
0	int
;	O
register	O
int	O
speed	int
;	O
if	O
(	O
ospeed	short
==	O
0	int
)	O
speed	int
=	O
tputs_baud_rate	int
;	O
else	O
speed	int
=	O
speeds	array(int)
[	O
ospeed	short
]	O
;	O
if	O
(	O
!	O
str	*(char)
)	O
return	O
;	O
while	O
(	O
*	O
str	*(char)
>=	O
'0'	O
&&	O
*	O
str	*(char)
<=	O
'9'	O
)	O
{	O
padcount	int
+=	O
*	O
str	*(char)
++	O
-	O
'0'	O
;	O
padcount	int
*=	O
10	int
;	O
}	O
if	O
(	O
*	O
str	*(char)
==	O
'.'	O
)	O
{	O
str	*(char)
++	O
;	O
padcount	int
+=	O
*	O
str	*(char)
++	O
-	O
'0'	O
;	O
}	O
if	O
(	O
*	O
str	*(char)
==	O
'*'	O
)	O
{	O
str	*(char)
++	O
;	O
padcount	int
*=	O
nlines	int
;	O
}	O
while	O
(	O
*	O
str	*(char)
)	O
(	O
*	O
outfun	*(()->(int))
)	O
(	O
*	O
str	*(char)
++	O
)	O
;	O
padcount	int
*=	O
speed	int
;	O
padcount	int
+=	O
500	int
;	O
padcount	int
/=	O
1000	int
;	O
if	O
(	O
speed	int
<	O
0	int
)	O
padcount	int
=	O
-	O
padcount	int
;	O
else	O
{	O
padcount	int
+=	O
50	int
;	O
padcount	int
/=	O
100	int
;	O
}	O
while	O
(	O
padcount	int
--	O
>	O
0	int
)	O
(	O
*	O
outfun	*(()->(int))
)	O
(	O
PC	char
)	O
;	O
}	O
struct	O
buffer	struct(*(char),int,*(char),int,int)
{	O
char	O
*	O
beg	*(char)
;	O
int	O
size	int
;	O
char	O
*	O
ptr	*(char)
;	O
int	O
ateof	int
;	O
int	O
full	int
;	O
}	O
;	O
static	O
int	O
scan_file	()->(int)
(	O
)	O
;	O
static	O
char	O
*	O
gobble_line	()->(*(char))
(	O
)	O
;	O
static	O
int	O
compare_contin	()->(int)
(	O
)	O
;	O
static	O
int	O
name_match	()->(int)
(	O
)	O
;	O
int	O
tgetent	(*(char),*(char))->(int)
(	O
bp	*(char)
,	O
name	*(char)
)	O
char	O
*	O
bp	*(char)
,	O
*	O
name	*(char)
;	O
{	O
register	O
char	O
*	O
termcap_name	*(char)
;	O
register	O
int	O
fd	int
;	O
struct	O
buffer	struct(*(char),int,*(char),int,int)
buf	struct(*(char),int,*(char),int,int)
;	O
register	O
char	O
*	O
bp1	*(char)
;	O
char	O
*	O
bp2	*(char)
;	O
char	O
*	O
term	*(char)
;	O
int	O
malloc_size	int
=	O
0	int
;	O
register	O
int	O
c	int
;	O
char	O
*	O
tcenv	*(char)
;	O
char	O
*	O
indirect	*(char)
=	O
NULL	O
;	O
int	O
filep	int
;	O
if	O
(	O
bp	*(char)
)	O
term_entry	*(char)
=	O
bp	*(char)
;	O
termcap_name	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TERMCAP"	*(char)
)	O
;	O
if	O
(	O
termcap_name	*(char)
&&	O
*	O
termcap_name	*(char)
==	O
'\0'	O
)	O
termcap_name	*(char)
=	O
NULL	O
;	O
filep	int
=	O
termcap_name	*(char)
&&	O
valid_filename_p	O
(	O
termcap_name	*(char)
)	O
;	O
if	O
(	O
termcap_name	*(char)
&&	O
!	O
filep	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
getenv	(*(char))->(*(char))
(	O
"TERM"	*(char)
)	O
)	O
)	O
{	O
indirect	*(char)
=	O
tgetst1	()->(*(char))
(	O
find_capability	(*(char),*(char))->(*(char))
(	O
termcap_name	*(char)
,	O
"tc"	*(char)
)	O
,	O
(	O
char	O
*	O
*	O
)	O
0	int
)	O
;	O
if	O
(	O
!	O
indirect	*(char)
)	O
{	O
if	O
(	O
!	O
bp	*(char)
)	O
bp	*(char)
=	O
termcap_name	*(char)
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
bp	*(char)
,	O
termcap_name	*(char)
)	O
;	O
goto	O
ret	*(char)
;	O
}	O
else	O
{	O
tcenv	*(char)
=	O
termcap_name	*(char)
;	O
termcap_name	*(char)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
termcap_name	*(char)
||	O
!	O
filep	int
)	O
termcap_name	*(char)
=	O
TERMCAP_FILE	O
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
termcap_name	*(char)
,	O
O_RDONLY	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
return	O
-	O
1	int
;	O
buf	struct(*(char),int,*(char),int,int)
.	O
size	int
=	O
BUFSIZE	int
;	O
buf	struct(*(char),int,*(char),int,int)
.	O
beg	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(int)->(*(char))
(	O
buf	struct(*(char),int,*(char),int,int)
.	O
size	int
+	O
1	int
)	O
;	O
term	*(char)
=	O
indirect	*(char)
?	O
indirect	*(char)
:	O
name	*(char)
;	O
if	O
(	O
!	O
bp	*(char)
)	O
{	O
malloc_size	int
=	O
indirect	*(char)
?	O
strlen	(*(char))->(long)
(	O
tcenv	*(char)
)	O
+	O
1	int
:	O
buf	struct(*(char),int,*(char),int,int)
.	O
size	int
;	O
bp	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(int)->(*(char))
(	O
malloc_size	int
)	O
;	O
}	O
bp1	*(char)
=	O
bp	*(char)
;	O
if	O
(	O
indirect	*(char)
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
bp	*(char)
,	O
tcenv	*(char)
)	O
;	O
bp1	*(char)
+=	O
strlen	(*(char))->(long)
(	O
tcenv	*(char)
)	O
;	O
}	O
while	O
(	O
term	*(char)
)	O
{	O
if	O
(	O
scan_file	()->(int)
(	O
term	*(char)
,	O
fd	int
,	O
&	O
buf	struct(*(char),int,*(char),int,int)
)	O
==	O
0	int
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
free	(*(void))->(void)
(	O
buf	struct(*(char),int,*(char),int,int)
.	O
beg	*(char)
)	O
;	O
if	O
(	O
malloc_size	int
)	O
free	(*(void))->(void)
(	O
bp	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
term	*(char)
!=	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
term	*(char)
)	O
;	O
if	O
(	O
malloc_size	int
)	O
{	O
malloc_size	int
=	O
bp1	*(char)
-	O
bp	*(char)
+	O
buf	struct(*(char),int,*(char),int,int)
.	O
size	int
;	O
termcap_name	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(char),int)->(*(char))
(	O
bp	*(char)
,	O
malloc_size	int
)	O
;	O
bp1	*(char)
+=	O
termcap_name	*(char)
-	O
bp	*(char)
;	O
bp	*(char)
=	O
termcap_name	*(char)
;	O
}	O
bp2	*(char)
=	O
bp1	*(char)
;	O
termcap_name	*(char)
=	O
buf	struct(*(char),int,*(char),int,int)
.	O
ptr	*(char)
;	O
while	O
(	O
(	O
*	O
bp1	*(char)
++	O
=	O
c	int
=	O
*	O
termcap_name	*(char)
++	O
)	O
&&	O
c	int
!=	O
'\n'	O
)	O
if	O
(	O
c	int
==	O
'\\'	O
&&	O
*	O
termcap_name	*(char)
==	O
'\n'	O
)	O
{	O
bp1	*(char)
--	O
;	O
termcap_name	*(char)
++	O
;	O
}	O
*	O
bp1	*(char)
=	O
'\0'	O
;	O
term	*(char)
=	O
tgetst1	()->(*(char))
(	O
find_capability	(*(char),*(char))->(*(char))
(	O
bp2	*(char)
,	O
"tc"	*(char)
)	O
,	O
(	O
char	O
*	O
*	O
)	O
0	int
)	O
;	O
}	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
free	(*(void))->(void)
(	O
buf	struct(*(char),int,*(char),int,int)
.	O
beg	*(char)
)	O
;	O
if	O
(	O
malloc_size	int
)	O
bp	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(char),int)->(*(char))
(	O
bp	*(char)
,	O
bp1	*(char)
-	O
bp	*(char)
+	O
1	int
)	O
;	O
ret	*(char)
:	O
term_entry	*(char)
=	O
bp	*(char)
;	O
return	O
1	int
;	O
}	O
static	O
int	O
scan_file	()->(int)
(	O
str	*(char)
,	O
fd	int
,	O
bufp	*(struct(*(char),int,*(char),int,int))
)	O
char	O
*	O
str	*(char)
;	O
int	O
fd	int
;	O
register	O
struct	O
buffer	struct(*(char),int,*(char),int,int)
*	O
bufp	*(struct(*(char),int,*(char),int,int))
;	O
{	O
register	O
char	O
*	O
end	*(char)
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
=	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
beg	*(char)
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
=	O
0	int
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ateof	int
=	O
0	int
;	O
*	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
=	O
'\0'	O
;	O
lseek	(int,long,int)->(long)
(	O
fd	int
,	O
0L	int
,	O
0	int
)	O
;	O
while	O
(	O
!	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ateof	int
)	O
{	O
end	*(char)
=	O
NULL	O
;	O
do	O
{	O
end	*(char)
=	O
gobble_line	()->(*(char))
(	O
fd	int
,	O
bufp	*(struct(*(char),int,*(char),int,int))
,	O
end	*(char)
)	O
;	O
}	O
while	O
(	O
!	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ateof	int
&&	O
end	*(char)
[	O
-	O
2	int
]	O
==	O
'\\'	O
)	O
;	O
if	O
(	O
*	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
!=	O
'#'	O
&&	O
name_match	()->(int)
(	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
,	O
str	*(char)
)	O
)	O
return	O
1	int
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
=	O
end	*(char)
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
name_match	()->(int)
(	O
line	*(char)
,	O
name	*(char)
)	O
char	O
*	O
line	*(char)
,	O
*	O
name	*(char)
;	O
{	O
register	O
char	O
*	O
tem	*(char)
;	O
if	O
(	O
!	O
compare_contin	()->(int)
(	O
line	*(char)
,	O
name	*(char)
)	O
)	O
return	O
1	int
;	O
for	O
(	O
tem	*(char)
=	O
line	*(char)
;	O
*	O
tem	*(char)
&&	O
*	O
tem	*(char)
!=	O
'\n'	O
&&	O
*	O
tem	*(char)
!=	O
':'	O
;	O
tem	*(char)
++	O
)	O
if	O
(	O
*	O
tem	*(char)
==	O
'|'	O
&&	O
!	O
compare_contin	()->(int)
(	O
tem	*(char)
+	O
1	int
,	O
name	*(char)
)	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
compare_contin	()->(int)
(	O
str1	*(char)
,	O
str2	*(char)
)	O
register	O
char	O
*	O
str1	*(char)
,	O
*	O
str2	*(char)
;	O
{	O
register	O
int	O
c1	int
,	O
c2	int
;	O
while	O
(	O
1	int
)	O
{	O
c1	int
=	O
*	O
str1	*(char)
++	O
;	O
c2	int
=	O
*	O
str2	*(char)
++	O
;	O
while	O
(	O
c1	int
==	O
'\\'	O
&&	O
*	O
str1	*(char)
==	O
'\n'	O
)	O
{	O
str1	*(char)
++	O
;	O
while	O
(	O
(	O
c1	int
=	O
*	O
str1	*(char)
++	O
)	O
==	O
' '	O
||	O
c1	int
==	O
'\t'	O
)	O
;	O
}	O
if	O
(	O
c2	int
==	O
'\0'	O
)	O
{	O
if	O
(	O
c1	int
==	O
'|'	O
||	O
c1	int
==	O
':'	O
)	O
return	O
0	int
;	O
else	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
c1	int
!=	O
c2	int
)	O
return	O
1	int
;	O
}	O
}	O
static	O
char	O
*	O
gobble_line	()->(*(char))
(	O
fd	int
,	O
bufp	*(struct(*(char),int,*(char),int,int))
,	O
append_end	*(char)
)	O
int	O
fd	int
;	O
register	O
struct	O
buffer	struct(*(char),int,*(char),int,int)
*	O
bufp	*(struct(*(char),int,*(char),int,int))
;	O
char	O
*	O
append_end	*(char)
;	O
{	O
register	O
char	O
*	O
end	*(char)
;	O
register	O
int	O
nread	int
;	O
register	O
char	O
*	O
buf	struct(*(char),int,*(char),int,int)
=	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
beg	*(char)
;	O
register	O
char	O
*	O
tem	*(char)
;	O
if	O
(	O
!	O
append_end	*(char)
)	O
append_end	*(char)
=	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
;	O
while	O
(	O
1	int
)	O
{	O
end	*(char)
=	O
append_end	*(char)
;	O
while	O
(	O
*	O
end	*(char)
&&	O
*	O
end	*(char)
!=	O
'\n'	O
)	O
end	*(char)
++	O
;	O
if	O
(	O
*	O
end	*(char)
)	O
break	O
;	O
if	O
(	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ateof	int
)	O
return	O
buf	struct(*(char),int,*(char),int,int)
+	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
;	O
if	O
(	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
==	O
buf	struct(*(char),int,*(char),int,int)
)	O
{	O
if	O
(	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
==	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
size	int
)	O
{	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
size	int
*=	O
2	int
;	O
tem	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(char),int)->(*(char))
(	O
buf	struct(*(char),int,*(char),int,int)
,	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
size	int
+	O
1	int
)	O
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
=	O
(	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
-	O
buf	struct(*(char),int,*(char),int,int)
)	O
+	O
tem	*(char)
;	O
append_end	*(char)
=	O
(	O
append_end	*(char)
-	O
buf	struct(*(char),int,*(char),int,int)
)	O
+	O
tem	*(char)
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
beg	*(char)
=	O
buf	struct(*(char),int,*(char),int,int)
=	O
tem	*(char)
;	O
}	O
}	O
else	O
{	O
append_end	*(char)
-=	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
-	O
buf	struct(*(char),int,*(char),int,int)
;	O
bcopy	(*(void),*(void),long)->(void)
(	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
,	O
buf	struct(*(char),int,*(char),int,int)
,	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
-=	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
-	O
buf	struct(*(char),int,*(char),int,int)
)	O
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ptr	*(char)
=	O
buf	struct(*(char),int,*(char),int,int)
;	O
}	O
if	O
(	O
!	O
(	O
nread	int
=	O
read	(int,*(void),long)->(long)
(	O
fd	int
,	O
buf	struct(*(char),int,*(char),int,int)
+	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
,	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
size	int
-	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
)	O
)	O
)	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
ateof	int
=	O
1	int
;	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
+=	O
nread	int
;	O
buf	struct(*(char),int,*(char),int,int)
[	O
bufp	*(struct(*(char),int,*(char),int,int))
->	O
full	int
]	O
=	O
'\0'	O
;	O
}	O
return	O
end	*(char)
+	O
1	int
;	O
}	O
