static	O
const	O
unsigned	O
char	O
base64_2_bin	array(char)
[	O
256	int
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
62	int
,	O
0	int
,	O
62	int
,	O
0	int
,	O
63	int
,	O
52	int
,	O
53	int
,	O
54	int
,	O
55	int
,	O
56	int
,	O
57	int
,	O
58	int
,	O
59	int
,	O
60	int
,	O
61	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
10	int
,	O
11	int
,	O
12	int
,	O
13	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
24	int
,	O
25	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
63	int
,	O
0	int
,	O
26	int
,	O
27	int
,	O
28	int
,	O
29	int
,	O
30	int
,	O
31	int
,	O
32	int
,	O
33	int
,	O
34	int
,	O
35	int
,	O
36	int
,	O
37	int
,	O
38	int
,	O
39	int
,	O
40	int
,	O
41	int
,	O
42	int
,	O
43	int
,	O
44	int
,	O
45	int
,	O
46	int
,	O
47	int
,	O
48	int
,	O
49	int
,	O
50	int
,	O
51	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
static	O
bool	bool
WGET_GCC_CONST	O
_isbase64	(char)->(bool)
(	O
char	O
c	char
)	O
{	O
return	O
!	O
!	O
base64_2_bin	array(char)
[	O
(	O
unsigned	O
char	O
)	O
c	char
]	O
;	O
}	O
bool	bool
wget_base64_is_string	(*(char))->(bool)
(	O
const	O
char	O
*	O
src	*(char)
)	O
{	O
if	O
(	O
src	*(char)
)	O
{	O
while	O
(	O
_isbase64	(char)->(bool)
(	O
*	O
src	*(char)
)	O
)	O
src	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
src	*(char)
||	O
(	O
*	O
src	*(char)
==	O
'='	O
&&	O
src	*(char)
[	O
1	int
]	O
)	O
||	O
(	O
*	O
src	*(char)
==	O
'='	O
&&	O
src	*(char)
[	O
1	int
]	O
==	O
'='	O
&&	O
src	*(char)
[	O
2	int
]	O
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
size_t	long
wget_base64_decode	(*(char),*(char),long)->(long)
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
{	O
const	O
unsigned	O
char	O
*	O
usrc	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
src	*(char)
;	O
char	O
*	O
old	*(char)
=	O
dst	*(char)
;	O
int	O
extra	int
;	O
while	O
(	O
n	long
>	O
0	int
&&	O
!	O
_isbase64	(char)->(bool)
(	O
usrc	*(char)
[	O
n	long
-	O
1	int
]	O
)	O
)	O
n	long
--	O
;	O
extra	int
=	O
n	long
&	O
3	int
;	O
for	O
(	O
n	long
/=	O
4	int
;	O
n	long
>	O
0	int
;	O
n	long
--	O
,	O
usrc	*(char)
+=	O
4	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
0	int
]	O
]	O
<<	O
2	int
|	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
1	int
]	O
]	O
>>	O
4	int
)	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
1	int
]	O
]	O
&	O
0x0F	int
)	O
<<	O
4	int
|	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
2	int
]	O
]	O
>>	O
2	int
)	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
2	int
]	O
]	O
&	O
0x03	int
)	O
<<	O
6	int
|	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
3	int
]	O
]	O
)	O
;	O
}	O
switch	O
(	O
extra	int
)	O
{	O
case	O
1	int
:	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
0	int
]	O
]	O
<<	O
2	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
0	int
]	O
]	O
<<	O
2	int
|	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
1	int
]	O
]	O
>>	O
4	int
)	O
;	O
*	O
dst	*(char)
=	O
(	O
char	O
)	O
(	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
1	int
]	O
]	O
&	O
0x0F	int
)	O
<<	O
4	int
)	O
;	O
if	O
(	O
*	O
dst	*(char)
)	O
dst	*(char)
++	O
;	O
break	O
;	O
case	O
3	int
:	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
0	int
]	O
]	O
<<	O
2	int
|	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
1	int
]	O
]	O
>>	O
4	int
)	O
;	O
*	O
dst	*(char)
++	O
=	O
(	O
char	O
)	O
(	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
1	int
]	O
]	O
&	O
0x0F	int
)	O
<<	O
4	int
|	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
2	int
]	O
]	O
>>	O
2	int
)	O
;	O
*	O
dst	*(char)
=	O
(	O
char	O
)	O
(	O
(	O
base64_2_bin	array(char)
[	O
usrc	*(char)
[	O
2	int
]	O
]	O
&	O
0x03	int
)	O
<<	O
6	int
)	O
;	O
if	O
(	O
*	O
dst	*(char)
)	O
dst	*(char)
++	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
return	O
(	O
size_t	long
)	O
(	O
dst	*(char)
-	O
old	*(char)
)	O
;	O
}	O
char	O
*	O
wget_base64_decode_alloc	(*(char),long,*(long))->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
,	O
size_t	long
*	O
outlen	*(long)
)	O
{	O
char	O
*	O
dst	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
wget_base64_get_decoded_length	(long)->(long)
(	O
n	long
)	O
)	O
;	O
if	O
(	O
!	O
dst	*(char)
)	O
return	O
NULL	O
;	O
size_t	long
_outlen	long
=	O
wget_base64_decode	(*(char),*(char),long)->(long)
(	O
dst	*(char)
,	O
src	*(char)
,	O
n	long
)	O
;	O
if	O
(	O
outlen	*(long)
)	O
*	O
outlen	*(long)
=	O
_outlen	long
;	O
return	O
dst	*(char)
;	O
}	O
static	O
size_t	long
_wget_base64_encode	(*(char),*(char),long,int)->(long)
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
,	O
int	O
flags	int
)	O
{	O
static	O
const	O
char	O
base64unsafe	array(char)
[	O
64	int
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"	*(char)
;	O
static	O
const	O
char	O
base64urlsafe	array(char)
[	O
64	int
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"	*(char)
;	O
const	O
char	O
*	O
base64	*(char)
=	O
(	O
flags	int
&	O
WGET_BASE64_URLENCODE	int
)	O
?	O
base64urlsafe	array(char)
:	O
base64unsafe	array(char)
;	O
const	O
unsigned	O
char	O
*	O
usrc	*(char)
=	O
(	O
const	O
unsigned	O
char	O
*	O
)	O
src	*(char)
;	O
char	O
*	O
start	int
=	O
dst	*(char)
;	O
int	O
extra	int
=	O
n	long
%	O
3	int
;	O
for	O
(	O
n	long
/=	O
3	int
;	O
n	long
>	O
0	int
;	O
n	long
--	O
,	O
usrc	*(char)
+=	O
3	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
usrc	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
(	O
(	O
usrc	*(char)
[	O
0	int
]	O
&	O
3	int
)	O
<<	O
4	int
)	O
|	O
(	O
usrc	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
]	O
;	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
(	O
(	O
usrc	*(char)
[	O
1	int
]	O
&	O
15	int
)	O
<<	O
2	int
)	O
|	O
(	O
usrc	*(char)
[	O
2	int
]	O
>>	O
6	int
)	O
]	O
;	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
usrc	*(char)
[	O
2	int
]	O
&	O
0x3f	int
]	O
;	O
}	O
if	O
(	O
extra	int
==	O
1	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
usrc	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
(	O
usrc	*(char)
[	O
0	int
]	O
&	O
3	int
)	O
<<	O
4	int
]	O
;	O
*	O
dst	*(char)
++	O
=	O
'='	O
;	O
*	O
dst	*(char)
++	O
=	O
'='	O
;	O
}	O
else	O
if	O
(	O
extra	int
==	O
2	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
usrc	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
(	O
(	O
usrc	*(char)
[	O
0	int
]	O
&	O
3	int
)	O
<<	O
4	int
)	O
|	O
(	O
usrc	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
]	O
;	O
*	O
dst	*(char)
++	O
=	O
base64	*(char)
[	O
(	O
(	O
usrc	*(char)
[	O
1	int
]	O
&	O
15	int
)	O
<<	O
2	int
)	O
]	O
;	O
*	O
dst	*(char)
++	O
=	O
'='	O
;	O
}	O
*	O
dst	*(char)
=	O
0	int
;	O
return	O
(	O
size_t	long
)	O
(	O
dst	*(char)
-	O
start	int
)	O
;	O
}	O
size_t	long
wget_base64_encode	(*(char),*(char),long)->(long)
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
{	O
return	O
_wget_base64_encode	(*(char),*(char),long,int)->(long)
(	O
dst	*(char)
,	O
src	*(char)
,	O
n	long
,	O
0	int
)	O
;	O
}	O
size_t	long
wget_base64_urlencode	(*(char),*(char),long)->(long)
(	O
char	O
*	O
dst	*(char)
,	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
{	O
return	O
_wget_base64_encode	(*(char),*(char),long,int)->(long)
(	O
dst	*(char)
,	O
src	*(char)
,	O
n	long
,	O
WGET_BASE64_URLENCODE	int
)	O
;	O
}	O
char	O
*	O
wget_base64_encode_alloc	(*(char),long)->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	long
n	long
)	O
{	O
char	O
*	O
dst	*(char)
=	O
wget_malloc	(long)->(*(void))
(	O
wget_base64_get_encoded_length	(long)->(long)
(	O
n	long
)	O
)	O
;	O
if	O
(	O
dst	*(char)
)	O
wget_base64_encode	(*(char),*(char),long)->(long)
(	O
dst	*(char)
,	O
src	*(char)
,	O
n	long
)	O
;	O
return	O
dst	*(char)
;	O
}	O
char	O
*	O
wget_base64_encode_vprintf_alloc	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
)	O
{	O
char	O
*	O
data	*(void)
=	O
NULL	O
;	O
size_t	long
n	long
;	O
n	long
=	O
wget_vasprintf	(*(*(char)),*(char),array(struct(int,int,*(void),*(void))))->(long)
(	O
&	O
data	*(void)
,	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
data	*(void)
)	O
{	O
char	O
*	O
dst	*(char)
=	O
wget_base64_encode_alloc	(*(char),long)->(*(char))
(	O
data	*(void)
,	O
n	long
)	O
;	O
xfree	O
(	O
data	*(void)
)	O
;	O
return	O
dst	*(char)
;	O
}	O
return	O
NULL	O
;	O
}	O
char	O
*	O
wget_base64_encode_printf_alloc	(*(char))->(*(char))
(	O
const	O
char	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
char	O
*	O
dst	*(char)
;	O
va_list	array(struct(int,int,*(void),*(void)))
args	array(struct(int,int,*(void),*(void)))
;	O
va_start	O
(	O
args	array(struct(int,int,*(void),*(void)))
,	O
fmt	*(char)
)	O
;	O
dst	*(char)
=	O
wget_base64_encode_vprintf_alloc	(*(char),array(struct(int,int,*(void),*(void))))->(*(char))
(	O
fmt	*(char)
,	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
va_end	O
(	O
args	array(struct(int,int,*(void),*(void)))
)	O
;	O
return	O
dst	*(char)
;	O
}	O
size_t	long
wget_base64_get_decoded_length	(long)->(long)
(	O
size_t	long
len	long
)	O
{	O
return	O
(	O
(	O
len	long
+	O
3	int
)	O
/	O
4	int
)	O
*	O
3	int
+	O
1	int
;	O
}	O
size_t	long
wget_base64_get_encoded_length	(long)->(long)
(	O
size_t	long
len	long
)	O
{	O
return	O
(	O
(	O
len	long
+	O
2	int
)	O
/	O
3	int
)	O
*	O
4	int
+	O
1	int
;	O
}	O
