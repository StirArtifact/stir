static	O
char	O
rcsid	array(char)
[	O
]	O
=	O
"$Id: rpc_scan.c,v 1.1.1.1 2005/10/28 14:46:46 k0ro Exp $"	*(char)
;	O
static	O
int	O
pushed	int
=	O
0	int
;	O
static	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
lasttok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
static	O
void	O
unget_token	()->(void)
(	O
)	O
,	O
findstrconst	()->(void)
(	O
)	O
,	O
findconst	()->(void)
(	O
)	O
,	O
findkind	()->(void)
(	O
)	O
,	O
printdirective	()->(void)
(	O
)	O
,	O
docppline	()->(void)
(	O
)	O
;	O
static	O
int	O
cppline	()->(int)
(	O
)	O
,	O
directive	()->(int)
(	O
)	O
;	O
void	O
scan	()->(void)
(	O
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
if	O
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
expected1	()->(void)
(	O
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
}	O
void	O
scan2	()->(void)
(	O
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
if	O
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
&&	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
expected2	()->(void)
(	O
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
}	O
void	O
scan3	()->(void)
(	O
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
expect3	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect3	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
if	O
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
&&	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
&&	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
expect3	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
expected3	()->(void)
(	O
expect1	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
expect2	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
expect3	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
}	O
void	O
scan_num	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
switch	O
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
TOK_IDENT	int
:	O
break	O
;	O
default	O
:	O
error	()->(void)
(	O
"constant or identifier expected"	*(char)
)	O
;	O
}	O
}	O
void	O
peek	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
unget_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
}	O
int	O
peekscan	()->(int)
(	O
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
,	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
tok_kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
peek	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
if	O
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
expect	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
return	O
(	O
1	int
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
void	O
get_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
int	O
commenting	int
;	O
if	O
(	O
pushed	int
)	O
{	O
pushed	int
=	O
0	int
;	O
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
=	O
lasttok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
;	O
return	O
;	O
}	O
commenting	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
where	*(char)
==	O
0	int
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
!	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
curline	array(char)
,	O
MAXLINESIZE	int
,	O
fin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_EOF	int
;	O
*	O
where	*(char)
=	O
0	int
;	O
return	O
;	O
}	O
linenum	int
++	O
;	O
if	O
(	O
commenting	int
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
cppline	()->(int)
(	O
curline	array(char)
)	O
)	O
{	O
docppline	()->(void)
(	O
curline	array(char)
,	O
&	O
linenum	int
,	O
&	O
infilename	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
directive	()->(int)
(	O
curline	array(char)
)	O
)	O
{	O
printdirective	()->(void)
(	O
curline	array(char)
)	O
;	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
where	*(char)
=	O
curline	array(char)
;	O
}	O
else	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
where	*(char)
)	O
)	O
{	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
where	*(char)
)	O
)	O
{	O
where	*(char)
++	O
;	O
}	O
}	O
else	O
if	O
(	O
commenting	int
)	O
{	O
where	*(char)
++	O
;	O
if	O
(	O
endcomment	O
(	O
where	*(char)
)	O
)	O
{	O
where	*(char)
++	O
;	O
commenting	int
--	O
;	O
}	O
}	O
else	O
if	O
(	O
startcomment	O
(	O
where	*(char)
)	O
)	O
{	O
where	*(char)
+=	O
2	int
;	O
commenting	int
++	O
;	O
}	O
else	O
{	O
break	O
;	O
}	O
}	O
switch	O
(	O
*	O
where	*(char)
)	O
{	O
case	O
':'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_COLON	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
';'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_SEMICOLON	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
','	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_COMMA	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'='	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_EQUAL	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'*'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_STAR	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'['	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_LBRACKET	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
']'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_RBRACKET	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'{'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_LBRACE	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'}'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_RBRACE	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'('	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_LPAREN	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
')'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_RPAREN	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'<'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_LANGLE	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'>'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_RANGLE	int
;	O
where	*(char)
++	O
;	O
break	O
;	O
case	O
'"'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_STRCONST	int
;	O
findstrconst	()->(void)
(	O
&	O
where	*(char)
,	O
&	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
)	O
;	O
break	O
;	O
case	O
'-'	O
:	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_IDENT	int
;	O
findconst	()->(void)
(	O
&	O
where	*(char)
,	O
&	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
!	O
(	O
isalpha	(int)->(int)
(	O
*	O
where	*(char)
)	O
||	O
*	O
where	*(char)
==	O
'_'	O
)	O
)	O
{	O
char	O
buf	array(char)
[	O
100	int
]	O
;	O
char	O
*	O
p	*(char)
;	O
s_print	O
(	O
buf	array(char)
,	O
"illegal character in file: "	*(char)
)	O
;	O
p	*(char)
=	O
buf	array(char)
+	O
strlen	O
(	O
buf	array(char)
)	O
;	O
if	O
(	O
isprint	(int)->(int)
(	O
*	O
where	*(char)
)	O
)	O
{	O
s_print	O
(	O
p	*(char)
,	O
"%c"	*(char)
,	O
*	O
where	*(char)
)	O
;	O
}	O
else	O
{	O
s_print	O
(	O
p	*(char)
,	O
"%d"	*(char)
,	O
*	O
where	*(char)
)	O
;	O
}	O
error	()->(void)
(	O
buf	array(char)
)	O
;	O
}	O
findkind	()->(void)
(	O
&	O
where	*(char)
,	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
;	O
break	O
;	O
}	O
}	O
static	O
void	O
unget_token	()->(void)
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
lasttok	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
=	O
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
pushed	int
=	O
1	int
;	O
}	O
static	O
void	O
findstrconst	()->(void)
(	O
str	*(char)
,	O
val	*(char)
)	O
char	O
*	O
*	O
str	*(char)
;	O
char	O
*	O
*	O
val	*(char)
;	O
{	O
char	O
*	O
p	*(char)
;	O
int	O
size	int
;	O
p	*(char)
=	O
*	O
str	*(char)
;	O
do	O
{	O
*	O
p	*(char)
++	O
;	O
}	O
while	O
(	O
*	O
p	*(char)
&&	O
*	O
p	*(char)
!=	O
'"'	O
)	O
;	O
if	O
(	O
*	O
p	*(char)
==	O
0	int
)	O
{	O
error	()->(void)
(	O
"unterminated string constant"	*(char)
)	O
;	O
}	O
p	*(char)
++	O
;	O
size	int
=	O
p	*(char)
-	O
*	O
str	*(char)
;	O
*	O
val	*(char)
=	O
alloc	O
(	O
size	int
+	O
1	int
)	O
;	O
(	O
void	O
)	O
strncpy	O
(	O
*	O
val	*(char)
,	O
*	O
str	*(char)
,	O
size	int
)	O
;	O
(	O
*	O
val	*(char)
)	O
[	O
size	int
]	O
=	O
0	int
;	O
*	O
str	*(char)
=	O
p	*(char)
;	O
}	O
static	O
void	O
findconst	()->(void)
(	O
str	*(char)
,	O
val	*(char)
)	O
char	O
*	O
*	O
str	*(char)
;	O
char	O
*	O
*	O
val	*(char)
;	O
{	O
char	O
*	O
p	*(char)
;	O
int	O
size	int
;	O
p	*(char)
=	O
*	O
str	*(char)
;	O
if	O
(	O
*	O
p	*(char)
==	O
'0'	O
&&	O
*	O
(	O
p	*(char)
+	O
1	int
)	O
==	O
'x'	O
)	O
{	O
p	*(char)
++	O
;	O
do	O
{	O
p	*(char)
++	O
;	O
}	O
while	O
(	O
isxdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
do	O
{	O
p	*(char)
++	O
;	O
}	O
while	O
(	O
isdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
;	O
}	O
size	int
=	O
p	*(char)
-	O
*	O
str	*(char)
;	O
*	O
val	*(char)
=	O
alloc	O
(	O
size	int
+	O
1	int
)	O
;	O
(	O
void	O
)	O
strncpy	O
(	O
*	O
val	*(char)
,	O
*	O
str	*(char)
,	O
size	int
)	O
;	O
(	O
*	O
val	*(char)
)	O
[	O
size	int
]	O
=	O
0	int
;	O
*	O
str	*(char)
=	O
p	*(char)
;	O
}	O
static	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
symbols	array(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
[	O
]	O
=	O
{	O
{	O
TOK_CONST	int
,	O
"const"	*(char)
}	O
,	O
{	O
TOK_UNION	int
,	O
"union"	*(char)
}	O
,	O
{	O
TOK_SWITCH	int
,	O
"switch"	*(char)
}	O
,	O
{	O
TOK_CASE	int
,	O
"case"	*(char)
}	O
,	O
{	O
TOK_DEFAULT	int
,	O
"default"	*(char)
}	O
,	O
{	O
TOK_STRUCT	int
,	O
"struct"	*(char)
}	O
,	O
{	O
TOK_TYPEDEF	int
,	O
"typedef"	*(char)
}	O
,	O
{	O
TOK_ENUM	int
,	O
"enum"	*(char)
}	O
,	O
{	O
TOK_OPAQUE	int
,	O
"opaque"	*(char)
}	O
,	O
{	O
TOK_BOOL	int
,	O
"bool"	*(char)
}	O
,	O
{	O
TOK_VOID	int
,	O
"void"	*(char)
}	O
,	O
{	O
TOK_CHAR	int
,	O
"char"	*(char)
}	O
,	O
{	O
TOK_INT	int
,	O
"int"	*(char)
}	O
,	O
{	O
TOK_UNSIGNED	int
,	O
"unsigned"	*(char)
}	O
,	O
{	O
TOK_SHORT	int
,	O
"short"	*(char)
}	O
,	O
{	O
TOK_LONG	int
,	O
"long"	*(char)
}	O
,	O
{	O
TOK_FLOAT	int
,	O
"float"	*(char)
}	O
,	O
{	O
TOK_DOUBLE	int
,	O
"double"	*(char)
}	O
,	O
{	O
TOK_STRING	int
,	O
"string"	*(char)
}	O
,	O
{	O
TOK_PROGRAM	int
,	O
"program"	*(char)
}	O
,	O
{	O
TOK_VERSION	int
,	O
"version"	*(char)
}	O
,	O
{	O
TOK_EOF	int
,	O
"??????"	*(char)
}	O
,	O
}	O
;	O
static	O
void	O
findkind	()->(void)
(	O
mark	*(*(char))
,	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
)	O
char	O
*	O
*	O
mark	*(*(char))
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
{	O
int	O
len	int
;	O
token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char))
*	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
char	O
*	O
str	*(char)
;	O
str	*(char)
=	O
*	O
mark	*(*(char))
;	O
for	O
(	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
=	O
symbols	array(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
;	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
TOK_EOF	int
;	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
++	O
)	O
{	O
len	int
=	O
strlen	O
(	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
)	O
;	O
if	O
(	O
strncmp	O
(	O
str	*(char)
,	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
,	O
len	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
isalnum	(int)->(int)
(	O
str	*(char)
[	O
len	int
]	O
)	O
&&	O
str	*(char)
[	O
len	int
]	O
!=	O
'_'	O
)	O
{	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
=	O
s	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
;	O
*	O
mark	*(*(char))
=	O
str	*(char)
+	O
len	int
;	O
return	O
;	O
}	O
}	O
}	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
kind	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TOK_IDENT	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
isalnum	(int)->(int)
(	O
str	*(char)
[	O
len	int
]	O
)	O
||	O
str	*(char)
[	O
len	int
]	O
==	O
'_'	O
;	O
len	int
++	O
)	O
;	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
=	O
alloc	O
(	O
len	int
+	O
1	int
)	O
;	O
(	O
void	O
)	O
strncpy	O
(	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
,	O
str	*(char)
,	O
len	int
)	O
;	O
tokp	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char)))
->	O
str	*(char)
[	O
len	int
]	O
=	O
0	int
;	O
*	O
mark	*(*(char))
=	O
str	*(char)
+	O
len	int
;	O
}	O
static	O
int	O
cppline	()->(int)
(	O
line	*(char)
)	O
char	O
*	O
line	*(char)
;	O
{	O
return	O
(	O
line	*(char)
==	O
curline	array(char)
&&	O
*	O
line	*(char)
==	O
'#'	O
)	O
;	O
}	O
static	O
int	O
directive	()->(int)
(	O
line	*(char)
)	O
char	O
*	O
line	*(char)
;	O
{	O
return	O
(	O
line	*(char)
==	O
curline	array(char)
&&	O
*	O
line	*(char)
==	O
'%'	O
)	O
;	O
}	O
static	O
void	O
printdirective	()->(void)
(	O
line	*(char)
)	O
char	O
*	O
line	*(char)
;	O
{	O
f_print	O
(	O
fout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s"	*(char)
,	O
line	*(char)
+	O
1	int
)	O
;	O
}	O
static	O
void	O
docppline	()->(void)
(	O
line	*(char)
,	O
lineno	*(int)
,	O
fname	*(*(char))
)	O
char	O
*	O
line	*(char)
;	O
int	O
*	O
lineno	*(int)
;	O
char	O
*	O
*	O
fname	*(*(char))
;	O
{	O
char	O
*	O
file	*(char)
;	O
int	O
num	int
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
strncmp	O
(	O
line	*(char)
,	O
"#line"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
line	*(char)
+=	O
5	int
;	O
}	O
line	*(char)
++	O
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
line	*(char)
)	O
)	O
{	O
line	*(char)
++	O
;	O
}	O
num	int
=	O
atoi	(*(char))->(int)
(	O
line	*(char)
)	O
;	O
while	O
(	O
isdigit	(int)->(int)
(	O
*	O
line	*(char)
)	O
)	O
{	O
line	*(char)
++	O
;	O
}	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
line	*(char)
)	O
)	O
{	O
line	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
line	*(char)
!=	O
'"'	O
)	O
{	O
error	()->(void)
(	O
"preprocessor error"	*(char)
)	O
;	O
}	O
line	*(char)
++	O
;	O
p	*(char)
=	O
file	*(char)
=	O
alloc	O
(	O
strlen	O
(	O
line	*(char)
)	O
+	O
1	int
)	O
;	O
while	O
(	O
*	O
line	*(char)
&&	O
*	O
line	*(char)
!=	O
'"'	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
*	O
line	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
line	*(char)
==	O
0	int
)	O
{	O
error	()->(void)
(	O
"preprocessor error"	*(char)
)	O
;	O
}	O
*	O
p	*(char)
=	O
0	int
;	O
if	O
(	O
*	O
file	*(char)
==	O
0	int
)	O
{	O
*	O
fname	*(*(char))
=	O
NULL	O
;	O
}	O
else	O
{	O
*	O
fname	*(*(char))
=	O
file	*(char)
;	O
}	O
*	O
lineno	*(int)
=	O
num	int
-	O
1	int
;	O
}	O
