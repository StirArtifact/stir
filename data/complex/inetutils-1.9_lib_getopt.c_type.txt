char	O
*	O
optarg	*(char)
;	O
int	O
optind	int
=	O
1	int
;	O
int	O
opterr	int
=	O
1	int
;	O
int	O
optopt	int
=	O
'?'	O
;	O
static	O
struct	O
_getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
;	O
static	O
void	O
exchange	(*(*(char)),*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)))->(void)
(	O
char	O
*	O
*	O
argv	*(*(char))
,	O
struct	O
_getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
)	O
{	O
int	O
bottom	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
;	O
int	O
middle	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
;	O
int	O
top	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
char	O
*	O
tem	*(char)
;	O
while	O
(	O
top	int
>	O
middle	int
&&	O
middle	int
>	O
bottom	int
)	O
{	O
if	O
(	O
top	int
-	O
middle	int
>	O
middle	int
-	O
bottom	int
)	O
{	O
int	O
len	int
=	O
middle	int
-	O
bottom	int
;	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
tem	*(char)
=	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
=	O
argv	*(*(char))
[	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
]	O
=	O
tem	*(char)
;	O
SWAP_FLAGS	O
(	O
bottom	int
+	O
i	int
,	O
top	int
-	O
(	O
middle	int
-	O
bottom	int
)	O
+	O
i	int
)	O
;	O
}	O
top	int
-=	O
len	int
;	O
}	O
else	O
{	O
int	O
len	int
=	O
top	int
-	O
middle	int
;	O
register	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
tem	*(char)
=	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
bottom	int
+	O
i	int
]	O
=	O
argv	*(*(char))
[	O
middle	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
middle	int
+	O
i	int
]	O
=	O
tem	*(char)
;	O
SWAP_FLAGS	O
(	O
bottom	int
+	O
i	int
,	O
middle	int
+	O
i	int
)	O
;	O
}	O
bottom	int
+=	O
len	int
;	O
}	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
+=	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
-	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
)	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
}	O
static	O
const	O
char	O
*	O
_getopt_initialize	(int,*(*(char)),*(char),*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)),int)->(*(char))
(	O
int	O
argc	int
_GL_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
_GL_UNUSED	O
,	O
const	O
char	O
*	O
optstring	*(char)
,	O
struct	O
_getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
,	O
int	O
posixly_correct	int
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
NULL	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__posixly_correct	int
=	O
posixly_correct	int
||	O
!	O
!	O
getenv	(*(char))->(*(char))
(	O
"POSIXLY_CORRECT"	*(char)
)	O
;	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__ordering	enum(int,int,int)
=	O
RETURN_IN_ORDER	int
;	O
++	O
optstring	*(char)
;	O
}	O
else	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
'+'	O
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__ordering	enum(int,int,int)
=	O
REQUIRE_ORDER	int
;	O
++	O
optstring	*(char)
;	O
}	O
else	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__posixly_correct	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__ordering	enum(int,int,int)
=	O
REQUIRE_ORDER	int
;	O
else	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__ordering	enum(int,int,int)
=	O
PERMUTE	int
;	O
return	O
optstring	*(char)
;	O
}	O
int	O
_getopt_internal_r	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int),int,*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)),int)->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
const	O
char	O
*	O
optstring	*(char)
,	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
longopts	*(struct(*(char),int,*(int),int))
,	O
int	O
*	O
longind	*(int)
,	O
int	O
long_only	int
,	O
struct	O
_getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
,	O
int	O
posixly_correct	int
)	O
{	O
int	O
print_errors	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
opterr	int
;	O
if	O
(	O
argc	int
<	O
1	int
)	O
return	O
-	O
1	int
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
NULL	O
;	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
==	O
0	int
||	O
!	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__initialized	int
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
==	O
0	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
=	O
1	int
;	O
optstring	*(char)
=	O
_getopt_initialize	(int,*(*(char)),*(char),*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)),int)->(*(char))
(	O
argc	int
,	O
argv	*(*(char))
,	O
optstring	*(char)
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
,	O
posixly_correct	int
)	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__initialized	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
'-'	O
||	O
optstring	*(char)
[	O
0	int
]	O
==	O
'+'	O
)	O
optstring	*(char)
++	O
;	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
)	O
print_errors	int
=	O
0	int
;	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
==	O
NULL	O
||	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
==	O
'\0'	O
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
>	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
>	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__ordering	enum(int,int,int)
==	O
PERMUTE	int
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
!=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
&&	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
!=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
)	O
exchange	(*(*(char)),*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)))->(void)
(	O
(	O
char	O
*	O
*	O
)	O
argv	*(*(char))
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
)	O
;	O
else	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
!=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
while	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
<	O
argc	int
&&	O
NONOPTION_P	O
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
}	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
!=	O
argc	int
&&	O
!	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
,	O
"--"	*(char)
)	O
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
!=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
&&	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
!=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
)	O
exchange	(*(*(char)),*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)))->(void)
(	O
(	O
char	O
*	O
*	O
)	O
argv	*(*(char))
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
)	O
;	O
else	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
==	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
=	O
argc	int
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
=	O
argc	int
;	O
}	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
!=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__last_nonopt	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__first_nonopt	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
NONOPTION_P	O
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__ordering	enum(int,int,int)
==	O
REQUIRE_ORDER	int
)	O
return	O
-	O
1	int
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
]	O
;	O
return	O
1	int
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
(	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
+	O
1	int
+	O
(	O
longopts	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
&&	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
)	O
;	O
}	O
if	O
(	O
longopts	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
&&	O
(	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
(	O
long_only	int
&&	O
(	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
2	int
]	O
||	O
!	O
strchr	(*(char),int)->(*(char))
(	O
optstring	*(char)
,	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
1	int
]	O
)	O
)	O
)	O
)	O
)	O
{	O
char	O
*	O
nameend	*(char)
;	O
unsigned	O
int	O
namelen	int
;	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
p	*(struct(*(char),int,*(int),int))
;	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
pfound	*(struct(*(char),int,*(int),int))
=	O
NULL	O
;	O
struct	O
option_list	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`))))))
{	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
p	*(struct(*(char),int,*(int),int))
;	O
struct	O
option_list	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`))))))
*	O
next	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
}	O
*	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
NULL	O
;	O
int	O
exact	int
=	O
0	int
;	O
int	O
indfound	int
=	O
-	O
1	int
;	O
int	O
option_index	int
;	O
for	O
(	O
nameend	*(char)
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
;	O
*	O
nameend	*(char)
&&	O
*	O
nameend	*(char)
!=	O
'='	O
;	O
nameend	*(char)
++	O
)	O
;	O
namelen	int
=	O
nameend	*(char)
-	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
;	O
for	O
(	O
p	*(struct(*(char),int,*(int),int))
=	O
longopts	*(struct(*(char),int,*(int),int))
,	O
option_index	int
=	O
0	int
;	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
;	O
p	*(struct(*(char),int,*(int),int))
++	O
,	O
option_index	int
++	O
)	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
,	O
namelen	int
)	O
)	O
{	O
if	O
(	O
namelen	int
==	O
(	O
unsigned	O
int	O
)	O
strlen	(*(char))->(long)
(	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
)	O
{	O
pfound	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
indfound	int
=	O
option_index	int
;	O
exact	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
==	O
NULL	O
)	O
{	O
pfound	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
indfound	int
=	O
option_index	int
;	O
}	O
else	O
if	O
(	O
long_only	int
||	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
!=	O
p	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
||	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
!=	O
p	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
||	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
!=	O
p	*(struct(*(char),int,*(int),int))
->	O
val	int
)	O
{	O
struct	O
option_list	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`))))))
*	O
newp	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
newp	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
)	O
)	O
;	O
newp	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
->	O
p	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
newp	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
->	O
next	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
newp	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
}	O
}	O
if	O
(	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
!=	O
NULL	O
&&	O
!	O
exact	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
struct	O
option_list	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`))))))
first	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*`,int,*`,int)),*(struct(*`,*`)))))
;	O
first	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*`,int,*`,int)),*(struct(*`,*`)))))
.	O
p	*(struct(*(char),int,*(int),int))
=	O
pfound	*(struct(*(char),int,*(int),int))
;	O
first	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*`,int,*`,int)),*(struct(*`,*`)))))
.	O
next	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
&	O
first	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*`,int,*`,int)),*(struct(*`,*`)))))
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '%s' is ambiguous; possibilities:"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
)	O
;	O
do	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" '--%s'"	*(char)
,	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
->	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
->	O
next	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
}	O
while	O
(	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
!=	O
NULL	O
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
0	int
;	O
return	O
'?'	O
;	O
}	O
while	O
(	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
!=	O
NULL	O
)	O
{	O
struct	O
option_list	struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`))))))
*	O
pn	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
->	O
next	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
free	(*(void))->(void)
(	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
)	O
;	O
ambig_list	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
=	O
pn	*(struct(*(struct(*(char),int,*(int),int)),*(struct(*(struct`),*(struct`)))))
;	O
}	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
)	O
{	O
option_index	int
=	O
indfound	int
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
if	O
(	O
*	O
nameend	*(char)
)	O
{	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
nameend	*(char)
+	O
1	int
;	O
else	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
if	O
(	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
-	O
1	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '--%s' doesn't allow an argument\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '%c%s' doesn't allow an argument\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
-	O
1	int
]	O
[	O
0	int
]	O
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
}	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
return	O
'?'	O
;	O
}	O
}	O
else	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
==	O
1	int
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
<	O
argc	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
]	O
;	O
else	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '--%s' requires an argument\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
return	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
?	O
':'	O
:	O
'?'	O
;	O
}	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
if	O
(	O
longind	*(int)
!=	O
NULL	O
)	O
*	O
longind	*(int)
=	O
option_index	int
;	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
)	O
{	O
*	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
)	O
=	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
return	O
0	int
;	O
}	O
return	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
}	O
if	O
(	O
!	O
long_only	int
||	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
||	O
strchr	(*(char),int)->(*(char))
(	O
optstring	*(char)
,	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
if	O
(	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
1	int
]	O
==	O
'-'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: unrecognized option '--%s'\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: unrecognized option '%c%s'\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
]	O
[	O
0	int
]	O
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
}	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
(	O
char	O
*	O
)	O
""	*(char)
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
0	int
;	O
return	O
'?'	O
;	O
}	O
}	O
{	O
char	O
c	char
=	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
++	O
;	O
const	O
char	O
*	O
temp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
optstring	*(char)
,	O
c	char
)	O
;	O
if	O
(	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
==	O
'\0'	O
)	O
++	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
;	O
if	O
(	O
temp	*(char)
==	O
NULL	O
||	O
c	char
==	O
':'	O
||	O
c	char
==	O
';'	O
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: invalid option -- '%c'\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
c	char
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
c	char
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
temp	*(char)
[	O
0	int
]	O
==	O
'W'	O
&&	O
temp	*(char)
[	O
1	int
]	O
==	O
';'	O
)	O
{	O
char	O
*	O
nameend	*(char)
;	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
p	*(struct(*(char),int,*(int),int))
;	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
pfound	*(struct(*(char),int,*(int),int))
=	O
NULL	O
;	O
int	O
exact	int
=	O
0	int
;	O
int	O
ambig	int
=	O
0	int
;	O
int	O
indfound	int
=	O
0	int
;	O
int	O
option_index	int
;	O
if	O
(	O
longopts	*(struct(*(char),int,*(int),int))
==	O
NULL	O
)	O
goto	O
no_longs	O
;	O
if	O
(	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
!=	O
'\0'	O
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
}	O
else	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option requires an argument -- '%c'\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
c	char
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
c	char
;	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
)	O
c	char
=	O
':'	O
;	O
else	O
c	char
=	O
'?'	O
;	O
return	O
c	char
;	O
}	O
else	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
]	O
;	O
for	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
nameend	*(char)
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
;	O
*	O
nameend	*(char)
&&	O
*	O
nameend	*(char)
!=	O
'='	O
;	O
nameend	*(char)
++	O
)	O
;	O
for	O
(	O
p	*(struct(*(char),int,*(int),int))
=	O
longopts	*(struct(*(char),int,*(int),int))
,	O
option_index	int
=	O
0	int
;	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
;	O
p	*(struct(*(char),int,*(int),int))
++	O
,	O
option_index	int
++	O
)	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
,	O
nameend	*(char)
-	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
unsigned	O
int	O
)	O
(	O
nameend	*(char)
-	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
==	O
strlen	(*(char))->(long)
(	O
p	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
)	O
{	O
pfound	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
indfound	int
=	O
option_index	int
;	O
exact	int
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
==	O
NULL	O
)	O
{	O
pfound	*(struct(*(char),int,*(int),int))
=	O
p	*(struct(*(char),int,*(int),int))
;	O
indfound	int
=	O
option_index	int
;	O
}	O
else	O
if	O
(	O
long_only	int
||	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
!=	O
p	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
||	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
!=	O
p	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
||	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
!=	O
p	*(struct(*(char),int,*(int),int))
->	O
val	int
)	O
ambig	int
=	O
1	int
;	O
}	O
if	O
(	O
ambig	int
&&	O
!	O
exact	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '-W %s' is ambiguous\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
return	O
'?'	O
;	O
}	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
!=	O
NULL	O
)	O
{	O
option_index	int
=	O
indfound	int
;	O
if	O
(	O
*	O
nameend	*(char)
)	O
{	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
nameend	*(char)
+	O
1	int
;	O
else	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '-W %s' doesn't allow an argument\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
return	O
'?'	O
;	O
}	O
}	O
else	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
has_arg	int
==	O
1	int
)	O
{	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
<	O
argc	int
)	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
]	O
;	O
else	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option '-W %s' requires an argument\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
pfound	*(struct(*(char),int,*(int),int))
->	O
name	*(char)
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
return	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
?	O
':'	O
:	O
'?'	O
;	O
}	O
}	O
else	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
NULL	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
+=	O
strlen	(*(char))->(long)
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
)	O
;	O
if	O
(	O
longind	*(int)
!=	O
NULL	O
)	O
*	O
longind	*(int)
=	O
option_index	int
;	O
if	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
)	O
{	O
*	O
(	O
pfound	*(struct(*(char),int,*(int),int))
->	O
flag	*(int)
)	O
=	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
return	O
0	int
;	O
}	O
return	O
pfound	*(struct(*(char),int,*(int),int))
->	O
val	int
;	O
}	O
no_longs	O
:	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
NULL	O
;	O
return	O
'W'	O
;	O
}	O
if	O
(	O
temp	*(char)
[	O
1	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
temp	*(char)
[	O
2	int
]	O
==	O
':'	O
)	O
{	O
if	O
(	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
!=	O
'\0'	O
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
}	O
else	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
NULL	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
!=	O
'\0'	O
)	O
{	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
;	O
}	O
else	O
if	O
(	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
==	O
argc	int
)	O
{	O
if	O
(	O
print_errors	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: option requires an argument -- '%c'\n"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
c	char
)	O
;	O
}	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optopt	int
=	O
c	char
;	O
if	O
(	O
optstring	*(char)
[	O
0	int
]	O
==	O
':'	O
)	O
c	char
=	O
':'	O
;	O
else	O
c	char
=	O
'?'	O
;	O
}	O
else	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optarg	*(char)
=	O
argv	*(*(char))
[	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
optind	int
++	O
]	O
;	O
d	*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int))
->	O
__nextchar	*(char)
=	O
NULL	O
;	O
}	O
}	O
return	O
c	char
;	O
}	O
}	O
int	O
_getopt_internal	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
const	O
char	O
*	O
optstring	*(char)
,	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
longopts	*(struct(*(char),int,*(int),int))
,	O
int	O
*	O
longind	*(int)
,	O
int	O
long_only	int
,	O
int	O
posixly_correct	int
)	O
{	O
int	O
result	int
;	O
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
.	O
optind	int
=	O
optind	int
;	O
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
.	O
opterr	int
=	O
opterr	int
;	O
result	int
=	O
_getopt_internal_r	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int),int,*(struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)),int)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
optstring	*(char)
,	O
longopts	*(struct(*(char),int,*(int),int))
,	O
longind	*(int)
,	O
long_only	int
,	O
&	O
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
,	O
posixly_correct	int
)	O
;	O
optind	int
=	O
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
.	O
optind	int
;	O
optarg	*(char)
=	O
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
.	O
optarg	*(char)
;	O
optopt	int
=	O
getopt_data	struct(int,int,int,*(char),int,*(char),enum(int,int,int),int,int,int)
.	O
optopt	int
;	O
return	O
result	int
;	O
}	O
enum	O
{	O
POSIXLY_CORRECT	int
=	O
1	int
}	O
;	O
int	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
,	O
const	O
char	O
*	O
optstring	*(char)
)	O
{	O
return	O
_getopt_internal	O
(	O
argc	int
,	O
(	O
char	O
*	O
*	O
)	O
argv	*(*(char))
,	O
optstring	*(char)
,	O
(	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
*	O
)	O
0	int
,	O
(	O
int	O
*	O
)	O
0	int
,	O
0	int
,	O
POSIXLY_CORRECT	int
)	O
;	O
}	O
