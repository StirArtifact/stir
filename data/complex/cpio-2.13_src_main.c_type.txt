enum	O
cpio_options	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
{	O
NO_ABSOLUTE_FILENAMES_OPTION	int
=	O
256	int
,	O
ABSOLUTE_FILENAMES_OPTION	int
,	O
NO_PRESERVE_OWNER_OPTION	int
,	O
ONLY_VERIFY_CRC_OPTION	int
,	O
RENAME_BATCH_FILE_OPTION	int
,	O
RSH_COMMAND_OPTION	int
,	O
QUIET_OPTION	int
,	O
SPARSE_OPTION	int
,	O
FORCE_LOCAL_OPTION	int
,	O
DEBUG_OPTION	int
,	O
BLOCK_SIZE_OPTION	int
,	O
TO_STDOUT_OPTION	int
,	O
RENUMBER_INODES_OPTION	int
,	O
IGNORE_DEVNO_OPTION	int
,	O
DEVICE_INDEPENDENT_OPTION	int
}	O
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Phil Nelson"	*(char)
,	O
"David MacKenzie"	*(char)
,	O
"John Oleynick"	*(char)
,	O
"Sergey Poznyakoff"	*(char)
,	O
NULL	O
}	O
;	O
const	O
char	O
*	O
argp_program_bug_address	*(char)
=	O
"<"	*(char)
PACKAGE_BUGREPORT	*(char)
">"	*(char)
;	O
static	O
char	O
doc	*(char)
[	O
]	O
=	O
N_	O
(	O
"GNU `cpio' copies files to and from archives\n\nExamples:\n  # Copy files named in name-list to the archive\n  cpio -o < name-list [> archive]\n  # Extract files from the archive\n  cpio -i [< archive]\n  # Copy files named in name-list to destination-directory\n  cpio -p destination-directory < name-list\n"	*(char)
)	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
options	*(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Main operation mode:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"create"	*(char)
,	O
'o'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Create the archive (run in copy-out mode)"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"extract"	*(char)
,	O
'i'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Extract files from an archive (run in copy-in mode)"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"pass-through"	*(char)
,	O
'p'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Run in copy-pass mode"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"list"	*(char)
,	O
't'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Print a table of contents of the input"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in any mode:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"directory"	*(char)
,	O
'D'	O
,	O
N_	O
(	O
"DIR"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Change to directory DIR"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"force-local"	*(char)
,	O
FORCE_LOCAL_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Archive file is local, even if its name contains colons"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"format"	*(char)
,	O
'H'	O
,	O
N_	O
(	O
"FORMAT"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Use given archive FORMAT"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'B'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Set the I/O block size to 5120 bytes"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"block-size"	*(char)
,	O
BLOCK_SIZE_OPTION	int
,	O
N_	O
(	O
"BLOCK-SIZE"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Set the I/O block size to BLOCK-SIZE * 512 bytes"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Use the old portable (ASCII) archive format"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"dot"	*(char)
,	O
'V'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Print a \".\" for each file processed"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"io-size"	*(char)
,	O
'C'	O
,	O
N_	O
(	O
"NUMBER"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Set the I/O block size to the given NUMBER of bytes"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"quiet"	*(char)
,	O
QUIET_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Do not print the number of blocks copied"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"verbose"	*(char)
,	O
'v'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Verbosely list the files processed"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"warning"	*(char)
,	O
'W'	O
,	O
N_	O
(	O
"FLAG"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Control warning display. Currently FLAG is one of 'none', 'truncate', 'all'. Multiple options accumulate."	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"owner"	*(char)
,	O
'R'	O
,	O
N_	O
(	O
"[USER][:.][GROUP]"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Set the ownership of all files created to the specified USER and/or GROUP"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-in and copy-out modes"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"file"	*(char)
,	O
'F'	O
,	O
N_	O
(	O
"[[USER@]HOST:]FILE-NAME"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Use this FILE-NAME instead of standard input or output. Optional USER and HOST specify the user and host names in case of a remote archive"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"message"	*(char)
,	O
'M'	O
,	O
N_	O
(	O
"STRING"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Print STRING when the end of a volume of the backup media is reached"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"rsh-command"	*(char)
,	O
RSH_COMMAND_OPTION	int
,	O
N_	O
(	O
"COMMAND"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Use COMMAND instead of rsh"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid only in copy-in mode:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"nonmatching"	*(char)
,	O
'f'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Only copy files that do not match any of the given patterns"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"numeric-uid-gid"	*(char)
,	O
'n'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"In the verbose table of contents listing, show numeric UID and GID"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"pattern-file"	*(char)
,	O
'E'	O
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Read additional patterns specifying filenames to extract or list from FILE"	*(char)
)	O
,	O
210	int
}	O
,	O
{	O
"only-verify-crc"	*(char)
,	O
ONLY_VERIFY_CRC_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"When reading a CRC format archive, only verify the CRC's of each file in the archive, don't actually extract the files"	*(char)
)	O
,	O
210	int
}	O
,	O
{	O
"rename"	*(char)
,	O
'r'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Interactively rename files"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"rename-batch-file"	*(char)
,	O
RENAME_BATCH_FILE_OPTION	int
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
OPTION_HIDDEN	int
,	O
""	*(char)
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"swap"	*(char)
,	O
'b'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Swap both halfwords of words and bytes of halfwords in the data. Equivalent to -sS"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"swap-bytes"	*(char)
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Swap the bytes of each halfword in the files"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"swap-halfwords"	*(char)
,	O
'S'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Swap the halfwords of each word (4 bytes) in the files"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"to-stdout"	*(char)
,	O
TO_STDOUT_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Extract files to standard output"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'I'	O
,	O
N_	O
(	O
"[[USER@]HOST:]FILE-NAME"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Archive filename to use instead of standard input. Optional USER and HOST specify the user and host names in case of a remote archive"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid only in copy-out mode:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"append"	*(char)
,	O
'A'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Append to an existing archive."	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
'O'	O
,	O
N_	O
(	O
"[[USER@]HOST:]FILE-NAME"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"Archive filename to use instead of standard output. Optional USER and HOST specify the user and host names in case of a remote archive"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"renumber-inodes"	*(char)
,	O
RENUMBER_INODES_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Renumber inodes"	*(char)
)	O
}	O
,	O
{	O
"ignore-devno"	*(char)
,	O
IGNORE_DEVNO_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Don't store device numbers"	*(char)
)	O
}	O
,	O
{	O
"device-independent"	*(char)
,	O
DEVICE_INDEPENDENT_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Create device-independent (reproducible) archives"	*(char)
)	O
}	O
,	O
{	O
"reproducible"	*(char)
,	O
0	int
,	O
NULL	O
,	O
OPTION_ALIAS	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid only in copy-pass mode:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"link"	*(char)
,	O
'l'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Link files instead of copying them, when  possible"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-in and copy-out modes:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"absolute-filenames"	*(char)
,	O
ABSOLUTE_FILENAMES_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Do not strip file system prefix components from the file names"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-absolute-filenames"	*(char)
,	O
NO_ABSOLUTE_FILENAMES_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Create all files relative to the current directory"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-out and copy-pass modes:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"null"	*(char)
,	O
'0'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Filenames in the list are delimited by null characters instead of newlines"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"dereference"	*(char)
,	O
'L'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Dereference  symbolic  links  (copy  the files that they point to instead of copying the links)."	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"reset-access-time"	*(char)
,	O
'a'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Reset the access times of files after reading them"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Operation modifiers valid in copy-in and copy-pass modes:"	*(char)
)	O
,	O
GRID	int
}	O
,	O
{	O
"preserve-modification-time"	*(char)
,	O
'm'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Retain previous file modification times when creating files"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"make-directories"	*(char)
,	O
'd'	O
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Create leading directories where needed"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"no-preserve-owner"	*(char)
,	O
NO_PRESERVE_OWNER_OPTION	int
,	O
0	int
,	O
0	int
,	O
N_	O
(	O
"Do not change the ownership of the files"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"unconditional"	*(char)
,	O
'u'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Replace all files unconditionally"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
"sparse"	*(char)
,	O
SPARSE_OPTION	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"Write files with large blocks of zeros as sparse files"	*(char)
)	O
,	O
GRID	int
+	O
1	int
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
char	O
*	O
input_archive_name	*(char)
=	O
0	int
;	O
static	O
char	O
*	O
output_archive_name	*(char)
=	O
0	int
;	O
static	O
int	O
warn_control	(*(char))->(int)
(	O
char	O
*	O
arg	*(char)
)	O
{	O
static	O
struct	O
warn_tab	struct(*(char),int)
{	O
char	O
*	O
name	*(char)
;	O
int	O
flag	*(int)
;	O
}	O
warn_tab	struct(*(char),int)
[	O
]	O
=	O
{	O
{	O
"none"	*(char)
,	O
CPIO_WARN_ALL	O
}	O
,	O
{	O
"truncate"	*(char)
,	O
CPIO_WARN_TRUNCATE	int
}	O
,	O
{	O
"all"	*(char)
,	O
CPIO_WARN_ALL	O
}	O
,	O
{	O
"interdir"	*(char)
,	O
CPIO_WARN_INTERDIR	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
struct	O
warn_tab	struct(*(char),int)
*	O
wt	*(struct(*(char),int))
;	O
int	O
offset	long
=	O
0	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
{	O
warn_option	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
arg	*(char)
)	O
>	O
2	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
arg	*(char)
,	O
"no-"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
offset	long
=	O
3	int
;	O
for	O
(	O
wt	*(struct(*(char),int))
=	O
warn_tab	struct(*(char),int)
;	O
wt	*(struct(*(char),int))
->	O
name	*(char)
;	O
wt	*(struct(*(char),int))
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
+	O
offset	long
,	O
wt	*(struct(*(char),int))
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
offset	long
)	O
warn_option	int
&=	O
~	O
wt	*(struct(*(char),int))
->	O
flag	*(int)
;	O
else	O
warn_option	int
|=	O
wt	*(struct(*(char),int))
->	O
flag	*(int)
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'0'	O
:	O
name_end	char
=	O
'\0'	O
;	O
break	O
;	O
case	O
'a'	O
:	O
reset_time_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'A'	O
:	O
append_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'b'	O
:	O
swap_bytes_flag	int
=	O
true	int
;	O
swap_halfwords_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'B'	O
:	O
io_block_size	int
=	O
5120	int
;	O
break	O
;	O
case	O
BLOCK_SIZE_OPTION	int
:	O
io_block_size	int
=	O
atoi	(*(char))->(int)
(	O
arg	*(char)
)	O
;	O
if	O
(	O
io_block_size	int
<	O
1	int
||	O
io_block_size	int
>	O
INT_MAX	O
/	O
512	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid block size"	*(char)
)	O
)	O
)	O
;	O
io_block_size	int
*=	O
512	int
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
!=	O
arf_unknown	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Archive format multiply defined"	*(char)
)	O
)	O
)	O
;	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_oldascii	int
;	O
break	O
;	O
case	O
'C'	O
:	O
io_block_size	int
=	O
atoi	(*(char))->(int)
(	O
arg	*(char)
)	O
;	O
if	O
(	O
io_block_size	int
<	O
1	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid block size"	*(char)
)	O
)	O
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
create_dir_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'D'	O
:	O
change_directory_option	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'f'	O
:	O
copy_matching_files	int
=	O
false	int
;	O
break	O
;	O
case	O
'E'	O
:	O
pattern_file_name	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'F'	O
:	O
archive_name	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'H'	O
:	O
if	O
(	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
!=	O
arf_unknown	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Archive format multiply defined"	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"crc"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_crcascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"newc"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_newascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"odc"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_oldascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"bin"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_binary	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"ustar"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_ustar	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"tar"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_tar	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"hpodc"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_hpoldascii	int
;	O
else	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"hpbin"	*(char)
)	O
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_hpbinary	int
;	O
else	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"invalid archive format `%s'; valid formats are:\ncrc newc odc bin ustar tar (all-caps also recognized)"	*(char)
)	O
,	O
arg	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
'i'	O
:	O
if	O
(	O
copy_function	*(()->(void))
!=	O
0	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Mode already defined"	*(char)
)	O
)	O
)	O
;	O
copy_function	*(()->(void))
=	O
process_copy_in	()->(void)
;	O
break	O
;	O
case	O
'I'	O
:	O
input_archive_name	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'l'	O
:	O
link_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'L'	O
:	O
xstat	*(()->(int))
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
break	O
;	O
case	O
'm'	O
:	O
retain_time_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'M'	O
:	O
set_new_media_message	(*(char))->(void)
(	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
numeric_uid	int
=	O
true	int
;	O
break	O
;	O
case	O
NO_ABSOLUTE_FILENAMES_OPTION	int
:	O
no_abs_paths_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
ABSOLUTE_FILENAMES_OPTION	int
:	O
no_abs_paths_flag	int
=	O
false	int
;	O
break	O
;	O
case	O
NO_PRESERVE_OWNER_OPTION	int
:	O
if	O
(	O
set_owner_flag	int
||	O
set_group_flag	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"--no-preserve-owner cannot be used with --owner"	*(char)
)	O
)	O
)	O
;	O
no_chown_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'o'	O
:	O
if	O
(	O
copy_function	*(()->(void))
!=	O
0	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Mode already defined"	*(char)
)	O
)	O
)	O
;	O
copy_function	*(()->(void))
=	O
process_copy_out	()->(void)
;	O
break	O
;	O
case	O
'O'	O
:	O
output_archive_name	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
ONLY_VERIFY_CRC_OPTION	int
:	O
only_verify_crc_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
copy_function	*(()->(void))
!=	O
0	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Mode already defined"	*(char)
)	O
)	O
)	O
;	O
copy_function	*(()->(void))
=	O
process_copy_pass	()->(void)
;	O
break	O
;	O
case	O
IGNORE_DEVNO_OPTION	int
:	O
ignore_devno_option	int
=	O
1	int
;	O
break	O
;	O
case	O
RENUMBER_INODES_OPTION	int
:	O
renumber_inodes_option	int
=	O
1	int
;	O
break	O
;	O
case	O
DEVICE_INDEPENDENT_OPTION	int
:	O
ignore_devno_option	int
=	O
renumber_inodes_option	int
=	O
1	int
;	O
break	O
;	O
case	O
RSH_COMMAND_OPTION	int
:	O
rsh_command_option	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'r'	O
:	O
rename_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
RENAME_BATCH_FILE_OPTION	int
:	O
rename_batch_file	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
QUIET_OPTION	int
:	O
quiet_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'R'	O
:	O
if	O
(	O
no_chown_flag	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"--owner cannot be used with --no-preserve-owner"	*(char)
)	O
)	O
)	O
;	O
else	O
{	O
char	O
*	O
e	*(char)
,	O
*	O
u	*(char)
,	O
*	O
g	*(char)
;	O
e	*(char)
=	O
parse_user_spec	(*(char),*(int),*(int),*(*(char)),*(*(char)))->(*(char))
(	O
arg	*(char)
,	O
&	O
set_owner	int
,	O
&	O
set_group	int
,	O
&	O
u	*(char)
,	O
&	O
g	*(char)
)	O
;	O
if	O
(	O
e	*(char)
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
"%s: %s"	*(char)
,	O
arg	*(char)
,	O
e	*(char)
)	O
)	O
;	O
if	O
(	O
u	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
u	*(char)
)	O
;	O
set_owner_flag	int
=	O
true	int
;	O
}	O
if	O
(	O
g	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
g	*(char)
)	O
;	O
set_group_flag	int
=	O
true	int
;	O
}	O
}	O
break	O
;	O
case	O
's'	O
:	O
swap_bytes_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'S'	O
:	O
swap_halfwords_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
't'	O
:	O
table_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'u'	O
:	O
unconditional_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
dot_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
'W'	O
:	O
if	O
(	O
warn_control	(*(char))->(int)
(	O
arg	*(char)
)	O
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Invalid value for --warning option: %s"	*(char)
)	O
,	O
arg	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
SPARSE_OPTION	int
:	O
sparse_flag	int
=	O
true	int
;	O
break	O
;	O
case	O
FORCE_LOCAL_OPTION	int
:	O
force_local_option	bool
=	O
1	int
;	O
break	O
;	O
case	O
TO_STDOUT_OPTION	int
:	O
to_stdout_option	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
N_	O
(	O
"[destination-directory]"	*(char)
)	O
,	O
doc	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
argp_help	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,*(char))->(void)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
ARGP_HELP_SEE	int
,	O
(	O
char	O
*	O
)	O
program_name	*(char)
)	O
;	O
close_stdout	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
void	O
process_args	(int,array(*(char)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
xstat	*(()->(int))
=	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
;	O
if	O
(	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
ARGP_IN_ORDER	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
)	O
exit	(int)->(void)
(	O
PAXEXIT_FAILURE	int
)	O
;	O
if	O
(	O
copy_function	*(()->(void))
==	O
0	int
)	O
{	O
if	O
(	O
table_flag	int
)	O
copy_function	*(()->(void))
=	O
process_copy_in	()->(void)
;	O
else	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"You must specify one of -oipt options."	*(char)
)	O
)	O
)	O
;	O
}	O
if	O
(	O
copy_function	*(()->(void))
==	O
process_copy_in	()->(void)
)	O
{	O
archive_des	int
=	O
0	int
;	O
CHECK_USAGE	O
(	O
link_flag	int
,	O
"--link"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
reset_time_flag	int
,	O
"--reset"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
xstat	*(()->(int))
!=	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
,	O
"--dereference"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
append_flag	int
,	O
"--append"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
output_archive_name	*(char)
,	O
"-O"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
renumber_inodes_option	int
,	O
"--renumber-inodes"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
ignore_devno_option	int
,	O
"--ignore-devno"	*(char)
,	O
"--extract"	*(char)
)	O
;	O
if	O
(	O
to_stdout_option	bool
)	O
{	O
CHECK_USAGE	O
(	O
create_dir_flag	int
,	O
"--make-directories"	*(char)
,	O
"--to-stdout"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
rename_flag	int
,	O
"--rename"	*(char)
,	O
"--to-stdout"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
no_chown_flag	int
,	O
"--no-preserve-owner"	*(char)
,	O
"--to-stdout"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
set_owner_flag	int
||	O
set_group_flag	int
,	O
"--owner"	*(char)
,	O
"--to-stdout"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
retain_time_flag	int
,	O
"--preserve-modification-time"	*(char)
,	O
"--to-stdout"	*(char)
)	O
;	O
}	O
if	O
(	O
archive_name	*(char)
&&	O
input_archive_name	*(char)
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Both -I and -F are used in copy-in mode"	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
==	O
arf_crcascii	int
)	O
crc_i_flag	int
=	O
true	int
;	O
num_patterns	int
=	O
argc	int
-	O
index	(*(char),int)->(*(char))
;	O
save_patterns	*(*(char))
=	O
&	O
argv	*(*(char))
[	O
index	(*(char),int)->(*(char))
]	O
;	O
if	O
(	O
input_archive_name	*(char)
)	O
archive_name	*(char)
=	O
input_archive_name	*(char)
;	O
}	O
else	O
if	O
(	O
copy_function	*(()->(void))
==	O
process_copy_out	()->(void)
)	O
{	O
if	O
(	O
index	(*(char),int)->(*(char))
!=	O
argc	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Too many arguments"	*(char)
)	O
)	O
)	O
;	O
archive_des	int
=	O
1	int
;	O
CHECK_USAGE	O
(	O
create_dir_flag	int
,	O
"--make-directories"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
rename_flag	int
,	O
"--rename"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
table_flag	int
,	O
"--list"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
unconditional_flag	int
,	O
"--unconditional"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
link_flag	int
,	O
"--link"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
sparse_flag	int
,	O
"--sparse"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
retain_time_flag	int
,	O
"--preserve-modification-time"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
no_chown_flag	int
,	O
"--no-preserve-owner"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
swap_bytes_flag	int
,	O
"--swap-bytes (--swap)"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
swap_halfwords_flag	int
,	O
"--swap-halfwords (--swap)"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
to_stdout_option	bool
,	O
"--to-stdout"	*(char)
,	O
"--create"	*(char)
)	O
;	O
if	O
(	O
append_flag	int
&&	O
!	O
(	O
archive_name	*(char)
||	O
output_archive_name	*(char)
)	O
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"--append is used but no archive file name "	*(char)
"is given (use -F or -O options)"	*(char)
)	O
)	O
)	O
;	O
CHECK_USAGE	O
(	O
rename_batch_file	*(char)
,	O
"--rename-batch-file"	*(char)
,	O
"--create"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
input_archive_name	*(char)
,	O
"-I"	*(char)
,	O
"--create"	*(char)
)	O
;	O
if	O
(	O
archive_name	*(char)
&&	O
output_archive_name	*(char)
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Both -O and -F are used in copy-out mode"	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
==	O
arf_unknown	int
)	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
=	O
arf_binary	int
;	O
if	O
(	O
output_archive_name	*(char)
)	O
archive_name	*(char)
=	O
output_archive_name	*(char)
;	O
if	O
(	O
!	O
arf_stores_inode_p	(enum(int,int,int,int,int,int,int,int,int))->(int)
(	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
)	O
)	O
renumber_inodes_option	int
=	O
ignore_devno_option	int
=	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
argc	int
-	O
1	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Too many arguments"	*(char)
)	O
)	O
)	O
;	O
else	O
if	O
(	O
index	(*(char),int)->(*(char))
>	O
argc	int
-	O
1	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Not enough arguments"	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
archive_format	enum(int,int,int,int,int,int,int,int,int)
!=	O
arf_unknown	int
)	O
USAGE_ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"Archive format is not specified in copy-pass mode "	*(char)
"(use --format option)"	*(char)
)	O
)	O
)	O
;	O
CHECK_USAGE	O
(	O
swap_bytes_flag	int
,	O
"--swap-bytes (--swap)"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
swap_halfwords_flag	int
,	O
"--swap-halfwords (--swap)"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
table_flag	int
,	O
"--list"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
rename_flag	int
,	O
"--rename"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
append_flag	int
,	O
"--append"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
rename_batch_file	*(char)
,	O
"--rename-batch-file"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
no_abs_paths_flag	int
,	O
"--no-absolute-pathnames"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
no_abs_paths_flag	int
,	O
"--absolute-pathnames"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
to_stdout_option	bool
,	O
"--to-stdout"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
renumber_inodes_option	int
,	O
"--renumber-inodes"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
CHECK_USAGE	O
(	O
ignore_devno_option	int
,	O
"--ignore-devno"	*(char)
,	O
"--pass-through"	*(char)
)	O
;	O
directory_name	*(char)
=	O
argv	*(*(char))
[	O
index	(*(char),int)->(*(char))
]	O
;	O
}	O
if	O
(	O
archive_name	*(char)
)	O
{	O
if	O
(	O
copy_function	*(()->(void))
!=	O
process_copy_in	()->(void)
&&	O
copy_function	*(()->(void))
!=	O
process_copy_out	()->(void)
)	O
error	(int,int,*(char))->(void)
(	O
PAXEXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"-F can be used only with --create or --extract"	*(char)
)	O
)	O
;	O
archive_des	int
=	O
open_archive	(*(char))->(int)
(	O
archive_name	*(char)
)	O
;	O
if	O
(	O
archive_des	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"Cannot open %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
archive_name	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
set_owner_flag	int
==	O
false	int
&&	O
set_group_flag	int
==	O
false	int
&&	O
geteuid	()->(int)
(	O
)	O
)	O
no_chown_flag	int
=	O
true	int
;	O
}	O
void	O
initialize_buffers	()->(void)
(	O
)	O
{	O
int	O
in_buf_size	int
,	O
out_buf_size	int
;	O
if	O
(	O
copy_function	*(()->(void))
==	O
process_copy_in	()->(void)
)	O
{	O
if	O
(	O
io_block_size	int
>=	O
512	int
)	O
in_buf_size	int
=	O
2	int
*	O
io_block_size	int
;	O
else	O
in_buf_size	int
=	O
1024	int
;	O
out_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
}	O
else	O
if	O
(	O
copy_function	*(()->(void))
==	O
process_copy_out	()->(void)
)	O
{	O
in_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
out_buf_size	int
=	O
io_block_size	int
;	O
}	O
else	O
{	O
in_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
out_buf_size	int
=	O
DISK_IO_BLOCK_SIZE	int
;	O
}	O
input_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
in_buf_size	int
)	O
;	O
in_buff	*(char)
=	O
input_buffer	*(char)
;	O
input_buffer_size	long
=	O
in_buf_size	int
;	O
input_size	long
=	O
0	int
;	O
input_bytes	long
=	O
0	int
;	O
output_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
out_buf_size	int
)	O
;	O
out_buff	*(char)
=	O
output_buffer	*(char)
;	O
output_size	long
=	O
0	int
;	O
output_bytes	long
=	O
0	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	*(char)
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
argp_version_setup	(*(char),*(*(char)))->(void)
(	O
"cpio"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
process_args	(int,array(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
initialize_buffers	()->(void)
(	O
)	O
;	O
(	O
*	O
copy_function	*(()->(void))
)	O
(	O
)	O
;	O
if	O
(	O
archive_des	int
>=	O
0	int
&&	O
rmtclose	O
(	O
archive_des	int
)	O
==	O
-	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
PAXEXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error closing archive"	*(char)
)	O
)	O
;	O
pax_exit	()->(void)
(	O
)	O
;	O
}	O
