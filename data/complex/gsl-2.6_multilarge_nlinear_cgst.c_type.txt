typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
z	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
norm_g	double
;	O
double	O
cgtol	double
;	O
size_t	long
cgmaxit	long
;	O
}	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
;	O
static	O
void	O
*	O
cgst_alloc	(*(void),long,long)->(*(void))
(	O
const	O
void	O
*	O
params	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
cgst_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
cgst_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
cgst_preloop	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
cgst_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
cgst_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
pred	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
double	O
cgst_calc_tau	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
p	int
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
delta	double
)	O
;	O
static	O
void	O
*	O
cgst_alloc	(*(void),long,long)->(*(void))
(	O
const	O
void	O
*	O
params	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multilarge_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double,long,double)
*	O
par	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double,long,double))
=	O
(	O
const	O
gsl_multilarge_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double,long,double)
*	O
)	O
params	*(void)
;	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
state	*(int)
;	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate st state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
z	double
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
z	double
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for z"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for r"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
n	int
=	O
n	int
;	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
state	*(int)
->	O
cgmaxit	long
=	O
par	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double,long,double))
->	O
max_iter	long
;	O
if	O
(	O
state	*(int)
->	O
cgmaxit	long
==	O
0	int
)	O
state	*(int)
->	O
cgmaxit	long
=	O
n	int
;	O
state	*(int)
->	O
cgtol	double
=	O
par	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double,long,double))
->	O
tol	double
;	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
cgst_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
state	*(int)
=	O
(	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
z	double
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
z	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
cgst_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
(	O
void	O
)	O
vtrust_state	*(void)
;	O
(	O
void	O
)	O
vstate	*(void)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cgst_preloop	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
(	O
void	O
)	O
vtrust_state	*(void)
;	O
(	O
void	O
)	O
vstate	*(void)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
cgst_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multilarge_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
state	*(int)
=	O
(	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
)	O
vstate	*(void)
;	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
x	double
;	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
f	*(double)
;	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
sqrt_wts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
const	O
gsl_multilarge_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double,long,double)
*	O
params	*(void)
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
params	*(void)
;	O
gsl_multilarge_nlinear_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((enum(int,int,int),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,long,*(void),long,long,long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
fdf	*((double,*(void),*(double),*(double))->(void))
;	O
double	O
alpha	long double
,	O
beta	long double
,	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
norm_Jd	double
;	O
double	O
norm_r	double
;	O
double	O
norm_rp1	double
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
state	*(int)
->	O
p	int
;	O
++	O
i	long
)	O
{	O
double	O
gi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
di	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
z	double
,	O
i	long
,	O
0.0	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
-	O
gi	double
/	O
di	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
-	O
gi	double
/	O
di	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
gi	double
/	O
di	double
)	O
;	O
}	O
state	*(int)
->	O
norm_g	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
state	*(int)
->	O
cgmaxit	long
;	O
++	O
i	long
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
status	int
=	O
gsl_multilarge_nlinear_eval_df	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,enum(int,int),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
x	double
,	O
f	*(double)
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
params	*(void)
->	O
h_df	double
,	O
params	*(void)
->	O
fdtype	enum(int,int)
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
norm_Jd	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
norm_Jd	double
==	O
0.0	int
)	O
{	O
double	O
tau	double
=	O
cgst_calc_tau	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(double)
(	O
state	*(int)
->	O
z	double
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
delta	double
)	O
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
,	O
state	*(int)
->	O
z	double
,	O
tau	double
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
norm_r	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
norm_r	double
/	O
norm_Jd	double
;	O
alpha	long double
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
,	O
state	*(int)
->	O
z	double
,	O
alpha	long double
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
>=	O
delta	double
)	O
{	O
double	O
tau	double
=	O
cgst_calc_tau	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(double)
(	O
state	*(int)
->	O
z	double
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
delta	double
)	O
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
,	O
state	*(int)
->	O
z	double
,	O
tau	double
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
z	double
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
status	int
=	O
gsl_multilarge_nlinear_eval_df	(enum(int,int,int),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,enum(int,int),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
x	double
,	O
f	*(double)
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
params	*(void)
->	O
h_df	double
,	O
params	*(void)
->	O
fdtype	enum(int,int)
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
alpha	long double
)	O
;	O
gsl_vector_sub	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
norm_rp1	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
norm_rp1	double
/	O
state	*(int)
->	O
norm_g	double
;	O
if	O
(	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
<	O
state	*(int)
->	O
cgtol	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
z	double
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
norm_rp1	double
/	O
norm_r	double
;	O
beta	long double
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
scaled_addition	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
1.0	int
,	O
state	*(int)
->	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
beta	long double
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
z	double
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_EMAXITER	int
;	O
}	O
static	O
int	O
cgst_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
pred	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
gsl_multilarge_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multilarge_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
state	*(int)
=	O
(	O
cgst_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,long)
*	O
)	O
vstate	*(void)
;	O
*	O
pred	*(double)
=	O
quadratic_preduction	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double,long,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((enum(int,int,int),*`,*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long,long)),*(double)))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
cgst_calc_tau	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
p	int
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
double	O
delta	double
)	O
{	O
double	O
norm_p	double
,	O
norm_d	double
,	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
t1	double
,	O
t2	double
,	O
tau	double
;	O
norm_p	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
p	int
)	O
;	O
norm_d	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
p	int
,	O
d	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
t1	double
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
/	O
(	O
norm_d	double
*	O
norm_d	double
)	O
;	O
t2	double
=	O
t1	double
*	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
+	O
(	O
delta	double
+	O
norm_p	double
)	O
*	O
(	O
delta	double
-	O
norm_p	double
)	O
;	O
tau	double
=	O
-	O
t1	double
+	O
sqrt	(double)->(double)
(	O
t2	double
)	O
/	O
norm_d	double
;	O
return	O
tau	double
;	O
}	O
static	O
const	O
gsl_multilarge_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
cgst_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"steihaug-toint"	*(char)
,	O
cgst_alloc	(*(void),long,long)->(*(void))
,	O
cgst_init	(*(void),*(void))->(int)
,	O
cgst_preloop	(*(void),*(void))->(int)
,	O
cgst_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
cgst_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
,	O
cgst_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multilarge_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multilarge_nlinear_trs_cgst	*(struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct`),*(void))->(int)),*((*(void),*(struct`),*(double),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
cgst_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
;	O
