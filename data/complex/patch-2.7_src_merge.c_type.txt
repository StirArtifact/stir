static	O
lin	long
count_context_lines	()->(long)
(	O
void	O
)	O
;	O
static	O
bool	bool
context_matches_file	(long,long)->(bool)
(	O
lin	long
,	O
lin	long
)	O
;	O
static	O
void	O
compute_changes	(long,long,long,long,*(char),*(char))->(void)
(	O
lin	long
,	O
lin	long
,	O
lin	long
,	O
lin	long
,	O
char	O
*	O
,	O
char	O
*	O
)	O
;	O
static	O
lin	long
locate_merge	(*(long))->(long)
(	O
lin	long
*	O
matched	*(long)
)	O
{	O
lin	long
first_guess	long
=	O
pch_first	()->(long)
(	O
)	O
+	O
in_offset	long
;	O
lin	long
pat_lines	long
=	O
pch_ptrn_lines	()->(long)
(	O
)	O
;	O
lin	long
context_lines	long
=	O
count_context_lines	()->(long)
(	O
)	O
;	O
lin	long
max_where	long
=	O
input_lines	long
-	O
pat_lines	long
+	O
context_lines	long
+	O
1	int
;	O
lin	long
min_where	long
=	O
last_frozen_line	long
+	O
1	int
;	O
lin	long
max_pos_offset	long
=	O
max_where	long
-	O
first_guess	long
;	O
lin	long
max_neg_offset	long
=	O
first_guess	long
-	O
min_where	long
;	O
lin	long
max_offset	long
=	O
(	O
max_pos_offset	long
<	O
max_neg_offset	long
?	O
max_neg_offset	long
:	O
max_pos_offset	long
)	O
;	O
lin	long
where	long
=	O
first_guess	long
,	O
max_matched	long
=	O
0	int
;	O
lin	long
min	long
,	O
max	long
;	O
lin	long
offset	long
;	O
bool	bool
match_until_eof	bool
;	O
if	O
(	O
context_lines	long
==	O
0	int
)	O
goto	O
out	O
;	O
max	long
=	O
2	int
*	O
context_lines	long
;	O
min	long
=	O
pat_lines	long
-	O
context_lines	long
;	O
if	O
(	O
debug	int
&	O
1	int
)	O
{	O
char	O
numbuf0	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
char	O
numbuf1	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
say	(*(char))->(void)
(	O
"locating merge: min=%s max=%s "	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
min	long
)	O
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf1	array(char)
,	O
max	long
)	O
)	O
;	O
}	O
offset	long
=	O
pch_suffix_context	()->(long)
(	O
)	O
-	O
pch_prefix_context	()->(long)
(	O
)	O
;	O
if	O
(	O
offset	long
>	O
0	int
&&	O
pch_first	()->(long)
(	O
)	O
<=	O
1	int
)	O
max_pos_offset	long
=	O
0	int
;	O
match_until_eof	bool
=	O
offset	long
<	O
0	int
;	O
if	O
(	O
first_guess	long
<=	O
max_neg_offset	long
)	O
max_neg_offset	long
=	O
first_guess	long
-	O
1	int
;	O
for	O
(	O
offset	long
=	O
0	int
;	O
offset	long
<=	O
max_offset	long
;	O
offset	long
++	O
)	O
{	O
if	O
(	O
offset	long
<=	O
max_pos_offset	long
)	O
{	O
lin	long
guess	long
=	O
first_guess	long
+	O
offset	long
;	O
lin	long
last	long
;	O
lin	long
changes	long
;	O
changes	long
=	O
bestmatch	(long,long,long,long,long,long,*(long))->(long)
(	O
1	int
,	O
pat_lines	long
+	O
1	int
,	O
guess	long
,	O
input_lines	long
+	O
1	int
,	O
match_until_eof	bool
?	O
input_lines	long
-	O
guess	long
+	O
1	int
:	O
min	long
,	O
max	long
,	O
&	O
last	long
)	O
;	O
if	O
(	O
changes	long
<=	O
max	long
&&	O
max_matched	long
<	O
last	long
-	O
guess	long
)	O
{	O
max_matched	long
=	O
last	long
-	O
guess	long
;	O
where	long
=	O
guess	long
;	O
if	O
(	O
changes	long
==	O
0	int
)	O
break	O
;	O
min	long
=	O
last	long
-	O
guess	long
;	O
max	long
=	O
changes	long
-	O
1	int
;	O
}	O
}	O
if	O
(	O
0	int
<	O
offset	long
&&	O
offset	long
<=	O
max_neg_offset	long
)	O
{	O
lin	long
guess	long
=	O
first_guess	long
-	O
offset	long
;	O
lin	long
last	long
;	O
lin	long
changes	long
;	O
changes	long
=	O
bestmatch	(long,long,long,long,long,long,*(long))->(long)
(	O
1	int
,	O
pat_lines	long
+	O
1	int
,	O
guess	long
,	O
input_lines	long
+	O
1	int
,	O
match_until_eof	bool
?	O
input_lines	long
-	O
guess	long
+	O
1	int
:	O
min	long
,	O
max	long
,	O
&	O
last	long
)	O
;	O
if	O
(	O
changes	long
<=	O
max	long
&&	O
max_matched	long
<	O
last	long
-	O
guess	long
)	O
{	O
max_matched	long
=	O
last	long
-	O
guess	long
;	O
where	long
=	O
guess	long
;	O
if	O
(	O
changes	long
==	O
0	int
)	O
break	O
;	O
min	long
=	O
last	long
-	O
guess	long
;	O
max	long
=	O
changes	long
-	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
debug	int
&	O
1	int
)	O
{	O
char	O
numbuf0	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
char	O
numbuf1	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
char	O
numbuf2	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
say	(*(char))->(void)
(	O
"where=%s matched=%s changes=%s\n"	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
where	long
)	O
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf1	array(char)
,	O
max_matched	long
)	O
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf2	array(char)
,	O
max	long
+	O
1	int
)	O
)	O
;	O
}	O
out	O
:	O
*	O
matched	*(long)
=	O
max_matched	long
;	O
if	O
(	O
where	long
<	O
min_where	long
)	O
where	long
=	O
min_where	long
;	O
return	O
where	long
;	O
}	O
static	O
void	O
print_linerange	(long,long)->(void)
(	O
lin	long
from	long
,	O
lin	long
to	long
)	O
{	O
char	O
numbuf0	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
char	O
numbuf1	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
if	O
(	O
to	long
<=	O
from	long
)	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
from	long
)	O
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"%s-%s"	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
from	long
)	O
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf1	array(char)
,	O
to	long
)	O
)	O
;	O
}	O
static	O
void	O
merge_result	(*(bool),int,*(char),long,long)->(void)
(	O
bool	bool
*	O
first_result	*(bool)
,	O
int	O
hunk	int
,	O
char	O
const	O
*	O
what	*(char)
,	O
lin	long
from	long
,	O
lin	long
to	long
)	O
{	O
static	O
char	O
const	O
*	O
last_what	*(char)
;	O
if	O
(	O
*	O
first_result	*(bool)
&&	O
what	*(char)
)	O
{	O
printf	(*(char))->(int)
(	O
"Hunk #%d %s at "	*(char)
,	O
hunk	int
,	O
what	*(char)
)	O
;	O
last_what	*(char)
=	O
what	*(char)
;	O
}	O
else	O
if	O
(	O
!	O
what	*(char)
)	O
{	O
if	O
(	O
!	O
*	O
first_result	*(bool)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
".\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
last_what	*(char)
=	O
0	int
;	O
}	O
return	O
;	O
}	O
else	O
if	O
(	O
last_what	*(char)
==	O
what	*(char)
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
","	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
", %s at "	*(char)
,	O
what	*(char)
)	O
;	O
print_linerange	(long,long)->(void)
(	O
from	long
+	O
out_offset	long
,	O
to	long
+	O
out_offset	long
)	O
;	O
*	O
first_result	*(bool)
=	O
false	int
;	O
}	O
bool	bool
merge_hunk	(int,*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long,*(bool))->(bool)
(	O
int	O
hunk	int
,	O
struct	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
*	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
lin	long
where	long
,	O
bool	bool
*	O
somefailed	*(bool)
)	O
{	O
bool	bool
applies_cleanly	bool
;	O
bool	bool
first_result	*(bool)
=	O
true	int
;	O
bool	bool
already_applied	bool
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
lin	long
old	long
=	O
1	int
;	O
lin	long
firstold	long
=	O
pch_ptrn_lines	()->(long)
(	O
)	O
;	O
lin	long
new	long
=	O
firstold	long
+	O
1	int
;	O
lin	long
firstnew	long
=	O
pch_end	()->(long)
(	O
)	O
;	O
lin	long
in	long
;	O
lin	long
firstin	long
;	O
char	O
*	O
oldin	*(char)
;	O
lin	long
matched	*(long)
;	O
lin	long
lastwhere	long
;	O
pch_normalize	(enum(int,int,int,int,int,int,int))->(void)
(	O
UNI_DIFF	int
)	O
;	O
assert	O
(	O
pch_char	(long)->(char)
(	O
firstnew	long
+	O
1	int
)	O
==	O
'^'	O
)	O
;	O
while	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'='	O
||	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'\n'	O
)	O
new	long
++	O
;	O
if	O
(	O
where	long
)	O
{	O
applies_cleanly	bool
=	O
true	int
;	O
matched	*(long)
=	O
pch_ptrn_lines	()->(long)
(	O
)	O
;	O
}	O
else	O
{	O
where	long
=	O
locate_merge	(*(long))->(long)
(	O
&	O
matched	*(long)
)	O
;	O
applies_cleanly	bool
=	O
false	int
;	O
}	O
in	long
=	O
firstold	long
+	O
2	int
;	O
oldin	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
in	long
+	O
matched	*(long)
+	O
1	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
oldin	*(char)
,	O
' '	O
,	O
in	long
+	O
matched	*(long)
)	O
;	O
oldin	*(char)
[	O
0	int
]	O
=	O
'*'	O
;	O
oldin	*(char)
[	O
in	long
-	O
1	int
]	O
=	O
'='	O
;	O
oldin	*(char)
[	O
in	long
+	O
matched	*(long)
]	O
=	O
'^'	O
;	O
compute_changes	(long,long,long,long,*(char),*(char))->(void)
(	O
old	long
,	O
in	long
-	O
1	int
,	O
where	long
,	O
where	long
+	O
matched	*(long)
,	O
oldin	*(char)
+	O
old	long
,	O
oldin	*(char)
+	O
in	long
)	O
;	O
if	O
(	O
debug	int
&	O
2	int
)	O
{	O
char	O
numbuf0	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
char	O
numbuf1	array(char)
[	O
LINENUM_LENGTH_BOUND	O
+	O
1	int
]	O
;	O
lin	long
n	long
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
n	long
=	O
0	int
;	O
n	long
<=	O
in	long
+	O
matched	*(long)
;	O
n	long
++	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %c"	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
n	long
)	O
,	O
oldin	*(char)
[	O
n	long
]	O
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s,%s\n"	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
pch_first	()->(long)
(	O
)	O
)	O
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf1	array(char)
,	O
pch_ptrn_lines	()->(long)
(	O
)	O
)	O
)	O
;	O
else	O
if	O
(	O
n	long
<=	O
firstold	long
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" |%.*s"	*(char)
,	O
(	O
int	O
)	O
pch_line_len	(long)->(long)
(	O
n	long
)	O
,	O
pfetch	(long)->(*(char))
(	O
n	long
)	O
)	O
;	O
else	O
if	O
(	O
n	long
==	O
in	long
-	O
1	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %s,%s\n"	*(char)
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf0	array(char)
,	O
where	long
)	O
,	O
format_linenum	(array(char),long)->(*(char))
(	O
numbuf1	array(char)
,	O
matched	*(long)
)	O
)	O
;	O
else	O
if	O
(	O
n	long
>=	O
in	long
&&	O
n	long
<	O
in	long
+	O
matched	*(long)
)	O
{	O
size_t	long
size	long
;	O
const	O
char	O
*	O
line	*(char)
;	O
line	*(char)
=	O
ifetch	(long,bool,*(long))->(*(char))
(	O
where	long
+	O
n	long
-	O
in	long
,	O
false	int
,	O
&	O
size	long
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" |%.*s"	*(char)
,	O
(	O
int	O
)	O
size	long
,	O
line	*(char)
)	O
;	O
}	O
else	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
last_frozen_line	long
<	O
where	long
-	O
1	int
)	O
if	O
(	O
!	O
copy_till	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long)->(bool)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
where	long
-	O
1	int
)	O
)	O
return	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
firstold	long
=	O
old	long
;	O
firstnew	long
=	O
new	long
;	O
firstin	long
=	O
in	long
;	O
if	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
'-'	O
||	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
{	O
lin	long
lines	long
;	O
while	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
'-'	O
)	O
{	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
'-'	O
||	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
goto	O
conflict	O
;	O
else	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
' '	O
)	O
{	O
assert	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
' '	O
)	O
;	O
in	long
++	O
;	O
}	O
old	long
++	O
;	O
}	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
'-'	O
||	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
goto	O
conflict	O
;	O
while	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
new	long
++	O
;	O
lines	long
=	O
new	long
-	O
firstnew	long
;	O
if	O
(	O
verbosity	enum(int,int,int)
==	O
VERBOSE	int
||	O
(	O
(	O
verbosity	enum(int,int,int)
!=	O
SILENT	int
)	O
&&	O
!	O
applies_cleanly	bool
)	O
)	O
merge_result	(*(bool),int,*(char),long,long)->(void)
(	O
&	O
first_result	*(bool)
,	O
hunk	int
,	O
"merged"	*(char)
,	O
where	long
,	O
where	long
+	O
lines	long
-	O
1	int
)	O
;	O
last_frozen_line	long
+=	O
(	O
old	long
-	O
firstold	long
)	O
;	O
where	long
+=	O
(	O
old	long
-	O
firstold	long
)	O
;	O
out_offset	long
+=	O
new	long
-	O
firstnew	long
;	O
if	O
(	O
firstnew	long
<	O
new	long
)	O
{	O
while	O
(	O
firstnew	long
<	O
new	long
)	O
{	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
pch_write_line	(long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(bool)
(	O
firstnew	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
firstnew	long
++	O
;	O
}	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
zero_output	bool
=	O
false	int
;	O
}	O
}	O
else	O
if	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
' '	O
)	O
{	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
'-'	O
)	O
{	O
while	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
' '	O
)	O
{	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
!=	O
'-'	O
)	O
break	O
;	O
if	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
goto	O
conflict	O
;	O
else	O
assert	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
' '	O
)	O
;	O
old	long
++	O
;	O
new	long
++	O
;	O
}	O
if	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
'-'	O
||	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
goto	O
conflict	O
;	O
}	O
else	O
if	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
{	O
while	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
in	long
++	O
;	O
where	long
+=	O
in	long
-	O
firstin	long
;	O
if	O
(	O
!	O
copy_till	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long)->(bool)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
where	long
-	O
1	int
)	O
)	O
return	O
false	int
;	O
}	O
else	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
' '	O
)	O
{	O
while	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
' '	O
&&	O
oldin	*(char)
[	O
old	long
]	O
==	O
' '	O
&&	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
' '	O
&&	O
oldin	*(char)
[	O
in	long
]	O
==	O
' '	O
)	O
{	O
old	long
++	O
;	O
new	long
++	O
;	O
in	long
++	O
;	O
}	O
where	long
+=	O
(	O
in	long
-	O
firstin	long
)	O
;	O
if	O
(	O
!	O
copy_till	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long)->(bool)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
where	long
-	O
1	int
)	O
)	O
return	O
false	int
;	O
}	O
}	O
else	O
{	O
assert	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
'='	O
&&	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'^'	O
)	O
;	O
break	O
;	O
}	O
continue	O
;	O
conflict	O
:	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
'-'	O
)	O
{	O
while	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
in	long
++	O
;	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
' '	O
)	O
{	O
assert	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
' '	O
)	O
;	O
in	long
++	O
;	O
}	O
old	long
++	O
;	O
}	O
else	O
if	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
'-'	O
)	O
{	O
while	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
new	long
++	O
;	O
if	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
' '	O
)	O
{	O
assert	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
' '	O
)	O
;	O
new	long
++	O
;	O
}	O
old	long
++	O
;	O
}	O
else	O
if	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
while	O
(	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'+'	O
)	O
new	long
++	O
;	O
else	O
if	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
while	O
(	O
oldin	*(char)
[	O
in	long
]	O
==	O
'+'	O
)	O
in	long
++	O
;	O
else	O
break	O
;	O
}	O
assert	O
(	O
(	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
' '	O
&&	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
' '	O
)	O
||	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
'='	O
&&	O
pch_char	(long)->(char)
(	O
new	long
)	O
==	O
'^'	O
)	O
)	O
&&	O
(	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
' '	O
&&	O
oldin	*(char)
[	O
in	long
]	O
==	O
' '	O
)	O
||	O
(	O
oldin	*(char)
[	O
old	long
]	O
==	O
'='	O
&&	O
oldin	*(char)
[	O
in	long
]	O
==	O
'^'	O
)	O
)	O
)	O
;	O
for	O
(	O
lastwhere	long
=	O
where	long
;	O
firstin	long
<	O
in	long
&&	O
firstnew	long
<	O
new	long
&&	O
context_matches_file	(long,long)->(bool)
(	O
firstnew	long
,	O
lastwhere	long
)	O
;	O
firstin	long
++	O
,	O
firstnew	long
++	O
,	O
lastwhere	long
++	O
)	O
;	O
already_applied	bool
=	O
(	O
firstin	long
==	O
in	long
&&	O
firstnew	long
==	O
new	long
)	O
;	O
if	O
(	O
already_applied	bool
)	O
merge_result	(*(bool),int,*(char),long,long)->(void)
(	O
&	O
first_result	*(bool)
,	O
hunk	int
,	O
"already applied"	*(char)
,	O
where	long
,	O
lastwhere	long
-	O
1	int
)	O
;	O
if	O
(	O
conflict_style	enum(int,int)
==	O
MERGE_DIFF3	int
)	O
{	O
lin	long
common_prefix	long
=	O
lastwhere	long
-	O
where	long
;	O
firstin	long
-=	O
common_prefix	long
;	O
firstnew	long
-=	O
common_prefix	long
;	O
lastwhere	long
-=	O
common_prefix	long
;	O
}	O
if	O
(	O
where	long
!=	O
lastwhere	long
)	O
{	O
where	long
=	O
lastwhere	long
;	O
if	O
(	O
!	O
copy_till	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long)->(bool)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
where	long
-	O
1	int
)	O
)	O
return	O
false	int
;	O
}	O
if	O
(	O
!	O
already_applied	bool
)	O
{	O
lin	long
common_suffix	long
=	O
0	int
;	O
lin	long
lines	long
;	O
if	O
(	O
conflict_style	enum(int,int)
==	O
MERGE_MERGE	int
)	O
{	O
for	O
(	O
lastwhere	long
=	O
where	long
+	O
(	O
in	long
-	O
firstin	long
)	O
;	O
firstin	long
<	O
in	long
&&	O
firstnew	long
<	O
new	long
&&	O
context_matches_file	(long,long)->(bool)
(	O
new	long
-	O
1	int
,	O
lastwhere	long
-	O
1	int
)	O
;	O
in	long
--	O
,	O
new	long
--	O
,	O
lastwhere	long
--	O
,	O
common_suffix	long
++	O
)	O
;	O
}	O
lines	long
=	O
3	int
+	O
(	O
in	long
-	O
firstin	long
)	O
+	O
(	O
new	long
-	O
firstnew	long
)	O
;	O
if	O
(	O
conflict_style	enum(int,int)
==	O
MERGE_DIFF3	int
)	O
lines	long
+=	O
1	int
+	O
(	O
old	long
-	O
firstold	long
)	O
;	O
merge_result	(*(bool),int,*(char),long,long)->(void)
(	O
&	O
first_result	*(bool)
,	O
hunk	int
,	O
"NOT MERGED"	*(char)
,	O
where	long
,	O
where	long
+	O
lines	long
-	O
1	int
)	O
;	O
out_offset	long
+=	O
lines	long
-	O
(	O
in	long
-	O
firstin	long
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
+	O
"\n<<<<<<<\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
true	int
;	O
if	O
(	O
firstin	long
<	O
in	long
)	O
{	O
where	long
+=	O
(	O
in	long
-	O
firstin	long
)	O
;	O
if	O
(	O
!	O
copy_till	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long)->(bool)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
where	long
-	O
1	int
)	O
)	O
return	O
false	int
;	O
}	O
if	O
(	O
conflict_style	enum(int,int)
==	O
MERGE_DIFF3	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
+	O
"\n|||||||\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
true	int
;	O
while	O
(	O
firstold	long
<	O
old	long
)	O
{	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
pch_write_line	(long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(bool)
(	O
firstold	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
firstold	long
++	O
;	O
}	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
+	O
"\n=======\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
true	int
;	O
while	O
(	O
firstnew	long
<	O
new	long
)	O
{	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
pch_write_line	(long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(bool)
(	O
firstnew	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
firstnew	long
++	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
+	O
"\n>>>>>>>\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
after_newline	bool
=	O
true	int
;	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
->	O
zero_output	bool
=	O
false	int
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
write_fatal	()->(void)
(	O
)	O
;	O
if	O
(	O
common_suffix	long
)	O
{	O
where	long
+=	O
common_suffix	long
;	O
if	O
(	O
!	O
copy_till	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),bool,bool)),long)->(bool)
(	O
outstate	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),bool,bool)
,	O
where	long
-	O
1	int
)	O
)	O
return	O
false	int
;	O
in	long
+=	O
common_suffix	long
;	O
new	long
+=	O
common_suffix	long
;	O
}	O
*	O
somefailed	*(bool)
=	O
true	int
;	O
}	O
}	O
merge_result	(*(bool),int,*(char),long,long)->(void)
(	O
&	O
first_result	*(bool)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
assert	O
(	O
last_frozen_line	long
==	O
where	long
-	O
1	int
)	O
;	O
free	(*(void))->(void)
(	O
oldin	*(char)
)	O
;	O
return	O
true	int
;	O
}	O
static	O
lin	long
count_context_lines	()->(long)
(	O
void	O
)	O
{	O
lin	long
old	long
;	O
lin	long
lastold	long
=	O
pch_ptrn_lines	()->(long)
(	O
)	O
;	O
lin	long
context	*(char)
;	O
for	O
(	O
context	*(char)
=	O
0	int
,	O
old	long
=	O
1	int
;	O
old	long
<=	O
lastold	long
;	O
old	long
++	O
)	O
if	O
(	O
pch_char	(long)->(char)
(	O
old	long
)	O
==	O
' '	O
)	O
context	*(char)
++	O
;	O
return	O
context	*(char)
;	O
}	O
static	O
bool	bool
context_matches_file	(long,long)->(bool)
(	O
lin	long
old	long
,	O
lin	long
where	long
)	O
{	O
size_t	long
size	long
;	O
const	O
char	O
*	O
line	*(char)
;	O
line	*(char)
=	O
ifetch	(long,bool,*(long))->(*(char))
(	O
where	long
,	O
false	int
,	O
&	O
size	long
)	O
;	O
return	O
size	long
&&	O
(	O
canonicalize	bool
?	O
similar	(*(char),long,*(char),long)->(bool)
(	O
pfetch	(long)->(*(char))
(	O
old	long
)	O
,	O
pch_line_len	(long)->(long)
(	O
old	long
)	O
,	O
line	*(char)
,	O
size	long
)	O
:	O
(	O
size	long
==	O
pch_line_len	(long)->(long)
(	O
old	long
)	O
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
line	*(char)
,	O
pfetch	(long)->(*(char))
(	O
old	long
)	O
,	O
size	long
)	O
==	O
0	int
)	O
)	O
;	O
}	O
static	O
void	O
compute_changes	(long,long,long,long,*(char),*(char))->(void)
(	O
lin	long
xmin	long
,	O
lin	long
xmax	long
,	O
lin	long
ymin	long
,	O
lin	long
ymax	long
,	O
char	O
*	O
xchar	*(char)
,	O
char	O
*	O
ychar	*(char)
)	O
{	O
struct	O
context	*(char)
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
;	O
lin	long
diags	long
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
xchar	*(char)
=	O
xchar	*(char)
-	O
xmin	long
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
ychar	*(char)
=	O
ychar	*(char)
-	O
ymin	long
;	O
diags	long
=	O
xmax	long
+	O
ymax	long
+	O
3	int
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
fdiag	*(long)
=	O
xmalloc	(long)->(*(void))
(	O
2	int
*	O
diags	long
*	O
sizeof	O
(	O
*	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
fdiag	*(long)
)	O
)	O
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
bdiag	*(long)
=	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
fdiag	*(long)
+	O
diags	long
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
fdiag	*(long)
+=	O
ymax	long
+	O
1	int
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
bdiag	*(long)
+=	O
ymax	long
+	O
1	int
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
heuristic	bool
=	O
true	int
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
too_expensive	long
=	O
xmax	long
+	O
ymax	long
;	O
compareseq	(long,long,long,long,bool,*(struct(*(char),*(char),*(long),*(long),bool,long)))->(bool)
(	O
xmin	long
,	O
xmax	long
,	O
ymin	long
,	O
ymax	long
,	O
true	int
,	O
&	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
)	O
;	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
fdiag	*(long)
-=	O
ymax	long
+	O
1	int
;	O
free	(*(void))->(void)
(	O
ctxt	*(struct(*(char),*(char),*(long),*(long),bool,long))
.	O
fdiag	*(long)
)	O
;	O
}	O
