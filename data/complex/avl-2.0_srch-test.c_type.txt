int	O
seq_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
array	array(int)
[	O
i	int
]	O
==	O
key	int
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
seq_sentinel_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	*(int)
;	O
array	array(int)
[	O
n	int
]	O
=	O
key	int
;	O
for	O
(	O
p	*(int)
=	O
array	array(int)
;	O
*	O
p	*(int)
!=	O
key	int
;	O
p	*(int)
++	O
)	O
;	O
return	O
p	*(int)
-	O
array	array(int)
<	O
n	int
?	O
p	*(int)
-	O
array	array(int)
:	O
-	O
1	int
;	O
}	O
int	O
seq_sorted_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
if	O
(	O
key	int
<=	O
array	array(int)
[	O
i	int
]	O
)	O
return	O
key	int
==	O
array	array(int)
[	O
i	int
]	O
?	O
i	int
:	O
-	O
1	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
seq_sorted_sentinel_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	*(int)
;	O
array	array(int)
[	O
n	int
]	O
=	O
key	int
;	O
for	O
(	O
p	*(int)
=	O
array	array(int)
;	O
*	O
p	*(int)
<	O
key	int
;	O
p	*(int)
++	O
)	O
;	O
return	O
p	*(int)
-	O
array	array(int)
<	O
n	int
&&	O
*	O
p	*(int)
==	O
key	int
?	O
p	*(int)
-	O
array	array(int)
:	O
-	O
1	int
;	O
}	O
int	O
seq_sorted_sentinel_search_2	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	*(int)
;	O
array	array(int)
[	O
n	int
]	O
=	O
INT_MAX	O
;	O
for	O
(	O
p	*(int)
=	O
array	array(int)
;	O
*	O
p	*(int)
<	O
key	int
;	O
p	*(int)
++	O
)	O
;	O
return	O
p	*(int)
-	O
array	array(int)
<	O
n	int
&&	O
*	O
p	*(int)
==	O
key	int
?	O
p	*(int)
-	O
array	array(int)
:	O
-	O
1	int
;	O
}	O
int	O
binary_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
min	int
=	O
0	int
;	O
int	O
max	int
=	O
n	int
-	O
1	int
;	O
while	O
(	O
max	int
>=	O
min	int
)	O
{	O
int	O
i	int
=	O
(	O
min	int
+	O
max	int
)	O
/	O
2	int
;	O
if	O
(	O
key	int
<	O
array	array(int)
[	O
i	int
]	O
)	O
max	int
=	O
i	int
-	O
1	int
;	O
else	O
if	O
(	O
key	int
>	O
array	array(int)
[	O
i	int
]	O
)	O
min	int
=	O
i	int
+	O
1	int
;	O
else	O
return	O
i	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
int	O
uniform_binary_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
i	int
=	O
(	O
n	int
+	O
1	int
)	O
/	O
2	int
-	O
1	int
;	O
int	O
m	int
=	O
n	int
/	O
2	int
;	O
array	array(int)
[	O
-	O
1	int
]	O
=	O
INT_MIN	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
key	int
<	O
array	array(int)
[	O
i	int
]	O
)	O
{	O
if	O
(	O
m	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
-=	O
(	O
m	int
+	O
1	int
)	O
/	O
2	int
;	O
m	int
/=	O
2	int
;	O
}	O
else	O
if	O
(	O
key	int
>	O
array	array(int)
[	O
i	int
]	O
)	O
{	O
if	O
(	O
m	int
==	O
0	int
)	O
return	O
-	O
1	int
;	O
i	int
+=	O
(	O
m	int
+	O
1	int
)	O
/	O
2	int
;	O
m	int
/=	O
2	int
;	O
}	O
else	O
return	O
i	int
>=	O
0	int
?	O
i	int
:	O
-	O
1	int
;	O
}	O
}	O
static	O
void	O
*	O
blp_bsearch	(*(void),*(void),long,long,*((*(void),*(void))->(int)))->(*(void))
(	O
const	O
void	O
*	O
key	int
,	O
const	O
void	O
*	O
array	array(int)
,	O
size_t	long
count	long
,	O
size_t	long
size	long
,	O
int	O
(	O
*	O
compare	*((*(void),*(void))->(int))
)	O
(	O
const	O
void	O
*	O
,	O
const	O
void	O
*	O
)	O
)	O
{	O
int	O
min	int
=	O
0	int
;	O
int	O
max	int
=	O
count	long
;	O
while	O
(	O
max	int
>=	O
min	int
)	O
{	O
int	O
i	int
=	O
(	O
min	int
+	O
max	int
)	O
/	O
2	int
;	O
void	O
*	O
item	*(void)
=	O
(	O
(	O
char	O
*	O
)	O
array	array(int)
)	O
+	O
size	long
*	O
i	int
;	O
int	O
cmp	int
=	O
compare	*((*(void),*(void))->(int))
(	O
key	int
,	O
item	*(void)
)	O
;	O
if	O
(	O
cmp	int
<	O
0	int
)	O
max	int
=	O
i	int
-	O
1	int
;	O
else	O
if	O
(	O
cmp	int
>	O
0	int
)	O
min	int
=	O
i	int
+	O
1	int
;	O
else	O
return	O
item	*(void)
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
int	O
compare_ints	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
pa	*(void)
,	O
const	O
void	O
*	O
pb	*(void)
)	O
{	O
const	O
int	O
*	O
a	*(int)
=	O
pa	*(void)
;	O
const	O
int	O
*	O
b	*(int)
=	O
pb	*(void)
;	O
if	O
(	O
*	O
a	*(int)
>	O
*	O
b	*(int)
)	O
return	O
1	int
;	O
else	O
if	O
(	O
*	O
a	*(int)
<	O
*	O
b	*(int)
)	O
return	O
-	O
1	int
;	O
else	O
return	O
0	int
;	O
}	O
static	O
int	O
binary_search_bsearch	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
int	O
*	O
p	*(int)
=	O
blp_bsearch	(*(void),*(void),long,long,*((*(void),*(void))->(int)))->(*(void))
(	O
&	O
key	int
,	O
array	array(int)
,	O
n	int
,	O
sizeof	O
*	O
array	array(int)
,	O
compare_ints	(*(void),*(void))->(int)
)	O
;	O
return	O
p	*(int)
!=	O
NULL	O
?	O
p	*(int)
-	O
array	array(int)
:	O
-	O
1	int
;	O
}	O
int	O
cheat_search	(array(int),int,int)->(int)
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
{	O
return	O
key	int
>=	O
0	int
&&	O
key	int
<	O
n	int
?	O
key	int
:	O
-	O
1	int
;	O
}	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
{	O
const	O
char	O
*	O
name	*(char)
;	O
int	O
(	O
*	O
search	*((array(int),int,int)->(int))
)	O
(	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
)	O
;	O
}	O
;	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
search_func_tab	array(struct(*(char),*((array(int),int,int)->(int))))
[	O
]	O
=	O
{	O
{	O
"seq_search()"	*(char)
,	O
seq_search	(array(int),int,int)->(int)
}	O
,	O
{	O
"seq_sentinel_search()"	*(char)
,	O
seq_sentinel_search	(array(int),int,int)->(int)
}	O
,	O
{	O
"seq_sorted_search()"	*(char)
,	O
seq_sorted_search	(array(int),int,int)->(int)
}	O
,	O
{	O
"seq_sorted_sentinel_search()"	*(char)
,	O
seq_sorted_sentinel_search	(array(int),int,int)->(int)
}	O
,	O
{	O
"seq_sorted_sentinel_search_2()"	*(char)
,	O
seq_sorted_sentinel_search_2	(array(int),int,int)->(int)
}	O
,	O
{	O
"binary_search()"	*(char)
,	O
binary_search	(array(int),int,int)->(int)
}	O
,	O
{	O
"uniform_binary_search()"	*(char)
,	O
uniform_binary_search	(array(int),int,int)->(int)
}	O
,	O
{	O
"binary_search_bsearch()"	*(char)
,	O
binary_search_bsearch	(array(int),int,int)->(int)
}	O
,	O
{	O
"cheat_search()"	*(char)
,	O
cheat_search	(array(int),int,int)->(int)
}	O
,	O
}	O
;	O
const	O
size_t	long
n_search_func	long
=	O
sizeof	O
search_func_tab	array(struct(*(char),*((array(int),int,int)->(int))))
/	O
sizeof	O
*	O
search_func_tab	array(struct(*(char),*((array(int),int,int)->(int))))
;	O
static	O
void	O
start_timer	(*(long))->(void)
(	O
clock_t	long
*	O
t	*(long)
)	O
{	O
clock_t	long
now	long
=	O
clock	()->(long)
(	O
)	O
;	O
while	O
(	O
now	long
==	O
clock	()->(long)
(	O
)	O
)	O
;	O
*	O
t	*(long)
=	O
clock	()->(long)
(	O
)	O
;	O
}	O
static	O
void	O
stop_timer	(long)->(void)
(	O
clock_t	long
start	long
)	O
{	O
clock_t	long
end	long
=	O
clock	()->(long)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%.2f seconds\n"	*(char)
,	O
(	O
(	O
double	O
)	O
(	O
end	long
-	O
start	long
)	O
)	O
/	O
CLOCKS_PER_SEC	O
)	O
;	O
}	O
static	O
void	O
test_search_func_at	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int,int)->(void)
(	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
*	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
key	int
,	O
int	O
expect	int
)	O
{	O
int	O
result	int
=	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
->	O
search	*((array(int),int,int)->(int))
(	O
array	array(int)
,	O
n	int
,	O
key	int
)	O
;	O
if	O
(	O
result	int
!=	O
expect	int
)	O
printf	(*(char))->(int)
(	O
"%s returned %d looking for %d - expected %d\n"	*(char)
,	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
->	O
name	*(char)
,	O
result	int
,	O
key	int
,	O
expect	int
)	O
;	O
}	O
static	O
void	O
test_search_func	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int)->(void)
(	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
*	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
)	O
{	O
static	O
const	O
int	O
shouldnt_find	array(int)
[	O
]	O
=	O
{	O
INT_MIN	O
,	O
-	O
20	int
,	O
-	O
1	int
,	O
INT_MAX	O
}	O
;	O
int	O
i	int
;	O
printf	(*(char))->(int)
(	O
"Testing integrity of %s...  "	*(char)
,	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
->	O
name	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
test_search_func_at	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int,int)->(void)
(	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
array	array(int)
,	O
n	int
,	O
i	int
,	O
i	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
sizeof	O
shouldnt_find	array(int)
/	O
sizeof	O
*	O
shouldnt_find	array(int)
)	O
;	O
i	int
++	O
)	O
test_search_func_at	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int,int)->(void)
(	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
array	array(int)
,	O
n	int
,	O
shouldnt_find	array(int)
[	O
i	int
]	O
,	O
-	O
1	int
)	O
;	O
printf	(*(char))->(int)
(	O
"done\n"	*(char)
)	O
;	O
}	O
static	O
void	O
time_successful_search	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int)->(void)
(	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
*	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
n_iter	int
)	O
{	O
clock_t	long
timer	long
;	O
printf	(*(char))->(int)
(	O
"Timing %d sets of successful searches...  "	*(char)
,	O
n_iter	int
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
start_timer	(*(long))->(void)
(	O
&	O
timer	long
)	O
;	O
while	O
(	O
n_iter	int
--	O
>	O
0	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
->	O
search	*((array(int),int,int)->(int))
(	O
array	array(int)
,	O
n	int
,	O
i	int
)	O
;	O
}	O
stop_timer	(long)->(void)
(	O
timer	long
)	O
;	O
}	O
static	O
void	O
time_unsuccessful_search	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int)->(void)
(	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
*	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
int	O
array	array(int)
[	O
]	O
,	O
int	O
n	int
,	O
int	O
n_iter	int
)	O
{	O
clock_t	long
timer	long
;	O
printf	(*(char))->(int)
(	O
"Timing %d sets of unsuccessful searches...  "	*(char)
,	O
n_iter	int
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
start_timer	(*(long))->(void)
(	O
&	O
timer	long
)	O
;	O
while	O
(	O
n_iter	int
--	O
>	O
0	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
->	O
search	*((array(int),int,int)->(int))
(	O
array	array(int)
,	O
n	int
,	O
-	O
i	int
)	O
;	O
}	O
stop_timer	(long)->(void)
(	O
timer	long
)	O
;	O
}	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
{	O
size_t	long
i	int
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"usage: srch-test <algorithm> <array-size> <n-iterations>\n"	*(char)
"where <algorithm> is one of the following:\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_search_func	long
;	O
i	int
++	O
)	O
printf	(*(char))->(int)
(	O
"        %u for %s\n"	*(char)
,	O
(	O
unsigned	O
)	O
i	int
+	O
1	int
,	O
search_func_tab	array(struct(*(char),*((array(int),int,int)->(int))))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"      <array-size> is the size of the array to search, and\n"	*(char)
"      <n-iterations> is the number of times to iterate.\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
static	O
int	O
stoi	(*(char))->(int)
(	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
long	O
x	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
s	*(char)
,	O
NULL	O
,	O
10	int
)	O
;	O
return	O
x	long
>=	O
INT_MIN	O
&&	O
x	long
<=	O
INT_MAX	O
?	O
x	long
:	O
0	int
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
struct	O
search_func	struct(*(char),*((array(int),int,int)->(int)))
*	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
;	O
int	O
*	O
array	array(int)
,	O
n	int
;	O
int	O
n_iter	int
;	O
if	O
(	O
argc	int
!=	O
4	int
)	O
usage	()->(void)
(	O
)	O
;	O
{	O
long	O
algorithm	long
=	O
stoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
)	O
-	O
1	int
;	O
if	O
(	O
algorithm	long
<	O
0	int
||	O
algorithm	long
>	O
(	O
long	O
)	O
n_search_func	long
)	O
usage	()->(void)
(	O
)	O
;	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
=	O
&	O
search_func_tab	array(struct(*(char),*((array(int),int,int)->(int))))
[	O
algorithm	long
]	O
;	O
}	O
n	int
=	O
stoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
2	int
]	O
)	O
;	O
n_iter	int
=	O
stoi	(*(char))->(int)
(	O
argv	array(*(char))
[	O
3	int
]	O
)	O
;	O
if	O
(	O
n	int
<	O
1	int
||	O
n_iter	int
<	O
1	int
)	O
usage	()->(void)
(	O
)	O
;	O
array	array(int)
=	O
malloc	(long)->(*(void))
(	O
(	O
n	int
+	O
2	int
)	O
*	O
sizeof	O
*	O
array	array(int)
)	O
;	O
if	O
(	O
array	array(int)
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"out of memory\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
array	array(int)
++	O
;	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
array	array(int)
[	O
i	int
]	O
=	O
i	int
;	O
}	O
test_search_func	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int)->(void)
(	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
array	array(int)
,	O
n	int
)	O
;	O
time_successful_search	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int)->(void)
(	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
array	array(int)
,	O
n	int
,	O
n_iter	int
)	O
;	O
time_unsuccessful_search	(*(struct(*(char),*((array(int),int,int)->(int)))),array(int),int,int)->(void)
(	O
f	*(struct(*(char),*((array(int),int,int)->(int))))
,	O
array	array(int)
,	O
n	int
,	O
n_iter	int
)	O
;	O
free	(*(void))->(void)
(	O
array	array(int)
-	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
