typedef	O
EChar	char
my_string	array(char)
[	O
80	int
]	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
i	int
,	O
n	int
,	O
id	int
,	O
n_depend	int
;	O
int	O
v1	int
,	O
v2	int
;	O
my_string	array(char)
aux	array(char)
;	O
my_string	array(char)
aux1	array(char)
;	O
my_string	array(char)
module_name	array(char)
;	O
EChar	char
*	O
idf_name	*(char)
;	O
EChar	char
*	O
impl_name	*(char)
;	O
EChar	char
class_name	array(char)
[	O
1024	int
]	O
;	O
EPChar	*(char)
the_path	*(char)
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nINES (INstall EDMA System) Class Unregister"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\nVersion %s"	*(char)
,	O
THIS_VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n%s\n"	*(char)
,	O
COPYRIGHT	*(char)
)	O
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nWrong parameter number"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"\nUsage: ines_uninstaller [-version] version "	*(char)
"EDMA_CLASS_NAME\n\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
EDMAInit	()->(long)
(	O
)	O
;	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
argv	array(*(char))
[	O
1	int
]	O
,	O
"--version"	*(char)
)	O
==	O
0	int
)	O
{	O
sscanf	(*(char),*(char))->(int)
(	O
argv	array(*(char))
[	O
2	int
]	O
,	O
"%d.%d"	*(char)
,	O
&	O
v1	int
,	O
&	O
v2	int
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
class_name	array(char)
,	O
argv	array(*(char))
[	O
3	int
]	O
)	O
;	O
}	O
else	O
{	O
v1	int
=	O
v2	int
=	O
-	O
1	int
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
class_name	array(char)
,	O
argv	array(*(char))
[	O
1	int
]	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"--------------------------------------\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Unregistering class '%s'\n"	*(char)
,	O
class_name	array(char)
)	O
;	O
if	O
(	O
v1	int
!=	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"+ Looking for class version %d.%d..."	*(char)
,	O
v1	int
,	O
v2	int
)	O
;	O
id	int
=	O
edma_get_class_id_with_version	(*(char),int,int)->(int)
(	O
class_name	array(char)
,	O
v1	int
,	O
v2	int
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"+ Looking for latest class version..."	*(char)
)	O
;	O
id	int
=	O
edma_get_class_id	(*(char))->(int)
(	O
class_name	array(char)
)	O
;	O
v1	int
=	O
edma_get_class_major_version	(int)->(int)
(	O
id	int
)	O
;	O
v2	int
=	O
edma_get_class_minor_version	(int)->(int)
(	O
id	int
)	O
;	O
}	O
if	O
(	O
id	int
==	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"FAIL!\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"- Can't locate class. Aborting\n"	*(char)
)	O
;	O
EDMAEnd	()->(long)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"FOUND\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  > Located class       : '%s' v%d.%d with Id:%d\n"	*(char)
,	O
class_name	array(char)
,	O
v1	int
,	O
v2	int
,	O
id	int
)	O
;	O
i	int
=	O
edma_get_class_module	(int,*(char))->(int)
(	O
id	int
,	O
module_name	array(char)
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"- Cannot find class Module Name. Aborting\n"	*(char)
)	O
;	O
EDMAEnd	()->(long)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
the_path	*(char)
=	O
edma_get_system_path	()->(*(char))
(	O
)	O
;	O
idf_name	*(char)
=	O
edma_get_idf_file_path	(int)->(*(char))
(	O
id	int
)	O
;	O
impl_name	*(char)
=	O
edma_get_impl_file_path	(int)->(*(char))
(	O
id	int
)	O
;	O
printf	(*(char))->(int)
(	O
"  > Interface file      : %s\n"	*(char)
,	O
idf_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  > Implementation file : %s\n"	*(char)
,	O
impl_name	*(char)
)	O
;	O
n	int
=	O
edma_get_num_reg_classes	()->(long)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"+ Looking for Module Dependences : (%s)\n"	*(char)
,	O
module_name	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  > Looking in %d classes\n"	*(char)
,	O
n	int
)	O
;	O
n_depend	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
id	int
==	O
i	int
)	O
continue	O
;	O
edma_get_class_module	(int,*(char))->(int)
(	O
i	int
,	O
aux	array(char)
)	O
;	O
edma_get_class_name	(int,*(char))->(int)
(	O
i	int
,	O
aux1	array(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
aux	array(char)
,	O
module_name	array(char)
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    * Class %s depends on module %s\n"	*(char)
,	O
aux1	array(char)
,	O
module_name	array(char)
)	O
;	O
n_depend	int
++	O
;	O
}	O
}	O
if	O
(	O
edma_get_class_repo_type	(int)->(int)
(	O
id	int
)	O
==	O
EDMA_LOCAL_REPO	int
)	O
{	O
printf	(*(char))->(int)
(	O
"  > Class is in a local repository.\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"    Other applications using the class will not notice the change\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"    until restarted. Related files will not be deleted\n"	*(char)
)	O
;	O
n_depend	int
=	O
2	int
;	O
}	O
if	O
(	O
n_depend	int
<=	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"+ No dependences found... "	*(char)
"Uninstall implementation file is safe\n"	*(char)
)	O
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"+ %d dependencies found... "	*(char)
"Uninstall implementation file is NOT SAFE\n"	*(char)
,	O
n_depend	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"+ Testing if related files exist...\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"  > Testing Interface file existence ........"	*(char)
)	O
;	O
if	O
(	O
(	O
ESint32	int
)	O
edma_smet3	(*(char),*(char))->(*(void))
(	O
"FILESYSTEM"	*(char)
,	O
"TestFile"	*(char)
,	O
idf_name	*(char)
)	O
!=	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"FAIL!\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"     - Can't find IDF file... \n"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
" OK\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"  > Testing Implementation file existence ..."	*(char)
)	O
;	O
if	O
(	O
(	O
ESint32	int
)	O
edma_smet3	(*(char),*(char))->(*(void))
(	O
"FILESYSTEM"	*(char)
,	O
"TestFile"	*(char)
,	O
impl_name	*(char)
)	O
!=	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"FAIL!\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"     - Can't find Implementation file... \n"	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
" OK\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
"+ Freeing Class from EDMA register .........."	*(char)
)	O
;	O
i	int
=	O
0	int
;	O
i	int
=	O
edma_del_stock_class_id	(int)->(int)
(	O
id	int
)	O
;	O
if	O
(	O
i	int
==	O
-	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"FAIL!\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n   - Error deleting class"	*(char)
)	O
;	O
EDMAEnd	()->(long)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
" OK\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n+ Class %s Successfully unregistered\n\n"	*(char)
,	O
class_name	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"****************************************************\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"*** To completely wipe out the class from your system:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"*** Delete IDF file : %s\n"	*(char)
,	O
idf_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"*** Shared lib: %s\n"	*(char)
,	O
impl_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"****************************************************\n"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
the_path	*(char)
)	O
;	O
EDMAEnd	()->(long)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
