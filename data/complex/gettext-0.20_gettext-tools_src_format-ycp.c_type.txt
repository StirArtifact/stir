struct	O
spec	O
{	O
unsigned	O
int	O
directives	O
;	O
unsigned	O
int	O
arg_count	O
;	O
bool	bool
args_used	O
[	O
9	int
]	O
;	O
}	O
;	O
static	O
void	O
*	O
format_parse	O
(	O
const	O
char	O
*	O
format	O
,	O
bool	bool
translated	O
,	O
char	O
*	O
fdi	O
,	O
char	O
*	O
*	O
invalid_reason	O
)	O
{	O
const	O
char	O
*	O
const	O
format_start	O
=	O
format	O
;	O
struct	O
spec	O
spec	O
;	O
struct	O
spec	O
*	O
result	*(*(void))
;	O
spec	O
.	O
directives	O
=	O
0	int
;	O
spec	O
.	O
arg_count	O
=	O
0	int
;	O
for	O
(	O
;	O
*	O
format	O
!=	O
'\0'	O
;	O
)	O
if	O
(	O
*	O
format	O
++	O
==	O
'%'	O
)	O
{	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_START	O
)	O
;	O
spec	O
.	O
directives	O
++	O
;	O
if	O
(	O
*	O
format	O
==	O
'%'	O
)	O
format	O
++	O
;	O
else	O
if	O
(	O
*	O
format	O
>=	O
'1'	O
&&	O
*	O
format	O
<=	O
'9'	O
)	O
{	O
unsigned	O
int	O
number	O
=	O
*	O
format	O
-	O
'1'	O
;	O
while	O
(	O
spec	O
.	O
arg_count	O
<=	O
number	O
)	O
spec	O
.	O
args_used	O
[	O
spec	O
.	O
arg_count	O
++	O
]	O
=	O
false	O
;	O
spec	O
.	O
args_used	O
[	O
number	O
]	O
=	O
true	O
;	O
format	O
++	O
;	O
}	O
else	O
{	O
if	O
(	O
*	O
format	O
==	O
'\0'	O
)	O
{	O
*	O
invalid_reason	O
=	O
INVALID_UNTERMINATED_DIRECTIVE	O
(	O
)	O
;	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_ERROR	O
)	O
;	O
}	O
else	O
{	O
*	O
invalid_reason	O
=	O
(	O
c_isprint	O
(	O
*	O
format	O
)	O
?	O
xasprintf	O
(	O
_	O
(	O
"In the directive number %u, the character '%c' is not a digit between 1 and 9."	*(char)
)	O
,	O
spec	O
.	O
directives	O
,	O
*	O
format	O
)	O
:	O
xasprintf	O
(	O
_	O
(	O
"The character that terminates the directive number %u is not a digit between 1 and 9."	*(char)
)	O
,	O
spec	O
.	O
directives	O
)	O
)	O
;	O
FDI_SET	O
(	O
format	O
,	O
FMTDIR_ERROR	O
)	O
;	O
}	O
goto	O
bad_format	O
;	O
}	O
FDI_SET	O
(	O
format	O
-	O
1	int
,	O
FMTDIR_END	O
)	O
;	O
}	O
result	*(*(void))
=	O
XMALLOC	O
(	O
struct	O
spec	O
)	O
;	O
*	O
result	*(*(void))
=	O
spec	O
;	O
return	O
result	*(*(void))
;	O
bad_format	O
:	O
return	O
NULL	O
;	O
}	O
static	O
void	O
format_free	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
free	(*(void))->(void)
(	O
spec	O
)	O
;	O
}	O
static	O
int	O
format_get_number_of_directives	O
(	O
void	O
*	O
descr	O
)	O
{	O
struct	O
spec	O
*	O
spec	O
=	O
(	O
struct	O
spec	O
*	O
)	O
descr	O
;	O
return	O
spec	O
->	O
directives	O
;	O
}	O
static	O
bool	bool
format_check	O
(	O
void	O
*	O
msgid_descr	O
,	O
void	O
*	O
msgstr_descr	O
,	O
bool	bool
equality	O
,	O
formatstring_error_logger_t	O
error_logger	O
,	O
const	O
char	O
*	O
pretty_msgid	O
,	O
const	O
char	O
*	O
pretty_msgstr	O
)	O
{	O
struct	O
spec	O
*	O
spec1	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgid_descr	O
;	O
struct	O
spec	O
*	O
spec2	O
=	O
(	O
struct	O
spec	O
*	O
)	O
msgstr_descr	O
;	O
bool	bool
err	O
=	O
false	O
;	O
unsigned	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
spec1	O
->	O
arg_count	O
||	O
i	long
<	O
spec2	O
->	O
arg_count	O
;	O
i	long
++	O
)	O
{	O
bool	bool
arg_used1	O
=	O
(	O
i	long
<	O
spec1	O
->	O
arg_count	O
&&	O
spec1	O
->	O
args_used	O
[	O
i	long
]	O
)	O
;	O
bool	bool
arg_used2	O
=	O
(	O
i	long
<	O
spec2	O
->	O
arg_count	O
&&	O
spec2	O
->	O
args_used	O
[	O
i	long
]	O
)	O
;	O
if	O
(	O
equality	O
?	O
(	O
arg_used1	O
!=	O
arg_used2	O
)	O
:	O
(	O
!	O
arg_used1	O
&&	O
arg_used2	O
)	O
)	O
{	O
if	O
(	O
error_logger	O
)	O
{	O
if	O
(	O
arg_used1	O
)	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument %u doesn't exist in '%s'"	*(char)
)	O
,	O
i	long
+	O
1	int
,	O
pretty_msgstr	O
)	O
;	O
else	O
error_logger	O
(	O
_	O
(	O
"a format specification for argument %u, as in '%s', doesn't exist in '%s'"	*(char)
)	O
,	O
i	long
+	O
1	int
,	O
pretty_msgstr	O
,	O
pretty_msgid	O
)	O
;	O
}	O
err	O
=	O
true	O
;	O
break	O
;	O
}	O
}	O
return	O
err	O
;	O
}	O
struct	O
formatstring_parser	O
formatstring_ycp	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
struct	O
formatstring_parser	O
formatstring_smalltalk	O
=	O
{	O
format_parse	O
,	O
format_free	O
,	O
format_get_number_of_directives	O
,	O
NULL	O
,	O
format_check	O
}	O
;	O
