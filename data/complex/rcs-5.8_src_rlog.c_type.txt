struct	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
*	O
top	struct(*(struct(*(char),*(char),*(char),*(()->(void)))),struct(*(char),bool,bool,bool,bool,bool,bool,bool,int,bool,int,int,bool,bool,bool,int,*(char),struct(bool,long),*(char),long,bool,bool,*(char),long,*(struct(*(char),enum(int,int,int))),*(struct),*(struct),*(struct)),struct(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),struct(bool,*(char),*(char),*(char),*(char),*(char))),struct(*(char),int,struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct))),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),struct(*(char),long)),struct(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),bool))
;	O
struct	O
revrange	struct(*(char),*(char),int)
{	O
char	O
const	O
*	O
beg	*(char)
;	O
char	O
const	O
*	O
end	*(char)
;	O
int	O
nfield	int
;	O
}	O
;	O
struct	O
daterange	struct(array(char),array(char),bool)
{	O
char	O
beg	*(char)
[	O
datesize	O
]	O
;	O
char	O
end	*(char)
[	O
datesize	O
]	O
;	O
bool	bool
oep	bool
;	O
}	O
;	O
static	O
char	O
const	O
*	O
insDelFormat	*(char)
;	O
static	O
bool	bool
branchflag	bool
;	O
static	O
bool	bool
lockflag	bool
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
datelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
duelst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
revlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
Revlst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
authorlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
lockerlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
static	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
statelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
static	O
int	O
exitstatus	int
;	O
static	O
void	O
cleanup	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
exitstatus	int
=	O
EXIT_FAILURE	int
;	O
fro_zclose	(*(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long))))->(void)
(	O
&	O
FLOW	O
(	O
from	*(struct)
)	O
)	O
;	O
}	O
static	O
exiting	O
void	O
exiterr	*(()->(void))
(	O
void	O
)	O
{	O
exit_failurefully	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
getlocker	(*(char))->(void)
(	O
char	O
*	O
argv	*(*(char))
)	O
{	O
register	O
char	O
c	int
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
argv	*(*(char))
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
lockerlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
NULL	O
;	O
return	O
;	O
}	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lockerlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
argv	*(*(char))
,	O
PLEXUS	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
&&	O
c	int
!=	O
','	O
&&	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
';'	O
)	O
continue	O
;	O
*	O
argv	*(*(char))
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
lockerlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
}	O
}	O
static	O
long	O
read_positive_integer	(*(*(char)))->(long)
(	O
char	O
const	O
*	O
*	O
p	*(char)
)	O
{	O
long	O
rv	long
;	O
char	O
*	O
end	*(char)
;	O
errno	O
=	O
0	int
;	O
if	O
(	O
1	int
>	O
(	O
rv	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
*	O
p	*(char)
,	O
&	O
end	*(char)
,	O
10	int
)	O
)	O
)	O
RFATAL	O
(	O
"non-positive integer"	*(char)
)	O
;	O
if	O
(	O
ERANGE	int
==	O
errno	O
)	O
RFATAL	O
(	O
"bad integer"	*(char)
)	O
;	O
*	O
p	*(char)
=	O
end	*(char)
;	O
return	O
rv	long
;	O
}	O
static	O
void	O
count_a_d	(*(long),*(long),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))))->(void)
(	O
long	O
*	O
a	*(long)
,	O
long	O
*	O
d	*(long)
,	O
struct	O
atat	*(struct)
*	O
edits	*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)),long,array(long)))
)	O
{	O
struct	O
cbuf	struct(*(char),long)
s	*(char)
=	O
string_from_atat	(*(struct(*(char),*(struct),*(void),long)),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))))->(struct(*(char),long))
(	O
SINGLE	O
,	O
edits	*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)),long,array(long)))
)	O
;	O
long	O
*	O
totals	*(long)
=	O
zlloc	(*(struct(*(char),*(struct),*(void),long)),*(char),long)->(*(void))
(	O
SINGLE	O
,	O
__func__	O
,	O
2	int
*	O
sizeof	O
(	O
long	O
)	O
)	O
;	O
for	O
(	O
char	O
const	O
*	O
p	*(char)
=	O
s	*(char)
.	O
string	*(char)
;	O
p	*(char)
<	O
s	*(char)
.	O
string	*(char)
+	O
s	*(char)
.	O
size	long
;	O
p	*(char)
++	O
)	O
{	O
bool	bool
addp	bool
=	O
(	O
'a'	O
==	O
*	O
p	*(char)
++	O
)	O
;	O
long	O
count	long
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
' '	O
)	O
;	O
count	long
=	O
read_positive_integer	(*(*(char)))->(long)
(	O
&	O
p	*(char)
)	O
;	O
totals	*(long)
[	O
addp	bool
]	O
+=	O
count	long
;	O
if	O
(	O
addp	bool
)	O
while	O
(	O
count	long
--	O
)	O
if	O
(	O
!	O
(	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
++	O
p	*(char)
,	O
'\n'	O
)	O
)	O
)	O
goto	O
done	bool
;	O
}	O
done	bool
:	O
*	O
a	*(long)
=	O
totals	*(long)
[	O
1	int
]	O
;	O
*	O
d	*(long)
=	O
totals	*(long)
[	O
0	int
]	O
;	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
totals	*(long)
)	O
;	O
}	O
static	O
void	O
putadelta	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
register	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
register	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
editscript	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
bool	bool
trunk	bool
)	O
{	O
register	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
datebuf	array(char)
[	O
datesize	O
+	O
zonelenmax	int
]	O
;	O
bool	bool
pre5	bool
=	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
;	O
struct	O
atat	*(struct)
*	O
log	*(struct)
;	O
if	O
(	O
!	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
)	O
return	O
;	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"----------------------------\nrevision %s%s"	*(char)
,	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
pre5	bool
?	O
"        "	*(char)
:	O
""	*(char)
)	O
;	O
if	O
(	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
lockedby	*(char)
)	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
pre5	bool
+	O
"\tlocked by: %s;"	*(char)
,	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
lockedby	*(char)
)	O
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\ndate: %s;  author: %s;  state: %s;"	*(char)
,	O
date2str	(array(char),array(char))->(*(char))
(	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
datebuf	array(char)
)	O
,	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
,	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
;	O
if	O
(	O
editscript	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
editscript	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
!=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
long	O
a	*(long)
,	O
d	*(long)
;	O
count_a_d	(*(long),*(long),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))))->(void)
(	O
trunk	bool
?	O
&	O
d	*(long)
:	O
&	O
a	*(long)
,	O
trunk	bool
?	O
&	O
a	*(long)
:	O
&	O
d	*(long)
,	O
editscript	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
text	*(struct)
)	O
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
insDelFormat	*(char)
,	O
a	*(long)
,	O
d	*(long)
)	O
;	O
}	O
if	O
(	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
)	O
{	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
"\nbranches:"	*(char)
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"  %s;"	*(char)
,	O
BRANCHNO	O
(	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
->	O
num	*(char)
)	O
)	O
;	O
}	O
}	O
if	O
(	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
commitid	*(char)
)	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s commitid: %s"	*(char)
,	O
editscript	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
?	O
";"	*(char)
:	O
""	*(char)
,	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
commitid	*(char)
)	O
;	O
afputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
'\n'	O
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
(	O
log	*(struct)
=	O
node	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
log	*(struct)
)	O
&&	O
log	*(struct)
->	O
beg	*(char)
+	O
1	int
<	O
ATAT_END	O
(	O
log	*(struct)
)	O
)	O
atat_display	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),bool)->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
log	*(struct)
,	O
true	int
)	O
;	O
else	O
awrite	(*(char),long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
EMPTYLOG	*(char)
"\n"	*(char)
,	O
sizeof	O
(	O
EMPTYLOG	*(char)
)	O
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
putrunk	()->(void)
(	O
void	O
)	O
{	O
register	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
ptr	*(void)
;	O
for	O
(	O
ptr	*(void)
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
ptr	*(void)
;	O
ptr	*(void)
=	O
ptr	*(void)
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
putadelta	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
ptr	*(void)
,	O
ptr	*(void)
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
true	int
)	O
;	O
}	O
static	O
void	O
putforest	(*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
branchroot	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
static	O
void	O
putree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
if	O
(	O
!	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
;	O
putree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
putforest	(*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
)	O
;	O
}	O
static	O
void	O
putabranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
if	O
(	O
!	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
;	O
putabranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
putadelta	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),bool)->(void)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
false	int
)	O
;	O
}	O
static	O
void	O
putforest	(*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
branchroot	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
if	O
(	O
!	O
branchroot	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
return	O
;	O
putforest	(*(struct(*(void),*(struct(*`,*`)))))->(void)
(	O
branchroot	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
putabranch	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
branchroot	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
;	O
putree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
branchroot	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
;	O
}	O
static	O
char	O
extractdelta	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(char)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
pstate	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
pauthor	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
int	O
length	int
;	O
if	O
(	O
(	O
pauthor	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
authorlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
while	O
(	O
STR_DIFF	O
(	O
pauthor	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
author	*(char)
)	O
)	O
if	O
(	O
!	O
(	O
pauthor	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
pauthor	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
return	O
false	int
;	O
if	O
(	O
(	O
pstate	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
statelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
while	O
(	O
STR_DIFF	O
(	O
pstate	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
state	*(char)
)	O
)	O
if	O
(	O
!	O
(	O
pstate	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
pstate	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
return	O
false	int
;	O
if	O
(	O
lockflag	bool
&&	O
!	O
lock_on	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)))))
(	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
return	O
false	int
;	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
Revlst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
)	O
{	O
struct	O
revrange	struct(*(char),*(char),int)
const	O
*	O
rr	*(struct(*(char),*(char),int))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
length	int
=	O
rr	*(struct(*(char),*(char),int))
->	O
nfield	int
;	O
if	O
(	O
countnumflds	(*(char))->(int)
(	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
==	O
length	int
+	O
(	O
length	int
&	O
1	int
)	O
&&	O
0	int
<=	O
compartial	(*(char),*(char),int)->(int)
(	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
rr	*(struct(*(char),*(char),int))
->	O
beg	*(char)
,	O
length	int
)	O
&&	O
0	int
<=	O
compartial	(*(char),*(char),int)->(int)
(	O
rr	*(struct(*(char),*(char),int))
->	O
end	*(char)
,	O
pdelta	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*(struct`),long,array(long))),*(struct(long,long,long,*(struct`),long,array(long))),*(char),struct(*(char),long),*(struct(*(void),*(struct`))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
,	O
length	int
)	O
)	O
break	O
;	O
if	O
(	O
!	O
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
void	O
exttree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
if	O
(	O
!	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
;	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
=	O
extractdelta	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(char)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
pretty_log	struct(*(char),long)
.	O
string	*(char)
=	O
NULL	O
;	O
exttree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
for	O
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
exttree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
;	O
}	O
static	O
void	O
getauthor	(*(char))->(void)
(	O
char	O
*	O
argv	*(*(char))
)	O
{	O
register	O
int	O
c	int
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
argv	*(*(char))
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
authorlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
getusername	(bool)->(*(char))
(	O
false	int
)	O
,	O
PLEXUS	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
argv	*(*(char))
,	O
PLEXUS	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
&&	O
c	int
!=	O
','	O
&&	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
';'	O
)	O
continue	O
;	O
*	O
argv	*(*(char))
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
authorlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
}	O
}	O
static	O
void	O
getstate	(*(char))->(void)
(	O
char	O
*	O
argv	*(*(char))
)	O
{	O
register	O
char	O
c	int
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
argv	*(*(char))
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
PERR	O
(	O
"missing state attributes after -s options"	*(char)
)	O
;	O
return	O
;	O
}	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
statelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
extend	(*(struct(*(void),*(struct(*`,*`)))),*(void),*(struct(*(char),*(struct),*(void),long)))->(*(struct(*(void),*(struct(*`,*`)))))
(	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
argv	*(*(char))
,	O
PLEXUS	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
&&	O
c	int
!=	O
','	O
&&	O
c	int
!=	O
' '	O
&&	O
c	int
!=	O
'\t'	O
&&	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
';'	O
)	O
continue	O
;	O
*	O
argv	*(*(char))
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
statelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
return	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
}	O
}	O
static	O
void	O
trunclocks	()->(void)
(	O
void	O
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
const	O
*	O
plocker	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
,	O
*	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
if	O
(	O
!	O
lockerlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
return	O
;	O
for	O
(	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
locks	*(struct)
)	O
,	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
&	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
)	O
{	O
struct	O
rcslock	struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)))
const	O
*	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
for	O
(	O
plocker	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
lockerlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
;	O
)	O
if	O
(	O
STR_SAME	O
(	O
plocker	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
rl	*(struct(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long))))
->	O
login	*(char)
)	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
plocker	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
plocker	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
)	O
{	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
tp	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
GROK	O
(	O
locks	*(struct)
)	O
=	O
box	*(struct(*(void),*(struct(*(void),*(struct`)))))
.	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
recentdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(array(char),array(char),bool)))->(void)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
const	O
*	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
struct	O
daterange	struct(array(char),array(char),bool)
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
{	O
if	O
(	O
!	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
;	O
if	O
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
)	O
{	O
if	O
(	O
!	O
DATE_LT	O
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
)	O
&&	O
!	O
DATE_GT	O
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
)	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
,	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
datesize	O
)	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
[	O
datesize	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
}	O
recentdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(array(char),array(char),bool)))->(void)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
;	O
for	O
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
recentdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(array(char),array(char),bool)))->(void)
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
;	O
}	O
static	O
int	O
extdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
{	O
int	O
revno	*(char)
;	O
if	O
(	O
!	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
return	O
0	int
;	O
if	O
(	O
datelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
||	O
duelst	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
daterange	struct(array(char),array(char),bool)
const	O
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
bool	bool
oep	bool
,	O
sel	bool
=	O
false	int
;	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
datelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
oep	bool
=	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
oep	bool
;	O
complain	(*(char))->(void)
(	O
"HEY: %d [%s] [%s] [%s] => "	*(char)
,	O
oep	bool
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
,	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
)	O
;	O
if	O
(	O
(	O
sel	bool
=	O
(	O
(	O
!	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
[	O
0	int
]	O
||	O
(	O
oep	bool
?	O
DATE_LT	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
,	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
:	O
!	O
DATE_GT	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
,	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
)	O
)	O
)	O
&&	O
(	O
!	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
[	O
0	int
]	O
||	O
(	O
oep	bool
?	O
DATE_LT	O
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
)	O
:	O
!	O
DATE_GT	O
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
)	O
)	O
)	O
)	O
)	O
)	O
{	O
complain	(*(char))->(void)
(	O
"yes!\n"	*(char)
)	O
;	O
break	O
;	O
}	O
complain	(*(char))->(void)
(	O
"no\n"	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
sel	bool
)	O
{	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
duelst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
if	O
(	O
(	O
sel	bool
=	O
DATE_EQ	O
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
date	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
)	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
!	O
sel	bool
)	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
=	O
false	int
;	O
}	O
}	O
revno	*(char)
=	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
selector	bool
+	O
extdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
ilk	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
for	O
(	O
struct	O
wlink	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
root	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
branches	*(struct)
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
revno	*(char)
+=	O
extdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
;	O
return	O
revno	*(char)
;	O
}	O
static	O
void	O
getdatepair	(*(char))->(void)
(	O
char	O
*	O
argv	*(*(char))
)	O
{	O
register	O
char	O
c	int
;	O
struct	O
daterange	struct(array(char),array(char),bool)
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
char	O
const	O
*	O
rawdate	*(char)
;	O
bool	bool
switchflag	bool
;	O
argv	*(*(char))
--	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
','	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
';'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
{	O
PERR	O
(	O
"missing date/time after -d"	*(char)
)	O
;	O
return	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\0'	O
)	O
{	O
switchflag	bool
=	O
false	int
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
daterange	struct(array(char),array(char),bool)
)	O
;	O
if	O
(	O
c	int
==	O
'<'	O
)	O
{	O
c	int
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
!	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
oep	bool
=	O
c	int
!=	O
'='	O
)	O
)	O
c	int
=	O
*	O
++	O
argv	*(*(char))
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
if	O
(	O
c	int
==	O
'>'	O
)	O
{	O
c	int
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
!	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
oep	bool
=	O
c	int
!=	O
'='	O
)	O
)	O
c	int
=	O
*	O
++	O
argv	*(*(char))
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
switchflag	bool
=	O
true	int
;	O
}	O
else	O
{	O
rawdate	*(char)
=	O
argv	*(*(char))
;	O
while	O
(	O
c	int
!=	O
'<'	O
&&	O
c	int
!=	O
'>'	O
&&	O
c	int
!=	O
';'	O
&&	O
c	int
!=	O
'\0'	O
)	O
c	int
=	O
*	O
++	O
argv	*(*(char))
;	O
*	O
argv	*(*(char))
=	O
'\0'	O
;	O
if	O
(	O
c	int
==	O
'>'	O
)	O
switchflag	bool
=	O
true	int
;	O
str2date	(*(char),array(char))->(void)
(	O
rawdate	*(char)
,	O
switchflag	bool
?	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
:	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
)	O
;	O
if	O
(	O
c	int
==	O
';'	O
||	O
c	int
==	O
'\0'	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
,	O
datesize	O
)	O
;	O
PUSH	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
,	O
duelst	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
goto	O
end	*(char)
;	O
}	O
else	O
{	O
bool	bool
eq	bool
=	O
argv	*(*(char))
[	O
1	int
]	O
==	O
'='	O
;	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
oep	bool
=	O
!	O
eq	bool
;	O
argv	*(*(char))
+=	O
eq	bool
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
if	O
(	O
c	int
==	O
';'	O
||	O
c	int
==	O
'\0'	O
)	O
{	O
(	O
switchflag	bool
?	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
:	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
)	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
PUSH	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
,	O
datelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
goto	O
end	*(char)
;	O
}	O
}	O
}	O
rawdate	*(char)
=	O
argv	*(*(char))
;	O
while	O
(	O
c	int
!=	O
'>'	O
&&	O
c	int
!=	O
'<'	O
&&	O
c	int
!=	O
';'	O
&&	O
c	int
!=	O
'\0'	O
)	O
c	int
=	O
*	O
++	O
argv	*(*(char))
;	O
*	O
argv	*(*(char))
=	O
'\0'	O
;	O
str2date	(*(char),array(char))->(void)
(	O
rawdate	*(char)
,	O
switchflag	bool
?	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
:	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
end	*(char)
)	O
;	O
PUSH	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
,	O
datelist	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
end	*(char)
:	O
if	O
(	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
)	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
oep	bool
=	O
false	int
;	O
if	O
(	O
c	int
==	O
'\0'	O
)	O
return	O
;	O
while	O
(	O
(	O
c	int
=	O
*	O
++	O
argv	*(*(char))
)	O
==	O
';'	O
||	O
c	int
==	O
' '	O
||	O
c	int
==	O
'\t'	O
||	O
c	int
==	O
'\n'	O
)	O
continue	O
;	O
}	O
}	O
static	O
bool	bool
checkrevpair	(*(char),*(char))->(bool)
(	O
char	O
const	O
*	O
num1	*(char)
,	O
char	O
const	O
*	O
num2	*(char)
)	O
{	O
int	O
length	int
=	O
countnumflds	(*(char))->(int)
(	O
num1	*(char)
)	O
;	O
if	O
(	O
countnumflds	(*(char))->(int)
(	O
num2	*(char)
)	O
!=	O
length	int
||	O
(	O
2	int
<	O
length	int
&&	O
compartial	(*(char),*(char),int)->(int)
(	O
num1	*(char)
,	O
num2	*(char)
,	O
length	int
-	O
1	int
)	O
!=	O
0	int
)	O
)	O
{	O
RERR	O
(	O
"invalid branch or revision pair %s : %s"	*(char)
,	O
num1	*(char)
,	O
num2	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
getnumericrev	()->(bool)
(	O
void	O
)	O
{	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
struct	O
revrange	struct(*(char),*(char),int)
*	O
rr	*(struct(*(char),*(char),int))
;	O
int	O
n	int
;	O
struct	O
cbuf	struct(*(char),long)
s	*(char)
,	O
e	*(char)
;	O
char	O
const	O
*	O
lrev	*(char)
;	O
struct	O
cbuf	struct(*(char),long)
const	O
*	O
rstart	*(struct(*(char),long))
,	O
*	O
rend	*(struct(*(char),long))
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
char	O
const	O
*	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
Revlst	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
NULL	O
;	O
for	O
(	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
revlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
revrange	struct(*(char),*(char),int)
const	O
*	O
from	*(struct)
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
n	int
=	O
0	int
;	O
rstart	*(struct(*(char),long))
=	O
&	O
s	*(char)
;	O
rend	*(struct(*(char),long))
=	O
&	O
e	*(char)
;	O
switch	O
(	O
from	*(struct)
->	O
nfield	int
)	O
{	O
case	O
1	int
:	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
s	*(char)
,	O
from	*(struct)
->	O
beg	*(char)
)	O
)	O
goto	O
freebufs	O
;	O
rend	*(struct(*(char),long))
=	O
&	O
s	*(char)
;	O
n	int
=	O
countnumflds	(*(char))->(int)
(	O
s	*(char)
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
n	int
&&	O
(	O
lrev	*(char)
=	O
tiprev	()->(*(char))
(	O
)	O
)	O
)	O
{	O
s	*(char)
.	O
string	*(char)
=	O
lrev	*(char)
;	O
n	int
=	O
countnumflds	(*(char))->(int)
(	O
lrev	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
s	*(char)
,	O
from	*(struct)
->	O
beg	*(char)
)	O
)	O
goto	O
freebufs	O
;	O
if	O
(	O
2	int
>	O
(	O
n	int
=	O
countnumflds	(*(char))->(int)
(	O
s	*(char)
.	O
string	*(char)
)	O
)	O
)	O
e	*(char)
.	O
string	*(char)
=	O
""	*(char)
;	O
else	O
e	*(char)
.	O
string	*(char)
=	O
SHSNIP	O
(	O
&	O
e	*(char)
.	O
size	long
,	O
s	*(char)
.	O
string	*(char)
,	O
strrchr	(*(char),int)->(*(char))
(	O
s	*(char)
.	O
string	*(char)
,	O
'.'	O
)	O
)	O
;	O
break	O
;	O
case	O
3	int
:	O
if	O
(	O
!	O
fully_numeric_no_k	O
(	O
&	O
e	*(char)
,	O
from	*(struct)
->	O
end	*(char)
)	O
)	O
goto	O
freebufs	O
;	O
if	O
(	O
(	O
n	int
=	O
countnumflds	(*(char))->(int)
(	O
e	*(char)
.	O
string	*(char)
)	O
)	O
<	O
2	int
)	O
s	*(char)
.	O
string	*(char)
=	O
".0"	*(char)
;	O
else	O
{	O
SHACCR	O
(	O
e	*(char)
.	O
string	*(char)
,	O
strrchr	(*(char),int)->(*(char))
(	O
e	*(char)
.	O
string	*(char)
,	O
'.'	O
)	O
)	O
;	O
accf	(*(struct(*(char),*(struct),*(void),long)),*(char))->(void)
(	O
PLEXUS	O
,	O
".0"	*(char)
)	O
;	O
s	*(char)
.	O
string	*(char)
=	O
SHSTR	O
(	O
&	O
s	*(char)
.	O
size	long
)	O
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
!	O
(	O
fully_numeric_no_k	O
(	O
&	O
s	*(char)
,	O
from	*(struct)
->	O
beg	*(char)
)	O
&&	O
fully_numeric_no_k	O
(	O
&	O
e	*(char)
,	O
from	*(struct)
->	O
end	*(char)
)	O
&&	O
checkrevpair	(*(char),*(char))->(bool)
(	O
s	*(char)
.	O
string	*(char)
,	O
e	*(char)
.	O
string	*(char)
)	O
)	O
)	O
goto	O
freebufs	O
;	O
n	int
=	O
countnumflds	(*(char))->(int)
(	O
s	*(char)
.	O
string	*(char)
)	O
;	O
if	O
(	O
compartial	(*(char),*(char),int)->(int)
(	O
s	*(char)
.	O
string	*(char)
,	O
e	*(char)
.	O
string	*(char)
,	O
n	int
)	O
>	O
0	int
)	O
{	O
rstart	*(struct(*(char),long))
=	O
&	O
e	*(char)
;	O
rend	*(struct(*(char),long))
=	O
&	O
s	*(char)
;	O
}	O
break	O
;	O
}	O
if	O
(	O
n	int
)	O
{	O
rr	*(struct(*(char),*(char),int))
=	O
FALLOC	O
(	O
struct	O
revrange	struct(*(char),*(char),int)
)	O
;	O
rr	*(struct(*(char),*(char),int))
->	O
nfield	int
=	O
n	int
;	O
rr	*(struct(*(char),*(char),int))
->	O
beg	*(char)
=	O
rstart	*(struct(*(char),long))
->	O
string	*(char)
;	O
rr	*(struct(*(char),*(char),int))
->	O
end	*(char)
=	O
rend	*(struct(*(char),long))
->	O
string	*(char)
;	O
PUSH	O
(	O
rr	*(struct(*(char),*(char),int))
,	O
Revlst	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
}	O
}	O
if	O
(	O
branchflag	bool
&&	O
(	O
defbr	*(char)
||	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
)	O
{	O
rr	*(struct(*(char),*(char),int))
=	O
FALLOC	O
(	O
struct	O
revrange	struct(*(char),*(char),int)
)	O
;	O
rr	*(struct(*(char),*(char),int))
->	O
beg	*(char)
=	O
rr	*(struct(*(char),*(char),int))
->	O
end	*(char)
=	O
defbr	*(char)
?	O
defbr	*(char)
:	O
TAKE	O
(	O
1	int
,	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
)	O
;	O
rr	*(struct(*(char),*(char),int))
->	O
nfield	int
=	O
countnumflds	(*(char))->(int)
(	O
rr	*(struct(*(char),*(char),int))
->	O
beg	*(char)
)	O
;	O
PUSH	O
(	O
rr	*(struct(*(char),*(char),int))
,	O
Revlst	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
}	O
freebufs	O
:	O
return	O
!	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
}	O
static	O
void	O
putrevpairs	(*(char),*(char),bool)->(void)
(	O
char	O
const	O
*	O
b	*(char)
,	O
char	O
const	O
*	O
e	*(char)
,	O
bool	bool
sawsep	bool
)	O
{	O
struct	O
revrange	struct(*(char),*(char),int)
*	O
rr	*(struct(*(char),*(char),int))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
revrange	struct(*(char),*(char),int)
)	O
;	O
rr	*(struct(*(char),*(char),int))
->	O
beg	*(char)
=	O
b	*(char)
;	O
rr	*(struct(*(char),*(char),int))
->	O
end	*(char)
=	O
e	*(char)
;	O
rr	*(struct(*(char),*(char),int))
->	O
nfield	int
=	O
(	O
!	O
sawsep	bool
?	O
1	int
:	O
(	O
!	O
e	*(char)
[	O
0	int
]	O
?	O
2	int
:	O
(	O
!	O
b	*(char)
[	O
0	int
]	O
?	O
3	int
:	O
4	int
)	O
)	O
)	O
;	O
PUSH	O
(	O
rr	*(struct(*(char),*(char),int))
,	O
revlist	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
FILE	struct
*	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
a	*(long)
,	O
*	O
*	O
newargv	*(*(*(char)))
;	O
char	O
const	O
*	O
accessListString	*(char)
,	O
*	O
accessFormat	*(char)
;	O
char	O
const	O
*	O
headFormat	*(char)
,	O
*	O
symbolFormat	*(char)
;	O
bool	bool
descflag	bool
,	O
selectflag	bool
;	O
bool	bool
onlylockflag	bool
;	O
bool	bool
onlyRCSflag	bool
;	O
bool	bool
pre5	bool
;	O
bool	bool
shownames	bool
;	O
int	O
revno	*(char)
;	O
const	O
struct	O
program	struct(*(char),*(char),*(char),*(()->(void)))
program	struct(*(char),*(char),*(char),*(()->(void)))
=	O
{	O
.	O
invoke	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
,	O
.	O
name	*(char)
=	O
"rlog"	*(char)
,	O
.	O
help	*(char)
=	O
help	*(char)
,	O
.	O
exiterr	*(()->(void))
=	O
exiterr	*(()->(void))
}	O
;	O
CHECK_HV	O
(	O
)	O
;	O
gnurcs_init	(*(struct(*(char),*(char),*(char),*(()->(void)))))->(void)
(	O
&	O
program	struct(*(char),*(char),*(char),*(()->(void)))
)	O
;	O
descflag	bool
=	O
selectflag	bool
=	O
shownames	bool
=	O
true	int
;	O
onlylockflag	bool
=	O
onlyRCSflag	bool
=	O
false	int
;	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
BE	O
(	O
pe	*(char)
)	O
=	O
X_DEFAULT	*(char)
;	O
argc	int
=	O
getRCSINIT	(int,*(*(char)),*(*(*(char))))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
newargv	*(*(*(char)))
)	O
;	O
argv	*(*(char))
=	O
newargv	*(*(*(char)))
;	O
while	O
(	O
a	*(long)
=	O
*	O
++	O
argv	*(*(char))
,	O
0	int
<	O
--	O
argc	int
&&	O
*	O
a	*(long)
++	O
==	O
'-'	O
)	O
{	O
switch	O
(	O
*	O
a	*(long)
++	O
)	O
{	O
case	O
'L'	O
:	O
onlylockflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'N'	O
:	O
shownames	bool
=	O
false	int
;	O
break	O
;	O
case	O
'R'	O
:	O
onlyRCSflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'l'	O
:	O
lockflag	bool
=	O
true	int
;	O
getlocker	(*(char))->(void)
(	O
a	*(long)
)	O
;	O
break	O
;	O
case	O
'b'	O
:	O
branchflag	bool
=	O
true	int
;	O
break	O
;	O
case	O
'r'	O
:	O
parse_revpairs	(char,*(char),*((*(char),*(char),bool)->(void)))->(void)
(	O
'r'	O
,	O
a	*(long)
,	O
putrevpairs	(*(char),*(char),bool)->(void)
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
getdatepair	(*(char))->(void)
(	O
a	*(long)
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
getstate	(*(char))->(void)
(	O
a	*(long)
)	O
;	O
break	O
;	O
case	O
'w'	O
:	O
getauthor	(*(char))->(void)
(	O
a	*(long)
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
descflag	bool
=	O
false	int
;	O
break	O
;	O
case	O
't'	O
:	O
selectflag	bool
=	O
false	int
;	O
break	O
;	O
case	O
'q'	O
:	O
BE	O
(	O
quiet	bool
)	O
=	O
true	int
;	O
break	O
;	O
case	O
'x'	O
:	O
BE	O
(	O
pe	*(char)
)	O
=	O
a	*(long)
;	O
break	O
;	O
case	O
'z'	O
:	O
zone_set	(*(char))->(void)
(	O
a	*(long)
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
if	O
(	O
*	O
a	*(long)
)	O
goto	O
unknown	O
;	O
break	O
;	O
case	O
'V'	O
:	O
setRCSversion	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
break	O
;	O
default	O
:	O
unknown	O
:	O
bad_option	(*(char))->(void)
(	O
*	O
argv	*(*(char))
)	O
;	O
}	O
;	O
}	O
if	O
(	O
!	O
(	O
descflag	bool
|	O
selectflag	bool
)	O
)	O
{	O
PWARN	O
(	O
"-t overrides -h."	*(char)
)	O
;	O
descflag	bool
=	O
true	int
;	O
}	O
pre5	bool
=	O
BE	O
(	O
version	int
)	O
<	O
VERSION	O
(	O
5	int
)	O
;	O
if	O
(	O
pre5	bool
)	O
{	O
accessListString	*(char)
=	O
"\naccess list:   "	*(char)
;	O
accessFormat	*(char)
=	O
"  %s"	*(char)
;	O
headFormat	*(char)
=	O
"\nRCS file:        %s;   Working file:    %s\nhead:           %s%s\nbranch:         %s%s\nlocks:         "	*(char)
;	O
insDelFormat	*(char)
=	O
"  lines added/del: %ld/%ld"	*(char)
;	O
symbolFormat	*(char)
=	O
"  %s: %s;"	*(char)
;	O
}	O
else	O
{	O
accessListString	*(char)
=	O
"\naccess list:"	*(char)
;	O
accessFormat	*(char)
=	O
"\n\t%s"	*(char)
;	O
headFormat	*(char)
=	O
"\nRCS file: %s\nWorking file: %s\nhead:%s%s\nbranch:%s%s\nlocks:%s"	*(char)
;	O
insDelFormat	*(char)
=	O
"  lines: +%ld -%ld"	*(char)
;	O
symbolFormat	*(char)
=	O
"\n\t%s: %s"	*(char)
;	O
}	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
cleanup	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
argc	int
<	O
1	int
)	O
PFATAL	O
(	O
"no input file"	*(char)
)	O
;	O
else	O
for	O
(	O
;	O
0	int
<	O
argc	int
;	O
cleanup	()->(void)
(	O
)	O
,	O
++	O
argv	*(*(char))
,	O
--	O
argc	int
)	O
{	O
char	O
const	O
*	O
repo_filename	*(char)
;	O
struct	O
delta	struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long)),bool,long)
*	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
;	O
char	O
const	O
*	O
defbr	*(char)
;	O
bool	bool
strictly_locking	bool
;	O
int	O
kws	int
;	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
locks	*(struct)
;	O
ffree	()->(void)
(	O
)	O
;	O
if	O
(	O
pairnames	(int,*(*(char)),*((*(struct(*`,bool,struct`,*`,struct`,*`,int)))->(*(struct))),bool,bool)->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
rcsreadopen	(*(struct(*((*`)->(*`)),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))),int)))->(*(struct))
,	O
true	int
,	O
false	int
)	O
<=	O
0	int
)	O
continue	O
;	O
repo_filename	*(char)
=	O
REPO	O
(	O
filename	*(char)
)	O
;	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
=	O
REPO	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
defbr	*(char)
=	O
GROK	O
(	O
branch	*(char)
)	O
;	O
locks	*(struct)
=	O
GROK	O
(	O
locks	*(struct)
)	O
;	O
strictly_locking	bool
=	O
BE	O
(	O
strictly_locking	bool
)	O
;	O
kws	int
=	O
BE	O
(	O
kws	int
)	O
;	O
if	O
(	O
lockflag	bool
)	O
trunclocks	()->(void)
(	O
)	O
;	O
if	O
(	O
onlylockflag	bool
&&	O
!	O
locks	*(struct)
)	O
continue	O
;	O
if	O
(	O
onlyRCSflag	bool
)	O
{	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
repo_filename	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
!	O
getnumericrev	()->(bool)
(	O
)	O
)	O
continue	O
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
headFormat	*(char)
,	O
repo_filename	*(char)
,	O
MANI	O
(	O
filename	*(char)
)	O
,	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
?	O
" "	*(char)
:	O
""	*(char)
,	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
?	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
->	O
num	*(char)
:	O
""	*(char)
,	O
defbr	*(char)
?	O
" "	*(char)
:	O
""	*(char)
,	O
defbr	*(char)
?	O
defbr	*(char)
:	O
""	*(char)
,	O
strictly_locking	bool
?	O
" strict"	*(char)
:	O
""	*(char)
)	O
;	O
format_locks	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
symbolFormat	*(char)
)	O
;	O
if	O
(	O
strictly_locking	bool
&&	O
pre5	bool
)	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
"  ;  strict"	*(char)
+	O
(	O
locks	*(struct)
?	O
3	int
:	O
0	int
)	O
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
accessListString	*(char)
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
GROK	O
(	O
access	*(struct)
)	O
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
accessFormat	*(char)
,	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
)	O
;	O
if	O
(	O
shownames	bool
)	O
{	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
"\nsymbolic names:"	*(char)
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
format_assocs	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
symbolFormat	*(char)
)	O
;	O
}	O
if	O
(	O
pre5	bool
)	O
{	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
"\ncomment leader:  \""	*(char)
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
awrite	(*(char),long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
string	*(char)
,	O
REPO	O
(	O
log_lead	struct(*(char),long)
)	O
.	O
size	long
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
afputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
'\"'	O
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
!	O
pre5	bool
||	O
kws	int
!=	O
kwsub_kv	int
)	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nkeyword substitution: %s"	*(char)
,	O
kwsub_string	(enum(int,int,int,int,int,int))->(*(char))
(	O
kws	int
)	O
)	O
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\ntotal revisions: %zu"	*(char)
,	O
GROK	O
(	O
deltas_count	long
)	O
)	O
;	O
revno	*(char)
=	O
0	int
;	O
if	O
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
&&	O
selectflag	bool
&	O
descflag	bool
)	O
{	O
exttree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
for	O
(	O
struct	O
link	struct(*(void),*(struct(*(void),*(struct(*(void),*(struct`))))))
*	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
duelst	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
next	*(struct(*(void),*(struct(*(void),*(struct`)))))
)	O
{	O
struct	O
daterange	struct(array(char),array(char),bool)
const	O
*	O
incomplete	*(struct(array(char),array(char),bool))
=	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
;	O
struct	O
daterange	struct(array(char),array(char),bool)
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
ZLLOC	O
(	O
1	int
,	O
struct	O
daterange	struct(array(char),array(char),bool)
)	O
;	O
*	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
=	O
*	O
incomplete	*(struct(array(char),array(char),bool))
;	O
KSTRCPY	O
(	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
->	O
beg	*(char)
,	O
"0.0.0.0.0.0"	*(char)
)	O
;	O
ls	*(struct(*(void),*(struct(*(void),*(struct`)))))
->	O
entry	*(void)
=	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
;	O
recentdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)),*(struct(array(char),array(char),bool)))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
,	O
r	*(struct(*(char),*(char),long,*(struct),long,*(struct),long,*(struct),bool,*(struct),*(struct),int,long,*(struct),*(struct),long,*(struct),*(struct)))
)	O
;	O
}	O
revno	*(char)
=	O
extdate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(int)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
aprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
";\tselected revisions: %d"	*(char)
,	O
revno	*(char)
)	O
;	O
}	O
afputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
'\n'	O
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
descflag	bool
)	O
{	O
struct	O
atat	*(struct)
*	O
desc	*(struct)
=	O
GROK	O
(	O
desc	*(struct)
)	O
;	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
"description:\n"	*(char)
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
atat_display	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(long,long,long,*(struct(int,long,enum(int,int,int),*`,*`,*`,*`,*`,long)),long,array(long))),bool)->(void)
(	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
desc	*(struct)
,	O
true	int
)	O
;	O
}	O
if	O
(	O
revno	*(char)
)	O
{	O
putrunk	()->(void)
(	O
)	O
;	O
putree	(*(struct(*(char),*(char),*(char),*(char),*(char),*(struct(long,long,long,*`,long,array(long))),*(struct(long,long,long,*`,long,array(long))),*(char),struct(*(char),long),*(struct(*`,*`)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`,*`,*`,*`,bool,long)),bool,long)))->(void)
(	O
tip	*(struct(*(char),*(char),*(char),*(char),*(char),*(struct),*(struct),*(char),struct(*(char),long),*(struct),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),*(char),struct(*`,long),*(struct`),*(char),*(struct`),bool,long)),bool,long))
)	O
;	O
}	O
aputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
equal_line	array(char)
,	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
Ozclose	(*(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char)))))->(void)
(	O
&	O
out	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
gnurcs_goodbye	()->(void)
(	O
)	O
;	O
return	O
exitstatus	int
;	O
}	O
