mac_t	struct(array(char))
*	O
mc_mac_dup	(*(struct(array(char))))->(*(struct(array(char))))
(	O
const	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
)	O
{	O
mac_t	struct(array(char))
*	O
new	*(struct(array(char)))
;	O
new	*(struct(array(char)))
=	O
(	O
mac_t	struct(array(char))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
mac_t	struct(array(char))
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new	*(struct(array(char)))
,	O
mac	*(struct(array(char)))
,	O
sizeof	O
(	O
mac_t	struct(array(char))
)	O
)	O
;	O
return	O
new	*(struct(array(char)))
;	O
}	O
void	O
mc_mac_free	(*(struct(array(char))))->(void)
(	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
)	O
{	O
free	(*(void))->(void)
(	O
mac	*(struct(array(char)))
)	O
;	O
}	O
void	O
mc_mac_into_string	(*(struct(array(char))),*(char))->(void)
(	O
const	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
,	O
char	O
*	O
s	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
&	O
s	*(char)
[	O
i	int
*	O
3	int
]	O
,	O
"%02x%s"	*(char)
,	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
i	int
]	O
,	O
i	int
<	O
5	int
?	O
":"	*(char)
:	O
""	*(char)
)	O
;	O
}	O
}	O
void	O
mc_mac_random	(*(struct(array(char))),char,char)->(void)
(	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
,	O
unsigned	O
char	O
last_n_bytes	char
,	O
char	O
set_bia	char
)	O
{	O
switch	O
(	O
last_n_bytes	char
)	O
{	O
case	O
6	int
:	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
0	int
]	O
=	O
(	O
random	()->(long)
(	O
)	O
%	O
255	int
)	O
&	O
0xFC	int
;	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
1	int
]	O
=	O
random	()->(long)
(	O
)	O
%	O
255	int
;	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
2	int
]	O
=	O
random	()->(long)
(	O
)	O
%	O
255	int
;	O
case	O
3	int
:	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
3	int
]	O
=	O
random	()->(long)
(	O
)	O
%	O
255	int
;	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
4	int
]	O
=	O
random	()->(long)
(	O
)	O
%	O
255	int
;	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
5	int
]	O
=	O
random	()->(long)
(	O
)	O
%	O
255	int
;	O
}	O
if	O
(	O
set_bia	char
)	O
{	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
0	int
]	O
&=	O
~	O
2	int
;	O
}	O
else	O
{	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
0	int
]	O
|=	O
2	int
;	O
}	O
}	O
int	O
mc_mac_equal	(*(struct(array(char))),*(struct(array(char))))->(int)
(	O
const	O
mac_t	struct(array(char))
*	O
mac1	*(struct(array(char)))
,	O
const	O
mac_t	struct(array(char))
*	O
mac2	*(struct(array(char)))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
6	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
mac1	*(struct(array(char)))
->	O
byte	array(char)
[	O
i	int
]	O
!=	O
mac2	*(struct(array(char)))
->	O
byte	array(char)
[	O
i	int
]	O
)	O
{	O
return	O
0	int
;	O
}	O
}	O
return	O
1	int
;	O
}	O
void	O
mc_mac_next	(*(struct(array(char))))->(void)
(	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
)	O
{	O
if	O
(	O
++	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
5	int
]	O
)	O
return	O
;	O
if	O
(	O
++	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
4	int
]	O
)	O
return	O
;	O
if	O
(	O
++	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
3	int
]	O
)	O
return	O
;	O
if	O
(	O
++	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
2	int
]	O
)	O
return	O
;	O
if	O
(	O
++	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
1	int
]	O
)	O
return	O
;	O
if	O
(	O
++	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
0	int
]	O
)	O
return	O
;	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
5	int
]	O
=	O
1	int
;	O
}	O
int	O
mc_mac_read_string	(*(struct(array(char))),*(char))->(int)
(	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
,	O
char	O
*	O
string	*(char)
)	O
{	O
int	O
nbyte	int
=	O
5	int
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
!=	O
17	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[ERROR] Incorrect format: MAC length should be 17. %s(%lu)\n"	*(char)
,	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
for	O
(	O
nbyte	int
=	O
2	int
;	O
nbyte	int
<	O
16	int
;	O
nbyte	int
+=	O
3	int
)	O
{	O
if	O
(	O
string	*(char)
[	O
nbyte	int
]	O
!=	O
':'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[ERROR] Incorrect format: %s\n"	*(char)
,	O
string	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
for	O
(	O
nbyte	int
=	O
0	int
;	O
nbyte	int
<	O
6	int
;	O
nbyte	int
++	O
)	O
{	O
mac	*(struct(array(char)))
->	O
byte	array(char)
[	O
nbyte	int
]	O
=	O
(	O
char	O
)	O
(	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
string	*(char)
+	O
nbyte	int
*	O
3	int
,	O
0	int
,	O
16	int
)	O
&	O
0xFF	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
