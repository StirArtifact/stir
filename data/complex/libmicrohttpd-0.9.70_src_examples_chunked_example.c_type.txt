struct	O
ResponseContentCallbackParam	struct(*(char),long)
{	O
const	O
char	O
*	O
response_data	*(char)
;	O
size_t	long
response_size	long
;	O
}	O
;	O
static	O
ssize_t	long
callback	(*(void),long,*(char),long)->(long)
(	O
void	O
*	O
cls	*(void)
,	O
uint64_t	long
pos	long
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_size	long
)	O
{	O
size_t	long
size_to_copy	long
;	O
struct	O
ResponseContentCallbackParam	struct(*(char),long)
*	O
const	O
param	*(struct(*(char),long))
=	O
(	O
struct	O
ResponseContentCallbackParam	struct(*(char),long)
*	O
)	O
cls	*(void)
;	O
if	O
(	O
pos	long
>=	O
param	*(struct(*(char),long))
->	O
response_size	long
)	O
{	O
return	O
MHD_CONTENT_READER_END_OF_STREAM	O
;	O
}	O
if	O
(	O
buf_size	long
<	O
(	O
param	*(struct(*(char),long))
->	O
response_size	long
-	O
pos	long
)	O
)	O
size_to_copy	long
=	O
buf_size	long
;	O
else	O
size_to_copy	long
=	O
param	*(struct(*(char),long))
->	O
response_size	long
-	O
pos	long
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(char)
,	O
param	*(struct(*(char),long))
->	O
response_data	*(char)
+	O
pos	long
,	O
size_to_copy	long
)	O
;	O
return	O
size_to_copy	long
;	O
}	O
static	O
void	O
free_callback_param	(*(void))->(void)
(	O
void	O
*	O
cls	*(void)
)	O
{	O
free	(*(void))->(void)
(	O
cls	*(void)
)	O
;	O
}	O
static	O
const	O
char	O
simple_response_text	array(char)
[	O
]	O
=	O
"<html><head><title>Simple response</title></head>"	*(char)
"<body>Simple response text</body></html>"	*(char)
;	O
static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
static	O
int	O
aptr	int
;	O
struct	O
ResponseContentCallbackParam	struct(*(char),long)
*	O
callback_param	*(struct(*(char),long))
;	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
int	O
ret	int
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
url	*(char)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
if	O
(	O
0	int
!=	O
strcmp	(*(char),*(char))->(int)
(	O
method	*(char)
,	O
"GET"	*(char)
)	O
)	O
return	O
MHD_NO	int
;	O
if	O
(	O
&	O
aptr	int
!=	O
*	O
ptr	*(void)
)	O
{	O
*	O
ptr	*(void)
=	O
&	O
aptr	int
;	O
return	O
MHD_YES	int
;	O
}	O
callback_param	*(struct(*(char),long))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
ResponseContentCallbackParam	struct(*(char),long)
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
callback_param	*(struct(*(char),long))
)	O
return	O
MHD_NO	int
;	O
callback_param	*(struct(*(char),long))
->	O
response_data	*(char)
=	O
simple_response_text	array(char)
;	O
callback_param	*(struct(*(char),long))
->	O
response_size	long
=	O
(	O
sizeof	O
(	O
simple_response_text	array(char)
)	O
/	O
sizeof	O
(	O
char	O
)	O
)	O
-	O
1	int
;	O
*	O
ptr	*(void)
=	O
NULL	O
;	O
response	*(struct)
=	O
MHD_create_response_from_callback	(long,long,*((*(void),long,*(char),long)->(long)),*(void),*((*(void))->(void)))->(*(struct))
(	O
MHD_SIZE_UNKNOWN	O
,	O
1024	int
,	O
&	O
callback	(*(void),long,*(char),long)->(long)
,	O
callback_param	*(struct(*(char),long))
,	O
&	O
free_callback_param	(*(void))->(void)
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
{	O
free	(*(void))->(void)
(	O
callback_param	*(struct(*(char),long))
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
int	O
port	short
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
port	short
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
if	O
(	O
(	O
1	int
>	O
port	short
)	O
||	O
(	O
port	short
>	O
UINT16_MAX	O
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Port must be a number between 1 and 65535\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_AUTO	int
|	O
MHD_USE_INTERNAL_POLLING_THREAD	int
|	O
MHD_USE_ERROR_LOG	int
,	O
(	O
uint16_t	short
)	O
port	short
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
NULL	O
,	O
MHD_OPTION_CONNECTION_TIMEOUT	int
,	O
(	O
unsigned	O
int	O
)	O
120	int
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
NULL	O
==	O
d	*(struct)
)	O
return	O
1	int
;	O
(	O
void	O
)	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
MHD_stop_daemon	(*(struct))->(void)
(	O
d	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
