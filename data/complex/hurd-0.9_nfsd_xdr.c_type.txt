static	O
int	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
mode_t	int
m	int
)	O
{	O
return	O
m	int
&	O
0177777	int
;	O
}	O
static	O
int	O
hurd_mode_to_nfs_type	(int,int)->(int)
(	O
mode_t	int
m	int
,	O
int	O
version	int
)	O
{	O
switch	O
(	O
m	int
&	O
S_IFMT	O
)	O
{	O
case	O
S_IFDIR	O
:	O
return	O
NFDIR	int
;	O
case	O
S_IFCHR	O
:	O
return	O
NFCHR	int
;	O
case	O
S_IFBLK	O
:	O
return	O
NFBLK	int
;	O
case	O
S_IFREG	O
:	O
return	O
NFREG	int
;	O
case	O
S_IFLNK	O
:	O
return	O
NFLNK	int
;	O
case	O
S_IFSOCK	O
:	O
return	O
NFSOCK	int
;	O
case	O
S_IFIFO	O
:	O
return	O
(	O
version	int
==	O
2	int
?	O
NF2FIFO	int
:	O
NF3FIFO	int
)	O
;	O
default	O
:	O
return	O
(	O
version	int
==	O
2	int
?	O
NF2NON	int
:	O
NFREG	int
)	O
;	O
}	O
}	O
int	O
*	O
encode_fattr	(*(int),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
int	O
version	int
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
hurd_mode_to_nfs_type	(int,int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
,	O
version	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
hurd_mode_to_nfs_mode	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
)	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_nlink	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_uid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_gid	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_blksize	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_rdev	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_blocks	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_fsid	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ino	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_atim	struct(long,long)
.	O
tv_nsec	long
/	O
1000	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mtim	struct(long,long)
.	O
tv_nsec	long
/	O
1000	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ctim	struct(long,long)
.	O
tv_sec	long
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_ctim	struct(long,long)
.	O
tv_nsec	long
/	O
1000	int
)	O
;	O
return	O
p	*(int)
;	O
}	O
int	O
*	O
decode_name	(*(int),*(*(char)))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
*	O
name	*(*(char))
)	O
{	O
int	O
len	long
;	O
len	long
=	O
ntohl	(int)->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
*	O
name	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
name	*(*(char))
,	O
p	*(int)
,	O
len	long
)	O
;	O
(	O
*	O
name	*(*(char))
)	O
[	O
len	long
]	O
=	O
'\0'	O
;	O
return	O
p	*(int)
+	O
INTSIZE	O
(	O
len	long
)	O
;	O
}	O
int	O
*	O
encode_fhandle	(*(int),*(char))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
handle	union(array(char),int)
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(int)
,	O
handle	union(array(char),int)
,	O
NFS2_FHSIZE	int
)	O
;	O
return	O
p	*(int)
+	O
INTSIZE	O
(	O
NFS2_FHSIZE	int
)	O
;	O
}	O
int	O
*	O
encode_string	(*(int),*(char))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
string	*(char)
)	O
{	O
return	O
encode_data	(*(int),*(char),long)->(*(int))
(	O
p	*(int)
,	O
string	*(char)
,	O
strlen	(*(char))->(long)
(	O
string	*(char)
)	O
)	O
;	O
}	O
int	O
*	O
encode_data	(*(int),*(char),long)->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
char	O
*	O
data	*(char)
,	O
size_t	long
len	long
)	O
{	O
int	O
nints	int
=	O
INTSIZE	O
(	O
len	long
)	O
;	O
p	*(int)
[	O
nints	int
]	O
=	O
0	int
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(int)
,	O
data	*(char)
,	O
len	long
)	O
;	O
return	O
p	*(int)
+	O
nints	int
;	O
}	O
int	O
*	O
encode_statfs	(*(int),*(struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
statfs	struct(long,long,long,long,long,long,long,struct(array(int)),long,long,long,array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
f_bsize	long
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
f_bsize	long
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
f_blocks	long
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
f_bfree	long
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
f_bavail	long
;	O
return	O
p	*(int)
;	O
}	O
int	O
nfs_error_trans	(int,int)->(int)
(	O
error_t	int
err	long
,	O
int	O
version	int
)	O
{	O
switch	O
(	O
err	long
)	O
{	O
case	O
0	int
:	O
return	O
NFS_OK	int
;	O
case	O
EPERM	int
:	O
return	O
NFSERR_PERM	int
;	O
case	O
ENOENT	int
:	O
return	O
NFSERR_NOENT	int
;	O
case	O
EIO	int
:	O
return	O
NFSERR_IO	int
;	O
case	O
ENXIO	int
:	O
return	O
NFSERR_NXIO	int
;	O
case	O
EACCES	int
:	O
return	O
NFSERR_ACCES	int
;	O
case	O
EEXIST	int
:	O
return	O
NFSERR_EXIST	int
;	O
case	O
ENODEV	int
:	O
return	O
NFSERR_NODEV	int
;	O
case	O
ENOTDIR	int
:	O
return	O
NFSERR_NOTDIR	int
;	O
case	O
EISDIR	int
:	O
return	O
NFSERR_ISDIR	int
;	O
case	O
E2BIG	int
:	O
return	O
NFSERR_FBIG	int
;	O
case	O
ENOSPC	int
:	O
return	O
NFSERR_NOSPC	int
;	O
case	O
EROFS	int
:	O
return	O
NFSERR_ROFS	int
;	O
case	O
ENAMETOOLONG	int
:	O
return	O
NFSERR_NAMETOOLONG	int
;	O
case	O
ENOTEMPTY	int
:	O
return	O
NFSERR_NOTEMPTY	int
;	O
case	O
EDQUOT	int
:	O
return	O
NFSERR_DQUOT	int
;	O
case	O
ESTALE	int
:	O
return	O
NFSERR_STALE	int
;	O
default	O
:	O
if	O
(	O
version	int
==	O
2	int
)	O
return	O
NFSERR_IO	int
;	O
else	O
switch	O
(	O
err	long
)	O
{	O
case	O
EXDEV	int
:	O
return	O
NFSERR_XDEV	int
;	O
case	O
EINVAL	int
:	O
return	O
NFSERR_INVAL	int
;	O
case	O
EOPNOTSUPP	int
:	O
return	O
NFSERR_NOTSUPP	int
;	O
default	O
:	O
return	O
NFSERR_IO	int
;	O
}	O
}	O
}	O
