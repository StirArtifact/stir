struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
{	O
msgset_t	struct
*	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
;	O
mu_message_t	*(struct)
msg	*(struct)
;	O
size_t	long
cols_rest	long
;	O
char	O
*	O
buf	*(char)
;	O
size_t	long
size	long
;	O
}	O
;	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
{	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
int	O
align	int
;	O
size_t	long
width	long
;	O
void	O
*	O
data	*(void)
;	O
char	O
*	O
(	O
*	O
get	*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char)))
)	O
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
;	O
}	O
;	O
void	O
header_ensure_space	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),long)->(void)
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
size_t	long
size	long
)	O
{	O
if	O
(	O
size	long
>	O
args	*(*(char))
->	O
size	long
)	O
{	O
args	*(*(char))
->	O
buf	*(char)
=	O
mu_realloc	(*(void),long)->(*(void))
(	O
args	*(*(char))
->	O
buf	*(char)
,	O
size	long
)	O
;	O
args	*(*(char))
->	O
size	long
=	O
size	long
;	O
}	O
}	O
static	O
char	O
*	O
header_buf_string_len	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char),long)->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
const	O
char	O
*	O
str	*(struct)
,	O
size_t	long
len	long
)	O
{	O
header_ensure_space	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),long)->(void)
(	O
args	*(*(char))
,	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
args	*(*(char))
->	O
buf	*(char)
,	O
str	*(struct)
,	O
len	long
)	O
;	O
args	*(*(char))
->	O
buf	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
return	O
args	*(*(char))
->	O
buf	*(char)
;	O
}	O
static	O
char	O
*	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
if	O
(	O
!	O
str	*(struct)
)	O
return	O
header_buf_string_len	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char),long)->(*(char))
(	O
args	*(*(char))
,	O
""	*(char)
,	O
0	int
)	O
;	O
return	O
header_buf_string_len	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char),long)->(*(char))
(	O
args	*(*(char))
,	O
str	*(struct)
,	O
strlen	(*(char))->(long)
(	O
str	*(struct)
)	O
)	O
;	O
}	O
static	O
void	O
format_pad	(long)->(void)
(	O
size_t	long
n	*(long)
)	O
{	O
for	O
(	O
;	O
n	*(long)
;	O
n	*(long)
--	O
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
" "	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
static	O
void	O
format_headline	(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))),*(struct(*(struct(*`,int,*`)),int,*(long))),*(struct))->(void)
(	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
,	O
msgset_t	struct
*	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
int	O
screen_cols	int
=	O
util_screen_columns	()->(int)
(	O
)	O
-	O
2	int
;	O
int	O
out_cols	int
=	O
0	int
;	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
args	*(*(char))
;	O
args	*(*(char))
.	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
=	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
;	O
args	*(*(char))
.	O
msg	*(struct)
=	O
msg	*(struct)
;	O
args	*(*(char))
.	O
buf	*(char)
=	O
NULL	O
;	O
args	*(*(char))
.	O
size	long
=	O
0	int
;	O
for	O
(	O
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
size_t	long
width	long
,	O
len	long
;	O
size_t	long
cols_rest	long
=	O
screen_cols	int
-	O
out_cols	int
;	O
char	O
*	O
p	*(char)
;	O
args	*(*(char))
.	O
cols_rest	long
=	O
cols_rest	long
;	O
p	*(char)
=	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
get	*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char)))
(	O
&	O
args	*(*(char))
,	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
data	*(void)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
p	*(char)
=	O
""	*(char)
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
p	*(char)
)	O
;	O
if	O
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
width	long
)	O
width	long
=	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
width	long
;	O
else	O
width	long
=	O
len	long
;	O
if	O
(	O
width	long
>	O
cols_rest	long
)	O
width	long
=	O
cols_rest	long
;	O
if	O
(	O
len	long
>	O
width	long
)	O
len	long
=	O
width	long
;	O
if	O
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
align	int
==	O
ALIGN_RIGHT	int
)	O
{	O
format_pad	(long)->(void)
(	O
width	long
-	O
len	long
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%*.*s"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
(	O
int	O
)	O
len	long
,	O
p	*(char)
)	O
;	O
}	O
else	O
{	O
mu_printf	(*(char))->(int)
(	O
"%*.*s"	*(char)
,	O
(	O
int	O
)	O
len	long
,	O
(	O
int	O
)	O
len	long
,	O
p	*(char)
)	O
;	O
format_pad	(long)->(void)
(	O
width	long
-	O
len	long
)	O
;	O
}	O
out_cols	int
+=	O
width	long
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
args	*(*(char))
.	O
buf	*(char)
)	O
;	O
}	O
static	O
void	O
free_headline	(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))->(void)
(	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
{	O
while	O
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
{	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
data	*(void)
)	O
free	(*(void))->(void)
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
data	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
}	O
static	O
char	O
*	O
hdr_text	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
data	*(void)
;	O
}	O
static	O
char	O
*	O
hdr_cur	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
if	O
(	O
is_current_message	(long)->(int)
(	O
args	*(*(char))
->	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
->	O
msg_part	*(long)
[	O
0	int
]	O
)	O
)	O
return	O
(	O
char	O
*	O
)	O
data	*(void)
;	O
return	O
" "	*(char)
;	O
}	O
static	O
char	O
*	O
hdr_attr	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
char	O
cflag	char
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
if	O
(	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MAIL_ATTRIBUTE_MBOXED	int
)	O
)	O
cflag	char
=	O
'M'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MAIL_ATTRIBUTE_PRESERVED	int
)	O
)	O
cflag	char
=	O
'P'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MAIL_ATTRIBUTE_SAVED	int
)	O
)	O
cflag	char
=	O
'*'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MAIL_ATTRIBUTE_TAGGED	int
)	O
)	O
cflag	char
=	O
'T'	O
;	O
else	O
if	O
(	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MAIL_ATTRIBUTE_SHOWN	int
)	O
)	O
cflag	char
=	O
'R'	O
;	O
else	O
if	O
(	O
mu_attribute_is_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
cflag	char
=	O
'N'	O
;	O
else	O
if	O
(	O
!	O
mu_attribute_is_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
cflag	char
=	O
'U'	O
;	O
else	O
cflag	char
=	O
' '	O
;	O
return	O
header_buf_string_len	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char),long)->(*(char))
(	O
args	*(*(char))
,	O
&	O
cflag	char
,	O
1	int
)	O
;	O
}	O
static	O
char	O
*	O
hdr_date	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
[	O
80	int
]	O
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
char	O
const	O
*	O
fmt	*(char)
=	O
data	*(void)
?	O
data	*(void)
:	O
"%a %b %e %H:%M"	*(char)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
[	O
0	int
]	O
=	O
0	int
;	O
if	O
(	O
mailvar_is_true	(*(char))->(int)
(	O
mailvar_name_datefield	*(char)
)	O
&&	O
mu_header_get_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_DATE	*(char)
,	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
sizeof	O
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
time_t	long
t	long
;	O
if	O
(	O
mu_parse_date	(*(char),*(long),*(long))->(int)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
t	long
,	O
NULL	O
)	O
==	O
0	int
)	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
sizeof	O
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
,	O
fmt	*(char)
,	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
t	long
)	O
)	O
;	O
else	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
[	O
0	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
[	O
0	int
]	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
mu_timezone	struct(int,*(char))
tz	*(struct(int,*(char)))
;	O
mu_envelope_t	*(struct)
env	*(struct)
;	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
mu_envelope_sget_date	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
p	*(char)
)	O
==	O
0	int
&&	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
p	*(char)
,	O
MU_DATETIME_FROM	*(char)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
==	O
0	int
)	O
strftime	(*(char),long,*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))->(long)
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
sizeof	O
(	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
,	O
fmt	*(char)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
}	O
return	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
)	O
;	O
}	O
char	O
*	O
sender_string	(*(struct))->(*(char))
(	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
char	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
if	O
(	O
mailvar_is_true	(*(char))->(int)
(	O
mailvar_name_fromfield	*(char)
)	O
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
if	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
==	O
0	int
&&	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
==	O
0	int
)	O
{	O
mu_address_t	*(struct)
address	array(char)
=	O
NULL	O
;	O
if	O
(	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
address	array(char)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
==	O
0	int
)	O
{	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
email	*(char)
;	O
if	O
(	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
address	array(char)
,	O
1	int
,	O
&	O
email	*(char)
)	O
==	O
0	int
&&	O
email	*(char)
)	O
{	O
if	O
(	O
mailvar_is_true	(*(char))->(int)
(	O
mailvar_name_showto	*(char)
)	O
&&	O
mail_is_my_name	(*(char))->(int)
(	O
email	*(char)
)	O
)	O
{	O
char	O
*	O
tmp	*(char)
;	O
if	O
(	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_TO	*(char)
,	O
&	O
tmp	*(char)
)	O
==	O
0	int
)	O
{	O
mu_address_t	*(struct)
addr_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
tmp	*(char)
)	O
==	O
0	int
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
address	array(char)
)	O
;	O
address	array(char)
=	O
addr_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
}	O
}	O
if	O
(	O
(	O
mu_address_aget_personal	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
address	array(char)
,	O
1	int
,	O
&	O
name	*(char)
)	O
==	O
0	int
&&	O
name	*(char)
)	O
||	O
(	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
address	array(char)
,	O
1	int
,	O
&	O
name	*(char)
)	O
==	O
0	int
&&	O
name	*(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
name	*(char)
;	O
}	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
address	array(char)
)	O
;	O
}	O
}	O
util_rfc2047_decode	(*(*(char)))->(void)
(	O
&	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
}	O
else	O
{	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
const	O
char	O
*	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
""	*(char)
;	O
if	O
(	O
mu_message_get_envelope	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
env	*(struct)
)	O
==	O
0	int
)	O
mu_envelope_sget_sender	(*(struct),*(*(char)))->(int)
(	O
env	*(struct)
,	O
&	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
mu_strdup	(*(char))->(*(char))
(	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
}	O
return	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
}	O
static	O
char	O
*	O
hdr_from	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
sender_string	(*(struct))->(*(char))
(	O
args	*(*(char))
->	O
msg	*(struct)
)	O
;	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
free	(*(void))->(void)
(	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
return	O
args	*(*(char))
->	O
buf	*(char)
;	O
}	O
static	O
char	O
*	O
hdr_lines	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
size_t	long
m_lines	long
;	O
char	O
buf	*(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
m_lines	long
)	O
;	O
return	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
umaxtostr	(long,*(char))->(*(char))
(	O
m_lines	long
,	O
buf	*(char)
)	O
)	O
;	O
}	O
static	O
char	O
*	O
hdr_quick_lines	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
size_t	long
m_lines	long
;	O
char	O
buf	*(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
p	*(char)
;	O
rc	int
=	O
mu_message_quick_lines	(*(struct),*(long))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
m_lines	long
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
p	*(char)
=	O
umaxtostr	(long,*(char))->(*(char))
(	O
m_lines	long
,	O
buf	*(char)
)	O
;	O
else	O
p	*(char)
=	O
"NA"	*(char)
;	O
return	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
p	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
hdr_number	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
buf	*(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
return	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
umaxtostr	(long,*(char))->(*(char))
(	O
args	*(*(char))
->	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
->	O
msg_part	*(long)
[	O
0	int
]	O
,	O
buf	*(char)
)	O
)	O
;	O
}	O
static	O
char	O
*	O
hdr_size	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
size_t	long
m_size	long
;	O
char	O
buf	*(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
mu_message_size	(*(struct),*(long))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
m_size	long
)	O
;	O
return	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
umaxtostr	(long,*(char))->(*(char))
(	O
m_size	long
,	O
buf	*(char)
)	O
)	O
;	O
}	O
static	O
char	O
*	O
hdr_subject	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
char	O
*	O
subj	*(char)
=	O
NULL	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
subj	*(char)
)	O
;	O
util_rfc2047_decode	(*(*(char)))->(void)
(	O
&	O
subj	*(char)
)	O
;	O
header_buf_string	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(char))->(*(char))
(	O
args	*(*(char))
,	O
subj	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
subj	*(char)
)	O
;	O
return	O
args	*(*(char))
->	O
buf	*(char)
;	O
}	O
static	O
char	O
*	O
hdr_q_subject	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
args	*(*(char))
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
char	O
*	O
subj	*(char)
=	O
NULL	O
;	O
size_t	long
len	long
;	O
if	O
(	O
args	*(*(char))
->	O
cols_rest	long
<=	O
2	int
)	O
return	O
"\"\""	*(char)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
args	*(*(char))
->	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
subj	*(char)
)	O
;	O
if	O
(	O
!	O
subj	*(char)
)	O
return	O
""	*(char)
;	O
util_rfc2047_decode	(*(*(char)))->(void)
(	O
&	O
subj	*(char)
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
subj	*(char)
)	O
;	O
if	O
(	O
len	long
+	O
2	int
>	O
args	*(*(char))
->	O
cols_rest	long
)	O
len	long
=	O
args	*(*(char))
->	O
cols_rest	long
-	O
2	int
;	O
header_ensure_space	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),long)->(void)
(	O
args	*(*(char))
,	O
len	long
+	O
3	int
)	O
;	O
args	*(*(char))
->	O
buf	*(char)
[	O
0	int
]	O
=	O
'"'	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
args	*(*(char))
->	O
buf	*(char)
+	O
1	int
,	O
subj	*(char)
,	O
len	long
)	O
;	O
args	*(*(char))
->	O
buf	*(char)
[	O
len	long
+	O
1	int
]	O
=	O
'"'	O
;	O
args	*(*(char))
->	O
buf	*(char)
[	O
len	long
+	O
2	int
]	O
=	O
0	int
;	O
free	(*(void))->(void)
(	O
subj	*(char)
)	O
;	O
return	O
args	*(*(char))
->	O
buf	*(char)
;	O
}	O
static	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
int	O
align	int
,	O
size_t	long
width	long
,	O
void	O
*	O
data	*(void)
,	O
char	O
*	O
(	O
*	O
get	*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char)))
)	O
(	O
struct	O
header_call_args	struct(*(struct(*(struct(*(struct`),int,*(long))),int,*(long))),*(struct),long,*(char),long)
*	O
,	O
void	O
*	O
)	O
)	O
{	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
mu_alloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
)	O
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
align	int
=	O
align	int
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
width	long
=	O
width	long
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
data	*(void)
=	O
data	*(void)
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
->	O
get	*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char)))
=	O
get	*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char)))
;	O
return	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
;	O
}	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
compile_headline	(*(char))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
const	O
char	O
*	O
str	*(struct)
)	O
{	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
head	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
NULL	O
,	O
*	O
tail	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
NULL	O
;	O
char	O
*	O
text	*(char)
;	O
int	O
align	int
;	O
size_t	long
width	long
;	O
while	O
(	O
*	O
str	*(struct)
)	O
{	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
;	O
size_t	long
len	long
;	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(struct)
,	O
'%'	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
len	long
=	O
strlen	(*(char))->(long)
(	O
str	*(struct)
)	O
;	O
else	O
len	long
=	O
p	*(char)
-	O
str	*(struct)
;	O
if	O
(	O
len	long
)	O
{	O
text	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
text	*(char)
,	O
str	*(struct)
,	O
len	long
)	O
;	O
text	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_LEFT	int
,	O
0	int
,	O
text	*(char)
,	O
hdr_text	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
ATTACH	O
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
;	O
}	O
if	O
(	O
!	O
p	*(char)
)	O
break	O
;	O
str	*(struct)
=	O
++	O
p	*(char)
;	O
if	O
(	O
*	O
str	*(struct)
==	O
'-'	O
)	O
{	O
str	*(struct)
++	O
;	O
align	int
=	O
ALIGN_LEFT	int
;	O
}	O
else	O
if	O
(	O
*	O
str	*(struct)
==	O
'+'	O
)	O
{	O
str	*(struct)
++	O
;	O
align	int
=	O
ALIGN_RIGHT	int
;	O
}	O
else	O
align	int
=	O
ALIGN_UNDEF	O
;	O
if	O
(	O
mu_isdigit	O
(	O
*	O
str	*(struct)
)	O
)	O
width	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
str	*(struct)
,	O
(	O
char	O
*	O
*	O
)	O
&	O
str	*(struct)
,	O
10	int
)	O
;	O
else	O
width	long
=	O
0	int
;	O
switch	O
(	O
*	O
str	*(struct)
++	O
)	O
{	O
case	O
'%'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_LEFT	int
,	O
0	int
,	O
mu_strdup	(*(char))->(*(char))
(	O
"%"	*(char)
)	O
,	O
hdr_text	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_attr	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_date	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_from	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_lines	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_quick_lines	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_number	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_NUMBER	O
,	O
width	long
,	O
NULL	O
,	O
hdr_size	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_subject	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'S'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
NULL	O
,	O
hdr_q_subject	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'>'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
mu_strdup	(*(char))->(*(char))
(	O
">"	*(char)
)	O
,	O
hdr_cur	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'<'	O
:	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
mu_strdup	(*(char))->(*(char))
(	O
"<"	*(char)
)	O
,	O
hdr_cur	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
case	O
'D'	O
:	O
{	O
int	O
i	int
;	O
static	O
char	O
timespec	struct(long,long)
[	O
]	O
=	O
"aAbBcCdDeFGghHIjklmMnpPrRsStTuUVwWxXyYzZ+%"	*(char)
;	O
static	O
char	O
espec	array(char)
[	O
]	O
=	O
"cCxXyY"	*(char)
;	O
static	O
char	O
ospec	array(char)
[	O
]	O
=	O
"deHImMSuUVwWy"	*(char)
;	O
if	O
(	O
*	O
str	*(struct)
==	O
'{'	O
)	O
{	O
for	O
(	O
i	int
=	O
1	int
;	O
str	*(struct)
[	O
i	int
]	O
&&	O
str	*(struct)
[	O
i	int
]	O
!=	O
'}'	O
;	O
i	int
++	O
)	O
if	O
(	O
str	*(struct)
[	O
i	int
]	O
==	O
'\\'	O
)	O
i	int
++	O
;	O
if	O
(	O
str	*(struct)
[	O
i	int
]	O
)	O
{	O
text	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
i	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
text	*(char)
,	O
str	*(struct)
+	O
1	int
,	O
i	int
-	O
1	int
)	O
;	O
text	*(char)
[	O
i	int
-	O
1	int
]	O
=	O
0	int
;	O
mu_c_str_unescape_inplace	(*(char),*(char),*(char))->(int)
(	O
text	*(char)
,	O
"\\{}"	*(char)
,	O
NULL	O
)	O
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	*(char)
,	O
hdr_date	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
str	*(struct)
+=	O
i	int
+	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
str	*(struct)
[	O
1	int
]	O
&&	O
(	O
(	O
*	O
str	*(struct)
==	O
'E'	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
espec	array(char)
,	O
str	*(struct)
[	O
1	int
]	O
)	O
)	O
||	O
(	O
*	O
str	*(struct)
==	O
'O'	O
&&	O
strchr	(*(char),int)->(*(char))
(	O
ospec	array(char)
,	O
str	*(struct)
[	O
1	int
]	O
)	O
)	O
)	O
)	O
{	O
text	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
4	int
)	O
;	O
text	*(char)
[	O
0	int
]	O
=	O
'%'	O
;	O
text	*(char)
[	O
1	int
]	O
=	O
*	O
str	*(struct)
++	O
;	O
text	*(char)
[	O
2	int
]	O
=	O
*	O
str	*(struct)
++	O
;	O
text	*(char)
[	O
3	int
]	O
=	O
0	int
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	*(char)
,	O
hdr_date	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
}	O
else	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
timespec	struct(long,long)
,	O
*	O
str	*(struct)
)	O
)	O
{	O
text	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
3	int
)	O
;	O
text	*(char)
[	O
0	int
]	O
=	O
'%'	O
;	O
text	*(char)
[	O
1	int
]	O
=	O
*	O
str	*(struct)
++	O
;	O
text	*(char)
[	O
2	int
]	O
=	O
0	int
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	*(char)
,	O
hdr_date	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
break	O
;	O
}	O
}	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"unknown format specifier: %%%c"	*(char)
)	O
,	O
str	*(struct)
[	O
-	O
1	int
]	O
)	O
;	O
len	long
=	O
str	*(struct)
-	O
p	*(char)
;	O
text	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
len	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
text	*(char)
,	O
p	*(char)
,	O
len	long
-	O
1	int
)	O
;	O
text	*(char)
[	O
len	long
-	O
1	int
]	O
=	O
0	int
;	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
new_header_segment	(int,long,*(void),*((*(struct(*`,*`,long,*`,long)),*(void))->(*(char))))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
ALIGN_STRING	O
,	O
width	long
,	O
text	*(char)
,	O
hdr_text	(*(struct(*(struct(*`,int,*`)),*(struct),long,*(char),long)),*(void))->(*(char))
)	O
;	O
}	O
ATTACH	O
(	O
seg	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
;	O
}	O
return	O
head	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
;	O
}	O
static	O
struct	O
header_segm	struct(*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char))))),int,long,*(void),*((*(struct(*(struct`),*(struct`),long,*(char),long)),*(void))->(*(char))))
*	O
mail_header_line	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
;	O
void	O
mail_compile_headline	(*(char))->(void)
(	O
char	O
const	O
*	O
str	*(struct)
)	O
{	O
free_headline	(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))->(void)
(	O
mail_header_line	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
)	O
;	O
mail_header_line	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
=	O
compile_headline	(*(char))->(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))))
(	O
str	*(struct)
)	O
;	O
}	O
int	O
mail_from0	(*(struct(*(struct(*`,int,*`)),int,*(long))),*(struct),*(void))->(int)
(	O
msgset_t	struct
*	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
,	O
mu_message_t	*(struct)
msg	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
format_headline	(*(struct(*(struct(*`,int,long,*`,*`)),int,long,*(void),*((*`,*`)->(*`)))),*(struct(*(struct(*`,int,*`)),int,*(long))),*(struct))->(void)
(	O
mail_header_line	*(struct(*(struct(*(struct`),int,long,*(void),*((*`,*`)->(*`)))),int,long,*(void),*((*(struct`),*(void))->(*(char)))))
,	O
mspec	*(struct(*(struct(*(struct`),int,*(long))),int,*(long)))
,	O
msg	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mail_from	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
return	O
util_foreach_msg	(int,*(*(char)),int,*((*(struct(*`,int,*`)),*(struct),*(void))->(int)),*(void))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
MSG_NODELETED	int
|	O
MSG_SILENT	int
,	O
mail_from0	(*(struct(*(struct(*`,int,*`)),int,*(long))),*(struct),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
