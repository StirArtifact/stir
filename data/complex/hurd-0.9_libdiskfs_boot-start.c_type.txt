static	O
mach_port_t	O
diskfs_exec_ctl	int
;	O
extern	O
task_t	O
diskfs_exec_server_task	int
;	O
static	O
task_t	O
parent_task	int
=	O
MACH_PORT_NULL	O
;	O
static	O
pthread_mutex_t	O
execstartlock	int
;	O
static	O
pthread_cond_t	O
execstarted	int
;	O
const	O
char	O
*	O
diskfs_boot_init_program	*(char)
=	O
_HURD_STARTUP	O
;	O
static	O
void	O
start_execserver	()->(void)
(	O
)	O
;	O
char	O
*	O
*	O
diskfs_argv	*(*(char))
=	O
0	int
;	O
static	O
mach_port_t	O
get_console	()->(int)
(	O
)	O
{	O
mach_port_t	O
device_master	O
,	O
console	O
;	O
error_t	O
err	O
=	O
get_privileged_ports	()->(int)
(	O
0	int
,	O
&	O
device_master	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
MACH_PORT_NULL	O
;	O
err	O
=	O
device_open	()->(int)
(	O
device_master	O
,	O
D_WRITE	O
|	O
D_READ	O
,	O
"console"	*(char)
,	O
&	O
console	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
device_master	O
)	O
;	O
if	O
(	O
err	O
)	O
return	O
MACH_PORT_NULL	O
;	O
return	O
console	O
;	O
}	O
void	O
_diskfs_boot_privports	()->(void)
(	O
void	O
)	O
{	O
assert	()->(int)
(	O
diskfs_boot_filesystem	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
_hurd_host_priv	O
==	O
MACH_PORT_NULL	O
)	O
{	O
mach_port_t	O
bootstrap	O
;	O
error_t	O
err	O
=	O
task_get_bootstrap_port	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
fsys_getpriv	()->(int)
(	O
bootstrap	O
,	O
&	O
_hurd_host_priv	O
,	O
&	O
_hurd_device_master	O
,	O
&	O
parent_task	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
bootstrap	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
}	O
}	O
void	O
diskfs_start_bootstrap	()->(void)
(	O
)	O
{	O
mach_port_t	O
root_pt	O
,	O
startup_pt	O
,	O
bootpt	O
;	O
retry_type	O
retry	enum
;	O
char	O
pathbuf	array(char)
[	O
1024	int
]	O
;	O
string_t	O
retry_name	O
;	O
mach_port_t	O
portarray	O
[	O
INIT_PORT_MAX	O
]	O
;	O
mach_port_t	O
fdarray	O
[	O
3	int
]	O
;	O
task_t	O
newt	O
;	O
error_t	O
err	O
;	O
char	O
*	O
exec_argv	*(char)
,	O
*	O
exec_env	*(char)
;	O
const	O
char	O
*	O
initname	*(char)
;	O
size_t	O
exec_argvlen	O
,	O
exec_envlen	O
;	O
struct	O
port_info	O
*	O
bootinfo	*(struct)
;	O
struct	O
protid	O
*	O
rootpi	*(struct)
;	O
struct	O
peropen	O
*	O
rootpo	*(struct)
;	O
mach_port_t	O
diskfs_exec	O
;	O
unsigned	O
int	O
init_lookups	int
=	O
0	int
;	O
err	O
=	O
diskfs_make_peropen	()->(int)
(	O
diskfs_root_node	O
,	O
O_READ	O
|	O
O_EXEC	O
,	O
0	int
,	O
&	O
rootpo	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
diskfs_create_protid	()->(int)
(	O
rootpo	*(struct)
,	O
0	int
,	O
&	O
rootpi	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
root_pt	O
=	O
ports_get_send_right	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
ports_port_deref	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
if	O
(	O
diskfs_exec_server_task	int
==	O
MACH_PORT_NULL	O
)	O
{	O
assert	()->(int)
(	O
_hurd_ports	O
)	O
;	O
assert	()->(int)
(	O
_hurd_ports	O
[	O
INIT_PORT_CRDIR	O
]	O
.	O
port	int
!=	O
MACH_PORT_NULL	O
)	O
;	O
diskfs_exec	O
=	O
file_name_lookup	()->(int)
(	O
_SERVERS_EXEC	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
diskfs_exec	O
==	O
MACH_PORT_NULL	O
)	O
error	()->(int)
(	O
1	int
,	O
errno	O
,	O
"%s"	*(char)
,	O
_SERVERS_EXEC	O
)	O
;	O
else	O
{	O
struct	O
port_info	O
*	O
pi	*(struct)
=	O
ports_lookup_port	()->(int)
(	O
diskfs_port_bucket	O
,	O
diskfs_exec	O
,	O
0	int
)	O
;	O
assert	()->(int)
(	O
!	O
pi	*(struct)
)	O
;	O
}	O
printf	O
(	O
"\nContinuing on new root filesystem %s:"	*(char)
,	O
diskfs_disk_name	O
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
else	O
{	O
uid_t	O
idlist	O
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
0	int
}	O
;	O
file_t	O
execnode	O
;	O
printf	O
(	O
"Hurd server bootstrap: %s[%s]"	*(char)
,	O
program_invocation_short_name	O
,	O
diskfs_disk_name	O
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
pthread_mutex_init	()->(int)
(	O
&	O
execstartlock	int
,	O
NULL	O
)	O
;	O
pthread_cond_init	()->(int)
(	O
&	O
execstarted	int
,	O
NULL	O
)	O
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
execstartlock	int
)	O
;	O
start_execserver	()->(void)
(	O
)	O
;	O
pthread_cond_wait	()->(int)
(	O
&	O
execstarted	int
,	O
&	O
execstartlock	int
)	O
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
execstartlock	int
)	O
;	O
assert	()->(int)
(	O
diskfs_exec_ctl	int
!=	O
MACH_PORT_NULL	O
)	O
;	O
err	O
=	O
fsys_getroot	()->(int)
(	O
diskfs_exec_ctl	int
,	O
root_pt	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
idlist	O
,	O
3	int
,	O
idlist	O
,	O
3	int
,	O
0	int
,	O
&	O
retry	enum
,	O
retry_name	O
,	O
&	O
diskfs_exec	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
assert	()->(int)
(	O
retry	enum
==	O
FS_RETRY_NORMAL	O
)	O
;	O
assert	()->(int)
(	O
retry_name	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
;	O
assert	()->(int)
(	O
diskfs_exec	O
!=	O
MACH_PORT_NULL	O
)	O
;	O
err	O
=	O
dir_lookup	()->(int)
(	O
root_pt	O
,	O
_SERVERS_EXEC	O
,	O
O_NOTRANS	O
,	O
0	int
,	O
&	O
retry	enum
,	O
retry_name	O
,	O
&	O
execnode	O
)	O
;	O
if	O
(	O
err	O
)	O
{	O
error	()->(int)
(	O
0	int
,	O
err	O
,	O
"cannot set translator on %s"	*(char)
,	O
_SERVERS_EXEC	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
diskfs_exec_ctl	int
)	O
;	O
}	O
else	O
{	O
assert	()->(int)
(	O
retry	enum
==	O
FS_RETRY_NORMAL	O
)	O
;	O
assert	()->(int)
(	O
retry_name	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
;	O
assert	()->(int)
(	O
execnode	O
!=	O
MACH_PORT_NULL	O
)	O
;	O
err	O
=	O
file_set_translator	()->(int)
(	O
execnode	O
,	O
0	int
,	O
FS_TRANS_SET	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
diskfs_exec_ctl	int
,	O
MACH_MSG_TYPE_COPY_SEND	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
diskfs_exec_ctl	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
execnode	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
}	O
diskfs_exec_ctl	int
=	O
MACH_PORT_NULL	O
;	O
}	O
_hurd_port_set	()->(int)
(	O
&	O
_diskfs_exec_portcell	struct
,	O
diskfs_exec	O
)	O
;	O
if	O
(	O
_diskfs_boot_command	*(*(char))
)	O
{	O
err	O
=	O
argz_create	()->(int)
(	O
_diskfs_boot_command	*(*(char))
,	O
&	O
exec_argv	*(char)
,	O
&	O
exec_argvlen	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
initname	*(char)
=	O
exec_argv	*(char)
;	O
while	O
(	O
*	O
initname	*(char)
==	O
'/'	O
)	O
initname	*(char)
++	O
;	O
}	O
else	O
{	O
initname	*(char)
=	O
diskfs_boot_init_program	*(char)
;	O
while	O
(	O
*	O
initname	*(char)
==	O
'/'	O
)	O
initname	*(char)
++	O
;	O
int	O
len	int
=	O
asprintf	()->(int)
(	O
&	O
exec_argv	*(char)
,	O
"/%s%c"	*(char)
,	O
initname	*(char)
,	O
'\0'	O
)	O
;	O
assert	()->(int)
(	O
len	int
!=	O
-	O
1	int
)	O
;	O
exec_argvlen	O
=	O
(	O
size_t	O
)	O
len	int
;	O
err	O
=	O
argz_add_sep	()->(int)
(	O
&	O
exec_argv	*(char)
,	O
&	O
exec_argvlen	O
,	O
diskfs_boot_command_line	O
,	O
' '	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
initname	*(char)
=	O
exec_argv	*(char)
+	O
1	int
;	O
}	O
lookup_init	O
:	O
err	O
=	O
dir_lookup	()->(int)
(	O
root_pt	O
,	O
(	O
char	O
*	O
)	O
initname	*(char)
,	O
O_READ	O
,	O
0	int
,	O
&	O
retry	enum
,	O
pathbuf	array(char)
,	O
&	O
startup_pt	O
)	O
;	O
init_lookups	int
++	O
;	O
if	O
(	O
err	O
)	O
{	O
printf	O
(	O
"\nCannot find startup program `%s': %s\n"	*(char)
,	O
initname	*(char)
,	O
strerror	O
(	O
err	O
)	O
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
free	()->(int)
(	O
exec_argv	*(char)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
}	O
else	O
if	O
(	O
retry	enum
==	O
FS_RETRY_MAGICAL	O
&&	O
pathbuf	array(char)
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
assert	()->(int)
(	O
sysconf	()->(int)
(	O
_SC_SYMLOOP_MAX	O
)	O
<	O
0	int
||	O
init_lookups	int
<	O
sysconf	()->(int)
(	O
_SC_SYMLOOP_MAX	O
)	O
)	O
;	O
initname	*(char)
=	O
strdupa	()->(int)
(	O
pathbuf	array(char)
)	O
;	O
goto	O
lookup_init	O
;	O
}	O
assert	()->(int)
(	O
retry	enum
==	O
FS_RETRY_NORMAL	O
)	O
;	O
assert	()->(int)
(	O
pathbuf	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
;	O
err	O
=	O
ports_create_port	()->(int)
(	O
diskfs_initboot_class	O
,	O
diskfs_port_bucket	O
,	O
sizeof	O
(	O
struct	O
port_info	O
)	O
,	O
&	O
bootinfo	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
bootpt	O
=	O
ports_get_send_right	()->(int)
(	O
bootinfo	*(struct)
)	O
;	O
ports_port_deref	()->(int)
(	O
bootinfo	*(struct)
)	O
;	O
portarray	O
[	O
INIT_PORT_CRDIR	O
]	O
=	O
root_pt	O
;	O
portarray	O
[	O
INIT_PORT_CWDIR	O
]	O
=	O
root_pt	O
;	O
portarray	O
[	O
INIT_PORT_AUTH	O
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_PROC	O
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_CTTYID	O
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_BOOTSTRAP	O
]	O
=	O
bootpt	O
;	O
fdarray	O
[	O
0	int
]	O
=	O
fdarray	O
[	O
1	int
]	O
=	O
fdarray	O
[	O
2	int
]	O
=	O
get_console	()->(int)
(	O
)	O
;	O
err	O
=	O
argz_create	()->(int)
(	O
environ	O
,	O
&	O
exec_env	*(char)
,	O
&	O
exec_envlen	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
task_create	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
0	int
,	O
&	O
newt	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
if	O
(	O
_diskfs_boot_pause	O
)	O
{	O
printf	O
(	O
"pausing for %s...\n"	*(char)
,	O
exec_argv	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
getc	()->(int)
(	O
stdin	O
)	O
;	O
}	O
printf	O
(	O
" %s"	*(char)
,	O
basename	()->(int)
(	O
exec_argv	*(char)
)	O
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
err	O
=	O
exec_exec	()->(int)
(	O
diskfs_exec	O
,	O
startup_pt	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
newt	O
,	O
0	int
,	O
exec_argv	*(char)
,	O
exec_argvlen	O
,	O
exec_env	*(char)
,	O
exec_envlen	O
,	O
fdarray	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
3	int
,	O
portarray	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
INIT_PORT_MAX	O
,	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
err	O
)	O
error	()->(int)
(	O
1	int
,	O
err	O
,	O
"Executing '%s'"	*(char)
,	O
exec_argv	*(char)
)	O
;	O
free	()->(int)
(	O
exec_argv	*(char)
)	O
;	O
free	()->(int)
(	O
exec_env	*(char)
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
root_pt	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
startup_pt	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
bootpt	O
)	O
;	O
}	O
kern_return_t	O
diskfs_S_exec_startup_get_info	(*(struct),*(int),*(int),*(int),*(int),*(int),*(int),*(*(char)),*(int),*(*(char)),*(int),*(*(int)),*(int),*(int),*(*(int)),*(int),*(int),*(*(int)),*(int))->(int)
(	O
struct	O
bootinfo	*(struct)
*	O
upt	*(struct)
,	O
vm_address_t	O
*	O
user_entry	*(int)
,	O
vm_address_t	O
*	O
phdr_data	*(int)
,	O
vm_size_t	O
*	O
phdr_size	*(int)
,	O
vm_address_t	O
*	O
base_addr	*(int)
,	O
vm_size_t	O
*	O
stack_size	*(int)
,	O
int	O
*	O
flags	*(int)
,	O
char	O
*	O
*	O
argvP	*(*(char))
,	O
mach_msg_type_number_t	O
*	O
argvlen	*(int)
,	O
char	O
*	O
*	O
envpP	*(*(char))
__attribute__	O
(	O
(	O
unused	O
)	O
)	O
,	O
mach_msg_type_number_t	O
*	O
envplen	*(int)
,	O
mach_port_t	O
*	O
*	O
dtableP	*(*(int))
,	O
mach_msg_type_name_t	O
*	O
dtablepoly	*(int)
,	O
mach_msg_type_number_t	O
*	O
dtablelen	*(int)
,	O
mach_port_t	O
*	O
*	O
portarrayP	*(*(int))
,	O
mach_msg_type_name_t	O
*	O
portarraypoly	*(int)
,	O
mach_msg_type_number_t	O
*	O
portarraylen	*(int)
,	O
int	O
*	O
*	O
intarrayP	*(*(int))
,	O
mach_msg_type_number_t	O
*	O
intarraylen	*(int)
)	O
{	O
error_t	O
err	O
;	O
mach_port_t	O
*	O
portarray	O
,	O
*	O
dtable	O
;	O
mach_port_t	O
rootport	O
;	O
struct	O
protid	O
*	O
rootpi	*(struct)
;	O
struct	O
peropen	O
*	O
rootpo	*(struct)
;	O
if	O
(	O
!	O
upt	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
user_entry	*(int)
=	O
0	int
;	O
*	O
phdr_data	*(int)
=	O
*	O
base_addr	*(int)
=	O
0	int
;	O
*	O
phdr_size	*(int)
=	O
*	O
stack_size	*(int)
=	O
0	int
;	O
*	O
argvlen	*(int)
=	O
*	O
envplen	*(int)
=	O
0	int
;	O
*	O
flags	*(int)
=	O
EXEC_STACK_ARGS	O
;	O
if	O
(	O
*	O
portarraylen	*(int)
<	O
INIT_PORT_MAX	O
)	O
*	O
portarrayP	*(*(int))
=	O
mmap	()->(int)
(	O
0	int
,	O
INIT_PORT_MAX	O
*	O
sizeof	O
(	O
mach_port_t	O
)	O
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
portarray	O
=	O
*	O
portarrayP	*(*(int))
;	O
*	O
portarraylen	*(int)
=	O
INIT_PORT_MAX	O
;	O
if	O
(	O
*	O
dtablelen	*(int)
<	O
3	int
)	O
*	O
dtableP	*(*(int))
=	O
mmap	()->(int)
(	O
0	int
,	O
3	int
*	O
sizeof	O
(	O
mach_port_t	O
)	O
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
dtable	O
=	O
*	O
dtableP	*(*(int))
;	O
*	O
dtablelen	*(int)
=	O
3	int
;	O
dtable	O
[	O
0	int
]	O
=	O
dtable	O
[	O
1	int
]	O
=	O
dtable	O
[	O
2	int
]	O
=	O
get_console	()->(int)
(	O
)	O
;	O
*	O
intarrayP	*(*(int))
=	O
NULL	O
;	O
*	O
intarraylen	*(int)
=	O
0	int
;	O
err	O
=	O
diskfs_make_peropen	()->(int)
(	O
diskfs_root_node	O
,	O
O_READ	O
|	O
O_EXEC	O
,	O
0	int
,	O
&	O
rootpo	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
diskfs_create_protid	()->(int)
(	O
rootpo	*(struct)
,	O
0	int
,	O
&	O
rootpi	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
rootport	O
=	O
ports_get_right	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
ports_port_deref	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
portarray	O
[	O
INIT_PORT_CWDIR	O
]	O
=	O
rootport	O
;	O
portarray	O
[	O
INIT_PORT_CRDIR	O
]	O
=	O
rootport	O
;	O
portarray	O
[	O
INIT_PORT_AUTH	O
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_PROC	O
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_CTTYID	O
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_BOOTSTRAP	O
]	O
=	O
upt	*(struct)
->	O
pi	*(struct)
.	O
port_right	O
;	O
*	O
portarraypoly	*(int)
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
*	O
dtablepoly	*(int)
=	O
MACH_MSG_TYPE_COPY_SEND	O
;	O
return	O
0	int
;	O
}	O
error_t	O
diskfs_execboot_fsys_startup	(int,int,int,*(int),*(int))->(int)
(	O
mach_port_t	O
port	int
,	O
int	O
flags	*(int)
,	O
mach_port_t	O
ctl	int
,	O
mach_port_t	O
*	O
real	*(int)
,	O
mach_msg_type_name_t	O
*	O
realpoly	*(int)
)	O
{	O
error_t	O
err	O
;	O
string_t	O
pathbuf	array(char)
;	O
enum	O
retry_type	O
retry	enum
;	O
struct	O
port_info	O
*	O
pt	*(struct)
;	O
struct	O
protid	O
*	O
rootpi	*(struct)
;	O
struct	O
peropen	O
*	O
rootpo	*(struct)
;	O
mach_port_t	O
rootport	O
;	O
if	O
(	O
!	O
(	O
pt	*(struct)
=	O
ports_lookup_port	()->(int)
(	O
diskfs_port_bucket	O
,	O
port	int
,	O
diskfs_execboot_class	O
)	O
)	O
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
diskfs_make_peropen	()->(int)
(	O
diskfs_root_node	O
,	O
flags	*(int)
,	O
0	int
,	O
&	O
rootpo	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
diskfs_create_protid	()->(int)
(	O
rootpo	*(struct)
,	O
0	int
,	O
&	O
rootpi	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
rootport	O
=	O
ports_get_send_right	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
ports_port_deref	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
err	O
=	O
dir_lookup	()->(int)
(	O
rootport	O
,	O
_SERVERS_EXEC	O
,	O
flags	*(int)
|	O
O_NOTRANS	O
,	O
0	int
,	O
&	O
retry	enum
,	O
pathbuf	array(char)
,	O
real	*(int)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
assert	()->(int)
(	O
retry	enum
==	O
FS_RETRY_NORMAL	O
)	O
;	O
assert	()->(int)
(	O
pathbuf	array(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
;	O
*	O
realpoly	*(int)
=	O
MACH_MSG_TYPE_MOVE_SEND	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
rootport	O
)	O
;	O
diskfs_exec_ctl	int
=	O
ctl	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
execstartlock	int
)	O
;	O
pthread_cond_signal	()->(int)
(	O
&	O
execstarted	int
)	O
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
execstartlock	int
)	O
;	O
ports_port_deref	()->(int)
(	O
pt	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
diskfs_S_fsys_getpriv	(*(struct),int,int,*(int),*(int),*(int),*(int),*(int),*(int))->(int)
(	O
struct	O
diskfs_control	O
*	O
init_bootstrap_port	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
reply_type	int
,	O
mach_port_t	O
*	O
host_priv	*(int)
,	O
mach_msg_type_name_t	O
*	O
hp_type	*(int)
,	O
mach_port_t	O
*	O
dev_master	*(int)
,	O
mach_msg_type_name_t	O
*	O
dm_type	*(int)
,	O
mach_port_t	O
*	O
fstask	*(int)
,	O
mach_msg_type_name_t	O
*	O
task_type	*(int)
)	O
{	O
error_t	O
err	O
;	O
if	O
(	O
!	O
init_bootstrap_port	*(struct)
||	O
init_bootstrap_port	*(struct)
->	O
pi	*(struct)
.	O
class	O
!=	O
diskfs_initboot_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
err	O
=	O
get_privileged_ports	()->(int)
(	O
host_priv	*(int)
,	O
dev_master	*(int)
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
*	O
fstask	*(int)
=	O
mach_task_self	()->(int)
(	O
)	O
;	O
*	O
hp_type	*(int)
=	O
*	O
dm_type	*(int)
=	O
MACH_MSG_TYPE_MOVE_SEND	O
;	O
*	O
task_type	*(int)
=	O
MACH_MSG_TYPE_COPY_SEND	O
;	O
}	O
return	O
err	O
;	O
}	O
kern_return_t	O
diskfs_S_fsys_init	(*(struct),int,int,int,int)->(int)
(	O
struct	O
diskfs_control	O
*	O
pt	*(struct)
,	O
mach_port_t	O
reply	int
,	O
mach_msg_type_name_t	O
replytype	int
,	O
mach_port_t	O
procserver	int
,	O
mach_port_t	O
authhandle	int
)	O
{	O
static	O
int	O
initdone	int
=	O
0	int
;	O
mach_port_t	O
host	O
,	O
startup	O
;	O
error_t	O
err	O
;	O
mach_port_t	O
root_pt	O
;	O
struct	O
protid	O
*	O
rootpi	*(struct)
;	O
struct	O
peropen	O
*	O
rootpo	*(struct)
;	O
if	O
(	O
!	O
pt	*(struct)
||	O
pt	*(struct)
->	O
pi	*(struct)
.	O
class	O
!=	O
diskfs_initboot_class	O
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
initdone	int
)	O
return	O
EOPNOTSUPP	O
;	O
initdone	int
=	O
1	int
;	O
fsys_init_reply	()->(int)
(	O
reply	int
,	O
replytype	int
,	O
0	int
)	O
;	O
err	O
=	O
mach_port_mod_refs	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
procserver	int
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
mach_port_mod_refs	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
authhandle	int
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
if	O
(	O
diskfs_auth_server_port	O
!=	O
MACH_PORT_NULL	O
)	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
diskfs_auth_server_port	O
)	O
;	O
diskfs_auth_server_port	O
=	O
authhandle	int
;	O
if	O
(	O
diskfs_exec_server_task	int
!=	O
MACH_PORT_NULL	O
)	O
{	O
process_t	O
execprocess	O
;	O
err	O
=	O
proc_task2proc	()->(int)
(	O
procserver	int
,	O
diskfs_exec_server_task	int
,	O
&	O
execprocess	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
proc_child	()->(int)
(	O
procserver	int
,	O
diskfs_exec_server_task	int
)	O
;	O
proc_mark_exec	()->(int)
(	O
execprocess	O
)	O
;	O
HURD_PORT_USE	()->(int)
(	O
&	O
_diskfs_exec_portcell	struct
,	O
exec_init	()->(int)
(	O
port	int
,	O
authhandle	int
,	O
execprocess	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
)	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
execprocess	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
diskfs_exec_server_task	int
)	O
;	O
diskfs_exec_server_task	int
=	O
MACH_PORT_NULL	O
;	O
}	O
else	O
{	O
mach_port_t	O
bootstrap	O
;	O
process_t	O
parent_proc	O
;	O
assert	()->(int)
(	O
parent_task	int
!=	O
MACH_PORT_NULL	O
)	O
;	O
err	O
=	O
proc_child	()->(int)
(	O
procserver	int
,	O
parent_task	int
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
proc_task2proc	()->(int)
(	O
procserver	int
,	O
parent_task	int
,	O
&	O
parent_proc	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
parent_task	int
)	O
;	O
parent_task	int
=	O
MACH_PORT_NULL	O
;	O
proc_mark_exec	()->(int)
(	O
parent_proc	O
)	O
;	O
err	O
=	O
task_get_bootstrap_port	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
&	O
bootstrap	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
fsys_init	()->(int)
(	O
bootstrap	O
,	O
parent_proc	O
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
authhandle	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
parent_proc	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
bootstrap	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
}	O
err	O
=	O
diskfs_make_peropen	()->(int)
(	O
diskfs_root_node	O
,	O
O_READ	O
|	O
O_EXEC	O
,	O
0	int
,	O
&	O
rootpo	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
diskfs_create_protid	()->(int)
(	O
rootpo	*(struct)
,	O
0	int
,	O
&	O
rootpi	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
root_pt	O
=	O
ports_get_send_right	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
ports_port_deref	()->(int)
(	O
rootpi	*(struct)
)	O
;	O
mach_port_mod_refs	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
root_pt	O
,	O
MACH_PORT_RIGHT_SEND	O
,	O
+	O
1	int
)	O
;	O
if	O
(	O
_hurd_ports	O
)	O
{	O
_hurd_port_set	()->(int)
(	O
&	O
_hurd_ports	O
[	O
INIT_PORT_PROC	O
]	O
,	O
procserver	int
)	O
;	O
_hurd_port_set	()->(int)
(	O
&	O
_hurd_ports	O
[	O
INIT_PORT_AUTH	O
]	O
,	O
authhandle	int
)	O
;	O
_hurd_port_set	()->(int)
(	O
&	O
_hurd_ports	O
[	O
INIT_PORT_CRDIR	O
]	O
,	O
root_pt	O
)	O
;	O
_hurd_port_set	()->(int)
(	O
&	O
_hurd_ports	O
[	O
INIT_PORT_CWDIR	O
]	O
,	O
root_pt	O
)	O
;	O
_hurd_proc_init	()->(int)
(	O
diskfs_argv	*(*(char))
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
{	O
mach_port_t	O
*	O
portarray	O
;	O
unsigned	O
int	O
i	int
;	O
portarray	O
=	O
mmap	()->(int)
(	O
0	int
,	O
INIT_PORT_MAX	O
*	O
sizeof	O
*	O
portarray	O
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
MACH_PORT_NULL	O
!=	O
(	O
mach_port_t	O
)	O
0	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
INIT_PORT_MAX	O
;	O
++	O
i	int
)	O
portarray	O
[	O
i	int
]	O
=	O
MACH_PORT_NULL	O
;	O
portarray	O
[	O
INIT_PORT_PROC	O
]	O
=	O
procserver	int
;	O
portarray	O
[	O
INIT_PORT_AUTH	O
]	O
=	O
authhandle	int
;	O
portarray	O
[	O
INIT_PORT_CRDIR	O
]	O
=	O
root_pt	O
;	O
portarray	O
[	O
INIT_PORT_CWDIR	O
]	O
=	O
root_pt	O
;	O
_hurd_init	()->(int)
(	O
0	int
,	O
diskfs_argv	*(*(char))
,	O
portarray	O
,	O
INIT_PORT_MAX	O
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
err	O
=	O
get_privileged_ports	()->(int)
(	O
&	O
host	O
,	O
0	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
proc_register_version	()->(int)
(	O
procserver	int
,	O
host	O
,	O
diskfs_server_name	O
,	O
""	*(char)
,	O
diskfs_server_version	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
procserver	int
)	O
;	O
startup	O
=	O
file_name_lookup	()->(int)
(	O
_SERVERS_STARTUP	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
startup	O
==	O
MACH_PORT_NULL	O
)	O
error	()->(int)
(	O
0	int
,	O
errno	O
,	O
"%s"	*(char)
,	O
_SERVERS_STARTUP	O
)	O
;	O
else	O
{	O
startup_essential_task	()->(int)
(	O
startup	O
,	O
mach_task_self	()->(int)
(	O
)	O
,	O
MACH_PORT_NULL	O
,	O
diskfs_server_name	O
,	O
host	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
startup	O
)	O
;	O
}	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
host	O
)	O
;	O
_diskfs_init_completed	()->(void)
(	O
)	O
;	O
return	O
MIG_NO_REPLY	O
;	O
}	O
static	O
void	O
start_execserver	()->(void)
(	O
void	O
)	O
{	O
error_t	O
err	O
;	O
mach_port_t	O
right	O
;	O
extern	O
task_t	O
diskfs_exec_server_task	int
;	O
struct	O
port_info	O
*	O
execboot_info	*(struct)
;	O
assert	()->(int)
(	O
diskfs_exec_server_task	int
!=	O
MACH_PORT_NULL	O
)	O
;	O
err	O
=	O
ports_create_port	()->(int)
(	O
diskfs_execboot_class	O
,	O
diskfs_port_bucket	O
,	O
sizeof	O
(	O
struct	O
port_info	O
)	O
,	O
&	O
execboot_info	*(struct)
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
right	O
=	O
ports_get_send_right	()->(int)
(	O
execboot_info	*(struct)
)	O
;	O
ports_port_deref	()->(int)
(	O
execboot_info	*(struct)
)	O
;	O
err	O
=	O
task_set_special_port	()->(int)
(	O
diskfs_exec_server_task	int
,	O
TASK_BOOTSTRAP_PORT	O
,	O
right	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
err	O
=	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
right	O
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
if	O
(	O
_diskfs_boot_pause	O
)	O
{	O
printf	O
(	O
"pausing for exec\n"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
getc	()->(int)
(	O
stdin	O
)	O
;	O
}	O
err	O
=	O
task_resume	()->(int)
(	O
diskfs_exec_server_task	int
)	O
;	O
assert_perror	()->(int)
(	O
err	O
)	O
;	O
printf	O
(	O
" exec"	*(char)
)	O
;	O
fflush	()->(int)
(	O
stdout	O
)	O
;	O
}	O
