static	O
bool	bool
verbose	bool
=	O
true	int
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"quiet"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"silent"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'q'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
fetch	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
file	*(char)
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
optchar	int
;	O
bool	bool
do_help	bool
;	O
bool	bool
do_version	bool
;	O
set_program_name	(*(char))->(void)
(	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
error_print_progname	*(()->(void))
=	O
maybe_print_progname	()->(void)
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
do_help	bool
=	O
false	int
;	O
do_version	bool
=	O
false	int
;	O
while	O
(	O
(	O
optchar	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"hqV"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'q'	O
:	O
verbose	bool
=	O
false	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"2001-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	(*(char))->(*(char))
(	O
"Bruno Haible"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
optind	int
+	O
2	int
!=	O
argc	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"expected two arguments"	*(char)
)	O
)	O
;	O
fetch	(*(char),*(char))->(void)
(	O
argv	array(*(char))
[	O
optind	int
]	O
,	O
argv	array(*(char))
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION] URL FILE\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Fetches and outputs the contents of an URL.  If the URL cannot be accessed,\nthe locally accessible FILE is used instead.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -q, --quiet, --silent       suppress progress indicators\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
void	O
cat_file	(*(char))->(void)
(	O
const	O
char	O
*	O
src_filename	*(char)
)	O
{	O
int	O
src_fd	int
;	O
char	O
buf	*(void)
[	O
4096	int
]	O
;	O
const	O
int	O
buf_size	int
=	O
sizeof	O
(	O
buf	*(void)
)	O
;	O
src_fd	int
=	O
open	(*(char),int)->(int)
(	O
src_filename	*(char)
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
;	O
if	O
(	O
src_fd	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	*(char)
)	O
,	O
src_filename	*(char)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
ssize_t	long
n_read	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
src_fd	int
,	O
buf	*(void)
,	O
buf_size	int
)	O
;	O
if	O
(	O
n_read	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error reading \"%s\""	*(char)
)	O
,	O
src_filename	*(char)
)	O
;	O
}	O
if	O
(	O
n_read	long
==	O
0	int
)	O
break	O
;	O
if	O
(	O
full_write	(int,*(void),long)->(long)
(	O
STDOUT_FILENO	int
,	O
buf	*(void)
,	O
n_read	long
)	O
<	O
n_read	long
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error writing stdout"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
close	*((*(void))->(int))
(	O
src_fd	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error after reading \"%s\""	*(char)
)	O
,	O
src_filename	*(char)
)	O
;	O
}	O
static	O
void	O
fetch	(*(char),*(char))->(void)
(	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
if	O
(	O
verbose	bool
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Retrieving %s..."	*(char)
)	O
,	O
url	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
{	O
static	O
bool	bool
wget_tested	bool
;	O
static	O
bool	bool
wget_present	bool
;	O
if	O
(	O
!	O
wget_tested	bool
)	O
{	O
char	O
*	O
argv	array(*(char))
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	array(*(char))
[	O
0	int
]	O
=	O
"wget"	*(char)
;	O
argv	array(*(char))
[	O
1	int
]	O
=	O
"--version"	*(char)
;	O
argv	array(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"wget"	*(char)
,	O
"wget"	*(char)
,	O
argv	array(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
wget_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
wget_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
wget_present	bool
)	O
{	O
char	O
*	O
argv	array(*(char))
[	O
8	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	array(*(char))
[	O
0	int
]	O
=	O
"wget"	*(char)
;	O
argv	array(*(char))
[	O
1	int
]	O
=	O
"-q"	*(char)
;	O
argv	array(*(char))
[	O
2	int
]	O
=	O
"-O"	*(char)
;	O
argv	array(*(char))
[	O
3	int
]	O
=	O
"-"	*(char)
;	O
argv	array(*(char))
[	O
4	int
]	O
=	O
"-T"	*(char)
;	O
argv	array(*(char))
[	O
5	int
]	O
=	O
"30"	*(char)
;	O
argv	array(*(char))
[	O
6	int
]	O
=	O
(	O
char	O
*	O
)	O
url	*(char)
;	O
argv	array(*(char))
[	O
7	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"wget"	*(char)
,	O
"wget"	*(char)
,	O
argv	array(*(char))
,	O
true	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
127	int
)	O
{	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
goto	O
failed	O
;	O
if	O
(	O
verbose	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
" done.\n"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
}	O
}	O
{	O
static	O
bool	bool
lynx_tested	bool
;	O
static	O
bool	bool
lynx_present	bool
;	O
if	O
(	O
!	O
lynx_tested	bool
)	O
{	O
char	O
*	O
argv	array(*(char))
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	array(*(char))
[	O
0	int
]	O
=	O
"lynx"	*(char)
;	O
argv	array(*(char))
[	O
1	int
]	O
=	O
"--version"	*(char)
;	O
argv	array(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"lynx"	*(char)
,	O
"lynx"	*(char)
,	O
argv	array(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
lynx_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
lynx_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
lynx_present	bool
)	O
{	O
char	O
*	O
argv	array(*(char))
[	O
4	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	array(*(char))
[	O
0	int
]	O
=	O
"lynx"	*(char)
;	O
argv	array(*(char))
[	O
1	int
]	O
=	O
"-source"	*(char)
;	O
argv	array(*(char))
[	O
2	int
]	O
=	O
(	O
char	O
*	O
)	O
url	*(char)
;	O
argv	array(*(char))
[	O
3	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"lynx"	*(char)
,	O
"lynx"	*(char)
,	O
argv	array(*(char))
,	O
true	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
127	int
)	O
{	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
goto	O
failed	O
;	O
if	O
(	O
verbose	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
" done.\n"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
}	O
}	O
{	O
static	O
bool	bool
curl_tested	bool
;	O
static	O
bool	bool
curl_present	bool
;	O
if	O
(	O
!	O
curl_tested	bool
)	O
{	O
char	O
*	O
argv	array(*(char))
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	array(*(char))
[	O
0	int
]	O
=	O
"curl"	*(char)
;	O
argv	array(*(char))
[	O
1	int
]	O
=	O
"--version"	*(char)
;	O
argv	array(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"curl"	*(char)
,	O
"curl"	*(char)
,	O
argv	array(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
curl_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
||	O
exitstatus	int
==	O
2	int
)	O
;	O
curl_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
curl_present	bool
)	O
{	O
char	O
*	O
argv	array(*(char))
[	O
4	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	array(*(char))
[	O
0	int
]	O
=	O
"curl"	*(char)
;	O
argv	array(*(char))
[	O
1	int
]	O
=	O
"--silent"	*(char)
;	O
argv	array(*(char))
[	O
2	int
]	O
=	O
(	O
char	O
*	O
)	O
url	*(char)
;	O
argv	array(*(char))
[	O
3	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"curl"	*(char)
,	O
"curl"	*(char)
,	O
argv	array(*(char))
,	O
true	int
,	O
false	int
,	O
false	int
,	O
false	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
if	O
(	O
exitstatus	int
!=	O
127	int
)	O
{	O
if	O
(	O
exitstatus	int
!=	O
0	int
)	O
goto	O
failed	O
;	O
if	O
(	O
verbose	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
" done.\n"	*(char)
)	O
)	O
;	O
return	O
;	O
}	O
}	O
}	O
failed	O
:	O
if	O
(	O
verbose	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
" failed.\n"	*(char)
)	O
)	O
;	O
cat_file	(*(char))->(void)
(	O
file	*(char)
)	O
;	O
}	O
