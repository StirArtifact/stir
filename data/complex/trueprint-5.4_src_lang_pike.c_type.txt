char	O
lang_pike_defaults	array(char)
[	O
]	O
=	O
"--f --F --i"	*(char)
;	O
typedef	O
enum	O
{	O
IP_CODE	int
,	O
IP_COMMENT_START	int
,	O
IP_COMMENT	int
,	O
IP_COMMENT_LINE	int
,	O
IP_COMMENT_END	int
,	O
IP_STRING	int
,	O
IP_QUOTE_STRING	int
,	O
IP_ESCAPED	int
}	O
pike_ip_states	enum(int,int,int,int,int,int,int,int)
;	O
typedef	O
enum	O
{	O
FN_INITIAL_SPACE	int
,	O
FN_FINAL_CHARS	int
,	O
FN_NAME	int
,	O
FN_CHAINED_NAME	int
,	O
FN_TRAIL_SPACE	int
,	O
FN_OPEN_BRACKET	int
,	O
FN_DBL_OPEN_BRACKET	int
,	O
FN_CLOSE_BRACKET	int
,	O
FN_ARG	int
,	O
FN_SEMICOLON	int
,	O
FN_BODY	int
,	O
FN_MACRO	int
,	O
FN_MACRO_ESCAPED	int
}	O
pike_fn_states	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
int	O
is_pike_reserved_word	(*(char))->(int)
(	O
char	O
*	O
fn_name	*(char)
)	O
{	O
if	O
(	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"if"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"class"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"else"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"do"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"while"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"for"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"foreach"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"catch"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"int"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"array"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"object"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"program"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"multiset"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"mapping"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"string"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"float"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"constant"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	O
(	O
fn_name	*(char)
,	O
"switch"	*(char)
)	O
==	O
0	int
)	O
)	O
{	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
stream_status	enum(int,int,int,int,int)
get_pike_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
(	O
char	O
*	O
input_char	*(char)
,	O
char_status	enum(int,int,int,int)
*	O
status	enum(int,int,int,int)
)	O
{	O
static	O
pike_ip_states	enum(int,int,int,int,int,int,int,int)
state	*(int)
=	O
IP_CODE	int
;	O
static	O
pike_ip_states	enum(int,int,int,int,int,int,int,int)
saved_state	enum(int,int,int,int,int,int,int,int)
;	O
pike_ip_states	enum(int,int,int,int,int,int,int,int)
old_state	enum(int,int,int,int,int,int,int,int)
=	O
state	*(int)
;	O
stream_status	enum(int,int,int,int,int)
retval	enum(int,int,int,int,int)
;	O
static	O
pike_fn_states	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
static	O
pike_fn_states	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
saved_fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
static	O
short	O
fn_name_index	short
;	O
static	O
char	O
fn_name	*(char)
[	O
SYMBOL_LEN	int
]	O
=	O
"UNINITIALIZED"	*(char)
;	O
static	O
long	O
start_char	long
,	O
end_char	long
;	O
static	O
long	O
fn_page_number	long
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_NORMAL	int
;	O
if	O
(	O
restart_language	enum(int,int,int)
==	O
TRUE	int
)	O
{	O
state	*(int)
=	O
IP_CODE	int
;	O
saved_state	enum(int,int,int,int,int,int,int,int)
=	O
IP_CODE	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
start_char	long
=	O
0	int
;	O
end_char	long
=	O
0	int
;	O
fn_page_number	long
=	O
0	int
;	O
braces_depth	short
=	O
0	int
;	O
restart_language	enum(int,int,int)
=	O
FALSE	int
;	O
}	O
retval	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
input_char	*(char)
)	O
;	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
IP_CODE	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'/'	O
:	O
state	*(int)
=	O
IP_COMMENT_START	int
;	O
{	O
stream_status	enum(int,int,int,int,int)
s	enum(int,int,int,int,int)
;	O
char	O
c	char
;	O
s	enum(int,int,int,int,int)
=	O
getnextchar	(*(char))->(enum(int,int,int,int,int))
(	O
&	O
c	char
)	O
;	O
if	O
(	O
(	O
c	char
==	O
'*'	O
)	O
||	O
(	O
c	char
==	O
'/'	O
)	O
)	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
ungetnextchar	(char,enum(int,int,int,int,int))->(void)
(	O
c	char
,	O
s	enum(int,int,int,int,int)
)	O
;	O
}	O
break	O
;	O
case	O
'{'	O
:	O
braces_depth	short
+=	O
1	int
;	O
if	O
(	O
(	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
FN_CLOSE_BRACKET	int
)	O
||	O
(	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
FN_CHAINED_NAME	int
)	O
||	O
(	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
FN_BODY	int
)	O
||	O
(	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
FN_SEMICOLON	int
)	O
)	O
{	O
if	O
(	O
!	O
is_pike_reserved_word	(*(char))->(int)
(	O
fn_name	*(char)
)	O
)	O
{	O
add_function	(*(char),long,long,long,*(char))->(void)
(	O
fn_name	*(char)
,	O
start_char	long
,	O
end_char	long
,	O
fn_page_number	long
,	O
current_filename	*(char)
)	O
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_BODY	int
;	O
}	O
fn_name_index	short
=	O
0	int
;	O
}	O
break	O
;	O
case	O
'}'	O
:	O
braces_depth	short
-=	O
1	int
;	O
if	O
(	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
FN_BODY	int
)	O
{	O
end_function	(long)->(void)
(	O
page_number	long
)	O
;	O
retval	enum(int,int,int,int,int)
|=	O
STREAM_FUNCTION_END	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
case	O
'"'	O
:	O
state	*(int)
=	O
IP_STRING	int
;	O
break	O
;	O
case	O
'\''	O
:	O
state	*(int)
=	O
IP_QUOTE_STRING	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT_START	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'/'	O
:	O
state	*(int)
=	O
IP_COMMENT_LINE	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
break	O
;	O
case	O
'*'	O
:	O
state	*(int)
=	O
IP_COMMENT	int
;	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
break	O
;	O
case	O
'{'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
braces_depth	short
+=	O
1	int
;	O
break	O
;	O
case	O
'}'	O
:	O
if	O
(	O
(	O
braces_depth	short
-=	O
1	int
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int)
|=	O
STREAM_FUNCTION_END	int
;	O
break	O
;	O
default	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'*'	O
:	O
state	*(int)
=	O
IP_COMMENT_END	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT_LINE	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'\n'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_COMMENT_END	int
:	O
*	O
status	enum(int,int,int,int)
=	O
CHAR_ITALIC	int
;	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'/'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
'*'	O
:	O
break	O
;	O
default	O
:	O
state	*(int)
=	O
IP_COMMENT	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
IP_STRING	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'"'	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
saved_state	enum(int,int,int,int,int,int,int,int)
=	O
state	*(int)
;	O
state	*(int)
=	O
IP_ESCAPED	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_QUOTE_STRING	int
:	O
switch	O
(	O
*	O
input_char	*(char)
)	O
{	O
case	O
'\''	O
:	O
state	*(int)
=	O
IP_CODE	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
saved_state	enum(int,int,int,int,int,int,int,int)
=	O
state	*(int)
;	O
state	*(int)
=	O
IP_ESCAPED	int
;	O
break	O
;	O
default	O
:	O
;	O
}	O
break	O
;	O
case	O
IP_ESCAPED	int
:	O
state	*(int)
=	O
saved_state	enum(int,int,int,int,int,int,int,int)
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
(	O
state	*(int)
==	O
IP_CODE	int
)	O
&&	O
(	O
old_state	enum(int,int,int,int,int,int,int,int)
!=	O
IP_COMMENT_END	int
)	O
)	O
switch	O
(	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
FN_INITIAL_SPACE	int
:	O
if	O
(	O
isalpha	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
{	O
fn_page_number	long
=	O
page_number	long
;	O
fn_name	*(char)
[	O
fn_name_index	short
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
start_char	long
=	O
char_number	long
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_NAME	int
;	O
}	O
if	O
(	O
*	O
input_char	*(char)
==	O
'#'	O
)	O
{	O
saved_fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_MACRO	int
;	O
}	O
break	O
;	O
case	O
FN_MACRO	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
'\\'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_MACRO_ESCAPED	int
;	O
if	O
(	O
*	O
input_char	*(char)
==	O
'\n'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
saved_fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
break	O
;	O
case	O
FN_MACRO_ESCAPED	int
:	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_MACRO	int
;	O
break	O
;	O
case	O
FN_NAME	int
:	O
if	O
(	O
isalnum	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
||	O
(	O
*	O
input_char	*(char)
==	O
'_'	O
)	O
||	O
(	O
*	O
input_char	*(char)
==	O
':'	O
)	O
||	O
(	O
*	O
input_char	*(char)
==	O
'~'	O
)	O
)	O
fn_name	*(char)
[	O
fn_name_index	short
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
else	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
{	O
fn_name	*(char)
[	O
fn_name_index	short
]	O
=	O
0	int
;	O
end_char	long
=	O
char_number	long
-	O
1	int
;	O
if	O
(	O
!	O
is_pike_reserved_word	(*(char))->(int)
(	O
fn_name	*(char)
)	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_TRAIL_SPACE	int
;	O
}	O
else	O
{	O
fn_name_index	short
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
}	O
}	O
else	O
if	O
(	O
*	O
input_char	*(char)
==	O
'('	O
)	O
{	O
fn_name	*(char)
[	O
fn_name_index	short
]	O
=	O
0	int
;	O
end_char	long
=	O
char_number	long
-	O
1	int
;	O
if	O
(	O
!	O
is_pike_reserved_word	(*(char))->(int)
(	O
fn_name	*(char)
)	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_OPEN_BRACKET	int
;	O
}	O
else	O
{	O
fn_name_index	short
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
}	O
}	O
else	O
{	O
fn_name_index	short
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
case	O
FN_CHAINED_NAME	int
:	O
break	O
;	O
case	O
FN_TRAIL_SPACE	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
break	O
;	O
else	O
if	O
(	O
*	O
input_char	*(char)
==	O
'('	O
)	O
{	O
fn_name	*(char)
[	O
fn_name_index	short
]	O
=	O
0	int
;	O
if	O
(	O
!	O
is_pike_reserved_word	(*(char))->(int)
(	O
fn_name	*(char)
)	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_OPEN_BRACKET	int
;	O
}	O
}	O
else	O
if	O
(	O
isalpha	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
{	O
fn_name_index	short
=	O
0	int
;	O
fn_name	*(char)
[	O
fn_name_index	short
++	O
]	O
=	O
*	O
input_char	*(char)
;	O
fn_page_number	long
=	O
page_number	long
;	O
start_char	long
=	O
char_number	long
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_NAME	int
;	O
}	O
else	O
{	O
fn_name_index	short
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
case	O
FN_OPEN_BRACKET	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
'('	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_DBL_OPEN_BRACKET	int
;	O
if	O
(	O
*	O
input_char	*(char)
==	O
')'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_CLOSE_BRACKET	int
;	O
break	O
;	O
case	O
FN_DBL_OPEN_BRACKET	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
')'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_OPEN_BRACKET	int
;	O
break	O
;	O
case	O
FN_CLOSE_BRACKET	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
{	O
break	O
;	O
}	O
else	O
if	O
(	O
*	O
input_char	*(char)
==	O
':'	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_CHAINED_NAME	int
;	O
}	O
else	O
if	O
(	O
isalpha	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
||	O
(	O
*	O
input_char	*(char)
==	O
'['	O
)	O
)	O
{	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_ARG	int
;	O
}	O
else	O
{	O
fn_name_index	short
=	O
0	int
;	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_INITIAL_SPACE	int
;	O
}	O
break	O
;	O
case	O
FN_ARG	int
:	O
if	O
(	O
*	O
input_char	*(char)
==	O
';'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_SEMICOLON	int
;	O
if	O
(	O
*	O
input_char	*(char)
==	O
']'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_SEMICOLON	int
;	O
break	O
;	O
case	O
FN_SEMICOLON	int
:	O
if	O
(	O
isspace	(int)->(int)
(	O
*	O
input_char	*(char)
)	O
)	O
break	O
;	O
if	O
(	O
*	O
status	enum(int,int,int,int)
==	O
CHAR_ITALIC	int
)	O
break	O
;	O
if	O
(	O
*	O
input_char	*(char)
!=	O
';'	O
)	O
fn_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
FN_ARG	int
;	O
break	O
;	O
case	O
FN_BODY	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
pass	short
==	O
1	int
)	O
*	O
status	enum(int,int,int,int)
=	O
get_function_name_posn	(long,enum(int,int,int,int))->(enum(int,int,int,int))
(	O
char_number	long
,	O
*	O
status	enum(int,int,int,int)
)	O
;	O
return	O
(	O
retval	enum(int,int,int,int,int)
)	O
;	O
}	O
