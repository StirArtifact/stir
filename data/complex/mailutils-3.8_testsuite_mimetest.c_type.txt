void	O
message_display_parts	(*(struct),int)->(void)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
int	O
indent	int
)	O
;	O
const	O
char	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
const	O
char	O
*	O
subject	*(char)
;	O
const	O
char	O
*	O
charset	*(char)
;	O
int	O
print_attachments	int
;	O
int	O
indent_level	int
=	O
4	int
;	O
void	O
print_file	(*(char),int)->(void)
(	O
const	O
char	O
*	O
fname	*(char)
,	O
int	O
indent	int
)	O
{	O
char	O
buf	*(char)
[	O
128	int
]	O
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fname	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"can't open file %s: %s"	*(char)
,	O
fname	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
;	O
}	O
while	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	*(char)
,	O
sizeof	O
buf	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
printf	(*(char))->(int)
(	O
"%*.*s%s"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
buf	*(char)
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
unlink	(*(char))->(int)
(	O
fname	*(char)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
mu_mailbox_t	*(struct)
mbox	*(struct)
=	O
NULL	O
;	O
size_t	long
i	long
;	O
size_t	long
count	long
=	O
0	int
;	O
char	O
*	O
mailbox_name	*(char)
;	O
int	O
debug	int
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-d"	*(char)
)	O
==	O
0	int
)	O
debug	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-p"	*(char)
)	O
==	O
0	int
)	O
print_attachments	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-i"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
++	O
i	long
==	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
"-i requires argument"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
indent_level	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"-c"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
++	O
i	long
==	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
"-c requires argument"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
charset	*(char)
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
}	O
else	O
break	O
;	O
}	O
mailbox_name	*(char)
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_imap_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_pop_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_registrar_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(int)
(	O
mu_mbox_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
mu_registrar_set_default_record	(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))))->(void)
(	O
mu_mbox_record	*(struct(int,*(char),int,int,int,*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*(void),*((*(struct`),*(struct`),int)->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(*`))->(int)),*((*(struct`),*(char),int)->(int))))
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_create_default	(*(*(struct)),*(char))->(int)
(	O
&	O
mbox	*(struct)
,	O
mailbox_name	*(char)
)	O
)	O
;	O
if	O
(	O
debug	int
)	O
{	O
mu_debug_set_category_level	(int,int)->(int)
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_LEVEL_UPTO	O
(	O
MU_DEBUG_PROT	int
)	O
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
mbox	*(struct)
,	O
MU_STREAM_READ	int
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
count	long
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<=	O
count	long
;	O
++	O
i	long
)	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
nparts	*(long)
;	O
size_t	long
msize	long
,	O
nlines	long
;	O
MU_ASSERT	O
(	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
i	long
,	O
&	O
msg	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_size	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
msize	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
nlines	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
)	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
""	*(char)
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
subject	*(char)
)	O
)	O
subject	*(char)
=	O
""	*(char)
;	O
printf	(*(char))->(int)
(	O
"Message:%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
i	long
)	O
;	O
printf	(*(char))->(int)
(	O
"From:%s\n"	*(char)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
printf	(*(char))->(int)
(	O
"Subject:%s\n"	*(char)
,	O
subject	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_num_parts	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
nparts	*(long)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Number of parts in message:%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
nparts	*(long)
)	O
;	O
printf	(*(char))->(int)
(	O
"Total message size:%lu/%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
msize	long
,	O
(	O
unsigned	O
long	O
)	O
nlines	long
)	O
;	O
message_display_parts	(*(struct),int)->(void)
(	O
msg	*(struct)
,	O
0	int
)	O
;	O
}	O
mu_mailbox_close	(*(struct))->(int)
(	O
mbox	*(struct)
)	O
;	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
mbox	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
char	O
buf	*(char)
[	O
2048	int
]	O
;	O
static	O
void	O
print_message_part_sizes	(*(struct),int)->(void)
(	O
mu_message_t	*(struct)
part	long
,	O
int	O
indent	int
)	O
{	O
mu_body_t	*(struct)
body	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
size_t	long
msize	long
,	O
mlines	long
,	O
hsize	long
,	O
hlines	long
,	O
bsize	long
,	O
blines	long
;	O
MU_ASSERT	O
(	O
mu_message_size	(*(struct),*(long))->(int)
(	O
part	long
,	O
&	O
msize	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_lines	(*(struct),*(long))->(int)
(	O
part	long
,	O
&	O
mlines	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
part	long
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_size	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
hsize	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_lines	(*(struct),*(long))->(int)
(	O
hdr	*(struct)
,	O
&	O
hlines	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
part	long
,	O
&	O
body	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_size	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
bsize	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_lines	(*(struct),*(long))->(int)
(	O
body	*(struct)
,	O
&	O
blines	long
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sMessage part size:%lu/%lu: %lu/%lu, %lu/%lu\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
(	O
unsigned	O
long	O
)	O
msize	long
,	O
(	O
unsigned	O
long	O
)	O
mlines	long
,	O
(	O
unsigned	O
long	O
)	O
hsize	long
,	O
(	O
unsigned	O
long	O
)	O
hlines	long
,	O
(	O
unsigned	O
long	O
)	O
bsize	long
,	O
(	O
unsigned	O
long	O
)	O
blines	long
)	O
;	O
}	O
void	O
message_display_parts	(*(struct),int)->(void)
(	O
mu_message_t	*(struct)
msg	*(struct)
,	O
int	O
indent	int
)	O
{	O
int	O
ret	*(*(struct))
,	O
j	int
;	O
size_t	long
nparts	*(long)
;	O
mu_message_t	*(struct)
part	long
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_stream_t	*(struct)
str	*(char)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
int	O
ismulti	int
;	O
size_t	long
nbytes	long
;	O
if	O
(	O
(	O
ret	*(*(struct))
=	O
mu_message_get_num_parts	(*(struct),*(long))->(int)
(	O
msg	*(struct)
,	O
&	O
nparts	*(long)
)	O
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"mu_message_get_num_parts - %s\n"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
ret	*(*(struct))
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
nparts	*(long)
;	O
j	int
++	O
)	O
{	O
int	O
status	int
;	O
const	O
char	O
*	O
hvalue	*(char)
;	O
char	O
*	O
type	int
=	O
NULL	O
;	O
const	O
char	O
*	O
encoding	*(char)
=	O
""	*(char)
;	O
MU_ASSERT	O
(	O
mu_message_get_part	(*(struct),long,*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
j	int
,	O
&	O
part	long
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
part	long
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
status	int
=	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TYPE	*(char)
,	O
&	O
hvalue	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
MU_ERR_NOENT	O
)	O
;	O
else	O
if	O
(	O
status	int
!=	O
0	int
)	O
mu_error	(*(char))->(int)
(	O
"Cannot get header value: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
else	O
{	O
status	int
=	O
mu_mimehdr_aget_disp	(*(char),*(*(char)))->(int)
(	O
hvalue	*(char)
,	O
&	O
type	int
)	O
;	O
if	O
(	O
status	int
)	O
mu_error	(*(char))->(int)
(	O
"Cannot extract content type field: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"%*.*sType of part %d:%s\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
j	int
,	O
mu_prstr	(*(char))->(*(char))
(	O
type	int
)	O
)	O
;	O
print_message_part_sizes	(*(struct),int)->(void)
(	O
part	long
,	O
indent	int
)	O
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_CONTENT_TRANSFER_ENCODING	*(char)
,	O
&	O
encoding	*(char)
)	O
)	O
encoding	*(char)
=	O
""	*(char)
;	O
ismulti	int
=	O
0	int
;	O
if	O
(	O
(	O
type	int
&&	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
type	int
,	O
"message/rfc822"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
mu_message_is_multipart	(*(struct),*(int))->(int)
(	O
part	long
,	O
&	O
ismulti	int
)	O
==	O
0	int
&&	O
ismulti	int
)	O
)	O
{	O
if	O
(	O
!	O
ismulti	int
)	O
MU_ASSERT	O
(	O
mu_message_unencapsulate	(*(struct),*(*(struct)),*(struct))->(int)
(	O
part	long
,	O
&	O
part	long
,	O
NULL	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
part	long
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
)	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
""	*(char)
;	O
if	O
(	O
mu_header_sget_value	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SUBJECT	*(char)
,	O
&	O
subject	*(char)
)	O
)	O
subject	*(char)
=	O
""	*(char)
;	O
printf	(*(char))->(int)
(	O
"%*.*sEncapsulated message:\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sFrom:%s\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sSubject:%s\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
subject	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sBegin\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
)	O
;	O
message_display_parts	(*(struct),int)->(void)
(	O
part	long
,	O
indent	int
+	O
indent_level	int
)	O
;	O
mu_message_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
part	long
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
type	int
||	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
type	int
,	O
"text/plain"	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
type	int
,	O
"text/html"	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%*.*sText Message\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sBegin\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
)	O
;	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
part	long
,	O
&	O
body	*(struct)
)	O
;	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
str	*(char)
)	O
;	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
str	*(char)
,	O
str	*(char)
,	O
encoding	*(char)
,	O
MU_FILTER_DECODE	int
,	O
MU_STREAM_READ	int
)	O
;	O
while	O
(	O
mu_stream_readline	(*(struct),*(char),long,*(long))->(int)
(	O
str	*(char)
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
&	O
nbytes	long
)	O
==	O
0	int
&&	O
nbytes	long
)	O
{	O
printf	(*(char))->(int)
(	O
"%*.*s%s"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
buf	*(char)
)	O
;	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
fname	*(char)
=	O
NULL	O
;	O
mu_message_aget_decoded_attachment_name	(*(struct),*(char),*(*(char)),*(*(char)))->(int)
(	O
part	long
,	O
charset	*(char)
,	O
&	O
fname	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
fname	*(char)
==	O
NULL	O
)	O
fname	*(char)
=	O
mu_tempname	(*(char))->(*(char))
(	O
NULL	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sAttachment - saving [%s]\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
,	O
fname	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%*.*sBegin\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
)	O
;	O
if	O
(	O
charset	*(char)
)	O
{	O
mu_mime_io_buffer_t	*(struct)
info	*(struct)
;	O
mu_mime_io_buffer_create	(*(*(struct)))->(int)
(	O
&	O
info	*(struct)
)	O
;	O
mu_mime_io_buffer_set_charset	(*(struct),*(char))->(int)
(	O
info	*(struct)
,	O
charset	*(char)
)	O
;	O
MU_ASSERT	O
(	O
mu_message_save_attachment	(*(struct),*(char),*(struct))->(int)
(	O
part	long
,	O
NULL	O
,	O
info	*(struct)
)	O
)	O
;	O
mu_mime_io_buffer_destroy	(*(*(struct)))->(void)
(	O
&	O
info	*(struct)
)	O
;	O
}	O
else	O
MU_ASSERT	O
(	O
mu_message_save_attachment	(*(struct),*(char),*(struct))->(int)
(	O
part	long
,	O
fname	*(char)
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
print_attachments	int
)	O
print_file	(*(char),int)->(void)
(	O
fname	*(char)
,	O
indent	int
)	O
;	O
free	(*(void))->(void)
(	O
fname	*(char)
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n%*.*sEnd\n"	*(char)
,	O
indent	int
,	O
indent	int
,	O
""	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
type	int
)	O
;	O
}	O
}	O
