boolean	enum(int,int,int)
restart_language	enum(int,int,int)
;	O
short	O
braces_depth	short
;	O
char	O
*	O
language_list	*(char)
=	O
"arguments to --language:\n"	*(char)
"  c       C\n"	*(char)
"  v       Verilog\n"	*(char)
"  cxx     C++\n"	*(char)
"  report  trueprint report file\n"	*(char)
"  sh      shell\n"	*(char)
"  pascal  Pascal\n"	*(char)
"  perl    Perl\n"	*(char)
"  pike    Pike\n"	*(char)
"  java    Java\n"	*(char)
"  text    plain text\n"	*(char)
"  list    compiler or assembler listing file\n"	*(char)
"  pseudoc C pseudocode\n"	*(char)
;	O
typedef	O
enum	O
{	O
NO_LANGUAGE	int
,	O
C	int
,	O
CXX	int
,	O
PSEUDOC	int
,	O
REPORT	int
,	O
SHELL	int
,	O
PASCAL	int
,	O
PERL	int
,	O
PIKE	int
,	O
LIST	int
,	O
TEXT	int
,	O
JAVA	int
,	O
VERILOG	int
}	O
languages	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
get_char_fn	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
;	O
static	O
languages	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
static	O
void	O
set_language_opt	(*(char),*(char),*(char))->(void)
(	O
const	O
char	O
*	O
prefix	*(char)
,	O
const	O
char	O
*	O
option	*(char)
,	O
char	O
*	O
value	*(char)
)	O
;	O
static	O
void	O
set_language_default	(*(char))->(void)
(	O
char	O
*	O
value	*(char)
)	O
;	O
static	O
languages	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
filename_to_language	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
char	O
*	O
)	O
;	O
void	O
setup_language	()->(void)
(	O
void	O
)	O
{	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
NO_LANGUAGE	int
;	O
string_option	(*(char),*(char),*(char),*(*(char)),*((*(char),*(char),*(char))->(void)),*((*(char))->(void)),enum(int,int,int,int,int,int),*(char))->(void)
(	O
"t"	*(char)
,	O
"language"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
&	O
set_language_opt	(*(char),*(char),*(char))->(void)
,	O
&	O
set_language_default	(*(char))->(void)
,	O
OPT_MISC	int
,	O
"treat input as language.  Use --help languages for list."	*(char)
)	O
;	O
}	O
void	O
set_language_default	(*(char))->(void)
(	O
char	O
*	O
value	*(char)
)	O
{	O
if	O
(	O
value	*(char)
==	O
NULL	O
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
NO_LANGUAGE	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"c"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
C	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"v"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
VERILOG	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"cxx"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"report"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REPORT	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"sh"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
SHELL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"pascal"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PASCAL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"perl"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PERL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"pike"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PIKE	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"java"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
JAVA	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"text"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TEXT	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"list"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
LIST	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
value	*(char)
,	O
"pseudoc"	*(char)
)	O
==	O
0	int
)	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PSEUDOC	int
;	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
gettext	(*(char))->(*(char))
(	O
CMD_NAME	*(char)
": unrecognized language type: %s\n"	*(char)
)	O
,	O
value	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
void	O
set_language_opt	(*(char),*(char),*(char))->(void)
(	O
const	O
char	O
*	O
prefix	*(char)
,	O
const	O
char	O
*	O
option	*(char)
,	O
char	O
*	O
value	*(char)
)	O
{	O
set_language_default	(*(char))->(void)
(	O
value	*(char)
)	O
;	O
}	O
languages	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
filename_to_language	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
char	O
*	O
filename	*(char)
)	O
{	O
languages	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
char	O
*	O
suffix	*(char)
;	O
dm	()->(int)
(	O
'l'	O
,	O
2	int
,	O
"Finding language for filename %s\n"	*(char)
,	O
filename	*(char)
)	O
;	O
if	O
(	O
(	O
suffix	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
filename	*(char)
,	O
'.'	O
)	O
)	O
==	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TEXT	int
;	O
}	O
else	O
{	O
dm	()->(int)
(	O
'l'	O
,	O
2	int
,	O
"Finding language for suffix %s\n"	*(char)
,	O
suffix	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".c"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
C	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".v"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
VERILOG	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".h"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
C	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".cxx"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".cpp"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".cc"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".C"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".hpp"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".H"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
CXX	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".pc"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PSEUDOC	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".ph"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PSEUDOC	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".rep"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
REPORT	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".sh"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
SHELL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".pas"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PASCAL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".pl"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PERL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".pm"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PERL	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".pmod"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PIKE	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".pike"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
PIKE	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".java"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
JAVA	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
suffix	*(char)
,	O
".lst"	*(char)
)	O
==	O
0	int
)	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
LIST	int
;	O
else	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
TEXT	int
;	O
}	O
dm	()->(int)
(	O
'l'	O
,	O
2	int
,	O
"Language is %d\n"	*(char)
,	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
;	O
return	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
char	O
*	O
language_defaults	(*(char))->(*(char))
(	O
char	O
*	O
filename	*(char)
)	O
{	O
char	O
*	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
switch	O
(	O
(	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
NO_LANGUAGE	int
)	O
?	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
:	O
filename_to_language	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
filename	*(char)
)	O
)	O
{	O
case	O
C	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_c_defaults	array(char)
;	O
break	O
;	O
case	O
VERILOG	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_verilog_defaults	array(char)
;	O
break	O
;	O
case	O
CXX	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_cxx_defaults	array(char)
;	O
break	O
;	O
case	O
PSEUDOC	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_pc_defaults	array(char)
;	O
break	O
;	O
case	O
REPORT	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_report_defaults	array(char)
;	O
break	O
;	O
case	O
SHELL	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_sh_defaults	array(char)
;	O
break	O
;	O
case	O
PASCAL	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_pascal_defaults	array(char)
;	O
break	O
;	O
case	O
PERL	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_perl_defaults	array(char)
;	O
break	O
;	O
case	O
PIKE	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_pike_defaults	array(char)
;	O
break	O
;	O
case	O
JAVA	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_java_defaults	array(char)
;	O
break	O
;	O
case	O
TEXT	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_text_defaults	array(char)
;	O
break	O
;	O
case	O
LIST	int
:	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
lang_list_defaults	array(char)
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
retval	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
void	O
set_get_char	(*(char))->(void)
(	O
char	O
*	O
filename	*(char)
)	O
{	O
restart_language	enum(int,int,int)
=	O
TRUE	int
;	O
switch	O
(	O
(	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
!=	O
NO_LANGUAGE	int
)	O
?	O
language	enum(int,int,int,int,int,int,int,int,int,int,int,int,int)
:	O
filename_to_language	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int,int,int,int))
(	O
filename	*(char)
)	O
)	O
{	O
case	O
C	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_c_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
VERILOG	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_verilog_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
CXX	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_cxx_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
PSEUDOC	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_pc_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
REPORT	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_report_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
SHELL	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_sh_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
PASCAL	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_pascal_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
PERL	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_perl_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
PIKE	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_pike_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
JAVA	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_java_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
TEXT	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_text_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
case	O
LIST	int
:	O
get_char	*((*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int)))
=	O
get_text_char	(*(char),*(enum(int,int,int,int)))->(enum(int,int,int,int,int))
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
