error_t	int
trivfs_create_control	(int,*(struct),*(struct),*(struct),*(struct),*(*(struct(struct,*(struct`),*(struct`),int,int,int,*(void)))))->(int)
(	O
mach_port_t	O
underlying	int
,	O
struct	O
port_class	O
*	O
control_class	*(struct)
,	O
struct	O
port_bucket	O
*	O
control_bucket	*(struct)
,	O
struct	O
port_class	O
*	O
protid_class	*(struct)
,	O
struct	O
port_bucket	O
*	O
protid_bucket	*(struct)
,	O
struct	O
trivfs_control	struct(struct,*(struct),*(struct),int,int,int,*(void))
*	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
{	O
error_t	int
err	int
;	O
err	int
=	O
trivfs_add_control_port_class	(*(*(struct)))->(int)
(	O
&	O
control_class	*(struct)
)	O
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
trivfs_add_protid_port_class	(*(*(struct)))->(int)
(	O
&	O
protid_class	*(struct)
)	O
;	O
else	O
protid_class	*(struct)
=	O
0	int
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
trivfs_add_port_bucket	(*(*(struct)))->(int)
(	O
&	O
control_bucket	*(struct)
)	O
;	O
else	O
control_bucket	*(struct)
=	O
0	int
;	O
if	O
(	O
!	O
err	int
)	O
{	O
if	O
(	O
!	O
protid_bucket	*(struct)
)	O
protid_bucket	*(struct)
=	O
control_bucket	*(struct)
;	O
err	int
=	O
trivfs_add_port_bucket	(*(*(struct)))->(int)
(	O
&	O
protid_bucket	*(struct)
)	O
;	O
}	O
else	O
protid_bucket	*(struct)
=	O
0	int
;	O
if	O
(	O
!	O
err	int
)	O
err	int
=	O
ports_create_port	()->(int)
(	O
control_class	*(struct)
,	O
control_bucket	*(struct)
,	O
sizeof	O
(	O
struct	O
trivfs_control	struct(struct,*(struct),*(struct),int,int,int,*(void))
)	O
,	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
;	O
if	O
(	O
!	O
err	int
)	O
{	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
underlying	int
=	O
underlying	int
;	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
protid_class	*(struct)
=	O
protid_class	*(struct)
;	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
protid_bucket	*(struct)
=	O
protid_bucket	*(struct)
;	O
err	int
=	O
mach_port_allocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
MACH_PORT_RIGHT_RECEIVE	O
,	O
&	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
filesys_id	int
)	O
;	O
if	O
(	O
err	int
)	O
{	O
ports_port_deref	()->(int)
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
;	O
goto	O
out	O
;	O
}	O
err	int
=	O
mach_port_allocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
MACH_PORT_RIGHT_RECEIVE	O
,	O
&	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
file_id	int
)	O
;	O
if	O
(	O
err	int
)	O
{	O
mach_port_destroy	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
filesys_id	int
)	O
;	O
ports_port_deref	()->(int)
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
;	O
goto	O
out	O
;	O
}	O
(	O
*	O
control	*(*(struct(struct,*(struct),*(struct),int,int,int,*(void))))
)	O
->	O
hook	*(void)
=	O
0	int
;	O
}	O
out	O
:	O
if	O
(	O
err	int
)	O
{	O
trivfs_remove_control_port_class	(*(struct))->(void)
(	O
control_class	*(struct)
)	O
;	O
trivfs_remove_protid_port_class	(*(struct))->(void)
(	O
protid_class	*(struct)
)	O
;	O
trivfs_remove_port_bucket	(*(struct))->(void)
(	O
control_bucket	*(struct)
)	O
;	O
trivfs_remove_port_bucket	(*(struct))->(void)
(	O
protid_bucket	*(struct)
)	O
;	O
}	O
return	O
err	int
;	O
}	O
