typedef	O
struct	O
ctf_dump_item	O
{	O
ctf_list_t	O
cdi_list	O
;	O
char	O
*	O
cdi_item	O
;	O
}	O
ctf_dump_item_t	O
;	O
struct	O
ctf_dump_state	O
{	O
ctf_sect_names_t	enum(int,int,int,int,int,int,int)
cds_sect	O
;	O
ctf_file_t	struct
*	O
cds_fp	O
;	O
ctf_dump_item_t	O
*	O
cds_current	O
;	O
ctf_list_t	O
cds_items	O
;	O
}	O
;	O
typedef	O
struct	O
ctf_dump_membstate	O
{	O
char	O
*	O
*	O
cdm_str	O
;	O
ctf_file_t	struct
*	O
cdm_fp	O
;	O
}	O
ctf_dump_membstate_t	O
;	O
static	O
int	O
ctf_dump_append	O
(	O
ctf_dump_state_t	struct
*	O
state	*(int)
,	O
char	O
*	O
str	O
)	O
{	O
ctf_dump_item_t	O
*	O
cdi	O
;	O
if	O
(	O
(	O
cdi	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
ctf_dump_item	O
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
ENOMEM	O
)	O
)	O
;	O
cdi	O
->	O
cdi_item	O
=	O
str	O
;	O
ctf_list_append	O
(	O
&	O
state	*(int)
->	O
cds_items	O
,	O
cdi	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
ctf_dump_free	O
(	O
ctf_dump_state_t	struct
*	O
state	*(int)
)	O
{	O
ctf_dump_item_t	O
*	O
cdi	O
,	O
*	O
next_cdi	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
return	O
;	O
for	O
(	O
cdi	O
=	O
ctf_list_next	O
(	O
&	O
state	*(int)
->	O
cds_items	O
)	O
;	O
cdi	O
!=	O
NULL	O
;	O
cdi	O
=	O
next_cdi	O
)	O
{	O
free	(*(void))->(void)
(	O
cdi	O
->	O
cdi_item	O
)	O
;	O
next_cdi	O
=	O
ctf_list_next	O
(	O
cdi	O
)	O
;	O
free	(*(void))->(void)
(	O
cdi	O
)	O
;	O
}	O
}	O
static	O
int	O
ctf_is_slice	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
id	int
,	O
ctf_encoding_t	struct(int,int,int)
*	O
enc	O
)	O
{	O
int	O
kind	O
=	O
ctf_type_kind	(*(struct),long)->(int)
(	O
fp	*(struct)
,	O
id	int
)	O
;	O
return	O
(	O
(	O
(	O
kind	O
==	O
CTF_K_INTEGER	O
)	O
||	O
(	O
kind	O
==	O
CTF_K_ENUM	O
)	O
||	O
(	O
kind	O
==	O
CTF_K_FLOAT	O
)	O
)	O
&&	O
ctf_type_reference	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
id	int
)	O
!=	O
CTF_ERR	O
&&	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
fp	*(struct)
,	O
id	int
,	O
enc	O
)	O
==	O
0	int
)	O
;	O
}	O
static	O
char	O
*	O
ctf_dump_format_type	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_id_t	long
id	int
,	O
int	O
flag	int
)	O
{	O
ctf_id_t	long
new_id	O
;	O
char	O
*	O
str	O
=	O
NULL	O
,	O
*	O
bit	O
=	O
NULL	O
,	O
*	O
buf	*(void)
=	O
NULL	O
;	O
new_id	O
=	O
id	int
;	O
do	O
{	O
ctf_encoding_t	struct(int,int,int)
enc	O
;	O
const	O
char	O
*	O
nonroot_leader	O
=	O
""	*(char)
;	O
const	O
char	O
*	O
nonroot_trailer	O
=	O
""	*(char)
;	O
id	int
=	O
new_id	O
;	O
if	O
(	O
flag	int
==	O
CTF_ADD_NONROOT	O
)	O
{	O
nonroot_leader	O
=	O
"{"	*(char)
;	O
nonroot_trailer	O
=	O
"}"	*(char)
;	O
}	O
buf	*(void)
=	O
ctf_type_aname	(*(struct),long)->(*(char))
(	O
fp	*(struct)
,	O
id	int
)	O
;	O
if	O
(	O
!	O
buf	*(void)
)	O
{	O
if	O
(	O
id	int
==	O
0	int
||	O
ctf_errno	(*(struct))->(int)
(	O
fp	*(struct)
)	O
==	O
ECTF_NONREPRESENTABLE	int
)	O
{	O
str	O
=	O
str_append	O
(	O
str	O
,	O
" (type not represented in CTF)"	*(char)
)	O
;	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_NOTREF	int
)	O
;	O
break	O
;	O
}	O
goto	O
err	long
;	O
}	O
if	O
(	O
ctf_is_slice	O
(	O
fp	*(struct)
,	O
id	int
,	O
&	O
enc	O
)	O
)	O
{	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
fp	*(struct)
,	O
id	int
,	O
&	O
enc	O
)	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
" %s%lx: [slice 0x%x:0x%x]%s"	*(char)
,	O
nonroot_leader	O
,	O
id	int
,	O
enc	O
.	O
cte_offset	int
,	O
enc	O
.	O
cte_bits	int
,	O
nonroot_trailer	O
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
}	O
else	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
" %s%lx: %s (size 0x%lx)%s"	*(char)
,	O
nonroot_leader	O
,	O
id	int
,	O
buf	*(void)
[	O
0	int
]	O
==	O
'\0'	O
?	O
"(nameless)"	*(char)
:	O
buf	*(void)
,	O
(	O
unsigned	O
long	O
)	O
ctf_type_size	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
id	int
)	O
,	O
nonroot_trailer	O
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
}	O
free	(*(void))->(void)
(	O
buf	*(void)
)	O
;	O
buf	*(void)
=	O
NULL	O
;	O
str	O
=	O
str_append	O
(	O
str	O
,	O
bit	O
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
bit	O
=	O
NULL	O
;	O
new_id	O
=	O
ctf_type_reference	(*(struct),long)->(long)
(	O
fp	*(struct)
,	O
id	int
)	O
;	O
if	O
(	O
new_id	O
!=	O
CTF_ERR	O
)	O
str	O
=	O
str_append	O
(	O
str	O
,	O
" ->"	*(char)
)	O
;	O
}	O
while	O
(	O
new_id	O
!=	O
CTF_ERR	O
)	O
;	O
if	O
(	O
ctf_errno	(*(struct))->(int)
(	O
fp	*(struct)
)	O
!=	O
ECTF_NOTREF	int
)	O
{	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
str	O
;	O
oom	O
:	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
;	O
err	long
:	O
free	(*(void))->(void)
(	O
buf	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
ctf_dump_header_strfield	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
state	*(int)
,	O
const	O
char	O
*	O
name	*(char)
,	O
uint32_t	int
value	int
)	O
{	O
char	O
*	O
str	O
;	O
if	O
(	O
value	int
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%s: %s\n"	*(char)
,	O
name	*(char)
,	O
ctf_strptr	O
(	O
fp	*(struct)
,	O
value	int
)	O
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
}	O
return	O
0	int
;	O
err	long
:	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
}	O
static	O
int	O
ctf_dump_header_sectfield	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
state	*(int)
,	O
const	O
char	O
*	O
sect	enum(int,int,int,int,int,int,int)
,	O
uint32_t	int
off	O
,	O
uint32_t	int
nextoff	O
)	O
{	O
char	O
*	O
str	O
;	O
if	O
(	O
nextoff	O
-	O
off	O
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%s:\t0x%lx -- 0x%lx (0x%lx bytes)\n"	*(char)
,	O
sect	enum(int,int,int,int,int,int,int)
,	O
(	O
unsigned	O
long	O
)	O
off	O
,	O
(	O
unsigned	O
long	O
)	O
(	O
nextoff	O
-	O
1	int
)	O
,	O
(	O
unsigned	O
long	O
)	O
(	O
nextoff	O
-	O
off	O
)	O
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
}	O
return	O
0	int
;	O
err	long
:	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
}	O
static	O
int	O
ctf_dump_header	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
state	*(int)
)	O
{	O
char	O
*	O
str	O
;	O
const	O
ctf_header_t	struct(struct(short,char,char),int,int,int,int,int,int,int,int,int,int,int,int)
*	O
hp	O
=	O
fp	*(struct)
->	O
ctf_header	struct(struct(short,char,char),int,int,int,int,int,int,int,int,int,int,int,int)
;	O
const	O
char	O
*	O
vertab	O
[	O
]	O
=	O
{	O
NULL	O
,	O
"CTF_VERSION_1"	*(char)
,	O
"CTF_VERSION_1_UPGRADED_3 (latest format, version 1 type "	*(char)
"boundaries)"	*(char)
,	O
"CTF_VERSION_2"	*(char)
,	O
"CTF_VERSION_3"	*(char)
,	O
NULL	O
}	O
;	O
const	O
char	O
*	O
verstr	O
=	O
NULL	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"Magic number: %x\n"	*(char)
,	O
hp	O
->	O
cth_magic	O
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
if	O
(	O
hp	O
->	O
cth_version	O
<=	O
CTF_VERSION	O
)	O
verstr	O
=	O
vertab	O
[	O
hp	O
->	O
cth_version	O
]	O
;	O
if	O
(	O
verstr	O
==	O
NULL	O
)	O
verstr	O
=	O
"(not a valid version)"	*(char)
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"Version: %i (%s)\n"	*(char)
,	O
hp	O
->	O
cth_version	O
,	O
verstr	O
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
if	O
(	O
fp	*(struct)
->	O
ctf_openflags	O
>	O
0	int
)	O
{	O
if	O
(	O
fp	*(struct)
->	O
ctf_openflags	O
)	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"Flags: 0x%x (%s)"	*(char)
,	O
fp	*(struct)
->	O
ctf_openflags	O
,	O
fp	*(struct)
->	O
ctf_openflags	O
&	O
CTF_F_COMPRESS	O
?	O
"CTF_F_COMPRESS"	*(char)
:	O
""	*(char)
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
}	O
if	O
(	O
ctf_dump_header_strfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Parent label"	*(char)
,	O
hp	O
->	O
cth_parlabel	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_strfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Parent name"	*(char)
,	O
hp	O
->	O
cth_parname	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_strfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Compilation unit name"	*(char)
,	O
hp	O
->	O
cth_cuname	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_sectfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Label section"	*(char)
,	O
hp	O
->	O
cth_lbloff	int
,	O
hp	O
->	O
cth_objtoff	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_sectfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Data object section"	*(char)
,	O
hp	O
->	O
cth_objtoff	int
,	O
hp	O
->	O
cth_funcoff	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_sectfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Function info section"	*(char)
,	O
hp	O
->	O
cth_funcoff	int
,	O
hp	O
->	O
cth_varoff	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_sectfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Variable section"	*(char)
,	O
hp	O
->	O
cth_varoff	int
,	O
hp	O
->	O
cth_typeoff	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_sectfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"Type section"	*(char)
,	O
hp	O
->	O
cth_typeoff	int
,	O
hp	O
->	O
cth_stroff	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
if	O
(	O
ctf_dump_header_sectfield	O
(	O
fp	*(struct)
,	O
state	*(int)
,	O
"String section"	*(char)
,	O
hp	O
->	O
cth_stroff	int
,	O
hp	O
->	O
cth_stroff	int
+	O
hp	O
->	O
cth_strlen	int
+	O
1	int
)	O
<	O
0	int
)	O
goto	O
err	long
;	O
return	O
0	int
;	O
err	long
:	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
}	O
static	O
int	O
ctf_dump_label	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
ctf_lblinfo_t	struct(long)
*	O
info	*(struct(long))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
char	O
*	O
str	O
;	O
char	O
*	O
typestr	O
;	O
ctf_dump_state_t	struct
*	O
state	*(int)
=	O
arg	*(void)
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%s -> "	*(char)
,	O
name	*(char)
)	O
<	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
errno	O
)	O
)	O
;	O
if	O
(	O
(	O
typestr	O
=	O
ctf_dump_format_type	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
info	*(struct(long))
->	O
ctb_type	long
,	O
CTF_ADD_ROOT	O
)	O
)	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
typestr	O
)	O
;	O
free	(*(void))->(void)
(	O
typestr	O
)	O
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ctf_dump_objts	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
state	*(int)
)	O
{	O
size_t	long
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
fp	*(struct)
->	O
ctf_nsyms	O
;	O
i	*(struct)
++	O
)	O
{	O
char	O
*	O
str	O
;	O
char	O
*	O
typestr	O
;	O
const	O
char	O
*	O
sym_name	O
;	O
ctf_id_t	long
type	long
;	O
if	O
(	O
(	O
type	long
=	O
ctf_lookup_by_symbol	(*(struct),long)->(long)
(	O
state	*(int)
->	O
cds_fp	O
,	O
i	*(struct)
)	O
)	O
==	O
CTF_ERR	O
)	O
switch	O
(	O
ctf_errno	(*(struct))->(int)
(	O
state	*(int)
->	O
cds_fp	O
)	O
)	O
{	O
case	O
ECTF_NOSYMTAB	int
:	O
return	O
-	O
1	int
;	O
case	O
ECTF_NOTDATA	int
:	O
case	O
ECTF_NOTYPEDAT	int
:	O
continue	O
;	O
}	O
sym_name	O
=	O
ctf_lookup_symbol_name	O
(	O
fp	*(struct)
,	O
i	*(struct)
)	O
;	O
if	O
(	O
sym_name	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%lx -> "	*(char)
,	O
(	O
unsigned	O
long	O
)	O
i	*(struct)
)	O
<	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%s (%lx) -> "	*(char)
,	O
sym_name	O
,	O
(	O
unsigned	O
long	O
)	O
i	*(struct)
)	O
<	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
(	O
typestr	O
=	O
ctf_dump_format_type	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
type	long
,	O
CTF_ADD_ROOT	O
)	O
)	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
typestr	O
)	O
;	O
free	(*(void))->(void)
(	O
typestr	O
)	O
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
ctf_dump_funcs	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
state	*(int)
)	O
{	O
size_t	long
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
fp	*(struct)
->	O
ctf_nsyms	O
;	O
i	*(struct)
++	O
)	O
{	O
char	O
*	O
str	O
;	O
char	O
*	O
bit	O
;	O
const	O
char	O
*	O
err	long
;	O
const	O
char	O
*	O
sym_name	O
;	O
ctf_funcinfo_t	struct(long,int,int)
fi	O
;	O
ctf_id_t	long
type	long
;	O
size_t	long
j	O
;	O
ctf_id_t	long
*	O
args	O
;	O
if	O
(	O
(	O
type	long
=	O
ctf_func_info	(*(struct),long,*(struct(long,int,int)))->(int)
(	O
state	*(int)
->	O
cds_fp	O
,	O
i	*(struct)
,	O
&	O
fi	O
)	O
)	O
==	O
CTF_ERR	O
)	O
switch	O
(	O
ctf_errno	(*(struct))->(int)
(	O
state	*(int)
->	O
cds_fp	O
)	O
)	O
{	O
case	O
ECTF_NOSYMTAB	int
:	O
return	O
-	O
1	int
;	O
case	O
ECTF_NOTDATA	int
:	O
case	O
ECTF_NOTFUNC	int
:	O
case	O
ECTF_NOFUNCDAT	int
:	O
continue	O
;	O
}	O
if	O
(	O
(	O
args	O
=	O
calloc	(long,long)->(*(void))
(	O
fi	O
.	O
ctc_argc	int
,	O
sizeof	O
(	O
ctf_id_t	long
)	O
)	O
)	O
==	O
NULL	O
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ENOMEM	O
)	O
)	O
;	O
if	O
(	O
(	O
str	O
=	O
ctf_type_aname	(*(struct),long)->(*(char))
(	O
state	*(int)
->	O
cds_fp	O
,	O
type	long
)	O
)	O
==	O
NULL	O
)	O
{	O
err	long
=	O
"look up return type"	*(char)
;	O
goto	O
err	long
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
" "	*(char)
)	O
;	O
sym_name	O
=	O
ctf_lookup_symbol_name	O
(	O
fp	*(struct)
,	O
i	*(struct)
)	O
;	O
if	O
(	O
sym_name	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
"0x%lx "	*(char)
,	O
(	O
unsigned	O
long	O
)	O
i	*(struct)
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
}	O
else	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
"%s (0x%lx) "	*(char)
,	O
sym_name	O
,	O
(	O
unsigned	O
long	O
)	O
i	*(struct)
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
bit	O
)	O
;	O
str	O
=	O
str_append	O
(	O
str	O
,	O
" ("	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
if	O
(	O
ctf_func_args	(*(struct),long,int,*(long))->(int)
(	O
state	*(int)
->	O
cds_fp	O
,	O
i	*(struct)
,	O
fi	O
.	O
ctc_argc	int
,	O
args	O
)	O
<	O
0	int
)	O
{	O
err	long
=	O
"look up argument type"	*(char)
;	O
goto	O
err	long
;	O
}	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
fi	O
.	O
ctc_argc	int
;	O
j	O
++	O
)	O
{	O
if	O
(	O
(	O
bit	O
=	O
ctf_type_aname	(*(struct),long)->(*(char))
(	O
state	*(int)
->	O
cds_fp	O
,	O
args	O
[	O
j	O
]	O
)	O
)	O
==	O
NULL	O
)	O
{	O
err	long
=	O
"look up argument type name"	*(char)
;	O
goto	O
err	long
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
bit	O
)	O
;	O
if	O
(	O
(	O
j	O
<	O
fi	O
.	O
ctc_argc	int
-	O
1	int
)	O
||	O
(	O
fi	O
.	O
ctc_flags	int
&	O
CTF_FUNC_VARARG	O
)	O
)	O
str	O
=	O
str_append	O
(	O
str	O
,	O
", "	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
}	O
if	O
(	O
fi	O
.	O
ctc_flags	int
&	O
CTF_FUNC_VARARG	O
)	O
str	O
=	O
str_append	O
(	O
str	O
,	O
"..."	*(char)
)	O
;	O
str	O
=	O
str_append	O
(	O
str	O
,	O
")"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
args	O
)	O
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
continue	O
;	O
oom	O
:	O
free	(*(void))->(void)
(	O
args	O
)	O
;	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
err	long
:	O
ctf_dprintf	O
(	O
"Cannot %s dumping function type for symbol 0x%li: %s\n"	*(char)
,	O
err	long
,	O
(	O
unsigned	O
long	O
)	O
i	*(struct)
,	O
ctf_errmsg	(int)->(*(char))
(	O
ctf_errno	(*(struct))->(int)
(	O
state	*(int)
->	O
cds_fp	O
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
args	O
)	O
;	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
ctf_dump_var	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
ctf_id_t	long
type	long
,	O
void	O
*	O
arg	*(void)
)	O
{	O
char	O
*	O
str	O
;	O
char	O
*	O
typestr	O
;	O
ctf_dump_state_t	struct
*	O
state	*(int)
=	O
arg	*(void)
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%s -> "	*(char)
,	O
name	*(char)
)	O
<	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
errno	O
)	O
)	O
;	O
if	O
(	O
(	O
typestr	O
=	O
ctf_dump_format_type	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
type	long
,	O
CTF_ADD_ROOT	O
)	O
)	O
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
typestr	O
)	O
;	O
free	(*(void))->(void)
(	O
typestr	O
)	O
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
ctf_dump_member	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
ctf_id_t	long
id	int
,	O
unsigned	O
long	O
offset	long
,	O
int	O
depth	int
,	O
void	O
*	O
arg	*(void)
)	O
{	O
ctf_dump_membstate_t	O
*	O
state	*(int)
=	O
arg	*(void)
;	O
char	O
*	O
typestr	O
=	O
NULL	O
;	O
char	O
*	O
bit	O
=	O
NULL	O
;	O
ctf_encoding_t	struct(int,int,int)
ep	O
;	O
ssize_t	long
i	*(struct)
;	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
depth	int
;	O
i	*(struct)
++	O
)	O
*	O
state	*(int)
->	O
cdm_str	O
=	O
str_append	O
(	O
*	O
state	*(int)
->	O
cdm_str	O
,	O
"    "	*(char)
)	O
;	O
if	O
(	O
(	O
typestr	O
=	O
ctf_type_aname	(*(struct),long)->(*(char))
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
)	O
)	O
==	O
NULL	O
)	O
{	O
if	O
(	O
id	int
==	O
0	int
||	O
ctf_errno	(*(struct))->(int)
(	O
state	*(int)
->	O
cdm_fp	O
)	O
==	O
ECTF_NONREPRESENTABLE	int
)	O
{	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
"    [0x%lx] (type not represented in CTF)"	*(char)
,	O
offset	long
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
*	O
state	*(int)
->	O
cdm_str	O
=	O
str_append	O
(	O
*	O
state	*(int)
->	O
cdm_str	O
,	O
bit	O
)	O
;	O
free	(*(void))->(void)
(	O
typestr	O
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
return	O
0	int
;	O
}	O
goto	O
oom	O
;	O
}	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
"    [0x%lx] (ID 0x%lx) (kind %i) %s %s (aligned at 0x%lx"	*(char)
,	O
offset	long
,	O
id	int
,	O
ctf_type_kind	(*(struct),long)->(int)
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
)	O
,	O
typestr	O
,	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
ctf_type_align	(*(struct),long)->(long)
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
)	O
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
*	O
state	*(int)
->	O
cdm_str	O
=	O
str_append	O
(	O
*	O
state	*(int)
->	O
cdm_str	O
,	O
bit	O
)	O
;	O
free	(*(void))->(void)
(	O
typestr	O
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
typestr	O
=	O
NULL	O
;	O
bit	O
=	O
NULL	O
;	O
if	O
(	O
(	O
ctf_type_kind	(*(struct),long)->(int)
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
)	O
==	O
CTF_K_INTEGER	O
)	O
||	O
(	O
ctf_type_kind	(*(struct),long)->(int)
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
)	O
==	O
CTF_K_FLOAT	O
)	O
||	O
(	O
ctf_is_slice	O
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
,	O
&	O
ep	O
)	O
==	O
CTF_K_ENUM	O
)	O
)	O
{	O
ctf_type_encoding	(*(struct),long,*(struct(int,int,int)))->(int)
(	O
state	*(int)
->	O
cdm_fp	O
,	O
id	int
,	O
&	O
ep	O
)	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
bit	O
,	O
", format 0x%x, offset:bits 0x%x:0x%x"	*(char)
,	O
ep	O
.	O
cte_format	int
,	O
ep	O
.	O
cte_offset	int
,	O
ep	O
.	O
cte_bits	int
)	O
<	O
0	int
)	O
goto	O
oom	O
;	O
*	O
state	*(int)
->	O
cdm_str	O
=	O
str_append	O
(	O
*	O
state	*(int)
->	O
cdm_str	O
,	O
bit	O
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
bit	O
=	O
NULL	O
;	O
}	O
*	O
state	*(int)
->	O
cdm_str	O
=	O
str_append	O
(	O
*	O
state	*(int)
->	O
cdm_str	O
,	O
")\n"	*(char)
)	O
;	O
return	O
0	int
;	O
oom	O
:	O
free	(*(void))->(void)
(	O
typestr	O
)	O
;	O
free	(*(void))->(void)
(	O
bit	O
)	O
;	O
return	O
(	O
ctf_set_errno	O
(	O
state	*(int)
->	O
cdm_fp	O
,	O
errno	O
)	O
)	O
;	O
}	O
static	O
int	O
ctf_dump_type	O
(	O
ctf_id_t	long
id	int
,	O
int	O
flag	int
,	O
void	O
*	O
arg	*(void)
)	O
{	O
char	O
*	O
str	O
;	O
const	O
char	O
*	O
err	long
;	O
ctf_dump_state_t	struct
*	O
state	*(int)
=	O
arg	*(void)
;	O
ctf_dump_membstate_t	O
membstate	O
=	O
{	O
&	O
str	O
,	O
state	*(int)
->	O
cds_fp	O
}	O
;	O
size_t	long
len	int
;	O
if	O
(	O
(	O
str	O
=	O
ctf_dump_format_type	O
(	O
state	*(int)
->	O
cds_fp	O
,	O
id	int
,	O
flag	int
)	O
)	O
==	O
NULL	O
)	O
{	O
err	long
=	O
"format type"	*(char)
;	O
goto	O
err	long
;	O
}	O
str	O
=	O
str_append	O
(	O
str	O
,	O
"\n"	*(char)
)	O
;	O
if	O
(	O
(	O
ctf_type_visit	(*(struct),long,*((*(char),long,long,int,*(void))->(int)),*(void))->(int)
(	O
state	*(int)
->	O
cds_fp	O
,	O
id	int
,	O
ctf_dump_member	O
,	O
&	O
membstate	O
)	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
id	int
==	O
0	int
||	O
ctf_errno	(*(struct))->(int)
(	O
state	*(int)
->	O
cds_fp	O
)	O
==	O
ECTF_NONREPRESENTABLE	int
)	O
{	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
return	O
0	int
;	O
}	O
err	long
=	O
"visit members"	*(char)
;	O
goto	O
err	long
;	O
}	O
len	int
=	O
strlen	O
(	O
str	O
)	O
;	O
if	O
(	O
str	O
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
str	O
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
return	O
0	int
;	O
err	long
:	O
ctf_dprintf	O
(	O
"Cannot %s dumping type 0x%lx: %s\n"	*(char)
,	O
err	long
,	O
id	int
,	O
ctf_errmsg	(int)->(*(char))
(	O
ctf_errno	(*(struct))->(int)
(	O
state	*(int)
->	O
cds_fp	O
)	O
)	O
)	O
;	O
free	(*(void))->(void)
(	O
str	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
ctf_dump_str	O
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
state	*(int)
)	O
{	O
const	O
char	O
*	O
s	*(char)
=	O
fp	*(struct)
->	O
ctf_str	O
[	O
CTF_STRTAB_0	O
]	O
.	O
cts_strs	O
;	O
for	O
(	O
;	O
s	*(char)
<	O
fp	*(struct)
->	O
ctf_str	O
[	O
CTF_STRTAB_0	O
]	O
.	O
cts_strs	O
+	O
fp	*(struct)
->	O
ctf_str	O
[	O
CTF_STRTAB_0	O
]	O
.	O
cts_len	O
;	O
)	O
{	O
char	O
*	O
str	O
;	O
if	O
(	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
str	O
,	O
"%lx: %s"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
(	O
s	*(char)
-	O
fp	*(struct)
->	O
ctf_str	O
[	O
CTF_STRTAB_0	O
]	O
.	O
cts_strs	O
)	O
,	O
s	*(char)
)	O
<	O
0	int
)	O
return	O
(	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
errno	O
)	O
)	O
;	O
ctf_dump_append	O
(	O
state	*(int)
,	O
str	O
)	O
;	O
s	*(char)
+=	O
strlen	O
(	O
s	*(char)
)	O
+	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
char	O
*	O
ctf_dump	(*(struct),*(*(struct)),enum(int,int,int,int,int,int,int),*((enum(int,int,int,int,int,int,int),*(char),*(void))->(*(char))),*(void))->(*(char))
(	O
ctf_file_t	struct
*	O
fp	*(struct)
,	O
ctf_dump_state_t	struct
*	O
*	O
statep	O
,	O
ctf_sect_names_t	enum(int,int,int,int,int,int,int)
sect	enum(int,int,int,int,int,int,int)
,	O
ctf_dump_decorate_f	(enum(int,int,int,int,int,int,int),*(char),*(void))->(*(char))
*	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
,	O
void	O
*	O
arg	*(void)
)	O
{	O
char	O
*	O
str	O
;	O
char	O
*	O
line	*(char)
;	O
ctf_dump_state_t	struct
*	O
state	*(int)
=	O
NULL	O
;	O
if	O
(	O
*	O
statep	O
==	O
NULL	O
)	O
{	O
if	O
(	O
(	O
*	O
statep	O
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
ctf_dump_state	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ENOMEM	O
)	O
;	O
goto	O
end	*(*(char))
;	O
}	O
state	*(int)
=	O
*	O
statep	O
;	O
memset	O
(	O
state	*(int)
,	O
0	int
,	O
sizeof	O
(	O
struct	O
ctf_dump_state	O
)	O
)	O
;	O
state	*(int)
->	O
cds_fp	O
=	O
fp	*(struct)
;	O
state	*(int)
->	O
cds_sect	O
=	O
sect	enum(int,int,int,int,int,int,int)
;	O
switch	O
(	O
sect	enum(int,int,int,int,int,int,int)
)	O
{	O
case	O
CTF_SECT_HEADER	int
:	O
ctf_dump_header	O
(	O
fp	*(struct)
,	O
state	*(int)
)	O
;	O
break	O
;	O
case	O
CTF_SECT_LABEL	int
:	O
if	O
(	O
ctf_label_iter	(*(struct),*((*(char),*(struct(long)),*(void))->(int)),*(void))->(int)
(	O
fp	*(struct)
,	O
ctf_dump_label	O
,	O
state	*(int)
)	O
<	O
0	int
)	O
{	O
if	O
(	O
ctf_errno	(*(struct))->(int)
(	O
fp	*(struct)
)	O
!=	O
ECTF_NOLABELDATA	int
)	O
goto	O
end	*(*(char))
;	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
0	int
)	O
;	O
}	O
break	O
;	O
case	O
CTF_SECT_OBJT	int
:	O
if	O
(	O
ctf_dump_objts	O
(	O
fp	*(struct)
,	O
state	*(int)
)	O
<	O
0	int
)	O
goto	O
end	*(*(char))
;	O
break	O
;	O
case	O
CTF_SECT_FUNC	int
:	O
if	O
(	O
ctf_dump_funcs	O
(	O
fp	*(struct)
,	O
state	*(int)
)	O
<	O
0	int
)	O
goto	O
end	*(*(char))
;	O
break	O
;	O
case	O
CTF_SECT_VAR	int
:	O
if	O
(	O
ctf_variable_iter	(*(struct),*((*(char),long,*(void))->(int)),*(void))->(int)
(	O
fp	*(struct)
,	O
ctf_dump_var	O
,	O
state	*(int)
)	O
<	O
0	int
)	O
goto	O
end	*(*(char))
;	O
break	O
;	O
case	O
CTF_SECT_TYPE	int
:	O
if	O
(	O
ctf_type_iter_all	(*(struct),*((long,int,*(void))->(int)),*(void))->(int)
(	O
fp	*(struct)
,	O
ctf_dump_type	O
,	O
state	*(int)
)	O
<	O
0	int
)	O
goto	O
end	*(*(char))
;	O
break	O
;	O
case	O
CTF_SECT_STR	int
:	O
ctf_dump_str	O
(	O
fp	*(struct)
,	O
state	*(int)
)	O
;	O
break	O
;	O
default	O
:	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_DUMPSECTUNKNOWN	int
)	O
;	O
goto	O
end	*(*(char))
;	O
}	O
}	O
else	O
{	O
state	*(int)
=	O
*	O
statep	O
;	O
if	O
(	O
state	*(int)
->	O
cds_sect	O
!=	O
sect	enum(int,int,int,int,int,int,int)
)	O
{	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ECTF_DUMPSECTCHANGED	int
)	O
;	O
goto	O
end	*(*(char))
;	O
}	O
}	O
if	O
(	O
state	*(int)
->	O
cds_current	O
==	O
NULL	O
)	O
state	*(int)
->	O
cds_current	O
=	O
ctf_list_next	O
(	O
&	O
state	*(int)
->	O
cds_items	O
)	O
;	O
else	O
state	*(int)
->	O
cds_current	O
=	O
ctf_list_next	O
(	O
state	*(int)
->	O
cds_current	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
cds_current	O
==	O
NULL	O
)	O
goto	O
end	*(*(char))
;	O
if	O
(	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
)	O
{	O
size_t	long
len	int
;	O
str	O
=	O
NULL	O
;	O
for	O
(	O
line	*(char)
=	O
state	*(int)
->	O
cds_current	O
->	O
cdi_item	O
;	O
line	*(char)
&&	O
*	O
line	*(char)
;	O
)	O
{	O
char	O
*	O
nline	O
=	O
line	*(char)
;	O
char	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
nline	O
=	O
strchr	O
(	O
line	*(char)
,	O
'\n'	O
)	O
;	O
if	O
(	O
nline	O
)	O
nline	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
func	*((*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(void))->(int))
(	O
sect	enum(int,int,int,int,int,int,int)
,	O
line	*(char)
,	O
arg	*(void)
)	O
;	O
str	O
=	O
str_append	O
(	O
str	O
,	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
)	O
;	O
str	O
=	O
str_append	O
(	O
str	O
,	O
"\n"	*(char)
)	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
!=	O
line	*(char)
)	O
free	(*(void))->(void)
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
)	O
;	O
if	O
(	O
nline	O
)	O
{	O
nline	O
[	O
0	int
]	O
=	O
'\n'	O
;	O
nline	O
++	O
;	O
}	O
line	*(char)
=	O
nline	O
;	O
}	O
len	int
=	O
strlen	O
(	O
str	O
)	O
;	O
if	O
(	O
str	O
[	O
len	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
str	O
[	O
len	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
str	O
=	O
strdup	O
(	O
state	*(int)
->	O
cds_current	O
->	O
cdi_item	O
)	O
;	O
if	O
(	O
!	O
str	O
)	O
{	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
ENOMEM	O
)	O
;	O
return	O
str	O
;	O
}	O
}	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
0	int
)	O
;	O
return	O
str	O
;	O
end	*(*(char))
:	O
ctf_dump_free	O
(	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
ctf_set_errno	O
(	O
fp	*(struct)
,	O
0	int
)	O
;	O
*	O
statep	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
