static	O
int	O
_id_mapper	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
copy	*(char)
;	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
call_data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
key	*(*(void))
=	O
itmv	*(*(void))
[	O
0	int
]	O
,	O
*	O
val	int
=	O
itmv	*(*(void))
[	O
1	int
]	O
;	O
if	O
(	O
key	*(*(void))
->	O
type	int
!=	O
imap_eltype_string	int
||	O
val	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
copy	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
val	int
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
copy	*(char)
)	O
return	O
errno	O
;	O
rc	int
=	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
key	*(*(void))
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
,	O
copy	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
val	int
->	O
v	union(*(struct),*(char))
.	O
string	*(char)
=	O
NULL	O
;	O
return	O
rc	int
;	O
}	O
static	O
mu_assoc_t	*(struct)
create_id_assoc	()->(*(struct))
(	O
void	O
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
;	O
int	O
rc	int
=	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
assoc	*(struct)
,	O
MU_ASSOC_ICASE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
NULL	O
;	O
mu_assoc_set_destroy_item	(*(struct),*((*(void))->(void)))->(int)
(	O
assoc	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
return	O
assoc	*(struct)
;	O
}	O
static	O
void	O
parse_id_reply	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
mu_list_t	*(struct)
resp	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_assoc_t	*(struct)
*	O
passoc	*(*(struct))
=	O
data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
if	O
(	O
!	O
data	*(void)
)	O
return	O
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
&&	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
"ID"	*(char)
)	O
)	O
{	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
resp	*(struct)
,	O
1	int
)	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
==	O
imap_eltype_list	int
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
create_id_assoc	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
assoc	*(struct)
)	O
{	O
mu_list_gmap	(*(struct),*((*(*(void)),long,*(void))->(int)),long,*(void))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	union(*(struct),*(char))
.	O
list	*(struct)
,	O
_id_mapper	(*(*(void)),long,*(void))->(int)
,	O
2	int
,	O
assoc	*(struct)
)	O
;	O
*	O
passoc	*(*(struct))
=	O
assoc	*(struct)
;	O
}	O
}	O
}	O
}	O
int	O
mu_imap_id	(*(struct),*(*(char)),*(*(struct)))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
char	O
*	O
*	O
idenv	*(*(char))
,	O
mu_assoc_t	*(struct)
*	O
passoc	*(*(struct))
)	O
{	O
int	O
status	int
;	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
NULL	O
;	O
if	O
(	O
imap	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
imap	*(struct)
->	O
io	*(struct)
)	O
return	O
MU_ERR_NO_TRANSPORT	O
;	O
if	O
(	O
imap	*(struct)
->	O
session_state	enum(int,int,int,int)
==	O
MU_IMAP_SESSION_INIT	int
)	O
return	O
MU_ERR_SEQ	O
;	O
switch	O
(	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
MU_IMAP_CLIENT_READY	int
:	O
status	int
=	O
_mu_imap_tag_next	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(int)
(	O
imap	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"%s ID "	*(char)
,	O
imap	*(struct)
->	O
tag_str	*(char)
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
if	O
(	O
!	O
idenv	*(*(char))
)	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"NIL"	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
idenv	*(*(char))
[	O
0	int
]	O
)	O
{	O
int	O
i	int
;	O
char	O
*	O
delim	int
=	O
"("	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
idenv	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"%s\"%s\""	*(char)
,	O
delim	int
,	O
idenv	*(*(char))
[	O
i	int
]	O
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
delim	int
=	O
" "	*(char)
;	O
if	O
(	O
status	int
)	O
break	O
;	O
}	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
")"	*(char)
)	O
;	O
}	O
else	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"()"	*(char)
)	O
;	O
}	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_imapio_printf	(*(struct),*(char))->(int)
(	O
imap	*(struct)
->	O
io	*(struct)
,	O
"\r\n"	*(char)
)	O
;	O
MU_IMAP_CHECK_ERROR	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
MU_IMAP_FCLR	O
(	O
imap	*(struct)
,	O
MU_IMAP_RESP	int
)	O
;	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_ID_RX	int
;	O
case	O
MU_IMAP_CLIENT_ID_RX	int
:	O
status	int
=	O
_mu_imap_response	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))->(int)
(	O
imap	*(struct)
,	O
parse_id_reply	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)
,	O
&	O
assoc	*(struct)
)	O
;	O
MU_IMAP_CHECK_EAGAIN	O
(	O
imap	*(struct)
,	O
status	int
)	O
;	O
switch	O
(	O
imap	*(struct)
->	O
response	enum(int,int,int)
)	O
{	O
case	O
MU_IMAP_OK	int
:	O
status	int
=	O
0	int
;	O
*	O
passoc	*(*(struct))
=	O
assoc	*(struct)
?	O
assoc	*(struct)
:	O
create_id_assoc	()->(*(struct))
(	O
)	O
;	O
break	O
;	O
case	O
MU_IMAP_NO	int
:	O
status	int
=	O
EACCES	int
;	O
break	O
;	O
case	O
MU_IMAP_BAD	int
:	O
status	int
=	O
MU_ERR_BADREPLY	O
;	O
break	O
;	O
}	O
imap	*(struct)
->	O
client_state	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
MU_IMAP_CLIENT_READY	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
