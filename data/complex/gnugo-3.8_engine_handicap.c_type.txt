static	O
const	O
int	O
places	array(array(int))
[	O
]	O
[	O
2	int
]	O
=	O
{	O
{	O
2	int
,	O
-	O
2	int
}	O
,	O
{	O
-	O
2	int
,	O
2	int
}	O
,	O
{	O
2	int
,	O
2	int
}	O
,	O
{	O
-	O
2	int
,	O
-	O
2	int
}	O
,	O
{	O
0	int
,	O
2	int
}	O
,	O
{	O
0	int
,	O
-	O
2	int
}	O
,	O
{	O
2	int
,	O
0	int
}	O
,	O
{	O
-	O
2	int
,	O
0	int
}	O
,	O
{	O
0	int
,	O
0	int
}	O
,	O
}	O
;	O
int	O
place_fixed_handicap	(int)->(int)
(	O
int	O
desired_handicap	int
)	O
{	O
int	O
r	int
;	O
int	O
max_handicap	int
;	O
int	O
remaining_stones	int
;	O
int	O
three	int
=	O
board_size	int
>	O
11	int
?	O
3	int
:	O
2	int
;	O
int	O
mid	int
=	O
board_size	int
/	O
2	int
;	O
if	O
(	O
desired_handicap	int
<	O
2	int
)	O
{	O
handicap	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
board_size	int
%	O
2	int
==	O
1	int
)	O
&&	O
(	O
board_size	int
>=	O
9	int
)	O
)	O
max_handicap	int
=	O
9	int
;	O
else	O
if	O
(	O
board_size	int
>=	O
7	int
)	O
max_handicap	int
=	O
4	int
;	O
else	O
max_handicap	int
=	O
0	int
;	O
if	O
(	O
desired_handicap	int
>	O
max_handicap	int
)	O
handicap	int
=	O
max_handicap	int
;	O
else	O
handicap	int
=	O
desired_handicap	int
;	O
remaining_stones	int
=	O
handicap	int
;	O
if	O
(	O
desired_handicap	int
==	O
5	int
||	O
desired_handicap	int
==	O
7	int
)	O
{	O
add_stone	(int,int)->(void)
(	O
POS	O
(	O
mid	int
,	O
mid	int
)	O
,	O
BLACK	int
)	O
;	O
remaining_stones	int
--	O
;	O
}	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
remaining_stones	int
;	O
r	int
++	O
)	O
{	O
int	O
i	int
=	O
places	array(array(int))
[	O
r	int
]	O
[	O
0	int
]	O
;	O
int	O
j	int
=	O
places	array(array(int))
[	O
r	int
]	O
[	O
1	int
]	O
;	O
if	O
(	O
i	int
==	O
2	int
)	O
i	int
=	O
three	int
;	O
else	O
if	O
(	O
i	int
==	O
0	int
)	O
i	int
=	O
mid	int
;	O
else	O
if	O
(	O
i	int
==	O
-	O
2	int
)	O
i	int
=	O
board_size	int
-	O
1	int
-	O
three	int
;	O
if	O
(	O
j	int
==	O
2	int
)	O
j	int
=	O
three	int
;	O
else	O
if	O
(	O
j	int
==	O
0	int
)	O
j	int
=	O
mid	int
;	O
else	O
if	O
(	O
j	int
==	O
-	O
2	int
)	O
j	int
=	O
board_size	int
-	O
1	int
-	O
three	int
;	O
add_stone	(int,int)->(void)
(	O
POS	O
(	O
i	int
,	O
j	int
)	O
,	O
BLACK	int
)	O
;	O
}	O
return	O
handicap	int
;	O
}	O
static	O
int	O
remaining_handicap_stones	int
=	O
-	O
1	int
;	O
static	O
int	O
total_handicap_stones	int
=	O
-	O
1	int
;	O
static	O
int	O
find_free_handicap_pattern	()->(int)
(	O
void	O
)	O
;	O
static	O
void	O
free_handicap_callback	(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,*(void))->(void)
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	*(struct)
*	O
pattern	*(struct)
,	O
int	O
ll	int
,	O
void	O
*	O
data	*(void)
)	O
;	O
int	O
place_free_handicap	(int)->(int)
(	O
int	O
desired_handicap	int
)	O
{	O
gg_assert	O
(	O
desired_handicap	int
==	O
0	int
||	O
desired_handicap	int
>=	O
2	int
)	O
;	O
if	O
(	O
desired_handicap	int
==	O
0	int
)	O
{	O
handicap	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
total_handicap_stones	int
=	O
desired_handicap	int
;	O
remaining_handicap_stones	int
=	O
desired_handicap	int
;	O
add_stone	(int,int)->(void)
(	O
POS	O
(	O
0	int
,	O
0	int
)	O
,	O
BLACK	int
)	O
;	O
add_stone	(int,int)->(void)
(	O
POS	O
(	O
0	int
,	O
board_size	int
-	O
1	int
)	O
,	O
BLACK	int
)	O
;	O
add_stone	(int,int)->(void)
(	O
POS	O
(	O
board_size	int
-	O
1	int
,	O
0	int
)	O
,	O
BLACK	int
)	O
;	O
add_stone	(int,int)->(void)
(	O
POS	O
(	O
board_size	int
-	O
1	int
,	O
board_size	int
-	O
1	int
)	O
,	O
BLACK	int
)	O
;	O
while	O
(	O
remaining_handicap_stones	int
>	O
0	int
)	O
{	O
if	O
(	O
!	O
find_free_handicap_pattern	()->(int)
(	O
)	O
)	O
break	O
;	O
}	O
remove_stone	(int)->(void)
(	O
POS	O
(	O
0	int
,	O
0	int
)	O
)	O
;	O
remove_stone	(int)->(void)
(	O
POS	O
(	O
0	int
,	O
board_size	int
-	O
1	int
)	O
)	O
;	O
remove_stone	(int)->(void)
(	O
POS	O
(	O
board_size	int
-	O
1	int
,	O
0	int
)	O
)	O
;	O
remove_stone	(int)->(void)
(	O
POS	O
(	O
board_size	int
-	O
1	int
,	O
board_size	int
-	O
1	int
)	O
)	O
;	O
while	O
(	O
remaining_handicap_stones	int
>	O
0	int
)	O
{	O
int	O
move	*(int)
;	O
genmove_conservative	(int,*(float))->(int)
(	O
BLACK	int
,	O
NULL	O
)	O
;	O
move	*(int)
=	O
aftermath_genmove	(int,int,array(int))->(int)
(	O
BLACK	int
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
move	*(int)
!=	O
PASS_MOVE	int
)	O
{	O
add_stone	(int,int)->(void)
(	O
move	*(int)
,	O
BLACK	int
)	O
;	O
remaining_handicap_stones	int
--	O
;	O
}	O
else	O
break	O
;	O
}	O
handicap	int
=	O
desired_handicap	int
-	O
remaining_handicap_stones	int
;	O
total_handicap_stones	int
=	O
-	O
1	int
;	O
remaining_handicap_stones	int
=	O
-	O
1	int
;	O
return	O
handicap	int
;	O
}	O
struct	O
handicap_match	struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union(float,int))),int,*((*(struct`),int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int)
{	O
int	O
value	*(char)
;	O
int	O
anchor	int
;	O
struct	O
pattern	*(struct)
*	O
pattern	*(struct)
;	O
int	O
ll	int
;	O
}	O
;	O
static	O
struct	O
handicap_match	struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union(float,int))),int,*((*(struct`),int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int)
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
MAX_HANDICAP_MATCHES	int
]	O
;	O
static	O
int	O
number_of_matches	int
;	O
static	O
int	O
find_free_handicap_pattern	()->(int)
(	O
)	O
{	O
int	O
k	int
;	O
int	O
highest_value	int
=	O
-	O
1	int
;	O
int	O
sum_values	int
=	O
0	int
;	O
int	O
r	int
;	O
int	O
anchor	int
;	O
struct	O
pattern	*(struct)
*	O
pattern	*(struct)
;	O
int	O
ll	int
;	O
int	O
move	*(int)
;	O
number_of_matches	int
=	O
0	int
;	O
matchpat	(*((int,int,*(struct),int,*(void))->(void)),int,*(struct),*(void),array(char))->(void)
(	O
free_handicap_callback	(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,*(void))->(void)
,	O
BLACK	int
,	O
&	O
handipat_db	struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),*(struct))
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
number_of_matches	int
==	O
0	int
)	O
return	O
0	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
number_of_matches	int
;	O
k	int
++	O
)	O
if	O
(	O
highest_value	int
<	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
)	O
highest_value	int
=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
number_of_matches	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
<	O
highest_value	int
-	O
10	int
)	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
=	O
0	int
;	O
else	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
=	O
1	int
<<	O
(	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
-	O
highest_value	int
+	O
10	int
)	O
;	O
sum_values	int
+=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
;	O
}	O
r	int
=	O
gg_rand	()->(int)
(	O
)	O
%	O
sum_values	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
number_of_matches	int
;	O
k	int
++	O
)	O
{	O
r	int
-=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
;	O
if	O
(	O
r	int
<	O
0	int
)	O
break	O
;	O
}	O
anchor	int
=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
anchor	int
;	O
pattern	*(struct)
=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
pattern	*(struct)
;	O
ll	int
=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
ll	int
;	O
move	*(int)
=	O
AFFINE_TRANSFORM	O
(	O
pattern	*(struct)
->	O
move_offset	int
,	O
ll	int
,	O
anchor	int
)	O
;	O
add_stone	(int,int)->(void)
(	O
move	*(int)
,	O
BLACK	int
)	O
;	O
remaining_handicap_stones	int
--	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	*(struct)
->	O
patlen	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
pattern	*(struct)
->	O
patn	*(struct(short,char))
[	O
k	int
]	O
.	O
att	char
==	O
ATT_not	int
)	O
{	O
int	O
pos	int
=	O
AFFINE_TRANSFORM	O
(	O
pattern	*(struct)
->	O
patn	*(struct(short,char))
[	O
k	int
]	O
.	O
offset	short
,	O
ll	int
,	O
anchor	int
)	O
;	O
add_stone	(int,int)->(void)
(	O
pos	int
,	O
BLACK	int
)	O
;	O
remaining_handicap_stones	int
--	O
;	O
}	O
}	O
return	O
1	int
;	O
}	O
static	O
void	O
free_handicap_callback	(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int,*(void))->(void)
(	O
int	O
anchor	int
,	O
int	O
color	int
,	O
struct	O
pattern	*(struct)
*	O
pattern	*(struct)
,	O
int	O
ll	int
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
r	int
=	O
-	O
1	int
;	O
int	O
k	int
;	O
int	O
number_of_stones	int
=	O
1	int
;	O
int	O
move	*(int)
=	O
AFFINE_TRANSFORM	O
(	O
pattern	*(struct)
->	O
move_offset	int
,	O
ll	int
,	O
anchor	int
)	O
;	O
UNUSED	O
(	O
data	*(void)
)	O
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
pattern	*(struct)
->	O
patlen	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
pattern	*(struct)
->	O
patn	*(struct(short,char))
[	O
k	int
]	O
.	O
att	char
==	O
ATT_not	int
)	O
number_of_stones	int
++	O
;	O
}	O
if	O
(	O
number_of_stones	int
>	O
remaining_handicap_stones	int
)	O
return	O
;	O
if	O
(	O
pattern	*(struct)
->	O
autohelper_flag	int
&	O
HAVE_CONSTRAINT	int
)	O
{	O
if	O
(	O
!	O
pattern	*(struct)
->	O
autohelper	*((int,int,int,int)->(int))
(	O
ll	int
,	O
move	*(int)
,	O
color	int
,	O
0	int
)	O
)	O
return	O
;	O
}	O
if	O
(	O
number_of_matches	int
<	O
MAX_HANDICAP_MATCHES	int
)	O
{	O
r	int
=	O
number_of_matches	int
;	O
number_of_matches	int
++	O
;	O
}	O
else	O
{	O
int	O
least_value	int
=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
0	int
]	O
.	O
value	*(char)
+	O
1	int
;	O
for	O
(	O
k	int
=	O
0	int
;	O
k	int
<	O
number_of_matches	int
;	O
k	int
++	O
)	O
{	O
if	O
(	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
<	O
least_value	int
)	O
{	O
r	int
=	O
k	int
;	O
least_value	int
=	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
k	int
]	O
.	O
value	*(char)
;	O
}	O
}	O
}	O
gg_assert	O
(	O
r	int
>=	O
0	int
&&	O
r	int
<	O
MAX_HANDICAP_MATCHES	int
)	O
;	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
r	int
]	O
.	O
value	*(char)
=	O
pattern	*(struct)
->	O
value	*(char)
;	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
r	int
]	O
.	O
anchor	int
=	O
anchor	int
;	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
r	int
]	O
.	O
pattern	*(struct)
=	O
pattern	*(struct)
;	O
handicap_matches	array(struct(int,int,*(struct(*(struct(short,char)),int,int,*(char),int,int,int,int,int,int,int,int,array(int),array(int),int,float,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int),union`)),int,*((*`,int,int,int)->(int)),*((int,int,int,int)->(int)),int,float)),int))
[	O
r	int
]	O
.	O
ll	int
=	O
ll	int
;	O
}	O
int	O
free_handicap_remaining_stones	()->(int)
(	O
)	O
{	O
gg_assert	O
(	O
remaining_handicap_stones	int
>=	O
0	int
)	O
;	O
return	O
remaining_handicap_stones	int
;	O
}	O
int	O
free_handicap_total_stones	()->(int)
(	O
)	O
{	O
gg_assert	O
(	O
total_handicap_stones	int
>=	O
0	int
)	O
;	O
return	O
total_handicap_stones	int
;	O
}	O
