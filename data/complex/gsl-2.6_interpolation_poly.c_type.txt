typedef	O
struct	O
{	O
double	O
*	O
d	*(double)
;	O
double	O
*	O
coeff	*(double)
;	O
double	O
*	O
work	*(double)
;	O
}	O
polynomial_state_t	struct(*(double),*(double),*(double))
;	O
static	O
void	O
*	O
polynomial_alloc	(long)->(*(void))
(	O
size_t	long
size	long
)	O
{	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
polynomial_state_t	struct(*(double),*(double),*(double))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for polynomial state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
d	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
size	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
d	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
coeff	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
size	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
coeff	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
double	O
)	O
*	O
size	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
work	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
coeff	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for d"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
polynomial_init	(*(void),array(double),array(double),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
)	O
{	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
int	O
status	int
=	O
gsl_poly_dd_init	(array(double),array(double),array(double),long)->(int)
(	O
state	*(int)
->	O
d	*(double)
,	O
xa	array(double)
,	O
ya	array(double)
,	O
size	long
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
polynomial_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
acc	*(struct(long,long,long))
,	O
double	O
*	O
y	array(double)
)	O
{	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
*	O
y	array(double)
=	O
gsl_poly_dd_eval	(array(double),array(double),long,double)->(double)
(	O
state	*(int)
->	O
d	*(double)
,	O
xa	array(double)
,	O
size	long
,	O
x	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
polynomial_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
acc	*(struct(long,long,long))
,	O
double	O
*	O
y	array(double)
)	O
{	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
gsl_poly_dd_taylor	(array(double),double,array(double),array(double),long,array(double))->(int)
(	O
state	*(int)
->	O
coeff	*(double)
,	O
x	double
,	O
state	*(int)
->	O
d	*(double)
,	O
xa	array(double)
,	O
size	long
,	O
state	*(int)
->	O
work	*(double)
)	O
;	O
*	O
y	array(double)
=	O
state	*(int)
->	O
coeff	*(double)
[	O
1	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
polynomial_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
double	O
x	double
,	O
gsl_interp_accel	struct(long,long,long)
*	O
acc	*(struct(long,long,long))
,	O
double	O
*	O
y	array(double)
)	O
{	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
gsl_poly_dd_taylor	(array(double),double,array(double),array(double),long,array(double))->(int)
(	O
state	*(int)
->	O
coeff	*(double)
,	O
x	double
,	O
state	*(int)
->	O
d	*(double)
,	O
xa	array(double)
,	O
size	long
,	O
state	*(int)
->	O
work	*(double)
)	O
;	O
*	O
y	array(double)
=	O
2.0	int
*	O
state	*(int)
->	O
coeff	*(double)
[	O
2	int
]	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
polynomial_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
(	O
const	O
void	O
*	O
vstate	*(void)
,	O
const	O
double	O
xa	array(double)
[	O
]	O
,	O
const	O
double	O
ya	array(double)
[	O
]	O
,	O
size_t	long
size	long
,	O
gsl_interp_accel	struct(long,long,long)
*	O
acc	*(struct(long,long,long))
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
*	O
result	*(double)
)	O
{	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
const	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	int
;	O
double	O
sum	double
;	O
gsl_poly_dd_taylor	(array(double),double,array(double),array(double),long,array(double))->(int)
(	O
state	*(int)
->	O
coeff	*(double)
,	O
0.0	int
,	O
state	*(int)
->	O
d	*(double)
,	O
xa	array(double)
,	O
size	long
,	O
state	*(int)
->	O
work	*(double)
)	O
;	O
sum	double
=	O
state	*(int)
->	O
coeff	*(double)
[	O
0	int
]	O
*	O
(	O
b	double
-	O
a	double
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
i	int
<	O
size	long
;	O
i	int
++	O
)	O
{	O
sum	double
+=	O
state	*(int)
->	O
coeff	*(double)
[	O
i	int
]	O
*	O
(	O
pow	(double,double)->(double)
(	O
b	double
,	O
i	int
+	O
1	int
)	O
-	O
pow	(double,double)->(double)
(	O
a	double
,	O
i	int
+	O
1	int
)	O
)	O
/	O
(	O
i	int
+	O
1.0	int
)	O
;	O
}	O
*	O
result	*(double)
=	O
sum	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
polynomial_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
polynomial_state_t	struct(*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
d	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
coeff	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
work	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
polynomial_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
=	O
{	O
"polynomial"	*(char)
,	O
3	int
,	O
&	O
polynomial_alloc	(long)->(*(void))
,	O
&	O
polynomial_init	(*(void),array(double),array(double),long)->(int)
,	O
&	O
polynomial_eval	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
polynomial_deriv	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
polynomial_deriv2	(*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)
,	O
&	O
polynomial_integ	(*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)
,	O
&	O
polynomial_free	(*(void))->(void)
,	O
}	O
;	O
const	O
gsl_interp_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
*	O
gsl_interp_polynomial	*(struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct`),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct`),double,double,*(double))->(int)),*((*(void))->(void))))
=	O
&	O
polynomial_type	struct(*(char),int,*((long)->(*(void))),*((*(void),array(double),array(double),long)->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,double,*(struct(long,long,long)),*(double))->(int)),*((*(void),array(double),array(double),long,*(struct(long,long,long)),double,double,*(double))->(int)),*((*(void))->(void)))
;	O
