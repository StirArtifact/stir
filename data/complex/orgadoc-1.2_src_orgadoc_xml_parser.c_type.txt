void	O
orgadoc_xml_printer	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)))->(void)
(	O
xmlDocPtr	*(struct)
doc	*(struct)
,	O
xmlNodePtr	*(struct)
cur	*(char)
)	O
{	O
xmlChar	char
*	O
key	*(char)
;	O
cur	*(char)
=	O
cur	*(char)
->	O
xmlChildrenNode	O
;	O
while	O
(	O
NULL	O
!=	O
cur	*(char)
)	O
{	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"title"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
orgadoc_html_table_start_tags	()->(void)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Title</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Title=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Title} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Title\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Title: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"file"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Filename</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Filename=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Filename} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Filename\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Filename: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"date"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Date/Time</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Date-Time=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Date-Time} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Date-Time\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Date/Time: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"type"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Type</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Type=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Type} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Type\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Type: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"author"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Author</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Author=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Author} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Author\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Author: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"nbpages"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Number of Pages</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Number-of-Pages=%s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Number-of-Pages} %s\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Number-of-Pages\" : %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Number of Pages: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"language"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Document Language</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Document-Language=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Document-Language} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Document-language\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Document Language: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"summary"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Summary</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Summary=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Summary} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Summary\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Summary: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"part"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Chapter(s)</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Chapter(s)=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Chapter(s)} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Chapter\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Chapter(s): %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"notes"	*(char)
)	O
)	O
)	O
{	O
key	*(char)
=	O
xmlNodeListGetString	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)),int)->(*(char))
(	O
doc	*(struct)
,	O
cur	*(char)
->	O
xmlChildrenNode	O
,	O
1	int
)	O
;	O
if	O
(	O
html	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"<tr>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"<td>Notes/Comments</td><td>%s</td>\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"</tr>\n"	*(char)
)	O
;	O
orgadoc_html_table_end_tags	()->(void)
(	O
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
bibtex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Notes-or-Comments=\"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
latex	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\\textbf{Notes-or-Comments} \"%s\"\\\\\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\\\\\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
json	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"    \"Notes\" : \"%s\"\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
if	O
(	O
text	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Notes/Comments: %s\n"	*(char)
,	O
key	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
xmlFree	*((*(void))->(void))
(	O
key	*(char)
)	O
;	O
}	O
}	O
cur	*(char)
=	O
cur	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
return	O
;	O
}	O
void	O
orgadoc_xml_parser	(*(char))->(void)
(	O
char	O
*	O
readme	*(char)
)	O
{	O
xmlDocPtr	*(struct)
doc	*(struct)
=	O
NULL	O
;	O
xmlNodePtr	*(struct)
cur	*(char)
=	O
NULL	O
;	O
doc	*(struct)
=	O
xmlParseFile	(*(char))->(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)))
(	O
readme	*(char)
)	O
;	O
if	O
(	O
NULL	O
==	O
doc	*(struct)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Document cannot be parsed!\n"	*(char)
)	O
;	O
return	O
;	O
}	O
cur	*(char)
=	O
xmlDocGetRootElement	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)))->(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)))
(	O
doc	*(struct)
)	O
;	O
if	O
(	O
NULL	O
==	O
cur	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Empty document or is less than 1 byte!\n"	*(char)
)	O
;	O
xmlFreeDoc	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)))->(void)
(	O
doc	*(struct)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"readme"	*(char)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Root node is of incorrect type!\n"	*(char)
)	O
;	O
xmlFreeDoc	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)))->(void)
(	O
doc	*(struct)
)	O
;	O
}	O
cur	*(char)
=	O
cur	*(char)
->	O
xmlChildrenNode	O
;	O
while	O
(	O
NULL	O
!=	O
cur	*(char)
)	O
{	O
if	O
(	O
(	O
!	O
xmlStrcmp	(*(char),*(char))->(int)
(	O
cur	*(char)
->	O
name	*(char)
,	O
(	O
const	O
xmlChar	char
*	O
)	O
"document"	*(char)
)	O
)	O
)	O
{	O
orgadoc_xml_printer	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)),*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int),*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(void),short,short)))->(void)
(	O
doc	*(struct)
,	O
cur	*(char)
)	O
;	O
}	O
cur	*(char)
=	O
cur	*(char)
->	O
next	*(struct(*(struct(*(struct`),*(char))),*(char)))
;	O
}	O
xmlFreeDoc	(*(struct(*(void),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(char),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,short,short)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,int,int)),int,int,*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`,*`)),*(char),*(char),*(void),*(void),*(char),int,*(struct),*(void),int,int)))->(void)
(	O
doc	*(struct)
)	O
;	O
return	O
;	O
}	O
