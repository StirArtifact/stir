DOUBLE	double
FUNC	O
(	O
DOUBLE	double
x	double
,	O
int	O
*	O
expptr	*(int)
)	O
{	O
int	O
exponent	int
;	O
DECL_ROUNDING	O
BEGIN_ROUNDING	O
(	O
)	O
;	O
x	double
=	O
FREXP	O
(	O
x	double
,	O
&	O
exponent	int
)	O
;	O
x	double
=	O
x	double
+	O
x	double
;	O
exponent	int
-=	O
1	int
;	O
if	O
(	O
exponent	int
<	O
MIN_EXP	O
-	O
1	int
)	O
{	O
x	double
=	O
LDEXP	O
(	O
x	double
,	O
exponent	int
-	O
(	O
MIN_EXP	O
-	O
1	int
)	O
)	O
;	O
exponent	int
=	O
MIN_EXP	O
-	O
1	int
;	O
}	O
END_ROUNDING	O
(	O
)	O
;	O
*	O
expptr	*(int)
=	O
exponent	int
;	O
return	O
x	double
;	O
}	O
