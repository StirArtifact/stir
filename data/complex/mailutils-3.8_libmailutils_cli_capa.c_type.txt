static	O
mu_list_t	*(struct)
capa_list	*(struct)
;	O
static	O
void	O
capa_free	(*(void))->(void)
(	O
void	O
*	O
ptr	*(*(char))
)	O
{	O
struct	O
mu_cli_capa	struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
ptr	*(*(char))
;	O
free	(*(void))->(void)
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(int,int,array(char),array(char)))
)	O
;	O
}	O
void	O
mu_cli_capa_register	(*(struct(*(char),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(struct(*`,int,*`,long,*`,*`,*`)),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
struct	O
mu_cli_capa	struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
{	O
struct	O
mu_cli_capa	struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
mu_alloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
cp	*(struct(int,int,array(char),array(char)))
)	O
)	O
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
->	O
name	*(char)
)	O
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
=	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
->	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
cfg	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
=	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
->	O
cfg	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
=	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
commit	*((*(void))->(void))
=	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
->	O
commit	*((*(void))->(void))
;	O
if	O
(	O
!	O
capa_list	*(struct)
)	O
{	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
capa_list	*(struct)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
capa_list	*(struct)
,	O
capa_free	(*(void))->(void)
)	O
;	O
}	O
mu_list_append	(*(struct),*(void))->(int)
(	O
capa_list	*(struct)
,	O
cp	*(struct(int,int,array(char),array(char)))
)	O
;	O
}	O
struct	O
capa_apply	struct(*(char),*(struct),*(struct),int)
{	O
char	O
const	O
*	O
name	*(char)
;	O
mu_list_t	*(struct)
opts	*(struct)
;	O
mu_list_t	*(struct)
commits	*(struct)
;	O
int	O
found	int
;	O
}	O
;	O
static	O
int	O
capa_extend	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mu_cli_capa	struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
item	*(void)
;	O
struct	O
capa_apply	struct(*(char),*(struct),*(struct),int)
*	O
ap	array(struct(int,int,*(void),*(void)))
=	O
data	*(void)
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
,	O
ap	array(struct(int,int,*(void),*(void)))
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
ap	array(struct(int,int,*(void),*(void)))
->	O
found	int
=	O
1	int
;	O
if	O
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
)	O
mu_list_append	(*(struct),*(void))->(int)
(	O
ap	array(struct(int,int,*(void),*(void)))
->	O
opts	*(struct)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
)	O
;	O
if	O
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
commit	*((*(void))->(void))
)	O
mu_list_append	(*(struct),*(void))->(int)
(	O
ap	array(struct(int,int,*(void),*(void)))
->	O
commits	*(struct)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
commit	*((*(void))->(void))
)	O
;	O
if	O
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
||	O
cp	*(struct(int,int,array(char),array(char)))
->	O
cfg	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
mu_config_root_register_section	(*(char),*(char),*(char),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))))->(int)
(	O
NULL	O
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
,	O
NULL	O
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
parser	*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int))
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
cfg	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
mu_cli_capa_extend_settings	(*(char),*(struct),*(struct))->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
mu_list_t	*(struct)
opts	*(struct)
,	O
mu_list_t	*(struct)
commits	*(struct)
)	O
{	O
struct	O
capa_apply	struct(*(char),*(struct),*(struct),int)
app	struct(*(char),*(struct),*(struct),int)
;	O
app	struct(*(char),*(struct),*(struct),int)
.	O
name	*(char)
=	O
name	*(char)
;	O
app	struct(*(char),*(struct),*(struct),int)
.	O
opts	*(struct)
=	O
opts	*(struct)
;	O
app	struct(*(char),*(struct),*(struct),int)
.	O
commits	*(struct)
=	O
commits	*(struct)
;	O
app	struct(*(char),*(struct),*(struct),int)
.	O
found	int
=	O
0	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
capa_list	*(struct)
,	O
capa_extend	(*(void),*(void))->(int)
,	O
&	O
app	struct(*(char),*(struct),*(struct),int)
)	O
;	O
if	O
(	O
!	O
app	struct(*(char),*(struct),*(struct),int)
.	O
found	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"INTERNAL ERROR at %s:%d: unknown standard capability `%s'"	*(char)
)	O
,	O
__FILE__	O
,	O
__LINE__	O
,	O
name	*(char)
)	O
;	O
}	O
