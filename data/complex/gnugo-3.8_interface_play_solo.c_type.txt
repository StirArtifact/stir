void	O
play_solo	(*(struct(int,int,struct(*(struct`),*(struct`)),int)),int)->(void)
(	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
,	O
int	O
moves	array(int)
)	O
{	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
;	O
int	O
passes	int
=	O
0	int
;	O
float	O
move_value	*(float)
;	O
double	O
t1	double
,	O
t2	double
;	O
int	O
save_moves	int
=	O
moves	array(int)
;	O
struct	O
stats_data	struct(int,int,int,int)
totalstats	struct(int,int,int,int)
;	O
int	O
total_owl_count	int
=	O
0	int
;	O
int	O
n	int
=	O
6	int
+	O
2	int
*	O
gg_rand	()->(int)
(	O
)	O
%	O
5	int
;	O
int	O
i	int
,	O
j	int
;	O
komi	float
=	O
5.5	int
;	O
sgftree_clear	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
sgftreeCreateHeaderNode	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,float,int)->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
board_size	int
,	O
komi	float
,	O
handicap	int
)	O
;	O
sgf_write_header	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,int,float,int,int,int)->(void)
(	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
1	int
,	O
get_random_seed	()->(int)
(	O
)	O
,	O
5.5	int
,	O
handicap	int
,	O
get_level	()->(int)
(	O
)	O
,	O
chinese_rules	int
)	O
;	O
if	O
(	O
board_size	int
>	O
6	int
)	O
{	O
do	O
{	O
do	O
{	O
i	int
=	O
(	O
gg_rand	()->(int)
(	O
)	O
%	O
4	int
)	O
+	O
(	O
gg_rand	()->(int)
(	O
)	O
%	O
(	O
board_size	int
-	O
4	int
)	O
)	O
;	O
j	int
=	O
(	O
gg_rand	()->(int)
(	O
)	O
%	O
4	int
)	O
+	O
(	O
gg_rand	()->(int)
(	O
)	O
%	O
(	O
board_size	int
-	O
4	int
)	O
)	O
;	O
}	O
while	O
(	O
!	O
is_allowed_move	(int,int)->(int)
(	O
POS	O
(	O
i	int
,	O
j	int
)	O
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
)	O
)	O
;	O
gnugo_play_move	(int,int)->(void)
(	O
POS	O
(	O
i	int
,	O
j	int
)	O
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
)	O
;	O
sgftreeAddPlay	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,int,int)->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
,	O
i	int
,	O
j	int
)	O
;	O
sgftreeAddComment	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
"random move"	*(char)
)	O
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
=	O
OTHER_COLOR	O
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
)	O
;	O
}	O
while	O
(	O
--	O
n	int
>	O
0	int
)	O
;	O
}	O
t1	double
=	O
gg_cputime	()->(double)
(	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
totalstats	struct(int,int,int,int)
,	O
'\0'	O
,	O
sizeof	O
(	O
totalstats	struct(int,int,int,int)
)	O
)	O
;	O
while	O
(	O
passes	int
<	O
2	int
&&	O
--	O
moves	array(int)
>=	O
0	int
)	O
{	O
int	O
move	*(int)
;	O
reset_owl_node_counter	()->(void)
(	O
)	O
;	O
move	*(int)
=	O
genmove	(int,*(float),*(int))->(int)
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
,	O
&	O
move_value	*(float)
,	O
NULL	O
)	O
;	O
gnugo_play_move	(int,int)->(void)
(	O
move	*(int)
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
)	O
;	O
sgffile_add_debuginfo	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),float)->(void)
(	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
lastnode	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
move_value	*(float)
)	O
;	O
sgftreeAddPlay	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,int,int)->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
,	O
I	O
(	O
move	*(int)
)	O
,	O
J	O
(	O
move	*(int)
)	O
)	O
;	O
sgffile_output	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
=	O
OTHER_COLOR	O
(	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
)	O
;	O
if	O
(	O
move	*(int)
==	O
PASS_MOVE	int
)	O
{	O
passes	int
++	O
;	O
printf	(*(char))->(int)
(	O
"%s(%d): Pass\n"	*(char)
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
==	O
BLACK	int
?	O
"Black"	*(char)
:	O
"White"	*(char)
,	O
movenum	int
)	O
;	O
}	O
else	O
{	O
passes	int
=	O
0	int
;	O
gprintf	(*(char))->(int)
(	O
"%s(%d): %1m\n"	*(char)
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
==	O
BLACK	int
?	O
"Black"	*(char)
:	O
"White"	*(char)
,	O
movenum	int
,	O
move	*(int)
)	O
;	O
}	O
totalstats	struct(int,int,int,int)
.	O
nodes	int
+=	O
stats	struct(int,int,int,int)
.	O
nodes	int
;	O
totalstats	struct(int,int,int,int)
.	O
read_result_entered	int
+=	O
stats	struct(int,int,int,int)
.	O
read_result_entered	int
;	O
totalstats	struct(int,int,int,int)
.	O
read_result_hits	int
+=	O
stats	struct(int,int,int,int)
.	O
read_result_hits	int
;	O
totalstats	struct(int,int,int,int)
.	O
trusted_read_result_hits	int
+=	O
stats	struct(int,int,int,int)
.	O
trusted_read_result_hits	int
;	O
total_owl_count	int
+=	O
get_owl_node_counter	()->(int)
(	O
)	O
;	O
}	O
t2	double
=	O
gg_cputime	()->(double)
(	O
)	O
;	O
who_wins	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
EMPTY	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
{	O
float	O
score	float
=	O
gnugo_estimate_score	(*(float),*(float))->(float)
(	O
NULL	O
,	O
NULL	O
)	O
;	O
sgfWriteResult	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),float,int)->(void)
(	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
score	float
,	O
1	int
)	O
;	O
}	O
sgffile_output	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
printf	(*(char))->(int)
(	O
"%10d moves played in %0.3f seconds\n"	*(char)
,	O
save_moves	int
-	O
moves	array(int)
,	O
t2	double
-	O
t1	double
)	O
;	O
if	O
(	O
save_moves	int
!=	O
moves	array(int)
)	O
printf	(*(char))->(int)
(	O
"%10.3f seconds/move\n"	*(char)
,	O
(	O
t2	double
-	O
t1	double
)	O
/	O
(	O
save_moves	int
-	O
moves	array(int)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%10d nodes\n"	*(char)
,	O
totalstats	struct(int,int,int,int)
.	O
nodes	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%10d read results entered\n"	*(char)
,	O
totalstats	struct(int,int,int,int)
.	O
read_result_entered	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%10d read result hits\n"	*(char)
,	O
totalstats	struct(int,int,int,int)
.	O
read_result_hits	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%10d trusted read result hits\n"	*(char)
,	O
totalstats	struct(int,int,int,int)
.	O
trusted_read_result_hits	int
)	O
;	O
printf	(*(char))->(int)
(	O
"%10d owl nodes\n"	*(char)
,	O
total_owl_count	int
)	O
;	O
}	O
void	O
load_and_analyze_sgf_file	(*(struct(int,int,struct(*(struct`),*(struct`)),int)))->(void)
(	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
)	O
{	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
;	O
int	O
move	*(int)
;	O
int	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
float	O
move_value	*(float)
;	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
;	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
=	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
game_record	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
;	O
if	O
(	O
metamachine	int
)	O
sgffile_begindump	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
move	*(int)
=	O
genmove	(int,*(float),*(int))->(int)
(	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
&	O
move_value	*(float)
,	O
NULL	O
)	O
;	O
gprintf	(*(char))->(int)
(	O
"%s move %1m\n"	*(char)
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
==	O
WHITE	int
?	O
"white (O)"	*(char)
:	O
"black (X)"	*(char)
,	O
move	*(int)
)	O
;	O
if	O
(	O
metamachine	int
)	O
sgffile_enddump	(*(char))->(void)
(	O
outfilename	array(char)
)	O
;	O
else	O
{	O
gnugo_play_move	(int,int)->(void)
(	O
move	*(int)
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
sgftreeAddPlay	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,int,int)->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
I	O
(	O
move	*(int)
)	O
,	O
J	O
(	O
move	*(int)
)	O
)	O
;	O
sgftreeAddComment	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
"load and analyze mode"	*(char)
)	O
;	O
sgffile_add_debuginfo	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),float)->(void)
(	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
lastnode	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
move_value	*(float)
)	O
;	O
sgffile_output	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
sgftree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
}	O
}	O
void	O
load_and_score_sgf_file	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(int,int,struct(*(struct`),*(struct`)),int)),*(char))->(void)
(	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
Gameinfo	struct(int,int,struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))),int)
*	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
,	O
const	O
char	O
*	O
scoringmode	*(char)
)	O
{	O
int	O
move	*(int)
;	O
float	O
move_value	*(float)
;	O
char	O
*	O
tempc	*(char)
=	O
NULL	O
;	O
char	O
text	*(char)
[	O
250	int
]	O
;	O
char	O
winner	char
;	O
int	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
;	O
int	O
pass	int
=	O
0	int
;	O
int	O
method	int
;	O
float	O
score	float
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
local_tree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
;	O
SGFTree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
*	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
;	O
method	int
=	O
ESTIMATE	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
scoringmode	*(char)
,	O
"finish"	*(char)
)	O
==	O
0	int
)	O
method	int
=	O
FINISH	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
scoringmode	*(char)
,	O
"aftermath"	*(char)
)	O
==	O
0	int
)	O
method	int
=	O
AFTERMATH	int
;	O
if	O
(	O
method	int
==	O
AFTERMATH	int
)	O
{	O
sgftree_clear	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
local_tree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
sgftreeCreateHeaderNode	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,float,int)->(void)
(	O
&	O
local_tree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
,	O
board_size	int
,	O
komi	float
+	O
black_captured	int
-	O
white_captured	int
,	O
handicap	int
)	O
;	O
sgffile_printboard	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
&	O
local_tree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
)	O
;	O
sgfAddProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
local_tree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
.	O
lastnode	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"PL"	*(char)
,	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
==	O
WHITE	int
?	O
"W"	*(char)
:	O
"B"	*(char)
)	O
;	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
=	O
&	O
local_tree	struct(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))
;	O
}	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
gameinfo	*(struct(int,int,struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`))),int))
->	O
to_move	int
;	O
reset_engine	()->(void)
(	O
)	O
;	O
if	O
(	O
method	int
!=	O
ESTIMATE	int
)	O
{	O
doing_scoring	int
=	O
1	int
;	O
while	O
(	O
pass	int
<	O
2	int
)	O
{	O
move	*(int)
=	O
genmove_conservative	(int,*(float))->(int)
(	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
&	O
move_value	*(float)
)	O
;	O
if	O
(	O
move	*(int)
!=	O
PASS_MOVE	int
)	O
{	O
pass	int
=	O
0	int
;	O
gprintf	(*(char))->(int)
(	O
"%d %s move %1m\n"	*(char)
,	O
movenum	int
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
==	O
WHITE	int
?	O
"white (O)"	*(char)
:	O
"black (X)"	*(char)
,	O
move	*(int)
)	O
;	O
}	O
else	O
{	O
pass	int
++	O
;	O
gprintf	(*(char))->(int)
(	O
"%d %s move PASS\n"	*(char)
,	O
movenum	int
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
==	O
WHITE	int
?	O
"white (O)"	*(char)
:	O
"black (X)"	*(char)
)	O
;	O
}	O
play_move	(int,int)->(void)
(	O
move	*(int)
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
sgffile_add_debuginfo	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),float)->(void)
(	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
lastnode	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
move_value	*(float)
)	O
;	O
sgftreeAddPlay	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),int,int,int)->(void)
(	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
I	O
(	O
move	*(int)
)	O
,	O
J	O
(	O
move	*(int)
)	O
)	O
;	O
sgffile_output	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
=	O
OTHER_COLOR	O
(	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
)	O
;	O
}	O
doing_scoring	int
=	O
0	int
;	O
}	O
if	O
(	O
method	int
==	O
AFTERMATH	int
)	O
score	float
=	O
aftermath_compute_score	(int,*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(float)
(	O
next	*(struct(*(struct(*(struct`),short,*(char))),short,*(char)))
,	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
else	O
score	float
=	O
gnugo_estimate_score	(*(float),*(float))->(float)
(	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
score	float
<	O
0.0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
text	*(char)
,	O
"Black wins by %1.1f points\n"	*(char)
,	O
-	O
score	float
)	O
;	O
winner	char
=	O
'B'	O
;	O
}	O
else	O
if	O
(	O
score	float
>	O
0.0	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
text	*(char)
,	O
"White wins by %1.1f points\n"	*(char)
,	O
score	float
)	O
;	O
winner	char
=	O
'W'	O
;	O
}	O
else	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
text	*(char)
,	O
"Jigo\n"	*(char)
)	O
;	O
winner	char
=	O
'0'	O
;	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
text	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
sgftreeAddComment	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char))->(void)
(	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
text	*(char)
)	O
;	O
if	O
(	O
method	int
!=	O
ESTIMATE	int
&&	O
sgfGetCharProperty	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),*(char),*(*(char)))->(int)
(	O
tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
"RE"	*(char)
,	O
&	O
tempc	*(char)
)	O
)	O
{	O
char	O
dummy	char
;	O
float	O
result	int
;	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
tempc	*(char)
,	O
"%1c%f"	*(char)
,	O
&	O
dummy	char
,	O
&	O
result	int
)	O
==	O
2	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Result from file: %c+%1.1f\n"	*(char)
,	O
dummy	char
,	O
result	int
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"GNU Go result and result from file are "	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
result	int
==	O
fabs	(double)->(double)
(	O
score	float
)	O
&&	O
winner	char
==	O
dummy	char
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"identical\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"different\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
tempc	*(char)
[	O
2	int
]	O
==	O
'R'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Result from file: Resign\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"GNU Go result and result from file are "	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
tempc	*(char)
[	O
0	int
]	O
==	O
winner	char
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"identical\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"different\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
}	O
if	O
(	O
method	int
!=	O
ESTIMATE	int
)	O
sgfWriteResult	(*(struct(*(struct(*`,short,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))),float,int)->(void)
(	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
->	O
root	*(struct(*(struct(*(struct`),short,*(char))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
,	O
score	float
,	O
1	int
)	O
;	O
sgffile_output	(*(struct(*(struct(*`,*`,*`,*`)),*(struct(*`,*`,*`,*`)))))->(void)
(	O
score_tree	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(struct`),*(struct`),*(struct`)))))
)	O
;	O
}	O
