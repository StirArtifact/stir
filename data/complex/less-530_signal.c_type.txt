public	O
int	O
sigs	int
;	O
extern	O
int	O
sc_width	int
,	O
sc_height	int
;	O
extern	O
int	O
screen_trashed	int
;	O
extern	O
int	O
lnloop	int
;	O
extern	O
int	O
linenums	int
;	O
extern	O
int	O
wscroll	int
;	O
extern	O
int	O
reading	int
;	O
extern	O
int	O
quit_on_intr	int
;	O
extern	O
long	O
jump_sline_fraction	long
;	O
static	O
RETSIGTYPE	void
u_interrupt	(int)->(void)
(	O
type	int
)	O
int	O
type	int
;	O
{	O
bell	()->(void)
(	O
)	O
;	O
LSIGNAL	O
(	O
SIGINT	int
,	O
u_interrupt	(int)->(void)
)	O
;	O
sigs	int
|=	O
S_INTERRUPT	int
;	O
if	O
(	O
reading	int
)	O
intread	()->(void)
(	O
)	O
;	O
}	O
static	O
RETSIGTYPE	void
stop	(int)->(void)
(	O
type	int
)	O
int	O
type	int
;	O
{	O
LSIGNAL	O
(	O
SIGTSTP	int
,	O
stop	(int)->(void)
)	O
;	O
sigs	int
|=	O
S_STOP	int
;	O
if	O
(	O
reading	int
)	O
intread	()->(void)
(	O
)	O
;	O
}	O
public	O
RETSIGTYPE	void
winch	(int)->(void)
(	O
type	int
)	O
int	O
type	int
;	O
{	O
LSIGNAL	O
(	O
SIG_LESSWINDOW	O
,	O
winch	(int)->(void)
)	O
;	O
sigs	int
|=	O
S_WINCH	int
;	O
if	O
(	O
reading	int
)	O
intread	()->(void)
(	O
)	O
;	O
}	O
static	O
RETSIGTYPE	void
terminate	(int)->(void)
(	O
type	int
)	O
int	O
type	int
;	O
{	O
quit	(int)->(void)
(	O
15	int
)	O
;	O
}	O
public	O
void	O
init_signals	(int)->(void)
(	O
on	int
)	O
int	O
on	int
;	O
{	O
if	O
(	O
on	int
)	O
{	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGINT	int
,	O
u_interrupt	(int)->(void)
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGTSTP	int
,	O
stop	(int)->(void)
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGWINCH	int
,	O
winch	(int)->(void)
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGTERM	int
,	O
terminate	(int)->(void)
)	O
;	O
}	O
else	O
{	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGTSTP	int
,	O
SIG_DFL	O
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGWINCH	int
,	O
SIG_IGN	O
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGQUIT	int
,	O
SIG_DFL	O
)	O
;	O
(	O
void	O
)	O
LSIGNAL	O
(	O
SIGTERM	int
,	O
SIG_DFL	O
)	O
;	O
}	O
}	O
public	O
void	O
psignals	()->(void)
(	O
)	O
{	O
int	O
tsignals	int
;	O
if	O
(	O
(	O
tsignals	int
=	O
sigs	int
)	O
==	O
0	int
)	O
return	O
;	O
sigs	int
=	O
0	int
;	O
if	O
(	O
tsignals	int
&	O
S_STOP	int
)	O
{	O
LSIGNAL	O
(	O
SIGTTOU	int
,	O
SIG_IGN	O
)	O
;	O
clear_bot	()->(void)
(	O
)	O
;	O
deinit	()->(void)
(	O
)	O
;	O
flush	()->(void)
(	O
)	O
;	O
raw_mode	(int)->(void)
(	O
0	int
)	O
;	O
LSIGNAL	O
(	O
SIGTTOU	int
,	O
SIG_DFL	O
)	O
;	O
LSIGNAL	O
(	O
SIGTSTP	int
,	O
SIG_DFL	O
)	O
;	O
kill	(int,int)->(int)
(	O
getpid	()->(int)
(	O
)	O
,	O
SIGTSTP	int
)	O
;	O
LSIGNAL	O
(	O
SIGTSTP	int
,	O
stop	(int)->(void)
)	O
;	O
raw_mode	(int)->(void)
(	O
1	int
)	O
;	O
init	()->(void)
(	O
)	O
;	O
screen_trashed	int
=	O
1	int
;	O
tsignals	int
|=	O
S_WINCH	int
;	O
}	O
if	O
(	O
tsignals	int
&	O
S_WINCH	int
)	O
{	O
int	O
old_width	int
,	O
old_height	int
;	O
old_width	int
=	O
sc_width	int
;	O
old_height	int
=	O
sc_height	int
;	O
get_term	()->(void)
(	O
)	O
;	O
if	O
(	O
sc_width	int
!=	O
old_width	int
||	O
sc_height	int
!=	O
old_height	int
)	O
{	O
wscroll	int
=	O
(	O
sc_height	int
+	O
1	int
)	O
/	O
2	int
;	O
calc_jump_sline	()->(void)
(	O
)	O
;	O
calc_shift_count	()->(void)
(	O
)	O
;	O
screen_trashed	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
tsignals	int
&	O
S_INTERRUPT	int
)	O
{	O
if	O
(	O
quit_on_intr	int
)	O
quit	(int)->(void)
(	O
QUIT_INTERRUPT	int
)	O
;	O
}	O
}	O
