int	O
gsl_sf_bessel_j0_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
ax	double
=	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
if	O
(	O
ax	double
<	O
0.5	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
-	O
1.0	int
/	O
6.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
120.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
5040.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
362880.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
1.0	int
/	O
39916800.0	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
6227020800.0	int
;	O
result	*(struct(double,double))
->	O
val	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
c6	double
)	O
)	O
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
sin	(double)->(double)
(	O
x	double
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_j1_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
ax	double
=	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
3.1	int
*	O
GSL_DBL_MIN	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
0.25	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
-	O
1.0	int
/	O
10.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
280.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
15120.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
1330560.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
1.0	int
/	O
172972800.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
c5	double
)	O
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
/	O
3.0	int
*	O
sum	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
cos_x	double
=	O
cos	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
sin_x	double
=	O
sin	(double)->(double)
(	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
sin_x	double
/	O
x	double
-	O
cos_x	double
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
sin_x	double
/	O
(	O
x	double
*	O
x	double
)	O
)	O
+	O
fabs	(double)->(double)
(	O
cos_x	double
/	O
x	double
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_j2_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
ax	double
=	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
4.0	int
*	O
GSL_SQRT_DBL_MIN	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
ax	double
<	O
1.3	int
)	O
{	O
const	O
double	O
y	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
c1	double
=	O
-	O
1.0	int
/	O
14.0	int
;	O
const	O
double	O
c2	double
=	O
1.0	int
/	O
504.0	int
;	O
const	O
double	O
c3	double
=	O
-	O
1.0	int
/	O
33264.0	int
;	O
const	O
double	O
c4	double
=	O
1.0	int
/	O
3459456.0	int
;	O
const	O
double	O
c5	double
=	O
-	O
1.0	int
/	O
518918400	int
;	O
const	O
double	O
c6	double
=	O
1.0	int
/	O
105859353600.0	int
;	O
const	O
double	O
c7	double
=	O
-	O
1.0	int
/	O
28158588057600.0	int
;	O
const	O
double	O
c8	double
=	O
1.0	int
/	O
9461285587353600.0	int
;	O
const	O
double	O
c9	double
=	O
-	O
1.0	int
/	O
3916972233164390400.0	int
;	O
const	O
double	O
sum	double
=	O
1.0	int
+	O
y	double
*	O
(	O
c1	double
+	O
y	double
*	O
(	O
c2	double
+	O
y	double
*	O
(	O
c3	double
+	O
y	double
*	O
(	O
c4	double
+	O
y	double
*	O
(	O
c5	double
+	O
y	double
*	O
(	O
c6	double
+	O
y	double
*	O
(	O
c7	double
+	O
y	double
*	O
(	O
c8	double
+	O
y	double
*	O
c9	double
)	O
)	O
)	O
)	O
)	O
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
y	double
/	O
15.0	int
*	O
sum	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
cos_x	double
=	O
cos	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
sin_x	double
=	O
sin	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
f	*(double)
=	O
(	O
3.0	int
/	O
(	O
x	double
*	O
x	double
)	O
-	O
1.0	int
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
f	*(double)
*	O
sin_x	double
-	O
3.0	int
*	O
cos_x	double
/	O
x	double
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
f	*(double)
*	O
sin_x	double
/	O
x	double
)	O
+	O
3.0	int
*	O
fabs	(double)->(double)
(	O
cos_x	double
/	O
(	O
x	double
*	O
x	double
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_jl_e	(int,double,*(struct(double,double)))->(int)
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
l	int
<	O
0	int
||	O
x	double
<	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
l	int
>	O
0	int
?	O
0.0	int
:	O
1.0	int
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
l	int
==	O
0	int
)	O
{	O
return	O
gsl_sf_bessel_j0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
1	int
)	O
{	O
return	O
gsl_sf_bessel_j1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
l	int
==	O
2	int
)	O
{	O
return	O
gsl_sf_bessel_j2_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
*	O
x	double
<	O
10.0	int
*	O
(	O
l	int
+	O
0.5	int
)	O
/	O
M_E	int
)	O
{	O
gsl_sf_result	struct(double,double)
b	double
;	O
int	O
status	int
=	O
gsl_sf_bessel_IJ_taylor_e	(double,double,int,int,double,*(struct(double,double)))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
-	O
1	int
,	O
50	int
,	O
GSL_DBL_EPSILON	int
,	O
&	O
b	double
)	O
;	O
double	O
pre	double
=	O
sqrt	(double)->(double)
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
pre	double
*	O
b	double
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
pre	double
*	O
b	double
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
GSL_ROOT4_DBL_EPSILON	int
*	O
x	double
>	O
(	O
l	int
*	O
l	int
+	O
l	int
+	O
1.0	int
)	O
)	O
{	O
gsl_sf_result	struct(double,double)
b	double
;	O
int	O
status	int
=	O
gsl_sf_bessel_Jnu_asympx_e	(double,double,*(struct(double,double)))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
&	O
b	double
)	O
;	O
double	O
pre	double
=	O
sqrt	(double)->(double)
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
pre	double
*	O
b	double
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
+	O
pre	double
*	O
b	double
.	O
err	double
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
l	int
>	O
1.0	int
/	O
GSL_ROOT6_DBL_EPSILON	int
)	O
{	O
gsl_sf_result	struct(double,double)
b	double
;	O
int	O
status	int
=	O
gsl_sf_bessel_Jnu_asymp_Olver_e	(double,double,*(struct(double,double)))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
&	O
b	double
)	O
;	O
double	O
pre	double
=	O
sqrt	(double)->(double)
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
pre	double
*	O
b	double
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
+	O
pre	double
*	O
b	double
.	O
err	double
;	O
return	O
status	int
;	O
}	O
else	O
if	O
(	O
x	double
>	O
1000.0	int
&&	O
x	double
>	O
l	int
*	O
l	int
)	O
{	O
gsl_sf_result	struct(double,double)
b	double
;	O
int	O
status	int
=	O
gsl_sf_bessel_Jnu_asympx_e	(double,double,*(struct(double,double)))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
&	O
b	double
)	O
;	O
double	O
pre	double
=	O
sqrt	(double)->(double)
(	O
(	O
0.5	int
*	O
M_PI	int
)	O
/	O
x	double
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
pre	double
*	O
b	double
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
+	O
pre	double
*	O
b	double
.	O
err	double
;	O
return	O
status	int
;	O
}	O
else	O
{	O
double	O
sgn	*(double)
;	O
double	O
ratio	*(double)
;	O
int	O
stat_CF1	int
=	O
gsl_sf_bessel_J_CF1	(double,double,*(double),*(double))->(int)
(	O
l	int
+	O
0.5	int
,	O
x	double
,	O
&	O
ratio	*(double)
,	O
&	O
sgn	*(double)
)	O
;	O
const	O
double	O
BESSEL_J_SMALL	double
=	O
GSL_DBL_MIN	int
/	O
GSL_DBL_EPSILON	int
;	O
double	O
jellp1	double
=	O
BESSEL_J_SMALL	double
*	O
ratio	*(double)
;	O
double	O
jell	double
=	O
BESSEL_J_SMALL	double
;	O
double	O
jellm1	double
;	O
int	O
ell	int
;	O
for	O
(	O
ell	int
=	O
l	int
;	O
ell	int
>	O
0	int
;	O
ell	int
--	O
)	O
{	O
jellm1	double
=	O
-	O
jellp1	double
+	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
jell	double
;	O
jellp1	double
=	O
jell	double
;	O
jell	double
=	O
jellm1	double
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
jell	double
)	O
>	O
fabs	(double)->(double)
(	O
jellp1	double
)	O
)	O
{	O
gsl_sf_result	struct(double,double)
j0_result	struct(double,double)
;	O
int	O
stat_j0	int
=	O
gsl_sf_bessel_j0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
j0_result	struct(double,double)
)	O
;	O
double	O
pre	double
=	O
BESSEL_J_SMALL	double
/	O
jell	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
j0_result	struct(double,double)
.	O
val	double
*	O
pre	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
j0_result	struct(double,double)
.	O
err	double
*	O
fabs	(double)->(double)
(	O
pre	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
0.5	int
*	O
l	int
+	O
1.0	int
)	O
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_j0	int
,	O
stat_CF1	int
)	O
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
j1_result	struct(double,double)
;	O
int	O
stat_j1	int
=	O
gsl_sf_bessel_j1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
j1_result	struct(double,double)
)	O
;	O
double	O
pre	double
=	O
BESSEL_J_SMALL	double
/	O
jellp1	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
j1_result	struct(double,double)
.	O
val	double
*	O
pre	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
j1_result	struct(double,double)
.	O
err	double
*	O
fabs	(double)->(double)
(	O
pre	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
0.5	int
*	O
l	int
+	O
1.0	int
)	O
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_j1	int
,	O
stat_CF1	int
)	O
;	O
}	O
}	O
}	O
int	O
gsl_sf_bessel_jl_array	(int,double,*(double))->(int)
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
result_array	*(double)
)	O
{	O
if	O
(	O
lmax	int
<	O
0	int
||	O
x	double
<	O
0.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
lmax	int
;	O
j	int
++	O
)	O
result_array	*(double)
[	O
j	int
]	O
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
lmax	int
;	O
j	int
++	O
)	O
result_array	*(double)
[	O
j	int
]	O
=	O
0.0	int
;	O
result_array	*(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
r_jellp1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
r_jell	struct(double,double)
;	O
int	O
stat_0	int
=	O
gsl_sf_bessel_jl_e	(int,double,*(struct(double,double)))->(int)
(	O
lmax	int
+	O
1	int
,	O
x	double
,	O
&	O
r_jellp1	struct(double,double)
)	O
;	O
int	O
stat_1	int
=	O
gsl_sf_bessel_jl_e	(int,double,*(struct(double,double)))->(int)
(	O
lmax	int
,	O
x	double
,	O
&	O
r_jell	struct(double,double)
)	O
;	O
double	O
jellp1	double
=	O
r_jellp1	struct(double,double)
.	O
val	double
;	O
double	O
jell	double
=	O
r_jell	struct(double,double)
.	O
val	double
;	O
double	O
jellm1	double
;	O
int	O
ell	int
;	O
result_array	*(double)
[	O
lmax	int
]	O
=	O
jell	double
;	O
for	O
(	O
ell	int
=	O
lmax	int
;	O
ell	int
>=	O
1	int
;	O
ell	int
--	O
)	O
{	O
jellm1	double
=	O
-	O
jellp1	double
+	O
(	O
2	int
*	O
ell	int
+	O
1	int
)	O
/	O
x	double
*	O
jell	double
;	O
jellp1	double
=	O
jell	double
;	O
jell	double
=	O
jellm1	double
;	O
result_array	*(double)
[	O
ell	int
-	O
1	int
]	O
=	O
jellm1	double
;	O
}	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_0	int
,	O
stat_1	int
)	O
;	O
}	O
}	O
int	O
gsl_sf_bessel_jl_steed_array	(int,double,*(double))->(int)
(	O
const	O
int	O
lmax	int
,	O
const	O
double	O
x	double
,	O
double	O
*	O
jl_x	*(double)
)	O
{	O
if	O
(	O
lmax	int
<	O
0	int
||	O
x	double
<	O
0.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<=	O
lmax	int
;	O
j	int
++	O
)	O
jl_x	*(double)
[	O
j	int
]	O
=	O
0.0	int
;	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_EDOM	int
)	O
;	O
}	O
else	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
1	int
;	O
j	int
<=	O
lmax	int
;	O
j	int
++	O
)	O
jl_x	*(double)
[	O
j	int
]	O
=	O
0.0	int
;	O
jl_x	*(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
GSL_ROOT4_DBL_EPSILON	int
)	O
{	O
double	O
inv_fact	double
=	O
1.0	int
;	O
double	O
x_l	double
=	O
1.0	int
;	O
int	O
l	int
;	O
for	O
(	O
l	int
=	O
0	int
;	O
l	int
<=	O
lmax	int
;	O
l	int
++	O
)	O
{	O
jl_x	*(double)
[	O
l	int
]	O
=	O
x_l	double
*	O
inv_fact	double
;	O
jl_x	*(double)
[	O
l	int
]	O
*=	O
1.0	int
-	O
0.5	int
*	O
x	double
*	O
x	double
/	O
(	O
2.0	int
*	O
l	int
+	O
3.0	int
)	O
;	O
inv_fact	double
/=	O
2.0	int
*	O
l	int
+	O
3.0	int
;	O
x_l	double
*=	O
x	double
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
double	O
x_inv	double
=	O
1.0	int
/	O
x	double
;	O
double	O
W	double
=	O
2.0	int
*	O
x_inv	double
;	O
double	O
F	double
=	O
1.0	int
;	O
double	O
FP	double
=	O
(	O
lmax	int
+	O
1.0	int
)	O
*	O
x_inv	double
;	O
double	O
B	double
=	O
2.0	int
*	O
FP	double
+	O
x_inv	double
;	O
double	O
end	double
=	O
B	double
+	O
20000.0	int
*	O
W	double
;	O
double	O
D	double
=	O
1.0	int
/	O
B	double
;	O
double	O
del	double
=	O
-	O
D	double
;	O
FP	double
+=	O
del	double
;	O
do	O
{	O
B	double
+=	O
W	double
;	O
D	double
=	O
1.0	int
/	O
(	O
B	double
-	O
D	double
)	O
;	O
del	double
*=	O
(	O
B	double
*	O
D	double
-	O
1.	int
)	O
;	O
FP	double
+=	O
del	double
;	O
if	O
(	O
D	double
<	O
0.0	int
)	O
F	double
=	O
-	O
F	double
;	O
if	O
(	O
B	double
>	O
end	double
)	O
{	O
GSL_ERROR	O
(	O
"error"	*(char)
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
}	O
while	O
(	O
fabs	(double)->(double)
(	O
del	double
)	O
>=	O
fabs	(double)->(double)
(	O
FP	double
)	O
*	O
GSL_DBL_EPSILON	int
)	O
;	O
FP	double
*=	O
F	double
;	O
if	O
(	O
lmax	int
>	O
0	int
)	O
{	O
double	O
XP2	double
=	O
FP	double
;	O
double	O
PL	double
=	O
lmax	int
*	O
x_inv	double
;	O
int	O
L	int
=	O
lmax	int
;	O
int	O
LP	int
;	O
jl_x	*(double)
[	O
lmax	int
]	O
=	O
F	double
;	O
for	O
(	O
LP	int
=	O
1	int
;	O
LP	int
<=	O
lmax	int
;	O
LP	int
++	O
)	O
{	O
jl_x	*(double)
[	O
L	int
-	O
1	int
]	O
=	O
PL	double
*	O
jl_x	*(double)
[	O
L	int
]	O
+	O
XP2	double
;	O
FP	double
=	O
PL	double
*	O
jl_x	*(double)
[	O
L	int
-	O
1	int
]	O
-	O
jl_x	*(double)
[	O
L	int
]	O
;	O
XP2	double
=	O
FP	double
;	O
PL	double
-=	O
x_inv	double
;	O
--	O
L	int
;	O
}	O
F	double
=	O
jl_x	*(double)
[	O
0	int
]	O
;	O
}	O
W	double
=	O
x_inv	double
/	O
hypot	(double,double)->(double)
(	O
FP	double
,	O
F	double
)	O
;	O
jl_x	*(double)
[	O
0	int
]	O
=	O
W	double
*	O
F	double
;	O
if	O
(	O
lmax	int
>	O
0	int
)	O
{	O
int	O
L	int
;	O
for	O
(	O
L	int
=	O
1	int
;	O
L	int
<=	O
lmax	int
;	O
L	int
++	O
)	O
{	O
jl_x	*(double)
[	O
L	int
]	O
*=	O
W	double
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_bessel_j0	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_j0_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_j1	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_j1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_j2	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_j2_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_jl	(int,double)->(double)
(	O
const	O
int	O
l	int
,	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_jl_e	(int,double,*(struct(double,double)))->(int)
(	O
l	int
,	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
