void	O
gsl_integration_qcheb	(*(struct(*((double,*`)->(double)),*(void))),double,double,*(double),*(double))->(void)
(	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
a	double
,	O
double	O
b	double
,	O
double	O
*	O
cheb12	*(double)
,	O
double	O
*	O
cheb24	*(double)
)	O
{	O
size_t	long
i	long
;	O
double	O
fval	array(double)
[	O
25	int
]	O
,	O
v	array(double)
[	O
12	int
]	O
;	O
const	O
double	O
x	double
[	O
11	int
]	O
=	O
{	O
0.9914448613738104	int
,	O
0.9659258262890683	int
,	O
0.9238795325112868	int
,	O
0.8660254037844386	int
,	O
0.7933533402912352	int
,	O
0.7071067811865475	int
,	O
0.6087614290087206	int
,	O
0.5000000000000000	int
,	O
0.3826834323650898	int
,	O
0.2588190451025208	int
,	O
0.1305261922200516	int
}	O
;	O
const	O
double	O
center	double
=	O
0.5	int
*	O
(	O
b	double
+	O
a	double
)	O
;	O
const	O
double	O
half_length	double
=	O
0.5	int
*	O
(	O
b	double
-	O
a	double
)	O
;	O
fval	array(double)
[	O
0	int
]	O
=	O
0.5	int
*	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
b	double
)	O
;	O
fval	array(double)
[	O
12	int
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
)	O
;	O
fval	array(double)
[	O
24	int
]	O
=	O
0.5	int
*	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
a	double
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
12	int
;	O
i	long
++	O
)	O
{	O
const	O
size_t	long
j	long
=	O
24	int
-	O
i	long
;	O
const	O
double	O
u	double
=	O
half_length	double
*	O
x	double
[	O
i	long
-	O
1	int
]	O
;	O
fval	array(double)
[	O
i	long
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
+	O
u	double
)	O
;	O
fval	array(double)
[	O
j	long
]	O
=	O
GSL_FN_EVAL	O
(	O
f	*(double)
,	O
center	double
-	O
u	double
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
12	int
;	O
i	long
++	O
)	O
{	O
const	O
size_t	long
j	long
=	O
24	int
-	O
i	long
;	O
v	array(double)
[	O
i	long
]	O
=	O
fval	array(double)
[	O
i	long
]	O
-	O
fval	array(double)
[	O
j	long
]	O
;	O
fval	array(double)
[	O
i	long
]	O
=	O
fval	array(double)
[	O
i	long
]	O
+	O
fval	array(double)
[	O
j	long
]	O
;	O
}	O
{	O
const	O
double	O
alam1	double
=	O
v	array(double)
[	O
0	int
]	O
-	O
v	array(double)
[	O
8	int
]	O
;	O
const	O
double	O
alam2	double
=	O
x	double
[	O
5	int
]	O
*	O
(	O
v	array(double)
[	O
2	int
]	O
-	O
v	array(double)
[	O
6	int
]	O
-	O
v	array(double)
[	O
10	int
]	O
)	O
;	O
cheb12	*(double)
[	O
3	int
]	O
=	O
alam1	double
+	O
alam2	double
;	O
cheb12	*(double)
[	O
9	int
]	O
=	O
alam1	double
-	O
alam2	double
;	O
}	O
{	O
const	O
double	O
alam1	double
=	O
v	array(double)
[	O
1	int
]	O
-	O
v	array(double)
[	O
7	int
]	O
-	O
v	array(double)
[	O
9	int
]	O
;	O
const	O
double	O
alam2	double
=	O
v	array(double)
[	O
3	int
]	O
-	O
v	array(double)
[	O
5	int
]	O
-	O
v	array(double)
[	O
11	int
]	O
;	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
2	int
]	O
*	O
alam1	double
+	O
x	double
[	O
8	int
]	O
*	O
alam2	double
;	O
cheb24	*(double)
[	O
3	int
]	O
=	O
cheb12	*(double)
[	O
3	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
21	int
]	O
=	O
cheb12	*(double)
[	O
3	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
8	int
]	O
*	O
alam1	double
-	O
x	double
[	O
2	int
]	O
*	O
alam2	double
;	O
cheb24	*(double)
[	O
9	int
]	O
=	O
cheb12	*(double)
[	O
9	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
15	int
]	O
=	O
cheb12	*(double)
[	O
9	int
]	O
-	O
alam	double
;	O
}	O
}	O
{	O
const	O
double	O
part1	double
=	O
x	double
[	O
3	int
]	O
*	O
v	array(double)
[	O
4	int
]	O
;	O
const	O
double	O
part2	double
=	O
x	double
[	O
7	int
]	O
*	O
v	array(double)
[	O
8	int
]	O
;	O
const	O
double	O
part3	double
=	O
x	double
[	O
5	int
]	O
*	O
v	array(double)
[	O
6	int
]	O
;	O
{	O
const	O
double	O
alam1	double
=	O
v	array(double)
[	O
0	int
]	O
+	O
part1	double
+	O
part2	double
;	O
const	O
double	O
alam2	double
=	O
x	double
[	O
1	int
]	O
*	O
v	array(double)
[	O
2	int
]	O
+	O
part3	double
+	O
x	double
[	O
9	int
]	O
*	O
v	array(double)
[	O
10	int
]	O
;	O
cheb12	*(double)
[	O
1	int
]	O
=	O
alam1	double
+	O
alam2	double
;	O
cheb12	*(double)
[	O
11	int
]	O
=	O
alam1	double
-	O
alam2	double
;	O
}	O
{	O
const	O
double	O
alam1	double
=	O
v	array(double)
[	O
0	int
]	O
-	O
part1	double
+	O
part2	double
;	O
const	O
double	O
alam2	double
=	O
x	double
[	O
9	int
]	O
*	O
v	array(double)
[	O
2	int
]	O
-	O
part3	double
+	O
x	double
[	O
1	int
]	O
*	O
v	array(double)
[	O
10	int
]	O
;	O
cheb12	*(double)
[	O
5	int
]	O
=	O
alam1	double
+	O
alam2	double
;	O
cheb12	*(double)
[	O
7	int
]	O
=	O
alam1	double
-	O
alam2	double
;	O
}	O
}	O
{	O
const	O
double	O
alam	double
=	O
(	O
x	double
[	O
0	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
+	O
x	double
[	O
2	int
]	O
*	O
v	array(double)
[	O
3	int
]	O
+	O
x	double
[	O
4	int
]	O
*	O
v	array(double)
[	O
5	int
]	O
+	O
x	double
[	O
6	int
]	O
*	O
v	array(double)
[	O
7	int
]	O
+	O
x	double
[	O
8	int
]	O
*	O
v	array(double)
[	O
9	int
]	O
+	O
x	double
[	O
10	int
]	O
*	O
v	array(double)
[	O
11	int
]	O
)	O
;	O
cheb24	*(double)
[	O
1	int
]	O
=	O
cheb12	*(double)
[	O
1	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
23	int
]	O
=	O
cheb12	*(double)
[	O
1	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
(	O
x	double
[	O
10	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
-	O
x	double
[	O
8	int
]	O
*	O
v	array(double)
[	O
3	int
]	O
+	O
x	double
[	O
6	int
]	O
*	O
v	array(double)
[	O
5	int
]	O
-	O
x	double
[	O
4	int
]	O
*	O
v	array(double)
[	O
7	int
]	O
+	O
x	double
[	O
2	int
]	O
*	O
v	array(double)
[	O
9	int
]	O
-	O
x	double
[	O
0	int
]	O
*	O
v	array(double)
[	O
11	int
]	O
)	O
;	O
cheb24	*(double)
[	O
11	int
]	O
=	O
cheb12	*(double)
[	O
11	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
13	int
]	O
=	O
cheb12	*(double)
[	O
11	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
(	O
x	double
[	O
4	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
-	O
x	double
[	O
8	int
]	O
*	O
v	array(double)
[	O
3	int
]	O
-	O
x	double
[	O
0	int
]	O
*	O
v	array(double)
[	O
5	int
]	O
-	O
x	double
[	O
10	int
]	O
*	O
v	array(double)
[	O
7	int
]	O
+	O
x	double
[	O
2	int
]	O
*	O
v	array(double)
[	O
9	int
]	O
+	O
x	double
[	O
6	int
]	O
*	O
v	array(double)
[	O
11	int
]	O
)	O
;	O
cheb24	*(double)
[	O
5	int
]	O
=	O
cheb12	*(double)
[	O
5	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
19	int
]	O
=	O
cheb12	*(double)
[	O
5	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
(	O
x	double
[	O
6	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
-	O
x	double
[	O
2	int
]	O
*	O
v	array(double)
[	O
3	int
]	O
-	O
x	double
[	O
10	int
]	O
*	O
v	array(double)
[	O
5	int
]	O
+	O
x	double
[	O
0	int
]	O
*	O
v	array(double)
[	O
7	int
]	O
-	O
x	double
[	O
8	int
]	O
*	O
v	array(double)
[	O
9	int
]	O
-	O
x	double
[	O
4	int
]	O
*	O
v	array(double)
[	O
11	int
]	O
)	O
;	O
cheb24	*(double)
[	O
7	int
]	O
=	O
cheb12	*(double)
[	O
7	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
17	int
]	O
=	O
cheb12	*(double)
[	O
7	int
]	O
-	O
alam	double
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
6	int
;	O
i	long
++	O
)	O
{	O
const	O
size_t	long
j	long
=	O
12	int
-	O
i	long
;	O
v	array(double)
[	O
i	long
]	O
=	O
fval	array(double)
[	O
i	long
]	O
-	O
fval	array(double)
[	O
j	long
]	O
;	O
fval	array(double)
[	O
i	long
]	O
=	O
fval	array(double)
[	O
i	long
]	O
+	O
fval	array(double)
[	O
j	long
]	O
;	O
}	O
{	O
const	O
double	O
alam1	double
=	O
v	array(double)
[	O
0	int
]	O
+	O
x	double
[	O
7	int
]	O
*	O
v	array(double)
[	O
4	int
]	O
;	O
const	O
double	O
alam2	double
=	O
x	double
[	O
3	int
]	O
*	O
v	array(double)
[	O
2	int
]	O
;	O
cheb12	*(double)
[	O
2	int
]	O
=	O
alam1	double
+	O
alam2	double
;	O
cheb12	*(double)
[	O
10	int
]	O
=	O
alam1	double
-	O
alam2	double
;	O
}	O
cheb12	*(double)
[	O
6	int
]	O
=	O
v	array(double)
[	O
0	int
]	O
-	O
v	array(double)
[	O
4	int
]	O
;	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
1	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
+	O
x	double
[	O
5	int
]	O
*	O
v	array(double)
[	O
3	int
]	O
+	O
x	double
[	O
9	int
]	O
*	O
v	array(double)
[	O
5	int
]	O
;	O
cheb24	*(double)
[	O
2	int
]	O
=	O
cheb12	*(double)
[	O
2	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
22	int
]	O
=	O
cheb12	*(double)
[	O
2	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
5	int
]	O
*	O
(	O
v	array(double)
[	O
1	int
]	O
-	O
v	array(double)
[	O
3	int
]	O
-	O
v	array(double)
[	O
5	int
]	O
)	O
;	O
cheb24	*(double)
[	O
6	int
]	O
=	O
cheb12	*(double)
[	O
6	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
18	int
]	O
=	O
cheb12	*(double)
[	O
6	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
9	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
-	O
x	double
[	O
5	int
]	O
*	O
v	array(double)
[	O
3	int
]	O
+	O
x	double
[	O
1	int
]	O
*	O
v	array(double)
[	O
5	int
]	O
;	O
cheb24	*(double)
[	O
10	int
]	O
=	O
cheb12	*(double)
[	O
10	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
14	int
]	O
=	O
cheb12	*(double)
[	O
10	int
]	O
-	O
alam	double
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
3	int
;	O
i	long
++	O
)	O
{	O
const	O
size_t	long
j	long
=	O
6	int
-	O
i	long
;	O
v	array(double)
[	O
i	long
]	O
=	O
fval	array(double)
[	O
i	long
]	O
-	O
fval	array(double)
[	O
j	long
]	O
;	O
fval	array(double)
[	O
i	long
]	O
=	O
fval	array(double)
[	O
i	long
]	O
+	O
fval	array(double)
[	O
j	long
]	O
;	O
}	O
cheb12	*(double)
[	O
4	int
]	O
=	O
v	array(double)
[	O
0	int
]	O
+	O
x	double
[	O
7	int
]	O
*	O
v	array(double)
[	O
2	int
]	O
;	O
cheb12	*(double)
[	O
8	int
]	O
=	O
fval	array(double)
[	O
0	int
]	O
-	O
x	double
[	O
7	int
]	O
*	O
fval	array(double)
[	O
2	int
]	O
;	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
3	int
]	O
*	O
v	array(double)
[	O
1	int
]	O
;	O
cheb24	*(double)
[	O
4	int
]	O
=	O
cheb12	*(double)
[	O
4	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
20	int
]	O
=	O
cheb12	*(double)
[	O
4	int
]	O
-	O
alam	double
;	O
}	O
{	O
const	O
double	O
alam	double
=	O
x	double
[	O
7	int
]	O
*	O
fval	array(double)
[	O
1	int
]	O
-	O
fval	array(double)
[	O
3	int
]	O
;	O
cheb24	*(double)
[	O
8	int
]	O
=	O
cheb12	*(double)
[	O
8	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
16	int
]	O
=	O
cheb12	*(double)
[	O
8	int
]	O
-	O
alam	double
;	O
}	O
cheb12	*(double)
[	O
0	int
]	O
=	O
fval	array(double)
[	O
0	int
]	O
+	O
fval	array(double)
[	O
2	int
]	O
;	O
{	O
const	O
double	O
alam	double
=	O
fval	array(double)
[	O
1	int
]	O
+	O
fval	array(double)
[	O
3	int
]	O
;	O
cheb24	*(double)
[	O
0	int
]	O
=	O
cheb12	*(double)
[	O
0	int
]	O
+	O
alam	double
;	O
cheb24	*(double)
[	O
24	int
]	O
=	O
cheb12	*(double)
[	O
0	int
]	O
-	O
alam	double
;	O
}	O
cheb12	*(double)
[	O
12	int
]	O
=	O
v	array(double)
[	O
0	int
]	O
-	O
v	array(double)
[	O
2	int
]	O
;	O
cheb24	*(double)
[	O
12	int
]	O
=	O
cheb12	*(double)
[	O
12	int
]	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
12	int
;	O
i	long
++	O
)	O
{	O
cheb12	*(double)
[	O
i	long
]	O
*=	O
1.0	int
/	O
6.0	int
;	O
}	O
cheb12	*(double)
[	O
0	int
]	O
*=	O
1.0	int
/	O
12.0	int
;	O
cheb12	*(double)
[	O
12	int
]	O
*=	O
1.0	int
/	O
12.0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
24	int
;	O
i	long
++	O
)	O
{	O
cheb24	*(double)
[	O
i	long
]	O
*=	O
1.0	int
/	O
12.0	int
;	O
}	O
cheb24	*(double)
[	O
0	int
]	O
*=	O
1.0	int
/	O
24.0	int
;	O
cheb24	*(double)
[	O
24	int
]	O
*=	O
1.0	int
/	O
24.0	int
;	O
}	O
