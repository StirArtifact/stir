int	O
mail_folders	(int,*(*(char)))->(int)
(	O
int	O
argc	int
MU_ARG_UNUSED	O
,	O
char	O
*	O
*	O
argv	*(*(char))
MU_ARG_UNUSED	O
)	O
{	O
char	O
*	O
path	*(char)
;	O
if	O
(	O
mailvar_get	(*(void),*(char),enum(int,int,int,int),int)->(int)
(	O
&	O
path	*(char)
,	O
mailvar_name_folder	*(char)
,	O
mailvar_type_string	int
,	O
1	int
)	O
)	O
return	O
1	int
;	O
if	O
(	O
path	*(char)
[	O
0	int
]	O
!=	O
'/'	O
&&	O
path	*(char)
[	O
0	int
]	O
!=	O
'~'	O
)	O
{	O
char	O
*	O
tmp	*(char)
=	O
mu_alloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
path	*(char)
)	O
+	O
3	int
)	O
;	O
tmp	*(char)
[	O
0	int
]	O
=	O
'~'	O
;	O
tmp	*(char)
[	O
1	int
]	O
=	O
'/'	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
tmp	*(char)
+	O
2	int
,	O
path	*(char)
)	O
;	O
path	*(char)
=	O
util_fullpath	(*(char))->(*(char))
(	O
tmp	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
}	O
else	O
path	*(char)
=	O
util_fullpath	(*(char))->(*(char))
(	O
path	*(char)
)	O
;	O
util_do_command	(*(char))->(int)
(	O
"! %s '%s'"	*(char)
,	O
getenv	(*(char))->(*(char))
(	O
"LISTER"	*(char)
)	O
,	O
path	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
