ssize_t	long
safePopenOut	(*(*(char)),*(char),long)->(long)
(	O
const	O
char	O
*	O
*	O
command	*(*(char))
,	O
char	O
*	O
output	*(char)
,	O
size_t	long
len	long
)	O
{	O
int	O
pipefd	array(int)
[	O
2	int
]	O
;	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
ssize_t	long
last	long
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
pipefd	array(int)
)	O
)	O
{	O
return	O
-	O
2	int
;	O
}	O
switch	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
return	O
-	O
2	int
;	O
case	O
0	int
:	O
close	*((*(void))->(int))
(	O
pipefd	array(int)
[	O
0	int
]	O
)	O
;	O
destroy_privs	()->(void)
(	O
)	O
;	O
close	*((*(void))->(int))
(	O
1	int
)	O
;	O
close	*((*(void))->(int))
(	O
2	int
)	O
;	O
if	O
(	O
dup	(int)->(int)
(	O
pipefd	array(int)
[	O
1	int
]	O
)	O
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"Dup error"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
pipefd	array(int)
[	O
1	int
]	O
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
command	*(*(char))
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
(	O
command	*(*(char))
+	O
1	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
default	O
:	O
close	*((*(void))->(int))
(	O
pipefd	array(int)
[	O
1	int
]	O
)	O
;	O
break	O
;	O
}	O
last	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
pipefd	array(int)
[	O
0	int
]	O
,	O
output	*(char)
,	O
len	long
)	O
;	O
kill	(int,int)->(int)
(	O
pid	int
,	O
9	int
)	O
;	O
wait	(*(int))->(int)
(	O
&	O
status	int
)	O
;	O
if	O
(	O
last	long
<	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
return	O
last	long
;	O
}	O
const	O
char	O
*	O
expand	(*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
input	*(char)
,	O
char	O
*	O
ans	*(char)
)	O
{	O
ssize_t	long
last	long
;	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
const	O
char	O
*	O
command	*(*(char))
[	O
]	O
=	O
{	O
"/bin/sh"	*(char)
,	O
"sh"	*(char)
,	O
"-c"	*(char)
,	O
0	int
,	O
0	int
}	O
;	O
ans	*(char)
[	O
EXPAND_BUF	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
input	*(char)
==	O
NULL	O
)	O
return	O
(	O
NULL	O
)	O
;	O
if	O
(	O
*	O
input	*(char)
==	O
'\0'	O
)	O
return	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
strpbrk	(*(char),*(char))->(*(char))
(	O
input	*(char)
,	O
"$*(){}[]\\?`~"	*(char)
)	O
)	O
{	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
ans	*(char)
,	O
input	*(char)
,	O
EXPAND_BUF	int
-	O
1	int
)	O
;	O
return	O
(	O
ans	*(char)
)	O
;	O
}	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
255	int
,	O
"echo %s"	*(char)
,	O
input	*(char)
)	O
;	O
command	*(*(char))
[	O
3	int
]	O
=	O
buf	*(char)
;	O
last	long
=	O
safePopenOut	(*(*(char)),*(char),long)->(long)
(	O
command	*(*(char))
,	O
ans	*(char)
,	O
EXPAND_BUF	int
-	O
1	int
)	O
;	O
if	O
(	O
last	long
<	O
0	int
)	O
{	O
perror	(*(char))->(void)
(	O
"Pipe read error"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
last	long
)	O
ans	*(char)
[	O
last	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
else	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
ans	*(char)
,	O
input	*(char)
,	O
EXPAND_BUF	int
-	O
1	int
)	O
;	O
return	O
ans	*(char)
;	O
}	O
