ESint32	long
EDMAINLINE	O
edma_check_obj_id	(long,*(char))->(long)
(	O
OBJID	long
id	long
,	O
EPChar	*(char)
msg	*(char)
)	O
{	O
if	O
(	O
last_checked_versions	long
<	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
time_last_version_update	long
)	O
_edma_class_update_all_versions	()->(long)
(	O
)	O
;	O
if	O
(	O
(	O
id	long
<	O
0	int
)	O
||	O
(	O
id	long
>	O
nMaxObj	long
)	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[%s] Invalid Object Identifier: %d"	*(char)
,	O
msg	*(char)
,	O
id	long
)	O
;	O
if	O
(	O
gObj	O
[	O
id	long
]	O
==	O
NULL	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[%s] Object %d doesn't exist"	*(char)
,	O
msg	*(char)
,	O
id	long
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
edma_check_obj_id1	(long,*(char),*(char))->(long)
(	O
OBJID	long
id	long
,	O
EPChar	*(char)
msg	*(char)
,	O
EPChar	*(char)
str	*(char)
)	O
{	O
if	O
(	O
(	O
id	long
<	O
0	int
)	O
||	O
(	O
id	long
>	O
nMaxObj	long
)	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[%s] Invalid Object Identifier: "	*(char)
"%d (Id=%s)"	*(char)
,	O
msg	*(char)
,	O
id	long
,	O
str	*(char)
)	O
;	O
if	O
(	O
gObj	O
[	O
id	long
]	O
==	O
NULL	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[%s] Object %d doesn't exist; (Id=%s)"	*(char)
,	O
msg	*(char)
,	O
id	long
,	O
str	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
edma_check_class_id	(long,*(char))->(long)
(	O
CLASSID	long
cid	long
,	O
EPChar	*(char)
msg	*(char)
)	O
{	O
if	O
(	O
(	O
cid	long
<	O
0	int
)	O
||	O
(	O
cid	long
>	O
(	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
nMaxClases	long
+	O
nMaxLocalClasses	long
)	O
)	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[%s] Invalid Class Identifier: %d"	*(char)
,	O
msg	*(char)
,	O
cid	long
)	O
;	O
if	O
(	O
gClass	O
[	O
cid	long
]	O
==	O
0	int
)	O
if	O
(	O
(	O
ProcMapTable	*(char)
[	O
cid	long
]	O
==	O
CLASS_FREE	int
)	O
||	O
(	O
cid	long
<	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
nMaxClases	long
)	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[%s] Class %d not defined"	*(char)
,	O
msg	*(char)
,	O
cid	long
)	O
;	O
if	O
(	O
last_checked_versions	long
<	O
GVar	*(struct(long,long,long,long,long,long,long,long,long,array(struct(array(char),long)),array(struct(array(char),long)),long,long,array(char),*(struct(long,long,array(char),long,long,long,char,char)),long,long,long,union(struct(int,int,int,int,int,union(struct`,struct`)),array(char),long),array(struct(long,long,array(char))),long,long,long))
->	O
time_last_version_update	long
)	O
_edma_class_update_all_versions	()->(long)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAINLINE	O
_edma_parse_class_name	(*(char),*(long),*(long),long,long)->(long)
(	O
EPChar	*(char)
class_name	*(char)
,	O
CLASSID	long
*	O
cid	long
,	O
CLASSID	long
*	O
siu_cid	*(long)
,	O
ESint32	long
vmajor	long
,	O
ESint32	long
vminor	long
)	O
{	O
EPChar	*(char)
aux	*(char)
;	O
EPChar	*(char)
proxy	*(char)
;	O
if	O
(	O
class_name	*(char)
==	O
NULL	O
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[edma_parse_class_name] %s"	*(char)
,	O
"Invalid "	*(char)
"ClassName string"	*(char)
)	O
;	O
*	O
siu_cid	*(long)
=	O
-	O
1	int
;	O
if	O
(	O
(	O
aux	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
class_name	*(char)
,	O
':'	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
proxy	*(char)
=	O
(	O
EPChar	*(char)
)	O
strndup	(*(char),int)->(*(char))
(	O
class_name	*(char)
,	O
aux	*(char)
-	O
class_name	*(char)
)	O
;	O
*	O
cid	long
=	O
*	O
siu_cid	*(long)
=	O
edma_siu_get_proxy_class	(long)->(long)
(	O
edma_siu_get_proxy	(*(char))->(long)
(	O
proxy	*(char)
)	O
)	O
;	O
if	O
(	O
*	O
siu_cid	*(long)
==	O
-	O
1	int
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[edma_parse_class_name] SIU Proxy '%s' not found"	*(char)
,	O
proxy	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
proxy	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
free	(*(void))->(void)
(	O
proxy	*(char)
)	O
;	O
return	O
aux	*(char)
-	O
class_name	*(char)
+	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
vmajor	long
==	O
-	O
1	int
)	O
*	O
cid	long
=	O
edma_get_class_id	(*(char))->(long)
(	O
class_name	*(char)
)	O
;	O
else	O
*	O
cid	long
=	O
edma_get_class_id_with_version	(*(char),long,long)->(long)
(	O
class_name	*(char)
,	O
vmajor	long
,	O
vminor	long
)	O
;	O
if	O
(	O
*	O
cid	long
==	O
-	O
1	int
)	O
{	O
if	O
(	O
vmajor	long
==	O
-	O
1	int
)	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[edma_parse_class_name] "	*(char)
"Class '%s' not found"	*(char)
,	O
class_name	*(char)
)	O
;	O
else	O
return	O
_edma_system_exception	(*(char))->(long)
(	O
"[edma_parse_class_name] "	*(char)
"Class '%s' version %ld.%ld "	*(char)
"not found"	*(char)
,	O
class_name	*(char)
,	O
vmajor	long
,	O
vminor	long
)	O
;	O
}	O
if	O
(	O
gClass	O
[	O
*	O
cid	long
]	O
->	O
SIUProxy	long
!=	O
-	O
1	int
)	O
{	O
*	O
siu_cid	*(long)
=	O
*	O
cid	long
;	O
*	O
cid	long
=	O
edma_siu_get_proxy_class	(long)->(long)
(	O
gClass	O
[	O
*	O
cid	long
]	O
->	O
SIUProxy	long
)	O
;	O
}	O
return	O
0	int
;	O
}	O
edma_printf	(*(char))->(long)
(	O
"[edma_parse_class_name] %s"	*(char)
,	O
"Unreacheable!!!!!"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
