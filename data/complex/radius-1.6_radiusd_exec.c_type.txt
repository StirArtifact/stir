int	O
radius_get_user_ids	(*(struct(*(char),int,int)),*(char))->(int)
(	O
RADIUS_USER	struct(*(char),int,int)
*	O
usr	*(struct(*(char),int,int))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"no such user: %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
grad_string_replace	(*(*(char)),*(char))->(*(char))
(	O
&	O
usr	*(struct(*(char),int,int))
->	O
username	*(char)
,	O
name	*(char)
)	O
;	O
usr	*(struct(*(char),int,int))
->	O
uid	int
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
;	O
usr	*(struct(*(char),int,int))
->	O
gid	int
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
;	O
return	O
0	int
;	O
}	O
int	O
radius_switch_to_user	(*(struct(*(char),int,int)))->(int)
(	O
RADIUS_USER	struct(*(char),int,int)
*	O
usr	*(struct(*(char),int,int))
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
gid_t	int
emptygidset	array(int)
[	O
1	int
]	O
;	O
if	O
(	O
usr	*(struct(*(char),int,int))
->	O
username	*(char)
==	O
NULL	O
)	O
return	O
0	int
;	O
emptygidset	array(int)
[	O
0	int
]	O
=	O
usr	*(struct(*(char),int,int))
->	O
gid	int
?	O
usr	*(struct(*(char),int,int))
->	O
gid	int
:	O
getegid	()->(int)
(	O
)	O
;	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
&&	O
setgroups	(long,*(int))->(int)
(	O
1	int
,	O
emptygidset	array(int)
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"setgroups(1, %lu) failed"	*(char)
)	O
,	O
(	O
u_long	long
)	O
emptygidset	array(int)
[	O
0	int
]	O
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
setegid	(int)->(int)
(	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
)	O
<	O
0	int
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"setegid(%lu) failed"	*(char)
)	O
,	O
(	O
u_long	long
)	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
usr	*(struct(*(char),int,int))
->	O
gid	int
!=	O
0	int
)	O
{	O
if	O
(	O
(	O
rc	int
=	O
setgid	(int)->(int)
(	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
)	O
<	O
0	int
&&	O
getegid	()->(int)
(	O
)	O
!=	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"setgid(%lu) failed"	*(char)
)	O
,	O
(	O
u_long	long
)	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
&&	O
getegid	()->(int)
(	O
)	O
!=	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"cannot set effective gid to %lu"	*(char)
)	O
,	O
(	O
u_long	long
)	O
usr	*(struct(*(char),int,int))
->	O
gid	int
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
&&	O
usr	*(struct(*(char),int,int))
->	O
uid	int
!=	O
0	int
)	O
{	O
uid_t	int
euid	int
;	O
if	O
(	O
setuid	(int)->(int)
(	O
usr	*(struct(*(char),int,int))
->	O
uid	int
)	O
||	O
geteuid	()->(int)
(	O
)	O
!=	O
usr	*(struct(*(char),int,int))
->	O
uid	int
||	O
(	O
getuid	()->(int)
(	O
)	O
!=	O
usr	*(struct(*(char),int,int))
->	O
uid	int
&&	O
(	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
||	O
getuid	()->(int)
(	O
)	O
==	O
0	int
)	O
)	O
)	O
{	O
if	O
(	O
geteuid	()->(int)
(	O
)	O
!=	O
usr	*(struct(*(char),int,int))
->	O
uid	int
)	O
{	O
if	O
(	O
setreuid	(int,int)->(int)
(	O
usr	*(struct(*(char),int,int))
->	O
uid	int
,	O
-	O
1	int
)	O
<	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"setreuid(%lu,-1) failed"	*(char)
)	O
,	O
(	O
u_long	long
)	O
usr	*(struct(*(char),int,int))
->	O
uid	int
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
if	O
(	O
setuid	(int)->(int)
(	O
usr	*(struct(*(char),int,int))
->	O
uid	int
)	O
<	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"second setuid(%lu) failed"	*(char)
)	O
,	O
(	O
u_long	long
)	O
usr	*(struct(*(char),int,int))
->	O
uid	int
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"setuid(%lu) failed"	*(char)
)	O
,	O
(	O
u_long	long
)	O
usr	*(struct(*(char),int,int))
->	O
uid	int
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
}	O
euid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
if	O
(	O
usr	*(struct(*(char),int,int))
->	O
uid	int
!=	O
0	int
&&	O
setuid	(int)->(int)
(	O
0	int
)	O
==	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"seteuid(0) succeeded when it should not"	*(char)
)	O
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
usr	*(struct(*(char),int,int))
->	O
uid	int
!=	O
euid	int
&&	O
setuid	(int)->(int)
(	O
euid	int
)	O
==	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"cannot drop non-root setuid privileges"	*(char)
)	O
)	O
;	O
rc	int
=	O
1	int
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
radius_exec_command	(*(char))->(int)
(	O
char	O
*	O
cmd	*(char)
)	O
{	O
int	O
n	long
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
RETSIGTYPE	void
(	O
*	O
oldsig	*(()->(void))
)	O
(	O
)	O
;	O
if	O
(	O
cmd	*(char)
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"radius_exec_command(): won't execute, not an absolute pathname: %s"	*(char)
)	O
,	O
cmd	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
oldsig	*(()->(void))
=	O
grad_set_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
)	O
==	O
SIG_ERR	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't reset SIGCHLD"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
==	O
0	int
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
grad_argcv_get	(*(char),*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
cmd	*(char)
,	O
""	*(char)
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
for	O
(	O
n	long
=	O
grad_max_fd	()->(int)
(	O
)	O
;	O
n	long
>	O
2	int
;	O
n	long
--	O
)	O
close	*((*(void))->(int))
(	O
n	long
)	O
;	O
close	*((*(void))->(int))
(	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
1	int
)	O
;	O
chdir	(*(char))->(int)
(	O
"/tmp"	*(char)
)	O
;	O
if	O
(	O
radius_switch_to_user	(*(struct(*(char),int,int)))->(int)
(	O
&	O
exec_user	struct(*(char),int,int)
)	O
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
)	O
;	O
openlog	(*(char),int,int)->(void)
(	O
"radiusd"	*(char)
,	O
LOG_PID	int
,	O
LOG_USER	O
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"can't run %s (ruid=%lu, euid=%lu): %m"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
(	O
u_long	long
)	O
getuid	()->(int)
(	O
)	O
,	O
(	O
u_long	long
)	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"fork"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
if	O
(	O
grad_set_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
oldsig	*(()->(void))
)	O
==	O
SIG_ERR	O
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't restore SIGCHLD"	*(char)
)	O
)	O
;	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
status	int
=	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"returned: %d"	*(char)
,	O
status	int
)	O
;	O
if	O
(	O
status	int
==	O
2	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"can't run external program `%s' "	*(char)
"(reason reported via syslog channel "	*(char)
"user.err)"	*(char)
)	O
,	O
cmd	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
char	O
buffer	*(char)
[	O
RAD_BUFFER_SIZE	int
]	O
;	O
format_exit_status	(*(char),int,int)->(void)
(	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
,	O
status	int
)	O
;	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"external program `%s' %s"	*(char)
)	O
,	O
cmd	*(char)
,	O
buffer	*(char)
)	O
;	O
}	O
return	O
status	int
;	O
}	O
int	O
radius_exec_program	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),int)->(int)
(	O
char	O
*	O
cmd	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
int	O
exec_wait	int
)	O
{	O
int	O
p	*(struct)
[	O
2	int
]	O
;	O
int	O
n	long
;	O
char	O
*	O
ptr	*(*(void))
,	O
*	O
errp	*(*(char))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
FILE	struct
*	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
;	O
int	O
line_num	int
;	O
char	O
buffer	*(char)
[	O
RAD_BUFFER_SIZE	int
]	O
;	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
RETSIGTYPE	void
(	O
*	O
oldsig	*(()->(void))
)	O
(	O
)	O
;	O
if	O
(	O
cmd	*(char)
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"radius_exec_program(): won't execute, not an absolute pathname: %s"	*(char)
)	O
,	O
cmd	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
exec_wait	int
)	O
{	O
if	O
(	O
pipe	(array(int))->(int)
(	O
p	*(struct)
)	O
!=	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"couldn't open pipe"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
oldsig	*(()->(void))
=	O
grad_set_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
)	O
==	O
SIG_ERR	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't reset SIGCHLD"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
if	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
==	O
0	int
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"command line: %s"	*(char)
,	O
cmd	*(char)
)	O
;	O
grad_argcv_get	(*(char),*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
cmd	*(char)
,	O
""	*(char)
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
if	O
(	O
exec_wait	int
)	O
{	O
if	O
(	O
close	*((*(void))->(int))
(	O
p	*(struct)
[	O
0	int
]	O
)	O
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't close pipe"	*(char)
)	O
)	O
;	O
if	O
(	O
p	*(struct)
[	O
1	int
]	O
!=	O
1	int
&&	O
dup2	(int,int)->(int)
(	O
p	*(struct)
[	O
1	int
]	O
,	O
1	int
)	O
!=	O
1	int
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't dup stdout"	*(char)
)	O
)	O
;	O
}	O
else	O
close	*((*(void))->(int))
(	O
1	int
)	O
;	O
for	O
(	O
n	long
=	O
grad_max_fd	()->(int)
(	O
)	O
;	O
n	long
>=	O
3	int
;	O
n	long
--	O
)	O
close	*((*(void))->(int))
(	O
n	long
)	O
;	O
chdir	(*(char))->(int)
(	O
"/tmp"	*(char)
)	O
;	O
if	O
(	O
radius_switch_to_user	(*(struct(*(char),int,int)))->(int)
(	O
&	O
exec_user	struct(*(char),int,int)
)	O
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
)	O
;	O
openlog	(*(char),int,int)->(void)
(	O
"radiusd"	*(char)
,	O
LOG_PID	int
,	O
LOG_USER	O
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"can't run %s (ruid=%lu, euid=%lu): %m"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
(	O
u_long	long
)	O
getuid	()->(int)
(	O
)	O
,	O
(	O
u_long	long
)	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
"fork"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
exec_wait	int
)	O
return	O
0	int
;	O
if	O
(	O
close	*((*(void))->(int))
(	O
p	*(struct)
[	O
1	int
]	O
)	O
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't close pipe"	*(char)
)	O
)	O
;	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
p	*(struct)
[	O
0	int
]	O
,	O
"r"	*(char)
)	O
;	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
line_num	int
=	O
0	int
;	O
while	O
(	O
ptr	*(*(void))
=	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buffer	*(char)
,	O
sizeof	O
(	O
buffer	*(char)
)	O
,	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
)	O
{	O
line_num	int
++	O
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"got `%s'"	*(char)
,	O
buffer	*(char)
)	O
;	O
if	O
(	O
userparse	(*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(char)))->(int)
(	O
ptr	*(*(void))
,	O
&	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
errp	*(*(char))
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"<stdout of %s>:%d: %s"	*(char)
)	O
,	O
cmd	*(char)
,	O
line_num	int
,	O
errp	*(*(char))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
}	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*((*(void),*(char),*(struct(*(char),int,int,int,int,*((*`,*`)->(int)))))->(int))
)	O
;	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
if	O
(	O
grad_set_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
oldsig	*(()->(void))
)	O
==	O
SIG_ERR	O
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_CRIT	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't restore SIGCHLD"	*(char)
)	O
)	O
;	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
status	int
=	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
GRAD_DEBUG1	O
(	O
1	int
,	O
"returned: %d"	*(char)
,	O
status	int
)	O
;	O
if	O
(	O
status	int
==	O
2	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"can't run external program `%s' "	*(char)
"(reason reported via syslog channel "	*(char)
"user.err)"	*(char)
)	O
,	O
cmd	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
format_exit_status	(*(char),int,int)->(void)
(	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
,	O
status	int
)	O
;	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"external program `%s' %s"	*(char)
)	O
,	O
cmd	*(char)
,	O
buffer	*(char)
)	O
;	O
}	O
if	O
(	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
&&	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
reply	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
return	O
status	int
;	O
}	O
pid_t	int
radius_run_filter	(int,*(*(char)),*(char),*(int))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
errfile	*(char)
,	O
int	O
*	O
p	*(struct)
)	O
{	O
pid_t	int
pid	int
;	O
int	O
rightp	array(int)
[	O
2	int
]	O
,	O
leftp	array(int)
[	O
2	int
]	O
;	O
int	O
i	int
;	O
pipe	(array(int))->(int)
(	O
leftp	array(int)
)	O
;	O
pipe	(array(int))->(int)
(	O
rightp	array(int)
)	O
;	O
switch	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
{	O
case	O
0	int
:	O
if	O
(	O
leftp	array(int)
[	O
0	int
]	O
!=	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
0	int
)	O
;	O
dup2	(int,int)->(int)
(	O
leftp	array(int)
[	O
0	int
]	O
,	O
0	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
leftp	array(int)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rightp	array(int)
[	O
1	int
]	O
!=	O
1	int
)	O
{	O
close	*((*(void))->(int))
(	O
1	int
)	O
;	O
dup2	(int,int)->(int)
(	O
rightp	array(int)
[	O
1	int
]	O
,	O
1	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
rightp	array(int)
[	O
0	int
]	O
)	O
;	O
i	int
=	O
open	(*(char),int)->(int)
(	O
errfile	*(char)
,	O
O_CREAT	int
|	O
O_WRONLY	int
|	O
O_APPEND	int
,	O
0644	int
)	O
;	O
if	O
(	O
i	int
>	O
0	int
&&	O
i	int
!=	O
2	int
)	O
{	O
dup2	(int,int)->(int)
(	O
i	int
,	O
2	int
)	O
;	O
close	*((*(void))->(int))
(	O
i	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
grad_max_fd	()->(int)
(	O
)	O
;	O
i	int
>	O
2	int
;	O
i	int
--	O
)	O
close	*((*(void))->(int))
(	O
i	int
)	O
;	O
if	O
(	O
radius_switch_to_user	(*(struct(*(char),int,int)))->(int)
(	O
&	O
exec_user	struct(*(char),int,int)
)	O
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
argv	*(*(char))
)	O
;	O
openlog	(*(char),int,int)->(void)
(	O
"radiusd"	*(char)
,	O
LOG_PID	int
,	O
LOG_USER	O
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"can't run %s (ruid=%d, euid=%d): %m"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
getuid	()->(int)
(	O
)	O
,	O
geteuid	()->(int)
(	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
case	O
-	O
1	int
:	O
close	*((*(void))->(int))
(	O
rightp	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
rightp	array(int)
[	O
1	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
leftp	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
leftp	array(int)
[	O
1	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
p	*(struct)
[	O
0	int
]	O
=	O
rightp	array(int)
[	O
0	int
]	O
;	O
close	*((*(void))->(int))
(	O
rightp	array(int)
[	O
1	int
]	O
)	O
;	O
p	*(struct)
[	O
1	int
]	O
=	O
leftp	array(int)
[	O
1	int
]	O
;	O
close	*((*(void))->(int))
(	O
leftp	array(int)
[	O
0	int
]	O
)	O
;	O
}	O
return	O
pid	int
;	O
}	O
typedef	O
struct	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
Filter	struct
;	O
struct	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
{	O
struct	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
char	O
*	O
name	*(char)
;	O
int	O
line_num	int
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
char	O
*	O
errfile	*(char)
;	O
struct	O
{	O
char	O
*	O
input_fmt	*(char)
;	O
int	O
wait_reply	int
;	O
int	O
on_fail	int
;	O
}	O
descr	array(struct(*(char),int,int))
[	O
FILTER_MAX	int
]	O
;	O
pid_t	int
pid	int
;	O
size_t	long
lines_input	long
;	O
size_t	long
lines_output	long
;	O
int	O
input	*(void)
;	O
int	O
output	*(*(void))
;	O
}	O
;	O
static	O
grad_symtab_t	struct(int,int,int,*(*(struct(*(struct`),*(char)))),*(()->(int)))
*	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
;	O
struct	O
cleanup_info	struct(int,int)
{	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
}	O
;	O
static	O
int	O
filter_cleanup_proc	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
(	O
void	O
*	O
ptr	*(*(void))
,	O
grad_symbol_t	struct
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
)	O
{	O
struct	O
cleanup_info	struct(int,int)
*	O
info	*(struct(int,int))
=	O
ptr	*(*(void))
;	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
=	O
(	O
Filter	struct
*	O
)	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
==	O
info	*(struct(int,int))
->	O
pid	int
)	O
{	O
static	O
char	O
buffer	*(char)
[	O
512	int
]	O
;	O
format_exit_status	(*(char),int,int)->(void)
(	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
,	O
info	*(struct(int,int))
->	O
status	int
)	O
;	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"filter %s (pid %d) %s (in: %u, out: %u)"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
,	O
buffer	*(char)
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_input	long
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_output	long
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
=	O
0	int
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
filter_cleanup	(int,int)->(void)
(	O
pid_t	int
pid	int
,	O
int	O
status	int
)	O
{	O
struct	O
cleanup_info	struct(int,int)
info	*(struct(int,int))
;	O
info	*(struct(int,int))
.	O
pid	int
=	O
pid	int
;	O
info	*(struct(int,int))
.	O
status	int
=	O
status	int
;	O
grad_symtab_iterate	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*((*(void),*(struct(*`,*`)))->(int)),*(void))->(void)
(	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
filter_cleanup_proc	(*(void),*(struct(*(struct(*`,*`)),*(char))))->(int)
,	O
&	O
info	*(struct(int,int))
)	O
;	O
}	O
void	O
filter_close	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(void)
(	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
{	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
==	O
-	O
1	int
)	O
return	O
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
input	*(void)
>=	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
input	*(void)
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
input	*(void)
=	O
-	O
1	int
;	O
}	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
output	*(*(void))
>=	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
output	*(*(void))
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
output	*(*(void))
=	O
-	O
1	int
;	O
}	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
>	O
0	int
)	O
{	O
kill	(int,int)->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
,	O
SIGTERM	int
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
=	O
0	int
;	O
}	O
}	O
void	O
filter_kill	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(void)
(	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
{	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
==	O
0	int
)	O
return	O
;	O
kill	(int,int)->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
,	O
SIGKILL	int
)	O
;	O
}	O
static	O
Filter	struct
*	O
filter_open	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(int))->(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))
(	O
char	O
*	O
name	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
int	O
type	enum(int,int,int,int)
,	O
int	O
*	O
errp	*(*(char))
)	O
{	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
=	O
grad_sym_lookup	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char))->(*(void))
(	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
{	O
grad_log_req	(int,*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
_	O
(	O
"filter %s is not declared"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
*	O
errp	*(*(char))
=	O
-	O
1	int
;	O
return	O
NULL	O
;	O
}	O
*	O
errp	*(*(char))
=	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
type	enum(int,int,int,int)
]	O
.	O
on_fail	int
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
&&	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
<=	O
0	int
)	O
{	O
int	O
pipe	(array(int))->(int)
[	O
2	int
]	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
=	O
radius_run_filter	(int,*(*(char)),*(char),*(int))->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
argc	int
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
argv	*(*(char))
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
errfile	*(char)
,	O
pipe	(array(int))->(int)
)	O
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
<=	O
0	int
)	O
{	O
grad_log_req	(int,*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
_	O
(	O
"cannot run filter %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
=	O
NULL	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
wait_reply	int
&&	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
wait_reply	int
)	O
{	O
close	*((*(void))->(int))
(	O
pipe	(array(int))->(int)
[	O
0	int
]	O
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
input	*(void)
=	O
-	O
1	int
;	O
}	O
else	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
input	*(void)
=	O
pipe	(array(int))->(int)
[	O
0	int
]	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
output	*(*(void))
=	O
pipe	(array(int))->(int)
[	O
1	int
]	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_input	long
=	O
0	int
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_output	long
=	O
0	int
;	O
}	O
}	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
&&	O
kill	(int,int)->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
,	O
0	int
)	O
)	O
{	O
grad_log_req	(int,*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
_	O
(	O
"filter %s"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
filter_close	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
=	O
NULL	O
;	O
}	O
return	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
;	O
}	O
char	O
*	O
filter_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(*(char))
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
char	O
*	O
fmt	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
return	O
util_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(*(char))
(	O
sp	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
fmt	*(char)
,	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
->	O
request	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
}	O
static	O
int	O
filter_write	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(int)
(	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
,	O
char	O
*	O
fmt	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
int	O
rc	int
,	O
length	short
;	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
stack	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
;	O
char	O
*	O
str	*(char)
;	O
if	O
(	O
!	O
fmt	*(char)
)	O
return	O
-	O
1	int
;	O
obstack_init	O
(	O
&	O
stack	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
)	O
;	O
str	*(char)
=	O
filter_xlate	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(*(char))
(	O
&	O
stack	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
,	O
fmt	*(char)
,	O
radreq	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
;	O
if	O
(	O
!	O
str	*(char)
)	O
{	O
rc	int
=	O
length	short
=	O
0	int
;	O
}	O
else	O
{	O
char	O
nl	int
=	O
'\n'	O
;	O
length	short
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s < \"%s\""	*(char)
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
str	*(char)
)	O
;	O
rc	int
=	O
write	*((*(void),*(char),long)->(long))
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
output	*(*(void))
,	O
str	*(char)
,	O
length	short
)	O
;	O
if	O
(	O
rc	int
==	O
length	short
)	O
{	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
output	*(*(void))
,	O
&	O
nl	int
,	O
1	int
)	O
==	O
1	int
)	O
rc	int
++	O
;	O
}	O
}	O
obstack_free	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void))->(void)
(	O
&	O
stack	struct(long,*(struct(*(char),*(struct(*`,*`,array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*`,*`,array(char))))),*((*(void),*(struct(*`,*`,array(char))))->(void)),*(void),int,int,int)
,	O
NULL	O
)	O
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_output	long
++	O
;	O
return	O
rc	int
!=	O
length	short
+	O
1	int
;	O
}	O
static	O
int	O
filter_read	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),int,*(char),long)->(int)
(	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
,	O
int	O
type	enum(int,int,int,int)
,	O
char	O
*	O
buffer	*(char)
,	O
size_t	long
buflen	int
)	O
{	O
int	O
rc	int
;	O
int	O
rbytes	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
rc	int
=	O
-	O
1	int
;	O
if	O
(	O
rbytes	int
>=	O
buflen	int
-	O
1	int
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
break	O
;	O
}	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
input	*(void)
,	O
buffer	*(char)
+	O
rbytes	int
,	O
1	int
)	O
!=	O
1	int
)	O
{	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
continue	O
;	O
break	O
;	O
}	O
rbytes	int
++	O
;	O
if	O
(	O
buffer	*(char)
[	O
rbytes	int
-	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
rc	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
buffer	*(char)
[	O
rbytes	int
]	O
=	O
0	int
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_input	long
++	O
;	O
return	O
rbytes	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
filter_auth	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
*	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
;	O
int	O
rc	int
=	O
-	O
1	int
;	O
int	O
err	long
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
=	O
filter_open	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(int))->(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))
(	O
name	*(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
R_AUTH	int
,	O
&	O
err	long
)	O
;	O
if	O
(	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
return	O
err	long
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
==	O
-	O
1	int
)	O
rc	int
=	O
err	long
;	O
else	O
if	O
(	O
filter_write	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
input_fmt	*(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
)	O
rc	int
=	O
err	long
;	O
else	O
if	O
(	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
wait_reply	int
)	O
rc	int
=	O
0	int
;	O
else	O
{	O
int	O
status	int
;	O
char	O
buffer	*(char)
[	O
1024	int
]	O
;	O
status	int
=	O
filter_read	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),int,*(char),long)->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
,	O
R_AUTH	int
,	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
)	O
;	O
if	O
(	O
status	int
<=	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"reading from filter %s"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
)	O
;	O
filter_close	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
;	O
rc	int
=	O
err	long
;	O
}	O
else	O
if	O
(	O
isdigit	(int)->(int)
(	O
buffer	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
char	O
*	O
ptr	*(*(void))
;	O
grad_avp_t	struct(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char))))
*	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
char	O
*	O
errp	*(*(char))
;	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s > \"%s\""	*(char)
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
buffer	*(char)
)	O
;	O
rc	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
buffer	*(char)
,	O
&	O
ptr	*(*(void))
,	O
0	int
)	O
;	O
if	O
(	O
userparse	(*(char),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(char)))->(int)
(	O
ptr	*(*(void))
,	O
&	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
errp	*(*(char))
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"<stdout of %s>:%d: %s"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
lines_output	long
,	O
errp	*(*(char))
)	O
;	O
grad_avl_free	(*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))->(void)
(	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
else	O
grad_avl_merge	(*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))),*(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))->(void)
(	O
reply_pairs	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
&	O
vp	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
}	O
else	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"filter %s (auth): bad output: %s"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
buffer	*(char)
)	O
;	O
rc	int
=	O
err	long
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
int	O
filter_acct	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(int)
(	O
char	O
*	O
name	*(char)
,	O
radiusd_request_t	struct(*(struct(int,short,char,char,array(char),*(char),*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))),*(char),*(struct),*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int,int,int,int,*(char),array(char),int,*(struct(*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*`)))))
*	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
{	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
;	O
int	O
rc	int
=	O
-	O
1	int
;	O
int	O
err	long
;	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
=	O
filter_open	(*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))),int,*(int))->(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))
(	O
name	*(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
,	O
R_ACCT	int
,	O
&	O
err	long
)	O
;	O
if	O
(	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
return	O
err	long
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
==	O
-	O
1	int
)	O
rc	int
=	O
err	long
;	O
else	O
if	O
(	O
filter_write	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),*(struct(*(struct(int,short,char,char,array(char),*`,*`)),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)),*(char),*(struct),*(struct(array(char),*`,*`)),int,int,int,int,*(char),array(char),int,*(struct(*`,*`,int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union`)))))->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
input_fmt	*(char)
,	O
req	*(struct(int,short,char,char,array(char),*(char),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`)))))
)	O
)	O
rc	int
=	O
err	long
;	O
else	O
if	O
(	O
!	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
wait_reply	int
)	O
rc	int
=	O
0	int
;	O
else	O
{	O
int	O
status	int
;	O
char	O
buffer	*(char)
[	O
1024	int
]	O
;	O
status	int
=	O
filter_read	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),int,*(char),long)->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
,	O
R_ACCT	int
,	O
buffer	*(char)
,	O
sizeof	O
buffer	*(char)
)	O
;	O
if	O
(	O
status	int
<=	O
0	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"reading from filter %s"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
)	O
;	O
rc	int
=	O
err	long
;	O
filter_close	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
;	O
}	O
else	O
if	O
(	O
isdigit	(int)->(int)
(	O
buffer	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
char	O
*	O
ptr	*(*(void))
;	O
GRAD_DEBUG2	O
(	O
1	int
,	O
"%s > \"%s\""	*(char)
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
buffer	*(char)
)	O
;	O
rc	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
buffer	*(char)
,	O
&	O
ptr	*(*(void))
,	O
0	int
)	O
;	O
if	O
(	O
!	O
isspace	(int)->(int)
(	O
*	O
ptr	*(*(void))
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"filter %s (acct): bad output: %s"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
buffer	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
else	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"filter %s (acct): bad output: %s"	*(char)
)	O
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
name	*(char)
,	O
buffer	*(char)
)	O
;	O
rc	int
=	O
err	long
;	O
}	O
}	O
return	O
rc	int
;	O
}	O
static	O
struct	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
;	O
static	O
int	O
free_symbol_entry	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(int)
(	O
Filter	struct
*	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
{	O
grad_free	(*(void))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
input_fmt	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
input_fmt	*(char)
)	O
;	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
argc	int
,	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
argv	*(*(char))
)	O
;	O
grad_free	(*(void))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
errfile	*(char)
)	O
;	O
if	O
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
->	O
pid	int
>	O
0	int
)	O
filter_close	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(void)
(	O
filter	*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
filters_stmt_term	(int,*(void),*(void))->(int)
(	O
int	O
finish	int
,	O
void	O
*	O
block_data	*(void)
,	O
void	O
*	O
handler_data	*(void)
)	O
{	O
if	O
(	O
!	O
finish	int
)	O
{	O
if	O
(	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
grad_symtab_clear	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))->(void)
(	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
)	O
;	O
else	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
=	O
grad_symtab_create	(int,*(()->(int)))->(*(struct(int,int,int,*(*(struct`)),*(()->(int)))))
(	O
sizeof	O
(	O
Filter	struct
)	O
,	O
free_symbol_entry	(*(struct(*(struct(*`,*`,int,int,*`,*`,array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)))->(int)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_stmt_handler	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
(	O
int	O
argc	int
,	O
cfg_value_t	struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))
*	O
argv	*(*(char))
,	O
void	O
*	O
block_data	*(void)
,	O
void	O
*	O
handler_data	*(void)
)	O
{	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
cfg_argc_error	(int)->(void)
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
type	enum(int,int,int,int)
!=	O
CFG_STRING	int
)	O
{	O
cfg_type_error	(int)->(void)
(	O
CFG_STRING	int
)	O
;	O
return	O
0	int
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
,	O
0	int
,	O
sizeof	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
)	O
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
line_num	int
=	O
cfg_line_num	int
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
name	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
errfile	*(char)
=	O
NULL	O
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
wait_reply	int
=	O
1	int
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
wait_reply	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
filter_stmt_end	(*(void),*(void))->(int)
(	O
void	O
*	O
block_data	*(void)
,	O
void	O
*	O
handler_data	*(void)
)	O
{	O
if	O
(	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argc	int
)	O
{	O
Filter	struct
*	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
=	O
grad_sym_lookup_or_install	(*(struct(int,int,int,*(*(struct`)),*(()->(int)))),*(char),int)->(*(void))
(	O
filter_tab	*(struct(int,int,int,*(*(struct(*`,*`))),*(()->(int))))
,	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
name	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
argc	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"%s:%d: filter already declared at %s:%d"	*(char)
)	O
,	O
cfg_filename	*(char)
,	O
cfg_line_num	int
,	O
cfg_filename	*(char)
,	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
line_num	int
)	O
;	O
return	O
0	int
;	O
}	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
line_num	int
=	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
line_num	int
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
argc	int
=	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argc	int
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
argv	*(*(char))
=	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argv	*(*(char))
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
input_fmt	*(char)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
input_fmt	*(char)
)	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
input_fmt	*(char)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
input_fmt	*(char)
)	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
wait_reply	int
=	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
wait_reply	int
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
wait_reply	int
=	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
wait_reply	int
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
on_fail	int
=	O
!	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
on_fail	int
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
on_fail	int
=	O
!	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
on_fail	int
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
errfile	*(char)
=	O
grad_estrdup	(*(char))->(*(char))
(	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
errfile	*(char)
)	O
;	O
sym	*(*(struct(*(struct(*`,*`)),*(char))))
->	O
pid	int
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
exec_path_handler	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
(	O
int	O
argc	int
,	O
cfg_value_t	struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))
*	O
argv	*(*(char))
,	O
void	O
*	O
block_data	*(void)
,	O
void	O
*	O
handler_data	*(void)
)	O
{	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
cfg_argc_error	(int)->(void)
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
type	enum(int,int,int,int)
!=	O
CFG_STRING	int
)	O
{	O
cfg_type_error	(int)->(void)
(	O
CFG_STRING	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
grad_argcv_get	(*(char),*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
,	O
""	*(char)
,	O
NULL	O
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argc	int
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argv	*(*(char))
)	O
)	O
{	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argc	int
,	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argv	*(*(char))
)	O
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
argc	int
=	O
0	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
error_log_handler	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
(	O
int	O
argc	int
,	O
cfg_value_t	struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))
*	O
argv	*(*(char))
,	O
void	O
*	O
block_data	*(void)
,	O
void	O
*	O
handler_data	*(void)
)	O
{	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
cfg_argc_error	(int)->(void)
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
type	enum(int,int,int,int)
!=	O
CFG_STRING	int
)	O
{	O
cfg_type_error	(int)->(void)
(	O
CFG_STRING	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
,	O
"none"	*(char)
)	O
==	O
0	int
)	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
errfile	*(char)
=	O
NULL	O
;	O
else	O
if	O
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
[	O
0	int
]	O
==	O
'/'	O
)	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
errfile	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
;	O
else	O
{	O
char	O
*	O
p	*(struct)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_log_dir	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
)	O
;	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
errfile	*(char)
=	O
cfg_malloc	(long,*((*(void))->(void)))->(*(void))
(	O
strlen	(*(char))->(long)
(	O
p	*(struct)
)	O
+	O
1	int
,	O
NULL	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
errfile	*(char)
,	O
p	*(struct)
)	O
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_store_format_ptr	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
(	O
int	O
argc	int
,	O
cfg_value_t	struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))
*	O
argv	*(*(char))
,	O
void	O
*	O
block_data	*(void)
,	O
void	O
*	O
handler_data	*(void)
)	O
{	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
cfg_argc_error	(int)->(void)
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
argv	*(*(char))
[	O
1	int
]	O
.	O
type	enum(int,int,int,int)
!=	O
CFG_STRING	int
)	O
{	O
cfg_type_error	(int)->(void)
(	O
CFG_STRING	int
)	O
;	O
return	O
0	int
;	O
}	O
*	O
(	O
char	O
*	O
*	O
)	O
handler_data	*(void)
=	O
argv	*(*(char))
[	O
1	int
]	O
.	O
v	union(*(char),int,long,int,struct(int,int),char,struct(int,int))
.	O
string	*(*(char))
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
cfg_stmt	struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct`),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct`),*((*`,*`)->(int)))),*((*(void),*(void))->(int)))),*((*(void),*(void))->(int)))
filter_auth_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
"input-format"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
_store_format_ptr	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
input_fmt	*(char)
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"wait-reply"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
cfg_get_boolean	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
wait_reply	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"success-on-failure"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
cfg_get_boolean	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_AUTH	int
]	O
.	O
on_fail	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
cfg_stmt	struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct`),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct`),*((*`,*`)->(int)))),*((*(void),*(void))->(int)))),*((*(void),*(void))->(int)))
filter_acct_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
"input-format"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
_store_format_ptr	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
input_fmt	*(char)
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"wait-reply"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
cfg_get_boolean	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
wait_reply	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"success-on-failure"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
cfg_get_boolean	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
&	O
filter_symbol	struct(*(struct(*(struct(*(struct`),*(char),int,int,*(*`),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)),*(char),int,int,*(*(char)),*(char),array(struct(*(char),int,int)),int,long,long,int,int)
.	O
descr	array(struct(*(char),int,int))
[	O
R_ACCT	int
]	O
.	O
on_fail	int
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
cfg_stmt	struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct`),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct`),*((*`,*`)->(int)))),*((*(void),*(void))->(int)))),*((*(void),*(void))->(int)))
filter_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
"exec-path"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
exec_path_handler	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"error-log"	*(char)
,	O
CS_STMT	int
,	O
NULL	O
,	O
error_log_handler	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
,	O
{	O
"auth"	*(char)
,	O
CS_BLOCK	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
filter_auth_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
,	O
NULL	O
}	O
,	O
{	O
"acct"	*(char)
,	O
CS_BLOCK	int
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
filter_acct_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
,	O
NULL	O
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
struct	O
cfg_stmt	struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union(*`,int,long,int,struct`,char,struct`))),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct`),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct`),*((*`,*`)->(int)))),*((*(void),*(void))->(int)))),*((*(void),*(void))->(int)))
filters_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
"filter"	*(char)
,	O
CS_BLOCK	int
,	O
NULL	O
,	O
filter_stmt_handler	(int,*(struct(int,union(*(char),int,long,int,struct(int,int),char,struct(int,int)))),*(void),*(void))->(int)
,	O
NULL	O
,	O
filter_stmt	array(struct(*(char),int,*((int,*(void),*(void))->(int)),*((int,*(struct(int,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),int,*((int,*`,*`)->(int)),*((int,*`,*`,*`)->(int)),*(void),*(struct(*`,int,*`,*`,*`,*`,*`)),*((*`,*`)->(int)))),*((*(void),*(void))->(int))))
,	O
filter_stmt_end	(*(void),*(void))->(int)
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
