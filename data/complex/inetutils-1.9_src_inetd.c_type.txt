bool	bool
debug	bool
=	O
false	int
;	O
int	O
nsock	int
,	O
maxsock	int
;	O
fd_set	struct(array(long))
allsock	struct(array(long))
;	O
int	O
options	*(struct(*(char),int,*(char),int,*(char),int))
;	O
int	O
timingout	int
;	O
int	O
toomany	int
=	O
TOOMANY	int
;	O
char	O
*	O
*	O
Argv	*(*(char))
;	O
char	O
*	O
LastArg	*(char)
;	O
char	O
*	O
*	O
config_files	*(*(char))
;	O
static	O
bool	bool
env_option	bool
=	O
false	int
;	O
static	O
bool	bool
resolve_option	bool
=	O
false	int
;	O
static	O
bool	bool
pidfile_option	bool
=	O
true	int
;	O
static	O
const	O
char	O
*	O
pid_file	*(char)
=	O
PATH_INETDPID	O
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"[CONF-FILE [CONF-DIR]]..."	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Internet super-server."	*(char)
;	O
enum	O
{	O
OPT_ENVIRON	int
=	O
256	int
,	O
OPT_RESOLVE	int
}	O
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Alain Magloire"	*(char)
,	O
"Alfred M. Szmidt"	*(char)
,	O
"Debarshi Ray"	*(char)
,	O
"Jakob 'sparky' Kaivo"	*(char)
,	O
"Jeff Bailey"	*(char)
,	O
"Jeroen Dekkers"	*(char)
,	O
"Marcus Brinkmann"	*(char)
,	O
"Sergey Poznyakoff"	*(char)
,	O
"others"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
0	int
,	O
"turn on debugging, run in foreground mode"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"environment"	*(char)
,	O
OPT_ENVIRON	int
,	O
NULL	O
,	O
0	int
,	O
"pass local and remote socket information in environment variables"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"pidfile"	*(char)
,	O
'p'	O
,	O
"PIDFILE"	*(char)
,	O
OPTION_ARG_OPTIONAL	int
,	O
"override pidfile (default: \""	*(char)
PATH_INETDPID	O
"\")"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"rate"	*(char)
,	O
'R'	O
,	O
"NUMBER"	*(char)
,	O
0	int
,	O
"maximum invocation rate (per minute)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"resolve"	*(char)
,	O
OPT_RESOLVE	int
,	O
NULL	O
,	O
0	int
,	O
"resolve IP addresses when setting environment variables "	*(char)
"(see --environment)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
char	O
*	O
p	*(char)
;	O
int	O
number	int
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'd'	O
:	O
debug	bool
=	O
true	int
;	O
options	*(struct(*(char),int,*(char),int,*(char),int))
|=	O
SO_DEBUG	int
;	O
break	O
;	O
case	O
OPT_ENVIRON	int
:	O
env_option	bool
=	O
true	int
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
arg	*(char)
&&	O
strlen	(*(char))->(long)
(	O
arg	*(char)
)	O
)	O
pid_file	*(char)
=	O
arg	*(char)
;	O
else	O
pidfile_option	bool
=	O
false	int
;	O
break	O
;	O
case	O
'R'	O
:	O
number	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
p	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
number	int
<	O
1	int
||	O
*	O
p	*(char)
)	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"-R %s: bad value for service invocation rate"	*(char)
,	O
arg	*(char)
)	O
;	O
else	O
toomany	int
=	O
number	int
;	O
break	O
;	O
case	O
OPT_RESOLVE	int
:	O
resolve_option	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
{	O
const	O
char	O
*	O
se_file	*(char)
;	O
int	O
se_line	int
;	O
char	O
*	O
se_node	*(char)
;	O
char	O
*	O
se_service	*(char)
;	O
int	O
se_socktype	int
;	O
char	O
*	O
se_proto	*(char)
;	O
pid_t	int
se_wait	int
;	O
unsigned	O
se_max	int
;	O
short	O
se_checked	short
;	O
char	O
*	O
se_user	*(char)
;	O
struct	O
biltin	struct(*(char),int,short,short,*((int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))->(void)))
*	O
se_bi	*(struct)
;	O
char	O
*	O
se_server	*(char)
;	O
char	O
*	O
*	O
se_argv	*(*(char))
;	O
size_t	long
se_argc	long
;	O
int	O
se_fd	int
;	O
int	O
se_type	int
;	O
sa_family_t	short
se_family	short
;	O
char	O
se_v4mapped	char
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
se_ctrladdr	struct(short,array(char),long)
;	O
socklen_t	int
se_addrlen	int
;	O
unsigned	O
se_refcnt	int
;	O
int	O
se_count	int
;	O
struct	O
timeval	struct(long,long)
se_time	struct(long,long)
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
}	O
*	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
void	O
chargen_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
chargen_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
daytime_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
daytime_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
discard_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
discard_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
echo_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
echo_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
machtime_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
machtime_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
void	O
tcpmux	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
struct	O
biltin	struct(*(char),int,short,short,*((int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))->(void)))
{	O
const	O
char	O
*	O
bi_service	*(char)
;	O
int	O
bi_socktype	int
;	O
short	O
bi_fork	short
;	O
short	O
bi_wait	short
;	O
void	O
(	O
*	O
bi_fn	*((int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))->(void))
)	O
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
;	O
}	O
biltins	array(struct(*(char),int,short,short,*((int,*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))->(void))))
[	O
]	O
=	O
{	O
{	O
"echo"	*(char)
,	O
SOCK_STREAM	int
,	O
1	int
,	O
0	int
,	O
echo_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"echo"	*(char)
,	O
SOCK_DGRAM	int
,	O
0	int
,	O
0	int
,	O
echo_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"discard"	*(char)
,	O
SOCK_STREAM	int
,	O
1	int
,	O
0	int
,	O
discard_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"discard"	*(char)
,	O
SOCK_DGRAM	int
,	O
0	int
,	O
0	int
,	O
discard_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"time"	*(char)
,	O
SOCK_STREAM	int
,	O
0	int
,	O
0	int
,	O
machtime_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"time"	*(char)
,	O
SOCK_DGRAM	int
,	O
0	int
,	O
0	int
,	O
machtime_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"daytime"	*(char)
,	O
SOCK_STREAM	int
,	O
0	int
,	O
0	int
,	O
daytime_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"daytime"	*(char)
,	O
SOCK_DGRAM	int
,	O
0	int
,	O
0	int
,	O
daytime_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"chargen"	*(char)
,	O
SOCK_STREAM	int
,	O
1	int
,	O
0	int
,	O
chargen_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"chargen"	*(char)
,	O
SOCK_DGRAM	int
,	O
0	int
,	O
0	int
,	O
chargen_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
"tcpmux"	*(char)
,	O
SOCK_STREAM	int
,	O
1	int
,	O
0	int
,	O
tcpmux	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
0	int
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
biltin	struct(*(char),int,short,short,*((int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))->(void)))
*	O
bi_lookup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,short,short,*((int,*`)->(void)))))
(	O
const	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
struct	O
biltin	struct(*(char),int,short,short,*((int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))->(void)))
*	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
;	O
for	O
(	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
=	O
biltins	array(struct(*(char),int,short,short,*((int,*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))->(void))))
;	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
->	O
bi_service	*(char)
;	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
++	O
)	O
if	O
(	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
->	O
bi_socktype	int
==	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
->	O
bi_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
==	O
0	int
)	O
return	O
bi	*(struct(*(char),int,short,short,*((int,*(struct`))->(void))))
;	O
return	O
NULL	O
;	O
}	O
void	O
signal_set_handler	(int,*(()->(void)))->(void)
(	O
int	O
signo	int
,	O
void	O
(	O
*	O
handler	*(()->(void))
)	O
(	O
)	O
)	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
char	O
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
0	int
,	O
sizeof	O
(	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
,	O
signo	int
)	O
;	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
SA_RESTART	int
;	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
handler	*(()->(void))
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
signo	int
,	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
}	O
void	O
signal_block	(*(struct(array(long))))->(void)
(	O
SIGSTATUS	O
*	O
old_status	*(struct(array(long)))
)	O
{	O
sigset_t	struct(array(long))
sigs	struct(array(long))
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
sigs	struct(array(long))
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sigs	struct(array(long))
,	O
SIGCHLD	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sigs	struct(array(long))
,	O
SIGHUP	int
)	O
;	O
sigaddset	(*(struct(array(long))),int)->(int)
(	O
&	O
sigs	struct(array(long))
,	O
SIGALRM	int
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
sigs	struct(array(long))
,	O
old_status	*(struct(array(long)))
)	O
;	O
}	O
void	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
SIGSTATUS	O
*	O
status	int
)	O
{	O
if	O
(	O
status	int
)	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
status	int
,	O
0	int
)	O
;	O
else	O
{	O
sigset_t	struct(array(long))
empty	struct(array(long))
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
empty	struct(array(long))
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
empty	struct(array(long))
,	O
0	int
)	O
;	O
}	O
}	O
void	O
run_service	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
ctrl	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
buf	array(char)
[	O
50	int
]	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
)	O
{	O
(	O
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
->	O
bi_fn	*((int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))->(void))
)	O
(	O
ctrl	int
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d execl %s\n"	*(char)
,	O
getpid	()->(int)
(	O
)	O
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
)	O
;	O
dup2	(int,int)->(int)
(	O
ctrl	int
,	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
ctrl	int
)	O
;	O
dup2	(int,int)->(int)
(	O
0	int
,	O
1	int
)	O
;	O
dup2	(int,int)->(int)
(	O
0	int
,	O
2	int
)	O
;	O
if	O
(	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s/%s: %s: No such user"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
)	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
!=	O
SOCK_STREAM	int
)	O
recv	(int,*(void),long,int)->(long)
(	O
0	int
,	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
0	int
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
)	O
{	O
if	O
(	O
setgid	(int)->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s: can't set gid %d: %m"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
initgroups	(*(char),int)->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
)	O
;	O
if	O
(	O
setuid	(int)->(int)
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
)	O
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s: can't set uid %d: %m"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
execv	(*(char),array(*(char)))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
)	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
!=	O
SOCK_STREAM	int
)	O
recv	(int,*(void),long,int)->(long)
(	O
0	int
,	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
0	int
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"cannot execute %s: %m"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
void	O
reapchild	(int)->(void)
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
int	O
status	int
;	O
pid_t	int
pid	int
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
for	O
(	O
;	O
;	O
)	O
{	O
pid	int
=	O
wait3	(*(int),int,*(struct))->(int)
(	O
&	O
status	int
,	O
WNOHANG	int
,	O
NULL	O
)	O
;	O
if	O
(	O
pid	int
<=	O
0	int
)	O
break	O
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d reaped, status %#x\n"	*(char)
,	O
pid	int
,	O
status	int
)	O
;	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
==	O
pid	int
)	O
{	O
if	O
(	O
status	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"%s: exit status 0x%x"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
,	O
status	int
)	O
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"restored %s, fd %d\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
)	O
;	O
FD_SET	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
&	O
allsock	struct(array(long))
)	O
;	O
nsock	int
++	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
1	int
;	O
}	O
}	O
}	O
char	O
*	O
newstr	(*(char))->(*(char))
(	O
const	O
char	O
*	O
cp	*(char)
)	O
{	O
char	O
*	O
s	int
;	O
if	O
(	O
(	O
s	int
=	O
strdup	(*(char))->(*(char))
(	O
cp	*(char)
?	O
cp	*(char)
:	O
""	*(char)
)	O
)	O
)	O
return	O
s	int
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"strdup: %m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
void	O
dupmem	(*(*(void)),long)->(void)
(	O
void	O
*	O
*	O
pptr	*(*(void))
,	O
size_t	long
size	long
)	O
{	O
void	O
*	O
ptr	*(void)
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
ptr	*(void)
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"dupmem: %m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ptr	*(void)
,	O
*	O
pptr	*(*(void))
,	O
size	long
)	O
;	O
*	O
pptr	*(*(void))
=	O
ptr	*(void)
;	O
}	O
void	O
dupstr	(*(*(char)))->(void)
(	O
char	O
*	O
*	O
pstr	*(*(char))
)	O
{	O
if	O
(	O
*	O
pstr	*(*(char))
)	O
dupmem	(*(*(void)),long)->(void)
(	O
(	O
void	O
*	O
*	O
)	O
pstr	*(*(char))
,	O
strlen	(*(char))->(long)
(	O
*	O
pstr	*(*(char))
)	O
+	O
1	int
)	O
;	O
}	O
void	O
print_service	(*(char),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
const	O
char	O
*	O
action	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s:%d: %s: %s:%s proto=%s, wait=%d, max=%u, user=%s builtin=%s server=%s\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_file	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_line	int
,	O
action	int
,	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
?	O
(	O
ISMUXPLUS	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
?	O
"tcpmuxplus"	*(char)
:	O
"tcpmux"	*(char)
)	O
:	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
?	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
:	O
"*"	*(char)
)	O
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_max	int
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
?	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
->	O
bi_service	*(char)
:	O
"no"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
)	O
;	O
}	O
int	O
setup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(int)
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
int	O
err	long
;	O
int	O
on	int
=	O
1	int
;	O
tryagain	O
:	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
=	O
socket	(int,int,int)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
,	O
0	int
)	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EAFNOSUPPORT	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
==	O
AF_INET6	O
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
=	O
AF_INET	O
;	O
goto	O
tryagain	O
;	O
}	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"socket failed on %s/%s: %s\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s/%s: socket: %m"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
==	O
AF_INET6	O
)	O
{	O
int	O
val	array(int)
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
?	O
0	int
:	O
1	int
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
IPPROTO_IPV6	int
,	O
IPV6_V6ONLY	int
,	O
(	O
char	O
*	O
)	O
&	O
val	array(int)
,	O
sizeof	O
(	O
val	array(int)
)	O
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"setsockopt (IPV6_V6ONLY): %m"	*(char)
)	O
;	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
"tcp"	*(char)
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
options	*(struct(*(char),int,*(char),int,*(char),int))
&	O
SO_DEBUG	int
)	O
)	O
{	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
SOL_SOCKET	int
,	O
SO_DEBUG	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"setsockopt (SO_DEBUG): %m"	*(char)
)	O
;	O
}	O
err	long
=	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
SOL_SOCKET	int
,	O
SO_REUSEADDR	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
;	O
if	O
(	O
err	long
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"setsockopt (SO_REUSEADDR): %m"	*(char)
)	O
;	O
err	long
=	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_ctrladdr	struct(short,array(char),long)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_addrlen	int
)	O
;	O
if	O
(	O
err	long
<	O
0	int
)	O
{	O
if	O
(	O
(	O
errno	O
==	O
EADDRNOTAVAIL	int
||	O
errno	O
==	O
EAFNOSUPPORT	int
)	O
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
==	O
AF_INET6	O
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
=	O
AF_INET	O
;	O
close	*((*(void))->(int))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
)	O
;	O
goto	O
tryagain	O
;	O
}	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"bind failed on %s/%s: %s\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s/%s: bind: %m"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
)	O
;	O
close	*((*(void))->(int))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
=	O
-	O
1	int
;	O
if	O
(	O
!	O
timingout	int
)	O
{	O
timingout	int
=	O
1	int
;	O
alarm	(int)->(int)
(	O
RETRYTIME	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
servent_setup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_checked	short
=	O
1	int
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
==	O
-	O
1	int
&&	O
setup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
==	O
SOCK_STREAM	int
)	O
listen	(int,int)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
10	int
)	O
;	O
FD_SET	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
&	O
allsock	struct(array(long))
)	O
;	O
nsock	int
++	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
>	O
maxsock	int
)	O
maxsock	int
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"registered %s on %d\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
)	O
;	O
}	O
}	O
void	O
retry	(int)->(void)
(	O
int	O
signo	int
_GL_UNUSED_PARAMETER	O
)	O
{	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
timingout	int
=	O
0	int
;	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
==	O
-	O
1	int
&&	O
!	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
setup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
void	O
close_sep	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
>=	O
0	int
)	O
{	O
nsock	int
--	O
;	O
FD_CLR	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
&	O
allsock	struct(array(long))
)	O
;	O
close	*((*(void))->(int))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
=	O
-	O
1	int
;	O
}	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_count	int
=	O
0	int
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
>	O
1	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
1	int
;	O
}	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
enter	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
cp	*(char)
)	O
{	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
SIGSTATUS	O
sigstatus	struct(array(long))
;	O
int	O
i	int
;	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_ctrladdr	struct(short,array(char),long)
,	O
&	O
cp	*(char)
->	O
se_ctrladdr	struct(short,array(char),long)
,	O
sizeof	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_ctrladdr	struct(short,array(char),long)
)	O
)	O
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
cp	*(char)
->	O
se_service	*(char)
)	O
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
cp	*(char)
->	O
se_proto	*(char)
)	O
==	O
0	int
&&	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
==	O
ISMUX	O
(	O
cp	*(char)
)	O
)	O
break	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
!=	O
0	int
)	O
{	O
signal_block	(*(struct(array(long))))->(void)
(	O
&	O
sigstatus	struct(array(long))
)	O
;	O
if	O
(	O
cp	*(char)
->	O
se_bi	*(struct)
==	O
0	int
&&	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
==	O
1	int
||	O
cp	*(char)
->	O
se_wait	int
==	O
0	int
)	O
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
cp	*(char)
->	O
se_wait	int
;	O
if	O
(	O
cp	*(char)
->	O
se_user	*(char)
)	O
SWAP	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
,	O
cp	*(char)
->	O
se_user	*(char)
)	O
;	O
if	O
(	O
cp	*(char)
->	O
se_server	*(char)
)	O
SWAP	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
,	O
cp	*(char)
->	O
se_server	*(char)
)	O
;	O
argcv_free	(int,*(*(char)))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
=	O
cp	*(char)
->	O
se_argc	long
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
=	O
cp	*(char)
->	O
se_argv	*(*(char))
;	O
cp	*(char)
->	O
se_argc	long
=	O
0	int
;	O
cp	*(char)
->	O
se_argv	*(*(char))
=	O
NULL	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_checked	short
=	O
1	int
;	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
&	O
sigstatus	struct(array(long))
)	O
;	O
if	O
(	O
debug	bool
)	O
print_service	(*(char),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
"REDO"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
return	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
}	O
if	O
(	O
debug	bool
)	O
print_service	(*(char),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
"ADD "	*(char)
,	O
cp	*(char)
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
==	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"Out of memory."	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
*	O
cp	*(char)
;	O
dupstr	(*(*(char)))->(void)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
)	O
;	O
dupstr	(*(*(char)))->(void)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
;	O
dupstr	(*(*(char)))->(void)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
)	O
;	O
dupstr	(*(*(char)))->(void)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
)	O
;	O
dupstr	(*(*(char)))->(void)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
)	O
;	O
dupmem	(*(*(void)),long)->(void)
(	O
(	O
void	O
*	O
*	O
)	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
*	O
sizeof	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
;	O
i	int
++	O
)	O
dupstr	(*(*(char)))->(void)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
=	O
-	O
1	int
;	O
signal_block	(*(struct(array(long))))->(void)
(	O
&	O
sigstatus	struct(array(long))
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
&	O
sigstatus	struct(array(long))
)	O
;	O
return	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
}	O
int	O
inetd_getaddrinfo	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))),int,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
,	O
int	O
proto	int
,	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
*	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
;	O
bool	bool
numeric_address	bool
=	O
false	int
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
&&	O
(	O
strspn	(*(char),*(char))->(long)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
,	O
IPV4_NUMCHARS	*(char)
)	O
==	O
strlen	(*(char))->(long)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
)	O
||	O
(	O
strchr	(*(char),int)->(*(char))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
,	O
':'	O
)	O
&&	O
strspn	(*(char),*(char))->(long)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
,	O
IPV6_NUMCHARS	*(char)
)	O
)	O
)	O
)	O
numeric_address	bool
=	O
true	int
;	O
else	O
if	O
(	O
debug	bool
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Resolving address: %s\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
)	O
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_flags	int
=	O
AI_PASSIVE	int
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
&&	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
!=	O
AF_INET	O
)	O
)	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_flags	int
|=	O
AI_V4MAPPED	int
;	O
if	O
(	O
numeric_address	bool
)	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_flags	int
|=	O
AI_NUMERICHOST	int
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_family	int
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_socktype	int
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_protocol	int
=	O
proto	int
;	O
return	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
}	O
int	O
expand_enter	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(int)
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
int	O
err	long
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
*	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
*	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
struct	O
protoent	struct(*(char),*(*(char)),int)
*	O
proto	int
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
cp	*(char)
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
"tcp"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
proto	int
=	O
getprotobyname	(*(char))->(*(struct(*(char),*(*(char)),int)))
(	O
"tcp"	*(char)
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
"udp"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
proto	int
=	O
getprotobyname	(*(char))->(*(struct(*(char),*(*(char)),int)))
(	O
"udp"	*(char)
)	O
;	O
else	O
proto	int
=	O
getprotobyname	(*(char))->(*(struct(*(char),*(*(char)),int)))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
)	O
;	O
if	O
(	O
!	O
proto	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s: Unknown protocol"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
err	long
=	O
inetd_getaddrinfo	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))),int,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
,	O
proto	int
->	O
p_proto	int
,	O
&	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
if	O
(	O
err	long
==	O
EAI_ADDRFAMILY	O
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
==	O
AF_INET6	O
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
=	O
AF_INET	O
;	O
err	long
=	O
inetd_getaddrinfo	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))),int,*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
,	O
proto	int
->	O
p_proto	int
,	O
&	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
}	O
if	O
(	O
err	long
)	O
{	O
const	O
char	O
*	O
errmsg	*(char)
;	O
if	O
(	O
err	long
==	O
EAI_SYSTEM	O
)	O
errmsg	*(char)
=	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
;	O
else	O
errmsg	*(char)
=	O
gai_strerror	(int)->(*(char))
(	O
err	long
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s/%s: getaddrinfo: %s"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
errmsg	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
;	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
!=	O
NULL	O
;	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_ctrladdr	struct(short,array(char),long)
,	O
0	int
,	O
sizeof	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_ctrladdr	struct(short,array(char),long)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_ctrladdr	struct(short,array(char),long)
,	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_addrlen	int
=	O
rp	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
;	O
cp	*(char)
=	O
enter	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
servent_setup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
cp	*(char)
)	O
;	O
}	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
global_serv_node	*(char)
;	O
char	O
*	O
serv_node	*(char)
;	O
size_t	long
serv_node_offset	long
;	O
char	O
*	O
linebuf	*(char)
=	O
NULL	O
;	O
size_t	long
linebufsize	long
=	O
0	int
;	O
FILE	struct
*	O
setconfig	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
return	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(char)
,	O
"r"	*(char)
)	O
;	O
}	O
void	O
endconfig	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
FILE	struct
*	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
void	O
freeconfig	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
cp	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
cp	*(char)
->	O
se_node	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(char)
->	O
se_service	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(char)
->	O
se_proto	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(char)
->	O
se_user	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(char)
->	O
se_server	*(char)
)	O
;	O
argcv_free	(int,*(*(char)))->(int)
(	O
cp	*(char)
->	O
se_argc	long
,	O
cp	*(char)
->	O
se_argv	*(*(char))
)	O
;	O
}	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
next_node_sep	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
if	O
(	O
serv_node	*(char)
)	O
{	O
size_t	long
i	int
=	O
strcspn	(*(char),*(char))->(long)
(	O
serv_node	*(char)
+	O
serv_node_offset	long
,	O
","	*(char)
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
=	O
malloc	(long)->(*(void))
(	O
i	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"malloc: %m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
,	O
serv_node	*(char)
+	O
serv_node_offset	long
,	O
i	int
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
[	O
i	int
]	O
=	O
0	int
;	O
serv_node_offset	long
+=	O
i	int
;	O
if	O
(	O
serv_node	*(char)
[	O
serv_node_offset	long
]	O
)	O
serv_node_offset	long
++	O
;	O
else	O
{	O
free	(*(void))->(void)
(	O
serv_node	*(char)
)	O
;	O
serv_node	*(char)
=	O
NULL	O
;	O
}	O
}	O
return	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
}	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
getconfigent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(long))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
FILE	struct
*	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
file	*(char)
,	O
size_t	long
*	O
line	*(char)
)	O
{	O
static	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
&	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
;	O
int	O
argc	int
=	O
0	int
;	O
size_t	long
i	int
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
NULL	O
;	O
char	O
*	O
node	*(char)
,	O
*	O
service	*(char)
;	O
static	O
char	O
TCPMUX_TOKEN	array(char)
[	O
]	O
=	O
"tcpmux/"	*(char)
;	O
if	O
(	O
serv_node	*(char)
)	O
return	O
next_node_sep	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
caddr_t	*(char)
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
,	O
0	int
,	O
sizeof	O
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
while	O
(	O
1	int
)	O
{	O
argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
freeconfig	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
(	O
caddr_t	*(char)
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
,	O
0	int
,	O
sizeof	O
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
do	O
{	O
ssize_t	long
n	long
=	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
linebuf	*(char)
,	O
&	O
linebufsize	long
,	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
n	long
<	O
0	int
)	O
return	O
0	int
;	O
else	O
if	O
(	O
n	long
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
linebuf	*(char)
[	O
n	long
-	O
1	int
]	O
==	O
'\n'	O
)	O
linebuf	*(char)
[	O
n	long
-	O
1	int
]	O
=	O
0	int
;	O
++	O
*	O
line	*(char)
;	O
}	O
while	O
(	O
*	O
linebuf	*(char)
==	O
'#'	O
||	O
*	O
linebuf	*(char)
==	O
0	int
)	O
;	O
if	O
(	O
argcv_get	(*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
linebuf	*(char)
,	O
""	*(char)
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
)	O
continue	O
;	O
if	O
(	O
argc	int
<	O
INETD_FIELDS_MIN	int
)	O
{	O
if	O
(	O
argc	int
==	O
1	int
&&	O
argv	*(*(char))
[	O
0	int
]	O
[	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
-	O
1	int
]	O
==	O
':'	O
)	O
{	O
argv	*(*(char))
[	O
0	int
]	O
[	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
-	O
1	int
]	O
=	O
0	int
;	O
free	(*(void))->(void)
(	O
global_serv_node	*(char)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"*"	*(char)
)	O
)	O
global_serv_node	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
else	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s:%lu: not enough fields"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
)	O
;	O
continue	O
;	O
}	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_file	*(char)
=	O
file	*(char)
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_line	int
=	O
*	O
line	*(char)
;	O
node	*(char)
=	O
argv	*(*(char))
[	O
INETD_SERVICE	int
]	O
;	O
service	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
node	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
service	*(char)
)	O
{	O
if	O
(	O
global_serv_node	*(char)
)	O
{	O
node	*(char)
=	O
global_serv_node	*(char)
;	O
serv_node	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
node	*(char)
)	O
;	O
serv_node_offset	long
=	O
0	int
;	O
}	O
else	O
node	*(char)
=	O
NULL	O
;	O
service	*(char)
=	O
argv	*(*(char))
[	O
INETD_SERVICE	int
]	O
;	O
}	O
else	O
{	O
*	O
service	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
node	*(char)
,	O
"*"	*(char)
)	O
==	O
0	int
)	O
node	*(char)
=	O
NULL	O
;	O
else	O
{	O
serv_node	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
node	*(char)
)	O
;	O
serv_node_offset	long
=	O
0	int
;	O
}	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
service	*(char)
,	O
TCPMUX_TOKEN	array(char)
,	O
MUX_LEN	O
)	O
==	O
0	int
)	O
{	O
char	O
*	O
c	*(char)
=	O
service	*(char)
+	O
MUX_LEN	O
;	O
if	O
(	O
*	O
c	*(char)
==	O
'+'	O
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_type	int
=	O
MUXPLUS_TYPE	int
;	O
c	*(char)
++	O
;	O
}	O
else	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_type	int
=	O
MUX_TYPE	int
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
c	*(char)
)	O
;	O
}	O
else	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
service	*(char)
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_type	int
=	O
NORM_TYPE	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_SOCKET	int
]	O
,	O
"stream"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
=	O
SOCK_STREAM	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_SOCKET	int
]	O
,	O
"dgram"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
=	O
SOCK_DGRAM	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_SOCKET	int
]	O
,	O
"rdm"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
=	O
SOCK_RDM	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_SOCKET	int
]	O
,	O
"seqpacket"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
=	O
SOCK_SEQPACKET	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_SOCKET	int
]	O
,	O
"raw"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
=	O
SOCK_RAW	int
;	O
else	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"%s:%lu: bad socket type"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
=	O
-	O
1	int
;	O
}	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
INETD_PROTOCOL	int
]	O
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
=	O
AF_INET	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
=	O
1	int
;	O
if	O
(	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
"tcp"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
||	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
"udp"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
)	O
{	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
[	O
3	int
]	O
==	O
'6'	O
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
=	O
AF_INET6	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
=	O
0	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
[	O
3	int
]	O
,	O
"6only"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_v4mapped	char
=	O
0	int
;	O
}	O
else	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
[	O
3	int
]	O
==	O
'4'	O
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_family	short
=	O
AF_INET	O
;	O
}	O
}	O
{	O
char	O
*	O
p	*(char)
,	O
*	O
q	*(char)
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
INETD_WAIT	int
]	O
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
*	O
p	*(char)
++	O
=	O
0	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_WAIT	int
]	O
,	O
"wait"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
INETD_WAIT	int
]	O
,	O
"nowait"	*(char)
)	O
==	O
0	int
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
0	int
;	O
else	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"%s:%lu: bad wait type"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
)	O
;	O
}	O
if	O
(	O
p	*(char)
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_max	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
,	O
&	O
q	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
q	*(char)
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"%s:%lu: invalid number (%s)"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
,	O
p	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
0	int
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
"tcp"	*(char)
,	O
3	int
)	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s:%lu: bad protocol for tcpmux service %s"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
!=	O
SOCK_STREAM	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s:%lu: bad socket type for tcpmux service %s"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
;	O
continue	O
;	O
}	O
}	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
INETD_USER	int
]	O
)	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
INETD_SERVER_PATH	int
]	O
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
,	O
"internal"	*(char)
)	O
==	O
0	int
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
=	O
bi_lookup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,short,short,*((int,*`)->(void)))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s:%lu: internal service %s unknown"	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
;	O
continue	O
;	O
}	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
->	O
bi_wait	short
;	O
}	O
else	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
=	O
NULL	O
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
=	O
argc	int
-	O
INETD_FIELDS_MIN	int
+	O
1	int
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
+	O
1	int
,	O
sizeof	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s:%lu: Out of memory."	*(char)
,	O
file	*(char)
,	O
(	O
unsigned	O
long	O
)	O
*	O
line	*(char)
)	O
;	O
exit	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
;	O
i	int
++	O
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
[	O
i	int
]	O
=	O
argv	*(*(char))
[	O
INETD_SERVER_ARGS	int
+	O
i	int
]	O
;	O
argv	*(*(char))
[	O
INETD_SERVER_ARGS	int
+	O
i	int
]	O
=	O
0	int
;	O
}	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argc	long
==	O
1	int
)	O
{	O
const	O
char	O
*	O
argv0	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
argv0	*(char)
)	O
argv0	*(char)
++	O
;	O
else	O
argv0	*(char)
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_server	*(char)
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
[	O
0	int
]	O
=	O
newstr	(*(char))->(*(char))
(	O
argv0	*(char)
)	O
;	O
}	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_argv	*(*(char))
[	O
i	int
]	O
=	O
NULL	O
;	O
break	O
;	O
}	O
argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
return	O
next_node_sep	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
void	O
nextconfig	(*(char))->(void)
(	O
const	O
char	O
*	O
file	*(char)
)	O
{	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
,	O
*	O
*	O
sepp	*(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
FILE	struct
*	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
SIGSTATUS	O
sigstatus	struct(array(long))
;	O
size_t	long
line	*(char)
=	O
0	int
;	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
setconfig	(*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s: %m"	*(char)
,	O
file	*(char)
)	O
;	O
return	O
;	O
}	O
while	O
(	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
getconfigent	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(long))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
file	*(char)
,	O
&	O
line	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
(	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s/%s: No such user '%s', service ignored"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_user	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
=	O
-	O
1	int
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_checked	short
=	O
1	int
;	O
enter	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
else	O
expand_enter	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
if	O
(	O
serv_node	*(char)
)	O
free	(*(void))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_node	*(char)
)	O
;	O
else	O
freeconfig	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
endconfig	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
fconfig	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
signal_block	(*(struct(array(long))))->(void)
(	O
&	O
sigstatus	struct(array(long))
)	O
;	O
sepp	*(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
=	O
&	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
while	O
(	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
*	O
sepp	*(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
)	O
)	O
{	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_checked	short
)	O
{	O
sepp	*(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
=	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
continue	O
;	O
}	O
*	O
sepp	*(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
>=	O
0	int
)	O
close_sep	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
if	O
(	O
debug	bool
)	O
print_service	(*(char),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
"FREE"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
freeconfig	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
free	(*(void))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
&	O
sigstatus	struct(array(long))
)	O
;	O
}	O
void	O
fix_tcpmux	()->(void)
(	O
void	O
)	O
{	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
int	O
need_tcpmux	int
=	O
0	int
;	O
int	O
has_tcpmux	int
=	O
0	int
;	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_checked	short
)	O
{	O
if	O
(	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
{	O
if	O
(	O
has_tcpmux	int
)	O
return	O
;	O
need_tcpmux	int
=	O
1	int
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
"tcpmux"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
need_tcpmux	int
)	O
return	O
;	O
has_tcpmux	int
=	O
1	int
;	O
}	O
}	O
}	O
if	O
(	O
need_tcpmux	int
&&	O
!	O
has_tcpmux	int
)	O
{	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
)	O
)	O
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_file	*(char)
=	O
"fix_tcpmux"	*(char)
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_service	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
"tcpmux"	*(char)
)	O
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_socktype	int
=	O
SOCK_STREAM	int
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_checked	short
=	O
1	int
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_user	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
"root"	*(char)
)	O
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_bi	*(struct)
=	O
bi_lookup	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(*(struct(*(char),int,short,short,*((int,*`)->(void)))))
(	O
&	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
)	O
;	O
if	O
(	O
!	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_bi	*(struct)
)	O
{	O
freeconfig	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
&	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
)	O
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"INTERNAL ERROR: could not find tcpmux built-in"	*(char)
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"INTERNAL ERROR: could not find tcpmux built-in"	*(char)
)	O
;	O
return	O
;	O
}	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_wait	int
=	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_bi	*(struct)
->	O
bi_wait	short
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_server	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
"internal"	*(char)
)	O
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_fd	int
=	O
-	O
1	int
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_type	int
=	O
NORM_TYPE	int
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_proto	*(char)
=	O
newstr	(*(char))->(*(char))
(	O
"tcp6"	*(char)
)	O
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_family	short
=	O
AF_INET6	O
;	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
.	O
se_v4mapped	char
=	O
1	int
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"inserting default tcpmux entry\n"	*(char)
)	O
;	O
syslog	(int,*(char))->(void)
(	O
LOG_INFO	int
,	O
"inserting default tcpmux entry"	*(char)
)	O
;	O
expand_enter	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(int)
(	O
&	O
serv	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*(char),int,short,short,*((int,*`)->(void)))),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))
)	O
;	O
}	O
}	O
void	O
config	(int)->(void)
(	O
int	O
signo	int
)	O
{	O
int	O
i	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
stats	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_checked	short
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
config_files	*(*(char))
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
config_files	*(*(char))
[	O
i	int
]	O
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
S_ISDIR	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
DIR	struct
*	O
dirp	*(struct)
=	O
opendir	(*(char))->(*(struct))
(	O
config_files	*(*(char))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
dirp	*(struct)
)	O
{	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
dp	*(struct(long,long,short,char,array(char)))
;	O
while	O
(	O
(	O
dp	*(struct(long,long,short,char,array(char)))
=	O
readdir	(*(struct))->(*(struct(long,long,short,char,array(char))))
(	O
dirp	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
{	O
char	O
*	O
path	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
config_files	*(*(char))
[	O
i	int
]	O
)	O
+	O
strlen	(*(char))->(long)
(	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
+	O
2	int
,	O
1	int
)	O
;	O
if	O
(	O
path	*(char)
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
path	*(char)
,	O
"%s/%s"	*(char)
,	O
config_files	*(*(char))
[	O
i	int
]	O
,	O
dp	*(struct(long,long,short,char,array(char)))
->	O
d_name	array(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
path	*(char)
,	O
&	O
stats	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
S_ISREG	O
(	O
stats	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
nextconfig	(*(char))->(void)
(	O
path	*(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
}	O
}	O
closedir	(*(struct))->(int)
(	O
dirp	*(struct)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
S_ISREG	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
nextconfig	(*(char))->(void)
(	O
config_files	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
signo	int
==	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"inetd: %s, %s\n"	*(char)
,	O
config_files	*(*(char))
[	O
i	int
]	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
else	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s: %m"	*(char)
,	O
config_files	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
linebuf	*(char)
)	O
;	O
linebuf	*(char)
=	O
NULL	O
;	O
linebufsize	long
=	O
0	int
;	O
fix_tcpmux	()->(void)
(	O
)	O
;	O
}	O
void	O
set_proc_title	(*(char),int)->(void)
(	O
char	O
*	O
a	*(char)
,	O
int	O
s	int
)	O
{	O
socklen_t	int
size	long
;	O
char	O
*	O
cp	*(char)
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
saddr	struct(short,array(char),long)
;	O
char	O
buf	array(char)
[	O
80	int
]	O
;	O
cp	*(char)
=	O
Argv	*(*(char))
[	O
0	int
]	O
;	O
size	long
=	O
sizeof	O
saddr	struct(short,array(char),long)
;	O
if	O
(	O
getpeername	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
s	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
saddr	struct(short,array(char),long)
,	O
&	O
size	long
)	O
==	O
0	int
)	O
{	O
int	O
err	long
;	O
char	O
buf2	array(char)
[	O
80	int
]	O
;	O
err	long
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
saddr	struct(short,array(char),long)
,	O
sizeof	O
(	O
saddr	struct(short,array(char),long)
)	O
,	O
buf2	array(char)
,	O
sizeof	O
(	O
buf2	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NUMERICHOST	int
)	O
;	O
if	O
(	O
!	O
err	long
)	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
"-%s [%s]"	*(char)
,	O
a	*(char)
,	O
buf2	array(char)
)	O
;	O
else	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
"-%s"	*(char)
,	O
a	*(char)
)	O
;	O
}	O
else	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	array(char)
,	O
sizeof	O
buf	array(char)
,	O
"-%s"	*(char)
,	O
a	*(char)
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
cp	*(char)
,	O
buf	array(char)
,	O
LastArg	*(char)
-	O
cp	*(char)
)	O
;	O
cp	*(char)
+=	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
;	O
while	O
(	O
cp	*(char)
<	O
LastArg	*(char)
)	O
*	O
cp	*(char)
++	O
=	O
' '	O
;	O
}	O
void	O
echo_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
char	O
buffer	array(char)
[	O
BUFSIZE	int
]	O
;	O
int	O
i	int
;	O
set_proc_title	(*(char),int)->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
s	int
)	O
;	O
while	O
(	O
(	O
i	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
buffer	array(char)
,	O
sizeof	O
buffer	array(char)
)	O
)	O
>	O
0	int
&&	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
buffer	array(char)
,	O
i	int
)	O
>	O
0	int
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
echo_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
char	O
buffer	array(char)
[	O
BUFSIZE	int
]	O
;	O
int	O
i	int
;	O
socklen_t	int
size	long
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
size	long
=	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
i	int
=	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
s	int
,	O
buffer	array(char)
,	O
sizeof	O
buffer	array(char)
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
size	long
)	O
;	O
if	O
(	O
i	int
<	O
0	int
)	O
return	O
;	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
s	int
,	O
buffer	array(char)
,	O
i	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
}	O
void	O
discard_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
int	O
ret	int
;	O
char	O
buffer	array(char)
[	O
BUFSIZE	int
]	O
;	O
set_proc_title	(*(char),int)->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
s	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
while	O
(	O
(	O
ret	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
buffer	array(char)
,	O
sizeof	O
buffer	array(char)
)	O
)	O
>	O
0	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
||	O
errno	O
!=	O
EINTR	int
)	O
break	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
discard_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
char	O
buffer	array(char)
[	O
BUFSIZE	int
]	O
;	O
read	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
buffer	array(char)
,	O
sizeof	O
buffer	array(char)
)	O
;	O
}	O
char	O
ring	array(char)
[	O
128	int
]	O
;	O
char	O
*	O
endring	*(char)
;	O
void	O
initring	()->(void)
(	O
void	O
)	O
{	O
int	O
i	int
;	O
endring	*(char)
=	O
ring	array(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
128	int
;	O
++	O
i	int
)	O
if	O
(	O
isprint	(int)->(int)
(	O
i	int
)	O
)	O
*	O
endring	*(char)
++	O
=	O
i	int
;	O
}	O
void	O
chargen_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
int	O
len	int
;	O
char	O
*	O
rs	*(char)
,	O
text	array(char)
[	O
LINESIZ	int
+	O
2	int
]	O
;	O
set_proc_title	(*(char),int)->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
s	int
)	O
;	O
if	O
(	O
!	O
endring	*(char)
)	O
{	O
initring	()->(void)
(	O
)	O
;	O
rs	*(char)
=	O
ring	array(char)
;	O
}	O
text	array(char)
[	O
LINESIZ	int
]	O
=	O
'\r'	O
;	O
text	array(char)
[	O
LINESIZ	int
+	O
1	int
]	O
=	O
'\n'	O
;	O
for	O
(	O
rs	*(char)
=	O
ring	array(char)
;	O
;	O
)	O
{	O
if	O
(	O
(	O
len	int
=	O
endring	*(char)
-	O
rs	*(char)
)	O
>=	O
LINESIZ	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
text	array(char)
,	O
rs	*(char)
,	O
LINESIZ	int
)	O
;	O
else	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
text	array(char)
,	O
rs	*(char)
,	O
len	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
text	array(char)
+	O
len	int
,	O
ring	array(char)
,	O
LINESIZ	int
-	O
len	int
)	O
;	O
}	O
if	O
(	O
++	O
rs	*(char)
==	O
endring	*(char)
)	O
rs	*(char)
=	O
ring	array(char)
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
text	array(char)
,	O
sizeof	O
text	array(char)
)	O
!=	O
sizeof	O
text	array(char)
)	O
break	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
chargen_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
struct	O
sockaddr_storage	struct(short,array(char),long)
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
static	O
char	O
*	O
rs	*(char)
;	O
int	O
len	int
;	O
socklen_t	int
size	long
;	O
char	O
text	array(char)
[	O
LINESIZ	int
+	O
2	int
]	O
;	O
if	O
(	O
endring	*(char)
==	O
0	int
)	O
{	O
initring	()->(void)
(	O
)	O
;	O
rs	*(char)
=	O
ring	array(char)
;	O
}	O
size	long
=	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
s	int
,	O
text	array(char)
,	O
sizeof	O
text	array(char)
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
size	long
)	O
<	O
0	int
)	O
return	O
;	O
if	O
(	O
(	O
len	int
=	O
endring	*(char)
-	O
rs	*(char)
)	O
>=	O
LINESIZ	int
)	O
memmove	(*(void),*(void),long)->(*(void))
(	O
text	array(char)
,	O
rs	*(char)
,	O
LINESIZ	int
)	O
;	O
else	O
{	O
memmove	(*(void),*(void),long)->(*(void))
(	O
text	array(char)
,	O
rs	*(char)
,	O
len	int
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
text	array(char)
+	O
len	int
,	O
ring	array(char)
,	O
LINESIZ	int
-	O
len	int
)	O
;	O
}	O
if	O
(	O
++	O
rs	*(char)
==	O
endring	*(char)
)	O
rs	*(char)
=	O
ring	array(char)
;	O
text	array(char)
[	O
LINESIZ	int
]	O
=	O
'\r'	O
;	O
text	array(char)
[	O
LINESIZ	int
+	O
1	int
]	O
=	O
'\n'	O
;	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
s	int
,	O
text	array(char)
,	O
sizeof	O
text	array(char)
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
}	O
long	O
machtime	()->(long)
(	O
void	O
)	O
{	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
if	O
(	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
<	O
0	int
)	O
{	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Unable to get time of day\n"	*(char)
)	O
;	O
return	O
0L	int
;	O
}	O
return	O
(	O
htonl	(int)->(int)
(	O
(	O
long	O
)	O
(	O
tv	struct(long,long)
.	O
tv_sec	long
+	O
OFFSET	O
)	O
)	O
)	O
;	O
}	O
void	O
machtime_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
long	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
;	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
=	O
machtime	()->(long)
(	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
(	O
char	O
*	O
)	O
&	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
sizeof	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
;	O
}	O
void	O
machtime_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
long	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
socklen_t	int
size	long
;	O
size	long
=	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
s	int
,	O
(	O
char	O
*	O
)	O
&	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
sizeof	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
size	long
)	O
<	O
0	int
)	O
return	O
;	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
=	O
machtime	()->(long)
(	O
)	O
;	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
s	int
,	O
(	O
char	O
*	O
)	O
&	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
sizeof	O
result	*(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
}	O
void	O
daytime_stream	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
char	O
buffer	array(char)
[	O
256	int
]	O
;	O
time_t	long
lclock	long
;	O
lclock	long
=	O
time	struct(long,long)
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	array(char)
,	O
"%.24s\r\n"	*(char)
,	O
ctime	(*(long))->(*(char))
(	O
&	O
lclock	long
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
buffer	array(char)
,	O
strlen	(*(char))->(long)
(	O
buffer	array(char)
)	O
)	O
;	O
}	O
void	O
daytime_dg	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
char	O
buffer	array(char)
[	O
256	int
]	O
;	O
time_t	long
lclock	long
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
socklen_t	int
size	long
;	O
lclock	long
=	O
time	struct(long,long)
(	O
(	O
time_t	long
*	O
)	O
0	int
)	O
;	O
size	long
=	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
if	O
(	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
s	int
,	O
buffer	array(char)
,	O
sizeof	O
buffer	array(char)
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
size	long
)	O
<	O
0	int
)	O
return	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buffer	array(char)
,	O
"%.24s\r\n"	*(char)
,	O
ctime	(*(long))->(*(char))
(	O
&	O
lclock	long
)	O
)	O
;	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
s	int
,	O
buffer	array(char)
,	O
strlen	(*(char))->(long)
(	O
buffer	array(char)
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
sizeof	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
;	O
}	O
static	O
int	O
fd_getline	(int,*(char),int)->(int)
(	O
int	O
fd	int
,	O
char	O
*	O
buf	array(char)
,	O
int	O
len	int
)	O
{	O
int	O
count	int
=	O
0	int
,	O
n	long
;	O
do	O
{	O
n	long
=	O
read	*((*(void),*(char),long)->(long))
(	O
fd	int
,	O
buf	array(char)
,	O
len	int
-	O
count	int
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
return	O
count	int
;	O
if	O
(	O
n	long
<	O
0	int
)	O
return	O
-	O
1	int
;	O
while	O
(	O
--	O
n	long
>=	O
0	int
)	O
{	O
if	O
(	O
*	O
buf	array(char)
==	O
'\r'	O
||	O
*	O
buf	array(char)
==	O
'\n'	O
||	O
*	O
buf	array(char)
==	O
'\0'	O
)	O
return	O
count	int
;	O
count	int
++	O
;	O
buf	array(char)
++	O
;	O
}	O
}	O
while	O
(	O
count	int
<	O
len	int
)	O
;	O
return	O
count	int
;	O
}	O
void	O
tcpmux	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
int	O
s	int
,	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
char	O
service	*(char)
[	O
MAX_SERV_LEN	O
+	O
1	int
]	O
;	O
int	O
len	int
;	O
if	O
(	O
(	O
len	int
=	O
fd_getline	(int,*(char),int)->(int)
(	O
s	int
,	O
service	*(char)
,	O
MAX_SERV_LEN	O
)	O
)	O
<	O
0	int
)	O
{	O
strwrite	O
(	O
s	int
,	O
"-Error reading service name\r\n"	*(char)
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
service	*(char)
[	O
len	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"tcpmux: someone wants %s\n"	*(char)
,	O
service	*(char)
)	O
;	O
if	O
(	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
service	*(char)
,	O
"help"	*(char)
)	O
)	O
{	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
if	O
(	O
!	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
continue	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
s	int
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
strlen	(*(char))->(long)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
)	O
;	O
strwrite	O
(	O
s	int
,	O
"\r\n"	*(char)
)	O
;	O
}	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
{	O
if	O
(	O
ISMUX	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
&&	O
!	O
strcasecmp	(*(char),*(char))->(int)
(	O
service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
)	O
{	O
if	O
(	O
ISMUXPLUS	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
)	O
{	O
strwrite	O
(	O
s	int
,	O
"+Go\r\n"	*(char)
)	O
;	O
}	O
run_service	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
s	int
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
return	O
;	O
}	O
}	O
strwrite	O
(	O
s	int
,	O
"-Service not available\r\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
void	O
prepenv	(int,*(struct(short,array(char))),int)->(void)
(	O
int	O
ctrl	int
,	O
struct	O
sockaddr	struct(short,array(char))
*	O
sa_client	*(struct(short,array(char)))
,	O
socklen_t	int
sa_len	int
)	O
{	O
char	O
str	array(char)
[	O
16	int
]	O
;	O
char	O
ip	array(char)
[	O
4	int
*	O
INET6_ADDRSTRLEN	int
]	O
;	O
int	O
ret	int
;	O
struct	O
sockaddr_storage	struct(short,array(char),long)
sa_server	struct(short,array(char),long)
;	O
socklen_t	int
len	int
=	O
sizeof	O
(	O
sa_server	struct(short,array(char),long)
)	O
;	O
setenv	(*(char),*(char),int)->(int)
(	O
"PROTO"	*(char)
,	O
"TCP"	*(char)
,	O
1	int
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"TCPLOCALIP"	*(char)
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"TCPLOCALHOST"	*(char)
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"TCPLOCALPORT"	*(char)
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"TCPREMOTEIP"	*(char)
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"TCPREMOTEPORT"	*(char)
)	O
;	O
unsetenv	(*(char))->(int)
(	O
"TCPREMOTEHOST"	*(char)
)	O
;	O
if	O
(	O
getsockname	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
ctrl	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa_server	struct(short,array(char),long)
,	O
&	O
len	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"getsockname(): %m"	*(char)
)	O
;	O
else	O
{	O
ret	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa_server	struct(short,array(char),long)
,	O
len	int
,	O
ip	array(char)
,	O
sizeof	O
(	O
ip	array(char)
)	O
,	O
str	array(char)
,	O
sizeof	O
(	O
str	array(char)
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
setenv	(*(char),*(char),int)->(int)
(	O
"TCPLOCALIP"	*(char)
,	O
ip	array(char)
,	O
1	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setenv (TCPLOCALIP): %m"	*(char)
)	O
;	O
else	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Assigned TCPLOCALIP = %s\n"	*(char)
,	O
ip	array(char)
)	O
;	O
if	O
(	O
setenv	(*(char),*(char),int)->(int)
(	O
"TCPLOCALPORT"	*(char)
,	O
str	array(char)
,	O
1	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setenv (TCPLOCALPORT): %m"	*(char)
)	O
;	O
}	O
else	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"getnameinfo: %s"	*(char)
,	O
gai_strerror	(int)->(*(char))
(	O
ret	int
)	O
)	O
;	O
if	O
(	O
resolve_option	bool
)	O
{	O
ret	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa_server	struct(short,array(char),long)
,	O
len	int
,	O
ip	array(char)
,	O
sizeof	O
(	O
ip	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"getnameinfo: %s"	*(char)
,	O
gai_strerror	(int)->(*(char))
(	O
ret	int
)	O
)	O
;	O
else	O
if	O
(	O
setenv	(*(char),*(char),int)->(int)
(	O
"TCPLOCALHOST"	*(char)
,	O
ip	array(char)
,	O
1	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setenv(TCPLOCALHOST): %m"	*(char)
)	O
;	O
}	O
}	O
ret	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
sa_client	*(struct(short,array(char)))
,	O
sa_len	int
,	O
ip	array(char)
,	O
sizeof	O
(	O
ip	array(char)
)	O
,	O
str	array(char)
,	O
sizeof	O
(	O
str	array(char)
)	O
,	O
NI_NUMERICHOST	int
|	O
NI_NUMERICSERV	int
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
if	O
(	O
setenv	(*(char),*(char),int)->(int)
(	O
"TCPREMOTEIP"	*(char)
,	O
ip	array(char)
,	O
1	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setenv(TCPREMOTEIP): %m"	*(char)
)	O
;	O
else	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Assigned TCPREMOTEIP = %s\n"	*(char)
,	O
ip	array(char)
)	O
;	O
if	O
(	O
setenv	(*(char),*(char),int)->(int)
(	O
"TCPREMOTEPORT"	*(char)
,	O
str	array(char)
,	O
1	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setenv(TCPREMOTEPORT): %m"	*(char)
)	O
;	O
if	O
(	O
resolve_option	bool
)	O
{	O
ret	int
=	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
sa_client	*(struct(short,array(char)))
,	O
sa_len	int
,	O
ip	array(char)
,	O
sizeof	O
(	O
ip	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
ret	int
!=	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"getnameinfo: %s"	*(char)
,	O
gai_strerror	(int)->(*(char))
(	O
ret	int
)	O
)	O
;	O
else	O
if	O
(	O
setenv	(*(char),*(char),int)->(int)
(	O
"TCPREMOTEHOST"	*(char)
,	O
ip	array(char)
,	O
1	int
)	O
<	O
0	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"setenv(TCPREMOTEHOST): %m"	*(char)
)	O
;	O
else	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Assigned TCPREMOTEHOST = %s\n"	*(char)
,	O
ip	array(char)
)	O
;	O
}	O
}	O
else	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"getnameinfo: %s"	*(char)
,	O
gai_strerror	(int)->(*(char))
(	O
ret	int
)	O
)	O
;	O
}	O
int	O
main	(int,array(*(char)),array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
,	O
char	O
*	O
envp	array(*(char))
[	O
]	O
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
struct	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
*	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
int	O
dofork	int
;	O
pid_t	int
pid	int
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
Argv	*(*(char))
=	O
argv	*(*(char))
;	O
if	O
(	O
envp	array(*(char))
==	O
0	int
||	O
*	O
envp	array(*(char))
==	O
0	int
)	O
envp	array(*(char))
=	O
argv	*(*(char))
;	O
while	O
(	O
*	O
envp	array(*(char))
)	O
envp	array(*(char))
++	O
;	O
LastArg	*(char)
=	O
envp	array(*(char))
[	O
-	O
1	int
]	O
+	O
strlen	(*(char))->(long)
(	O
envp	array(*(char))
[	O
-	O
1	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"inetd"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
if	O
(	O
resolve_option	bool
)	O
env_option	bool
=	O
true	int
;	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
argc	int
)	O
{	O
int	O
i	int
;	O
config_files	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
argc	int
-	O
index	(*(char),int)->(*(char))
+	O
1	int
,	O
sizeof	O
(	O
*	O
config_files	*(*(char))
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
index	(*(char),int)->(*(char))
<	O
argc	int
;	O
index	(*(char),int)->(*(char))
++	O
,	O
i	int
++	O
)	O
{	O
config_files	*(*(char))
[	O
i	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
index	(*(char),int)->(*(char))
]	O
)	O
;	O
}	O
}	O
else	O
{	O
config_files	*(*(char))
=	O
calloc	(long,long)->(*(void))
(	O
3	int
,	O
sizeof	O
(	O
*	O
config_files	*(*(char))
)	O
)	O
;	O
config_files	*(*(char))
[	O
0	int
]	O
=	O
newstr	(*(char))->(*(char))
(	O
PATH_INETDCONF	O
)	O
;	O
config_files	*(*(char))
[	O
1	int
]	O
=	O
newstr	(*(char))->(*(char))
(	O
PATH_INETDDIR	O
)	O
;	O
}	O
if	O
(	O
!	O
debug	bool
)	O
{	O
daemon	(int,int)->(int)
(	O
0	int
,	O
0	int
)	O
;	O
}	O
openlog	(*(char),int,int)->(void)
(	O
"inetd"	*(char)
,	O
LOG_PID	int
|	O
LOG_NOWAIT	int
,	O
LOG_DAEMON	O
)	O
;	O
if	O
(	O
pidfile_option	bool
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
pid_file	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Using pid-file at \"%s\".\n"	*(char)
,	O
pid_file	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d\n"	*(char)
,	O
getpid	()->(int)
(	O
)	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
syslog	(int,*(char))->(void)
(	O
LOG_CRIT	int
,	O
"can't open %s: %s\n"	*(char)
,	O
pid_file	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
signal_set_handler	(int,*(()->(void)))->(void)
(	O
SIGALRM	int
,	O
retry	(int)->(void)
)	O
;	O
config	(int)->(void)
(	O
0	int
)	O
;	O
signal_set_handler	(int,*(()->(void)))->(void)
(	O
SIGHUP	int
,	O
config	(int)->(void)
)	O
;	O
signal_set_handler	(int,*(()->(void)))->(void)
(	O
SIGCHLD	int
,	O
reapchild	(int)->(void)
)	O
;	O
signal_set_handler	(int,*(()->(void)))->(void)
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
{	O
char	O
dummy	array(char)
[	O
DUMMYSIZE	int
]	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
dummy	array(char)
,	O
'x'	O
,	O
DUMMYSIZE	int
-	O
1	int
)	O
;	O
dummy	array(char)
[	O
DUMMYSIZE	int
-	O
1	int
]	O
=	O
'\0'	O
;	O
setenv	(*(char),*(char),int)->(int)
(	O
"inetd_dummy"	*(char)
,	O
dummy	array(char)
,	O
1	int
)	O
;	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
n	long
,	O
ctrl	int
;	O
fd_set	struct(array(long))
readable	struct(array(long))
;	O
if	O
(	O
nsock	int
==	O
0	int
)	O
{	O
SIGSTATUS	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
sigstatus_empty	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
signal_block	(*(struct(array(long))))->(void)
(	O
NULL	O
)	O
;	O
while	O
(	O
nsock	int
==	O
0	int
)	O
inetd_pause	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
NULL	O
)	O
;	O
}	O
readable	struct(array(long))
=	O
allsock	struct(array(long))
;	O
if	O
(	O
(	O
n	long
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
maxsock	int
+	O
1	int
,	O
&	O
readable	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
)	O
)	O
<=	O
0	int
)	O
{	O
if	O
(	O
n	long
<	O
0	int
&&	O
errno	O
!=	O
EINTR	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"select: %m"	*(char)
)	O
;	O
sleep	(int)->(int)
(	O
1	int
)	O
;	O
continue	O
;	O
}	O
for	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
servtab	struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`))))))
;	O
n	long
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_next	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
!=	O
-	O
1	int
&&	O
FD_ISSET	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
&	O
readable	struct(array(long))
)	O
)	O
{	O
n	long
--	O
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"someone wants %s\n"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
;	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
==	O
SOCK_STREAM	int
)	O
{	O
struct	O
sockaddr_storage	struct(short,array(char),long)
sa_client	*(struct(short,array(char)))
;	O
socklen_t	int
len	int
=	O
sizeof	O
(	O
sa_client	*(struct(short,array(char)))
)	O
;	O
ctrl	int
=	O
accept	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa_client	*(struct(short,array(char)))
,	O
&	O
len	int
)	O
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"accept, ctrl %d\n"	*(char)
,	O
ctrl	int
)	O
;	O
if	O
(	O
ctrl	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
EINTR	int
)	O
syslog	(int,*(char))->(void)
(	O
LOG_WARNING	int
,	O
"accept (for %s): %m"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
env_option	bool
)	O
prepenv	(int,*(struct(short,array(char))),int)->(void)
(	O
ctrl	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
sa_client	*(struct(short,array(char)))
,	O
len	int
)	O
;	O
}	O
else	O
ctrl	int
=	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
;	O
signal_block	(*(struct(array(long))))->(void)
(	O
NULL	O
)	O
;	O
pid	int
=	O
0	int
;	O
dofork	int
=	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
==	O
0	int
||	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_bi	*(struct)
->	O
bi_fork	short
)	O
;	O
if	O
(	O
dofork	int
)	O
{	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_count	int
++	O
==	O
0	int
)	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_time	struct(long,long)
,	O
NULL	O
)	O
;	O
else	O
if	O
(	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_max	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_count	int
>	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_max	int
)	O
||	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_count	int
>=	O
toomany	int
)	O
{	O
struct	O
timeval	struct(long,long)
now	struct(long,long)
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	struct(long,long)
,	O
NULL	O
)	O
;	O
if	O
(	O
now	struct(long,long)
.	O
tv_sec	long
-	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_time	struct(long,long)
.	O
tv_sec	long
>	O
CNT_INTVL	int
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_time	struct(long,long)
=	O
now	struct(long,long)
;	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_count	int
=	O
1	int
;	O
}	O
else	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"%s/%s server failing (looping), service terminated"	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_service	*(char)
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_proto	*(char)
)	O
;	O
close_sep	(*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
==	O
SOCK_STREAM	int
)	O
close	*((*(void))->(int))
(	O
ctrl	int
)	O
;	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
NULL	O
)	O
;	O
if	O
(	O
!	O
timingout	int
)	O
{	O
timingout	int
=	O
1	int
;	O
alarm	(int)->(int)
(	O
RETRYTIME	O
)	O
;	O
}	O
continue	O
;	O
}	O
}	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
syslog	(int,*(char))->(void)
(	O
LOG_ERR	int
,	O
"fork: %m"	*(char)
)	O
;	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
==	O
SOCK_STREAM	int
)	O
close	*((*(void))->(int))
(	O
ctrl	int
)	O
;	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
NULL	O
)	O
;	O
sleep	(int)->(int)
(	O
1	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
pid	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
)	O
{	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
=	O
pid	int
;	O
if	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
>=	O
0	int
)	O
{	O
FD_CLR	O
(	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_fd	int
,	O
&	O
allsock	struct(array(long))
)	O
;	O
nsock	int
--	O
;	O
}	O
}	O
signal_unblock	(*(struct(array(long))))->(void)
(	O
NULL	O
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
if	O
(	O
debug	bool
&&	O
dofork	int
)	O
setsid	()->(int)
(	O
)	O
;	O
if	O
(	O
dofork	int
)	O
{	O
int	O
sock	int
;	O
if	O
(	O
debug	bool
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"+ Closing from %d\n"	*(char)
,	O
maxsock	int
)	O
;	O
for	O
(	O
sock	int
=	O
maxsock	int
;	O
sock	int
>	O
2	int
;	O
sock	int
--	O
)	O
if	O
(	O
sock	int
!=	O
ctrl	int
)	O
close	*((*(void))->(int))
(	O
sock	int
)	O
;	O
}	O
run_service	(int,*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct(*`,int,short,short,*`)),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*`,int,*`,*`,int,*`,int,int,short,*`,*`,*`,*`,long,int,int,short,char,struct`,int,int,int,struct`,*`)))))->(void)
(	O
ctrl	int
,	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
)	O
;	O
}	O
if	O
(	O
!	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_wait	int
&&	O
sep	*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct),*(char),*(*(char)),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct(*(char),int,*(char),*(char),int,*(char),int,int,short,*(char),*(struct`),*(char),*(*`),long,int,int,short,char,struct(short,array(char),long),int,int,int,struct(long,long),*(struct`)))))
->	O
se_socktype	int
==	O
SOCK_STREAM	int
)	O
close	*((*(void))->(int))
(	O
ctrl	int
)	O
;	O
}	O
}	O
}	O
