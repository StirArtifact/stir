static	O
void	O
compute_directory_size	(long,*(int),*(int))->(void)
(	O
blksize_t	long
block_size	int
,	O
int	O
*	O
ret_dir_size	*(int)
,	O
int	O
*	O
ret_dir_bits	*(int)
)	O
{	O
int	O
dir_size	int
=	O
8	int
*	O
sizeof	O
(	O
off_t	long
)	O
;	O
int	O
dir_bits	int
=	O
3	int
;	O
while	O
(	O
dir_size	int
<	O
block_size	int
&&	O
dir_bits	int
<	O
GDBM_HASH_BITS	int
-	O
3	int
)	O
{	O
dir_size	int
<<=	O
1	int
;	O
dir_bits	int
++	O
;	O
}	O
*	O
ret_dir_size	*(int)
=	O
dir_size	int
;	O
*	O
ret_dir_bits	*(int)
=	O
dir_bits	int
;	O
}	O
static	O
inline	O
int	O
bucket_element_count	(long)->(int)
(	O
size_t	long
bucket_size	int
)	O
{	O
return	O
(	O
bucket_size	int
-	O
sizeof	O
(	O
hash_bucket	struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))
)	O
)	O
/	O
sizeof	O
(	O
bucket_element	struct(int,array(char),long,int,int)
)	O
+	O
1	int
;	O
}	O
static	O
int	O
avail_comp	(*(void),*(void))->(int)
(	O
void	O
const	O
*	O
a	array(int)
,	O
void	O
const	O
*	O
b	array(int)
)	O
{	O
avail_elem	struct(int,long)
const	O
*	O
ava	*(struct(int,long))
=	O
a	array(int)
;	O
avail_elem	struct(int,long)
const	O
*	O
avb	*(struct(int,long))
=	O
b	array(int)
;	O
return	O
ava	*(struct(int,long))
->	O
av_size	int
-	O
avb	*(struct(int,long))
->	O
av_size	int
;	O
}	O
int	O
gdbm_avail_table_valid_p	(*(struct),*(struct(int,long)),int)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
avail_elem	struct(int,long)
*	O
av	*(struct(int,int,long,array(struct(int,long))))
,	O
int	O
count	int
)	O
{	O
off_t	long
prev	long
=	O
0	int
;	O
int	O
i	int
;	O
int	O
needs_sorting	int
=	O
0	int
;	O
avail_elem	struct(int,long)
*	O
p	*(struct(int,long))
=	O
av	*(struct(int,int,long,array(struct(int,long))))
;	O
prev	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
,	O
p	*(struct(int,long))
++	O
)	O
{	O
if	O
(	O
!	O
(	O
p	*(struct(int,long))
->	O
av_adr	long
>=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
&&	O
p	*(struct(int,long))
->	O
av_adr	long
+	O
p	*(struct(int,long))
->	O
av_size	int
<=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
)	O
)	O
return	O
0	int
;	O
if	O
(	O
p	*(struct(int,long))
->	O
av_size	int
<	O
prev	long
)	O
needs_sorting	int
=	O
1	int
;	O
prev	long
=	O
p	*(struct(int,long))
->	O
av_size	int
;	O
}	O
if	O
(	O
needs_sorting	int
&&	O
dbf	*(struct)
->	O
read_write	int
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
,	O
"%s"	*(char)
,	O
"restoring sort order"	*(char)
)	O
;	O
qsort	(*(void),long,long,*((*(void),*(void))->(int)))->(void)
(	O
av	*(struct(int,int,long,array(struct(int,long))))
,	O
count	int
,	O
sizeof	O
av	*(struct(int,int,long,array(struct(int,long))))
[	O
0	int
]	O
,	O
avail_comp	(*(void),*(void))->(int)
)	O
;	O
}	O
return	O
1	int
;	O
}	O
int	O
gdbm_avail_block_validate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(struct(int,int,long,array(struct(int,long)))))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
avail_block	struct(int,int,long,array(struct(int,long)))
*	O
avblk	*(struct(int,int,long,array(struct(int,long))))
)	O
{	O
if	O
(	O
!	O
(	O
gdbm_avail_block_valid_p	(*(struct(int,int,long,array(struct(int,long)))))->(int)
(	O
avblk	*(struct(int,int,long,array(struct(int,long))))
)	O
&&	O
gdbm_avail_table_valid_p	(*(struct),*(struct(int,long)),int)->(int)
(	O
dbf	*(struct)
,	O
avblk	*(struct(int,int,long,array(struct(int,long))))
->	O
av_table	array(struct(int,long))
,	O
avblk	*(struct(int,int,long,array(struct(int,long))))
->	O
count	int
)	O
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_BAD_AVAIL	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
gdbm_bucket_avail_table_validate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
hash_bucket	struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))
*	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
)	O
{	O
if	O
(	O
!	O
(	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
>=	O
0	int
&&	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
<=	O
BUCKET_AVAIL	int
&&	O
gdbm_avail_table_valid_p	(*(struct),*(struct(int,long)),int)->(int)
(	O
dbf	*(struct)
,	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
,	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
)	O
)	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_BAD_AVAIL	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
validate_header	(*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
const	O
*	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
const	O
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
int	O
dir_size	int
,	O
dir_bits	int
;	O
int	O
result	int
=	O
GDBM_NO_ERROR	int
;	O
if	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
header_magic	int
!=	O
GDBM_MAGIC	O
)	O
{	O
switch	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
header_magic	int
)	O
{	O
case	O
GDBM_OMAGIC	int
:	O
break	O
;	O
case	O
GDBM_OMAGIC_SWAP	int
:	O
case	O
GDBM_MAGIC32_SWAP	int
:	O
case	O
GDBM_MAGIC64_SWAP	int
:	O
return	O
GDBM_BYTE_SWAPPED	int
;	O
case	O
GDBM_MAGIC32	int
:	O
case	O
GDBM_MAGIC64	int
:	O
return	O
GDBM_BAD_FILE_OFFSET	int
;	O
default	O
:	O
return	O
GDBM_BAD_MAGIC_NUMBER	int
;	O
}	O
}	O
if	O
(	O
!	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
>	O
0	int
&&	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
>	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
&&	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
>=	O
sizeof	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
[	O
0	int
]	O
)	O
)	O
)	O
{	O
return	O
GDBM_BLOCK_SIZE_ERROR	int
;	O
}	O
if	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
<	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
)	O
result	int
=	O
GDBM_NEED_RECOVERY	int
;	O
if	O
(	O
!	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir	long
>	O
0	int
&&	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir	long
<	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
&&	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
>	O
0	int
&&	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir	long
+	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
<	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_size	long
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
compute_directory_size	(long,*(int),*(int))->(void)
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
,	O
&	O
dir_size	int
,	O
&	O
dir_bits	int
)	O
;	O
if	O
(	O
!	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
>=	O
dir_size	int
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
compute_directory_size	(long,*(int),*(int))->(void)
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
,	O
&	O
dir_size	int
,	O
&	O
dir_bits	int
)	O
;	O
if	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_bits	int
!=	O
dir_bits	int
)	O
return	O
GDBM_BAD_HEADER	int
;	O
if	O
(	O
!	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
>	O
sizeof	O
(	O
hash_bucket	struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))
)	O
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
if	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
!=	O
bucket_element_count	(long)->(int)
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
)	O
)	O
return	O
GDBM_BAD_HEADER	int
;	O
if	O
(	O
(	O
(	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
)	O
/	O
sizeof	O
(	O
avail_elem	struct(int,long)
)	O
+	O
1	int
)	O
!=	O
hdr	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
)	O
return	O
GDBM_BAD_HEADER	int
;	O
return	O
result	int
;	O
}	O
int	O
_gdbm_validate_header	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
dbf	*(struct)
->	O
desc	int
,	O
&	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
return	O
GDBM_FILE_STAT_ERROR	int
;	O
return	O
validate_header	(*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
,	O
&	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
}	O
static	O
inline	O
int	O
_gdbm_ftruncate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
)	O
{	O
return	O
ftruncate	(int,long)->(int)
(	O
dbf	*(struct)
->	O
desc	int
,	O
0	int
)	O
;	O
}	O
GDBM_FILE	*(struct)
gdbm_fd_open	(int,*(char),int,int,*((*(char))->(void)))->(*(struct))
(	O
int	O
fd	int
,	O
const	O
char	O
*	O
file_name	*(char)
,	O
int	O
block_size	int
,	O
int	O
flags	int
,	O
void	O
(	O
*	O
fatal_func	*((*(char))->(void))
)	O
(	O
const	O
char	O
*	O
)	O
)	O
{	O
GDBM_FILE	*(struct)
dbf	*(struct)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
off_t	long
file_pos	long
;	O
int	O
index	(*(char),int)->(*(char))
;	O
gdbm_set_errno	(*(struct),int,int)->(void)
(	O
NULL	O
,	O
GDBM_NO_ERROR	int
,	O
FALSE	int
)	O
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	int
,	O
&	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
SAVE_ERRNO	O
(	O
close	(int)->(int)
(	O
fd	int
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
dbf	*(struct)
==	O
NULL	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
SAVE_ERRNO	O
(	O
close	(int)->(int)
(	O
fd	int
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
desc	int
=	O
fd	int
;	O
dbf	*(struct)
->	O
dir	long
=	O
NULL	O
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
=	O
NULL	O
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
=	O
NULL	O
;	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
=	O
NULL	O
;	O
dbf	*(struct)
->	O
cache_size	long
=	O
0	int
;	O
dbf	*(struct)
->	O
memory_mapping	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
mapped_size_max	long
=	O
SIZE_T_MAX	O
;	O
dbf	*(struct)
->	O
mapped_region	*(void)
=	O
NULL	O
;	O
dbf	*(struct)
->	O
mapped_size	long
=	O
0	int
;	O
dbf	*(struct)
->	O
mapped_pos	long
=	O
0	int
;	O
dbf	*(struct)
->	O
mapped_off	long
=	O
0	int
;	O
dbf	*(struct)
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
file_name	*(char)
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
name	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
fatal_err	*((*(char))->(void))
=	O
fatal_func	*((*(char))->(void))
;	O
dbf	*(struct)
->	O
fast_write	int
=	O
TRUE	int
;	O
dbf	*(struct)
->	O
file_locking	int
=	O
TRUE	int
;	O
dbf	*(struct)
->	O
central_free	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
coalesce_blocks	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
need_recovery	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
last_error	int
=	O
GDBM_NO_ERROR	int
;	O
dbf	*(struct)
->	O
last_syserror	int
=	O
0	int
;	O
dbf	*(struct)
->	O
last_errstr	*(char)
=	O
NULL	O
;	O
if	O
(	O
flags	int
&	O
GDBM_SYNC	int
)	O
{	O
dbf	*(struct)
->	O
fast_write	int
=	O
FALSE	int
;	O
}	O
if	O
(	O
flags	int
&	O
GDBM_NOLOCK	int
)	O
{	O
dbf	*(struct)
->	O
file_locking	int
=	O
FALSE	int
;	O
}	O
dbf	*(struct)
->	O
cloexec	int
=	O
!	O
!	O
(	O
flags	int
&	O
GDBM_CLOEXEC	int
)	O
;	O
if	O
(	O
(	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
==	O
GDBM_READER	int
)	O
&&	O
(	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
==	O
0	int
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	(int)->(int)
(	O
dbf	*(struct)
->	O
desc	int
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_EMPTY_DATABASE	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
read_write	int
=	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
file_locking	int
)	O
{	O
if	O
(	O
_gdbm_lock_file	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	(int)->(int)
(	O
dbf	*(struct)
->	O
desc	int
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
==	O
GDBM_READER	int
?	O
GDBM_CANT_BE_READER	int
:	O
GDBM_CANT_BE_WRITER	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
==	O
GDBM_NEWDB	int
&&	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
!=	O
0	int
)	O
{	O
if	O
(	O
_gdbm_ftruncate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_TRUNCATE_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
}	O
else	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
dbf	*(struct)
->	O
desc	int
,	O
&	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
dbf	*(struct)
,	O
GDBM_FILE_STAT_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
}	O
if	O
(	O
gdbm_last_errno	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
close	(int)->(int)
(	O
dbf	*(struct)
->	O
desc	int
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
==	O
0	int
)	O
{	O
int	O
dir_size	int
,	O
dir_bits	int
;	O
if	O
(	O
block_size	int
<	O
GDBM_MIN_BLOCK_SIZE	int
)	O
{	O
block_size	int
=	O
STATBLKSIZE	O
(	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
flags	int
&=	O
~	O
GDBM_BSEXACT	int
;	O
}	O
compute_directory_size	(long,*(int),*(int))->(void)
(	O
block_size	int
,	O
&	O
dir_size	int
,	O
&	O
dir_bits	int
)	O
;	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
,	O
"%s: computed dir_size=%d, dir_bits=%d"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
dir_size	int
,	O
dir_bits	int
)	O
;	O
if	O
(	O
dir_size	int
!=	O
block_size	int
)	O
{	O
if	O
(	O
flags	int
&	O
GDBM_BSEXACT	int
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_BLOCK_SIZE_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
block_size	int
=	O
dir_size	int
;	O
}	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
,	O
"%s: block_size=%d"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
block_size	int
)	O
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
block_size	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
header_magic	int
=	O
GDBM_MAGIC	O
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
=	O
block_size	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
=	O
dir_size	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_bits	int
=	O
dir_bits	int
;	O
dbf	*(struct)
->	O
dir	long
=	O
(	O
off_t	long
*	O
)	O
malloc	(long)->(*(void))
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
dir	long
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir	long
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_elems	int
=	O
bucket_element_count	(long)->(int)
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
)	O
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
_gdbm_new_bucket	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int)->(void)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
,	O
0	int
)	O
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
av_count	int
=	O
1	int
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
[	O
0	int
]	O
.	O
av_adr	long
=	O
3	int
*	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
->	O
bucket_avail	array(struct(int,long))
[	O
0	int
]	O
.	O
av_size	int
=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
for	O
(	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
index	(*(char),int)->(*(char))
<	O
GDBM_DIR_COUNT	O
(	O
dbf	*(struct)
)	O
;	O
index	(*(char),int)->(*(char))
++	O
)	O
dbf	*(struct)
->	O
dir	long
[	O
index	(*(char),int)->(*(char))
]	O
=	O
2	int
*	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
size	int
=	O
(	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
)	O
/	O
sizeof	O
(	O
avail_elem	struct(int,long)
)	O
)	O
+	O
1	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
count	int
=	O
0	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
next_block	long
=	O
0	int
;	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
=	O
4	int
*	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
;	O
if	O
(	O
_gdbm_full_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing header: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_full_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
dir	long
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing directory: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_full_write	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error writing bucket: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_file_extend	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(int)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
next_block	long
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_OPEN	O
|	O
GDBM_DEBUG_ERR	O
,	O
"%s: error extending file: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
gdbm_file_sync	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
)	O
;	O
}	O
else	O
{	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
partial_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
;	O
int	O
rc	int
;	O
if	O
(	O
_gdbm_full_read	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
&	O
partial_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
,	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: error reading partial header: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
rc	int
=	O
validate_header	(*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
&	O
partial_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
,	O
&	O
file_stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
rc	int
==	O
GDBM_NEED_RECOVERY	int
)	O
{	O
dbf	*(struct)
->	O
need_recovery	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
rc	int
!=	O
GDBM_NO_ERROR	int
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
rc	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
=	O
malloc	(long)->(*(void))
(	O
partial_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
.	O
block_size	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
,	O
&	O
partial_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
,	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
)	O
;	O
if	O
(	O
_gdbm_full_read	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
.	O
av_table	array(struct(int,long))
[	O
1	int
]	O
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
block_size	int
-	O
sizeof	O
(	O
gdbm_file_header	struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long))))
)	O
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: error reading av_table: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
gdbm_avail_block_validate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(struct(int,int,long,array(struct(int,long)))))->(int)
(	O
dbf	*(struct)
,	O
&	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
avail	struct(int,int,long,array(struct(int,long)))
)	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
dbf	*(struct)
->	O
dir	long
=	O
malloc	(long)->(*(void))
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
dir	long
==	O
NULL	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_MALLOC_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
file_pos	long
=	O
gdbm_file_seek	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long,int)->(long)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir	long
,	O
SEEK_SET	int
)	O
;	O
if	O
(	O
file_pos	long
!=	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir	long
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_SEEK_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_gdbm_full_read	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),*(void),long)->(int)
(	O
dbf	*(struct)
,	O
dbf	*(struct)
->	O
dir	long
,	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
dir_size	int
)	O
)	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: error reading dir: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
gdbm_db_strerror	(*(struct))->(*(char))
(	O
dbf	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_NOMMAP	int
)	O
)	O
{	O
if	O
(	O
_gdbm_mapped_init	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)))->(int)
(	O
dbf	*(struct)
)	O
==	O
0	int
)	O
dbf	*(struct)
->	O
memory_mapping	int
=	O
TRUE	int
;	O
else	O
{	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ERR	O
|	O
GDBM_DEBUG_OPEN	O
,	O
"%s: _gdbm_mapped_init failed: %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
GDBM_CLOERROR	int
)	O
)	O
dbf	*(struct)
->	O
desc	int
=	O
-	O
1	int
;	O
SAVE_ERRNO	O
(	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
dbf	*(struct)
->	O
last_read	long
=	O
-	O
1	int
;	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
=	O
NULL	O
;	O
dbf	*(struct)
->	O
bucket_dir	int
=	O
0	int
;	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
=	O
NULL	O
;	O
dbf	*(struct)
->	O
header_changed	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
directory_changed	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
bucket_changed	int
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
second_changed	int
=	O
FALSE	int
;	O
GDBM_DEBUG	O
(	O
GDBM_DEBUG_ALL	O
,	O
"%s: opened %s"	*(char)
,	O
dbf	*(struct)
->	O
name	*(char)
,	O
dbf	*(struct)
->	O
need_recovery	int
?	O
"for recovery"	*(char)
:	O
"successfully"	*(char)
)	O
;	O
return	O
dbf	*(struct)
;	O
}	O
GDBM_FILE	*(struct)
gdbm_open	(*(char),int,int,int,*((*(char))->(void)))->(*(struct))
(	O
const	O
char	O
*	O
file	*(char)
,	O
int	O
block_size	int
,	O
int	O
flags	int
,	O
int	O
mode	int
,	O
void	O
(	O
*	O
fatal_func	*((*(char))->(void))
)	O
(	O
const	O
char	O
*	O
)	O
)	O
{	O
int	O
fd	int
;	O
int	O
fbits	int
=	O
0	int
;	O
switch	O
(	O
flags	int
&	O
GDBM_OPENMASK	int
)	O
{	O
case	O
GDBM_READER	int
:	O
fbits	int
=	O
O_RDONLY	int
;	O
break	O
;	O
case	O
GDBM_WRITER	int
:	O
fbits	int
=	O
O_RDWR	int
;	O
break	O
;	O
case	O
GDBM_WRCREAT	int
:	O
case	O
GDBM_NEWDB	int
:	O
fbits	int
=	O
O_RDWR	int
|	O
O_CREAT	int
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_OPEN_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
flags	int
&	O
GDBM_CLOEXEC	int
)	O
fbits	int
|=	O
O_CLOEXEC	O
;	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
file	*(char)
,	O
fbits	int
,	O
mode	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
{	O
GDBM_SET_ERRNO2	O
(	O
NULL	O
,	O
GDBM_FILE_OPEN_ERROR	int
,	O
FALSE	int
,	O
GDBM_DEBUG_OPEN	O
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
gdbm_fd_open	(int,*(char),int,int,*((*(char))->(void)))->(*(struct))
(	O
fd	int
,	O
file	*(char)
,	O
block_size	int
,	O
flags	int
|	O
GDBM_CLOERROR	int
,	O
fatal_func	*((*(char))->(void))
)	O
;	O
}	O
int	O
_gdbm_init_cache	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),long)->(int)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
size_t	long
size	int
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
==	O
NULL	O
)	O
{	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
=	O
calloc	(long,long)->(*(void))
(	O
size	int
,	O
sizeof	O
(	O
cache_elem	struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int))
)	O
)	O
;	O
if	O
(	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
==	O
NULL	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	*(struct)
->	O
cache_size	long
=	O
size	int
;	O
for	O
(	O
index	(*(char),int)->(*(char))
=	O
0	int
;	O
index	(*(char),int)->(*(char))
<	O
size	int
;	O
index	(*(char),int)->(*(char))
++	O
)	O
{	O
(	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
)	O
.	O
ca_bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
=	O
malloc	(long)->(*(void))
(	O
dbf	*(struct)
->	O
header	*(struct(int,int,long,int,int,int,int,long,struct(int,int,long,array(struct(int,long)))))
->	O
bucket_size	int
)	O
;	O
if	O
(	O
(	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
)	O
.	O
ca_bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
==	O
NULL	O
)	O
{	O
GDBM_SET_ERRNO	O
(	O
dbf	*(struct)
,	O
GDBM_MALLOC_ERROR	int
,	O
TRUE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
dptr	*(char)
=	O
NULL	O
;	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
dsize	int
=	O
0	int
;	O
_gdbm_cache_entry_invalidate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(void)
(	O
dbf	*(struct)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
}	O
dbf	*(struct)
->	O
bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
=	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
0	int
]	O
.	O
ca_bucket	*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int))))
;	O
dbf	*(struct)
->	O
cache_entry	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
=	O
&	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
0	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
_gdbm_cache_entry_invalidate	(*(struct(*(char),int,int,int,int,int,int,int,int,int,int,*(char),enum(int,int,int,int),*((*`)->(void)),int,*(struct(int,int,long,int,int,int,int,long,struct`)),*(long),*(struct(*`,long,char,struct`)),long,long,*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),int,*(struct(*`,long,char,struct`)),int,int,int,int,long,*(void),long,long,long)),int)->(void)
(	O
GDBM_FILE	*(struct)
dbf	*(struct)
,	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
ca_adr	long
=	O
0	int
;	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
ca_changed	char
=	O
FALSE	int
;	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
hash_val	int
=	O
-	O
1	int
;	O
dbf	*(struct)
->	O
bucket_cache	*(struct(*(struct(int,array(struct(int,long)),int,int,array(struct(int,array(char),long,int,int)))),long,char,struct(int,int,int,*(char),long,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
ca_data	struct(int,int,int,*(char),long,int)
.	O
elem_loc	int
=	O
-	O
1	int
;	O
}	O
