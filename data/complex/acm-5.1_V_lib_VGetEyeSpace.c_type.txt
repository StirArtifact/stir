void	O
VGetEyeSpace	(*(struct(*(struct(*`,long,*`,int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*`,int,short,short,short,short,int,struct`,*`,*`,*`,*`,*`,*`,int,int,int,*`,int,int,*`,int,int,*`,int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct`,*`,*`,*`,double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*`,long,int,long,long,long,int,int)),*(struct(short,long,*`,*`)),long,long,*(()->(void)),*((*`,long,*`)->(int)),*((*`,int,int,int,int,short)->(void)),*((*`,*`,int,short)->(void)),*((*`,long,*`,*`)->(void)),*((*`,int,int,int,int,short)->(void)),*((*`,*`)->(void)),*((*`,int,int,int,int)->(void)),*((*`)->(void)),long)),struct(double,double,double),struct(double,double,double),struct(double,double,double))->(void)
(	O
Viewport	struct(*(struct(*(struct),long,*(struct),int,array(struct(*(struct(short,short,short,short)),int)),array(long),long,*(long),int,short,short,short,short,int,struct(short,short,short,short),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`,*`,int)),*(struct(*`)),*(struct(*`)),*(struct(short,long,long,*`,*`,*`)),int,int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int,*(struct(short,short,short)),int,int)),long,long,struct(array(array(double))),*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)),array(struct(double,double,double)),double,double,double,double,int,int,struct(short,short),struct(double,double,double),*(struct),int,long,long,long,*(struct),array(long),int,int,long,long,long,*(short),*(short),array(short),struct(long,short,short,short,char,char),array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),*(struct(short,long,*(struct(short,long,*`,*`)),*(struct(short,long,*`,*`)))),long,long,*(()->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct(long,short,short,short,char,char)))->(int)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct(short,short,short,short)),int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),long,*(struct),*(struct(short,short,short,struct`,*`,*`,*`,double)))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int,short)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),*(struct))->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)),int,int,int,int)->(void)),*((*(struct(*`,long,long,struct`,*`,array(struct(double,double,double)),double,double,double,double,int,int,struct`,struct`,*`,int,long,long,long,*`,array(long),int,int,long,long,long,*`,*`,array(short),struct`,array(struct(long,short,short,short,char,char)),array(struct(long,short,short,short,char,char)),long,*`,*`,long,long,*`,*`,*`,*`,*`,*`,*`,*`,*`,long)))->(void)),long)
*	O
v	struct(double,double,double)
,	O
VPoint	struct(double,double,double)
EyePt	struct(double,double,double)
,	O
VPoint	struct(double,double,double)
CntrInt	struct(double,double,double)
,	O
VPoint	struct(double,double,double)
up	struct(double,double,double)
)	O
{	O
VMatrix	struct(array(array(double)))
Mtx	*(struct(array(array(double))))
,	O
es	struct(array(array(double)))
;	O
VPoint	struct(double,double,double)
C1	struct(double,double,double)
,	O
C2	struct(double,double,double)
;	O
double	O
Hypotenuse	double
,	O
h1	double
,	O
CosA	double
,	O
SinA	double
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
)	O
;	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
3	int
]	O
=	O
-	O
EyePt	struct(double,double,double)
.	O
x	double
;	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
3	int
]	O
=	O
-	O
EyePt	struct(double,double,double)
.	O
y	double
;	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
3	int
]	O
=	O
-	O
EyePt	struct(double,double,double)
.	O
z	double
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
CntrInt	struct(double,double,double)
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
,	O
&	O
C1	struct(double,double,double)
)	O
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
Mtx	*(struct(array(array(double))))
)	O
;	O
Hypotenuse	double
=	O
sqrt	(double)->(double)
(	O
C1	struct(double,double,double)
.	O
x	double
*	O
C1	struct(double,double,double)
.	O
x	double
+	O
C1	struct(double,double,double)
.	O
y	double
*	O
C1	struct(double,double,double)
.	O
y	double
)	O
;	O
if	O
(	O
Hypotenuse	double
>	O
0.0	int
)	O
{	O
CosA	double
=	O
C1	struct(double,double,double)
.	O
y	double
/	O
Hypotenuse	double
;	O
SinA	double
=	O
C1	struct(double,double,double)
.	O
x	double
/	O
Hypotenuse	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
CosA	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
0	int
]	O
=	O
SinA	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
1	int
]	O
=	O
-	O
SinA	double
;	O
es	struct(array(array(double)))
=	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
;	O
VMatrixMult	(*(struct(array(array(double)))),*(struct(array(array(double)))),*(struct(array(array(double)))))->(void)
(	O
&	O
es	struct(array(array(double)))
,	O
&	O
Mtx	*(struct(array(array(double))))
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
)	O
;	O
}	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
CntrInt	struct(double,double,double)
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
,	O
&	O
C2	struct(double,double,double)
)	O
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
Mtx	*(struct(array(array(double))))
)	O
;	O
Hypotenuse	double
=	O
sqrt	(double)->(double)
(	O
C2	struct(double,double,double)
.	O
y	double
*	O
C2	struct(double,double,double)
.	O
y	double
+	O
C2	struct(double,double,double)
.	O
z	double
*	O
C2	struct(double,double,double)
.	O
z	double
)	O
;	O
if	O
(	O
Hypotenuse	double
>	O
0.0	int
)	O
{	O
CosA	double
=	O
C2	struct(double,double,double)
.	O
y	double
/	O
Hypotenuse	double
;	O
SinA	double
=	O
-	O
C2	struct(double,double,double)
.	O
z	double
/	O
Hypotenuse	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
=	O
CosA	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
1	int
]	O
=	O
SinA	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
2	int
]	O
=	O
-	O
SinA	double
;	O
es	struct(array(array(double)))
=	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
;	O
VMatrixMult	(*(struct(array(array(double)))),*(struct(array(array(double)))),*(struct(array(array(double)))))->(void)
(	O
&	O
es	struct(array(array(double)))
,	O
&	O
Mtx	*(struct(array(array(double))))
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
)	O
;	O
}	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
up	struct(double,double,double)
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
,	O
&	O
C2	struct(double,double,double)
)	O
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
Mtx	*(struct(array(array(double))))
)	O
;	O
h1	double
=	O
sqrt	(double)->(double)
(	O
C2	struct(double,double,double)
.	O
y	double
*	O
C2	struct(double,double,double)
.	O
y	double
+	O
C2	struct(double,double,double)
.	O
z	double
*	O
C2	struct(double,double,double)
.	O
z	double
)	O
;	O
Hypotenuse	double
=	O
sqrt	(double)->(double)
(	O
C2	struct(double,double,double)
.	O
x	double
*	O
C2	struct(double,double,double)
.	O
x	double
+	O
h1	double
*	O
h1	double
)	O
;	O
if	O
(	O
Hypotenuse	double
>	O
0.0	int
)	O
{	O
CosA	double
=	O
h1	double
/	O
Hypotenuse	double
;	O
SinA	double
=	O
C2	struct(double,double,double)
.	O
x	double
/	O
Hypotenuse	double
;	O
if	O
(	O
C2	struct(double,double,double)
.	O
z	double
<	O
0.0	int
)	O
{	O
CosA	double
=	O
-	O
CosA	double
;	O
}	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
=	O
CosA	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
0	int
]	O
=	O
SinA	double
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
2	int
]	O
=	O
-	O
SinA	double
;	O
es	struct(array(array(double)))
=	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
;	O
VMatrixMult	(*(struct(array(array(double)))),*(struct(array(array(double)))),*(struct(array(array(double)))))->(void)
(	O
&	O
es	struct(array(array(double)))
,	O
&	O
Mtx	*(struct(array(array(double))))
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
)	O
;	O
}	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
Mtx	*(struct(array(array(double))))
)	O
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
=	O
0.0	int
;	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
1	int
]	O
=	O
Mtx	*(struct(array(array(double))))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
2	int
]	O
=	O
1.0	int
;	O
es	struct(array(array(double)))
=	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
;	O
VMatrixMult	(*(struct(array(array(double)))),*(struct(array(array(double)))),*(struct(array(array(double)))))->(void)
(	O
&	O
es	struct(array(array(double)))
,	O
&	O
Mtx	*(struct(array(array(double))))
,	O
&	O
(	O
v	struct(double,double,double)
->	O
eyeSpace	struct(array(array(double)))
)	O
)	O
;	O
}	O
