int	O
gsl_linalg_hessenberg_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Hessenberg reduction requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
tau	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"tau vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<	O
3	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
,	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
tau_i	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
2	int
;	O
++	O
i	long
)	O
{	O
c	*(float)
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
tau	double
,	O
i	long
+	O
1	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
tau_i	double
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
+	O
1	int
,	O
i	long
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
,	O
N	int
-	O
i	long
)	O
;	O
gsl_linalg_householder_hm	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
i	long
+	O
1	int
,	O
N	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
tau	double
,	O
i	long
,	O
tau_i	double
)	O
;	O
c	*(float)
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
-	O
1	int
)	O
;	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
-	O
1	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_hessenberg_unpack	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
s	*(float)
;	O
gsl_matrix_set_identity	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
s	*(float)
=	O
gsl_linalg_hessenberg_unpack_accum	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
tau	double
,	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
s	*(float)
;	O
}	O
int	O
gsl_linalg_hessenberg_unpack_accum	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Hessenberg reduction requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
tau	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"tau vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"V matrix has wrong dimension"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
j	long
;	O
double	O
tau_j	double
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
,	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
if	O
(	O
N	int
<	O
3	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
(	O
N	int
-	O
2	int
)	O
;	O
++	O
j	long
)	O
{	O
c	*(float)
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
tau_j	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
tau	double
,	O
j	long
)	O
;	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
+	O
1	int
,	O
N	int
-	O
(	O
j	long
+	O
1	int
)	O
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
j	long
+	O
1	int
,	O
V	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
,	O
N	int
-	O
(	O
j	long
+	O
1	int
)	O
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_j	double
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_hessenberg_set_zero	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
size_t	long
i	long
,	O
j	long
;	O
if	O
(	O
N	int
<	O
3	int
)	O
return	O
GSL_SUCCESS	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
-	O
2	int
;	O
++	O
j	long
)	O
{	O
for	O
(	O
i	long
=	O
j	long
+	O
2	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
0.0	int
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_linalg_hessenberg_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
M	int
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
size_t	long
top	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N_M	long
=	O
M	int
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"Hessenberg reduction requires square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
tau	double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"tau vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<	O
3	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
,	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
tau_i	double
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
2	int
;	O
++	O
i	long
)	O
{	O
c	*(float)
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
i	long
,	O
i	long
+	O
1	int
,	O
N	int
-	O
i	long
-	O
1	int
)	O
;	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
tau	double
,	O
i	long
+	O
1	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
tau_i	double
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
M	int
,	O
top	long
+	O
i	long
+	O
1	int
,	O
top	long
+	O
i	long
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
,	O
N_M	long
-	O
top	long
-	O
i	long
)	O
;	O
gsl_linalg_householder_hm	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
M	int
,	O
0	int
,	O
top	long
+	O
i	long
+	O
1	int
,	O
top	long
+	O
N	int
,	O
N	int
-	O
(	O
i	long
+	O
1	int
)	O
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
tau	double
,	O
i	long
,	O
tau_i	double
)	O
;	O
c	*(float)
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
-	O
1	int
)	O
;	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
-	O
1	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
hv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
