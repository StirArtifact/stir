int	O
confirm_flag	int
;	O
struct	O
arguments	struct(*(char),*(char),*(char),int)
{	O
char	O
*	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
;	O
char	O
*	O
user	*(char)
;	O
char	O
*	O
nas	*(char)
;	O
int	O
port	array(int)
;	O
}	O
;	O
const	O
char	O
*	O
argp_program_version	*(char)
=	O
"radzap ("	*(char)
PACKAGE	*(char)
") "	*(char)
VERSION	*(char)
;	O
static	O
char	O
doc	*(char)
[	O
]	O
=	O
N_	O
(	O
"delete Radius login records"	*(char)
)	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
options	*(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"radzap specific switches:"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"confirm"	*(char)
,	O
'c'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"ask for confirmation before zapping"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"log-directory"	*(char)
,	O
'l'	O
,	O
"DIR"	*(char)
,	O
0	int
,	O
N_	O
(	O
"set logging directory"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"file"	*(char)
,	O
'f'	O
,	O
N_	O
(	O
"FILE"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"operate on FILE instead of /var/log/radutmp"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"nas"	*(char)
,	O
'n'	O
,	O
N_	O
(	O
"NASNAME"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"zap user from given NAS"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"port"	*(char)
,	O
'p'	O
,	O
N_	O
(	O
"NUMBER"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"zap user coming from given port"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
"quiet"	*(char)
,	O
'q'	O
,	O
NULL	O
,	O
0	int
,	O
N_	O
(	O
"do not ask for confirmation before zapping"	*(char)
)	O
,	O
0	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
struct	O
arguments	struct(*(char),*(char),*(char),int)
*	O
args	*(struct)
=	O
state	*(int)
->	O
input	*(void)
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'c'	O
:	O
confirm_flag	int
=	O
1	int
;	O
break	O
;	O
case	O
'l'	O
:	O
grad_log_dir	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'f'	O
:	O
args	*(struct)
->	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'n'	O
:	O
args	*(struct)
->	O
nas	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'p'	O
:	O
if	O
(	O
*	O
arg	*(char)
==	O
's'	O
||	O
*	O
arg	*(char)
==	O
'S'	O
)	O
++	O
arg	*(char)
;	O
args	*(struct)
->	O
port	array(int)
=	O
atoi	(*(char))->(int)
(	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
'q'	O
:	O
confirm_flag	int
=	O
0	int
;	O
break	O
;	O
case	O
ARGP_KEY_ARG	int
:	O
args	*(struct)
->	O
user	*(char)
=	O
state	*(int)
->	O
argv	*(*(char))
[	O
state	*(int)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
-	O
1	int
]	O
;	O
break	O
;	O
case	O
ARGP_KEY_FINI	int
:	O
if	O
(	O
!	O
args	*(struct)
->	O
user	*(char)
&&	O
!	O
args	*(struct)
->	O
nas	*(char)
&&	O
args	*(struct)
->	O
port	array(int)
==	O
-	O
1	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
_	O
(	O
"at least one port, nas or user must be specified"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
options	*(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
NULL	O
,	O
doc	*(char)
,	O
grad_common_argp_child	array(struct(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(char),int))
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
radzap	(*(struct(int,int)),int,*(char),long)->(int)
(	O
grad_netdef_t	struct
*	O
netdef	struct(int,int)
,	O
int	O
port	array(int)
,	O
char	O
*	O
user	*(char)
,	O
time_t	long
t	long
)	O
{	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
;	O
radut_file_t	*(struct)
file	*(char)
;	O
grad_uint32_t	int
netaddr	int
;	O
if	O
(	O
t	long
==	O
0	int
)	O
time	struct(long,long)
(	O
&	O
t	long
)	O
;	O
if	O
(	O
(	O
file	*(char)
=	O
grad_ut_setent	(*(char),int)->(*(struct))
(	O
grad_utmp_file	*(char)
,	O
0	int
)	O
)	O
==	O
NULL	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file %s"	*(char)
)	O
,	O
grad_utmp_file	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
while	O
(	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
=	O
grad_ut_getent	(*(struct))->(*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))
(	O
file	*(char)
)	O
)	O
{	O
if	O
(	O
(	O
netdef	struct(int,int)
&&	O
!	O
grad_ip_in_net_p	(*(struct(int,int)),int)->(int)
(	O
netdef	struct(int,int)
,	O
htonl	(int)->(int)
(	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
)	O
)	O
||	O
(	O
port	array(int)
>=	O
0	int
&&	O
port	array(int)
!=	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
)	O
||	O
(	O
user	*(char)
!=	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
login	array(char)
,	O
user	*(char)
)	O
)	O
!=	O
0	int
||	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
!=	O
P_LOGIN	int
)	O
{	O
continue	O
;	O
}	O
if	O
(	O
!	O
confirm	()->(int)
(	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
)	O
continue	O
;	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
type	enum(int,int,int,int)
=	O
P_IDLE	int
;	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
time	struct(long,long)
=	O
t	long
;	O
grad_ut_putent	(*(struct),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))->(int)
(	O
file	*(char)
,	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
;	O
write_wtmp	()->(int)
(	O
up	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
;	O
}	O
grad_ut_endent	(*(struct))->(void)
(	O
file	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
confirm	()->(int)
(	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
utp	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
{	O
char	O
buf	*(char)
[	O
GRAD_MAX_LONGNAME	int
]	O
;	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
cl	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
;	O
char	O
*	O
s	*(*(char))
=	O
NULL	O
;	O
if	O
(	O
cl	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
grad_nas_lookup_ip	(int)->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
ntohl	(int)->(int)
(	O
utp	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
)	O
)	O
s	*(*(char))
=	O
cl	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
->	O
shortname	array(char)
;	O
if	O
(	O
s	*(*(char))
==	O
NULL	O
||	O
s	*(*(char))
[	O
0	int
]	O
==	O
0	int
)	O
s	*(*(char))
=	O
grad_ip_gethostname	(int,*(char),long)->(*(char))
(	O
ntohl	(int)->(int)
(	O
utp	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_address	int
)	O
,	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"radzap: zapping %s from %s, port %d"	*(char)
)	O
,	O
utp	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
login	array(char)
,	O
s	*(*(char))
,	O
utp	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
->	O
nas_port	int
)	O
;	O
if	O
(	O
confirm_flag	int
)	O
{	O
printf	(*(char))->(int)
(	O
": Ok?"	*(char)
)	O
;	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
!=	O
'y'	O
&&	O
buf	*(char)
[	O
0	int
]	O
!=	O
'Y'	O
)	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Not confirmed\n"	*(char)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
return	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
int	O
write_wtmp	()->(int)
(	O
struct	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
*	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
{	O
return	O
grad_radwtmp_putent	(*(char),*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))))->(int)
(	O
grad_wtmp_file	*(char)
,	O
ut	*(struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char)))
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
grad_netdef_t	struct
netdef	struct(int,int)
,	O
*	O
netdefp	*(struct(int,int))
=	O
NULL	O
;	O
time_t	long
t	long
;	O
char	O
*	O
path	*(char)
;	O
char	O
*	O
s	*(*(char))
;	O
struct	O
arguments	struct(*(char),*(char),*(char),int)
args	*(struct)
;	O
grad_app_setup	()->(void)
(	O
)	O
;	O
if	O
(	O
s	*(*(char))
=	O
getenv	(*(char))->(*(char))
(	O
"RADZAP_CONFIRM"	*(char)
)	O
)	O
confirm_flag	int
=	O
atoi	(*(char))->(int)
(	O
s	*(*(char))
)	O
;	O
args	*(struct)
.	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
=	O
NULL	O
;	O
args	*(struct)
.	O
user	*(char)
=	O
NULL	O
;	O
args	*(struct)
.	O
nas	*(char)
=	O
NULL	O
;	O
args	*(struct)
.	O
port	array(int)
=	O
-	O
1	int
;	O
if	O
(	O
grad_argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),*(int),array(*(*(char))),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
,	O
&	O
args	*(struct)
)	O
)	O
return	O
1	int
;	O
if	O
(	O
args	*(struct)
.	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
)	O
grad_utmp_file	*(char)
=	O
args	*(struct)
.	O
radutmp	struct(array(char),array(char),int,array(char),int,int,int,long,long,int,int,long,array(char),int,array(char))
;	O
path	*(char)
=	O
grad_mkfilename	(*(char),*(char))->(*(char))
(	O
grad_config_dir	*(char)
,	O
RADIUS_NASLIST	*(char)
)	O
;	O
if	O
(	O
grad_nas_read_file	(*(char))->(int)
(	O
path	*(char)
)	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
grad_free	(*(void))->(void)
(	O
path	*(char)
)	O
;	O
if	O
(	O
args	*(struct)
.	O
nas	*(char)
)	O
{	O
grad_nas_t	struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))
*	O
np	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
;	O
np	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
=	O
grad_nas_lookup_name	(*(char))->(*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void))))
(	O
args	*(struct)
.	O
nas	*(char)
)	O
;	O
if	O
(	O
np	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
)	O
{	O
netdefp	*(struct(int,int))
=	O
&	O
np	*(struct(struct(int,int),array(char),array(char),array(char),*(struct),*(void)))
->	O
netdef	struct(int,int)
;	O
}	O
else	O
{	O
if	O
(	O
grad_ip_getnetaddr	(*(char),*(struct(int,int)))->(int)
(	O
args	*(struct)
.	O
nas	*(char)
,	O
&	O
netdef	struct(int,int)
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: host not found.\n"	*(char)
)	O
,	O
args	*(struct)
.	O
nas	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
netdefp	*(struct(int,int))
=	O
&	O
netdef	struct(int,int)
;	O
}	O
}	O
t	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
radzap	(*(struct(int,int)),int,*(char),long)->(int)
(	O
netdefp	*(struct(int,int))
,	O
args	*(struct)
.	O
port	array(int)
,	O
args	*(struct)
.	O
user	*(char)
,	O
t	long
)	O
;	O
return	O
0	int
;	O
}	O
