static	O
bool	bool
get_funky_string	(*(*(char)),*(*(char)),bool,*(long))->(bool)
(	O
char	O
*	O
*	O
dest	*(*(char))
,	O
const	O
char	O
*	O
*	O
src	*(*(char))
,	O
bool	bool
equals_end	bool
,	O
size_t	long
*	O
output_count	*(long)
)	O
;	O
struct	O
bin_str	struct(long,*(char))
_rl_color_indicator	array(struct(long,*(char)))
[	O
]	O
=	O
{	O
{	O
LEN_STR_PAIR	O
(	O
"\033["	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"m"	*(char)
)	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"0"	*(char)
)	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;34"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;36"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"33"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;35"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;33"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;33"	*(char)
)	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;32"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"01;35"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"37;41"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"30;43"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"37;44"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"34;42"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"30;42"	*(char)
)	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"30;41"	*(char)
)	O
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
,	O
{	O
LEN_STR_PAIR	O
(	O
"\033[K"	*(char)
)	O
}	O
,	O
}	O
;	O
static	O
bool	bool
get_funky_string	(*(*(char)),*(*(char)),bool,*(long))->(bool)
(	O
char	O
*	O
*	O
dest	*(*(char))
,	O
const	O
char	O
*	O
*	O
src	*(*(char))
,	O
bool	bool
equals_end	bool
,	O
size_t	long
*	O
output_count	*(long)
)	O
{	O
char	O
num	char
;	O
size_t	long
count	int
;	O
enum	O
{	O
ST_GND	int
,	O
ST_BACKSLASH	int
,	O
ST_OCTAL	int
,	O
ST_HEX	int
,	O
ST_CARET	int
,	O
ST_END	int
,	O
ST_ERROR	int
}	O
state	*(int)
;	O
const	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
q	*(char)
;	O
p	*(char)
=	O
*	O
src	*(*(char))
;	O
q	*(char)
=	O
*	O
dest	*(*(char))
;	O
count	int
=	O
0	int
;	O
num	char
=	O
0	int
;	O
state	*(int)
=	O
ST_GND	int
;	O
while	O
(	O
state	*(int)
<	O
ST_END	int
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
ST_GND	int
:	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
':'	O
:	O
case	O
'\0'	O
:	O
state	*(int)
=	O
ST_END	int
;	O
break	O
;	O
case	O
'\\'	O
:	O
state	*(int)
=	O
ST_BACKSLASH	int
;	O
++	O
p	*(char)
;	O
break	O
;	O
case	O
'^'	O
:	O
state	*(int)
=	O
ST_CARET	int
;	O
++	O
p	*(char)
;	O
break	O
;	O
case	O
'='	O
:	O
if	O
(	O
equals_end	bool
)	O
{	O
state	*(int)
=	O
ST_END	int
;	O
break	O
;	O
}	O
default	O
:	O
*	O
(	O
q	*(char)
++	O
)	O
=	O
*	O
(	O
p	*(char)
++	O
)	O
;	O
++	O
count	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
ST_BACKSLASH	int
:	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
state	*(int)
=	O
ST_OCTAL	int
;	O
num	char
=	O
*	O
p	*(char)
-	O
'0'	O
;	O
break	O
;	O
case	O
'x'	O
:	O
case	O
'X'	O
:	O
state	*(int)
=	O
ST_HEX	int
;	O
num	char
=	O
0	int
;	O
break	O
;	O
case	O
'a'	O
:	O
num	char
=	O
'\a'	O
;	O
break	O
;	O
case	O
'b'	O
:	O
num	char
=	O
'\b'	O
;	O
break	O
;	O
case	O
'e'	O
:	O
num	char
=	O
27	int
;	O
break	O
;	O
case	O
'f'	O
:	O
num	char
=	O
'\f'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
num	char
=	O
'\n'	O
;	O
break	O
;	O
case	O
'r'	O
:	O
num	char
=	O
'\r'	O
;	O
break	O
;	O
case	O
't'	O
:	O
num	char
=	O
'\t'	O
;	O
break	O
;	O
case	O
'v'	O
:	O
num	char
=	O
'\v'	O
;	O
break	O
;	O
case	O
'?'	O
:	O
num	char
=	O
127	int
;	O
break	O
;	O
case	O
'_'	O
:	O
num	char
=	O
' '	O
;	O
break	O
;	O
case	O
'\0'	O
:	O
state	*(int)
=	O
ST_ERROR	int
;	O
break	O
;	O
default	O
:	O
num	char
=	O
*	O
p	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
state	*(int)
==	O
ST_BACKSLASH	int
)	O
{	O
*	O
(	O
q	*(char)
++	O
)	O
=	O
num	char
;	O
++	O
count	int
;	O
state	*(int)
=	O
ST_GND	int
;	O
}	O
++	O
p	*(char)
;	O
break	O
;	O
case	O
ST_OCTAL	int
:	O
if	O
(	O
*	O
p	*(char)
<	O
'0'	O
||	O
*	O
p	*(char)
>	O
'7'	O
)	O
{	O
*	O
(	O
q	*(char)
++	O
)	O
=	O
num	char
;	O
++	O
count	int
;	O
state	*(int)
=	O
ST_GND	int
;	O
}	O
else	O
num	char
=	O
(	O
num	char
<<	O
3	int
)	O
+	O
(	O
*	O
(	O
p	*(char)
++	O
)	O
-	O
'0'	O
)	O
;	O
break	O
;	O
case	O
ST_HEX	int
:	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
num	char
=	O
(	O
num	char
<<	O
4	int
)	O
+	O
(	O
*	O
(	O
p	*(char)
++	O
)	O
-	O
'0'	O
)	O
;	O
break	O
;	O
case	O
'a'	O
:	O
case	O
'b'	O
:	O
case	O
'c'	O
:	O
case	O
'd'	O
:	O
case	O
'e'	O
:	O
case	O
'f'	O
:	O
num	char
=	O
(	O
num	char
<<	O
4	int
)	O
+	O
(	O
*	O
(	O
p	*(char)
++	O
)	O
-	O
'a'	O
)	O
+	O
10	int
;	O
break	O
;	O
case	O
'A'	O
:	O
case	O
'B'	O
:	O
case	O
'C'	O
:	O
case	O
'D'	O
:	O
case	O
'E'	O
:	O
case	O
'F'	O
:	O
num	char
=	O
(	O
num	char
<<	O
4	int
)	O
+	O
(	O
*	O
(	O
p	*(char)
++	O
)	O
-	O
'A'	O
)	O
+	O
10	int
;	O
break	O
;	O
default	O
:	O
*	O
(	O
q	*(char)
++	O
)	O
=	O
num	char
;	O
++	O
count	int
;	O
state	*(int)
=	O
ST_GND	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
ST_CARET	int
:	O
state	*(int)
=	O
ST_GND	int
;	O
if	O
(	O
*	O
p	*(char)
>=	O
'@'	O
&&	O
*	O
p	*(char)
<=	O
'~'	O
)	O
{	O
*	O
(	O
q	*(char)
++	O
)	O
=	O
*	O
(	O
p	*(char)
++	O
)	O
&	O
037	int
;	O
++	O
count	int
;	O
}	O
else	O
if	O
(	O
*	O
p	*(char)
==	O
'?'	O
)	O
{	O
*	O
(	O
q	*(char)
++	O
)	O
=	O
127	int
;	O
++	O
count	int
;	O
}	O
else	O
state	*(int)
=	O
ST_ERROR	int
;	O
break	O
;	O
default	O
:	O
state	*(int)
=	O
ST_ERROR	int
;	O
break	O
;	O
}	O
}	O
*	O
dest	*(*(char))
=	O
q	*(char)
;	O
*	O
src	*(*(char))
=	O
p	*(char)
;	O
*	O
output_count	*(long)
=	O
count	int
;	O
return	O
state	*(int)
!=	O
ST_ERROR	int
;	O
}	O
void	O
_rl_parse_colors	()->(void)
(	O
)	O
{	O
const	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
buf	*(char)
;	O
int	O
state	*(int)
;	O
int	O
ind_no	int
;	O
char	O
label	array(char)
[	O
3	int
]	O
;	O
COLOR_EXT_TYPE	struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct`,struct`,*`)))))
*	O
ext	struct(long,*(char))
;	O
p	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"LS_COLORS"	*(char)
)	O
;	O
if	O
(	O
p	*(char)
==	O
0	int
||	O
*	O
p	*(char)
==	O
'\0'	O
)	O
{	O
_rl_color_ext_list	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
=	O
NULL	O
;	O
return	O
;	O
}	O
ext	struct(long,*(char))
=	O
NULL	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
label	array(char)
,	O
"??"	*(char)
)	O
;	O
buf	*(char)
=	O
color_buf	*(char)
=	O
savestring	O
(	O
p	*(char)
)	O
;	O
state	*(int)
=	O
1	int
;	O
while	O
(	O
state	*(int)
>	O
0	int
)	O
{	O
switch	O
(	O
state	*(int)
)	O
{	O
case	O
1	int
:	O
switch	O
(	O
*	O
p	*(char)
)	O
{	O
case	O
':'	O
:	O
++	O
p	*(char)
;	O
break	O
;	O
case	O
'*'	O
:	O
ext	struct(long,*(char))
=	O
(	O
COLOR_EXT_TYPE	struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct`,struct`,*`)))))
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
*	O
ext	struct(long,*(char))
)	O
;	O
ext	struct(long,*(char))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
_rl_color_ext_list	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
;	O
_rl_color_ext_list	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
=	O
ext	struct(long,*(char))
;	O
++	O
p	*(char)
;	O
ext	struct(long,*(char))
->	O
ext	struct(long,*(char))
.	O
string	*(char)
=	O
buf	*(char)
;	O
state	*(int)
=	O
(	O
get_funky_string	(*(*(char)),*(*(char)),bool,*(long))->(bool)
(	O
&	O
buf	*(char)
,	O
&	O
p	*(char)
,	O
true	int
,	O
&	O
ext	struct(long,*(char))
->	O
ext	struct(long,*(char))
.	O
len	long
)	O
?	O
4	int
:	O
-	O
1	int
)	O
;	O
break	O
;	O
case	O
'\0'	O
:	O
state	*(int)
=	O
0	int
;	O
break	O
;	O
default	O
:	O
label	array(char)
[	O
0	int
]	O
=	O
*	O
(	O
p	*(char)
++	O
)	O
;	O
state	*(int)
=	O
2	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
2	int
:	O
if	O
(	O
*	O
p	*(char)
)	O
{	O
label	array(char)
[	O
1	int
]	O
=	O
*	O
(	O
p	*(char)
++	O
)	O
;	O
state	*(int)
=	O
3	int
;	O
}	O
else	O
state	*(int)
=	O
-	O
1	int
;	O
break	O
;	O
case	O
3	int
:	O
state	*(int)
=	O
-	O
1	int
;	O
if	O
(	O
*	O
(	O
p	*(char)
++	O
)	O
==	O
'='	O
)	O
{	O
for	O
(	O
ind_no	int
=	O
0	int
;	O
indicator_name	array(*(char))
[	O
ind_no	int
]	O
!=	O
NULL	O
;	O
++	O
ind_no	int
)	O
{	O
if	O
(	O
STREQ	O
(	O
label	array(char)
,	O
indicator_name	array(*(char))
[	O
ind_no	int
]	O
)	O
)	O
{	O
_rl_color_indicator	array(struct(long,*(char)))
[	O
ind_no	int
]	O
.	O
string	*(char)
=	O
buf	*(char)
;	O
state	*(int)
=	O
(	O
get_funky_string	(*(*(char)),*(*(char)),bool,*(long))->(bool)
(	O
&	O
buf	*(char)
,	O
&	O
p	*(char)
,	O
false	int
,	O
&	O
_rl_color_indicator	array(struct(long,*(char)))
[	O
ind_no	int
]	O
.	O
len	long
)	O
?	O
1	int
:	O
-	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
==	O
-	O
1	int
)	O
{	O
_rl_errmsg	(*(char))->(void)
(	O
"LS_COLORS: unrecognized prefix: %s"	*(char)
,	O
label	array(char)
)	O
;	O
while	O
(	O
p	*(char)
&&	O
*	O
p	*(char)
&&	O
*	O
p	*(char)
!=	O
':'	O
)	O
p	*(char)
++	O
;	O
if	O
(	O
p	*(char)
&&	O
*	O
p	*(char)
==	O
':'	O
)	O
state	*(int)
=	O
1	int
;	O
else	O
if	O
(	O
p	*(char)
&&	O
*	O
p	*(char)
==	O
0	int
)	O
state	*(int)
=	O
0	int
;	O
}	O
}	O
break	O
;	O
case	O
4	int
:	O
if	O
(	O
*	O
(	O
p	*(char)
++	O
)	O
==	O
'='	O
)	O
{	O
ext	struct(long,*(char))
->	O
seq	struct(long,*(char))
.	O
string	*(char)
=	O
buf	*(char)
;	O
state	*(int)
=	O
(	O
get_funky_string	(*(*(char)),*(*(char)),bool,*(long))->(bool)
(	O
&	O
buf	*(char)
,	O
&	O
p	*(char)
,	O
false	int
,	O
&	O
ext	struct(long,*(char))
->	O
seq	struct(long,*(char))
.	O
len	long
)	O
?	O
1	int
:	O
-	O
1	int
)	O
;	O
}	O
else	O
state	*(int)
=	O
-	O
1	int
;	O
if	O
(	O
state	*(int)
==	O
-	O
1	int
&&	O
ext	struct(long,*(char))
->	O
ext	struct(long,*(char))
.	O
string	*(char)
)	O
_rl_errmsg	(*(char))->(void)
(	O
"LS_COLORS: syntax error: %s"	*(char)
,	O
ext	struct(long,*(char))
->	O
ext	struct(long,*(char))
.	O
string	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
state	*(int)
<	O
0	int
)	O
{	O
COLOR_EXT_TYPE	struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct`,struct`,*`)))))
*	O
e	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
;	O
COLOR_EXT_TYPE	struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct`,struct`,*`)))))
*	O
e2	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
;	O
_rl_errmsg	(*(char))->(void)
(	O
"unparsable value for LS_COLORS environment variable"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
color_buf	*(char)
)	O
;	O
for	O
(	O
e	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
=	O
_rl_color_ext_list	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
;	O
e	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
!=	O
NULL	O
;	O
)	O
{	O
e2	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
=	O
e	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
;	O
e	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
=	O
e	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
->	O
next	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
free	(*(void))->(void)
(	O
e2	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
)	O
;	O
}	O
_rl_color_ext_list	*(struct(struct(long,*(char)),struct(long,*(char)),*(struct(struct(long,*`),struct(long,*`),*(struct`)))))
=	O
NULL	O
;	O
_rl_colored_stats	int
=	O
0	int
;	O
}	O
}	O
