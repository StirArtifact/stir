typedef	O
struct	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
{	O
struct	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
struct	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
unsigned	O
int	O
height	int
;	O
uintptr_t	long
address	*(void)
;	O
size_t	long
len	long
;	O
sigsegv_area_handler_t	*((*(void),*(void))->(int))
handler	*((*(void),int)->(int))
;	O
void	O
*	O
handler_arg	*(void)
;	O
}	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
;	O
static	O
void	O
rebalance	(*(*(*(struct(*`,*`,int,long,long,*`,*`)))),int)->(void)
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
*	O
nodeplaces_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
,	O
unsigned	O
int	O
count	int
)	O
{	O
if	O
(	O
count	int
>	O
0	int
)	O
do	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
*	O
--	O
nodeplaces_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
unsigned	O
int	O
heightleft	int
=	O
heightof	O
(	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
;	O
unsigned	O
int	O
heightright	int
=	O
heightof	O
(	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
;	O
if	O
(	O
heightright	int
+	O
1	int
<	O
heightleft	int
)	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
nodeleftleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
unsigned	O
int	O
heightleftright	int
=	O
heightof	O
(	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
;	O
if	O
(	O
heightof	O
(	O
nodeleftleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
>=	O
heightleftright	int
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
1	int
+	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
1	int
+	O
heightleftright	int
)	O
;	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
else	O
{	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
heightleftright	int
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
heightleft	int
;	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
}	O
else	O
if	O
(	O
heightleft	int
+	O
1	int
<	O
heightright	int
)	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
noderightright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
unsigned	O
int	O
heightrightleft	int
=	O
heightof	O
(	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
;	O
if	O
(	O
heightof	O
(	O
noderightright	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
>=	O
heightrightleft	int
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
1	int
+	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
1	int
+	O
heightrightleft	int
)	O
;	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
else	O
{	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
heightrightleft	int
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
heightright	int
;	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
}	O
else	O
{	O
unsigned	O
int	O
height	int
=	O
(	O
heightleft	int
<	O
heightright	int
?	O
heightright	int
:	O
heightleft	int
)	O
+	O
1	int
;	O
if	O
(	O
height	int
==	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
)	O
break	O
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
height	int
;	O
}	O
}	O
while	O
(	O
--	O
count	int
>	O
0	int
)	O
;	O
}	O
static	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
insert	(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))->(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
,	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
tree	*(void)
)	O
{	O
uintptr_t	long
key	long
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
address	*(void)
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
tree	*(void)
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
stack	array(*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void)))))
[	O
MAXHEIGHT	int
]	O
;	O
unsigned	O
int	O
stack_count	int
=	O
0	int
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
*	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
=	O
&	O
stack	array(*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void)))))
[	O
0	int
]	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
==	O
empty	O
)	O
break	O
;	O
*	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
++	O
=	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
stack_count	int
++	O
;	O
if	O
(	O
key	long
<	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
address	*(void)
)	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
else	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
empty	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
empty	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
1	int
;	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
rebalance	(*(*(*(struct(*`,*`,int,long,long,*`,*`)))),int)->(void)
(	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
,	O
stack_count	int
)	O
;	O
return	O
tree	*(void)
;	O
}	O
static	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
delete	(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))->(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
,	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
tree	*(void)
)	O
{	O
uintptr_t	long
key	long
=	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
address	*(void)
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
tree	*(void)
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
stack	array(*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void)))))
[	O
MAXHEIGHT	int
]	O
;	O
unsigned	O
int	O
stack_count	int
=	O
0	int
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
*	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
=	O
&	O
stack	array(*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void)))))
[	O
0	int
]	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
==	O
empty	O
)	O
return	O
tree	*(void)
;	O
*	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
++	O
=	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
stack_count	int
++	O
;	O
if	O
(	O
key	long
==	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
address	*(void)
)	O
{	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
!=	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
key	long
<	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
address	*(void)
)	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
else	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
nodeplace_to_delete	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
if	O
(	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
==	O
empty	O
)	O
{	O
*	O
nodeplace_to_delete	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
--	O
;	O
stack_count	int
--	O
;	O
}	O
else	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
*	O
stack_ptr_to_delete	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
=	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
for	O
(	O
;	O
;	O
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
==	O
empty	O
)	O
break	O
;	O
*	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
++	O
=	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
;	O
stack_count	int
++	O
;	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
*	O
nodeplace	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
=	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
height	int
;	O
*	O
nodeplace_to_delete	*(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
*	O
stack_ptr_to_delete	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
}	O
rebalance	(*(*(*(struct(*`,*`,int,long,long,*`,*`)))),int)->(void)
(	O
stack_ptr	*(*(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void)))))
,	O
stack_count	int
)	O
;	O
return	O
tree	*(void)
;	O
}	O
void	O
sigsegv_init	(*(struct(*(void))))->(void)
(	O
sigsegv_dispatcher	struct(*(void))
*	O
dispatcher	*(struct(*(void)))
)	O
{	O
dispatcher	*(struct(*(void)))
->	O
tree	*(void)
=	O
empty	O
;	O
}	O
void	O
*	O
sigsegv_register	(*(struct(*(void))),*(void),long,*((*(void),*(void))->(int)),*(void))->(*(void))
(	O
sigsegv_dispatcher	struct(*(void))
*	O
dispatcher	*(struct(*(void)))
,	O
void	O
*	O
address	*(void)
,	O
size_t	long
len	long
,	O
sigsegv_area_handler_t	*((*(void),*(void))->(int))
handler	*((*(void),int)->(int))
,	O
void	O
*	O
handler_arg	*(void)
)	O
{	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
NULL	O
;	O
else	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
)	O
)	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
address	*(void)
=	O
(	O
uintptr_t	long
)	O
address	*(void)
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
len	long
=	O
len	long
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
handler	*((*(void),int)->(int))
=	O
handler	*((*(void),int)->(int))
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
->	O
handler_arg	*(void)
=	O
handler_arg	*(void)
;	O
dispatcher	*(struct(*(void)))
->	O
tree	*(void)
=	O
insert	(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))->(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
(	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
,	O
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
)	O
dispatcher	*(struct(*(void)))
->	O
tree	*(void)
)	O
;	O
return	O
new_node	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
}	O
}	O
void	O
sigsegv_unregister	(*(struct(*(void))),*(void))->(void)
(	O
sigsegv_dispatcher	struct(*(void))
*	O
dispatcher	*(struct(*(void)))
,	O
void	O
*	O
ticket	*(void)
)	O
{	O
if	O
(	O
ticket	*(void)
!=	O
NULL	O
)	O
{	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
=	O
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
)	O
ticket	*(void)
;	O
dispatcher	*(struct(*(void)))
->	O
tree	*(void)
=	O
delete	(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))->(*(struct(*(struct(*`,*`,int,long,long,*`,*`)),*(struct(*`,*`,int,long,long,*`,*`)),int,long,long,*((*`,*`)->(int)),*(void))))
(	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
,	O
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
)	O
dispatcher	*(struct(*(void)))
->	O
tree	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
node_to_delete	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
)	O
;	O
}	O
}	O
int	O
sigsegv_dispatch	(*(struct(*(void))),*(void))->(int)
(	O
sigsegv_dispatcher	struct(*(void))
*	O
dispatcher	*(struct(*(void)))
,	O
void	O
*	O
fault_address	*(void)
)	O
{	O
uintptr_t	long
key	long
=	O
(	O
uintptr_t	long
)	O
fault_address	*(void)
;	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
tree	*(void)
=	O
(	O
node_t	struct(*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void))
*	O
)	O
dispatcher	*(struct(*(void)))
->	O
tree	*(void)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
tree	*(void)
==	O
empty	O
)	O
return	O
0	int
;	O
if	O
(	O
key	long
<	O
tree	*(void)
->	O
address	*(void)
)	O
tree	*(void)
=	O
tree	*(void)
->	O
left	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
else	O
if	O
(	O
key	long
-	O
tree	*(void)
->	O
address	*(void)
>=	O
tree	*(void)
->	O
len	long
)	O
tree	*(void)
=	O
tree	*(void)
->	O
right	*(struct(*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),*(struct(*(struct`),*(struct`),int,long,long,*((*`,*`)->(int)),*(void))),int,long,long,*((*(void),*(void))->(int)),*(void)))
;	O
else	O
break	O
;	O
}	O
return	O
(	O
*	O
tree	*(void)
->	O
handler	*((*(void),int)->(int))
)	O
(	O
fault_address	*(void)
,	O
tree	*(void)
->	O
handler_arg	*(void)
)	O
;	O
}	O
