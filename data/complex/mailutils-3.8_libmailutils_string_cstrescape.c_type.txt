int	O
mu_c_str_escape	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
char	O
const	O
*	O
str	*(char)
,	O
char	O
const	O
*	O
chr	*(char)
,	O
char	O
const	O
*	O
xtab	*(char)
,	O
char	O
*	O
*	O
ret_str	*(*(char))
)	O
{	O
char	O
*	O
newstr	*(char)
;	O
size_t	long
n	long
;	O
int	O
c	int
;	O
if	O
(	O
!	O
ret_str	*(*(char))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
str	*(char)
)	O
{	O
*	O
ret_str	*(*(char))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
chr	*(char)
)	O
{	O
newstr	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
return	O
errno	O
;	O
*	O
ret_str	*(*(char))
=	O
newstr	*(char)
;	O
return	O
0	int
;	O
}	O
n	long
=	O
strlen	(*(char))->(long)
(	O
chr	*(char)
)	O
;	O
if	O
(	O
xtab	*(char)
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
xtab	*(char)
)	O
!=	O
n	long
)	O
return	O
EINVAL	int
;	O
}	O
else	O
xtab	*(char)
=	O
chr	*(char)
;	O
n	long
=	O
mu_str_count	(*(char),*(char),*(long))->(long)
(	O
str	*(char)
,	O
chr	*(char)
,	O
NULL	O
)	O
;	O
newstr	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
+	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
newstr	*(char)
)	O
return	O
errno	O
;	O
*	O
ret_str	*(*(char))
=	O
newstr	*(char)
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
newstr	*(char)
,	O
str	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
while	O
(	O
(	O
c	int
=	O
*	O
str	*(char)
++	O
)	O
!=	O
0	int
)	O
{	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
chr	*(char)
,	O
c	int
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
*	O
newstr	*(char)
++	O
=	O
'\\'	O
;	O
*	O
newstr	*(char)
++	O
=	O
xtab	*(char)
[	O
p	*(char)
-	O
chr	*(char)
]	O
;	O
}	O
else	O
*	O
newstr	*(char)
++	O
=	O
c	int
;	O
}	O
*	O
newstr	*(char)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_c_str_escape_trans	(*(char),*(char),*(*(char)))->(int)
(	O
char	O
const	O
*	O
str	*(char)
,	O
char	O
const	O
*	O
trans	*(char)
,	O
char	O
*	O
*	O
ret_str	*(*(char))
)	O
{	O
char	O
*	O
chr	*(char)
,	O
*	O
xtab	*(char)
;	O
size_t	long
n	long
,	O
i	long
;	O
int	O
rc	int
;	O
if	O
(	O
trans	*(char)
)	O
{	O
n	long
=	O
strlen	(*(char))->(long)
(	O
trans	*(char)
)	O
;	O
if	O
(	O
n	long
%	O
2	int
)	O
return	O
EINVAL	int
;	O
chr	*(char)
=	O
malloc	(long)->(*(void))
(	O
n	long
+	O
2	int
)	O
;	O
if	O
(	O
!	O
chr	*(char)
)	O
return	O
errno	O
;	O
xtab	*(char)
=	O
chr	*(char)
+	O
n	long
/	O
2	int
+	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
+=	O
2	int
)	O
{	O
chr	*(char)
[	O
i	long
/	O
2	int
]	O
=	O
trans	*(char)
[	O
i	long
+	O
1	int
]	O
;	O
xtab	*(char)
[	O
i	long
/	O
2	int
]	O
=	O
trans	*(char)
[	O
i	long
]	O
;	O
}	O
chr	*(char)
[	O
i	long
/	O
2	int
]	O
=	O
xtab	*(char)
[	O
i	long
/	O
2	int
]	O
=	O
0	int
;	O
}	O
else	O
{	O
chr	*(char)
=	O
xtab	*(char)
=	O
NULL	O
;	O
}	O
rc	int
=	O
mu_c_str_escape	(*(char),*(char),*(char),*(*(char)))->(int)
(	O
str	*(char)
,	O
chr	*(char)
,	O
xtab	*(char)
,	O
ret_str	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
chr	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
