char	O
*	O
pmap_service_name	*(char)
=	O
"sunrpc"	*(char)
;	O
short	O
pmap_service_number	short
=	O
PMAPPORT	O
;	O
int	O
mount_program	int
=	O
MOUNTPROG	O
;	O
int	O
mount_version	int
=	O
MOUNTVERS	O
;	O
short	O
mount_port	short
=	O
0	int
;	O
int	O
mount_port_override	int
=	O
0	int
;	O
int	O
nfs_program	int
=	O
NFS_PROGRAM	O
;	O
int	O
nfs_version	int
=	O
NFS_VERSION	O
;	O
short	O
nfs_port	short
=	O
NFS_PORT	int
;	O
int	O
nfs_port_override	int
=	O
0	int
;	O
const	O
char	O
*	O
mounted_hostname	*(char)
;	O
uint16_t	short
mounted_nfs_port	short
;	O
int	O
protocol_version	int
=	O
2	int
;	O
static	O
int	O
*	O
pmap_initialize_rpc	(int,*(*(void)))->(*(int))
(	O
int	O
procnum	int
,	O
void	O
*	O
*	O
buf	*(void)
)	O
{	O
return	O
initialize_rpc	(int,int,int,long,*(*(void)),int,int,int)->(*(int))
(	O
PMAPPROG	O
,	O
PMAPVERS	O
,	O
procnum	int
,	O
0	int
,	O
buf	*(void)
,	O
0	int
,	O
0	int
,	O
-	O
1	int
)	O
;	O
}	O
static	O
int	O
*	O
mount_initialize_rpc	(int,*(*(void)))->(*(int))
(	O
int	O
procnum	int
,	O
void	O
*	O
*	O
buf	*(void)
)	O
{	O
return	O
initialize_rpc	(int,int,int,long,*(*(void)),int,int,int)->(*(int))
(	O
MOUNTPROG	O
,	O
MOUNTVERS	O
,	O
procnum	int
,	O
0	int
,	O
buf	*(void)
,	O
0	int
,	O
0	int
,	O
-	O
1	int
)	O
;	O
}	O
struct	O
node	O
*	O
mount_root	(*(char),*(char))->(*(struct))
(	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
host	*(char)
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(short,short,struct(int),array(char))
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
int	O
*	O
p	*(int)
;	O
void	O
*	O
rpcbuf	*(void)
;	O
int	O
port	int
;	O
error_t	int
err	long
;	O
struct	O
node	O
*	O
np	*(struct)
;	O
short	O
pmapport	short
;	O
if	O
(	O
pmap_service_name	*(char)
)	O
{	O
struct	O
servent	struct(*(char),*(*(char)),int,*(char))
*	O
s	*(struct(*(char),*(*(char)),int,*(char)))
;	O
s	*(struct(*(char),*(*(char)),int,*(char)))
=	O
getservbyname	(*(char),*(char))->(*(struct(*(char),*(*(char)),int,*(char))))
(	O
"sunrpc"	*(char)
,	O
pmap_service_name	*(char)
)	O
;	O
if	O
(	O
s	*(struct(*(char),*(*(char)),int,*(char)))
)	O
pmapport	short
=	O
s	*(struct(*(char),*(*(char)),int,*(char)))
->	O
s_port	int
;	O
else	O
pmapport	short
=	O
htons	(short)->(short)
(	O
pmap_service_number	short
)	O
;	O
}	O
else	O
pmapport	short
=	O
htons	(short)->(short)
(	O
pmap_service_number	short
)	O
;	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
host	*(char)
)	O
;	O
if	O
(	O
!	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
herror	(*(char))->(void)
(	O
host	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addrtype	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
,	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
0	int
]	O
,	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_length	int
)	O
;	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
pmapport	short
;	O
if	O
(	O
mount_port_override	int
)	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
mount_port	short
)	O
;	O
else	O
{	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"server mount program"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
p	*(int)
=	O
pmap_initialize_rpc	(int,*(*(void)))->(*(int))
(	O
PMAPPROC_GETPORT	O
,	O
&	O
rpcbuf	*(void)
)	O
;	O
if	O
(	O
!	O
p	*(int)
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"creating rpc packet"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
MOUNTPROG	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
MOUNTVERS	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
IPPROTO_UDP	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
0	int
)	O
;	O
err	long
=	O
conduct_rpc	(*(*(void)),*(*(int)))->(int)
(	O
&	O
rpcbuf	*(void)
,	O
&	O
p	*(int)
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
port	int
=	O
ntohl	(int)->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	int
)	O
;	O
}	O
else	O
if	O
(	O
mount_port	short
)	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
mount_port	short
)	O
;	O
else	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	long
,	O
"portmap of mount"	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
free	(*(void))->(void)
(	O
rpcbuf	*(void)
)	O
;	O
}	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"connect"	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
p	*(int)
=	O
mount_initialize_rpc	(int,*(*(void)))->(*(int))
(	O
MOUNTPROC_MNT	O
,	O
&	O
rpcbuf	*(void)
)	O
;	O
if	O
(	O
!	O
p	*(int)
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"rpc"	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
p	*(int)
=	O
xdr_encode_string	(*(int),*(char))->(*(int))
(	O
p	*(int)
,	O
name	*(char)
)	O
;	O
err	long
=	O
conduct_rpc	(*(*(void)),*(*(int)))->(int)
(	O
&	O
rpcbuf	*(void)
,	O
&	O
p	*(int)
)	O
;	O
if	O
(	O
err	long
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	long
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
err	long
=	O
nfs_error_trans	(int)->(int)
(	O
htonl	(int)->(int)
(	O
*	O
p	*(int)
)	O
)	O
;	O
p	*(int)
++	O
;	O
if	O
(	O
err	long
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	long
,	O
"%s"	*(char)
,	O
name	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
xdr_decode_fhandle	(*(int),*(*(struct)))->(*(int))
(	O
p	*(int)
,	O
&	O
np	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
rpcbuf	*(void)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
np	*(struct)
->	O
lock	O
)	O
;	O
if	O
(	O
nfs_port_override	int
)	O
port	int
=	O
nfs_port	short
;	O
else	O
{	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
pmapport	short
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"connect"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
p	*(int)
=	O
pmap_initialize_rpc	(int,*(*(void)))->(*(int))
(	O
PMAPPROC_GETPORT	O
,	O
&	O
rpcbuf	*(void)
)	O
;	O
if	O
(	O
!	O
p	*(int)
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"rpc"	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
NFS_PROGRAM	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
NFS_VERSION	O
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
IPPROTO_UDP	int
)	O
;	O
*	O
(	O
p	*(int)
++	O
)	O
=	O
htonl	(int)->(int)
(	O
0	int
)	O
;	O
err	long
=	O
conduct_rpc	(*(*(void)),*(*(int)))->(int)
(	O
&	O
rpcbuf	*(void)
,	O
&	O
p	*(int)
)	O
;	O
if	O
(	O
!	O
err	long
)	O
{	O
port	int
=	O
ntohl	(int)->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
}	O
else	O
if	O
(	O
nfs_port	short
)	O
port	int
=	O
nfs_port	short
;	O
else	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
err	long
,	O
"portmap of nfs server"	*(char)
)	O
;	O
goto	O
error_with_rpcbuf	O
;	O
}	O
free	(*(void))->(void)
(	O
rpcbuf	*(void)
)	O
;	O
}	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	int
)	O
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
main_udp_socket	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
)	O
)	O
==	O
-	O
1	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"connect"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
mounted_hostname	*(char)
=	O
host	*(char)
;	O
mounted_nfs_port	short
=	O
port	int
;	O
return	O
np	*(struct)
;	O
error_with_rpcbuf	O
:	O
free	(*(void))->(void)
(	O
rpcbuf	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
