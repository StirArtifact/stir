static	O
hurd_ihash_key_t	long
ihash_hash	(*(void))->(long)
(	O
const	O
void	O
*	O
data	array(char)
)	O
{	O
const	O
struct	O
fhandle	struct(long,array(char))
*	O
handle	struct(long,array(char))
=	O
(	O
struct	O
fhandle	struct(long,array(char))
*	O
)	O
data	array(char)
;	O
return	O
(	O
hurd_ihash_key_t	long
)	O
hurd_ihash_hash32	(*(void),long,int)->(int)
(	O
handle	struct(long,array(char))
->	O
data	array(char)
,	O
handle	struct(long,array(char))
->	O
size	long
,	O
0	int
)	O
;	O
}	O
static	O
int	O
ihash_compare	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
key1	*(void)
,	O
const	O
void	O
*	O
key2	*(void)
)	O
{	O
const	O
struct	O
fhandle	struct(long,array(char))
*	O
handle1	*(struct(long,array(char)))
=	O
(	O
struct	O
fhandle	struct(long,array(char))
*	O
)	O
key1	*(void)
;	O
const	O
struct	O
fhandle	struct(long,array(char))
*	O
handle2	*(struct(long,array(char)))
=	O
(	O
struct	O
fhandle	struct(long,array(char))
*	O
)	O
key2	*(void)
;	O
return	O
handle1	*(struct(long,array(char)))
->	O
size	long
==	O
handle2	*(struct(long,array(char)))
->	O
size	long
&&	O
memcmp	O
(	O
handle1	*(struct(long,array(char)))
->	O
data	array(char)
,	O
handle2	*(struct(long,array(char)))
->	O
data	array(char)
,	O
handle1	*(struct(long,array(char)))
->	O
size	long
)	O
==	O
0	int
;	O
}	O
static	O
struct	O
hurd_ihash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
nodehash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
=	O
HURD_IHASH_INITIALIZER_GKI	O
(	O
sizeof	O
(	O
struct	O
node	O
)	O
+	O
offsetof	O
(	O
struct	O
netnode	struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char))
,	O
slot	*(*(*(void)))
)	O
,	O
NULL	O
,	O
NULL	O
,	O
ihash_hash	(*(void))->(long)
,	O
ihash_compare	(*(void),*(void))->(int)
)	O
;	O
pthread_mutex_t	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
=	O
PTHREAD_MUTEX_INITIALIZER	O
;	O
void	O
lookup_fhandle	(*(struct(long,array(char))),*(*(struct)))->(void)
(	O
struct	O
fhandle	struct(long,array(char))
*	O
handle	struct(long,array(char))
,	O
struct	O
node	O
*	O
*	O
npp	*(*(struct))
)	O
{	O
struct	O
node	O
*	O
np	*(struct)
;	O
struct	O
netnode	struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char))
*	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
np	*(struct)
=	O
hurd_ihash_find	(*(struct(long,*(struct(*`,long)),long,long,int,*((*`,*`)->(void)),*(void),*((*`)->(long)),*((*`,*`)->(int)),long)),long)->(*(void))
(	O
&	O
nodehash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
,	O
(	O
hurd_ihash_key_t	long
)	O
handle	struct(long,array(char))
)	O
;	O
if	O
(	O
np	*(struct)
)	O
{	O
netfs_nref	()->(int)
(	O
np	*(struct)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
np	*(struct)
->	O
lock	O
)	O
;	O
*	O
npp	*(*(struct))
=	O
np	*(struct)
;	O
return	O
;	O
}	O
np	*(struct)
=	O
netfs_make_node_alloc	()->(int)
(	O
sizeof	O
(	O
struct	O
netnode	struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char))
)	O
)	O
;	O
assert	()->(int)
(	O
np	*(struct)
)	O
;	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
=	O
netfs_node_netnode	()->(int)
(	O
np	*(struct)
)	O
;	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
handle	struct(long,array(char))
.	O
size	long
=	O
handle	struct(long,array(char))
->	O
size	long
;	O
memcpy	O
(	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
handle	struct(long,array(char))
.	O
data	array(char)
,	O
handle	struct(long,array(char))
->	O
data	array(char)
,	O
handle	struct(long,array(char))
->	O
size	long
)	O
;	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
stat_updated	long
=	O
0	int
;	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dtrans	enum(int,int,int,int,int,int,int)
=	O
NOT_POSSIBLE	int
;	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_dir	*(struct)
=	O
0	int
;	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_name	*(char)
=	O
0	int
;	O
hurd_ihash_add	(*(struct(long,*(struct(*`,long)),long,long,int,*((*`,*`)->(void)),*(void),*((*`)->(long)),*((*`,*`)->(int)),long)),long,*(void))->(int)
(	O
&	O
nodehash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
,	O
(	O
hurd_ihash_key_t	long
)	O
&	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
handle	struct(long,array(char))
,	O
np	*(struct)
)	O
;	O
netfs_nref_light	()->(int)
(	O
np	*(struct)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
np	*(struct)
->	O
lock	O
)	O
;	O
*	O
npp	*(*(struct))
=	O
np	*(struct)
;	O
}	O
struct	O
fnd	struct(*(struct),*(char))
{	O
struct	O
node	O
*	O
dir	*(struct)
;	O
char	O
*	O
name	*(char)
;	O
}	O
;	O
void	O
*	O
forked_node_delete	(*(void))->(*(void))
(	O
void	O
*	O
arg	*(void)
)	O
{	O
struct	O
fnd	struct(*(struct),*(char))
*	O
args	*(struct(*(struct),*(char)))
=	O
arg	*(void)
;	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
args	*(struct(*(struct),*(char)))
->	O
dir	*(struct)
->	O
lock	O
)	O
;	O
netfs_attempt_unlink	()->(int)
(	O
(	O
struct	O
iouser	O
*	O
)	O
-	O
1	int
,	O
args	*(struct(*(struct),*(char)))
->	O
dir	*(struct)
,	O
args	*(struct(*(struct),*(char)))
->	O
name	*(char)
)	O
;	O
netfs_nput	()->(int)
(	O
args	*(struct(*(struct),*(char)))
->	O
dir	*(struct)
)	O
;	O
free	()->(int)
(	O
args	*(struct(*(struct),*(char)))
->	O
name	*(char)
)	O
;	O
free	()->(int)
(	O
args	*(struct(*(struct),*(char)))
)	O
;	O
return	O
0	int
;	O
}	O
;	O
void	O
netfs_node_norefs	(*(struct))->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_dir	*(struct)
)	O
{	O
struct	O
fnd	struct(*(struct),*(char))
*	O
args	*(struct(*(struct),*(char)))
;	O
pthread_t	long
thread	long
;	O
error_t	int
err	int
;	O
args	*(struct(*(struct),*(char)))
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
fnd	struct(*(struct),*(char))
)	O
)	O
;	O
assert	()->(int)
(	O
args	*(struct(*(struct),*(char)))
)	O
;	O
args	*(struct(*(struct),*(char)))
->	O
dir	*(struct)
=	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_dir	*(struct)
;	O
args	*(struct(*(struct),*(char)))
->	O
name	*(char)
=	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_name	*(char)
;	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_dir	*(struct)
=	O
0	int
;	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dead_name	*(char)
=	O
0	int
;	O
err	int
=	O
pthread_create	(*(long),*(union(array(char),long)),*((*(void))->(*(void))),*(void))->(int)
(	O
&	O
thread	long
,	O
NULL	O
,	O
forked_node_delete	(*(void))->(*(void))
,	O
args	*(struct(*(struct),*(char)))
)	O
;	O
if	O
(	O
!	O
err	int
)	O
pthread_detach	(long)->(int)
(	O
thread	long
)	O
;	O
else	O
{	O
errno	O
=	O
err	int
;	O
perror	()->(int)
(	O
"pthread_create"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
dtrans	enum(int,int,int,int,int,int,int)
==	O
SYMLINK	int
)	O
free	()->(int)
(	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
transarg	union(*(char),long)
.	O
name	*(char)
)	O
;	O
free	()->(int)
(	O
np	*(struct)
)	O
;	O
}	O
}	O
void	O
netfs_try_dropping_softrefs	(*(struct))->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
hurd_ihash_locp_remove	(*(struct(long,*(struct(*`,long)),long,long,int,*((*`,*`)->(void)),*(void),*((*`)->(long)),*((*`,*`)->(int)),long)),*(*(void)))->(void)
(	O
&	O
nodehash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
,	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
slot	*(*(*(void)))
)	O
;	O
netfs_nrele_light	()->(int)
(	O
np	*(struct)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
}	O
int	O
*	O
recache_handle	(*(int),*(struct))->(*(int))
(	O
int	O
*	O
p	*(int)
,	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
size_t	long
len	long
;	O
if	O
(	O
protocol_version	int
==	O
2	int
)	O
len	long
=	O
NFS2_FHSIZE	int
;	O
else	O
{	O
len	long
=	O
ntohl	()->(int)
(	O
*	O
p	*(int)
)	O
;	O
p	*(int)
++	O
;	O
}	O
pthread_mutex_lock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
hurd_ihash_locp_remove	(*(struct(long,*(struct(*`,long)),long,long,int,*((*`,*`)->(void)),*(void),*((*`)->(long)),*((*`,*`)->(int)),long)),*(*(void)))->(void)
(	O
&	O
nodehash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
,	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
slot	*(*(*(void)))
)	O
;	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
handle	struct(long,array(char))
.	O
size	long
=	O
len	long
;	O
memcpy	O
(	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
handle	struct(long,array(char))
.	O
data	array(char)
,	O
p	*(int)
,	O
len	long
)	O
;	O
hurd_ihash_add	(*(struct(long,*(struct(*`,long)),long,long,int,*((*`,*`)->(void)),*(void),*((*`)->(long)),*((*`,*`)->(int)),long)),long,*(void))->(int)
(	O
&	O
nodehash	struct(long,*(struct(*(void),long)),long,long,int,*((*(void),*(void))->(void)),*(void),*((*(void))->(long)),*((*(void),*(void))->(int)),long)
,	O
(	O
hurd_ihash_key_t	long
)	O
&	O
np	*(struct)
->	O
nn	*(struct(*(*(void)),struct(long,array(char)),long,enum(int,int,int,int,int,int,int),union(*(char),long),*(struct),*(struct),*(char)))
->	O
handle	struct(long,array(char))
,	O
np	*(struct)
)	O
;	O
pthread_mutex_unlock	(*(union(struct(int,int,int,int,int,short,short,struct(*`,*`)),array(char),long)))->(int)
(	O
&	O
nodehash_ihash_lock	union(struct(int,int,int,int,int,short,short,struct(*(struct(*`,*`)),*(struct(*`,*`)))),array(char),long)
)	O
;	O
return	O
p	*(int)
+	O
len	long
/	O
sizeof	O
(	O
int	O
)	O
;	O
}	O
