typedef	O
enum	O
{	O
STATE_START	O
,	O
STATE_AFTER_OPEN_ANGLE	O
,	O
STATE_AFTER_CLOSE_ANGLE	O
,	O
STATE_AFTER_ELISION_SLASH	O
,	O
STATE_INSIDE_OPEN_TAG_NAME	O
,	O
STATE_INSIDE_ATTRIBUTE_NAME	O
,	O
STATE_AFTER_ATTRIBUTE_NAME	O
,	O
STATE_BETWEEN_ATTRIBUTES	O
,	O
STATE_AFTER_ATTRIBUTE_EQUALS_SIGN	O
,	O
STATE_INSIDE_ATTRIBUTE_VALUE_SQ	O
,	O
STATE_INSIDE_ATTRIBUTE_VALUE_DQ	O
,	O
STATE_INSIDE_TEXT	O
,	O
STATE_AFTER_CLOSE_TAG_SLASH	O
,	O
STATE_INSIDE_CLOSE_TAG_NAME	O
,	O
STATE_AFTER_CLOSE_TAG_NAME	O
,	O
STATE_INSIDE_PASSTHROUGH	O
,	O
STATE_ERROR	O
}	O
markup_parse_state_ty	O
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
prev_element	*(char)
;	O
const	O
markup_parser_ty	O
*	O
prev_parser	*(int)
;	O
void	O
*	O
prev_user_data	*(void)
;	O
}	O
markup_recursion_tracker_ty	struct(*(char),*(int),*(void))
;	O
typedef	O
struct	O
{	O
char	O
*	O
buffer	*(char)
;	O
size_t	O
bufmax	int
;	O
size_t	O
buflen	int
;	O
}	O
markup_string_ty	struct(*(char),int,int)
;	O
struct	O
_markup_parse_context_ty	struct(*(int),int,int,int,int,*(void),*(struct(*(char),int,int)),int,*(*(char)),*(*(char)),int,int,*(char),int,*(char),*(char),*(char),*(char),int,int,int,int,int,*(char))
{	O
const	O
markup_parser_ty	O
*	O
parser	*(int)
;	O
markup_parse_flags_ty	O
flags	int
;	O
int	O
line_number	int
;	O
int	O
char_number	int
;	O
markup_parse_state_ty	O
state	int
;	O
void	O
*	O
user_data	*(void)
;	O
markup_string_ty	struct(*(char),int,int)
*	O
partial_chunk	*(struct(*(char),int,int))
;	O
gl_list_t	O
tag_stack	int
;	O
char	O
*	O
*	O
attr_names	*(*(char))
;	O
char	O
*	O
*	O
attr_values	*(*(char))
;	O
int	O
cur_attr	int
;	O
int	O
alloc_attrs	int
;	O
const	O
char	O
*	O
current_text	*(char)
;	O
ssize_t	O
current_text_len	int
;	O
const	O
char	O
*	O
current_text_end	*(char)
;	O
const	O
char	O
*	O
start	*(char)
;	O
const	O
char	O
*	O
iter	*(char)
;	O
char	O
*	O
error_text	*(char)
;	O
unsigned	O
int	O
document_empty	int
:	O
1	int
;	O
unsigned	O
int	O
parsing	int
:	O
1	int
;	O
unsigned	O
int	O
awaiting_pop	int
:	O
1	int
;	O
int	O
balance	int
;	O
gl_list_t	O
subparser_stack	int
;	O
const	O
char	O
*	O
subparser_element	*(char)
;	O
}	O
;	O
static	O
markup_string_ty	struct(*(char),int,int)
*	O
markup_string_new	()->(*(struct(*(char),int,int)))
(	O
void	O
)	O
{	O
return	O
XZALLOC	()->(int)
(	O
markup_string_ty	struct(*(char),int,int)
)	O
;	O
}	O
static	O
char	O
*	O
markup_string_free	(*(struct(*(char),int,int)),int)->(*(char))
(	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
,	O
bool	O
free_segment	int
)	O
{	O
if	O
(	O
free_segment	int
)	O
{	O
free	()->(int)
(	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
)	O
;	O
free	()->(int)
(	O
string	*(struct(*(char),int,int))
)	O
;	O
return	O
NULL	O
;	O
}	O
else	O
{	O
char	O
*	O
result	*(char)
=	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
;	O
free	()->(int)
(	O
string	*(struct(*(char),int,int))
)	O
;	O
return	O
result	*(char)
;	O
}	O
}	O
static	O
void	O
markup_string_free1	(*(struct(*(char),int,int)))->(void)
(	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
)	O
{	O
markup_string_free	(*(struct(*(char),int,int)),int)->(*(char))
(	O
string	*(struct(*(char),int,int))
,	O
true	O
)	O
;	O
}	O
static	O
void	O
markup_string_truncate	(*(struct(*(char),int,int)),int)->(void)
(	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
,	O
size_t	O
length	int
)	O
{	O
assert	()->(int)
(	O
string	*(struct(*(char),int,int))
&&	O
length	int
<	O
string	*(struct(*(char),int,int))
->	O
buflen	int
-	O
1	int
)	O
;	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
[	O
length	int
]	O
=	O
'\0'	O
;	O
string	*(struct(*(char),int,int))
->	O
buflen	int
=	O
length	int
;	O
}	O
static	O
void	O
markup_string_append	(*(struct(*(char),int,int)),*(char),int)->(void)
(	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
,	O
const	O
char	O
*	O
to_append	*(char)
,	O
size_t	O
length	int
)	O
{	O
if	O
(	O
string	*(struct(*(char),int,int))
->	O
buflen	int
+	O
length	int
+	O
1	int
>	O
string	*(struct(*(char),int,int))
->	O
bufmax	int
)	O
{	O
string	*(struct(*(char),int,int))
->	O
bufmax	int
*=	O
2	int
;	O
if	O
(	O
string	*(struct(*(char),int,int))
->	O
buflen	int
+	O
length	int
+	O
1	int
>	O
string	*(struct(*(char),int,int))
->	O
bufmax	int
)	O
string	*(struct(*(char),int,int))
->	O
bufmax	int
=	O
string	*(struct(*(char),int,int))
->	O
buflen	int
+	O
length	int
+	O
1	int
;	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
=	O
xrealloc	O
(	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
string	*(struct(*(char),int,int))
->	O
bufmax	int
)	O
;	O
}	O
memcpy	O
(	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
+	O
string	*(struct(*(char),int,int))
->	O
buflen	int
,	O
to_append	*(char)
,	O
length	int
)	O
;	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
[	O
length	int
]	O
=	O
'\0'	O
;	O
string	*(struct(*(char),int,int))
->	O
buflen	int
=	O
length	int
;	O
}	O
static	O
inline	O
void	O
string_blank	(*(struct(*(char),int,int)))->(void)
(	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
)	O
{	O
if	O
(	O
string	*(struct(*(char),int,int))
->	O
bufmax	int
>	O
0	int
)	O
{	O
*	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
=	O
'\0'	O
;	O
string	*(struct(*(char),int,int))
->	O
buflen	int
=	O
0	int
;	O
}	O
}	O
markup_parse_context_ty	O
*	O
markup_parse_context_new	O
(	O
const	O
markup_parser_ty	O
*	O
parser	*(int)
,	O
markup_parse_flags_ty	O
flags	int
,	O
void	O
*	O
user_data	*(void)
)	O
{	O
markup_parse_context_ty	O
*	O
context	*(int)
;	O
assert	()->(int)
(	O
parser	*(int)
!=	O
NULL	O
)	O
;	O
context	*(int)
=	O
XMALLOC	()->(int)
(	O
markup_parse_context_ty	O
)	O
;	O
context	*(int)
->	O
parser	*(int)
=	O
parser	*(int)
;	O
context	*(int)
->	O
flags	int
=	O
flags	int
;	O
context	*(int)
->	O
user_data	*(void)
=	O
user_data	*(void)
;	O
context	*(int)
->	O
line_number	int
=	O
1	int
;	O
context	*(int)
->	O
char_number	int
=	O
1	int
;	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
NULL	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_START	O
;	O
context	*(int)
->	O
tag_stack	int
=	O
gl_list_create_empty	O
(	O
GL_LINKED_LIST	O
,	O
NULL	O
,	O
NULL	O
,	O
(	O
gl_listelement_dispose_fn	O
)	O
markup_string_free1	(*(struct(*(char),int,int)))->(void)
,	O
true	O
)	O
;	O
context	*(int)
->	O
attr_names	*(*(char))
=	O
NULL	O
;	O
context	*(int)
->	O
attr_values	*(*(char))
=	O
NULL	O
;	O
context	*(int)
->	O
cur_attr	int
=	O
-	O
1	int
;	O
context	*(int)
->	O
alloc_attrs	int
=	O
0	int
;	O
context	*(int)
->	O
current_text	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
current_text_len	int
=	O
-	O
1	int
;	O
context	*(int)
->	O
current_text_end	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
start	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
iter	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
error_text	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
document_empty	int
=	O
true	O
;	O
context	*(int)
->	O
parsing	int
=	O
false	O
;	O
context	*(int)
->	O
awaiting_pop	int
=	O
false	O
;	O
context	*(int)
->	O
subparser_stack	int
=	O
gl_list_create_empty	O
(	O
GL_LINKED_LIST	O
,	O
NULL	O
,	O
NULL	O
,	O
(	O
gl_listelement_dispose_fn	O
)	O
free	()->(int)
,	O
true	O
)	O
;	O
context	*(int)
->	O
subparser_element	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
balance	int
=	O
0	int
;	O
return	O
context	*(int)
;	O
}	O
static	O
void	O
clear_attributes	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
;	O
void	O
markup_parse_context_free	O
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
assert	()->(int)
(	O
context	*(int)
!=	O
NULL	O
)	O
;	O
assert	()->(int)
(	O
!	O
context	*(int)
->	O
parsing	int
)	O
;	O
assert	()->(int)
(	O
gl_list_size	O
(	O
context	*(int)
->	O
subparser_stack	int
)	O
==	O
0	int
)	O
;	O
assert	()->(int)
(	O
!	O
context	*(int)
->	O
awaiting_pop	int
)	O
;	O
clear_attributes	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
free	()->(int)
(	O
context	*(int)
->	O
attr_names	*(*(char))
)	O
;	O
free	()->(int)
(	O
context	*(int)
->	O
attr_values	*(*(char))
)	O
;	O
gl_list_free	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
;	O
gl_list_free	O
(	O
context	*(int)
->	O
subparser_stack	int
)	O
;	O
if	O
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
)	O
markup_string_free	(*(struct(*(char),int,int)),int)->(*(char))
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
true	O
)	O
;	O
free	()->(int)
(	O
context	*(int)
->	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
context	*(int)
)	O
;	O
}	O
static	O
void	O
pop_subparser_stack	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
;	O
static	O
void	O
emit_error	(*(int),*(char))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
char	O
*	O
error_text	*(char)
)	O
{	O
context	*(int)
->	O
state	int
=	O
STATE_ERROR	O
;	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
error	O
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
error	O
)	O
(	O
context	*(int)
,	O
error_text	*(char)
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
while	O
(	O
gl_list_size	O
(	O
context	*(int)
->	O
subparser_stack	int
)	O
>	O
0	int
)	O
{	O
pop_subparser_stack	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
awaiting_pop	int
=	O
false	O
;	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
error	O
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
error	O
)	O
(	O
context	*(int)
,	O
error_text	*(char)
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
}	O
if	O
(	O
context	*(int)
->	O
error_text	*(char)
)	O
free	()->(int)
(	O
context	*(int)
->	O
error_text	*(char)
)	O
;	O
context	*(int)
->	O
error_text	*(char)
=	O
xstrdup	O
(	O
error_text	*(char)
)	O
;	O
}	O
static	O
bool	O
slow_name_validate	(*(int),*(char))->(int)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(char)
=	O
name	*(char)
;	O
ucs4_t	O
uc	O
;	O
if	O
(	O
u8_check	O
(	O
(	O
uint8_t	O
*	O
)	O
name	*(char)
,	O
strlen	O
(	O
name	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
_	O
(	O
"invalid UTF-8 sequence"	*(char)
)	O
)	O
;	O
return	O
false	O
;	O
}	O
if	O
(	O
!	O
(	O
c_isalpha	O
(	O
*	O
p	*(char)
)	O
||	O
(	O
!	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
p	*(char)
)	O
&&	O
(	O
*	O
p	*(char)
==	O
'_'	O
||	O
*	O
p	*(char)
==	O
':'	O
||	O
(	O
u8_mbtouc	()->(int)
(	O
&	O
uc	O
,	O
(	O
uint8_t	O
*	O
)	O
name	*(char)
,	O
strlen	O
(	O
name	*(char)
)	O
)	O
>	O
0	int
&&	O
uc_is_alpha	O
(	O
uc	O
)	O
)	O
)	O
)	O
)	O
)	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"'%s' is not a valid name: %c"	*(char)
)	O
,	O
name	*(char)
,	O
*	O
p	*(char)
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
u8_next	O
(	O
&	O
uc	O
,	O
(	O
uint8_t	O
*	O
)	O
name	*(char)
)	O
;	O
p	*(char)
!=	O
NULL	O
;	O
p	*(char)
=	O
(	O
char	O
*	O
)	O
u8_next	O
(	O
&	O
uc	O
,	O
(	O
uint8_t	O
*	O
)	O
p	*(char)
)	O
)	O
{	O
if	O
(	O
!	O
(	O
c_isalnum	O
(	O
*	O
p	*(char)
)	O
||	O
(	O
!	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
p	*(char)
)	O
&&	O
(	O
*	O
p	*(char)
==	O
'.'	O
||	O
*	O
p	*(char)
==	O
'-'	O
||	O
*	O
p	*(char)
==	O
'_'	O
||	O
*	O
p	*(char)
==	O
':'	O
||	O
uc_is_alpha	O
(	O
uc	O
)	O
)	O
)	O
)	O
)	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"'%s' is not a valid name: '%c'"	*(char)
)	O
,	O
name	*(char)
,	O
*	O
p	*(char)
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
}	O
return	O
true	O
;	O
}	O
static	O
bool	O
name_validate	(*(int),*(char))->(int)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
char	O
mask	char
;	O
const	O
char	O
*	O
p	*(char)
;	O
p	*(char)
=	O
name	*(char)
;	O
if	O
(	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
p	*(char)
)	O
||	O
!	O
(	O
c_isalpha	O
(	O
*	O
p	*(char)
)	O
||	O
*	O
p	*(char)
==	O
'_'	O
||	O
*	O
p	*(char)
==	O
':'	O
)	O
)	O
goto	O
slow_validate	O
;	O
for	O
(	O
mask	char
=	O
*	O
p	*(char)
++	O
;	O
*	O
p	*(char)
!=	O
'\0'	O
;	O
p	*(char)
++	O
)	O
{	O
mask	char
|=	O
*	O
p	*(char)
;	O
if	O
(	O
!	O
(	O
c_isalnum	O
(	O
*	O
p	*(char)
)	O
||	O
(	O
!	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
p	*(char)
)	O
&&	O
(	O
*	O
p	*(char)
==	O
'.'	O
||	O
*	O
p	*(char)
==	O
'-'	O
||	O
*	O
p	*(char)
==	O
'_'	O
||	O
*	O
p	*(char)
==	O
':'	O
)	O
)	O
)	O
)	O
goto	O
slow_validate	O
;	O
}	O
if	O
(	O
mask	char
&	O
0x80	int
)	O
goto	O
slow_validate	O
;	O
return	O
true	O
;	O
slow_validate	O
:	O
return	O
slow_name_validate	(*(int),*(char))->(int)
(	O
context	*(int)
,	O
name	*(char)
)	O
;	O
}	O
static	O
bool	O
text_validate	(*(int),*(char),int)->(int)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
char	O
*	O
p	*(char)
,	O
int	O
len	int
)	O
{	O
if	O
(	O
u8_check	O
(	O
(	O
const	O
uint8_t	O
*	O
)	O
p	*(char)
,	O
len	int
)	O
!=	O
NULL	O
)	O
{	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
_	O
(	O
"invalid UTF-8 sequence"	*(char)
)	O
)	O
;	O
return	O
false	O
;	O
}	O
else	O
return	O
true	O
;	O
}	O
static	O
bool	O
unescape_string_inplace	(*(int),*(struct(*(char),int,int)),*(int))->(int)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
,	O
bool	O
*	O
is_ascii	*(int)
)	O
{	O
char	O
mask	char
,	O
*	O
to	*(char)
;	O
const	O
char	O
*	O
from	*(char)
;	O
bool	O
normalize_attribute	O
;	O
if	O
(	O
string	*(struct(*(char),int,int))
->	O
buflen	int
==	O
0	int
)	O
return	O
true	O
;	O
*	O
is_ascii	*(int)
=	O
false	O
;	O
if	O
(	O
context	*(int)
->	O
state	int
==	O
STATE_INSIDE_ATTRIBUTE_VALUE_SQ	O
||	O
context	*(int)
->	O
state	int
==	O
STATE_INSIDE_ATTRIBUTE_VALUE_DQ	O
)	O
normalize_attribute	O
=	O
true	O
;	O
else	O
normalize_attribute	O
=	O
false	O
;	O
mask	char
=	O
0	int
;	O
for	O
(	O
from	*(char)
=	O
to	*(char)
=	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
;	O
*	O
from	*(char)
!=	O
'\0'	O
;	O
from	*(char)
++	O
,	O
to	*(char)
++	O
)	O
{	O
*	O
to	*(char)
=	O
*	O
from	*(char)
;	O
mask	char
|=	O
*	O
to	*(char)
;	O
if	O
(	O
normalize_attribute	O
&&	O
(	O
*	O
to	*(char)
==	O
'\t'	O
||	O
*	O
to	*(char)
==	O
'\n'	O
)	O
)	O
*	O
to	*(char)
=	O
' '	O
;	O
if	O
(	O
*	O
to	*(char)
==	O
'\r'	O
)	O
{	O
*	O
to	*(char)
=	O
normalize_attribute	O
?	O
' '	O
:	O
'\n'	O
;	O
if	O
(	O
from	*(char)
[	O
1	int
]	O
==	O
'\n'	O
)	O
from	*(char)
++	O
;	O
}	O
if	O
(	O
*	O
from	*(char)
==	O
'&'	O
)	O
{	O
from	*(char)
++	O
;	O
if	O
(	O
*	O
from	*(char)
==	O
'#'	O
)	O
{	O
int	O
base	int
=	O
10	int
;	O
unsigned	O
long	O
l	long
;	O
char	O
*	O
end	*(char)
=	O
NULL	O
;	O
from	*(char)
++	O
;	O
if	O
(	O
*	O
from	*(char)
==	O
'x'	O
)	O
{	O
base	int
=	O
16	int
;	O
from	*(char)
++	O
;	O
}	O
errno	O
=	O
0	int
;	O
l	long
=	O
strtoul	O
(	O
from	*(char)
,	O
&	O
end	*(char)
,	O
base	int
)	O
;	O
if	O
(	O
end	*(char)
==	O
from	*(char)
||	O
errno	O
!=	O
0	int
)	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid character reference: %s"	*(char)
)	O
,	O
errno	O
!=	O
0	int
?	O
strerror	O
(	O
errno	O
)	O
:	O
_	O
(	O
"not a valid number specification"	*(char)
)	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
else	O
if	O
(	O
*	O
end	*(char)
!=	O
';'	O
)	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid character reference: %s"	*(char)
)	O
,	O
_	O
(	O
"no ending ';'"	*(char)
)	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
else	O
{	O
if	O
(	O
(	O
0	int
<	O
l	long
&&	O
l	long
<=	O
0xD7FF	int
)	O
||	O
(	O
0xE000	int
<=	O
l	long
&&	O
l	long
<=	O
0xFFFD	int
)	O
||	O
(	O
0x10000	int
<=	O
l	long
&&	O
l	long
<=	O
0x10FFFF	int
)	O
)	O
{	O
char	O
buf	array(char)
[	O
8	int
]	O
;	O
int	O
length	int
;	O
length	int
=	O
u8_uctomb	()->(int)
(	O
(	O
uint8_t	O
*	O
)	O
buf	array(char)
,	O
l	long
,	O
8	int
)	O
;	O
memcpy	O
(	O
to	*(char)
,	O
buf	array(char)
,	O
length	int
)	O
;	O
to	*(char)
+=	O
length	int
-	O
1	int
;	O
from	*(char)
=	O
end	*(char)
;	O
if	O
(	O
l	long
>=	O
0x80	int
)	O
mask	char
|=	O
0x80	int
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid character reference: %s"	*(char)
)	O
,	O
_	O
(	O
"non-permitted character"	*(char)
)	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
strncmp	O
(	O
from	*(char)
,	O
"lt;"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
*	O
to	*(char)
=	O
'<'	O
;	O
from	*(char)
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
strncmp	O
(	O
from	*(char)
,	O
"gt;"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
*	O
to	*(char)
=	O
'>'	O
;	O
from	*(char)
+=	O
2	int
;	O
}	O
else	O
if	O
(	O
strncmp	O
(	O
from	*(char)
,	O
"amp;"	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
{	O
*	O
to	*(char)
=	O
'&'	O
;	O
from	*(char)
+=	O
3	int
;	O
}	O
else	O
if	O
(	O
strncmp	O
(	O
from	*(char)
,	O
"quot;"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
*	O
to	*(char)
=	O
'"'	O
;	O
from	*(char)
+=	O
4	int
;	O
}	O
else	O
if	O
(	O
strncmp	O
(	O
from	*(char)
,	O
"apos;"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
*	O
to	*(char)
=	O
'\''	O
;	O
from	*(char)
+=	O
4	int
;	O
}	O
else	O
{	O
const	O
char	O
*	O
reason	*(char)
;	O
char	O
*	O
error_text	*(char)
;	O
if	O
(	O
*	O
from	*(char)
==	O
';'	O
)	O
reason	*(char)
=	O
_	O
(	O
"empty"	*(char)
)	O
;	O
else	O
{	O
const	O
char	O
*	O
end	*(char)
=	O
strchr	O
(	O
from	*(char)
,	O
';'	O
)	O
;	O
if	O
(	O
end	*(char)
)	O
reason	*(char)
=	O
_	O
(	O
"unknown"	*(char)
)	O
;	O
else	O
reason	*(char)
=	O
_	O
(	O
"no ending ';'"	*(char)
)	O
;	O
}	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid entity reference: %s"	*(char)
)	O
,	O
reason	*(char)
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
return	O
false	O
;	O
}	O
}	O
}	O
assert	()->(int)
(	O
to	*(char)
-	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
<=	O
string	*(struct(*(char),int,int))
->	O
buflen	int
)	O
;	O
if	O
(	O
to	*(char)
-	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
!=	O
string	*(struct(*(char),int,int))
->	O
buflen	int
)	O
markup_string_truncate	(*(struct(*(char),int,int)),int)->(void)
(	O
string	*(struct(*(char),int,int))
,	O
to	*(char)
-	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
)	O
;	O
*	O
is_ascii	*(int)
=	O
!	O
(	O
mask	char
&	O
0x80	int
)	O
;	O
return	O
true	O
;	O
}	O
static	O
inline	O
bool	O
advance_char	(*(int))->(int)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
context	*(int)
->	O
iter	*(char)
++	O
;	O
context	*(int)
->	O
char_number	int
++	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
==	O
context	*(int)
->	O
current_text_end	*(char)
)	O
return	O
false	O
;	O
else	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'\n'	O
)	O
{	O
context	*(int)
->	O
line_number	int
++	O
;	O
context	*(int)
->	O
char_number	int
=	O
1	int
;	O
}	O
return	O
true	O
;	O
}	O
static	O
inline	O
bool	O
xml_isspace	(char)->(int)
(	O
char	O
c	char
)	O
{	O
return	O
c	char
==	O
' '	O
||	O
c	char
==	O
'\t'	O
||	O
c	char
==	O
'\n'	O
||	O
c	char
==	O
'\r'	O
;	O
}	O
static	O
void	O
skip_spaces	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
do	O
{	O
if	O
(	O
!	O
xml_isspace	(char)->(int)
(	O
*	O
context	*(int)
->	O
iter	*(char)
)	O
)	O
return	O
;	O
}	O
while	O
(	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
)	O
;	O
}	O
static	O
void	O
advance_to_name_end	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
do	O
{	O
if	O
(	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
(	O
context	*(int)
->	O
iter	*(char)
)	O
)	O
)	O
return	O
;	O
if	O
(	O
xml_isspace	(char)->(int)
(	O
*	O
(	O
context	*(int)
->	O
iter	*(char)
)	O
)	O
)	O
return	O
;	O
}	O
while	O
(	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
)	O
;	O
}	O
static	O
void	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
char	O
*	O
text_start	*(char)
,	O
const	O
char	O
*	O
text_end	*(char)
)	O
{	O
if	O
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
==	O
NULL	O
)	O
{	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
markup_string_new	()->(*(struct(*(char),int,int)))
(	O
)	O
;	O
}	O
if	O
(	O
text_start	*(char)
!=	O
text_end	*(char)
)	O
markup_string_append	(*(struct(*(char),int,int)),*(char),int)->(void)
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
text_start	*(char)
,	O
text_end	*(char)
-	O
text_start	*(char)
)	O
;	O
}	O
static	O
inline	O
void	O
truncate_partial	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
if	O
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
!=	O
NULL	O
)	O
string_blank	(*(struct(*(char),int,int)))->(void)
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
)	O
;	O
}	O
static	O
inline	O
const	O
char	O
*	O
current_element	(*(int))->(*(char))
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
const	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
=	O
gl_list_get_at	O
(	O
context	*(int)
->	O
tag_stack	int
,	O
0	int
)	O
;	O
return	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
;	O
}	O
static	O
void	O
pop_subparser_stack	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
markup_recursion_tracker_ty	struct(*(char),*(int),*(void))
*	O
tracker	*(struct(*(char),*(int),*(void)))
;	O
assert	()->(int)
(	O
gl_list_size	O
(	O
context	*(int)
->	O
subparser_stack	int
)	O
>	O
0	int
)	O
;	O
tracker	*(struct(*(char),*(int),*(void)))
=	O
(	O
markup_recursion_tracker_ty	struct(*(char),*(int),*(void))
*	O
)	O
gl_list_get_at	O
(	O
context	*(int)
->	O
subparser_stack	int
,	O
0	int
)	O
;	O
context	*(int)
->	O
awaiting_pop	int
=	O
true	O
;	O
context	*(int)
->	O
user_data	*(void)
=	O
tracker	*(struct(*(char),*(int),*(void)))
->	O
prev_user_data	*(void)
;	O
context	*(int)
->	O
parser	*(int)
=	O
tracker	*(struct(*(char),*(int),*(void)))
->	O
prev_parser	*(int)
;	O
context	*(int)
->	O
subparser_element	*(char)
=	O
tracker	*(struct(*(char),*(int),*(void)))
->	O
prev_element	*(char)
;	O
free	()->(int)
(	O
tracker	*(struct(*(char),*(int),*(void)))
)	O
;	O
gl_list_remove_at	O
(	O
context	*(int)
->	O
subparser_stack	int
,	O
0	int
)	O
;	O
}	O
static	O
void	O
push_partial_as_tag	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
gl_list_add_first	O
(	O
context	*(int)
->	O
tag_stack	int
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
)	O
;	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
NULL	O
;	O
}	O
static	O
void	O
pop_tag	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
gl_list_remove_at	O
(	O
context	*(int)
->	O
tag_stack	int
,	O
0	int
)	O
;	O
}	O
static	O
void	O
possibly_finish_subparser	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
if	O
(	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
==	O
context	*(int)
->	O
subparser_element	*(char)
)	O
pop_subparser_stack	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
static	O
void	O
ensure_no_outstanding_subparser	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
context	*(int)
->	O
awaiting_pop	int
=	O
false	O
;	O
}	O
static	O
void	O
add_attribute	(*(int),*(struct(*(char),int,int)))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
markup_string_ty	struct(*(char),int,int)
*	O
string	*(struct(*(char),int,int))
)	O
{	O
if	O
(	O
context	*(int)
->	O
cur_attr	int
+	O
2	int
>=	O
context	*(int)
->	O
alloc_attrs	int
)	O
{	O
context	*(int)
->	O
alloc_attrs	int
+=	O
5	int
;	O
context	*(int)
->	O
attr_names	*(*(char))
=	O
xrealloc	O
(	O
context	*(int)
->	O
attr_names	*(*(char))
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
context	*(int)
->	O
alloc_attrs	int
)	O
;	O
context	*(int)
->	O
attr_values	*(*(char))
=	O
xrealloc	O
(	O
context	*(int)
->	O
attr_values	*(*(char))
,	O
sizeof	O
(	O
char	O
*	O
)	O
*	O
context	*(int)
->	O
alloc_attrs	int
)	O
;	O
}	O
context	*(int)
->	O
cur_attr	int
++	O
;	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
context	*(int)
->	O
cur_attr	int
]	O
=	O
xstrdup	O
(	O
string	*(struct(*(char),int,int))
->	O
buffer	*(char)
)	O
;	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
context	*(int)
->	O
cur_attr	int
]	O
=	O
NULL	O
;	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
context	*(int)
->	O
cur_attr	int
+	O
1	int
]	O
=	O
NULL	O
;	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
context	*(int)
->	O
cur_attr	int
+	O
1	int
]	O
=	O
NULL	O
;	O
}	O
static	O
void	O
clear_attributes	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
for	O
(	O
;	O
context	*(int)
->	O
cur_attr	int
>=	O
0	int
;	O
context	*(int)
->	O
cur_attr	int
--	O
)	O
{	O
int	O
pos	int
=	O
context	*(int)
->	O
cur_attr	int
;	O
free	()->(int)
(	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
pos	int
]	O
)	O
;	O
free	()->(int)
(	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
pos	int
]	O
)	O
;	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
pos	int
]	O
=	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
pos	int
]	O
=	O
NULL	O
;	O
}	O
assert	()->(int)
(	O
context	*(int)
->	O
cur_attr	int
==	O
-	O
1	int
)	O
;	O
assert	()->(int)
(	O
context	*(int)
->	O
attr_names	*(*(char))
==	O
NULL	O
||	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
0	int
]	O
==	O
NULL	O
)	O
;	O
assert	()->(int)
(	O
context	*(int)
->	O
attr_values	*(*(char))
==	O
NULL	O
||	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
0	int
]	O
==	O
NULL	O
)	O
;	O
}	O
static	O
void	O
markup_parse_context_push	(*(int),*(int),*(void))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
markup_parser_ty	O
*	O
parser	*(int)
,	O
void	O
*	O
user_data	*(void)
)	O
{	O
markup_recursion_tracker_ty	struct(*(char),*(int),*(void))
*	O
tracker	*(struct(*(char),*(int),*(void)))
;	O
tracker	*(struct(*(char),*(int),*(void)))
=	O
XMALLOC	()->(int)
(	O
markup_recursion_tracker_ty	struct(*(char),*(int),*(void))
)	O
;	O
tracker	*(struct(*(char),*(int),*(void)))
->	O
prev_element	*(char)
=	O
context	*(int)
->	O
subparser_element	*(char)
;	O
tracker	*(struct(*(char),*(int),*(void)))
->	O
prev_parser	*(int)
=	O
context	*(int)
->	O
parser	*(int)
;	O
tracker	*(struct(*(char),*(int),*(void)))
->	O
prev_user_data	*(void)
=	O
context	*(int)
->	O
user_data	*(void)
;	O
context	*(int)
->	O
subparser_element	*(char)
=	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
parser	*(int)
=	O
parser	*(int)
;	O
context	*(int)
->	O
user_data	*(void)
=	O
user_data	*(void)
;	O
gl_list_add_first	O
(	O
context	*(int)
->	O
subparser_stack	int
,	O
tracker	*(struct(*(char),*(int),*(void)))
)	O
;	O
}	O
static	O
void	O
markup_parse_context_pop	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
if	O
(	O
!	O
context	*(int)
->	O
awaiting_pop	int
)	O
possibly_finish_subparser	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
assert	()->(int)
(	O
context	*(int)
->	O
awaiting_pop	int
)	O
;	O
context	*(int)
->	O
awaiting_pop	int
=	O
false	O
;	O
}	O
static	O
inline	O
void	O
emit_start_element	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
int	O
i	int
,	O
j	int
=	O
0	int
;	O
const	O
char	O
*	O
start_name	*(char)
;	O
const	O
char	O
*	O
*	O
attr_names	*(*(char))
;	O
const	O
char	O
*	O
*	O
attr_values	*(*(char))
;	O
if	O
(	O
(	O
context	*(int)
->	O
flags	int
&	O
MARKUP_IGNORE_QUALIFIED	O
)	O
&&	O
strchr	O
(	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
,	O
':'	O
)	O
)	O
{	O
static	O
const	O
markup_parser_ty	O
ignore_parser	int
;	O
markup_parse_context_push	(*(int),*(int),*(void))->(void)
(	O
context	*(int)
,	O
&	O
ignore_parser	int
,	O
NULL	O
)	O
;	O
clear_attributes	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
return	O
;	O
}	O
attr_names	*(*(char))
=	O
XCALLOC	()->(int)
(	O
context	*(int)
->	O
cur_attr	int
+	O
2	int
,	O
const	O
char	O
*	O
)	O
;	O
attr_values	*(*(char))
=	O
XCALLOC	()->(int)
(	O
context	*(int)
->	O
cur_attr	int
+	O
2	int
,	O
const	O
char	O
*	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
context	*(int)
->	O
cur_attr	int
+	O
1	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
(	O
context	*(int)
->	O
flags	int
&	O
MARKUP_IGNORE_QUALIFIED	O
)	O
&&	O
strchr	O
(	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
i	int
]	O
,	O
':'	O
)	O
)	O
continue	O
;	O
attr_names	*(*(char))
[	O
j	int
]	O
=	O
context	*(int)
->	O
attr_names	*(*(char))
[	O
i	int
]	O
;	O
attr_values	*(*(char))
[	O
j	int
]	O
=	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
i	int
]	O
;	O
j	int
++	O
;	O
}	O
attr_names	*(*(char))
[	O
j	int
]	O
=	O
NULL	O
;	O
attr_values	*(*(char))
[	O
j	int
]	O
=	O
NULL	O
;	O
start_name	*(char)
=	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
start_element	O
&&	O
name_validate	(*(int),*(char))->(int)
(	O
context	*(int)
,	O
start_name	*(char)
)	O
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
start_element	O
)	O
(	O
context	*(int)
,	O
start_name	*(char)
,	O
(	O
const	O
char	O
*	O
*	O
)	O
attr_names	*(*(char))
,	O
(	O
const	O
char	O
*	O
*	O
)	O
attr_values	*(*(char))
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
free	()->(int)
(	O
attr_names	*(*(char))
)	O
;	O
free	()->(int)
(	O
attr_values	*(*(char))
)	O
;	O
clear_attributes	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
static	O
void	O
emit_end_element	(*(int))->(void)
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
assert	()->(int)
(	O
gl_list_size	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
!=	O
0	int
)	O
;	O
possibly_finish_subparser	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
(	O
context	*(int)
->	O
flags	int
&	O
MARKUP_IGNORE_QUALIFIED	O
)	O
&&	O
strchr	O
(	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
,	O
':'	O
)	O
)	O
{	O
markup_parse_context_pop	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
pop_tag	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
end_element	O
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
end_element	O
)	O
(	O
context	*(int)
,	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
ensure_no_outstanding_subparser	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
pop_tag	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
bool	O
markup_parse_context_parse	O
(	O
markup_parse_context_ty	O
*	O
context	*(int)
,	O
const	O
char	O
*	O
text	*(char)
,	O
ssize_t	O
text_len	int
)	O
{	O
assert	()->(int)
(	O
context	*(int)
!=	O
NULL	O
)	O
;	O
assert	()->(int)
(	O
text	*(char)
!=	O
NULL	O
)	O
;	O
assert	()->(int)
(	O
context	*(int)
->	O
state	int
!=	O
STATE_ERROR	O
)	O
;	O
assert	()->(int)
(	O
!	O
context	*(int)
->	O
parsing	int
)	O
;	O
if	O
(	O
text_len	int
<	O
0	int
)	O
text_len	int
=	O
strlen	O
(	O
text	*(char)
)	O
;	O
if	O
(	O
text_len	int
==	O
0	int
)	O
return	O
true	O
;	O
context	*(int)
->	O
parsing	int
=	O
true	O
;	O
context	*(int)
->	O
current_text	*(char)
=	O
text	*(char)
;	O
context	*(int)
->	O
current_text_len	int
=	O
text_len	int
;	O
context	*(int)
->	O
current_text_end	*(char)
=	O
context	*(int)
->	O
current_text	*(char)
+	O
text_len	int
;	O
context	*(int)
->	O
iter	*(char)
=	O
context	*(int)
->	O
current_text	*(char)
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
while	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
switch	O
(	O
context	*(int)
->	O
state	int
)	O
{	O
case	O
STATE_START	O
:	O
assert	()->(int)
(	O
gl_list_size	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
==	O
0	int
)	O
;	O
skip_spaces	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'<'	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_OPEN_ANGLE	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
context	*(int)
->	O
document_empty	int
=	O
false	O
;	O
}	O
else	O
{	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
_	O
(	O
"document must begin with an element"	*(char)
)	O
)	O
;	O
}	O
}	O
break	O
;	O
case	O
STATE_AFTER_OPEN_ANGLE	O
:	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'?'	O
||	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'!'	O
)	O
{	O
const	O
char	O
*	O
openangle	*(char)
=	O
"<"	*(char)
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
openangle	*(char)
,	O
openangle	*(char)
+	O
1	int
)	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
context	*(int)
->	O
balance	int
=	O
1	int
;	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_PASSTHROUGH	O
;	O
}	O
else	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'/'	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_CLOSE_TAG_SLASH	O
;	O
}	O
else	O
if	O
(	O
!	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
(	O
context	*(int)
->	O
iter	*(char)
)	O
)	O
)	O
{	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_OPEN_TAG_NAME	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid character after '%s'"	*(char)
)	O
,	O
"<"	*(char)
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_AFTER_CLOSE_ANGLE	O
:	O
if	O
(	O
gl_list_size	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
==	O
0	int
)	O
{	O
context	*(int)
->	O
start	*(char)
=	O
NULL	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_START	O
;	O
}	O
else	O
{	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_TEXT	O
;	O
}	O
break	O
;	O
case	O
STATE_AFTER_ELISION_SLASH	O
:	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'>'	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_CLOSE_ANGLE	O
;	O
emit_end_element	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"missing '%c'"	*(char)
)	O
,	O
'>'	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_INSIDE_OPEN_TAG_NAME	O
:	O
advance_to_name_end	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
==	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
}	O
else	O
{	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
push_partial_as_tag	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_BETWEEN_ATTRIBUTES	O
;	O
context	*(int)
->	O
start	*(char)
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
STATE_INSIDE_ATTRIBUTE_NAME	O
:	O
advance_to_name_end	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_ATTRIBUTE_NAME	O
;	O
break	O
;	O
case	O
STATE_AFTER_ATTRIBUTE_NAME	O
:	O
skip_spaces	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
if	O
(	O
!	O
name_validate	(*(int),*(char))->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
)	O
)	O
break	O
;	O
add_attribute	(*(int),*(struct(*(char),int,int)))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
)	O
;	O
markup_string_free	(*(struct(*(char),int,int)),int)->(*(char))
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
true	O
)	O
;	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
NULL	O
;	O
context	*(int)
->	O
start	*(char)
=	O
NULL	O
;	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'='	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_ATTRIBUTE_EQUALS_SIGN	O
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"missing '%c'"	*(char)
)	O
,	O
'='	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
}	O
break	O
;	O
case	O
STATE_BETWEEN_ATTRIBUTES	O
:	O
skip_spaces	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'/'	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_ELISION_SLASH	O
;	O
}	O
else	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'>'	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_CLOSE_ANGLE	O
;	O
}	O
else	O
if	O
(	O
!	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
(	O
context	*(int)
->	O
iter	*(char)
)	O
)	O
)	O
{	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_ATTRIBUTE_NAME	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"missing '%c' or '%c'"	*(char)
)	O
,	O
'>'	O
,	O
'/'	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
if	O
(	O
context	*(int)
->	O
state	int
==	O
STATE_AFTER_ELISION_SLASH	O
||	O
context	*(int)
->	O
state	int
==	O
STATE_AFTER_CLOSE_ANGLE	O
)	O
emit_start_element	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_AFTER_ATTRIBUTE_EQUALS_SIGN	O
:	O
skip_spaces	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'"'	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_ATTRIBUTE_VALUE_DQ	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
else	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'\''	O
)	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_ATTRIBUTE_VALUE_SQ	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"missing '%c' or '%c'"	*(char)
)	O
,	O
'\''	O
,	O
'"'	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
}	O
break	O
;	O
case	O
STATE_INSIDE_ATTRIBUTE_VALUE_SQ	O
:	O
case	O
STATE_INSIDE_ATTRIBUTE_VALUE_DQ	O
:	O
{	O
char	O
delim	char
;	O
if	O
(	O
context	*(int)
->	O
state	int
==	O
STATE_INSIDE_ATTRIBUTE_VALUE_SQ	O
)	O
{	O
delim	char
=	O
'\''	O
;	O
}	O
else	O
{	O
delim	char
=	O
'"'	O
;	O
}	O
do	O
{	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
delim	char
)	O
break	O
;	O
}	O
while	O
(	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
)	O
;	O
}	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
==	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
}	O
else	O
{	O
bool	O
is_ascii	*(int)
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
assert	()->(int)
(	O
context	*(int)
->	O
cur_attr	int
>=	O
0	int
)	O
;	O
if	O
(	O
unescape_string_inplace	(*(int),*(struct(*(char),int,int)),*(int))->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
&	O
is_ascii	*(int)
)	O
&&	O
(	O
is_ascii	*(int)
||	O
text_validate	(*(int),*(char),int)->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
)	O
)	O
)	O
{	O
context	*(int)
->	O
attr_values	*(*(char))
[	O
context	*(int)
->	O
cur_attr	int
]	O
=	O
markup_string_free	(*(struct(*(char),int,int)),int)->(*(char))
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
false	O
)	O
;	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
NULL	O
;	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_BETWEEN_ATTRIBUTES	O
;	O
context	*(int)
->	O
start	*(char)
=	O
NULL	O
;	O
}	O
truncate_partial	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_INSIDE_TEXT	O
:	O
do	O
{	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'<'	O
)	O
break	O
;	O
}	O
while	O
(	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
)	O
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
bool	O
is_ascii	*(int)
;	O
if	O
(	O
unescape_string_inplace	(*(int),*(struct(*(char),int,int)),*(int))->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
&	O
is_ascii	*(int)
)	O
&&	O
(	O
is_ascii	*(int)
||	O
text_validate	(*(int),*(char),int)->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
)	O
)	O
)	O
{	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
text	*(char)
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
text	*(char)
)	O
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_OPEN_ANGLE	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
truncate_partial	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_AFTER_CLOSE_TAG_SLASH	O
:	O
if	O
(	O
!	O
IS_COMMON_NAME_END_CHAR	O
(	O
*	O
(	O
context	*(int)
->	O
iter	*(char)
)	O
)	O
)	O
{	O
context	*(int)
->	O
state	int
=	O
STATE_INSIDE_CLOSE_TAG_NAME	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
else	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid character after '%s'"	*(char)
)	O
,	O
"</"	*(char)
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_INSIDE_CLOSE_TAG_NAME	O
:	O
advance_to_name_end	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_CLOSE_TAG_NAME	O
;	O
break	O
;	O
case	O
STATE_AFTER_CLOSE_TAG_NAME	O
:	O
skip_spaces	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
!=	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
markup_string_ty	struct(*(char),int,int)
*	O
close_name	*(struct(*(char),int,int))
;	O
close_name	*(struct(*(char),int,int))
=	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
;	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
NULL	O
;	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
!=	O
'>'	O
)	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"invalid character after '%s'"	*(char)
)	O
,	O
_	O
(	O
"a close element name"	*(char)
)	O
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
gl_list_size	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
==	O
0	int
)	O
{	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
_	O
(	O
"element is closed"	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	O
(	O
close_name	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
current_element	(*(int))->(*(char))
(	O
context	*(int)
)	O
)	O
!=	O
0	int
)	O
{	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
_	O
(	O
"element is closed"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_CLOSE_ANGLE	O
;	O
context	*(int)
->	O
start	*(char)
=	O
NULL	O
;	O
emit_end_element	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
close_name	*(struct(*(char),int,int))
;	O
truncate_partial	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_INSIDE_PASSTHROUGH	O
:	O
do	O
{	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'<'	O
)	O
context	*(int)
->	O
balance	int
++	O
;	O
if	O
(	O
*	O
context	*(int)
->	O
iter	*(char)
==	O
'>'	O
)	O
{	O
char	O
*	O
str	*(char)
;	O
size_t	O
len	int
;	O
context	*(int)
->	O
balance	int
--	O
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
str	*(char)
=	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
;	O
len	int
=	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
;	O
if	O
(	O
str	*(char)
[	O
1	int
]	O
==	O
'?'	O
&&	O
str	*(char)
[	O
len	int
-	O
1	int
]	O
==	O
'?'	O
)	O
break	O
;	O
if	O
(	O
strncmp	O
(	O
str	*(char)
,	O
"<!--"	*(char)
,	O
4	int
)	O
==	O
0	int
&&	O
strcmp	O
(	O
str	*(char)
+	O
len	int
-	O
2	int
,	O
"--"	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
strncmp	O
(	O
str	*(char)
,	O
"<![CDATA["	*(char)
,	O
9	int
)	O
==	O
0	int
&&	O
strcmp	O
(	O
str	*(char)
+	O
len	int
-	O
2	int
,	O
"]]"	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
strncmp	O
(	O
str	*(char)
,	O
"<!DOCTYPE"	*(char)
,	O
9	int
)	O
==	O
0	int
&&	O
context	*(int)
->	O
balance	int
==	O
0	int
)	O
break	O
;	O
}	O
}	O
while	O
(	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
)	O
;	O
if	O
(	O
context	*(int)
->	O
iter	*(char)
==	O
context	*(int)
->	O
current_text_end	*(char)
)	O
{	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
}	O
else	O
{	O
advance_char	(*(int))->(int)
(	O
context	*(int)
)	O
;	O
add_to_partial	(*(int),*(char),*(char))->(void)
(	O
context	*(int)
,	O
context	*(int)
->	O
start	*(char)
,	O
context	*(int)
->	O
iter	*(char)
)	O
;	O
if	O
(	O
context	*(int)
->	O
flags	int
&	O
MARKUP_TREAT_CDATA_AS_TEXT	O
&&	O
strncmp	O
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
"<![CDATA["	*(char)
,	O
9	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
text	*(char)
&&	O
text_validate	(*(int),*(char),int)->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
+	O
9	int
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
-	O
12	int
)	O
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
text	*(char)
)	O
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
+	O
9	int
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
-	O
12	int
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
context	*(int)
->	O
parser	*(int)
->	O
passthrough	O
&&	O
text_validate	(*(int),*(char),int)->(int)
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
)	O
)	O
(	O
*	O
context	*(int)
->	O
parser	*(int)
->	O
passthrough	O
)	O
(	O
context	*(int)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buffer	*(char)
,	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
->	O
buflen	int
,	O
context	*(int)
->	O
user_data	*(void)
)	O
;	O
truncate_partial	(*(int))->(void)
(	O
context	*(int)
)	O
;	O
context	*(int)
->	O
state	int
=	O
STATE_AFTER_CLOSE_ANGLE	O
;	O
context	*(int)
->	O
start	*(char)
=	O
context	*(int)
->	O
iter	*(char)
;	O
}	O
break	O
;	O
case	O
STATE_ERROR	O
:	O
goto	O
finished	O
;	O
break	O
;	O
default	O
:	O
abort	O
(	O
)	O
;	O
break	O
;	O
}	O
}	O
finished	O
:	O
context	*(int)
->	O
parsing	int
=	O
false	O
;	O
return	O
context	*(int)
->	O
state	int
!=	O
STATE_ERROR	O
;	O
}	O
bool	O
markup_parse_context_end_parse	O
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
const	O
char	O
*	O
location	*(char)
=	O
NULL	O
;	O
assert	()->(int)
(	O
context	*(int)
!=	O
NULL	O
)	O
;	O
assert	()->(int)
(	O
!	O
context	*(int)
->	O
parsing	int
)	O
;	O
assert	()->(int)
(	O
context	*(int)
->	O
state	int
!=	O
STATE_ERROR	O
)	O
;	O
if	O
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
!=	O
NULL	O
)	O
{	O
markup_string_free	(*(struct(*(char),int,int)),int)->(*(char))
(	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
,	O
true	O
)	O
;	O
context	*(int)
->	O
partial_chunk	*(struct(*(char),int,int))
=	O
NULL	O
;	O
}	O
if	O
(	O
context	*(int)
->	O
document_empty	int
)	O
{	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
_	O
(	O
"empty document"	*(char)
)	O
)	O
;	O
return	O
false	O
;	O
}	O
context	*(int)
->	O
parsing	int
=	O
true	O
;	O
switch	O
(	O
context	*(int)
->	O
state	int
)	O
{	O
case	O
STATE_START	O
:	O
break	O
;	O
case	O
STATE_AFTER_OPEN_ANGLE	O
:	O
location	*(char)
=	O
_	O
(	O
"after '<'"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_AFTER_CLOSE_ANGLE	O
:	O
if	O
(	O
gl_list_size	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
>	O
0	int
)	O
{	O
location	*(char)
=	O
_	O
(	O
"elements still open"	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
STATE_AFTER_ELISION_SLASH	O
:	O
location	*(char)
=	O
_	O
(	O
"missing '>'"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_INSIDE_OPEN_TAG_NAME	O
:	O
location	*(char)
=	O
_	O
(	O
"inside an element name"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_INSIDE_ATTRIBUTE_NAME	O
:	O
case	O
STATE_AFTER_ATTRIBUTE_NAME	O
:	O
location	*(char)
=	O
_	O
(	O
"inside an attribute name"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_BETWEEN_ATTRIBUTES	O
:	O
location	*(char)
=	O
_	O
(	O
"inside an open tag"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_AFTER_ATTRIBUTE_EQUALS_SIGN	O
:	O
location	*(char)
=	O
_	O
(	O
"after '='"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_INSIDE_ATTRIBUTE_VALUE_SQ	O
:	O
case	O
STATE_INSIDE_ATTRIBUTE_VALUE_DQ	O
:	O
location	*(char)
=	O
_	O
(	O
"inside an attribute value"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_INSIDE_TEXT	O
:	O
assert	()->(int)
(	O
gl_list_size	O
(	O
context	*(int)
->	O
tag_stack	int
)	O
>	O
0	int
)	O
;	O
location	*(char)
=	O
_	O
(	O
"elements still open"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_AFTER_CLOSE_TAG_SLASH	O
:	O
case	O
STATE_INSIDE_CLOSE_TAG_NAME	O
:	O
case	O
STATE_AFTER_CLOSE_TAG_NAME	O
:	O
location	*(char)
=	O
_	O
(	O
"inside the close tag"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_INSIDE_PASSTHROUGH	O
:	O
location	*(char)
=	O
_	O
(	O
"inside a comment or processing instruction"	*(char)
)	O
;	O
break	O
;	O
case	O
STATE_ERROR	O
:	O
default	O
:	O
abort	O
(	O
)	O
;	O
break	O
;	O
}	O
if	O
(	O
location	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
error_text	*(char)
=	O
xasprintf	O
(	O
_	O
(	O
"document ended unexpectedly: %s"	*(char)
)	O
,	O
location	*(char)
)	O
;	O
emit_error	(*(int),*(char))->(void)
(	O
context	*(int)
,	O
error_text	*(char)
)	O
;	O
free	()->(int)
(	O
error_text	*(char)
)	O
;	O
}	O
context	*(int)
->	O
parsing	int
=	O
false	O
;	O
return	O
context	*(int)
->	O
state	int
!=	O
STATE_ERROR	O
;	O
}	O
const	O
char	O
*	O
markup_parse_context_get_error	O
(	O
markup_parse_context_ty	O
*	O
context	*(int)
)	O
{	O
return	O
context	*(int)
->	O
error_text	*(char)
;	O
}	O
