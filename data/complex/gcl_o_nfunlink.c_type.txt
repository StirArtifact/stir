int	O
Rset	int
;	O
union	O
{	O
int	O
i	int
;	O
float	O
f	float
;	O
double	O
d	double
;	O
void	O
*	O
p	*(void)
;	O
}	O
bill	union(int,float,double,*(void))
;	O
object	(*(int))->(int)
IapplyVector	(int,int,*(int))->(int)
(	O
object	(*(int))->(int)
fun	int
,	O
int	O
nargs	int
,	O
object	(*(int))->(int)
*	O
base	*(int)
)	O
{	O
object	(*(int))->(int)
res	O
,	O
*	O
abase	O
;	O
int	O
i	int
;	O
object	(*(int))->(int)
*	O
oldtop	O
=	O
vs_top	O
;	O
unsigned	O
int	O
atypes	int
;	O
if	O
(	O
oldtop	O
==	O
base	*(int)
)	O
vs_top	O
+=	O
nargs	int
;	O
else	O
{	O
object	(*(int))->(int)
*	O
b	O
=	O
base	*(int)
;	O
int	O
n	int
=	O
nargs	int
;	O
base	*(int)
=	O
vs_top	O
;	O
vs_top	O
+=	O
n	int
;	O
while	O
(	O
--	O
n	int
>=	O
0	int
)	O
{	O
base	*(int)
[	O
n	int
]	O
=	O
b	O
[	O
n	int
]	O
;	O
}	O
}	O
vs_check	O
;	O
switch	O
(	O
type_of	()->(int)
(	O
fun	int
)	O
)	O
{	O
case	O
t_closure	O
:	O
case	O
t_afun	O
:	O
ihs_push_base	()->(int)
(	O
fun	int
,	O
base	*(int)
)	O
;	O
ihs_check	O
;	O
VFUN_NARGS	O
=	O
nargs	int
;	O
fcall	O
.	O
fun	int
=	O
fun	int
;	O
if	O
(	O
nargs	int
<	O
F_MIN_ARGS	()->(int)
(	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
)	O
)	O
FEtoo_few_arguments	()->(int)
(	O
base	*(int)
,	O
vs_top	O
)	O
;	O
if	O
(	O
nargs	int
>	O
F_MAX_ARGS	()->(int)
(	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
)	O
&&	O
F_MAX_ARGS	()->(int)
(	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
)	O
)	O
FEtoo_many_arguments	()->(int)
(	O
base	*(int)
,	O
vs_top	O
)	O
;	O
atypes	int
=	O
F_TYPES	()->(int)
(	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
)	O
>>	O
F_TYPE_WIDTH	O
;	O
if	O
(	O
atypes	int
==	O
0	int
)	O
{	O
abase	O
=	O
base	*(int)
;	O
}	O
else	O
{	O
abase	O
=	O
vs_top	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nargs	int
;	O
i	int
++	O
,	O
atypes	int
>>=	O
F_TYPE_WIDTH	O
)	O
{	O
object	(*(int))->(int)
next	O
=	O
base	*(int)
[	O
i	int
]	O
;	O
int	O
atyp	int
=	O
atypes	int
&	O
MASK_RANGE	()->(int)
(	O
0	int
,	O
F_TYPE_WIDTH	O
)	O
;	O
if	O
(	O
atyp	int
==	O
F_object	O
)	O
next	O
=	O
next	O
;	O
else	O
if	O
(	O
atyp	int
==	O
F_int	O
)	O
{	O
ASSURE_TYPE	()->(int)
(	O
next	O
,	O
t_fixnum	O
)	O
;	O
next	O
=	O
COERCE_F_TYPE	O
(	O
next	O
,	O
F_object	O
,	O
F_int	O
)	O
;	O
}	O
else	O
if	O
(	O
atyp	int
==	O
F_shortfloat	O
)	O
{	O
ASSURE_TYPE	()->(int)
(	O
next	O
,	O
t_shortfloat	O
)	O
;	O
next	O
=	O
COERCE_F_TYPE	O
(	O
next	O
,	O
F_object	O
,	O
F_shortfloat	O
)	O
;	O
}	O
else	O
if	O
(	O
atyp	int
==	O
F_double_ptr	O
)	O
{	O
ASSURE_TYPE	()->(int)
(	O
next	O
,	O
t_longfloat	O
)	O
;	O
next	O
=	O
COERCE_F_TYPE	O
(	O
next	O
,	O
F_object	O
,	O
F_double_ptr	O
)	O
;	O
}	O
else	O
{	O
FEerror	()->(int)
(	O
"cant get here!"	*(char)
,	O
0	int
)	O
;	O
}	O
vs_push	()->(int)
(	O
next	O
)	O
;	O
}	O
}	O
res	O
=	O
c_apply_n_fun	()->(int)
(	O
fun	int
,	O
nargs	int
,	O
abase	O
)	O
;	O
res	O
=	O
COERCE_F_TYPE	O
(	O
res	O
,	O
F_RESULT_TYPE	()->(int)
(	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
)	O
,	O
F_object	O
)	O
;	O
if	O
(	O
F_ARG_FLAGS_P	()->(int)
(	O
fun	int
->	O
sfn	O
.	O
sfn_argd	O
,	O
F_caller_sets_one_val	O
)	O
)	O
{	O
fcall	O
.	O
nvalues	O
=	O
1	int
;	O
}	O
vs_top	O
=	O
oldtop	O
;	O
ihs_pop	()->(int)
(	O
)	O
;	O
return	O
res	O
;	O
break	O
;	O
default	O
:	O
vs_base	O
=	O
base	*(int)
;	O
funcall	()->(int)
(	O
fun	int
)	O
;	O
fcall	O
.	O
nvalues	O
=	O
vs_top	O
-	O
vs_base	O
;	O
{	O
int	O
i	int
=	O
fcall	O
.	O
nvalues	O
;	O
object	(*(int))->(int)
*	O
p	*(void)
=	O
vs_top	O
;	O
object	(*(int))->(int)
*	O
b	O
=	O
&	O
fcall	O
.	O
values	O
[	O
i	int
]	O
;	O
vs_top	O
=	O
oldtop	O
;	O
if	O
(	O
i	int
==	O
0	int
)	O
return	O
sLnil	O
;	O
while	O
(	O
--	O
i	int
>	O
0	int
)	O
*	O
(	O
--	O
b	O
)	O
=	O
*	O
(	O
--	O
p	*(void)
)	O
;	O
}	O
return	O
vs_base	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
}	O
void	O
Iinvoke_c_function_from_value_stack	((*(int))->(int),int)->(void)
(	O
object	(*(int))->(int)
(	O
*	O
f	float
)	O
(	O
)	O
,	O
int	O
fargd	int
)	O
{	O
int	O
atypes	int
=	O
F_TYPES	()->(int)
(	O
fargd	int
)	O
>>	O
F_TYPE_WIDTH	O
;	O
object	(*(int))->(int)
*	O
base	*(int)
=	O
vs_base	O
;	O
int	O
i	int
;	O
int	O
nargs	int
=	O
vs_top	O
-	O
vs_base	O
;	O
object	(*(int))->(int)
x	O
[	O
64	int
]	O
,	O
res	O
;	O
int	O
min	int
,	O
max	int
;	O
min	int
=	O
F_MIN_ARGS	()->(int)
(	O
fargd	int
)	O
;	O
max	int
=	O
F_MAX_ARGS	()->(int)
(	O
fargd	int
)	O
;	O
if	O
(	O
nargs	int
<	O
min	int
||	O
nargs	int
>	O
max	int
)	O
{	O
FEerror	()->(int)
(	O
"Wrong number of args"	*(char)
,	O
0	int
)	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nargs	int
;	O
i	int
++	O
,	O
atypes	int
>>=	O
F_TYPE_WIDTH	O
)	O
{	O
object	(*(int))->(int)
next	O
=	O
base	*(int)
[	O
i	int
]	O
;	O
int	O
atyp	int
=	O
atypes	int
&	O
MASK_RANGE	()->(int)
(	O
0	int
,	O
F_TYPE_WIDTH	O
)	O
;	O
if	O
(	O
atyp	int
==	O
F_object	O
)	O
x	O
[	O
i	int
]	O
=	O
next	O
;	O
else	O
if	O
(	O
atyp	int
==	O
F_int	O
)	O
{	O
ASSURE_TYPE	()->(int)
(	O
next	O
,	O
t_fixnum	O
)	O
;	O
x	O
[	O
i	int
]	O
=	O
COERCE_F_TYPE	O
(	O
next	O
,	O
F_object	O
,	O
F_int	O
)	O
;	O
}	O
else	O
if	O
(	O
atyp	int
==	O
F_shortfloat	O
)	O
{	O
ASSURE_TYPE	()->(int)
(	O
next	O
,	O
t_shortfloat	O
)	O
;	O
x	O
[	O
i	int
]	O
=	O
COERCE_F_TYPE	O
(	O
next	O
,	O
F_object	O
,	O
F_shortfloat	O
)	O
;	O
}	O
else	O
if	O
(	O
atyp	int
==	O
F_double_ptr	O
)	O
{	O
ASSURE_TYPE	()->(int)
(	O
next	O
,	O
t_longfloat	O
)	O
;	O
x	O
[	O
i	int
]	O
=	O
COERCE_F_TYPE	O
(	O
next	O
,	O
F_object	O
,	O
F_double_ptr	O
)	O
;	O
}	O
else	O
{	O
FEerror	()->(int)
(	O
"cant get here!"	*(char)
,	O
0	int
)	O
;	O
}	O
}	O
VFUN_NARGS	O
=	O
nargs	int
;	O
res	O
=	O
c_apply_n_f	()->(int)
(	O
f	float
,	O
nargs	int
,	O
x	O
,	O
min	int
,	O
max	int
)	O
;	O
res	O
=	O
COERCE_F_TYPE	O
(	O
res	O
,	O
F_RESULT_TYPE	()->(int)
(	O
fargd	int
)	O
,	O
F_object	O
)	O
;	O
base	*(int)
[	O
0	int
]	O
=	O
res	O
;	O
if	O
(	O
F_ARG_FLAGS_P	()->(int)
(	O
fargd	int
,	O
F_caller_sets_one_val	O
)	O
)	O
{	O
vs_top	O
=	O
base	*(int)
+	O
1	int
;	O
}	O
else	O
{	O
vs_top	O
=	O
base	*(int)
+	O
fcall	O
.	O
nvalues	O
;	O
{	O
int	O
nn	int
=	O
fcall	O
.	O
nvalues	O
;	O
while	O
(	O
--	O
nn	int
>	O
0	int
)	O
{	O
base	*(int)
[	O
nn	int
]	O
=	O
fcall	O
.	O
values	O
[	O
nn	int
]	O
;	O
}	O
}	O
}	O
vs_base	O
=	O
base	*(int)
;	O
return	O
;	O
}	O
