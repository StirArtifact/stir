error_t	O
S_socket_create	(int,int,int,*(int),*(int))->(int)
(	O
mach_port_t	O
pf	int
,	O
int	O
sock_type	int
,	O
int	O
protocol	int
,	O
mach_port_t	O
*	O
port	*(int)
,	O
mach_msg_type_name_t	O
*	O
port_type	*(int)
)	O
{	O
error_t	O
err	O
;	O
struct	O
sock	*(struct)
*	O
sock	*(struct)
;	O
struct	O
pipe_class	*(struct)
*	O
pipe_class	*(struct)
;	O
mode_t	int
mode	int
;	O
switch	O
(	O
protocol	int
)	O
{	O
case	O
0	int
:	O
mode	int
=	O
S_IFSOCK	O
;	O
break	O
;	O
case	O
S_IFCHR	O
:	O
case	O
S_IFSOCK	O
:	O
case	O
S_IFIFO	O
:	O
mode	int
=	O
protocol	int
;	O
break	O
;	O
default	O
:	O
return	O
EPROTONOSUPPORT	O
;	O
}	O
switch	O
(	O
sock_type	int
)	O
{	O
case	O
SOCK_STREAM	int
:	O
pipe_class	*(struct)
=	O
stream_pipe_class	O
;	O
break	O
;	O
case	O
SOCK_DGRAM	int
:	O
pipe_class	*(struct)
=	O
dgram_pipe_class	O
;	O
break	O
;	O
case	O
SOCK_SEQPACKET	int
:	O
pipe_class	*(struct)
=	O
seqpack_pipe_class	O
;	O
break	O
;	O
default	O
:	O
return	O
EPROTOTYPE	O
;	O
}	O
err	O
=	O
sock_create	(*(struct),int,*(*(struct(int,union(struct`,array(char),long),*(struct`),*(struct`),*(struct`),int,int,int,int,*(struct`),*(struct`),*(struct`),*(struct`)))))->(int)
(	O
pipe_class	*(struct)
,	O
mode	int
,	O
&	O
sock	*(struct)
)	O
;	O
if	O
(	O
!	O
err	O
)	O
{	O
err	O
=	O
sock_create_port	(*(struct(int,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),*(struct),*(struct),*(struct),int,int,int,int,*(struct),*(struct),*(struct),*(struct))),*(int))->(int)
(	O
sock	*(struct)
,	O
port	*(int)
)	O
;	O
if	O
(	O
err	O
)	O
sock_free	(*(struct(int,union(struct(int,int,int,int,int,short,short,struct`),array(char),long),*(struct),*(struct),*(struct),int,int,int,int,*(struct),*(struct),*(struct),*(struct))))->(void)
(	O
sock	*(struct)
)	O
;	O
else	O
*	O
port_type	*(int)
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
}	O
return	O
err	O
;	O
}	O
error_t	O
S_socket_create_address	(int,int,*(char),long,*(int),*(int))->(int)
(	O
mach_port_t	O
pf	int
,	O
int	O
sockaddr_type	int
,	O
char	O
*	O
data	*(char)
,	O
size_t	long
data_len	long
,	O
mach_port_t	O
*	O
addr_port	*(int)
,	O
mach_msg_type_name_t	O
*	O
addr_port_type	*(int)
)	O
{	O
return	O
EOPNOTSUPP	O
;	O
}	O
error_t	O
S_socket_fabricate_address	(int,int,*(int),*(int))->(int)
(	O
mach_port_t	O
pf	int
,	O
int	O
sockaddr_type	int
,	O
mach_port_t	O
*	O
addr_port	*(int)
,	O
mach_msg_type_name_t	O
*	O
addr_port_type	*(int)
)	O
{	O
error_t	O
err	O
;	O
struct	O
addr	*(struct)
*	O
addr	*(struct)
;	O
if	O
(	O
sockaddr_type	int
!=	O
AF_LOCAL	O
)	O
return	O
EAFNOSUPPORT	O
;	O
err	O
=	O
addr_create	(*(*(struct)))->(int)
(	O
&	O
addr	*(struct)
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
*	O
addr_port	*(int)
=	O
ports_get_right	()->(int)
(	O
addr	*(struct)
)	O
;	O
*	O
addr_port_type	*(int)
=	O
MACH_MSG_TYPE_MAKE_SEND	O
;	O
ports_port_deref	()->(int)
(	O
addr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
S_socket_whatis_address	(*(struct),*(int),*(*(char)),*(long))->(int)
(	O
struct	O
addr	*(struct)
*	O
addr	*(struct)
,	O
int	O
*	O
sockaddr_type	int
,	O
char	O
*	O
*	O
sockaddr	struct(short,array(char))
,	O
size_t	long
*	O
sockaddr_len	*(long)
)	O
{	O
socklen_t	int
addr_len	int
=	O
(	O
offsetof	O
(	O
struct	O
sockaddr	struct(short,array(char))
,	O
sa_data	array(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
addr	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
*	O
sockaddr_type	int
=	O
AF_LOCAL	O
;	O
if	O
(	O
*	O
sockaddr_len	*(long)
<	O
addr_len	int
)	O
*	O
sockaddr	struct(short,array(char))
=	O
mmap	()->(int)
(	O
0	int
,	O
addr_len	int
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
*	O
sockaddr	struct(short,array(char))
)	O
->	O
sa_len	O
=	O
addr_len	int
;	O
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
*	O
sockaddr	struct(short,array(char))
)	O
->	O
sa_family	short
=	O
*	O
sockaddr_type	int
;	O
(	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
*	O
sockaddr	struct(short,array(char))
)	O
->	O
sa_data	array(char)
[	O
0	int
]	O
=	O
0	int
;	O
*	O
sockaddr_len	*(long)
=	O
addr_len	int
;	O
return	O
0	int
;	O
}	O
