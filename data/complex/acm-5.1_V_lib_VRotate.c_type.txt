VMatrix	struct(array(array(double)))
*	O
VRotate	(*(struct(array(array(double)))),int,double)->(*(struct(array(array(double)))))
(	O
VMatrix	struct(array(array(double)))
*	O
Mt1	*(struct(array(array(double))))
,	O
int	O
operation	short
,	O
double	O
angle	double
)	O
{	O
VMatrix	struct(array(array(double)))
m	array(array(double))
,	O
s	double
;	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
m	array(array(double))
)	O
;	O
switch	O
(	O
operation	short
)	O
{	O
case	O
XRotation	int
:	O
m	array(array(double))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
m	array(array(double))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
=	O
cos	(double)->(double)
(	O
angle	double
)	O
;	O
m	array(array(double))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
1	int
]	O
=	O
sin	(double)->(double)
(	O
angle	double
)	O
;	O
m	array(array(double))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
2	int
]	O
=	O
-	O
m	array(array(double))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
1	int
]	O
;	O
break	O
;	O
case	O
YRotation	int
:	O
m	array(array(double))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
m	array(array(double))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
2	int
]	O
=	O
cos	(double)->(double)
(	O
angle	double
)	O
;	O
m	array(array(double))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
0	int
]	O
=	O
sin	(double)->(double)
(	O
angle	double
)	O
;	O
m	array(array(double))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
2	int
]	O
=	O
-	O
m	array(array(double))
.	O
m	array(array(double))
[	O
2	int
]	O
[	O
0	int
]	O
;	O
break	O
;	O
case	O
ZRotation	int
:	O
m	array(array(double))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
0	int
]	O
=	O
m	array(array(double))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
1	int
]	O
=	O
cos	(double)->(double)
(	O
angle	double
)	O
;	O
m	array(array(double))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
0	int
]	O
=	O
sin	(double)->(double)
(	O
angle	double
)	O
;	O
m	array(array(double))
.	O
m	array(array(double))
[	O
0	int
]	O
[	O
1	int
]	O
=	O
-	O
m	array(array(double))
.	O
m	array(array(double))
[	O
1	int
]	O
[	O
0	int
]	O
;	O
break	O
;	O
}	O
s	double
=	O
*	O
Mt1	*(struct(array(array(double))))
;	O
VMatrixMult	(*(struct(array(array(double)))),*(struct(array(array(double)))),*(struct(array(array(double)))))->(void)
(	O
&	O
s	double
,	O
&	O
m	array(array(double))
,	O
Mt1	*(struct(array(array(double))))
)	O
;	O
return	O
Mt1	*(struct(array(array(double))))
;	O
}	O
VMatrix	struct(array(array(double)))
*	O
VTranslatePoint	(*(struct(array(array(double)))),struct(double,double,double))->(*(struct(array(array(double)))))
(	O
VMatrix	struct(array(array(double)))
*	O
Mt	*(struct(array(array(double))))
,	O
VPoint	struct(double,double,double)
loc	*(struct(double,double,double))
)	O
{	O
Mt	*(struct(array(array(double))))
->	O
m	array(array(double))
[	O
0	int
]	O
[	O
3	int
]	O
+=	O
loc	*(struct(double,double,double))
.	O
x	double
;	O
Mt	*(struct(array(array(double))))
->	O
m	array(array(double))
[	O
1	int
]	O
[	O
3	int
]	O
+=	O
loc	*(struct(double,double,double))
.	O
y	double
;	O
Mt	*(struct(array(array(double))))
->	O
m	array(array(double))
[	O
2	int
]	O
[	O
3	int
]	O
+=	O
loc	*(struct(double,double,double))
.	O
z	double
;	O
return	O
Mt	*(struct(array(array(double))))
;	O
}	O
VMatrix	struct(array(array(double)))
*	O
VTranslate	(*(struct(array(array(double)))),double,double,double)->(*(struct(array(array(double)))))
(	O
VMatrix	struct(array(array(double)))
*	O
Mt	*(struct(array(array(double))))
,	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
z	double
)	O
{	O
Mt	*(struct(array(array(double))))
->	O
m	array(array(double))
[	O
0	int
]	O
[	O
3	int
]	O
+=	O
x	double
;	O
Mt	*(struct(array(array(double))))
->	O
m	array(array(double))
[	O
1	int
]	O
[	O
3	int
]	O
+=	O
y	double
;	O
Mt	*(struct(array(array(double))))
->	O
m	array(array(double))
[	O
2	int
]	O
[	O
3	int
]	O
+=	O
z	double
;	O
return	O
Mt	*(struct(array(array(double))))
;	O
}	O
