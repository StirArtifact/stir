static	O
struct	O
mu_kwd	struct(*(char),int)
famtab	array(struct(*(char),int))
[	O
]	O
=	O
{	O
{	O
"unix"	*(char)
,	O
AF_UNIX	O
}	O
,	O
{	O
"local"	*(char)
,	O
AF_UNIX	O
}	O
,	O
{	O
"inet4"	*(char)
,	O
AF_INET	O
}	O
,	O
{	O
"inet6"	*(char)
,	O
AF_INET6	O
}	O
,	O
{	O
"inet"	*(char)
,	O
AF_UNSPEC	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
int	O
mu_sockaddr_from_url	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(struct),*(struct(int,int,int,int,short)))->(int)
(	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
*	O
retval	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))
,	O
mu_url_t	*(struct)
url	*(struct)
,	O
struct	O
mu_sockaddr_hints	struct(int,int,int,int,short)
*	O
mh	*(struct(int,int,int,int,short))
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
scheme	*(char)
;	O
const	O
char	O
*	O
node	*(char)
=	O
NULL	O
,	O
*	O
serv	*(char)
=	O
NULL	O
;	O
struct	O
mu_sockaddr_hints	struct(int,int,int,int,short)
hints	*(struct(int,int,int,int,short))
;	O
if	O
(	O
mh	*(struct(int,int,int,int,short))
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
hints	*(struct(int,int,int,int,short))
,	O
mh	*(struct(int,int,int,int,short))
,	O
sizeof	O
(	O
hints	*(struct(int,int,int,int,short))
)	O
)	O
;	O
else	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	*(struct(int,int,int,int,short))
,	O
0	int
,	O
sizeof	O
(	O
hints	*(struct(int,int,int,int,short))
)	O
)	O
;	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
=	O
AF_UNSPEC	O
;	O
hints	*(struct(int,int,int,int,short))
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
hints	*(struct(int,int,int,int,short))
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
}	O
if	O
(	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
==	O
AF_UNSPEC	O
)	O
{	O
rc	int
=	O
mu_url_sget_scheme	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
scheme	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
mu_kwd_xlat_name	(*(struct(*(char),int)),*(char),*(int))->(int)
(	O
famtab	array(struct(*(char),int))
,	O
scheme	*(char)
,	O
&	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
)	O
)	O
{	O
if	O
(	O
hints	*(struct(int,int,int,int,short))
.	O
flags	int
&	O
MU_AH_DETECT_FAMILY	int
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
mu_url_get_flags	(*(struct),*(int))->(int)
(	O
url	*(struct)
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
flags	int
&	O
MU_URL_IPV6	int
)	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
=	O
AF_INET6	O
;	O
else	O
if	O
(	O
flags	int
&	O
(	O
MU_URL_HOST	int
|	O
MU_URL_PORT	int
)	O
)	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
=	O
AF_INET	O
;	O
else	O
if	O
(	O
flags	int
&	O
MU_URL_PATH	int
)	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
=	O
AF_UNIX	O
;	O
else	O
return	O
MU_ERR_FAMILY	O
;	O
}	O
else	O
return	O
MU_ERR_FAMILY	O
;	O
}	O
}	O
if	O
(	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
==	O
AF_UNIX	O
)	O
{	O
rc	int
=	O
mu_url_sget_path	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
node	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
rc	int
=	O
mu_url_sget_host	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
node	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
return	O
MU_ERR_NONAME	O
;	O
}	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
==	O
AF_UNSPEC	O
)	O
hints	*(struct(int,int,int,int,short))
.	O
family	int
=	O
mu_url_has_flag	(*(struct),int)->(int)
(	O
url	*(struct)
,	O
MU_URL_IPV6	int
)	O
?	O
AF_INET6	O
:	O
AF_INET	O
;	O
rc	int
=	O
mu_url_sget_host	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
node	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
MU_ERR_NONAME	O
;	O
rc	int
=	O
mu_url_sget_portstr	(*(struct),*(*(char)))->(int)
(	O
url	*(struct)
,	O
&	O
serv	*(char)
)	O
;	O
if	O
(	O
rc	int
&&	O
rc	int
!=	O
MU_ERR_NOENT	O
)	O
return	O
MU_ERR_NONAME	O
;	O
}	O
return	O
mu_sockaddr_from_node	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(char),*(char),*(struct(int,int,int,int,short)))->(int)
(	O
retval	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(short,array(char))),int,*(char))))
,	O
node	*(char)
,	O
serv	*(char)
,	O
&	O
hints	*(struct(int,int,int,int,short))
)	O
;	O
}	O
