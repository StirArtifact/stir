elf_property	O
*	O
_bfd_elf_get_property	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
unsigned	O
int	O
type	enum(int,int,int,int)
,	O
unsigned	O
int	O
datasz	O
)	O
{	O
elf_property_list	O
*	O
p	*(void)
,	O
*	O
*	O
lastp	O
;	O
if	O
(	O
bfd_get_flavour	O
(	O
abfd	*(struct)
)	O
!=	O
bfd_target_elf_flavour	int
)	O
{	O
abort	()->(void)
(	O
)	O
;	O
}	O
lastp	O
=	O
&	O
elf_properties	O
(	O
abfd	*(struct)
)	O
;	O
for	O
(	O
p	*(void)
=	O
*	O
lastp	O
;	O
p	*(void)
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
type	enum(int,int,int,int)
==	O
p	*(void)
->	O
property	O
.	O
pr_type	O
)	O
{	O
if	O
(	O
datasz	O
>	O
p	*(void)
->	O
property	O
.	O
pr_datasz	O
)	O
{	O
p	*(void)
->	O
property	O
.	O
pr_datasz	O
=	O
datasz	O
;	O
}	O
return	O
&	O
p	*(void)
->	O
property	O
;	O
}	O
else	O
if	O
(	O
type	enum(int,int,int,int)
<	O
p	*(void)
->	O
property	O
.	O
pr_type	O
)	O
break	O
;	O
lastp	O
=	O
&	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
p	*(void)
=	O
(	O
elf_property_list	O
*	O
)	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
sizeof	O
(	O
*	O
p	*(void)
)	O
)	O
;	O
if	O
(	O
p	*(void)
==	O
NULL	O
)	O
{	O
_bfd_error_handler	(*(char))->(void)
(	O
_	O
(	O
"%pB: out of memory in _bfd_elf_get_property"	*(char)
)	O
,	O
abfd	*(struct)
)	O
;	O
_exit	(int)->(void)
(	O
EXIT_FAILURE	O
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
p	*(void)
,	O
0	int
,	O
sizeof	O
(	O
*	O
p	*(void)
)	O
)	O
;	O
p	*(void)
->	O
property	O
.	O
pr_type	O
=	O
type	enum(int,int,int,int)
;	O
p	*(void)
->	O
property	O
.	O
pr_datasz	O
=	O
datasz	O
;	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
*	O
lastp	O
;	O
*	O
lastp	O
=	O
p	*(void)
;	O
return	O
&	O
p	*(void)
->	O
property	O
;	O
}	O
bfd_boolean	int
_bfd_elf_parse_gnu_properties	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
Elf_Internal_Note	O
*	O
note	O
)	O
{	O
const	O
struct	O
elf_backend_data	O
*	O
bed	O
=	O
get_elf_backend_data	O
(	O
abfd	*(struct)
)	O
;	O
unsigned	O
int	O
align_size	O
=	O
bed	O
->	O
s	*(void)
->	O
elfclass	O
==	O
ELFCLASS64	O
?	O
8	int
:	O
4	int
;	O
bfd_byte	char
*	O
ptr	*(*(char))
=	O
(	O
bfd_byte	char
*	O
)	O
note	O
->	O
descdata	O
;	O
bfd_byte	char
*	O
ptr_end	O
=	O
ptr	*(*(char))
+	O
note	O
->	O
descsz	O
;	O
if	O
(	O
note	O
->	O
descsz	O
<	O
8	int
||	O
(	O
note	O
->	O
descsz	O
%	O
align_size	O
)	O
!=	O
0	int
)	O
{	O
bad_size	O
:	O
_bfd_error_handler	(*(char))->(void)
(	O
_	O
(	O
"warning: %pB: corrupt GNU_PROPERTY_TYPE (%ld) size: %#lx"	*(char)
)	O
,	O
abfd	*(struct)
,	O
note	O
->	O
type	enum(int,int,int,int)
,	O
note	O
->	O
descsz	O
)	O
;	O
return	O
FALSE	O
;	O
}	O
while	O
(	O
ptr	*(*(char))
!=	O
ptr_end	O
)	O
{	O
unsigned	O
int	O
type	enum(int,int,int,int)
;	O
unsigned	O
int	O
datasz	O
;	O
elf_property	O
*	O
prop	O
;	O
if	O
(	O
(	O
size_t	long
)	O
(	O
ptr_end	O
-	O
ptr	*(*(char))
)	O
<	O
8	int
)	O
goto	O
bad_size	O
;	O
type	enum(int,int,int,int)
=	O
bfd_h_get_32	O
(	O
abfd	*(struct)
,	O
ptr	*(*(char))
)	O
;	O
datasz	O
=	O
bfd_h_get_32	O
(	O
abfd	*(struct)
,	O
ptr	*(*(char))
+	O
4	int
)	O
;	O
ptr	*(*(char))
+=	O
8	int
;	O
if	O
(	O
datasz	O
>	O
(	O
size_t	long
)	O
(	O
ptr_end	O
-	O
ptr	*(*(char))
)	O
)	O
{	O
_bfd_error_handler	(*(char))->(void)
(	O
_	O
(	O
"warning: %pB: corrupt GNU_PROPERTY_TYPE (%ld) type (0x%x) datasz: 0x%x"	*(char)
)	O
,	O
abfd	*(struct)
,	O
note	O
->	O
type	enum(int,int,int,int)
,	O
type	enum(int,int,int,int)
,	O
datasz	O
)	O
;	O
elf_properties	O
(	O
abfd	*(struct)
)	O
=	O
NULL	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
type	enum(int,int,int,int)
>=	O
GNU_PROPERTY_LOPROC	O
)	O
{	O
if	O
(	O
bed	O
->	O
elf_machine_code	O
==	O
EM_NONE	O
)	O
{	O
goto	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
else	O
if	O
(	O
type	enum(int,int,int,int)
<	O
GNU_PROPERTY_LOUSER	O
&&	O
bed	O
->	O
parse_gnu_properties	O
)	O
{	O
enum	O
elf_property_kind	O
kind	O
=	O
bed	O
->	O
parse_gnu_properties	O
(	O
abfd	*(struct)
,	O
type	enum(int,int,int,int)
,	O
ptr	*(*(char))
,	O
datasz	O
)	O
;	O
if	O
(	O
kind	O
==	O
property_corrupt	O
)	O
{	O
elf_properties	O
(	O
abfd	*(struct)
)	O
=	O
NULL	O
;	O
return	O
FALSE	O
;	O
}	O
else	O
if	O
(	O
kind	O
!=	O
property_ignored	O
)	O
goto	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
}	O
else	O
{	O
switch	O
(	O
type	enum(int,int,int,int)
)	O
{	O
case	O
GNU_PROPERTY_STACK_SIZE	O
:	O
if	O
(	O
datasz	O
!=	O
align_size	O
)	O
{	O
_bfd_error_handler	(*(char))->(void)
(	O
_	O
(	O
"warning: %pB: corrupt stack size: 0x%x"	*(char)
)	O
,	O
abfd	*(struct)
,	O
datasz	O
)	O
;	O
elf_properties	O
(	O
abfd	*(struct)
)	O
=	O
NULL	O
;	O
return	O
FALSE	O
;	O
}	O
prop	O
=	O
_bfd_elf_get_property	O
(	O
abfd	*(struct)
,	O
type	enum(int,int,int,int)
,	O
datasz	O
)	O
;	O
if	O
(	O
datasz	O
==	O
8	int
)	O
prop	O
->	O
u	union(long,*(struct))
.	O
number	O
=	O
bfd_h_get_64	O
(	O
abfd	*(struct)
,	O
ptr	*(*(char))
)	O
;	O
else	O
prop	O
->	O
u	union(long,*(struct))
.	O
number	O
=	O
bfd_h_get_32	O
(	O
abfd	*(struct)
,	O
ptr	*(*(char))
)	O
;	O
prop	O
->	O
pr_kind	O
=	O
property_number	O
;	O
goto	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
case	O
GNU_PROPERTY_NO_COPY_ON_PROTECTED	O
:	O
if	O
(	O
datasz	O
!=	O
0	int
)	O
{	O
_bfd_error_handler	(*(char))->(void)
(	O
_	O
(	O
"warning: %pB: corrupt no copy on protected size: 0x%x"	*(char)
)	O
,	O
abfd	*(struct)
,	O
datasz	O
)	O
;	O
elf_properties	O
(	O
abfd	*(struct)
)	O
=	O
NULL	O
;	O
return	O
FALSE	O
;	O
}	O
prop	O
=	O
_bfd_elf_get_property	O
(	O
abfd	*(struct)
,	O
type	enum(int,int,int,int)
,	O
datasz	O
)	O
;	O
elf_has_no_copy_on_protected	O
(	O
abfd	*(struct)
)	O
=	O
TRUE	int
;	O
prop	O
->	O
pr_kind	O
=	O
property_number	O
;	O
goto	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
default	O
:	O
break	O
;	O
}	O
}	O
_bfd_error_handler	(*(char))->(void)
(	O
_	O
(	O
"warning: %pB: unsupported GNU_PROPERTY_TYPE (%ld) type: 0x%x"	*(char)
)	O
,	O
abfd	*(struct)
,	O
note	O
->	O
type	enum(int,int,int,int)
,	O
type	enum(int,int,int,int)
)	O
;	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
:	O
ptr	*(*(char))
+=	O
(	O
datasz	O
+	O
(	O
align_size	O
-	O
1	int
)	O
)	O
&	O
~	O
(	O
align_size	O
-	O
1	int
)	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
bfd_boolean	int
elf_merge_gnu_properties	O
(	O
struct	O
bfd_link_info	O
*	O
info	*(void)
,	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd	struct
*	O
bbfd	*(struct)
,	O
elf_property	O
*	O
aprop	O
,	O
elf_property	O
*	O
bprop	O
)	O
{	O
const	O
struct	O
elf_backend_data	O
*	O
bed	O
=	O
get_elf_backend_data	O
(	O
abfd	*(struct)
)	O
;	O
unsigned	O
int	O
pr_type	O
=	O
aprop	O
!=	O
NULL	O
?	O
aprop	O
->	O
pr_type	O
:	O
bprop	O
->	O
pr_type	O
;	O
if	O
(	O
bed	O
->	O
merge_gnu_properties	O
!=	O
NULL	O
&&	O
pr_type	O
>=	O
GNU_PROPERTY_LOPROC	O
&&	O
pr_type	O
<	O
GNU_PROPERTY_LOUSER	O
)	O
return	O
bed	O
->	O
merge_gnu_properties	O
(	O
info	*(void)
,	O
abfd	*(struct)
,	O
bbfd	*(struct)
,	O
aprop	O
,	O
bprop	O
)	O
;	O
switch	O
(	O
pr_type	O
)	O
{	O
case	O
GNU_PROPERTY_STACK_SIZE	O
:	O
if	O
(	O
aprop	O
!=	O
NULL	O
&&	O
bprop	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
bprop	O
->	O
u	union(long,*(struct))
.	O
number	O
>	O
aprop	O
->	O
u	union(long,*(struct))
.	O
number	O
)	O
{	O
aprop	O
->	O
u	union(long,*(struct))
.	O
number	O
=	O
bprop	O
->	O
u	union(long,*(struct))
.	O
number	O
;	O
return	O
TRUE	int
;	O
}	O
break	O
;	O
}	O
case	O
GNU_PROPERTY_NO_COPY_ON_PROTECTED	O
:	O
return	O
aprop	O
==	O
NULL	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
FALSE	O
;	O
}	O
static	O
elf_property	O
*	O
elf_find_and_remove_property	O
(	O
elf_property_list	O
*	O
*	O
listp	O
,	O
unsigned	O
int	O
type	enum(int,int,int,int)
,	O
bfd_boolean	int
rm	O
)	O
{	O
elf_property_list	O
*	O
list	O
;	O
for	O
(	O
list	O
=	O
*	O
listp	O
;	O
list	O
;	O
list	O
=	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
type	enum(int,int,int,int)
==	O
list	O
->	O
property	O
.	O
pr_type	O
)	O
{	O
if	O
(	O
rm	O
)	O
*	O
listp	O
=	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
return	O
&	O
list	O
->	O
property	O
;	O
}	O
else	O
if	O
(	O
type	enum(int,int,int,int)
<	O
list	O
->	O
property	O
.	O
pr_type	O
)	O
break	O
;	O
listp	O
=	O
&	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
elf_merge_gnu_property_list	O
(	O
struct	O
bfd_link_info	O
*	O
info	*(void)
,	O
bfd	struct
*	O
first_pbfd	O
,	O
bfd	struct
*	O
abfd	*(struct)
,	O
elf_property_list	O
*	O
*	O
listp	O
)	O
{	O
elf_property_list	O
*	O
p	*(void)
,	O
*	O
*	O
lastp	O
;	O
elf_property	O
*	O
pr	O
;	O
bfd_boolean	int
number_p	O
;	O
bfd_vma	long
number	O
=	O
0	int
;	O
lastp	O
=	O
&	O
elf_properties	O
(	O
first_pbfd	O
)	O
;	O
for	O
(	O
p	*(void)
=	O
*	O
lastp	O
;	O
p	*(void)
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
pr_kind	O
!=	O
property_remove	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
pr_kind	O
==	O
property_number	O
)	O
{	O
number_p	O
=	O
TRUE	int
;	O
number	O
=	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
;	O
}	O
else	O
number_p	O
=	O
FALSE	O
;	O
pr	O
=	O
elf_find_and_remove_property	O
(	O
listp	O
,	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
TRUE	int
)	O
;	O
elf_merge_gnu_properties	O
(	O
info	*(void)
,	O
first_pbfd	O
,	O
abfd	*(struct)
,	O
&	O
p	*(void)
->	O
property	O
,	O
pr	O
)	O
;	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
pr_kind	O
==	O
property_remove	O
)	O
{	O
if	O
(	O
info	*(void)
->	O
has_map_file	O
)	O
{	O
if	O
(	O
number_p	O
)	O
{	O
if	O
(	O
pr	O
!=	O
NULL	O
)	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Removed property %W to merge %pB (0x%v) "	*(char)
"and %pB (0x%v)\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
first_pbfd	O
,	O
number	O
,	O
abfd	*(struct)
,	O
pr	O
->	O
u	union(long,*(struct))
.	O
number	O
)	O
;	O
else	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Removed property %W to merge %pB (0x%v) "	*(char)
"and %pB (not found)\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
first_pbfd	O
,	O
number	O
,	O
abfd	*(struct)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
pr	O
!=	O
NULL	O
)	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Removed property %W to merge %pB and %pB\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
first_pbfd	O
,	O
abfd	*(struct)
)	O
;	O
else	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Removed property %W to merge %pB and %pB "	*(char)
"(not found)\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
first_pbfd	O
,	O
abfd	*(struct)
)	O
;	O
}	O
}	O
*	O
lastp	O
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
continue	O
;	O
}	O
else	O
if	O
(	O
number_p	O
)	O
{	O
if	O
(	O
pr	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
!=	O
number	O
||	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
!=	O
pr	O
->	O
u	union(long,*(struct))
.	O
number	O
)	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Updated property %W (0x%v) to merge %pB (0x%v) "	*(char)
"and %pB (0x%v)\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
,	O
first_pbfd	O
,	O
number	O
,	O
abfd	*(struct)
,	O
pr	O
->	O
u	union(long,*(struct))
.	O
number	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
!=	O
number	O
)	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Updated property %W (%v) to merge %pB (0x%v) "	*(char)
"and %pB (not found)\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
,	O
first_pbfd	O
,	O
number	O
,	O
abfd	*(struct)
)	O
;	O
}	O
}	O
lastp	O
=	O
&	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
for	O
(	O
p	*(void)
=	O
*	O
listp	O
;	O
p	*(void)
!=	O
NULL	O
;	O
p	*(void)
=	O
p	*(void)
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
pr_kind	O
==	O
property_number	O
)	O
{	O
number_p	O
=	O
TRUE	int
;	O
number	O
=	O
p	*(void)
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
;	O
}	O
else	O
number_p	O
=	O
FALSE	O
;	O
if	O
(	O
elf_merge_gnu_properties	O
(	O
info	*(void)
,	O
first_pbfd	O
,	O
abfd	*(struct)
,	O
NULL	O
,	O
&	O
p	*(void)
->	O
property	O
)	O
)	O
{	O
if	O
(	O
p	*(void)
->	O
property	O
.	O
pr_type	O
==	O
GNU_PROPERTY_NO_COPY_ON_PROTECTED	O
)	O
elf_has_no_copy_on_protected	O
(	O
first_pbfd	O
)	O
=	O
TRUE	int
;	O
pr	O
=	O
_bfd_elf_get_property	O
(	O
first_pbfd	O
,	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
p	*(void)
->	O
property	O
.	O
pr_datasz	O
)	O
;	O
if	O
(	O
pr	O
->	O
pr_kind	O
!=	O
property_unknown	O
)	O
abort	()->(void)
(	O
)	O
;	O
*	O
pr	O
=	O
p	*(void)
->	O
property	O
;	O
}	O
else	O
{	O
pr	O
=	O
elf_find_and_remove_property	O
(	O
&	O
elf_properties	O
(	O
first_pbfd	O
)	O
,	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
FALSE	O
)	O
;	O
if	O
(	O
pr	O
==	O
NULL	O
)	O
{	O
if	O
(	O
number_p	O
)	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Removed property %W to merge %pB (not found) and "	*(char)
"%pB (0x%v)\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
first_pbfd	O
,	O
abfd	*(struct)
,	O
number	O
)	O
;	O
else	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Removed property %W to merge %pB and %pB\n"	*(char)
)	O
,	O
(	O
bfd_vma	long
)	O
p	*(void)
->	O
property	O
.	O
pr_type	O
,	O
first_pbfd	O
,	O
abfd	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
pr	O
->	O
pr_kind	O
!=	O
property_remove	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
static	O
bfd_size_type	long
elf_get_gnu_property_section_size	O
(	O
elf_property_list	O
*	O
list	O
,	O
unsigned	O
int	O
align_size	O
)	O
{	O
bfd_size_type	long
size	long
;	O
unsigned	O
int	O
descsz	O
;	O
descsz	O
=	O
offsetof	O
(	O
Elf_External_Note	O
,	O
name	*(char)
[	O
sizeof	O
"GNU"	*(char)
]	O
)	O
;	O
descsz	O
=	O
(	O
descsz	O
+	O
3	int
)	O
&	O
-	O
(	O
unsigned	O
int	O
)	O
4	int
;	O
size	long
=	O
descsz	O
;	O
for	O
(	O
;	O
list	O
!=	O
NULL	O
;	O
list	O
=	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
unsigned	O
int	O
datasz	O
;	O
if	O
(	O
list	O
->	O
property	O
.	O
pr_kind	O
==	O
property_remove	O
)	O
continue	O
;	O
if	O
(	O
list	O
->	O
property	O
.	O
pr_type	O
==	O
GNU_PROPERTY_STACK_SIZE	O
)	O
datasz	O
=	O
align_size	O
;	O
else	O
datasz	O
=	O
list	O
->	O
property	O
.	O
pr_datasz	O
;	O
size	long
+=	O
4	int
+	O
4	int
+	O
datasz	O
;	O
size	long
=	O
(	O
size	long
+	O
(	O
align_size	O
-	O
1	int
)	O
)	O
&	O
~	O
(	O
align_size	O
-	O
1	int
)	O
;	O
}	O
return	O
size	long
;	O
}	O
static	O
void	O
elf_write_gnu_properties	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd_byte	char
*	O
contents	*(char)
,	O
elf_property_list	O
*	O
list	O
,	O
unsigned	O
int	O
size	long
,	O
unsigned	O
int	O
align_size	O
)	O
{	O
unsigned	O
int	O
descsz	O
;	O
unsigned	O
int	O
datasz	O
;	O
Elf_External_Note	O
*	O
e_note	O
;	O
e_note	O
=	O
(	O
Elf_External_Note	O
*	O
)	O
contents	*(char)
;	O
descsz	O
=	O
offsetof	O
(	O
Elf_External_Note	O
,	O
name	*(char)
[	O
sizeof	O
"GNU"	*(char)
]	O
)	O
;	O
descsz	O
=	O
(	O
descsz	O
+	O
3	int
)	O
&	O
-	O
(	O
unsigned	O
int	O
)	O
4	int
;	O
bfd_h_put_32	O
(	O
abfd	*(struct)
,	O
sizeof	O
"GNU"	*(char)
,	O
&	O
e_note	O
->	O
namesz	O
)	O
;	O
bfd_h_put_32	O
(	O
abfd	*(struct)
,	O
size	long
-	O
descsz	O
,	O
&	O
e_note	O
->	O
descsz	O
)	O
;	O
bfd_h_put_32	O
(	O
abfd	*(struct)
,	O
NT_GNU_PROPERTY_TYPE_0	O
,	O
&	O
e_note	O
->	O
type	enum(int,int,int,int)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
e_note	O
->	O
name	*(char)
,	O
"GNU"	*(char)
,	O
sizeof	O
"GNU"	*(char)
)	O
;	O
size	long
=	O
descsz	O
;	O
for	O
(	O
;	O
list	O
!=	O
NULL	O
;	O
list	O
=	O
list	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
list	O
->	O
property	O
.	O
pr_kind	O
==	O
property_remove	O
)	O
continue	O
;	O
if	O
(	O
list	O
->	O
property	O
.	O
pr_type	O
==	O
GNU_PROPERTY_STACK_SIZE	O
)	O
datasz	O
=	O
align_size	O
;	O
else	O
datasz	O
=	O
list	O
->	O
property	O
.	O
pr_datasz	O
;	O
bfd_h_put_32	O
(	O
abfd	*(struct)
,	O
list	O
->	O
property	O
.	O
pr_type	O
,	O
contents	*(char)
+	O
size	long
)	O
;	O
bfd_h_put_32	O
(	O
abfd	*(struct)
,	O
datasz	O
,	O
contents	*(char)
+	O
size	long
+	O
4	int
)	O
;	O
size	long
+=	O
4	int
+	O
4	int
;	O
switch	O
(	O
list	O
->	O
property	O
.	O
pr_kind	O
)	O
{	O
case	O
property_number	O
:	O
switch	O
(	O
datasz	O
)	O
{	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
case	O
0	int
:	O
break	O
;	O
case	O
4	int
:	O
bfd_h_put_32	O
(	O
abfd	*(struct)
,	O
list	O
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
,	O
contents	*(char)
+	O
size	long
)	O
;	O
break	O
;	O
case	O
8	int
:	O
bfd_h_put_64	O
(	O
abfd	*(struct)
,	O
list	O
->	O
property	O
.	O
u	union(long,*(struct))
.	O
number	O
,	O
contents	*(char)
+	O
size	long
)	O
;	O
break	O
;	O
}	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
size	long
+=	O
datasz	O
;	O
size	long
=	O
(	O
size	long
+	O
(	O
align_size	O
-	O
1	int
)	O
)	O
&	O
~	O
(	O
align_size	O
-	O
1	int
)	O
;	O
}	O
}	O
bfd	struct
*	O
_bfd_elf_link_setup_gnu_properties	O
(	O
struct	O
bfd_link_info	O
*	O
info	*(void)
)	O
{	O
bfd	struct
*	O
abfd	*(struct)
,	O
*	O
first_pbfd	O
=	O
NULL	O
;	O
elf_property_list	O
*	O
list	O
;	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
;	O
bfd_boolean	int
has_properties	O
=	O
FALSE	O
;	O
const	O
struct	O
elf_backend_data	O
*	O
bed	O
=	O
get_elf_backend_data	O
(	O
info	*(void)
->	O
output_bfd	*(struct)
)	O
;	O
unsigned	O
int	O
elfclass	O
=	O
bed	O
->	O
s	*(void)
->	O
elfclass	O
;	O
int	O
elf_machine_code	O
=	O
bed	O
->	O
elf_machine_code	O
;	O
for	O
(	O
abfd	*(struct)
=	O
info	*(void)
->	O
input_bfds	O
;	O
abfd	*(struct)
!=	O
NULL	O
;	O
abfd	*(struct)
=	O
abfd	*(struct)
->	O
link	(*(char),*(char))->(int)
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
bfd_get_flavour	O
(	O
abfd	*(struct)
)	O
==	O
bfd_target_elf_flavour	int
&&	O
(	O
abfd	*(struct)
->	O
flags	int
&	O
DYNAMIC	O
)	O
==	O
0	int
&&	O
elf_properties	O
(	O
abfd	*(struct)
)	O
!=	O
NULL	O
)	O
{	O
has_properties	O
=	O
TRUE	int
;	O
if	O
(	O
(	O
elf_machine_code	O
==	O
get_elf_backend_data	O
(	O
abfd	*(struct)
)	O
->	O
elf_machine_code	O
)	O
&&	O
(	O
elfclass	O
==	O
get_elf_backend_data	O
(	O
abfd	*(struct)
)	O
->	O
s	*(void)
->	O
elfclass	O
)	O
&&	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
NOTE_GNU_PROPERTY_SECTION_NAME	O
)	O
!=	O
NULL	O
)	O
{	O
first_pbfd	O
=	O
abfd	*(struct)
;	O
break	O
;	O
}	O
}	O
if	O
(	O
!	O
has_properties	O
)	O
return	O
NULL	O
;	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"\n"	*(char)
)	O
)	O
;	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"Merging program properties\n"	*(char)
)	O
)	O
;	O
info	*(void)
->	O
callbacks	O
->	O
minfo	O
(	O
_	O
(	O
"\n"	*(char)
)	O
)	O
;	O
for	O
(	O
abfd	*(struct)
=	O
info	*(void)
->	O
input_bfds	O
;	O
abfd	*(struct)
!=	O
NULL	O
;	O
abfd	*(struct)
=	O
abfd	*(struct)
->	O
link	(*(char),*(char))->(int)
.	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
if	O
(	O
abfd	*(struct)
!=	O
first_pbfd	O
&&	O
(	O
abfd	*(struct)
->	O
flags	int
&	O
(	O
DYNAMIC	O
|	O
BFD_PLUGIN	O
|	O
BFD_LINKER_CREATED	O
)	O
)	O
==	O
0	int
)	O
{	O
elf_property_list	O
*	O
null_ptr	O
=	O
NULL	O
;	O
elf_property_list	O
*	O
*	O
listp	O
=	O
&	O
null_ptr	O
;	O
if	O
(	O
bfd_get_flavour	O
(	O
abfd	*(struct)
)	O
==	O
bfd_target_elf_flavour	int
)	O
{	O
list	O
=	O
elf_properties	O
(	O
abfd	*(struct)
)	O
;	O
if	O
(	O
list	O
!=	O
NULL	O
&&	O
(	O
elf_machine_code	O
==	O
get_elf_backend_data	O
(	O
abfd	*(struct)
)	O
->	O
elf_machine_code	O
)	O
)	O
listp	O
=	O
&	O
elf_properties	O
(	O
abfd	*(struct)
)	O
;	O
}	O
else	O
list	O
=	O
NULL	O
;	O
if	O
(	O
first_pbfd	O
!=	O
NULL	O
)	O
elf_merge_gnu_property_list	O
(	O
info	*(void)
,	O
first_pbfd	O
,	O
abfd	*(struct)
,	O
listp	O
)	O
;	O
if	O
(	O
list	O
!=	O
NULL	O
)	O
{	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
NOTE_GNU_PROPERTY_SECTION_NAME	O
)	O
;	O
if	O
(	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
!=	O
NULL	O
)	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
output_section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
bfd_abs_section_ptr	O
;	O
}	O
}	O
if	O
(	O
first_pbfd	O
!=	O
NULL	O
)	O
{	O
bfd_size_type	long
size	long
;	O
bfd_byte	char
*	O
contents	*(char)
;	O
unsigned	O
int	O
align_size	O
=	O
elfclass	O
==	O
ELFCLASS64	O
?	O
8	int
:	O
4	int
;	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
first_pbfd	O
,	O
NOTE_GNU_PROPERTY_SECTION_NAME	O
)	O
;	O
BFD_ASSERT	O
(	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
!=	O
NULL	O
)	O
;	O
if	O
(	O
info	*(void)
->	O
stacksize	O
>	O
0	int
)	O
{	O
elf_property	O
*	O
p	*(void)
;	O
bfd_vma	long
stacksize	O
=	O
info	*(void)
->	O
stacksize	O
;	O
p	*(void)
=	O
_bfd_elf_get_property	O
(	O
first_pbfd	O
,	O
GNU_PROPERTY_STACK_SIZE	O
,	O
align_size	O
)	O
;	O
if	O
(	O
p	*(void)
->	O
pr_kind	O
==	O
property_unknown	O
)	O
{	O
p	*(void)
->	O
u	union(long,*(struct))
.	O
number	O
=	O
stacksize	O
;	O
p	*(void)
->	O
pr_kind	O
=	O
property_number	O
;	O
}	O
else	O
if	O
(	O
stacksize	O
>	O
p	*(void)
->	O
u	union(long,*(struct))
.	O
number	O
)	O
p	*(void)
->	O
u	union(long,*(struct))
.	O
number	O
=	O
stacksize	O
;	O
}	O
else	O
if	O
(	O
elf_properties	O
(	O
first_pbfd	O
)	O
==	O
NULL	O
)	O
{	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
output_section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
bfd_abs_section_ptr	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
bed	O
->	O
fixup_gnu_properties	O
)	O
bed	O
->	O
fixup_gnu_properties	O
(	O
info	*(void)
,	O
&	O
elf_properties	O
(	O
first_pbfd	O
)	O
)	O
;	O
if	O
(	O
elf_properties	O
(	O
first_pbfd	O
)	O
==	O
NULL	O
)	O
{	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
output_section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
bfd_abs_section_ptr	O
;	O
return	O
NULL	O
;	O
}	O
list	O
=	O
elf_properties	O
(	O
first_pbfd	O
)	O
;	O
size	long
=	O
elf_get_gnu_property_section_size	O
(	O
list	O
,	O
align_size	O
)	O
;	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
size	long
=	O
size	long
;	O
contents	*(char)
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
first_pbfd	O
,	O
size	long
)	O
;	O
elf_write_gnu_properties	O
(	O
first_pbfd	O
,	O
contents	*(char)
,	O
list	O
,	O
size	long
,	O
align_size	O
)	O
;	O
elf_section_data	O
(	O
sec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
->	O
this_hdr	O
.	O
contents	*(char)
=	O
contents	*(char)
;	O
if	O
(	O
elf_has_no_copy_on_protected	O
(	O
first_pbfd	O
)	O
)	O
info	*(void)
->	O
extern_protected_data	O
=	O
FALSE	O
;	O
}	O
return	O
first_pbfd	O
;	O
}	O
bfd_size_type	long
_bfd_elf_convert_gnu_property_size	O
(	O
bfd	struct
*	O
ibfd	*(struct)
,	O
bfd	struct
*	O
obfd	*(struct)
)	O
{	O
unsigned	O
int	O
align_size	O
;	O
const	O
struct	O
elf_backend_data	O
*	O
bed	O
;	O
elf_property_list	O
*	O
list	O
=	O
elf_properties	O
(	O
ibfd	*(struct)
)	O
;	O
bed	O
=	O
get_elf_backend_data	O
(	O
obfd	*(struct)
)	O
;	O
align_size	O
=	O
bed	O
->	O
s	*(void)
->	O
elfclass	O
==	O
ELFCLASS64	O
?	O
8	int
:	O
4	int
;	O
return	O
elf_get_gnu_property_section_size	O
(	O
list	O
,	O
align_size	O
)	O
;	O
}	O
bfd_boolean	int
_bfd_elf_convert_gnu_properties	O
(	O
bfd	struct
*	O
ibfd	*(struct)
,	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
isec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
,	O
bfd	struct
*	O
obfd	*(struct)
,	O
bfd_byte	char
*	O
*	O
ptr	*(*(char))
,	O
bfd_size_type	long
*	O
ptr_size	*(long)
)	O
{	O
unsigned	O
int	O
size	long
;	O
bfd_byte	char
*	O
contents	*(char)
;	O
unsigned	O
int	O
align_shift	O
;	O
const	O
struct	O
elf_backend_data	O
*	O
bed	O
;	O
elf_property_list	O
*	O
list	O
=	O
elf_properties	O
(	O
ibfd	*(struct)
)	O
;	O
bed	O
=	O
get_elf_backend_data	O
(	O
obfd	*(struct)
)	O
;	O
align_shift	O
=	O
bed	O
->	O
s	*(void)
->	O
elfclass	O
==	O
ELFCLASS64	O
?	O
3	int
:	O
2	int
;	O
size	long
=	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
isec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
output_section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
;	O
bfd_set_section_alignment	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
isec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
->	O
output_section	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
,	O
align_shift	O
)	O
;	O
if	O
(	O
size	long
>	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
isec	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
)	O
)	O
{	O
contents	*(char)
=	O
(	O
bfd_byte	char
*	O
)	O
bfd_malloc	O
(	O
size	long
)	O
;	O
if	O
(	O
contents	*(char)
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
free	(*(void))->(void)
(	O
*	O
ptr	*(*(char))
)	O
;	O
*	O
ptr	*(*(char))
=	O
contents	*(char)
;	O
}	O
else	O
contents	*(char)
=	O
*	O
ptr	*(*(char))
;	O
*	O
ptr_size	*(long)
=	O
size	long
;	O
elf_write_gnu_properties	O
(	O
ibfd	*(struct)
,	O
contents	*(char)
,	O
list	O
,	O
size	long
,	O
1	int
<<	O
align_shift	O
)	O
;	O
return	O
TRUE	int
;	O
}	O
