int	O
mu_imap_fetch	(*(struct),int,*(struct),*(char))->(int)
(	O
mu_imap_t	*(struct)
imap	*(struct)
,	O
int	O
uid	int
,	O
mu_msgset_t	*(struct)
msgset	*(struct)
,	O
const	O
char	O
*	O
items	*(char)
)	O
{	O
char	O
const	O
*	O
argv	*(*(char))
[	O
3	int
]	O
;	O
int	O
i	int
;	O
static	O
struct	O
imap_command	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
;	O
i	int
=	O
0	int
;	O
if	O
(	O
uid	int
)	O
argv	*(*(char))
[	O
i	int
++	O
]	O
=	O
"UID"	*(char)
;	O
argv	*(*(char))
[	O
i	int
++	O
]	O
=	O
"FETCH"	*(char)
;	O
argv	*(*(char))
[	O
i	int
++	O
]	O
=	O
"\\"	*(char)
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
session_state	enum(int,int,int,int)
=	O
MU_IMAP_SESSION_SELECTED	int
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
capa	*(struct)
=	O
NULL	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
rx_state	int
=	O
MU_IMAP_CLIENT_FETCH_RX	int
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
argc	int
=	O
i	int
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
argv	*(*(char))
=	O
argv	*(*(char))
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
extra	*(char)
=	O
items	*(char)
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
msgset	*(struct)
=	O
msgset	*(struct)
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
tagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void))
=	O
NULL	O
;	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
.	O
untagged_handler	*((*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct`),*(struct`),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void))
=	O
NULL	O
;	O
return	O
mu_imap_gencom	(*(struct(int,enum(int,int,int),int,*(char),long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*(int),*(char),*(struct),*(struct),*(char),int,struct(int,int,int,long,long,long,long,long),array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*`)->(void)),*((*`,*`,*`)->(void)),*(void))))->(int)
(	O
imap	*(struct)
,	O
&	O
com	struct(int,*(char),int,int,*(*(char)),*(char),*(struct),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))))->(void)),*((*(struct(int,enum(int,int,int),int,*`,long,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int),long,*`,*`,*`,*`,*`,int,struct`,array(struct(*((*(void),int,long,*(void))->(void)),*(void))))),*(struct),*(void))->(void)),*(void))
)	O
;	O
}	O
static	O
void	O
_free_fetch_response	(*(void))->(void)
(	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
=	O
ptr	*(*(void))
;	O
switch	O
(	O
resp	*(struct)
->	O
type	int
)	O
{	O
case	O
MU_IMAP_FETCH_BODY	int
:	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partv	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
fields	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
text	struct(long)
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
:	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
resp	*(struct)
->	O
bodystructure	struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
.	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_ENVELOPE	int
:	O
mu_message_imapenvelope_free	(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))->(void)
(	O
resp	*(struct)
->	O
envelope	struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
.	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
;	O
break	O
;	O
case	O
MU_IMAP_FETCH_FLAGS	int
:	O
case	O
MU_IMAP_FETCH_INTERNALDATE	int
:	O
case	O
MU_IMAP_FETCH_RFC822_SIZE	int
:	O
case	O
MU_IMAP_FETCH_UID	int
:	O
break	O
;	O
}	O
free	(*(void))->(void)
(	O
resp	*(struct)
)	O
;	O
}	O
static	O
int	O
alloc_response	(*(*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long)))),int)->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
*	O
resp	*(struct)
,	O
int	O
type	int
)	O
{	O
static	O
size_t	long
sizetab	array(long)
[	O
]	O
=	O
{	O
sizeof	O
(	O
struct	O
mu_imap_fetch_body	struct(int,*(long),long,*(char),*(struct),*(char))
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_bodystructure	struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`))))))
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_envelope	struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char))))
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_flags	struct(int,int)
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_internaldate	struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)))
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_rfc822_size	struct(int,long)
)	O
,	O
sizeof	O
(	O
struct	O
mu_imap_fetch_uid	struct(int,long)
)	O
}	O
;	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
p	*(char)
;	O
if	O
(	O
type	int
<	O
0	int
||	O
type	int
>=	O
MU_ARRAY_SIZE	O
(	O
sizetab	array(long)
)	O
)	O
return	O
EINVAL	int
;	O
p	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizetab	array(long)
[	O
type	int
]	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
p	*(char)
->	O
type	int
=	O
type	int
;	O
*	O
resp	*(struct)
=	O
p	*(char)
;	O
return	O
0	int
;	O
}	O
enum	O
parse_response_state	enum(int,int,int,int,int,int,int)
{	O
resp_kw	int
,	O
resp_val	int
,	O
resp_body	int
,	O
resp_body_section	int
,	O
resp_skip	int
,	O
resp_body_hlist	int
,	O
resp_body_end	int
}	O
;	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
;	O
typedef	O
int	O
(	O
*	O
mapper_fn	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct))->(int))
)	O
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
env	*(struct)
)	O
;	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
{	O
mu_list_t	*(struct)
result	*(*(char))
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
enum	O
parse_response_state	enum(int,int,int,int,int,int,int)
state	*(int)
;	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
;	O
mapper_fn	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct))->(int))
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
;	O
const	O
char	O
*	O
section	*(char)
;	O
mu_list_t	*(struct)
hlist	*(struct)
;	O
int	O
status	int
;	O
}	O
;	O
static	O
int	O
_uid_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
uid	int
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
uid	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
MU_ERR_FAILURE	O
;	O
resp	*(struct)
->	O
uid	int
.	O
uid	int
=	O
uid	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_size_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
size	long
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
size	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
&	O
p	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	*(char)
)	O
return	O
MU_ERR_FAILURE	O
;	O
resp	*(struct)
->	O
rfc822_size	struct(int,long)
.	O
size	long
=	O
size	long
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_body_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
const	O
char	O
*	O
section	*(char)
,	O
*	O
p	*(char)
;	O
size_t	long
partc	long
=	O
0	int
;	O
size_t	long
*	O
partv	*(long)
=	O
NULL	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
section	*(char)
=	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
->	O
section	*(char)
;	O
if	O
(	O
section	*(char)
)	O
{	O
p	*(char)
=	O
section	*(char)
;	O
while	O
(	O
mu_isdigit	O
(	O
*	O
p	*(char)
)	O
)	O
{	O
partc	long
++	O
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
p	*(char)
++	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
}	O
else	O
p	*(char)
=	O
NULL	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
resp	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
if	O
(	O
partc	long
)	O
{	O
size_t	long
i	int
;	O
partv	*(long)
=	O
calloc	(long,long)->(*(void))
(	O
partc	long
,	O
sizeof	O
(	O
partv	*(long)
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	*(char)
=	O
section	*(char)
;	O
i	int
<	O
partc	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
q	*(char)
;	O
partv	*(long)
[	O
i	int
]	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
p	*(char)
,	O
&	O
q	*(char)
,	O
10	int
)	O
;	O
p	*(char)
=	O
q	*(char)
+	O
1	int
;	O
}	O
}	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partc	long
=	O
partc	long
;	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partv	*(long)
=	O
partv	*(long)
;	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
fields	*(struct)
=	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
->	O
hlist	*(struct)
;	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
->	O
hlist	*(struct)
=	O
NULL	O
;	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
text	struct(long)
=	O
strdup	(*(char))->(*(char))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
text	struct(long)
)	O
{	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partv	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
resp	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_rfc822_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partc	long
=	O
0	int
;	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partv	*(long)
=	O
NULL	O
;	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
->	O
section	*(char)
)	O
;	O
if	O
(	O
!	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
resp	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
text	struct(long)
=	O
strdup	(*(char))->(*(char))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
text	struct(long)
)	O
{	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
section	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
resp	*(struct)
->	O
body	struct(int,*(long),long,*(char),*(struct),*(char))
.	O
partv	*(long)
)	O
;	O
free	(*(void))->(void)
(	O
resp	*(struct)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_rfc822_header_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
->	O
section	*(char)
=	O
"HEADER"	*(char)
;	O
return	O
_rfc822_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
resp	*(struct)
,	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
;	O
}	O
static	O
int	O
_rfc822_text_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
->	O
section	*(char)
=	O
"TEXT"	*(char)
;	O
return	O
_rfc822_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
resp	*(struct)
,	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
;	O
}	O
static	O
int	O
_flags_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
_mu_imap_collect_flags	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(int))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
resp	*(struct)
->	O
flags	int
.	O
flags	int
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_date_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
mu_timezone	struct(int,*(char))
tz	*(struct(int,*(char)))
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
MU_DATETIME_INTERNALDATE	*(char)
,	O
&	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
mu_datetime_tz_utc	(*(struct(int,*(char))))->(void)
(	O
&	O
tz	*(struct(int,*(char)))
)	O
;	O
resp	*(struct)
->	O
internaldate	struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)))
.	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
=	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
resp	*(struct)
->	O
internaldate	struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)))
.	O
tz	*(struct(int,*(char)))
=	O
tz	*(struct(int,*(char)))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_bodystructure	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
*	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
)	O
;	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
{	O
size_t	long
offset	long
;	O
int	O
(	O
*	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
)	O
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
,	O
void	O
*	O
)	O
;	O
}	O
;	O
static	O
int	O
parse_bs_list	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))),*(struct(long,*((*`,*`)->(int)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
,	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
*	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
)	O
{	O
int	O
rc	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
&&	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
,	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
++	O
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
tok	int
)	O
;	O
rc	int
=	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
(	O
tok	int
,	O
(	O
char	O
*	O
)	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
+	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_map_body_param	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
call_data	*(void)
;	O
struct	O
mu_mime_param	struct(*(char),*(char),*(char))
*	O
param	*(char)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
key	*(*(void))
,	O
*	O
val	int
;	O
int	O
rc	int
;	O
if	O
(	O
itmc	long
!=	O
2	int
)	O
return	O
MU_ERR_PARSE	O
;	O
key	*(*(void))
=	O
itmv	*(*(void))
[	O
0	int
]	O
;	O
val	int
=	O
itmv	*(*(void))
[	O
1	int
]	O
;	O
if	O
(	O
key	*(*(void))
->	O
type	int
!=	O
imap_eltype_string	int
||	O
val	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
rc	int
=	O
mu_rfc2047_decode_param	(*(char),*(char),*(*(struct(*(char),*(char),*(char)))))->(int)
(	O
"UTF-8"	*(char)
,	O
val	int
->	O
v	array(*(char))
.	O
string	*(char)
,	O
&	O
param	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
param	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
param	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
param	*(char)
)	O
return	O
ENOMEM	int
;	O
param	*(char)
->	O
lang	*(char)
=	O
param	*(char)
->	O
cset	*(char)
=	O
NULL	O
;	O
param	*(char)
->	O
value	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
val	int
->	O
v	array(*(char))
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
param	*(char)
->	O
value	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
param	*(char)
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
return	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
key	*(*(void))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
param	*(char)
)	O
;	O
}	O
static	O
int	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
tok	int
)	O
)	O
s	*(char)
=	O
NULL	O
;	O
else	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
if	O
(	O
!	O
(	O
s	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
tok	int
->	O
v	array(*(char))
.	O
string	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
*	O
(	O
char	O
*	O
*	O
)	O
ptr	*(*(void))
=	O
s	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_body_field_size_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
unsigned	O
long	O
n	*(long)
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
tok	int
)	O
)	O
n	*(long)
=	O
0	int
;	O
else	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
{	O
char	O
*	O
s	*(char)
;	O
errno	O
=	O
0	int
;	O
n	*(long)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
tok	int
->	O
v	array(*(char))
.	O
string	*(char)
,	O
&	O
s	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
s	*(char)
||	O
errno	O
)	O
return	O
MU_ERR_PARSE	O
;	O
}	O
*	O
(	O
size_t	long
*	O
)	O
ptr	*(*(void))
=	O
n	*(long)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_body_field_param_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
mu_assoc_t	*(struct)
param	*(char)
;	O
int	O
rc	int
=	O
mu_mime_param_assoc_create	(*(*(struct)))->(int)
(	O
&	O
param	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
*	O
(	O
mu_assoc_t	*(struct)
*	O
)	O
ptr	*(*(void))
=	O
param	*(char)
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
tok	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_PARSE	O
;	O
return	O
mu_list_gmap	(*(struct),*((*(*(void)),long,*(void))->(int)),long,*(void))->(int)
(	O
tok	int
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
_map_body_param	(*(*(void)),long,*(void))->(int)
,	O
2	int
,	O
param	*(char)
)	O
;	O
}	O
static	O
int	O
_body_field_disposition_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
=	O
ptr	*(*(void))
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
tok	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_PARSE	O
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
tok	int
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
)	O
)	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disposition	*(char)
=	O
NULL	O
;	O
else	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
if	O
(	O
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disposition	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
)	O
)	O
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_mime_param_assoc_create	(*(*(struct)))->(int)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disp_param	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
tok	int
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
1	int
)	O
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
)	O
)	O
return	O
0	int
;	O
else	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_PARSE	O
;	O
return	O
mu_list_gmap	(*(struct),*((*(*(void)),long,*(void))->(int)),long,*(void))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
_map_body_param	(*(*(void)),long,*(void))->(int)
,	O
2	int
,	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_disp_param	*(struct)
)	O
;	O
}	O
static	O
int	O
parse_envelope	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
*	O
penv	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
)	O
;	O
static	O
int	O
_body_field_imapenvelope_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
return	O
parse_envelope	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char)))))->(int)
(	O
tok	int
,	O
ptr	*(*(void))
)	O
;	O
}	O
static	O
int	O
_body_field_bodystructure_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
void	O
*	O
ptr	*(*(void))
)	O
{	O
return	O
parse_bodystructure	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
tok	int
,	O
ptr	*(*(void))
)	O
;	O
}	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
base_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_type	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_subtype	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_param	*(struct)
)	O
,	O
_body_field_param_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_id	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_descr	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_encoding	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_size	long
)	O
,	O
_body_field_size_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_md5	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
0	int
,	O
_body_field_disposition_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_language	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_location	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
text_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_type	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_subtype	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_param	*(struct)
)	O
,	O
_body_field_param_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_id	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_descr	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_encoding	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_size	long
)	O
,	O
_body_field_size_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
v	array(*(char))
.	O
text	struct(long)
.	O
body_lines	long
)	O
,	O
_body_field_size_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_md5	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_disposition	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_language	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_location	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
message_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_type	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_subtype	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_param	*(struct)
)	O
,	O
_body_field_param_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_id	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_descr	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_encoding	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_size	long
)	O
,	O
_body_field_size_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
v	array(*(char))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_env	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
,	O
_body_field_imapenvelope_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
v	array(*(char))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_struct	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char)))
)	O
,	O
_body_field_bodystructure_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
v	array(*(char))
.	O
rfc822	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char))),long)
.	O
body_lines	long
)	O
,	O
_body_field_size_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_md5	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_disposition	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_language	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_location	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
multipart_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
[	O
]	O
=	O
{	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_subtype	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_param	*(struct)
)	O
,	O
_body_field_param_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
0	int
,	O
_body_field_disposition_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_language	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
mu_offsetof	O
(	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
,	O
body_location	*(char)
)	O
,	O
_body_field_text_mapper	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(void))->(int)
}	O
,	O
{	O
0	int
,	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_parse_bodystructure_simple	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
{	O
size_t	long
n	*(long)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
,	O
*	O
subtype	*(struct(enum(int,int),union(*(struct),*(char))))
;	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
*	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
&	O
n	*(long)
)	O
;	O
if	O
(	O
n	*(long)
<	O
7	int
)	O
return	O
MU_ERR_PARSE	O
;	O
tok	int
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
BSTOK_BODY_TYPE	int
)	O
;	O
if	O
(	O
!	O
tok	int
||	O
tok	int
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
subtype	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
BSTOK_BODY_SUBTYPE	int
)	O
;	O
if	O
(	O
!	O
subtype	*(struct(enum(int,int),union(*(struct),*(char))))
||	O
subtype	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_ERR_PARSE	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
tok	int
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"TEXT"	*(char)
)	O
==	O
0	int
)	O
{	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_text	int
;	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
=	O
text_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
;	O
}	O
else	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
tok	int
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"MESSAGE"	*(char)
)	O
==	O
0	int
&&	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
subtype	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"RFC822"	*(char)
)	O
==	O
0	int
)	O
{	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_rfc822	int
;	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
=	O
message_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
;	O
}	O
else	O
{	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_other	int
;	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
=	O
base_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
;	O
}	O
return	O
parse_bs_list	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))),*(struct(long,*((*`,*`)->(int)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
,	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
)	O
;	O
}	O
static	O
int	O
_parse_bodystructure_mixed	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
struct	O
body_field_map	struct(long,*((*(struct(enum(int,int),union(*`,*`))),*(void))->(int)))
*	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
=	O
multipart_field_map	array(struct(long,*((*(struct(enum(int,int),union`)),*(void))->(int))))
;	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_message_type	enum(int,int,int,int)
=	O
mu_message_multipart	int
;	O
if	O
(	O
!	O
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
body_type	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"MULTIPART"	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	array(*(char))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	array(*(char))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
,	O
mu_list_free_bodystructure	(*(void))->(void)
)	O
;	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bspart	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
tok	int
)	O
;	O
if	O
(	O
!	O
tok	int
)	O
return	O
MU_ERR_PARSE	O
;	O
if	O
(	O
tok	int
->	O
type	int
!=	O
imap_eltype_list	int
)	O
break	O
;	O
rc	int
=	O
parse_bodystructure	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
tok	int
,	O
&	O
bspart	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
->	O
v	array(*(char))
.	O
multipart	struct(*(struct))
.	O
body_parts	*(struct)
,	O
bspart	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
bspart	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
if	O
(	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
return	O
MU_ERR_PARSE	O
;	O
for	O
(	O
;	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
&&	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
,	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
++	O
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
tok	int
)	O
;	O
rc	int
=	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
(	O
tok	int
,	O
(	O
char	O
*	O
)	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
+	O
map	*(struct(long,*((*(struct`),*(void))->(int))))
->	O
offset	long
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
parse_bodystructure	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
*	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
)	O
{	O
int	O
rc	int
;	O
struct	O
mu_bodystructure	struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`))),long),struct(*(struct))))
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
tok	int
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
)	O
;	O
if	O
(	O
!	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
return	O
ENOMEM	int
;	O
tok	int
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
tok	int
->	O
type	int
==	O
imap_eltype_string	int
)	O
rc	int
=	O
_parse_bodystructure_simple	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
else	O
rc	int
=	O
_parse_bodystructure_mixed	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_bodystructure_free	(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))->(void)
(	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
else	O
*	O
pbs	*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
=	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_bodystructure_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
return	O
parse_bodystructure	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(enum(int,int,int,int),*(char),*(char),*(struct`),*(char),*(char),*(char),long,*(char),*(char),*(struct`),*(char),*(char),union(struct`,struct`,struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
resp	*(struct)
->	O
bodystructure	struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`)))))
.	O
bs	*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*(struct`),*(struct`),long),struct(*(struct`)))))
)	O
;	O
}	O
struct	O
fill_env	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char))),long)
{	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
;	O
size_t	long
n	*(long)
;	O
}	O
;	O
enum	O
env_index	enum(int,int,int,int,int,int,int,int,int,int)
{	O
env_date	int
,	O
env_subject	int
,	O
env_from	int
,	O
env_sender	int
,	O
env_reply_to	int
,	O
env_to	int
,	O
env_cc	int
,	O
env_bcc	int
,	O
env_in_reply_to	int
,	O
env_message_id	int
}	O
;	O
static	O
int	O
elt_to_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(char)))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
char	O
*	O
*	O
pstr	*(*(char))
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
)	O
)	O
p	*(char)
=	O
NULL	O
;	O
else	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
EINVAL	int
;	O
else	O
{	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
ENOMEM	int
;	O
}	O
*	O
pstr	*(*(char))
=	O
p	*(char)
;	O
return	O
0	int
;	O
}	O
struct	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
{	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
size_t	long
n	*(long)
;	O
}	O
;	O
static	O
int	O
_fill_subaddr	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
*	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
=	O
data	*(void)
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
item	*(void)
,	O
*	O
arg	*(char)
;	O
const	O
char	O
*	O
domain	*(char)
=	O
NULL	O
,	O
*	O
local	*(char)
=	O
NULL	O
,	O
*	O
personal	*(char)
=	O
NULL	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
0	int
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
arg	*(char)
&&	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
personal	*(char)
=	O
arg	*(char)
->	O
v	array(*(char))
.	O
string	*(char)
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
2	int
)	O
;	O
if	O
(	O
arg	*(char)
&&	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
local	*(char)
=	O
arg	*(char)
->	O
v	array(*(char))
.	O
string	*(char)
;	O
arg	*(char)
=	O
_mu_imap_list_at	(*(struct),int)->(*(struct(enum(int,int),union(*(struct`),*(char)))))
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
3	int
)	O
;	O
if	O
(	O
arg	*(char)
&&	O
arg	*(char)
->	O
type	int
==	O
imap_eltype_string	int
)	O
domain	*(char)
=	O
arg	*(char)
->	O
v	array(*(char))
.	O
string	*(char)
;	O
if	O
(	O
domain	*(char)
&&	O
local	*(char)
)	O
{	O
if	O
(	O
!	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
int	O
rc	int
=	O
mu_address_create_null	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
&	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
mu_address_set_local_part	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(char))->(int)
(	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
n	*(long)
,	O
local	*(char)
)	O
;	O
mu_address_set_domain	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(char))->(int)
(	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
n	*(long)
,	O
domain	*(char)
)	O
;	O
mu_address_set_personal	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(char))->(int)
(	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
n	*(long)
,	O
personal	*(char)
)	O
;	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
->	O
n	*(long)
++	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
mu_address_t	*(struct)
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
if	O
(	O
_mu_imap_list_element_is_nil	(*(struct(enum(int,int),union(*(struct`),*(char)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
)	O
)	O
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
else	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
EINVAL	int
;	O
else	O
{	O
struct	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
;	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
.	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
.	O
n	*(long)
=	O
1	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
_fill_subaddr	(*(void),*(void))->(int)
,	O
&	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
)	O
;	O
*	O
paddr	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
addr_env	struct(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),long)
.	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_fill_response	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
item	*(void)
;	O
struct	O
fill_env	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char))),long)
*	O
env	*(struct)
=	O
data	*(void)
;	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
=	O
env	*(struct)
->	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
;	O
switch	O
(	O
env	*(struct)
->	O
n	*(long)
++	O
)	O
{	O
case	O
env_date	int
:	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
else	O
{	O
if	O
(	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
MU_DATETIME_SCAN_RFC822	*(char)
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
date	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
)	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
else	O
rc	int
=	O
0	int
;	O
}	O
break	O
;	O
case	O
env_subject	int
:	O
rc	int
=	O
elt_to_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(char)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
subject	*(char)
)	O
;	O
break	O
;	O
case	O
env_from	int
:	O
rc	int
=	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
;	O
break	O
;	O
case	O
env_sender	int
:	O
rc	int
=	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
env_reply_to	int
:	O
rc	int
=	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
reply_to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
env_to	int
:	O
rc	int
=	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
env_cc	int
:	O
rc	int
=	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
cc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
env_bcc	int
:	O
rc	int
=	O
elt_to_address	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
bcc	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
env_in_reply_to	int
:	O
rc	int
=	O
elt_to_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(char)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
in_reply_to	*(char)
)	O
;	O
break	O
;	O
case	O
env_message_id	int
:	O
rc	int
=	O
elt_to_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(char)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
->	O
message_id	*(char)
)	O
;	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
static	O
int	O
parse_envelope	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char)))))->(int)
(	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
mu_imapenvelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))),*(char),*(char))
*	O
*	O
penv	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
)	O
{	O
struct	O
fill_env	struct(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char))),long)
env	*(struct)
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
return	O
MU_ERR_FAILURE	O
;	O
env	*(struct)
.	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
env	*(struct)
.	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
)	O
;	O
if	O
(	O
!	O
env	*(struct)
.	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
return	O
ENOMEM	int
;	O
env	*(struct)
.	O
n	*(long)
=	O
0	int
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
_fill_response	(*(void),*(void))->(int)
,	O
&	O
env	*(struct)
)	O
;	O
*	O
penv	*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
=	O
env	*(struct)
.	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_envelope_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
(	O
union	O
mu_imap_fetch_response	union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*(char),*(char),*(struct),*(char),*(char),*(char),long,*(char),*(char),*(struct),*(char),*(char),union(struct(long),struct(*`,*`,long),struct(*`))))),struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char)))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))
*	O
resp	*(struct)
,	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
parse_env	*(struct(*(struct),*(struct(enum(int,int),union(*`,*`))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*((*(union`),*(struct`),*(struct`))->(int)),*(char),*(struct),int))
)	O
{	O
return	O
parse_envelope	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(*(struct(struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`),*(char),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),*(char)))))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
&	O
resp	*(struct)
->	O
envelope	struct(int,*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char))))
.	O
imapenvelope	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))),*(char),*(char)))
)	O
;	O
}	O
struct	O
mapper_tab	struct(*(char),long,int,*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)))
{	O
char	O
*	O
name	*(char)
;	O
size_t	long
size	long
;	O
int	O
type	int
;	O
mapper_fn	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct))->(int))
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
;	O
}	O
;	O
static	O
struct	O
mapper_tab	struct(*(char),long,int,*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)))
mapper_tab	struct(*(char),long,int,*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)))
[	O
]	O
=	O
{	O
{	O
S	O
(	O
"BODYSTRUCTURE"	*(char)
)	O
,	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
,	O
_bodystructure_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"BODY"	*(char)
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_body_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"ENVELOPE"	*(char)
)	O
,	O
MU_IMAP_FETCH_ENVELOPE	int
,	O
_envelope_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"FLAGS"	*(char)
)	O
,	O
MU_IMAP_FETCH_FLAGS	int
,	O
_flags_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"INTERNALDATE"	*(char)
)	O
,	O
MU_IMAP_FETCH_INTERNALDATE	int
,	O
_date_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"RFC822"	*(char)
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_body_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"RFC822.HEADER"	*(char)
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_rfc822_header_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"RFC822.SIZE"	*(char)
)	O
,	O
MU_IMAP_FETCH_RFC822_SIZE	int
,	O
_size_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"RFC822.TEXT"	*(char)
)	O
,	O
MU_IMAP_FETCH_BODY	int
,	O
_rfc822_text_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
S	O
(	O
"UID"	*(char)
)	O
,	O
MU_IMAP_FETCH_UID	int
,	O
_uid_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
_extract_string	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
itmv	*(*(void))
[	O
0	int
]	O
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
return	O
MU_LIST_MAP_SKIP	int
;	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_fetch_fold	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
imap_list_element	struct(enum(int,int),union(*(struct),*(char)))
*	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
=	O
item	*(void)
;	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
*	O
env	*(struct)
=	O
data	*(void)
;	O
switch	O
(	O
env	*(struct)
->	O
state	*(int)
)	O
{	O
case	O
resp_kw	int
:	O
{	O
char	O
*	O
kw	*(char)
;	O
size_t	long
kwlen	long
;	O
struct	O
mapper_tab	struct(*(char),long,int,*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)))
*	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
;	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
{	O
env	*(struct)
->	O
status	int
=	O
MU_ERR_FAILURE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
kw	*(char)
=	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
;	O
kwlen	long
=	O
strlen	(*(char))->(long)
(	O
kw	*(char)
)	O
;	O
for	O
(	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
=	O
mapper_tab	struct(*(char),long,int,*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)))
;	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
name	*(char)
;	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
++	O
)	O
{	O
if	O
(	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
size	long
==	O
kwlen	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
name	*(char)
,	O
kw	*(char)
,	O
kwlen	long
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
name	*(char)
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_TRACE9	int
,	O
(	O
"ignoring unknown FETCH item '%s'"	*(char)
,	O
kw	*(char)
)	O
)	O
;	O
env	*(struct)
->	O
state	*(int)
=	O
resp_skip	int
;	O
return	O
0	int
;	O
}	O
env	*(struct)
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
=	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
;	O
rc	int
=	O
alloc_response	(*(*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long)))),int)->(int)
(	O
&	O
env	*(struct)
->	O
resp	*(struct)
,	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
type	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
env	*(struct)
->	O
status	int
=	O
rc	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
env	*(struct)
->	O
state	*(int)
=	O
mt	*(struct(*(char),long,int,*((*(union`),*(struct`),*(struct`))->(int))))
->	O
type	int
==	O
MU_IMAP_FETCH_BODY	int
?	O
resp_body	int
:	O
resp_val	int
;	O
break	O
;	O
}	O
case	O
resp_body	int
:	O
if	O
(	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
"["	*(char)
)	O
)	O
{	O
env	*(struct)
->	O
state	*(int)
=	O
resp_body_section	int
;	O
break	O
;	O
}	O
else	O
{	O
env	*(struct)
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
=	O
_bodystructure_mapper	(*(union(int,struct(int,*(long),long,*(char),*(struct`),*(char)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*`),struct(int,*`)),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*(struct`),*(char)))),*(struct(*(struct),*(struct(enum(int,int),union`)),enum(int,int,int,int,int,int,int),*(union(int,struct`,struct`,struct`,struct`,struct`,struct`,struct`)),*((*`,*`,*`)->(int)),*(char),*(struct),int)))->(int)
;	O
_free_fetch_response	(*(void))->(void)
(	O
env	*(struct)
->	O
resp	*(struct)
)	O
;	O
rc	int
=	O
alloc_response	(*(*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long)))),int)->(int)
(	O
&	O
env	*(struct)
->	O
resp	*(struct)
,	O
MU_IMAP_FETCH_BODYSTRUCTURE	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
env	*(struct)
->	O
status	int
=	O
rc	int
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
env	*(struct)
->	O
state	*(int)
=	O
resp_val	int
;	O
}	O
case	O
resp_val	int
:	O
if	O
(	O
env	*(struct)
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
)	O
{	O
int	O
rc	int
=	O
env	*(struct)
->	O
mapper	*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int))
(	O
env	*(struct)
->	O
resp	*(struct)
,	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
env	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
_free_fetch_response	(*(void))->(void)
(	O
env	*(struct)
->	O
resp	*(struct)
)	O
;	O
else	O
mu_list_append	(*(struct),*(void))->(int)
(	O
env	*(struct)
->	O
result	*(*(char))
,	O
env	*(struct)
->	O
resp	*(struct)
)	O
;	O
}	O
env	*(struct)
->	O
resp	*(struct)
=	O
NULL	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
env	*(struct)
->	O
hlist	*(struct)
)	O
;	O
env	*(struct)
->	O
state	*(int)
=	O
resp_kw	int
;	O
break	O
;	O
case	O
resp_body_section	int
:	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_string	int
)	O
{	O
env	*(struct)
->	O
status	int
=	O
MU_ERR_PARSE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"HEADER.FIELDS"	*(char)
,	O
13	int
)	O
==	O
0	int
)	O
env	*(struct)
->	O
state	*(int)
=	O
resp_body_hlist	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
,	O
"]"	*(char)
)	O
==	O
0	int
)	O
{	O
env	*(struct)
->	O
section	*(char)
=	O
NULL	O
;	O
env	*(struct)
->	O
state	*(int)
=	O
resp_val	int
;	O
break	O
;	O
}	O
else	O
env	*(struct)
->	O
state	*(int)
=	O
resp_body_end	int
;	O
env	*(struct)
->	O
section	*(char)
=	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
string	*(char)
;	O
break	O
;	O
case	O
resp_skip	int
:	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
env	*(struct)
->	O
hlist	*(struct)
)	O
;	O
env	*(struct)
->	O
state	*(int)
=	O
resp_kw	int
;	O
break	O
;	O
case	O
resp_body_hlist	int
:	O
if	O
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
type	int
!=	O
imap_eltype_list	int
)	O
{	O
env	*(struct)
->	O
status	int
=	O
MU_ERR_PARSE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
->	O
v	array(*(char))
.	O
list	*(struct)
,	O
_extract_string	(*(*(void)),long,*(void))->(int)
,	O
NULL	O
,	O
1	int
,	O
&	O
env	*(struct)
->	O
hlist	*(struct)
)	O
;	O
env	*(struct)
->	O
state	*(int)
=	O
resp_body_end	int
;	O
break	O
;	O
case	O
resp_body_end	int
:	O
if	O
(	O
_mu_imap_list_element_is_string	(*(struct(enum(int,int),union(*(struct`),*(char)))),*(char))->(int)
(	O
elt	*(struct(enum(int,int),union(*(struct),*(char))))
,	O
"]"	*(char)
)	O
)	O
env	*(struct)
->	O
state	*(int)
=	O
resp_val	int
;	O
else	O
{	O
env	*(struct)
->	O
status	int
=	O
MU_ERR_PARSE	O
;	O
return	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_imap_parse_fetch_response	(*(struct),*(*(struct)))->(int)
(	O
mu_list_t	*(struct)
input	*(char)
,	O
mu_list_t	*(struct)
*	O
result_list	*(*(struct))
)	O
{	O
mu_list_t	*(struct)
result	*(*(char))
;	O
int	O
status	int
;	O
struct	O
parse_response_env	struct(*(struct),*(struct(enum(int,int),union(*(struct),*(char)))),enum(int,int,int,int,int,int,int),*(union(int,struct(int,*(long),long,*(char),*(struct),*(char)),struct(int,*(struct(enum(int,int,int,int),*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,*`,union`))),struct(int,*(struct(struct`,struct`,*`,*`,*`,*`,*`,*`,*`,*`,*`))),struct(int,int),struct(int,struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char))),struct(int,long),struct(int,long))),*((*(union(int,struct(int,*`,long,*`,*`,*`),struct(int,*`),struct(int,*`),struct(int,int),struct(int,struct`,struct`),struct(int,long),struct(int,long))),*(struct(enum(int,int),union(*`,*`))),*(struct(*(struct`),*(struct`),enum(int,int,int,int,int,int,int),*(union`),*((*`,*`,*`)->(int)),*(char),*(struct`),int)))->(int)),*(char),*(struct),int)
env	*(struct)
;	O
status	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
result	*(*(char))
)	O
;	O
if	O
(	O
status	int
)	O
{	O
mu_debug	O
(	O
MU_DEBCAT_MAILBOX	int
,	O
MU_DEBUG_ERROR	int
,	O
(	O
"mu_list_create: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
)	O
;	O
return	O
1	int
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
result	*(*(char))
,	O
_free_fetch_response	(*(void))->(void)
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
env	*(struct)
,	O
0	int
,	O
sizeof	O
(	O
env	*(struct)
)	O
)	O
;	O
env	*(struct)
.	O
result	*(*(char))
=	O
result	*(*(char))
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
input	*(char)
,	O
_fetch_fold	(*(void),*(void))->(int)
,	O
&	O
env	*(struct)
)	O
;	O
if	O
(	O
env	*(struct)
.	O
status	int
)	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
result	*(*(char))
)	O
;	O
else	O
*	O
result_list	*(*(struct))
=	O
result	*(*(char))
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
env	*(struct)
.	O
hlist	*(struct)
)	O
;	O
return	O
env	*(struct)
.	O
status	int
;	O
}	O
