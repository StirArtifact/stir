extern	O
World	struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int)
*	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
;	O
void	O
init_course	()->(void)
(	O
)	O
{	O
int	O
i	int
;	O
int	O
j	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NB_ADV	int
;	O
i	int
++	O
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
num_car	int
=	O
i	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
type	int
=	O
0	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
autopilot	int
=	O
1	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
ypos	int
=	O
STARTLINE	int
*	O
i	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
xpos	int
=	O
(	O
(	O
(	O
i	int
%	O
2	int
)	O
==	O
1	int
)	O
?	O
(	O
RANK1	O
)	O
:	O
(	O
RANK2	int
)	O
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
turn	int
=	O
0	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
position	int
=	O
NB_ADV	int
-	O
i	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
xvit	int
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
yvit	int
=	O
0	int
;	O
}	O
j	int
=	O
0	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
j	int
]	O
.	O
ypos	int
=	O
0	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
j	int
]	O
.	O
xpos	int
=	O
0	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
ypos	int
=	O
STARTLINE	int
*	O
j	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
xpos	int
=	O
(	O
(	O
(	O
j	int
%	O
2	int
)	O
==	O
1	int
)	O
?	O
(	O
RANK1	O
)	O
:	O
(	O
RANK2	int
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
multi	int
+	O
1	int
;	O
i	int
++	O
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
autopilot	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
LENGTH	int
-	O
1	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
64	int
;	O
j	int
++	O
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
trace	array(int)
[	O
64	int
*	O
i	int
+	O
j	int
]	O
=	O
(	O
(	O
_trace	array(int)
[	O
i	int
+	O
1	int
]	O
*	O
j	int
)	O
+	O
(	O
_trace	array(int)
[	O
i	int
]	O
*	O
(	O
64	int
-	O
j	int
)	O
)	O
)	O
/	O
64	int
;	O
}	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
64	int
;	O
j	int
++	O
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
trace	array(int)
[	O
64	int
*	O
LENGTH	int
+	O
j	int
-	O
64	int
]	O
=	O
(	O
(	O
_trace	array(int)
[	O
0	int
]	O
*	O
j	int
)	O
+	O
(	O
_trace	array(int)
[	O
LENGTH	int
-	O
1	int
]	O
*	O
(	O
64	int
-	O
j	int
)	O
)	O
)	O
/	O
64	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
LENGTH	int
-	O
1	int
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
64	int
;	O
j	int
++	O
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
curve	array(int)
[	O
64	int
*	O
i	int
+	O
j	int
]	O
=	O
(	O
(	O
_trace2	array(int)
[	O
i	int
+	O
1	int
]	O
*	O
j	int
)	O
+	O
(	O
_trace2	array(int)
[	O
i	int
]	O
*	O
(	O
64	int
-	O
j	int
)	O
)	O
)	O
/	O
64	int
;	O
}	O
}	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
64	int
;	O
j	int
++	O
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
curve	array(int)
[	O
64	int
*	O
LENGTH	int
+	O
j	int
-	O
64	int
]	O
=	O
(	O
(	O
_trace2	array(int)
[	O
0	int
]	O
*	O
j	int
)	O
+	O
(	O
_trace2	array(int)
[	O
LENGTH	int
-	O
1	int
]	O
*	O
(	O
64	int
-	O
j	int
)	O
)	O
)	O
/	O
64	int
;	O
}	O
}	O
