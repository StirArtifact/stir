static	O
mach_port_t	O
*	O
std_port_array	*(int)
;	O
static	O
int	O
*	O
std_int_array	*(int)
;	O
static	O
int	O
n_std_ports	int
,	O
n_std_ints	int
;	O
static	O
struct	O
utsname	O
uname_info	struct
;	O
struct	O
server_version	struct(*(char),*(char))
{	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
version	*(char)
;	O
}	O
*	O
server_versions	*(struct(*(char),*(char)))
;	O
int	O
nserver_versions	int
,	O
server_versions_nalloc	int
;	O
struct	O
execdata_notify	struct(int,*(struct(int,*(struct(int,*(struct`))))))
{	O
mach_port_t	O
notify_port	int
;	O
struct	O
execdata_notify	struct(int,*(struct(int,*(struct(int,*(struct`))))))
*	O
next	*(struct(int,*(struct(int,*(struct`)))))
;	O
}	O
*	O
execdata_notifys	*(struct(int,*(struct(int,*(struct`)))))
;	O
kern_return_t	O
S_proc_getprivports	(*(struct),*(int),*(int))->(int)
(	O
struct	O
proc	O
*	O
p	*(struct)
,	O
mach_port_t	O
*	O
hostpriv	*(int)
,	O
mach_port_t	O
*	O
devpriv	*(int)
)	O
{	O
if	O
(	O
!	O
p	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
!	O
check_uid	()->(int)
(	O
p	*(struct)
,	O
0	int
)	O
)	O
return	O
EPERM	O
;	O
*	O
hostpriv	*(int)
=	O
_hurd_host_priv	O
;	O
*	O
devpriv	*(int)
=	O
_hurd_device_master	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_setexecdata	(*(struct),*(int),int,*(int),int)->(int)
(	O
struct	O
proc	O
*	O
p	*(struct)
,	O
mach_port_t	O
*	O
ports	*(int)
,	O
size_t	O
nports	int
,	O
int	O
*	O
ints	*(int)
,	O
size_t	O
nints	int
)	O
{	O
int	O
i	int
;	O
struct	O
execdata_notify	struct(int,*(struct(int,*(struct(int,*(struct`))))))
*	O
n	*(struct(int,*(struct(int,*(struct`)))))
;	O
mach_port_t	O
*	O
std_port_array_new	O
;	O
int	O
*	O
std_int_array_new	*(int)
;	O
if	O
(	O
!	O
p	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
!	O
check_uid	()->(int)
(	O
p	*(struct)
,	O
0	int
)	O
)	O
return	O
EPERM	O
;	O
std_port_array_new	O
=	O
malloc	O
(	O
sizeof	O
(	O
mach_port_t	O
)	O
*	O
nports	int
)	O
;	O
if	O
(	O
!	O
std_port_array_new	O
)	O
return	O
ENOMEM	O
;	O
std_int_array_new	*(int)
=	O
malloc	O
(	O
sizeof	O
(	O
int	O
)	O
*	O
nints	int
)	O
;	O
if	O
(	O
!	O
std_int_array_new	*(int)
)	O
{	O
free	()->(int)
(	O
std_port_array_new	O
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
if	O
(	O
std_port_array	*(int)
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_std_ports	int
;	O
i	int
++	O
)	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
std_port_array	*(int)
[	O
i	int
]	O
)	O
;	O
free	()->(int)
(	O
std_port_array	*(int)
)	O
;	O
}	O
if	O
(	O
std_int_array	*(int)
)	O
free	()->(int)
(	O
std_int_array	*(int)
)	O
;	O
std_port_array	*(int)
=	O
std_port_array_new	O
;	O
n_std_ports	int
=	O
nports	int
;	O
memcpy	O
(	O
std_port_array	*(int)
,	O
ports	*(int)
,	O
sizeof	O
(	O
mach_port_t	O
)	O
*	O
nports	int
)	O
;	O
std_int_array	*(int)
=	O
std_int_array_new	*(int)
;	O
n_std_ints	int
=	O
nints	int
;	O
memcpy	O
(	O
std_int_array	*(int)
,	O
ints	*(int)
,	O
sizeof	O
(	O
int	O
)	O
*	O
nints	int
)	O
;	O
for	O
(	O
n	*(struct(int,*(struct(int,*(struct`)))))
=	O
execdata_notifys	*(struct(int,*(struct(int,*(struct`)))))
;	O
n	*(struct(int,*(struct(int,*(struct`)))))
;	O
n	*(struct(int,*(struct(int,*(struct`)))))
=	O
n	*(struct(int,*(struct(int,*(struct`)))))
->	O
next	*(struct(int,*(struct(int,*(struct`)))))
)	O
exec_setexecdata	()->(int)
(	O
n	*(struct(int,*(struct(int,*(struct`)))))
->	O
notify_port	int
,	O
std_port_array	*(int)
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
n_std_ports	int
,	O
std_int_array	*(int)
,	O
n_std_ints	int
)	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_getexecdata	(*(struct),*(*(int)),*(int),*(int),*(*(int)),*(int))->(int)
(	O
struct	O
proc	O
*	O
p	*(struct)
,	O
mach_port_t	O
*	O
*	O
ports	*(int)
,	O
mach_msg_type_name_t	O
*	O
portspoly	*(int)
,	O
size_t	O
*	O
nports	int
,	O
int	O
*	O
*	O
ints	*(int)
,	O
size_t	O
*	O
nints	int
)	O
{	O
int	O
i	int
;	O
int	O
ports_allocated	int
=	O
0	int
;	O
if	O
(	O
!	O
std_port_array	*(int)
)	O
return	O
ENOENT	O
;	O
if	O
(	O
*	O
nports	int
<	O
n_std_ports	int
)	O
{	O
*	O
ports	*(int)
=	O
mmap	()->(int)
(	O
0	int
,	O
round_page	()->(int)
(	O
n_std_ports	int
*	O
sizeof	O
(	O
mach_port_t	O
)	O
)	O
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ports	*(int)
==	O
MAP_FAILED	O
)	O
return	O
ENOMEM	O
;	O
ports_allocated	int
=	O
1	int
;	O
}	O
memcpy	O
(	O
*	O
ports	*(int)
,	O
std_port_array	*(int)
,	O
n_std_ports	int
*	O
sizeof	O
(	O
mach_port_t	O
)	O
)	O
;	O
*	O
nports	int
=	O
n_std_ports	int
;	O
if	O
(	O
*	O
nints	int
<	O
n_std_ints	int
)	O
{	O
*	O
ints	*(int)
=	O
mmap	()->(int)
(	O
0	int
,	O
round_page	()->(int)
(	O
n_std_ints	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANON	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
*	O
ints	*(int)
==	O
MAP_FAILED	O
)	O
{	O
if	O
(	O
ports_allocated	int
)	O
munmap	()->(int)
(	O
*	O
ports	*(int)
,	O
round_page	()->(int)
(	O
n_std_ports	int
*	O
sizeof	O
(	O
mach_port_t	O
)	O
)	O
)	O
;	O
return	O
ENOMEM	O
;	O
}	O
}	O
memcpy	O
(	O
*	O
ints	*(int)
,	O
std_int_array	*(int)
,	O
n_std_ints	int
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
*	O
nints	int
=	O
n_std_ints	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n_std_ports	int
;	O
i	int
++	O
)	O
mach_port_mod_refs	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
std_port_array	*(int)
[	O
i	int
]	O
,	O
MACH_PORT_RIGHT_SEND	O
,	O
1	int
)	O
;	O
*	O
portspoly	*(int)
=	O
MACH_MSG_TYPE_MOVE_SEND	O
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_execdata_notify	(*(struct),int)->(int)
(	O
struct	O
proc	O
*	O
p	*(struct)
,	O
mach_port_t	O
notify	int
)	O
{	O
struct	O
execdata_notify	struct(int,*(struct(int,*(struct(int,*(struct`))))))
*	O
n	*(struct(int,*(struct(int,*(struct`)))))
;	O
mach_port_t	O
foo	O
;	O
n	*(struct(int,*(struct(int,*(struct`)))))
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
execdata_notify	struct(int,*(struct(int,*(struct(int,*(struct`))))))
)	O
)	O
;	O
if	O
(	O
!	O
n	*(struct(int,*(struct(int,*(struct`)))))
)	O
return	O
ENOMEM	O
;	O
n	*(struct(int,*(struct(int,*(struct`)))))
->	O
notify_port	int
=	O
notify	int
;	O
n	*(struct(int,*(struct(int,*(struct`)))))
->	O
next	*(struct(int,*(struct(int,*(struct`)))))
=	O
execdata_notifys	*(struct(int,*(struct(int,*(struct`)))))
;	O
execdata_notifys	*(struct(int,*(struct(int,*(struct`)))))
=	O
n	*(struct(int,*(struct(int,*(struct`)))))
;	O
mach_port_request_notification	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
notify	int
,	O
MACH_NOTIFY_DEAD_NAME	O
,	O
1	int
,	O
generic_port	O
,	O
MACH_MSG_TYPE_MAKE_SEND_ONCE	O
,	O
&	O
foo	O
)	O
;	O
if	O
(	O
foo	O
)	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
foo	O
)	O
;	O
if	O
(	O
std_port_array	*(int)
)	O
exec_setexecdata	()->(int)
(	O
n	*(struct(int,*(struct(int,*(struct`)))))
->	O
notify_port	int
,	O
std_port_array	*(int)
,	O
MACH_MSG_TYPE_COPY_SEND	O
,	O
n_std_ports	int
,	O
std_int_array	*(int)
,	O
n_std_ints	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
check_dead_execdata_notify	(int)->(void)
(	O
mach_port_t	O
port	int
)	O
{	O
struct	O
execdata_notify	struct(int,*(struct(int,*(struct(int,*(struct`))))))
*	O
en	*(struct(int,*(struct(int,*(struct`)))))
,	O
*	O
*	O
prevp	*(*(struct(int,*(struct(int,*`)))))
;	O
for	O
(	O
en	*(struct(int,*(struct(int,*(struct`)))))
=	O
execdata_notifys	*(struct(int,*(struct(int,*(struct`)))))
,	O
prevp	*(*(struct(int,*(struct(int,*`)))))
=	O
&	O
execdata_notifys	*(struct(int,*(struct(int,*(struct`)))))
;	O
en	*(struct(int,*(struct(int,*(struct`)))))
;	O
en	*(struct(int,*(struct(int,*(struct`)))))
=	O
*	O
prevp	*(*(struct(int,*(struct(int,*`)))))
)	O
{	O
if	O
(	O
en	*(struct(int,*(struct(int,*(struct`)))))
->	O
notify_port	int
==	O
port	int
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
port	int
)	O
;	O
*	O
prevp	*(*(struct(int,*(struct(int,*`)))))
=	O
en	*(struct(int,*(struct(int,*(struct`)))))
->	O
next	*(struct(int,*(struct(int,*(struct`)))))
;	O
free	()->(int)
(	O
en	*(struct(int,*(struct(int,*(struct`)))))
)	O
;	O
}	O
else	O
prevp	*(*(struct(int,*(struct(int,*`)))))
=	O
&	O
en	*(struct(int,*(struct(int,*(struct`)))))
->	O
next	*(struct(int,*(struct(int,*(struct`)))))
;	O
}	O
}	O
char	O
*	O
kernel_name	*(char)
,	O
*	O
kernel_version	*(char)
;	O
static	O
void	O
rebuild_uname	()->(void)
(	O
void	O
)	O
{	O
unsigned	O
int	O
i	int
,	O
j	int
;	O
char	O
*	O
p	*(struct)
,	O
*	O
end	*(char)
;	O
inline	O
void	O
initstr	()->(int)
(	O
char	O
*	O
string	*(char)
)	O
{	O
p	*(struct)
=	O
string	*(char)
;	O
end	*(char)
=	O
p	*(struct)
+	O
_UTSNAME_LENGTH	O
;	O
}	O
inline	O
void	O
addstr	()->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
version	*(char)
)	O
{	O
size_t	O
len	O
;	O
if	O
(	O
name	*(char)
)	O
{	O
len	O
=	O
strlen	O
(	O
name	*(char)
)	O
;	O
if	O
(	O
p	*(struct)
+	O
len	O
+	O
1	int
<	O
end	*(char)
)	O
memcpy	O
(	O
p	*(struct)
,	O
name	*(char)
,	O
len	O
)	O
;	O
p	*(struct)
+=	O
len	O
;	O
if	O
(	O
p	*(struct)
<	O
end	*(char)
)	O
*	O
p	*(struct)
++	O
=	O
'-'	O
;	O
}	O
len	O
=	O
strlen	O
(	O
version	*(char)
)	O
;	O
if	O
(	O
p	*(struct)
+	O
len	O
+	O
1	int
<	O
end	*(char)
)	O
memcpy	O
(	O
p	*(struct)
,	O
version	*(char)
,	O
len	O
)	O
;	O
p	*(struct)
+=	O
len	O
;	O
if	O
(	O
p	*(struct)
<	O
end	*(char)
)	O
*	O
p	*(struct)
++	O
=	O
'/'	O
;	O
}	O
struct	O
version	*(char)
{	O
const	O
char	O
*	O
version	*(char)
;	O
unsigned	O
int	O
count	int
;	O
}	O
versions	O
[	O
nserver_versions	int
]	O
;	O
int	O
compare_versions	O
(	O
const	O
void	O
*	O
a	*(void)
,	O
const	O
void	O
*	O
b	*(void)
)	O
{	O
return	O
(	O
(	O
(	O
const	O
struct	O
version	*(char)
*	O
)	O
b	*(void)
)	O
->	O
count	int
-	O
(	O
(	O
const	O
struct	O
version	*(char)
*	O
)	O
a	*(void)
)	O
->	O
count	int
)	O
;	O
}	O
unsigned	O
int	O
nversions	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nserver_versions	int
;	O
++	O
i	int
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
nversions	int
;	O
++	O
j	int
)	O
if	O
(	O
!	O
strcmp	O
(	O
versions	O
[	O
j	int
]	O
.	O
version	*(char)
,	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
)	O
)	O
{	O
++	O
versions	O
[	O
j	int
]	O
.	O
count	int
;	O
break	O
;	O
}	O
if	O
(	O
j	int
==	O
nversions	int
)	O
{	O
versions	O
[	O
nversions	int
]	O
.	O
version	*(char)
=	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
;	O
versions	O
[	O
nversions	int
]	O
.	O
count	int
=	O
1	int
;	O
++	O
nversions	int
;	O
}	O
}	O
qsort	()->(int)
(	O
versions	O
,	O
nversions	int
,	O
sizeof	O
(	O
struct	O
version	*(char)
)	O
,	O
compare_versions	O
)	O
;	O
strcpy	O
(	O
uname_info	struct
.	O
release	*(char)
,	O
versions	O
[	O
0	int
]	O
.	O
version	*(char)
)	O
;	O
initstr	()->(int)
(	O
uname_info	struct
.	O
version	*(char)
)	O
;	O
addstr	()->(int)
(	O
kernel_name	*(char)
,	O
kernel_version	*(char)
)	O
;	O
if	O
(	O
versions	O
[	O
0	int
]	O
.	O
count	int
>	O
1	int
)	O
addstr	()->(int)
(	O
"Hurd"	*(char)
,	O
versions	O
[	O
0	int
]	O
.	O
version	*(char)
)	O
;	O
if	O
(	O
versions	O
[	O
0	int
]	O
.	O
count	int
!=	O
nserver_versions	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nserver_versions	int
;	O
i	int
++	O
)	O
if	O
(	O
versions	O
[	O
0	int
]	O
.	O
count	int
==	O
1	int
||	O
strcmp	O
(	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
,	O
versions	O
[	O
0	int
]	O
.	O
version	*(char)
)	O
)	O
addstr	()->(int)
(	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
,	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
)	O
;	O
if	O
(	O
p	*(struct)
>	O
end	*(char)
)	O
;	O
else	O
p	*(struct)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
end	*(char)
[	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
initialize_version_info	()->(void)
(	O
void	O
)	O
{	O
extern	O
const	O
char	O
*	O
const	O
mach_cpu_types	array(*(char))
[	O
]	O
;	O
extern	O
const	O
char	O
*	O
const	O
mach_cpu_subtypes	array(array(*(char)))
[	O
]	O
[	O
32	int
]	O
;	O
kernel_version_t	O
kv	O
;	O
char	O
*	O
p	*(struct)
;	O
struct	O
host_basic_info	O
info	struct
;	O
size_t	O
n	*(struct(int,*(struct(int,*(struct`)))))
=	O
sizeof	O
info	struct
;	O
error_t	O
err	O
;	O
strcpy	O
(	O
uname_info	struct
.	O
sysname	O
,	O
"GNU"	*(char)
)	O
;	O
err	O
=	O
host_info	()->(int)
(	O
mach_host_self	()->(int)
(	O
)	O
,	O
HOST_BASIC_INFO	O
,	O
(	O
host_info_t	O
)	O
&	O
info	struct
,	O
&	O
n	*(struct(int,*(struct(int,*(struct`)))))
)	O
;	O
assert	()->(int)
(	O
!	O
err	O
)	O
;	O
snprintf	O
(	O
uname_info	struct
.	O
machine	O
,	O
sizeof	O
uname_info	struct
.	O
machine	O
,	O
"%s-%s"	*(char)
,	O
mach_cpu_types	array(*(char))
[	O
info	struct
.	O
cpu_type	O
]	O
,	O
mach_cpu_subtypes	array(array(*(char)))
[	O
info	struct
.	O
cpu_type	O
]	O
[	O
info	struct
.	O
cpu_subtype	O
]	O
)	O
;	O
server_versions	*(struct(*(char),*(char)))
=	O
malloc	O
(	O
sizeof	O
(	O
struct	O
server_version	struct(*(char),*(char))
)	O
*	O
10	int
)	O
;	O
assert	()->(int)
(	O
server_versions	*(struct(*(char),*(char)))
)	O
;	O
server_versions_nalloc	int
=	O
10	int
;	O
err	O
=	O
host_kernel_version	()->(int)
(	O
mach_host_self	()->(int)
(	O
)	O
,	O
kv	O
)	O
;	O
assert	()->(int)
(	O
!	O
err	O
)	O
;	O
kv	O
[	O
sizeof	O
(	O
kv	O
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
p	*(struct)
=	O
index	O
(	O
kv	O
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(struct)
)	O
*	O
p	*(struct)
=	O
'\0'	O
;	O
p	*(struct)
=	O
index	O
(	O
kv	O
,	O
' '	O
)	O
;	O
if	O
(	O
p	*(struct)
)	O
*	O
p	*(struct)
=	O
'\0'	O
;	O
kernel_name	*(char)
=	O
strdup	O
(	O
p	*(struct)
?	O
kv	O
:	O
"mach"	*(char)
)	O
;	O
assert	()->(int)
(	O
kernel_name	*(char)
)	O
;	O
kernel_version	*(char)
=	O
strdup	O
(	O
p	*(struct)
?	O
p	*(struct)
+	O
1	int
:	O
kv	O
)	O
;	O
assert	()->(int)
(	O
kernel_version	*(char)
)	O
;	O
server_versions	*(struct(*(char),*(char)))
[	O
0	int
]	O
.	O
name	*(char)
=	O
strdup	O
(	O
"proc"	*(char)
)	O
;	O
assert	()->(int)
(	O
server_versions	*(struct(*(char),*(char)))
[	O
0	int
]	O
.	O
name	*(char)
)	O
;	O
server_versions	*(struct(*(char),*(char)))
[	O
0	int
]	O
.	O
version	*(char)
=	O
strdup	O
(	O
HURD_VERSION	O
)	O
;	O
assert	()->(int)
(	O
server_versions	*(struct(*(char),*(char)))
[	O
0	int
]	O
.	O
version	*(char)
)	O
;	O
nserver_versions	int
=	O
1	int
;	O
rebuild_uname	()->(void)
(	O
)	O
;	O
uname_info	struct
.	O
nodename	O
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
kern_return_t	O
S_proc_uname	(int,*(struct))->(int)
(	O
pstruct_t	O
process	int
,	O
struct	O
utsname	O
*	O
uname	*(struct)
)	O
{	O
*	O
uname	*(struct)
=	O
uname_info	struct
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
S_proc_register_version	(int,int,*(char),*(char),*(char))->(int)
(	O
pstruct_t	O
server	int
,	O
mach_port_t	O
credential	int
,	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
release	*(char)
,	O
char	O
*	O
version	*(char)
)	O
{	O
error_t	O
err	O
=	O
0	int
;	O
int	O
i	int
;	O
if	O
(	O
credential	int
!=	O
_hurd_host_priv	O
)	O
return	O
EPERM	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
nserver_versions	int
;	O
i	int
++	O
)	O
if	O
(	O
!	O
strcmp	O
(	O
name	*(char)
,	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
name	*(char)
)	O
)	O
{	O
free	()->(int)
(	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
)	O
;	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
=	O
malloc	O
(	O
strlen	O
(	O
version	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
)	O
{	O
err	O
=	O
ENOMEM	O
;	O
goto	O
out	O
;	O
}	O
strcpy	O
(	O
server_versions	*(struct(*(char),*(char)))
[	O
i	int
]	O
.	O
version	*(char)
,	O
version	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
i	int
==	O
nserver_versions	int
)	O
{	O
if	O
(	O
nserver_versions	int
==	O
server_versions_nalloc	int
)	O
{	O
void	O
*	O
new	*(void)
=	O
realloc	O
(	O
server_versions	*(struct(*(char),*(char)))
,	O
sizeof	O
(	O
struct	O
server_version	struct(*(char),*(char))
)	O
*	O
server_versions_nalloc	int
*	O
2	int
)	O
;	O
if	O
(	O
!	O
new	*(void)
)	O
{	O
err	O
=	O
ENOMEM	O
;	O
goto	O
out	O
;	O
}	O
server_versions_nalloc	int
*=	O
2	int
;	O
server_versions	*(struct(*(char),*(char)))
=	O
new	*(void)
;	O
}	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
name	*(char)
=	O
malloc	O
(	O
strlen	O
(	O
name	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
name	*(char)
)	O
{	O
err	O
=	O
ENOMEM	O
;	O
goto	O
out	O
;	O
}	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
version	*(char)
=	O
malloc	O
(	O
strlen	O
(	O
version	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
!	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
version	*(char)
)	O
{	O
free	()->(int)
(	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
name	*(char)
)	O
;	O
err	O
=	O
ENOMEM	O
;	O
goto	O
out	O
;	O
}	O
strcpy	O
(	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
name	*(char)
,	O
name	*(char)
)	O
;	O
strcpy	O
(	O
server_versions	*(struct(*(char),*(char)))
[	O
nserver_versions	int
]	O
.	O
version	*(char)
,	O
version	*(char)
)	O
;	O
nserver_versions	int
++	O
;	O
}	O
rebuild_uname	()->(void)
(	O
)	O
;	O
out	O
:	O
if	O
(	O
!	O
err	O
)	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
credential	int
)	O
;	O
return	O
err	O
;	O
}	O
