struct	O
system_identity_data	struct(int)
{	O
gid_t	int
gid	int
;	O
}	O
;	O
static	O
int	O
system_authenticate	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`)),struct(struct(*`,int,int),struct(*`,int,int)),*(void))),*(struct(*(struct(*`,*`,struct`,*`)),*(char),*(void))),*(char))->(int)
(	O
pies_identity_provider_t	*(struct)
pr	*(struct)
,	O
pies_identity_t	*(struct)
id	*(char)
,	O
char	O
const	O
*	O
passwd	*(char)
)	O
{	O
struct	O
passwd	*(char)
*	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
encrypted_pass	*(char)
=	O
NULL	O
;	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
id	*(char)
->	O
username	*(char)
)	O
;	O
if	O
(	O
!	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
return	O
-	O
1	int
;	O
encrypted_pass	*(char)
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
;	O
{	O
struct	O
spwd	struct(*(char),*(char),long,long,long,long,long,long,long)
*	O
sp	*(struct(*(char),*(char),long,long,long,long,long,long,long))
;	O
if	O
(	O
(	O
sp	*(struct(*(char),*(char),long,long,long,long,long,long,long))
=	O
getspnam	(*(char))->(*(struct(*(char),*(char),long,long,long,long,long,long,long)))
(	O
id	*(char)
->	O
username	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
sp	*(struct(*(char),*(char),long,long,long,long,long,long,long))
->	O
sp_expire	long
>	O
0	int
&&	O
time	struct(long,long)
(	O
NULL	O
)	O
>	O
sp	*(struct(*(char),*(char),long,long,long,long,long,long,long))
->	O
sp_expire	long
*	O
86400	int
)	O
return	O
-	O
1	int
;	O
encrypted_pass	*(char)
=	O
sp	*(struct(*(char),*(char),long,long,long,long,long,long,long))
->	O
sp_pwdp	*(char)
;	O
}	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
crypt	(*(char),*(char))->(*(char))
(	O
passwd	*(char)
,	O
encrypted_pass	*(char)
)	O
,	O
encrypted_pass	*(char)
)	O
==	O
0	int
)	O
{	O
struct	O
system_identity_data	struct(int)
*	O
data	*(void)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
data	*(void)
)	O
)	O
;	O
if	O
(	O
!	O
data	*(void)
)	O
return	O
-	O
1	int
;	O
data	*(void)
->	O
gid	int
=	O
pwd	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
;	O
id	*(char)
->	O
data	*(void)
=	O
data	*(void)
;	O
return	O
0	int
;	O
}	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
system_is_group_member	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`)),struct(struct(*`,int,int),struct(*`,int,int)),*(void))),*(struct(*(struct(*`,*`,struct`,*`)),*(char),*(void))),*(*(char)))->(int)
(	O
pies_identity_provider_t	*(struct)
provider	*(struct)
,	O
pies_identity_t	*(struct)
id	*(char)
,	O
char	O
*	O
const	O
*	O
groups	*(*(char))
)	O
{	O
struct	O
system_identity_data	struct(int)
*	O
data	*(void)
=	O
id	*(char)
->	O
data	*(void)
;	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
gr	*(struct(*(char),*(char),int,*(*(char))))
;	O
int	O
result	array(*(char))
=	O
0	int
;	O
setgrent	()->(void)
(	O
)	O
;	O
while	O
(	O
!	O
result	array(*(char))
&&	O
(	O
gr	*(struct(*(char),*(char),int,*(*(char))))
=	O
getgrent	()->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
)	O
)	O
)	O
{	O
if	O
(	O
is_array_member	(*(*(char)),*(char))->(int)
(	O
groups	*(*(char))
,	O
gr	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_name	*(char)
)	O
)	O
{	O
if	O
(	O
gr	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_gid	int
==	O
data	*(void)
->	O
gid	int
)	O
result	array(*(char))
=	O
1	int
;	O
else	O
result	array(*(char))
=	O
is_array_member	(*(*(char)),*(char))->(int)
(	O
gr	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
,	O
id	*(char)
->	O
username	*(char)
)	O
;	O
}	O
}	O
endgrent	()->(void)
(	O
)	O
;	O
return	O
result	array(*(char))
;	O
}	O
static	O
void	O
system_destroy_identity	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`)),struct(struct(*`,int,int),struct(*`,int,int)),*(void))),*(struct(*(struct(*`,*`,struct`,*`)),*(char),*(void))))->(void)
(	O
pies_identity_provider_t	*(struct)
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct(short,array(char)))))
,	O
pies_identity_t	*(struct)
id	*(char)
)	O
{	O
if	O
(	O
id	*(char)
->	O
data	*(void)
)	O
free	(*(void))->(void)
(	O
id	*(char)
->	O
data	*(void)
)	O
;	O
}	O
static	O
void	O
confhelp	*(()->(void))
(	O
void	O
)	O
{	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct`))))))
kw	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"type"	*(char)
,	O
"'system"	*(char)
,	O
"Set mechanism type"	*(char)
,	O
grecs_type_null	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct`))))))
top	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"identity-provider"	*(char)
,	O
"name: string"	*(char)
,	O
"Configuration for system identity provider"	*(char)
,	O
grecs_type_section	int
,	O
GRECS_INAC	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
kw	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
grecs_print_statement_array	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
top	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(void),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
,	O
1	int
,	O
0	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
struct	O
pies_identity_mechanism	struct(*(char),*((*(struct),*(struct(*(struct`),*(char),*(void))),*(char))->(int)),*((*(struct),*(struct(*(struct`),*(char),*(void))),*(*(char)))->(int)),*((*(struct),*(struct(*(struct`),*(char),*(void))))->(void)),*((*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct))->(int)),*(()->(void)))
system_identity_mechanism	struct
=	O
{	O
"system"	*(char)
,	O
system_authenticate	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`)),struct(struct(*`,int,int),struct(*`,int,int)),*(void))),*(struct(*(struct(*`,*`,struct`,*`)),*(char),*(void))),*(char))->(int)
,	O
system_is_group_member	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`)),struct(struct(*`,int,int),struct(*`,int,int)),*(void))),*(struct(*(struct(*`,*`,struct`,*`)),*(char),*(void))),*(*(char)))->(int)
,	O
system_destroy_identity	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,*`)),struct(struct(*`,int,int),struct(*`,int,int)),*(void))),*(struct(*(struct(*`,*`,struct`,*`)),*(char),*(void))))->(void)
,	O
NULL	O
,	O
confhelp	*(()->(void))
}	O
;	O
