typedef	O
struct	O
{	O
const	O
char	O
*	O
*	O
encoding	*(char)
;	O
wget_vector	struct
*	O
uris	*(struct)
;	O
}	O
_CSS_CONTEXT	struct(*(*(char)),*(struct))
;	O
static	O
void	O
url_free	(*(void))->(void)
(	O
void	O
*	O
url	*(char)
)	O
{	O
wget_css_parsed_url	struct(long,long,*(char),*(char))
*	O
u	*(struct(long,long,*(char),*(char)))
=	O
url	*(char)
;	O
xfree	O
(	O
u	*(struct(long,long,*(char),*(char)))
->	O
url	*(char)
)	O
;	O
xfree	O
(	O
u	*(struct(long,long,*(char),*(char)))
->	O
abs_url	*(char)
)	O
;	O
xfree	O
(	O
u	*(struct(long,long,*(char),*(char)))
)	O
;	O
}	O
static	O
void	O
_css_get_encoding	(*(void),*(char),long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
const	O
char	O
*	O
encoding	*(char)
,	O
size_t	long
len	long
)	O
{	O
_CSS_CONTEXT	struct(*(*(char)),*(struct))
*	O
ctx	*(void)
=	O
context	*(void)
;	O
if	O
(	O
!	O
*	O
ctx	*(void)
->	O
encoding	*(char)
)	O
{	O
*	O
ctx	*(void)
->	O
encoding	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
encoding	*(char)
,	O
len	long
)	O
;	O
debug_printf	O
(	O
"URI content encoding = '%s'\n"	*(char)
,	O
*	O
ctx	*(void)
->	O
encoding	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
_css_get_url	(*(void),*(char),long,long)->(void)
(	O
void	O
*	O
context	*(void)
,	O
const	O
char	O
*	O
url	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
pos	int
)	O
{	O
_CSS_CONTEXT	struct(*(*(char)),*(struct))
*	O
ctx	*(void)
=	O
context	*(void)
;	O
wget_css_parsed_url	struct(long,long,*(char),*(char))
*	O
parsed_url	*(struct(long,long,*(char),*(char)))
;	O
if	O
(	O
!	O
(	O
parsed_url	*(struct(long,long,*(char),*(char)))
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
wget_css_parsed_url	struct(long,long,*(char),*(char))
)	O
)	O
)	O
)	O
return	O
;	O
if	O
(	O
!	O
(	O
parsed_url	*(struct(long,long,*(char),*(char)))
->	O
url	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
url	*(char)
,	O
len	long
)	O
)	O
)	O
{	O
xfree	O
(	O
parsed_url	*(struct(long,long,*(char),*(char)))
)	O
;	O
return	O
;	O
}	O
parsed_url	*(struct(long,long,*(char),*(char)))
->	O
len	long
=	O
len	long
;	O
parsed_url	*(struct(long,long,*(char),*(char)))
->	O
pos	int
=	O
pos	int
;	O
if	O
(	O
!	O
ctx	*(void)
->	O
uris	*(struct)
)	O
{	O
ctx	*(void)
->	O
uris	*(struct)
=	O
wget_vector_create	(int,*((*(void),*(void))->(int)))->(*(struct))
(	O
16	int
,	O
NULL	O
)	O
;	O
wget_vector_set_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
ctx	*(void)
->	O
uris	*(struct)
,	O
url_free	(*(void))->(void)
)	O
;	O
}	O
wget_vector_add	(*(struct),*(void))->(int)
(	O
ctx	*(void)
->	O
uris	*(struct)
,	O
parsed_url	*(struct(long,long,*(char),*(char)))
)	O
;	O
}	O
static	O
void	O
_urls_to_absolute	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
wget_vector	struct
*	O
urls	*(*(struct))
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
{	O
if	O
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
&&	O
urls	*(*(struct))
)	O
{	O
wget_buffer	struct(*(char),long,long,bool,bool,bool)
buf	*(char)
;	O
wget_buffer_init	(*(struct(*(char),long,long,bool,bool,bool)),*(char),long)->(int)
(	O
&	O
buf	*(char)
,	O
NULL	O
,	O
1024	int
)	O
;	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
urls	*(*(struct))
)	O
;	O
it	int
++	O
)	O
{	O
wget_css_parsed_url	struct(long,long,*(char),*(char))
*	O
url	*(char)
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
urls	*(*(struct))
,	O
it	int
)	O
;	O
if	O
(	O
wget_iri_relative_to_abs	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(char),long,*(struct(*(char),long,long,bool,bool,bool)))->(*(char))
(	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
url	*(char)
->	O
url	*(char)
,	O
url	*(char)
->	O
len	long
,	O
&	O
buf	*(char)
)	O
)	O
url	*(char)
->	O
abs_url	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
buf	*(char)
.	O
data	*(void)
,	O
buf	*(char)
.	O
length	long
)	O
;	O
else	O
error_printf	O
(	O
_	O
(	O
"Cannot resolve relative URI '%s'\n"	*(char)
)	O
,	O
url	*(char)
->	O
url	*(char)
)	O
;	O
}	O
wget_buffer_deinit	(*(struct(*(char),long,long,bool,bool,bool)))->(void)
(	O
&	O
buf	*(char)
)	O
;	O
}	O
}	O
wget_vector	struct
*	O
wget_css_get_urls	(*(char),long,*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(*(char)))->(*(struct))
(	O
const	O
char	O
*	O
css	*(char)
,	O
size_t	long
len	long
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
const	O
char	O
*	O
*	O
encoding	*(char)
)	O
{	O
_CSS_CONTEXT	struct(*(*(char)),*(struct))
context	*(void)
=	O
{	O
.	O
encoding	*(char)
=	O
encoding	*(char)
}	O
;	O
wget_css_parse_buffer	(*(char),long,*((*(void),*(char),long,long)->(void)),*((*(void),*(char),long)->(void)),*(void))->(void)
(	O
css	*(char)
,	O
len	long
,	O
_css_get_url	(*(void),*(char),long,long)->(void)
,	O
encoding	*(char)
?	O
_css_get_encoding	(*(void),*(char),long)->(void)
:	O
NULL	O
,	O
&	O
context	*(void)
)	O
;	O
_urls_to_absolute	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
context	*(void)
.	O
uris	*(struct)
,	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
return	O
context	*(void)
.	O
uris	*(struct)
;	O
}	O
wget_vector	struct
*	O
wget_css_get_urls_from_localfile	(*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)),*(*(char)))->(*(struct))
(	O
const	O
char	O
*	O
fname	*(char)
,	O
wget_iri	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)
*	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
,	O
const	O
char	O
*	O
*	O
encoding	*(char)
)	O
{	O
_CSS_CONTEXT	struct(*(*(char)),*(struct))
context	*(void)
=	O
{	O
.	O
encoding	*(char)
=	O
encoding	*(char)
}	O
;	O
wget_css_parse_file	(*(char),*((*(void),*(char),long,long)->(void)),*((*(void),*(char),long)->(void)),*(void))->(void)
(	O
fname	*(char)
,	O
_css_get_url	(*(void),*(char),long,long)->(void)
,	O
encoding	*(char)
?	O
_css_get_encoding	(*(void),*(char),long)->(void)
:	O
NULL	O
,	O
&	O
context	*(void)
)	O
;	O
_urls_to_absolute	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool)))->(void)
(	O
context	*(void)
.	O
uris	*(struct)
,	O
base	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),long,long,short,enum(int,int),bool,bool,bool,bool,bool,bool,bool))
)	O
;	O
return	O
context	*(void)
.	O
uris	*(struct)
;	O
}	O
