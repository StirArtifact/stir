static	O
char	O
alphabet	array(char)
[	O
]	O
=	O
"0123456789"	*(char)
"-$:/.+ABCD"	*(char)
;	O
static	O
char	O
*	O
patterns	array(*(char))
[	O
]	O
=	O
{	O
"1111133"	*(char)
,	O
"1111331"	*(char)
,	O
"1113113"	*(char)
,	O
"3311111"	*(char)
,	O
"1131131"	*(char)
,	O
"3111131"	*(char)
,	O
"1311113"	*(char)
,	O
"1311311"	*(char)
,	O
"1331111"	*(char)
,	O
"3113111"	*(char)
,	O
"1113311"	*(char)
,	O
"1133111"	*(char)
,	O
"3111313"	*(char)
,	O
"3131113"	*(char)
,	O
"3131311"	*(char)
,	O
"1131313"	*(char)
,	O
"1133131"	*(char)
,	O
"1313113"	*(char)
,	O
"1113133"	*(char)
,	O
"1113331"	*(char)
}	O
;	O
int	O
Barcode_cbr_verify	(*(char))->(int)
(	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
i	int
,	O
lower	int
=	O
0	int
,	O
upper	int
=	O
0	int
;	O
int	O
startpresent	int
=	O
0	int
;	O
if	O
(	O
!	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
)	O
return	O
-	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
text	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
char	O
*	O
pos	*(char)
;	O
if	O
(	O
isupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
upper	int
++	O
;	O
if	O
(	O
islower	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
lower	int
++	O
;	O
pos	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
pos	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
i	int
==	O
0	int
&&	O
pos	*(char)
-	O
alphabet	array(char)
>=	O
CODE_A	int
)	O
startpresent	int
=	O
1	int
;	O
else	O
if	O
(	O
pos	*(char)
-	O
alphabet	array(char)
>=	O
CODE_A	int
&&	O
(	O
!	O
startpresent	int
||	O
i	int
!=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
-	O
1	int
)	O
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
lower	int
&&	O
upper	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
add_one	(*(char),int)->(int)
(	O
char	O
*	O
ptr	*(char)
,	O
int	O
code	int
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
ptr	*(char)
,	O
"1%s"	*(char)
,	O
patterns	array(*(char))
[	O
code	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
Barcode_cbr_encode	(*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)))->(int)
(	O
struct	O
Barcode_Item	struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int)
*	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
)	O
{	O
static	O
char	O
*	O
text	*(char)
;	O
static	O
char	O
*	O
partial	*(char)
;	O
static	O
char	O
*	O
textinfo	*(char)
;	O
char	O
*	O
c	*(char)
,	O
*	O
ptr	*(char)
,	O
*	O
textptr	*(char)
;	O
int	O
i	int
,	O
code	int
,	O
textpos	int
,	O
usesum	int
,	O
checksum	int
=	O
0	int
,	O
startpresent	int
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
)	O
;	O
if	O
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
free	(*(void))->(void)
(	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
)	O
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
)	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
encoding	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"codabar"	*(char)
)	O
;	O
text	*(char)
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
ascii	*(char)
;	O
if	O
(	O
!	O
text	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
partial	*(char)
=	O
malloc	(long)->(*(void))
(	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
3	int
)	O
*	O
8	int
+	O
2	int
)	O
;	O
if	O
(	O
!	O
partial	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
return	O
-	O
1	int
;	O
}	O
textinfo	*(char)
=	O
malloc	(long)->(*(void))
(	O
10	int
*	O
(	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
+	O
1	int
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
textinfo	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
ptr	*(char)
=	O
partial	*(char)
;	O
textptr	*(char)
=	O
textinfo	*(char)
;	O
textpos	int
=	O
0	int
;	O
usesum	int
=	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
flags	int
&	O
BARCODE_NO_CHECKSUM	int
?	O
0	int
:	O
1	int
;	O
if	O
(	O
!	O
isalpha	(int)->(int)
(	O
text	*(char)
[	O
0	int
]	O
)	O
)	O
{	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
CODE_A	int
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
textpos	int
=	O
WIDE	int
;	O
checksum	int
=	O
CODE_A	int
;	O
startpresent	int
=	O
0	int
;	O
}	O
else	O
{	O
startpresent	int
=	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
i	int
++	O
)	O
{	O
c	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
c	*(char)
)	O
{	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
error	int
=	O
EINVAL	int
;	O
free	(*(void))->(void)
(	O
partial	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
textinfo	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
code	int
=	O
c	*(char)
-	O
alphabet	array(char)
;	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
code	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
textptr	*(char)
,	O
"%i:12:%c "	*(char)
,	O
textpos	int
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
]	O
)	O
)	O
;	O
textpos	int
+=	O
code	int
<	O
12	int
?	O
NARROW	int
:	O
WIDE	int
;	O
textptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
textptr	*(char)
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
checksum	int
+=	O
code	int
;	O
if	O
(	O
startpresent	int
&&	O
usesum	int
&&	O
i	int
==	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
-	O
2	int
)	O
{	O
c	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
alphabet	array(char)
,	O
toupper	(int)->(int)
(	O
text	*(char)
[	O
i	int
+	O
1	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
c	*(char)
)	O
continue	O
;	O
code	int
=	O
c	*(char)
-	O
alphabet	array(char)
;	O
checksum	int
+=	O
code	int
;	O
checksum	int
=	O
(	O
checksum	int
+	O
15	int
)	O
/	O
16	int
*	O
16	int
-	O
checksum	int
;	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
checksum	int
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
!	O
startpresent	int
)	O
{	O
if	O
(	O
usesum	int
)	O
{	O
checksum	int
+=	O
CODE_B	int
;	O
checksum	int
=	O
(	O
checksum	int
+	O
15	int
)	O
/	O
16	int
*	O
16	int
-	O
checksum	int
;	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
checksum	int
)	O
;	O
ptr	*(char)
+=	O
strlen	(*(char))->(long)
(	O
ptr	*(char)
)	O
;	O
}	O
add_one	(*(char),int)->(int)
(	O
ptr	*(char)
,	O
CODE_B	int
)	O
;	O
}	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
partial	*(char)
=	O
partial	*(char)
;	O
bc	*(struct(int,*(char),*(char),*(char),*(char),int,int,int,int,int,double,int))
->	O
textinfo	*(char)
=	O
textinfo	*(char)
;	O
return	O
0	int
;	O
}	O
