typedef	O
void	O
(	O
*	O
vf	*(()->(void))
)	O
(	O
)	O
;	O
static	O
error_t	int
unsupp	()->(int)
(	O
)	O
{	O
return	O
EOPNOTSUPP	int
;	O
}	O
static	O
error_t	int
nop	()->(int)
(	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
true	()->(int)
(	O
)	O
{	O
return	O
1	int
;	O
}	O
treefs_hook_vector_init_t	*(()->(void))
treefs_default_hooks	*(()->(void))
=	O
{	O
[	O
TREEFS_HOOK_S_DIR_LOOKUP	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_s_dir_lookup	O
,	O
[	O
TREEFS_HOOK_S_FSYS_GETROOT	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_s_fsys_getroot	O
,	O
[	O
TREEFS_HOOK_S_FSYS_SYNCFS	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_FSYS_CREATE_NODE	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_fsys_create_node	O
,	O
[	O
TREEFS_HOOK_FSYS_DESTROY_NODE	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_fsys_destroy_node	O
,	O
[	O
TREEFS_HOOK_FSYS_GET_ROOT	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_fsys_get_root	O
,	O
[	O
TREEFS_HOOK_NODE_TYPE	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_node_type	O
,	O
[	O
TREEFS_HOOK_NODE_UNLINKED	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
true	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_MOD_LINK_COUNT	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_node_mod_link_count	O
,	O
[	O
TREEFS_HOOK_DIR_LOOKUP	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_dir_lookup	O
,	O
[	O
TREEFS_HOOK_DIR_NOENT	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_dir_noent	O
,	O
[	O
TREEFS_HOOK_DIR_CREATE_CHILD	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_dir_create_child	O
,	O
[	O
TREEFS_HOOK_DIR_LINK	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_dir_link	O
,	O
[	O
TREEFS_HOOK_DIR_UNLINK	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_dir_unlink	O
,	O
[	O
TREEFS_HOOK_NODE_OWNED	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_node_owned	O
,	O
[	O
TREEFS_HOOK_NODE_ACCESS	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_node_access	O
,	O
[	O
TREEFS_HOOK_NODE_START_TRANSLATOR	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
_treefs_node_start_translator	O
,	O
[	O
TREEFS_HOOK_NODE_INIT	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_DIR_INIT	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_INIT_PEROPEN	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_INIT_HANDLE	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_FINALIZE	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_FINALIZE_PEROPEN	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_FINALIZE_HANDLE	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_NEW_REFS	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_LOST_REFS	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
[	O
TREEFS_HOOK_NODE_TRY_DROPPING_WEAK_REFS	O
]	O
=	O
(	O
vf	*(()->(void))
)	O
nop	()->(int)
,	O
}	O
;	O
void	O
_treefs_init_defhooks	()->(void)
(	O
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
TREEFS_NUM_HOOKS	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
treefs_default_hooks	*(()->(void))
[	O
i	int
]	O
)	O
treefs_default_hooks	*(()->(void))
[	O
i	int
]	O
=	O
(	O
vf	*(()->(void))
)	O
unsupp	()->(int)
;	O
}	O
