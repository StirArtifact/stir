static	O
char	O
*	O
g_swgpg_dirname	*(char)
=	O
NULL	O
;	O
static	O
char	O
*	O
g_swgpg_fifopath	*(char)
=	O
NULL	O
;	O
static	O
int	O
swgpg_passfd	int
;	O
static	O
int	O
get_stderr_fd	()->(int)
(	O
void	O
)	O
{	O
return	O
STDERR_FILENO	int
;	O
}	O
static	O
void	O
close_passfd	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
swgpg_passfd	int
>=	O
0	int
)	O
{	O
if	O
(	O
close	*((*(void))->(int))
(	O
swgpg_passfd	int
)	O
<	O
0	int
)	O
{	O
;	O
}	O
}	O
}	O
static	O
char	O
*	O
make_dir	(*(*(char)))->(*(char))
(	O
char	O
*	O
*	O
ma	*(*(char))
)	O
{	O
int	O
ret	int
;	O
char	O
*	O
template	*(char)
;	O
char	O
*	O
filename	*(char)
;	O
char	O
*	O
sret	*(char)
;	O
mode_t	int
um	int
;	O
int	O
try	int
;	O
const	O
int	O
max_tries	int
=	O
10	int
;	O
E_DEBUG	O
(	O
"begin using mkdtemp"	*(char)
)	O
;	O
template	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
SWGPG_FIFO_DIR	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
SWGPG_FIFO_PFX	*(char)
)	O
+	O
8	int
)	O
;	O
if	O
(	O
!	O
template	*(char)
)	O
return	O
NULL	O
;	O
*	O
ma	*(*(char))
=	O
template	*(char)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
template	*(char)
,	O
SWGPG_FIFO_DIR	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
template	*(char)
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
template	*(char)
,	O
SWGPG_FIFO_PFX	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
template	*(char)
,	O
"XXXXXX"	*(char)
)	O
;	O
filename	*(char)
=	O
mkdtemp	(*(char))->(*(char))
(	O
template	*(char)
)	O
;	O
if	O
(	O
filename	*(char)
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: mkdtemp error for template [%s]: %s\n"	*(char)
,	O
swlib_utilname_get	()->(*(char))
(	O
)	O
,	O
template	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
E_DEBUG2	O
(	O
"end using mkdtemp: filename=[%s]"	*(char)
,	O
filename	*(char)
)	O
;	O
return	O
filename	*(char)
;	O
}	O
static	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
gpg_fifo_command	(*(char),*(char),int,int)->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
char	O
*	O
fifofilename	*(char)
,	O
char	O
*	O
gpg_prog	*(char)
,	O
int	O
uverbose	int
,	O
int	O
logger_fd	int
)	O
{	O
char	O
*	O
absname	*(char)
;	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
cmd	int
=	O
shcmd_open	()->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
)	O
;	O
absname	*(char)
=	O
shcmd_find_in_path	(*(char),*(char))->(*(char))
(	O
getenv	(*(char))->(*(char))
(	O
"PATH"	*(char)
)	O
,	O
gpg_prog	*(char)
)	O
;	O
if	O
(	O
!	O
absname	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"swbis: %s: Not found in current path\n"	*(char)
,	O
gpg_prog	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
uverbose	int
>=	O
3	int
)	O
{	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
32	int
)	O
;	O
swlib_writef	(int,*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
logger_fd	int
,	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"%s: using GNU Privacy Guard : %s\n"	*(char)
,	O
swlib_utilname_get	()->(*(char))
(	O
)	O
,	O
absname	*(char)
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
absname	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"--status-fd=1"	*(char)
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
logger_fd	int
!=	O
STDERR_FILENO	int
)	O
{	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
x	*(struct(struct(int,*(struct(struct`,*`,*`,*`,int,array(char),*`,*`,int,*`,int,int,int,int)),*(struct(*`,int,int)),int),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,array(char),*(struct`),int,*(char),int,int,int,*(struct`),*(struct`),*(void),int,int,*(struct`),int,int,int,int)),*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(struct`),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*(char),*(char),*(struct`),int,int,int)),*(union(struct(*`,int,int,long,int))),*(struct(*(union`)))))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
32	int
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
x	*(struct(struct(int,*(struct(struct`,*`,*`,*`,int,array(char),*`,*`,int,*`,int,int,int,int)),*(struct(*`,int,int)),int),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,array(char),*(struct`),int,*(char),int,int,int,*(struct`),*(struct`),*(void),int,int,*(struct`),int,int,int,int)),*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(struct`),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*(char),*(char),*(struct`),int,int,int)),*(union(struct(*`,int,int,long,int))),*(struct(*(union`)))))
,	O
0	int
,	O
"--logger-fd=%d"	*(char)
,	O
logger_fd	int
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
x	*(struct(struct(int,*(struct(struct`,*`,*`,*`,int,array(char),*`,*`,int,*`,int,int,int,int)),*(struct(*`,int,int)),int),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,array(char),*(struct`),int,*(char),int,int,int,*(struct`),*(struct`),*(void),int,int,*(struct`),int,int,int,int)),*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(struct`),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*(char),*(char),*(struct`),int,int,int)),*(union(struct(*`,int,int,long,int))),*(struct(*(union`)))))
)	O
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
x	*(struct(struct(int,*(struct(struct`,*`,*`,*`,int,array(char),*`,*`,int,*`,int,int,int,int)),*(struct(*`,int,int)),int),*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,array(char),*(struct`),int,*(char),int,int,int,*(struct`),*(struct`),*(void),int,int,*(struct`),int,int,int,int)),*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(struct`),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*(char),*(char),*(struct`),int,int,int)),*(union(struct(*`,int,int,long,int))),*(struct(*(union`)))))
)	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"--verify"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
fifofilename	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
,	O
"-"	*(char)
)	O
;	O
if	O
(	O
uverbose	int
<	O
SWC_VERBOSE_2	int
)	O
{	O
shcmd_set_errfile	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(void)
(	O
cmd	int
,	O
"/dev/null"	*(char)
)	O
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
return	O
cmd	int
;	O
}	O
static	O
int	O
get_number_of_blobs	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
int	O
n	int
=	O
0	int
;	O
while	O
(	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
!=	O
NULL	O
)	O
{	O
n	int
++	O
;	O
}	O
return	O
n	int
;	O
}	O
static	O
int	O
make_pgp_env	(array(*(char)),int)->(int)
(	O
char	O
*	O
env	array(*(char))
[	O
]	O
,	O
int	O
len	int
)	O
{	O
int	O
i	int
;	O
char	O
*	O
valu	*(char)
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
2	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
len	int
;	O
i	int
++	O
)	O
{	O
env	array(*(char))
[	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
env	array(*(char))
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
"PGPPASSFD=3"	*(char)
)	O
;	O
valu	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
valu	*(char)
)	O
{	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"HOME=%s"	*(char)
,	O
valu	*(char)
)	O
;	O
env	array(*(char))
[	O
1	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
}	O
valu	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"MYNAME"	*(char)
)	O
;	O
if	O
(	O
valu	*(char)
)	O
{	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"MYNAME=%s"	*(char)
,	O
valu	*(char)
)	O
;	O
env	array(*(char))
[	O
2	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
}	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
get_does_use_gpg_agent	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(int)
(	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
)	O
{	O
char	O
*	O
*	O
args	*(*(char))
;	O
char	O
*	O
arg	*(void)
;	O
args	*(*(char))
=	O
shcmd_get_argvector	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(*(*(char)))
(	O
cmd	int
)	O
;	O
arg	*(void)
=	O
*	O
args	*(*(char))
;	O
while	O
(	O
arg	*(void)
)	O
{	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
arg	*(void)
,	O
"--use-agent"	*(char)
)	O
)	O
return	O
1	int
;	O
arg	*(void)
=	O
*	O
(	O
++	O
args	*(*(char))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
void	O
swgpg_init_passphrase_fd	()->(void)
(	O
void	O
)	O
{	O
swgpg_set_passphrase_fd	(int)->(void)
(	O
-	O
1	int
)	O
;	O
}	O
void	O
swgpg_set_passphrase_fd	(int)->(void)
(	O
int	O
fd	int
)	O
{	O
swgpg_passfd	int
=	O
fd	int
;	O
}	O
int	O
swgpg_get_passphrase_fd	()->(int)
(	O
void	O
)	O
{	O
return	O
swgpg_passfd	int
;	O
}	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
swgpg_create	()->(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
void	O
)	O
{	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
)	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
return	O
NULL	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
gpg_prognameM	*(char)
=	O
swlib_strdup	(*(char))->(*(char))
(	O
SWGPG_GPG_BIN	*(char)
)	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sig_namesM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_logger_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
12	int
)	O
;	O
return	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
;	O
}	O
void	O
swgpg_delete	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
gpg_prognameM	*(char)
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sig_namesM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_logger_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
}	O
int	O
swgpg_show_all_signatures	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int)->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
fd	int
)	O
{	O
int	O
n	int
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
100	int
)	O
;	O
n	int
=	O
0	int
;	O
while	O
(	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
!=	O
NULL	O
)	O
{	O
swlib_writef	(int,*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
fd	int
,	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"%s%s"	*(char)
,	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_logger_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
,	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
)	O
;	O
n	int
++	O
;	O
}	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
swgpg_show	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int,int,int,int)->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
index	(*(char),int)->(*(char))
,	O
int	O
sig_fd	int
,	O
int	O
status_fd	int
,	O
int	O
logger_fd	int
)	O
{	O
int	O
n	int
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
int	O
num	int
;	O
char	O
*	O
s	*(struct(*(char),*(char),int,int,int,char,int))
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
100	int
)	O
;	O
num	int
=	O
get_number_of_blobs	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
E_DEBUG2	O
(	O
"index is %d"	*(char)
,	O
index	(*(char),int)->(*(char))
)	O
;	O
E_DEBUG2	O
(	O
"number of sigs is %d"	*(char)
,	O
num	int
)	O
;	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
0	int
||	O
index	(*(char),int)->(*(char))
>=	O
num	int
)	O
return	O
-	O
1	int
;	O
n	int
=	O
index	(*(char),int)->(*(char))
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_logger_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
;	O
if	O
(	O
logger_fd	int
>	O
0	int
&&	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
swlib_writef	(int,*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
logger_fd	int
,	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"%s"	*(char)
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
;	O
if	O
(	O
status_fd	int
>	O
0	int
)	O
swlib_writef	(int,*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
status_fd	int
,	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"%s"	*(char)
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
s	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
;	O
if	O
(	O
sig_fd	int
>	O
0	int
)	O
swlib_writef	(int,*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
sig_fd	int
,	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
"%s"	*(char)
,	O
s	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
return	O
0	int
;	O
}	O
void	O
swgpg_reset	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
strar_reset	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_reset	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sig_namesM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_reset	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_reset	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_logger_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
}	O
int	O
swgpg_get_status	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int)->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
index	(*(char),int)->(*(char))
)	O
{	O
int	O
ret	int
;	O
ret	int
=	O
strob_get_char	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
,	O
index	(*(char),int)->(*(char))
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
swgpg_get_number_of_sigs	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
int	O
n	int
=	O
0	int
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
while	O
(	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
n	int
)	O
!=	O
NULL	O
)	O
{	O
n	int
++	O
;	O
}	O
return	O
n	int
;	O
}	O
void	O
swgpg_set_status	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int,int)->(void)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
index	(*(char),int)->(*(char))
,	O
int	O
value	int
)	O
{	O
strob_set_length	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
,	O
index	(*(char),int)->(*(char))
+	O
1	int
)	O
;	O
*	O
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
)	O
+	O
index	(*(char),int)->(*(char))
)	O
=	O
(	O
unsigned	O
char	O
)	O
value	int
;	O
}	O
void	O
swgpg_set_status_array	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
char	O
*	O
sig	*(char)
;	O
int	O
i	int
;	O
int	O
ret	int
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
status_arrayM	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
sig	*(char)
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_sigsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
i	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
ret	int
=	O
swgpg_determine_signature_status	(*(char),int)->(int)
(	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
i	int
)	O
,	O
-	O
1	int
)	O
;	O
swgpg_set_status	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int,int)->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
i	int
,	O
ret	int
)	O
;	O
i	int
++	O
;	O
}	O
}	O
int	O
swgpg_disentangle_status_lines	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
char	O
*	O
gpg_output_lines	*(char)
)	O
{	O
char	O
*	O
line	*(char)
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
status_lines	*(struct(*(char),*(char),int,int,int,char,int))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
stderr_lines	*(struct(*(char),*(char),int,int,int,char,int))
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
status_lines	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
stderr_lines	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
10	int
)	O
;	O
line	*(char)
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
gpg_output_lines	*(char)
,	O
"\n\r"	*(char)
)	O
;	O
while	O
(	O
line	*(char)
)	O
{	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_PREFIX	*(char)
)	O
==	O
line	*(char)
)	O
{	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
status_lines	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"%s\n"	*(char)
,	O
line	*(char)
)	O
;	O
}	O
else	O
{	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
stderr_lines	*(struct(*(char),*(char),int,int,int,char,int))
,	O
STROB_DO_APPEND	int
,	O
"%s\n"	*(char)
,	O
line	*(char)
)	O
;	O
}	O
line	*(char)
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
NULL	O
,	O
"\n\r"	*(char)
)	O
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_status_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
status_lines	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
list_of_logger_blobsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
stderr_lines	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
status_lines	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
stderr_lines	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
swgpg_create_fifo	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
int	O
ret	int
;	O
char	O
*	O
filename	*(char)
;	O
char	O
*	O
dirname	*(char)
;	O
char	O
*	O
freeit	*(char)
=	O
NULL	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
return	O
NULL	O
;	O
if	O
(	O
g_swgpg_dirname	*(char)
!=	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
g_swgpg_fifopath	*(char)
!=	O
NULL	O
)	O
return	O
NULL	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
dirname	*(char)
=	O
make_dir	(*(*(char)))->(*(char))
(	O
&	O
freeit	*(char)
)	O
;	O
if	O
(	O
!	O
dirname	*(char)
)	O
return	O
NULL	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
dirname	*(char)
)	O
;	O
g_swgpg_dirname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
dirname	*(char)
)	O
;	O
swlib_unix_dircat	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(int)
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
SWGPG_FIFO_NAME	*(char)
)	O
;	O
g_swgpg_fifopath	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
filename	*(char)
=	O
g_swgpg_fifopath	*(char)
;	O
if	O
(	O
filename	*(char)
)	O
{	O
ret	int
=	O
mkfifo	(*(char),int)->(int)
(	O
filename	*(char)
,	O
(	O
mode_t	int
)	O
(	O
0600	int
)	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: %s\n"	*(char)
,	O
swlib_utilname_get	()->(*(char))
(	O
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
freeit	*(char)
)	O
free	(*(void))->(void)
(	O
freeit	*(char)
)	O
;	O
return	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
}	O
int	O
swgpg_remove_fifo	()->(int)
(	O
void	O
)	O
{	O
int	O
ret	int
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
g_swgpg_dirname	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
if	O
(	O
g_swgpg_fifopath	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
ret	int
=	O
unlink	(*(char))->(int)
(	O
g_swgpg_fifopath	*(char)
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
g_swgpg_fifopath	*(char)
)	O
;	O
g_swgpg_fifopath	*(char)
=	O
NULL	O
;	O
ret	int
=	O
rmdir	(*(char))->(int)
(	O
g_swgpg_dirname	*(char)
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
g_swgpg_dirname	*(char)
)	O
;	O
g_swgpg_dirname	*(char)
=	O
NULL	O
;	O
}	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
swgpg_determine_signature_status	(*(char),int)->(int)
(	O
char	O
*	O
gpg_status_lines	*(char)
,	O
int	O
which_sig	int
)	O
{	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
;	O
char	O
*	O
line	*(char)
;	O
int	O
good_count	int
;	O
int	O
bad_count	int
;	O
int	O
nodata	int
;	O
int	O
nokey	int
;	O
E_DEBUG	O
(	O
"----------------------------------"	*(char)
)	O
;	O
E_DEBUG	O
(	O
"----------------------------------"	*(char)
)	O
;	O
E_DEBUG2	O
(	O
"%s"	*(char)
,	O
gpg_status_lines	*(char)
)	O
;	O
E_DEBUG	O
(	O
"----------------------------------"	*(char)
)	O
;	O
E_DEBUG	O
(	O
"----------------------------------"	*(char)
)	O
;	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
100	int
)	O
;	O
good_count	int
=	O
0	int
;	O
nodata	int
=	O
0	int
;	O
nokey	int
=	O
0	int
;	O
bad_count	int
=	O
0	int
;	O
line	*(char)
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
gpg_status_lines	*(char)
,	O
"\n\r"	*(char)
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
while	O
(	O
line	*(char)
)	O
{	O
E_DEBUG2	O
(	O
"LINE=[%s]"	*(char)
,	O
line	*(char)
)	O
;	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_PREFIX	*(char)
)	O
==	O
line	*(char)
)	O
{	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_PREFIX	*(char)
GPG_STATUS_GOODSIG	*(char)
)	O
)	O
{	O
E_DEBUG	O
(	O
"good_count++"	*(char)
)	O
;	O
good_count	int
++	O
;	O
}	O
else	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_BADSIG	*(char)
)	O
)	O
{	O
E_DEBUG	O
(	O
"bad_count++"	*(char)
)	O
;	O
bad_count	int
++	O
;	O
}	O
else	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_NO_PUBKEY	*(char)
)	O
)	O
{	O
E_DEBUG	O
(	O
"nokey++"	*(char)
)	O
;	O
nokey	int
++	O
;	O
}	O
else	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_EXPSIG	*(char)
)	O
)	O
{	O
E_DEBUG	O
(	O
"bad_count++"	*(char)
)	O
;	O
bad_count	int
++	O
;	O
}	O
else	O
if	O
(	O
strstr	(*(char),*(char))->(*(char))
(	O
line	*(char)
,	O
GPG_STATUS_NODATA	*(char)
)	O
)	O
{	O
E_DEBUG	O
(	O
"no_data++"	*(char)
)	O
;	O
nodata	int
++	O
;	O
}	O
else	O
{	O
;	O
}	O
}	O
else	O
{	O
;	O
E_DEBUG	O
(	O
"do_nothing"	*(char)
)	O
;	O
}	O
line	*(char)
=	O
strob_strtok	(*(struct(*(char),*(char),int,int,int,char,int)),*(char),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
NULL	O
,	O
"\n\r"	*(char)
)	O
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
if	O
(	O
(	O
which_sig	int
<	O
0	int
&&	O
good_count	int
>=	O
1	int
&&	O
bad_count	int
==	O
0	int
&&	O
nokey	int
==	O
0	int
&&	O
nodata	int
==	O
0	int
)	O
||	O
(	O
which_sig	int
>=	O
0	int
&&	O
good_count	int
==	O
1	int
&&	O
bad_count	int
==	O
0	int
&&	O
nokey	int
==	O
0	int
&&	O
nodata	int
==	O
0	int
)	O
)	O
{	O
E_DEBUG	O
(	O
"return SWGPG_SIG_VALID"	*(char)
)	O
;	O
return	O
SWGPG_SIG_VALID	int
;	O
}	O
else	O
if	O
(	O
good_count	int
==	O
0	int
&&	O
bad_count	int
==	O
0	int
&&	O
nokey	int
>	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"return SWGPG_SIG_NO_PUBKEY"	*(char)
)	O
;	O
return	O
SWGPG_SIG_NO_PUBKEY	int
;	O
}	O
else	O
if	O
(	O
good_count	int
==	O
0	int
&&	O
bad_count	int
==	O
0	int
&&	O
nodata	int
>	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"return SWGPG_SIG_NODATA"	*(char)
)	O
;	O
return	O
SWGPG_SIG_NODATA	int
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
"return SWGPG_SIG_NOT_VALID"	*(char)
)	O
;	O
return	O
SWGPG_SIG_NOT_VALID	int
;	O
}	O
E_DEBUG	O
(	O
"return SWGPG_SIG_ERROR"	*(char)
)	O
;	O
return	O
SWGPG_SIG_ERROR	int
;	O
}	O
int	O
swgpg_run_checksig2	(*(char),*(char),*(char),*(char),int,*(char))->(int)
(	O
char	O
*	O
sigfilename	*(char)
,	O
char	O
*	O
thisprog	*(char)
,	O
char	O
*	O
filearg	*(char)
,	O
char	O
*	O
gpg_prog	*(char)
,	O
int	O
uverbose	int
,	O
char	O
*	O
which_sig_arg	*(char)
)	O
{	O
pid_t	int
pid	int
;	O
int	O
ret	int
;	O
int	O
retval	int
;	O
int	O
sbfd	array(int)
[	O
2	int
]	O
;	O
int	O
logger_fd	int
;	O
int	O
status_fd	int
;	O
int	O
status	int
;	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
;	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
[	O
3	int
]	O
;	O
int	O
u_verbose	int
=	O
uverbose	int
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
30	int
)	O
;	O
int	O
atoiret	int
=	O
1	int
;	O
int	O
which_sig	int
;	O
if	O
(	O
which_sig_arg	*(char)
)	O
{	O
which_sig	int
=	O
swlib_atoi	(*(char),*(int))->(int)
(	O
which_sig_arg	*(char)
,	O
&	O
atoiret	int
)	O
;	O
if	O
(	O
atoiret	int
)	O
return	O
-	O
3	int
;	O
}	O
else	O
{	O
which_sig	int
=	O
-	O
1	int
;	O
}	O
cmd	int
[	O
0	int
]	O
=	O
shcmd_open	()->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
)	O
;	O
cmd	int
[	O
1	int
]	O
=	O
shcmd_open	()->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
)	O
;	O
cmd	int
[	O
2	int
]	O
=	O
NULL	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
retval	int
=	O
1	int
;	O
pipe	(array(int))->(int)
(	O
sbfd	array(int)
)	O
;	O
pid	int
=	O
swfork	O
(	O
NULL	O
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
sbfd	array(int)
[	O
0	int
]	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
swgp_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
SIG_DFL	O
)	O
;	O
swgp_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_DFL	O
)	O
;	O
swgp_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGTERM	int
,	O
SIG_DFL	O
)	O
;	O
swgp_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGUSR1	int
,	O
SIG_DFL	O
)	O
;	O
swgp_signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGUSR2	int
,	O
SIG_DFL	O
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
thisprog	*(char)
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"--util-name=%s"	*(char)
,	O
swlib_utilname_get	()->(*(char))
(	O
)	O
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
"-G"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
sigfilename	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
"-n"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
which_sig_arg	*(char)
)	O
;	O
while	O
(	O
u_verbose	int
>	O
1	int
)	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
"-v"	*(char)
)	O
;	O
u_verbose	int
--	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
"--sleep"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
"1"	*(char)
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"--signed-bytes-fd=%d"	*(char)
,	O
sbfd	array(int)
[	O
1	int
]	O
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
strob_sprintf	(*(struct(*(char),*(char),int,int,int,char,int)),int,*(char))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
0	int
,	O
"--logger-fd=%d"	*(char)
,	O
STDOUT_FILENO	int
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
cmd	int
[	O
0	int
]	O
,	O
filearg	*(char)
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
shcmd_unix_exec	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(int)
(	O
cmd	int
[	O
0	int
]	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"exec error in swgp_run_checksig\n"	*(char)
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
retval	int
=	O
1	int
;	O
close	*((*(void))->(int))
(	O
sbfd	array(int)
[	O
1	int
]	O
)	O
;	O
goto	O
out	O
;	O
}	O
close	*((*(void))->(int))
(	O
sbfd	array(int)
[	O
1	int
]	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
cmd	int
[	O
1	int
]	O
=	O
gpg_fifo_command	(*(char),*(char),int,int)->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
sigfilename	*(char)
,	O
gpg_prog	*(char)
,	O
uverbose	int
,	O
STDOUT_FILENO	int
)	O
;	O
if	O
(	O
cmd	int
[	O
1	int
]	O
==	O
NULL	O
)	O
{	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
retval	int
=	O
1	int
;	O
kill	(int,int)->(int)
(	O
pid	int
,	O
SIGTERM	int
)	O
;	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
goto	O
out	O
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
swlib_exec_filter	(*(*(struct(*(char),*(char),*(struct`),*(*`),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*`),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int))),int,*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
cmd	int
+	O
1	int
,	O
sbfd	array(int)
[	O
0	int
]	O
,	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
ret	int
=	O
swgpg_determine_signature_status	(*(char),int)->(int)
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
,	O
which_sig	int
)	O
;	O
retval	int
=	O
ret	int
;	O
E_DEBUG2	O
(	O
"signature status is %d"	*(char)
,	O
ret	int
)	O
;	O
E_DEBUG2	O
(	O
"status line: %s"	*(char)
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
swgpg_create	()->(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
swgpg_disentangle_status_lines	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
logger_fd	int
=	O
-	O
1	int
;	O
status_fd	int
=	O
-	O
1	int
;	O
if	O
(	O
retval	int
)	O
{	O
status_fd	int
=	O
STDERR_FILENO	int
;	O
logger_fd	int
=	O
STDERR_FILENO	int
;	O
}	O
else	O
{	O
if	O
(	O
uverbose	int
>=	O
SWC_VERBOSE_2	int
)	O
{	O
logger_fd	int
=	O
STDOUT_FILENO	int
;	O
}	O
if	O
(	O
uverbose	int
>=	O
SWC_VERBOSE_3	int
)	O
{	O
logger_fd	int
=	O
STDOUT_FILENO	int
;	O
status_fd	int
=	O
STDOUT_FILENO	int
;	O
}	O
}	O
E_DEBUG3	O
(	O
"show: status_fd=%d, logger_fd=%d"	*(char)
,	O
status_fd	int
,	O
logger_fd	int
)	O
;	O
swgpg_show	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int,int,int,int)->(int)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
0	int
,	O
-	O
1	int
,	O
status_fd	int
,	O
logger_fd	int
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
swgpg_delete	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
w	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
out	O
:	O
if	O
(	O
cmd	int
[	O
0	int
]	O
)	O
shcmd_close	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(void)
(	O
cmd	int
[	O
0	int
]	O
)	O
;	O
if	O
(	O
cmd	int
[	O
1	int
]	O
)	O
shcmd_close	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(void)
(	O
cmd	int
[	O
1	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
sbfd	array(int)
[	O
0	int
]	O
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
tmp	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
E_DEBUG2	O
(	O
"retval=%d"	*(char)
,	O
retval	int
)	O
;	O
return	O
retval	int
;	O
}	O
int	O
swgpg_run_gpg_verify	(*(struct(*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(*`,*`,int,int,int,char,int)))),int,*(char),int,*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
SWGPG_VALIDATE	struct(*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
int	O
signed_bytes_fd	int
,	O
char	O
*	O
signature	*(char)
,	O
int	O
uverbose	int
,	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
gpg_status	*(struct(*(char),*(char),int,int,int,char,int))
)	O
{	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
gpg_cmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
;	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmdvec	*(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
[	O
2	int
]	O
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
fifo	*(struct(*(char),*(char),int,int,int,char,int))
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
output	*(struct(*(char),*(char),int,int,int,char,int))
;	O
char	O
*	O
fifo_path	*(char)
;	O
int	O
ret	int
;	O
int	O
ret1	int
;	O
int	O
ret2	int
;	O
int	O
ret3	int
;	O
pid_t	int
pid	int
;	O
int	O
status	int
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
E_DEBUG2	O
(	O
"signed_bytes_fd = %d"	*(char)
,	O
signed_bytes_fd	int
)	O
;	O
fifo	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
32	int
)	O
;	O
if	O
(	O
gpg_status	*(struct(*(char),*(char),int,int,int,char,int))
==	O
NULL	O
)	O
output	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
32	int
)	O
;	O
else	O
output	*(struct(*(char),*(char),int,int,int,char,int))
=	O
gpg_status	*(struct(*(char),*(char),int,int,int,char,int))
;	O
cmdvec	*(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
[	O
0	int
]	O
=	O
NULL	O
;	O
cmdvec	*(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
[	O
1	int
]	O
=	O
NULL	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
fifo_path	*(char)
=	O
swgpg_create_fifo	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
fifo	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
if	O
(	O
fifo_path	*(char)
==	O
NULL	O
)	O
return	O
-	O
1	int
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
gpg_cmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
=	O
gpg_fifo_command	(*(char),*(char),int,int)->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
fifo_path	*(char)
,	O
swgpg	*(struct(*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(*(char),*(char),int,int,int,char,int))))
->	O
gpg_prognameM	*(char)
,	O
uverbose	int
,	O
STDOUT_FILENO	int
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
gpg_cmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
==	O
NULL	O
)	O
{	O
swgpg_remove_fifo	()->(int)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
cmdvec	*(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
[	O
0	int
]	O
=	O
gpg_cmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
pid	int
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
pid	int
==	O
0	int
)	O
{	O
int	O
ffd	int
;	O
close	*((*(void))->(int))
(	O
0	int
)	O
;	O
close	*((*(void))->(int))
(	O
1	int
)	O
;	O
ffd	int
=	O
open	(*(char),int)->(int)
(	O
fifo_path	*(char)
,	O
O_WRONLY	int
)	O
;	O
if	O
(	O
ffd	int
<	O
0	int
)	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
ret	int
=	O
uxfio_unix_safe_write	(int,*(void),int)->(long)
(	O
ffd	int
,	O
signature	*(char)
,	O
strlen	(*(char))->(long)
(	O
signature	*(char)
)	O
)	O
;	O
if	O
(	O
ret	int
!=	O
(	O
int	O
)	O
strlen	(*(char))->(long)
(	O
signature	*(char)
)	O
)	O
_exit	(int)->(void)
(	O
2	int
)	O
;	O
close	*((*(void))->(int))
(	O
ffd	int
)	O
;	O
_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
pid	int
<	O
0	int
)	O
{	O
return	O
-	O
1	int
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
ret1	int
=	O
swlib_exec_filter	(*(*(struct(*(char),*(char),*(struct`),*(*`),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*`),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int))),int,*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
cmdvec	*(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
,	O
signed_bytes_fd	int
,	O
output	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
ret1	int
==	O
SHCMD_UNSET_EXITVAL	int
)	O
{	O
E_DEBUG2	O
(	O
"swlib_exec_filter ret=%d"	*(char)
,	O
ret1	int
)	O
;	O
ret1	int
=	O
0	int
;	O
}	O
E_DEBUG2	O
(	O
"swlib_exec_filter ret1=%d"	*(char)
,	O
ret1	int
)	O
;	O
ret2	int
=	O
swgpg_determine_signature_status	(*(char),int)->(int)
(	O
strob_str	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
)	O
,	O
-	O
1	int
)	O
;	O
E_DEBUG2	O
(	O
"swgpg_determine_signature_status ret2=%d"	*(char)
,	O
ret2	int
)	O
;	O
ret3	int
=	O
waitpid	(int,*(int),int)->(int)
(	O
pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
if	O
(	O
ret3	int
<	O
0	int
)	O
{	O
;	O
}	O
else	O
if	O
(	O
ret3	int
==	O
0	int
)	O
{	O
ret3	int
=	O
2	int
;	O
}	O
else	O
{	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
ret3	int
=	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
E_DEBUG2	O
(	O
"exit value = %d"	*(char)
,	O
ret3	int
)	O
;	O
}	O
else	O
{	O
ret3	int
=	O
1	int
;	O
}	O
}	O
swgpg_remove_fifo	()->(int)
(	O
)	O
;	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
fifo	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
if	O
(	O
gpg_status	*(struct(*(char),*(char),int,int,int,char,int))
==	O
NULL	O
)	O
strob_close	(*(struct(*(char),*(char),int,int,int,char,int)))->(int)
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
E_DEBUG2	O
(	O
"RESULT ret1 = %d"	*(char)
,	O
ret1	int
)	O
;	O
E_DEBUG2	O
(	O
"RESULT ret2 = %d"	*(char)
,	O
ret2	int
)	O
;	O
E_DEBUG2	O
(	O
"RESULT ret3 = %d"	*(char)
,	O
ret3	int
)	O
;	O
if	O
(	O
ret1	int
==	O
0	int
&&	O
ret2	int
==	O
0	int
&&	O
ret3	int
==	O
0	int
)	O
{	O
E_DEBUG	O
(	O
"RETURNING returning 0"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
E_DEBUG	O
(	O
"RETURNING returning 1"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
}	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
swgpg_get_package_signature_command	(*(char),*(char),*(char),*(char))->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
char	O
*	O
signer	*(char)
,	O
char	O
*	O
gpg_name	*(char)
,	O
char	O
*	O
gpg_path	*(char)
,	O
char	O
*	O
passphrase_fd	*(char)
)	O
{	O
static	O
char	O
*	O
env	array(*(char))
[	O
10	int
]	O
;	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
;	O
char	O
*	O
envpath	*(char)
;	O
char	O
*	O
signerpath	*(char)
;	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
=	O
shcmd_open	()->(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))
(	O
)	O
;	O
env	array(*(char))
[	O
0	int
]	O
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
envpath	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PATH"	*(char)
)	O
;	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
signer	*(char)
,	O
"GPG"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
signer	*(char)
,	O
"GPG2"	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
signer	*(char)
,	O
"GPG2"	*(char)
)	O
==	O
0	int
)	O
{	O
signerpath	*(char)
=	O
shcmd_find_in_path	(*(char),*(char))->(*(char))
(	O
envpath	*(char)
,	O
SWGPG_GPG2_BIN	*(char)
)	O
;	O
}	O
else	O
{	O
signerpath	*(char)
=	O
shcmd_find_in_path	(*(char),*(char))->(*(char))
(	O
envpath	*(char)
,	O
SWGPG_GPG_BIN	*(char)
)	O
;	O
}	O
if	O
(	O
signerpath	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
signerpath	*(char)
)	O
;	O
if	O
(	O
gpg_name	*(char)
&&	O
strlen	(*(char))->(long)
(	O
gpg_name	*(char)
)	O
)	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-u"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
gpg_name	*(char)
)	O
;	O
}	O
if	O
(	O
gpg_path	*(char)
&&	O
strlen	(*(char))->(long)
(	O
gpg_path	*(char)
)	O
)	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"--homedir"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
gpg_path	*(char)
)	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"--no-tty"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"--no-secmem-warning"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"--armor"	*(char)
)	O
;	O
if	O
(	O
passphrase_fd	*(char)
!=	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_AGENT	*(char)
)	O
==	O
0	int
)	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"--use-agent"	*(char)
)	O
;	O
}	O
else	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"--passphrase-fd"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"3"	*(char)
)	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-sb"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-o"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
signer	*(char)
,	O
"PGP2.6"	*(char)
)	O
==	O
0	int
)	O
{	O
make_pgp_env	(array(*(char)),int)->(int)
(	O
env	array(*(char))
,	O
sizeof	O
(	O
env	array(*(char))
)	O
/	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
shcmd_set_envp	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(*(char)))->(void)
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
env	array(*(char))
)	O
;	O
signerpath	*(char)
=	O
shcmd_find_in_path	(*(char),*(char))->(*(char))
(	O
envpath	*(char)
,	O
SWGPG_PGP26_BIN	*(char)
)	O
;	O
if	O
(	O
signerpath	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
signerpath	*(char)
)	O
;	O
if	O
(	O
gpg_name	*(char)
&&	O
strlen	(*(char))->(long)
(	O
gpg_name	*(char)
)	O
)	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-u"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
gpg_name	*(char)
)	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"+armor=on"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-sb"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-o"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
signer	*(char)
,	O
"PGP5"	*(char)
)	O
==	O
0	int
)	O
{	O
make_pgp_env	(array(*(char)),int)->(int)
(	O
env	array(*(char))
,	O
sizeof	O
(	O
env	array(*(char))
)	O
/	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
shcmd_set_envp	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(*(char)))->(void)
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
env	array(*(char))
)	O
;	O
signerpath	*(char)
=	O
shcmd_find_in_path	(*(char),*(char))->(*(char))
(	O
envpath	*(char)
,	O
SWGPG_PGP5_BIN	*(char)
)	O
;	O
if	O
(	O
signerpath	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
signerpath	*(char)
)	O
;	O
if	O
(	O
gpg_name	*(char)
&&	O
strlen	(*(char))->(long)
(	O
gpg_name	*(char)
)	O
)	O
{	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-u"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
gpg_name	*(char)
)	O
;	O
}	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-ab"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-o"	*(char)
)	O
;	O
shcmd_add_arg	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(*(*(char)))
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
"-"	*(char)
)	O
;	O
}	O
else	O
{	O
shcmd_close	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(void)
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
)	O
;	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
=	O
NULL	O
;	O
}	O
return	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
;	O
}	O
char	O
*	O
swgpg_get_package_signature	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(int),*(char),*(char),int,int,*(char))->(*(char))
(	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
,	O
int	O
*	O
statusp	*(int)
,	O
char	O
*	O
wopt_passphrase_fd	*(char)
,	O
char	O
*	O
passfile	*(char)
,	O
int	O
pkg_fd	int
,	O
int	O
do_dummy_sign	int
,	O
char	O
*	O
g_passphrase	*(char)
)	O
{	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
cmd	int
[	O
2	int
]	O
;	O
int	O
verboseG	int
=	O
1	int
;	O
char	O
*	O
sig	*(char)
;	O
int	O
does_use_agent	int
;	O
int	O
ret	int
;	O
int	O
atoiret	int
;	O
int	O
opt_passphrase_fd	int
;	O
pid_t	int
pid	int
[	O
6	int
]	O
;	O
int	O
status	int
[	O
6	int
]	O
;	O
int	O
passphrase	array(int)
[	O
2	int
]	O
;	O
int	O
input	array(int)
[	O
2	int
]	O
;	O
int	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
2	int
]	O
;	O
int	O
filter	array(int)
[	O
2	int
]	O
;	O
int	O
sigfd	int
;	O
char	O
*	O
fdmem	*(char)
;	O
char	O
nullbyte	array(char)
[	O
2	int
]	O
;	O
*	O
statusp	*(int)
=	O
255	int
;	O
cmd	int
[	O
1	int
]	O
=	O
(	O
SHCMD	struct(*(char),*(char),*(struct(*(*(char)),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int)
*	O
)	O
(	O
NULL	O
)	O
;	O
nullbyte	array(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
do_dummy_sign	int
)	O
{	O
sig	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
ARMORED_SIGLEN	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
sig	*(char)
,	O
'\0'	O
,	O
ARMORED_SIGLEN	int
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
sig	*(char)
,	O
"-----BEGIN DUMMY SIGNATURE-----\n"	*(char)
"Version: swpackage (swbis) "	*(char)
SWPACKAGE_VERSION	*(char)
"\n"	*(char)
"dummy signature made using the --dummy-sign option of\n"	*(char)
"the swpackage(8) utility.  Not intended for verification.\n"	*(char)
"-----END DUMMY SIGNATURE-----\n"	*(char)
)	O
;	O
return	O
sig	*(char)
;	O
}	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWPACKAGE_VERBOSE_V1	O
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"Generating package signature ....\n"	*(char)
)	O
;	O
if	O
(	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
==	O
NULL	O
)	O
{	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
}	O
else	O
{	O
cmd	int
[	O
0	int
]	O
=	O
sigcmd	*(struct(*(char),*(char),*(struct(*(*`),int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*(void))->(int)),*((int,int,*(void))->(int)),*(void),int,int,int,int))
;	O
}	O
if	O
(	O
pipe	(array(int))->(int)
(	O
input	array(int)
)	O
)	O
exit	(int)->(void)
(	O
4	int
)	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
exit	(int)->(void)
(	O
4	int
)	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
passphrase	array(int)
)	O
)	O
exit	(int)->(void)
(	O
4	int
)	O
;	O
pipe	(array(int))->(int)
(	O
filter	array(int)
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
does_use_agent	int
=	O
get_does_use_gpg_agent	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(int)
(	O
cmd	int
[	O
0	int
]	O
)	O
;	O
pid	int
[	O
0	int
]	O
=	O
swfork	O
(	O
(	O
sigset_t	struct(array(long))
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
pid	int
[	O
0	int
]	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
5	int
)	O
;	O
if	O
(	O
pid	int
[	O
0	int
]	O
==	O
0	int
)	O
{	O
close_passfd	()->(void)
(	O
)	O
;	O
close	*((*(void))->(int))
(	O
filter	array(int)
[	O
1	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
0	int
]	O
)	O
;	O
shcmd_set_srcfd	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),int)->(void)
(	O
cmd	int
[	O
0	int
]	O
,	O
filter	array(int)
[	O
0	int
]	O
)	O
;	O
shcmd_set_dstfd	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),int)->(void)
(	O
cmd	int
[	O
0	int
]	O
,	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
1	int
]	O
)	O
;	O
shcmd_set_errfile	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)),*(char))->(void)
(	O
cmd	int
[	O
0	int
]	O
,	O
"/dev/null"	*(char)
)	O
;	O
shcmd_apply_redirection	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(int)
(	O
cmd	int
[	O
0	int
]	O
)	O
;	O
if	O
(	O
does_use_agent	int
==	O
0	int
)	O
dup2	(int,int)->(int)
(	O
passphrase	array(int)
[	O
0	int
]	O
,	O
3	int
)	O
;	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
0	int
]	O
)	O
;	O
if	O
(	O
does_use_agent	int
==	O
0	int
)	O
swgp_close_all_fd	(int)->(int)
(	O
4	int
)	O
;	O
else	O
swgp_close_all_fd	(int)->(int)
(	O
3	int
)	O
;	O
shcmd_unix_exec	(*(struct(*(char),*(char),*(struct(*`,int,int,long,int)),*(*(char)),int,int,int,int,int,*(char),*(char),*(char),int,int,int,int,int,*(*(char)),array(char),array(char),int,array(int),*((*`)->(int)),*((int,int,*`)->(int)),*(void),int,int,int,int)))->(int)
(	O
cmd	int
[	O
0	int
]	O
)	O
;	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"%s not run.\n"	*(char)
,	O
cmd	int
[	O
0	int
]	O
->	O
argv_	*(*(char))
[	O
0	int
]	O
)	O
;	O
_exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
1	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
filter	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
0	int
]	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
pid	int
[	O
1	int
]	O
=	O
swfork	O
(	O
(	O
sigset_t	struct(array(long))
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
pid	int
[	O
1	int
]	O
<	O
0	int
)	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
pid	int
[	O
1	int
]	O
==	O
0	int
)	O
{	O
close	*((*(void))->(int))
(	O
input	array(int)
[	O
1	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
does_use_agent	int
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
"-1"	*(char)
)	O
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_ENV	*(char)
)	O
!=	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_AGENT	*(char)
)	O
!=	O
0	int
&&	O
passfile	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
{	O
char	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
[	O
SWGPG_PASSPHRASE_LENGTH	int
]	O
;	O
char	O
*	O
pass	*(char)
;	O
pass	*(char)
=	O
fm_getpassphrase	(*(char),*(char),int)->(*(char))
(	O
"Enter Password: "	*(char)
,	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
sizeof	O
(	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
if	O
(	O
pass	*(char)
)	O
{	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
[	O
sizeof	O
(	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
-	O
1	int
]	O
=	O
'\0'	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
passphrase	array(int)
[	O
1	int
]	O
,	O
pass	*(char)
,	O
strlen	(*(char))->(long)
(	O
pass	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
write	*((*(void),*(char),long)->(long))
(	O
passphrase	array(int)
[	O
1	int
]	O
,	O
"\n\n"	*(char)
,	O
2	int
)	O
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
'\x00'	O
,	O
sizeof	O
(	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
'\xff'	O
,	O
sizeof	O
(	O
pbuf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
if	O
(	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"swpackage: close: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
does_use_agent	int
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_AGENT	*(char)
)	O
!=	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_ENV	*(char)
)	O
!=	O
0	int
)	O
{	O
int	O
did_open	int
=	O
0	int
;	O
int	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
[	O
512	int
]	O
;	O
if	O
(	O
passfile	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
passfile	*(char)
,	O
"-"	*(char)
)	O
)	O
{	O
opt_passphrase_fd	int
=	O
open	(*(char),int)->(int)
(	O
passfile	*(char)
,	O
O_RDONLY	int
,	O
0	int
)	O
;	O
if	O
(	O
opt_passphrase_fd	int
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"passphrase file not found\n"	*(char)
)	O
;	O
}	O
did_open	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
passfile	*(char)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
passfile	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"warning: unsafe use of stdin\n"	*(char)
"warning: use --passphrase-fd=0 instead\n"	*(char)
)	O
;	O
opt_passphrase_fd	int
=	O
STDIN_FILENO	int
;	O
}	O
else	O
{	O
opt_passphrase_fd	int
=	O
swlib_atoi	(*(char),*(int))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
&	O
atoiret	int
)	O
;	O
if	O
(	O
atoiret	int
)	O
return	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
opt_passphrase_fd	int
>=	O
0	int
)	O
{	O
E_DEBUG2	O
(	O
"reading opt_passphrase_fd=%d"	*(char)
,	O
opt_passphrase_fd	int
)	O
;	O
ret	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
opt_passphrase_fd	int
,	O
(	O
void	O
*	O
)	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
sizeof	O
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
-	O
1	int
)	O
;	O
E_DEBUG2	O
(	O
"read of passphrase ret=%d"	*(char)
,	O
ret	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
||	O
ret	int
>=	O
511	int
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
'\0'	O
,	O
sizeof	O
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
'\xff'	O
,	O
sizeof	O
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"read (loc=p): %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
close	*((*(void))->(int))
(	O
opt_passphrase_fd	int
)	O
;	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
;	O
_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
did_open	int
)	O
close	*((*(void))->(int))
(	O
opt_passphrase_fd	int
)	O
;	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
[	O
ret	int
]	O
=	O
'\0'	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
passphrase	array(int)
[	O
1	int
]	O
,	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
ret	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
'\0'	O
,	O
sizeof	O
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
,	O
'\xff'	O
,	O
sizeof	O
(	O
buf	*(struct(*(char),*(char),int,int,int,char,int))
)	O
)	O
;	O
}	O
if	O
(	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"close error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
does_use_agent	int
==	O
1	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_AGENT	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"close error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
does_use_agent	int
==	O
0	int
&&	O
strcmp	(*(char),*(char))->(int)
(	O
wopt_passphrase_fd	*(char)
,	O
SWGPG_SWP_PASS_ENV	*(char)
)	O
==	O
0	int
&&	O
g_passphrase	*(char)
)	O
{	O
write	*((*(void),*(char),long)->(long))
(	O
passphrase	array(int)
[	O
1	int
]	O
,	O
g_passphrase	*(char)
,	O
strlen	(*(char))->(long)
(	O
g_passphrase	*(char)
)	O
)	O
;	O
write	*((*(void),*(char),long)->(long))
(	O
passphrase	array(int)
[	O
1	int
]	O
,	O
"\n"	*(char)
,	O
1	int
)	O
;	O
if	O
(	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"close error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
else	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"internal error get_package_signature\n"	*(char)
)	O
;	O
if	O
(	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
<	O
0	int
)	O
{	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWC_VERBOSE_1	int
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"close error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
close_passfd	()->(void)
(	O
)	O
;	O
close	*((*(void))->(int))
(	O
passphrase	array(int)
[	O
1	int
]	O
)	O
;	O
pid	int
[	O
2	int
]	O
=	O
swfork	O
(	O
(	O
sigset_t	struct(array(long))
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
pid	int
[	O
2	int
]	O
<	O
0	int
)	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
pid	int
[	O
2	int
]	O
==	O
0	int
)	O
{	O
close_passfd	()->(void)
(	O
)	O
;	O
close	*((*(void))->(int))
(	O
input	array(int)
[	O
1	int
]	O
)	O
;	O
swlib_pipe_pump	(int,int)->(int)
(	O
filter	array(int)
[	O
1	int
]	O
,	O
input	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
input	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
filter	array(int)
[	O
1	int
]	O
)	O
;	O
_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
input	array(int)
[	O
0	int
]	O
)	O
;	O
close	*((*(void))->(int))
(	O
filter	array(int)
[	O
1	int
]	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
pid	int
[	O
3	int
]	O
=	O
swfork	O
(	O
(	O
sigset_t	struct(array(long))
*	O
)	O
(	O
NULL	O
)	O
)	O
;	O
if	O
(	O
pid	int
[	O
3	int
]	O
<	O
0	int
)	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
if	O
(	O
pid	int
[	O
3	int
]	O
==	O
0	int
)	O
{	O
int	O
ofd1	int
;	O
close_passfd	()->(void)
(	O
)	O
;	O
close	*((*(void))->(int))
(	O
input	array(int)
[	O
0	int
]	O
)	O
;	O
ofd1	int
=	O
uxfio_opendup	(int,int)->(int)
(	O
input	array(int)
[	O
1	int
]	O
,	O
UXFIO_BUFTYPE_NOBUF	int
)	O
;	O
uxfio_fcntl	(int,int,int)->(int)
(	O
ofd1	int
,	O
UXFIO_F_SET_OUTPUT_BLOCK_SIZE	O
,	O
PIPE_BUF	int
)	O
;	O
swlib_pipe_pump	(int,int)->(int)
(	O
ofd1	int
,	O
pkg_fd	int
)	O
;	O
uxfio_close	(int)->(int)
(	O
ofd1	int
)	O
;	O
close	*((*(void))->(int))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
0	int
]	O
)	O
;	O
_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
input	array(int)
[	O
1	int
]	O
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
sigfd	int
=	O
swlib_open_memfd	()->(int)
(	O
)	O
;	O
ret	int
=	O
swlib_pump_amount	(int,int,long)->(long)
(	O
sigfd	int
,	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
0	int
]	O
,	O
1024	int
)	O
;	O
close	*((*(void))->(int))
(	O
output	*(struct(*(char),*(char),int,int,int,char,int))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
||	O
ret	int
>	O
1000	int
)	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
uxfio_write	(int,*(void),long)->(long)
(	O
sigfd	int
,	O
(	O
void	O
*	O
)	O
nullbyte	array(char)
,	O
1	int
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
swlib_wait_on_all_pids	(*(int),int,*(int),int,int)->(int)
(	O
pid	int
,	O
4	int
,	O
status	int
,	O
WNOHANG	int
,	O
verboseG	int
-	O
2	int
)	O
<	O
0	int
)	O
{	O
return	O
NULL	O
;	O
}	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
if	O
(	O
pid	int
[	O
0	int
]	O
<	O
0	int
)	O
{	O
ret	int
=	O
WEXITSTATUS	O
(	O
status	int
[	O
0	int
]	O
)	O
;	O
}	O
else	O
{	O
ret	int
=	O
100	int
;	O
}	O
*	O
statusp	*(int)
=	O
ret	int
;	O
if	O
(	O
ret	int
)	O
return	O
(	O
char	O
*	O
)	O
NULL	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
uxfio_get_dynamic_buffer	(int,*(*(char)),*(int),*(int))->(int)
(	O
sigfd	int
,	O
&	O
fdmem	*(char)
,	O
(	O
int	O
*	O
)	O
NULL	O
,	O
(	O
int	O
*	O
)	O
NULL	O
)	O
;	O
sig	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fdmem	*(char)
)	O
;	O
uxfio_close	(int)->(int)
(	O
sigfd	int
)	O
;	O
swlib_doif_writef	O
(	O
verboseG	int
,	O
SWPACKAGE_VERBOSE_V1	O
,	O
NULL	O
,	O
get_stderr_fd	()->(int)
(	O
)	O
,	O
"Generating package signature .... Done.\n"	*(char)
)	O
;	O
E_DEBUG	O
(	O
""	*(char)
)	O
;	O
return	O
sig	*(char)
;	O
}	O
