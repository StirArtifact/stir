const	O
struct	O
nettle_cipher	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
*	O
const	O
_nettle_ciphers	array(*(struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))))
[	O
]	O
=	O
{	O
&	O
nettle_aes128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_aes192	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_aes256	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_camellia128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_camellia192	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_camellia256	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_cast128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_serpent128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_serpent192	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_serpent256	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_twofish128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_twofish192	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_twofish256	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_arctwo40	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_arctwo64	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_arctwo128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
&	O
nettle_arctwo_gutmann128	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
,	O
NULL	O
}	O
;	O
const	O
struct	O
nettle_cipher	struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))
*	O
const	O
*	O
nettle_get_ciphers	()->(*(*(struct(*(char),int,int,int,*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,long,*`,*`)->(void)),*((*`,long,*`,*`)->(void))))))
(	O
void	O
)	O
{	O
return	O
_nettle_ciphers	array(*(struct(*(char),int,int,int,*((*(void),*(char))->(void)),*((*(void),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)),*((*(void),long,*(char),*(char))->(void)))))
;	O
}	O
