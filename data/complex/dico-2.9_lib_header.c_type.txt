struct	O
hdr_buf	struct(*(char),long,long)
{	O
char	O
*	O
base	*(void)
;	O
size_t	long
size	long
;	O
size_t	long
level	int
;	O
}	O
;	O
static	O
int	O
hdr_buf_append	(*(struct(*(char),long,long)),*(char),long)->(int)
(	O
struct	O
hdr_buf	struct(*(char),long,long)
*	O
buf	*(void)
,	O
const	O
char	O
*	O
str	*(struct)
,	O
size_t	long
len	int
)	O
{	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
buf	*(void)
->	O
size	long
==	O
0	int
)	O
{	O
size_t	long
size	long
=	O
HDR_BUF_SIZE	int
*	O
(	O
(	O
len	int
+	O
HDR_BUF_SIZE	int
-	O
1	int
)	O
/	O
HDR_BUF_SIZE	int
)	O
;	O
buf	*(void)
->	O
base	*(void)
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
buf	*(void)
->	O
base	*(void)
)	O
return	O
1	int
;	O
buf	*(void)
->	O
size	long
=	O
size	long
;	O
}	O
else	O
if	O
(	O
buf	*(void)
->	O
level	int
+	O
len	int
>	O
buf	*(void)
->	O
size	long
)	O
{	O
char	O
*	O
p	*(char)
;	O
size_t	long
diff	long
=	O
buf	*(void)
->	O
level	int
+	O
len	int
-	O
buf	*(void)
->	O
size	long
;	O
size_t	long
size	long
=	O
buf	*(void)
->	O
size	long
*	O
(	O
(	O
diff	long
+	O
buf	*(void)
->	O
size	long
-	O
1	int
)	O
/	O
buf	*(void)
->	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
size	long
<	O
buf	*(void)
->	O
size	long
)	O
{	O
errno	O
=	O
ENOMEM	int
;	O
return	O
1	int
;	O
}	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	*(void)
->	O
base	*(void)
,	O
size	long
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
return	O
1	int
;	O
buf	*(void)
->	O
base	*(void)
=	O
p	*(char)
;	O
buf	*(void)
->	O
size	long
=	O
size	long
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(void)
->	O
base	*(void)
+	O
buf	*(void)
->	O
level	int
,	O
str	*(struct)
,	O
len	int
)	O
;	O
buf	*(void)
->	O
level	int
+=	O
len	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
collect_line	(*(*(char)),*(struct),*(struct(*(char),long,long)))->(int)
(	O
const	O
char	O
*	O
*	O
ptext	*(*(char))
,	O
dico_assoc_list_t	*(struct)
asc	*(struct)
,	O
struct	O
hdr_buf	struct(*(char),long,long)
*	O
hbuf	*(struct(*(char),long,long))
)	O
{	O
const	O
char	O
*	O
text	*(char)
=	O
*	O
ptext	*(*(char))
;	O
char	O
c	int
,	O
*	O
p	*(char)
;	O
size_t	long
n	long
;	O
hdr_buf_clear	O
(	O
hbuf	*(struct(*(char),long,long))
)	O
;	O
do	O
{	O
if	O
(	O
ISWS	O
(	O
*	O
text	*(char)
)	O
)	O
{	O
while	O
(	O
*	O
text	*(char)
&&	O
ISWS	O
(	O
*	O
text	*(char)
)	O
)	O
text	*(char)
++	O
;	O
text	*(char)
--	O
;	O
}	O
n	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
text	*(char)
,	O
"\n"	*(char)
)	O
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
text	*(char)
+=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
break	O
;	O
}	O
if	O
(	O
hdr_buf_append	(*(struct(*(char),long,long)),*(char),long)->(int)
(	O
hbuf	*(struct(*(char),long,long))
,	O
text	*(char)
,	O
n	long
)	O
)	O
return	O
1	int
;	O
text	*(char)
+=	O
n	long
;	O
if	O
(	O
!	O
*	O
text	*(char)
)	O
break	O
;	O
text	*(char)
++	O
;	O
}	O
while	O
(	O
ISWS	O
(	O
*	O
text	*(char)
)	O
)	O
;	O
c	int
=	O
0	int
;	O
if	O
(	O
hdr_buf_append	(*(struct(*(char),long,long)),*(char),long)->(int)
(	O
hbuf	*(struct(*(char),long,long))
,	O
&	O
c	int
,	O
1	int
)	O
)	O
return	O
1	int
;	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
hbuf	*(struct(*(char),long,long))
->	O
base	*(void)
,	O
':'	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
1	int
;	O
}	O
*	O
p	*(char)
++	O
=	O
0	int
;	O
while	O
(	O
*	O
p	*(char)
&&	O
ISWS	O
(	O
*	O
p	*(char)
)	O
)	O
p	*(char)
++	O
;	O
if	O
(	O
dico_assoc_append	(*(struct),*(char),*(char))->(int)
(	O
asc	*(struct)
,	O
hbuf	*(struct(*(char),long,long))
->	O
base	*(void)
,	O
p	*(char)
)	O
)	O
return	O
1	int
;	O
*	O
ptext	*(*(char))
=	O
text	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
dico_header_parse	(*(*(struct)),*(char))->(int)
(	O
dico_assoc_list_t	*(struct)
*	O
pasc	*(*(struct))
,	O
const	O
char	O
*	O
text	*(char)
)	O
{	O
int	O
rc	int
=	O
0	int
;	O
struct	O
hdr_buf	struct(*(char),long,long)
hbuf	*(struct(*(char),long,long))
=	O
HDR_BUF_INIT	O
;	O
dico_assoc_list_t	*(struct)
asc	*(struct)
=	O
dico_assoc_create	(int)->(*(struct))
(	O
DICO_ASSOC_CI	int
|	O
DICO_ASSOC_MULT	int
)	O
;	O
if	O
(	O
!	O
asc	*(struct)
)	O
return	O
1	int
;	O
if	O
(	O
text	*(char)
)	O
{	O
while	O
(	O
*	O
text	*(char)
&&	O
*	O
text	*(char)
!=	O
'\n'	O
&&	O
(	O
rc	int
=	O
collect_line	(*(*(char)),*(struct),*(struct(*(char),long,long)))->(int)
(	O
&	O
text	*(char)
,	O
asc	*(struct)
,	O
&	O
hbuf	*(struct(*(char),long,long))
)	O
)	O
==	O
0	int
)	O
;	O
hdr_buf_free	O
(	O
&	O
hbuf	*(struct(*(char),long,long))
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
int	O
ec	int
=	O
errno	O
;	O
dico_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
asc	*(struct)
)	O
;	O
errno	O
=	O
ec	int
;	O
}	O
else	O
*	O
pasc	*(*(struct))
=	O
asc	*(struct)
;	O
return	O
rc	int
;	O
}	O
