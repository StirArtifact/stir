extern	O
void	O
showPropertiesDialog	()->(void)
(	O
)	O
;	O
char	O
*	O
input_str	*(char)
;	O
static	O
sig_atomic_t	int
end	int
=	O
0	int
;	O
void	O
exit_gracefully	()->(void)
(	O
)	O
{	O
restoreTerminal	()->(void)
(	O
)	O
;	O
write_config_file	()->(void)
(	O
)	O
;	O
fcloseall	()->(int)
(	O
)	O
;	O
showCursor	()->(void)
(	O
)	O
;	O
setScreenColors	(int,int)->(void)
(	O
WHITE	int
,	O
BGDEFAULT	int
)	O
;	O
clearScreen	()->(void)
(	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[0m"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
void	O
sighandler	(int)->(void)
(	O
int	O
signo	int
)	O
{	O
if	O
(	O
signo	int
==	O
2	int
)	O
{	O
copyMarked	()->(void)
(	O
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
NO	int
)	O
;	O
}	O
else	O
if	O
(	O
signo	int
==	O
SIGTSTP	int
)	O
{	O
int	O
i	int
=	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Are you sure you want to exit?"	*(char)
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
i	int
==	O
YES	int
)	O
{	O
exit_gracefully	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
refreshWindows	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
end	int
=	O
1	int
;	O
}	O
}	O
struct	O
termios	struct(int,int,int,int,char,array(char),int,int)
oldtio	struct(int,int,int,int,char,array(char),int,int)
,	O
curtio	struct(int,int,int,int,char,array(char),int,int)
;	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
void	O
print_dir_highlight	(int)->(void)
(	O
int	O
selectedDir	int
)	O
{	O
int	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
int	O
j	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%s"	*(char)
,	O
selectedDir	int
+	O
4	int
,	O
3	int
,	O
dirHighLight	*(char)
)	O
;	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
namelen	int
>=	O
MAX_DIR_NAME_LEN	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%c"	*(char)
,	O
selectedDir	int
+	O
4	int
,	O
3	int
,	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
MAX_DIR_NAME_LEN	int
-	O
3	int
;	O
j	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
[	O
j	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
".."	*(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%c%s"	*(char)
,	O
selectedDir	int
+	O
4	int
,	O
3	int
,	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
,	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
;	O
}	O
}	O
void	O
print_file_highlight	(int)->(void)
(	O
int	O
selectedFile	int
)	O
{	O
int	O
pos	int
=	O
firstVisFile	int
+	O
selectedFile	int
;	O
int	O
j	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%s"	*(char)
,	O
selectedFile	int
+	O
4	int
,	O
(	O
SCREEN_W	int
/	O
2	int
)	O
+	O
1	int
,	O
fileHighLight	*(char)
)	O
;	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
namelen	int
>=	O
MAX_DIR_NAME_LEN	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%c"	*(char)
,	O
selectedFile	int
+	O
4	int
,	O
(	O
SCREEN_W	int
/	O
2	int
)	O
+	O
1	int
,	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
MAX_DIR_NAME_LEN	int
-	O
3	int
;	O
j	int
++	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
[	O
j	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
".."	*(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%c%s"	*(char)
,	O
selectedFile	int
+	O
4	int
,	O
(	O
SCREEN_W	int
/	O
2	int
)	O
+	O
1	int
,	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
,	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
;	O
}	O
}	O
void	O
showErrorMsgBox	(*(char),*(char))->(void)
(	O
char	O
*	O
msg	*(char)
,	O
char	O
*	O
arg	*(char)
)	O
{	O
int	O
len1	int
=	O
strlen	(*(char))->(long)
(	O
msg	*(char)
)	O
;	O
int	O
len2	int
=	O
strlen	(*(char))->(long)
(	O
arg	*(char)
)	O
;	O
char	O
tmp	array(char)
[	O
len1	int
+	O
len2	int
+	O
1	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
tmp	array(char)
,	O
msg	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
tmp	array(char)
,	O
arg	*(char)
)	O
;	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
tmp	array(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
void	O
shiftDirsUp	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
)	O
;	O
for	O
(	O
;	O
pos	int
<	O
totalDirs	int
-	O
1	int
;	O
pos	int
++	O
)	O
{	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
=	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
+	O
1	int
]	O
;	O
}	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
=	O
NULL	O
;	O
totalDirs	int
--	O
;	O
}	O
void	O
shiftFilesUp	(int)->(void)
(	O
int	O
pos	int
)	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
)	O
;	O
for	O
(	O
;	O
pos	int
<	O
totalFiles	int
-	O
1	int
;	O
pos	int
++	O
)	O
{	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
=	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
+	O
1	int
]	O
;	O
}	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
=	O
NULL	O
;	O
totalFiles	int
--	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
parse_args	(int,*(*(char)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
cwd	short
=	O
getcwd	(*(char),long)->(*(char))
(	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
!	O
cwd	short
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Error: unable to detect current working directory\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
cwdlen	int
=	O
strlen	(*(char))->(long)
(	O
cwd	short
)	O
;	O
init	()->(void)
(	O
)	O
;	O
read_config_file	()->(int)
(	O
)	O
;	O
clearScreen	()->(void)
(	O
)	O
;	O
hideCursor	()->(void)
(	O
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
YES	int
)	O
;	O
drawMenuBar	(int,int,int)->(void)
(	O
2	int
,	O
2	int
,	O
SCREEN_W	int
-	O
2	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
3	int
,	O
(	O
int	O
)	O
(	O
SCREEN_W	int
/	O
2	int
)	O
,	O
SCREEN_H	int
-	O
5	int
,	O
SCREEN_W	int
-	O
1	int
,	O
" File view "	*(char)
,	O
YES	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
SCREEN_H	int
-	O
4	int
,	O
2	int
,	O
SCREEN_H	int
-	O
1	int
,	O
SCREEN_W	int
-	O
1	int
,	O
" Quick functions "	*(char)
,	O
YES	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
3	int
,	O
2	int
,	O
SCREEN_H	int
-	O
5	int
,	O
(	O
int	O
)	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
1	int
,	O
" Directory view "	*(char)
,	O
YES	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
NO	int
)	O
;	O
refreshBottomView	()->(void)
(	O
)	O
;	O
scanDir	(*(char))->(void)
(	O
"."	*(char)
)	O
;	O
int	O
ch	*(char)
,	O
i	int
;	O
while	O
(	O
!	O
end	int
)	O
{	O
ch	*(char)
=	O
getKey	()->(int)
(	O
)	O
;	O
switch	O
(	O
ch	*(char)
)	O
{	O
case	O
(	O
DEL_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
break	O
;	O
do_del	O
:	O
if	O
(	O
numStarred	int
==	O
0	int
)	O
{	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
int	O
j	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
if	O
(	O
j	int
<	O
2	int
)	O
break	O
;	O
int	O
k	int
=	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Are you sure you want to delete\n"	*(char)
"this directory and all its subdirectories?"	*(char)
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
k	int
==	O
YES	int
)	O
{	O
char	O
*	O
logfilename	*(char)
=	O
tmpnam	(*(char))->(*(char))
(	O
NULL	O
)	O
;	O
FILE	struct
*	O
logfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
logfilename	*(char)
,	O
"wb"	*(char)
)	O
;	O
deleteThisDir	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
->	O
name	*(char)
,	O
0	int
,	O
logfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
purgeLogFile	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
logfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
logfilename	*(char)
)	O
;	O
shiftDirsUp	(int)->(void)
(	O
j	int
)	O
;	O
if	O
(	O
j	int
==	O
totalDirs	int
)	O
{	O
if	O
(	O
totalDirs	int
<=	O
numVisDirs	int
)	O
selectedDir	int
--	O
;	O
else	O
firstVisDir	int
--	O
;	O
}	O
}	O
}	O
else	O
{	O
int	O
j	int
=	O
firstVisFile	int
+	O
selectedFile	int
;	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
->	O
type	char
==	O
'%'	O
)	O
break	O
;	O
int	O
k	int
=	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Are you sure you want to delete this file?"	*(char)
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
k	int
==	O
YES	int
)	O
{	O
remove	(*(char))->(int)
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
->	O
name	*(char)
)	O
;	O
shiftFilesUp	(int)->(void)
(	O
j	int
)	O
;	O
if	O
(	O
j	int
==	O
totalFiles	int
)	O
{	O
if	O
(	O
totalFiles	int
<=	O
numVisFiles	int
)	O
selectedFile	int
--	O
;	O
else	O
firstVisFile	int
--	O
;	O
}	O
}	O
}	O
refreshWindows	()->(void)
(	O
)	O
;	O
refreshBottomView	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
deleteMarked	()->(void)
(	O
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
}	O
break	O
;	O
case	O
(	O
UP_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_up	O
:	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
selectedDir	int
--	O
;	O
if	O
(	O
selectedDir	int
<	O
0	int
)	O
{	O
selectedDir	int
=	O
0	int
;	O
if	O
(	O
firstVisDir	int
>	O
0	int
)	O
{	O
firstVisDir	int
--	O
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
setScreenColors	(int,int)->(void)
(	O
FILE_DIR_COLOR	array(char)
[	O
DIRCOLOR	O
(	O
firstVisDir	int
+	O
selectedDir	int
+	O
1	int
)	O
]	O
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
print_dir_highlight	(int)->(void)
(	O
selectedDir	int
+	O
1	int
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
print_dir_highlight	(int)->(void)
(	O
selectedDir	int
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
0	int
]	O
->	O
type	char
==	O
'%'	O
)	O
break	O
;	O
selectedFile	int
--	O
;	O
if	O
(	O
selectedFile	int
<	O
0	int
)	O
{	O
selectedFile	int
=	O
0	int
;	O
if	O
(	O
firstVisFile	int
>	O
0	int
)	O
{	O
firstVisFile	int
--	O
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
setScreenColors	(int,int)->(void)
(	O
FILE_DIR_COLOR	array(char)
[	O
FILECOLOR	O
(	O
firstVisFile	int
+	O
selectedFile	int
+	O
1	int
)	O
]	O
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
print_file_highlight	(int)->(void)
(	O
selectedFile	int
+	O
1	int
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
print_file_highlight	(int)->(void)
(	O
selectedFile	int
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
break	O
;	O
case	O
(	O
DOWN_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_down	O
:	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
selectedDir	int
++	O
;	O
if	O
(	O
selectedDir	int
>=	O
totalDirs	int
)	O
selectedDir	int
--	O
;	O
if	O
(	O
selectedDir	int
>=	O
numVisDirs	int
)	O
{	O
selectedDir	int
=	O
numVisDirs	int
-	O
1	int
;	O
if	O
(	O
(	O
firstVisDir	int
+	O
numVisDirs	int
)	O
<	O
totalDirs	int
)	O
{	O
firstVisDir	int
++	O
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
setScreenColors	(int,int)->(void)
(	O
FILE_DIR_COLOR	array(char)
[	O
DIRCOLOR	O
(	O
firstVisDir	int
+	O
selectedDir	int
-	O
1	int
)	O
]	O
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
print_dir_highlight	(int)->(void)
(	O
selectedDir	int
-	O
1	int
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
print_dir_highlight	(int)->(void)
(	O
selectedDir	int
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
0	int
]	O
->	O
type	char
==	O
'%'	O
)	O
break	O
;	O
selectedFile	int
++	O
;	O
if	O
(	O
selectedFile	int
>=	O
totalFiles	int
)	O
selectedFile	int
--	O
;	O
if	O
(	O
selectedFile	int
>=	O
numVisFiles	int
)	O
{	O
selectedFile	int
=	O
numVisFiles	int
-	O
1	int
;	O
if	O
(	O
(	O
firstVisFile	int
+	O
numVisFiles	int
)	O
<	O
totalFiles	int
)	O
{	O
firstVisFile	int
++	O
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
{	O
setScreenColors	(int,int)->(void)
(	O
FILE_DIR_COLOR	array(char)
[	O
FILECOLOR	O
(	O
firstVisFile	int
+	O
selectedFile	int
-	O
1	int
)	O
]	O
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
print_file_highlight	(int)->(void)
(	O
selectedFile	int
-	O
1	int
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
print_file_highlight	(int)->(void)
(	O
selectedFile	int
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
break	O
;	O
case	O
(	O
TAB_KEY	int
)	O
:	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
activeWindow	int
=	O
FILE_WIN	int
;	O
else	O
activeWindow	int
=	O
DIR_WIN	int
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
(	O
ENTER_KEY	int
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
if	O
(	O
activeWindow	int
==	O
FILE_WIN	int
&&	O
files	array(*(struct(*(char),int,char,char)))
[	O
0	int
]	O
->	O
type	char
==	O
'%'	O
)	O
break	O
;	O
showPropertiesDialog	()->(void)
(	O
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
}	O
else	O
{	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
scanDir	(*(char))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
firstVisDir	int
+	O
selectedDir	int
]	O
->	O
name	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
0	int
]	O
->	O
type	char
!=	O
'%'	O
)	O
{	O
showPropertiesDialog	()->(void)
(	O
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
}	O
}	O
}	O
break	O
;	O
case	O
(	O
SPACE_KEY	int
)	O
:	O
toggleSelected	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
(	O
's'	O
)	O
:	O
case	O
(	O
'S'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
<=	O
4	int
)	O
break	O
;	O
findFile	()->(void)
(	O
)	O
;	O
hideCursor	()->(void)
(	O
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'f'	O
)	O
:	O
case	O
(	O
'F'	O
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
showMenu	(int)->(void)
(	O
0	int
)	O
;	O
}	O
else	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
break	O
;	O
findFile	()->(void)
(	O
)	O
;	O
cwd	short
=	O
getcwd	(*(char),long)->(*(char))
(	O
NULL	O
,	O
0	int
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'e'	O
)	O
:	O
case	O
(	O
'E'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_end	O
;	O
exportTree	(int)->(void)
(	O
YES	int
)	O
;	O
hideCursor	()->(void)
(	O
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
}	O
else	O
if	O
(	O
ALT	int
)	O
{	O
showMenu	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'h'	O
)	O
:	O
case	O
(	O
'H'	O
)	O
:	O
if	O
(	O
ALT	int
)	O
{	O
showMenu	(int)->(void)
(	O
3	int
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'x'	O
)	O
:	O
case	O
(	O
'X'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
{	O
int	O
k	int
=	O
(	O
int	O
)	O
SCREEN_H	int
/	O
2	int
;	O
int	O
l	int
=	O
(	O
int	O
)	O
SCREEN_W	int
/	O
2	int
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
k	int
-	O
1	int
,	O
l	int
-	O
23	int
,	O
k	int
+	O
1	int
,	O
l	int
+	O
23	int
,	O
NULL	O
,	O
YES	int
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
k	int
,	O
l	int
-	O
22	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[C-c] Quit  [C-f] Open location [C-g] Cancel"	*(char)
)	O
;	O
int	O
loop	int
=	O
1	int
;	O
while	O
(	O
loop	int
)	O
{	O
ch	*(char)
=	O
getKey	()->(int)
(	O
)	O
;	O
if	O
(	O
ch	*(char)
==	O
'c'	O
&&	O
CTRL	int
)	O
goto	O
do_exit	O
;	O
else	O
if	O
(	O
ch	*(char)
==	O
'f'	O
&&	O
CTRL	int
)	O
{	O
file_open_location	()->(*(char))
(	O
)	O
;	O
loop	int
=	O
0	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
ch	*(char)
==	O
'g'	O
&&	O
CTRL	int
)	O
{	O
refreshWindows	()->(void)
(	O
)	O
;	O
loop	int
=	O
0	int
;	O
break	O
;	O
}	O
}	O
}	O
else	O
cutMarked	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'v'	O
)	O
:	O
case	O
(	O
'V'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
break	O
;	O
pasteMarked	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'p'	O
)	O
:	O
case	O
(	O
'P'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_up	O
;	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Oops! This function is currently not implemented."	*(char)
,	O
OK	int
,	O
INFO	int
)	O
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'a'	O
)	O
:	O
case	O
(	O
'A'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
2	int
)	O
goto	O
do_home	O
;	O
markAll	()->(void)
(	O
)	O
;	O
refreshAll	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'w'	O
)	O
:	O
case	O
(	O
'W'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
4	int
)	O
clearSelection	()->(void)
(	O
)	O
;	O
else	O
cutMarked	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'o'	O
)	O
:	O
case	O
(	O
'O'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
break	O
;	O
file_open_location	()->(*(char))
(	O
)	O
;	O
refreshWindows	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
ALT	int
)	O
{	O
showMenu	(int)->(void)
(	O
2	int
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
HOME_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_home	O
:	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
firstVisDir	int
=	O
0	int
;	O
selectedDir	int
=	O
0	int
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
activeWindow	int
==	O
FILE_WIN	int
)	O
{	O
firstVisFile	int
=	O
0	int
;	O
selectedFile	int
=	O
0	int
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
}	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
break	O
;	O
case	O
(	O
END_KEY	int
)	O
:	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
break	O
;	O
do_end	O
:	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
if	O
(	O
totalDirs	int
<=	O
numVisDirs	int
)	O
{	O
selectedDir	int
=	O
totalDirs	int
-	O
1	int
;	O
}	O
else	O
{	O
firstVisDir	int
=	O
totalDirs	int
-	O
numVisDirs	int
;	O
selectedDir	int
=	O
numVisDirs	int
-	O
1	int
;	O
}	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
totalFiles	int
<=	O
numVisFiles	int
)	O
{	O
selectedFile	int
=	O
totalFiles	int
-	O
1	int
;	O
}	O
else	O
{	O
firstVisFile	int
=	O
totalFiles	int
-	O
numVisFiles	int
;	O
selectedFile	int
=	O
numVisFiles	int
-	O
1	int
;	O
}	O
refreshFileView	()->(void)
(	O
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
break	O
;	O
case	O
(	O
'g'	O
)	O
:	O
case	O
(	O
'G'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
<	O
3	int
)	O
break	O
;	O
goto	O
do_exit	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'd'	O
)	O
:	O
case	O
(	O
'D'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
3	int
)	O
goto	O
do_del	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'q'	O
)	O
:	O
case	O
(	O
'Q'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
break	O
;	O
do_exit	O
:	O
i	int
=	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Are you sure you want to exit?"	*(char)
,	O
YES	int
|	O
NO	int
,	O
CONFIRM	int
)	O
;	O
if	O
(	O
i	int
==	O
YES	int
)	O
exit_gracefully	()->(void)
(	O
)	O
;	O
else	O
refreshWindows	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'c'	O
)	O
:	O
case	O
(	O
'C'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
copyMarked	()->(void)
(	O
)	O
;	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'/'	O
)	O
:	O
if	O
(	O
CTRL	int
&&	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
{	O
unMarkAll	(int)->(void)
(	O
activeWindow	int
)	O
;	O
}	O
break	O
;	O
case	O
(	O
'z'	O
)	O
:	O
case	O
(	O
'Z'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
4	int
)	O
break	O
;	O
unMarkAll	(int)->(void)
(	O
activeWindow	int
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
case	O
(	O
'n'	O
)	O
:	O
case	O
(	O
'N'	O
)	O
:	O
if	O
(	O
CTRL	int
)	O
{	O
if	O
(	O
GNU_DOS_LEVEL	int
>	O
1	int
)	O
goto	O
do_down	O
;	O
char	O
*	O
res	*(char)
=	O
getUserInput	(*(char),*(char))->(*(char))
(	O
"Enter directory name to create:"	*(char)
,	O
"New Directory"	*(char)
)	O
;	O
hideCursor	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
res	*(char)
)	O
break	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
res	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
mkdir	(*(char),int)->(int)
(	O
res	*(char)
,	O
0775	int
)	O
==	O
-	O
1	int
)	O
{	O
showErrorMsgBox	(*(char),*(char))->(void)
(	O
"Error creating directory:"	*(char)
,	O
res	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Directory already exists!"	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
res	*(char)
)	O
;	O
scanDir	(*(char))->(void)
(	O
cwd	short
)	O
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
else	O
goto	O
insert_char	O
;	O
break	O
;	O
default	O
:	O
insert_char	O
:	O
if	O
(	O
ch	*(char)
>=	O
33	int
&&	O
ch	*(char)
<=	O
126	int
)	O
{	O
int	O
i	int
,	O
x	int
=	O
-	O
1	int
;	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
{	O
for	O
(	O
i	int
=	O
firstVisDir	int
+	O
selectedDir	int
+	O
1	int
;	O
i	int
<	O
totalDirs	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
||	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
-	O
32	int
)	O
{	O
x	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
>=	O
totalDirs	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
firstVisDir	int
+	O
selectedDir	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
||	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
-	O
32	int
)	O
{	O
x	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
x	int
>=	O
0	int
)	O
{	O
selectedDir	int
=	O
x	int
-	O
firstVisDir	int
;	O
if	O
(	O
totalDirs	int
<=	O
numVisDirs	int
)	O
{	O
refreshDirView	()->(void)
(	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
selectedDir	int
<	O
0	int
)	O
{	O
firstVisDir	int
+=	O
selectedDir	int
;	O
selectedDir	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
selectedDir	int
>=	O
numVisDirs	int
)	O
{	O
firstVisDir	int
+=	O
selectedDir	int
-	O
numVisDirs	int
+	O
1	int
;	O
selectedDir	int
=	O
numVisDirs	int
-	O
1	int
;	O
}	O
if	O
(	O
totalDirs	int
-	O
firstVisDir	int
<	O
numVisDirs	int
)	O
{	O
selectedDir	int
=	O
firstVisDir	int
;	O
firstVisDir	int
=	O
totalDirs	int
-	O
numVisDirs	int
;	O
selectedDir	int
-=	O
firstVisDir	int
;	O
}	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
}	O
else	O
if	O
(	O
activeWindow	int
==	O
FILE_WIN	int
)	O
{	O
for	O
(	O
i	int
=	O
firstVisFile	int
+	O
selectedFile	int
+	O
1	int
;	O
i	int
<	O
totalFiles	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
||	O
files	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
-	O
32	int
)	O
{	O
x	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
i	int
>=	O
totalFiles	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
firstVisFile	int
+	O
selectedFile	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
||	O
files	array(*(struct(*(char),int,char,char)))
[	O
i	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
ch	*(char)
-	O
32	int
)	O
{	O
x	int
=	O
i	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
x	int
>=	O
0	int
)	O
{	O
selectedFile	int
=	O
x	int
-	O
firstVisFile	int
;	O
if	O
(	O
totalFiles	int
<=	O
numVisFiles	int
)	O
{	O
refreshFileView	()->(void)
(	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
selectedFile	int
<	O
0	int
)	O
{	O
firstVisFile	int
+=	O
selectedFile	int
;	O
selectedFile	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
selectedFile	int
>=	O
numVisFiles	int
)	O
{	O
firstVisFile	int
+=	O
selectedFile	int
-	O
numVisFiles	int
+	O
1	int
;	O
selectedFile	int
=	O
numVisFiles	int
-	O
1	int
;	O
}	O
if	O
(	O
totalFiles	int
-	O
firstVisFile	int
<	O
numVisFiles	int
)	O
{	O
selectedFile	int
=	O
firstVisFile	int
;	O
firstVisFile	int
=	O
totalFiles	int
-	O
numVisFiles	int
;	O
selectedFile	int
-=	O
firstVisFile	int
;	O
}	O
refreshFileView	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
break	O
;	O
}	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
exit_gracefully	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
void	O
toggleSelected	()->(void)
(	O
)	O
{	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
int	O
pos	int
;	O
switch	O
(	O
activeWindow	int
)	O
{	O
case	O
(	O
DIR_WIN	int
)	O
:	O
pos	int
=	O
firstVisDir	int
+	O
selectedDir	int
;	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
,	O
"."	*(char)
)	O
==	O
0	int
)	O
||	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
,	O
".."	*(char)
)	O
==	O
0	int
)	O
)	O
break	O
;	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
==	O
'*'	O
)	O
{	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
=	O
' '	O
;	O
numStarred	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
==	O
'^'	O
)	O
{	O
numCut	int
--	O
;	O
removeCutDir	(int)->(void)
(	O
pos	int
)	O
;	O
}	O
else	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
==	O
'#'	O
)	O
{	O
numCopy	int
--	O
;	O
removeCopyDir	(int)->(void)
(	O
pos	int
)	O
;	O
}	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
=	O
'*'	O
;	O
numStarred	int
++	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
selectedDir	int
+	O
4	int
,	O
3	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
)	O
;	O
refreshBottomView	()->(void)
(	O
)	O
;	O
break	O
;	O
case	O
(	O
FILE_WIN	int
)	O
:	O
pos	int
=	O
firstVisFile	int
+	O
selectedFile	int
;	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
type	char
==	O
'%'	O
)	O
break	O
;	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
==	O
'*'	O
)	O
{	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
=	O
' '	O
;	O
numStarred	int
--	O
;	O
}	O
else	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
==	O
'^'	O
)	O
{	O
numCut	int
--	O
;	O
removeCutFile	(int)->(void)
(	O
pos	int
)	O
;	O
}	O
else	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
==	O
'#'	O
)	O
{	O
numCopy	int
--	O
;	O
removeCopyFile	(int)->(void)
(	O
pos	int
)	O
;	O
}	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
=	O
'*'	O
;	O
numStarred	int
++	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
selectedFile	int
+	O
4	int
,	O
(	O
SCREEN_W	int
/	O
2	int
)	O
+	O
1	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
star	char
)	O
;	O
refreshBottomView	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
int	O
addDirEntry	(int,*(char))->(int)
(	O
int	O
pos	int
,	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
len	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
)	O
{	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
=	O
allocDirStructB	(int)->(*(struct(*(char),int,char,char)))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
)	O
return	O
0	int
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
;	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
return	O
0	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
namelen	int
=	O
len	int
;	O
return	O
1	int
;	O
}	O
int	O
addFileEntry	(int,*(char))->(int)
(	O
int	O
pos	int
,	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
len	int
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
)	O
{	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
=	O
allocFileStructB	(int)->(*(struct(*(char),int,char,char)))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
)	O
return	O
0	int
;	O
}	O
else	O
{	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
type	char
!=	O
'%'	O
)	O
free	(*(void))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
;	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
)	O
return	O
0	int
;	O
}	O
strcpy	(*(char),*(char))->(*(char))
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
name	*(char)
,	O
name	*(char)
)	O
;	O
files	array(*(struct(*(char),int,char,char)))
[	O
pos	int
]	O
->	O
namelen	int
=	O
len	int
;	O
return	O
1	int
;	O
}	O
void	O
scanDir	(*(char))->(void)
(	O
char	O
*	O
dir	*(char)
)	O
{	O
int	O
dcount	int
=	O
0	int
,	O
fcount	int
=	O
0	int
;	O
int	O
n	int
,	O
j	int
;	O
struct	O
dirent	struct(long,long,short,char,array(char))
*	O
*	O
eps	*(*(struct(long,long,short,char,array(char))))
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
n	int
=	O
scandir	(*(char),*(*(*(struct(long,long,short,char,array(char))))),*((*(struct(long,long,short,char,array(char))))->(int)),*((*(*(struct`)),*(*(struct`)))->(int)))->(int)
(	O
dir	*(char)
,	O
&	O
eps	*(*(struct(long,long,short,char,array(char))))
,	O
one	(*(struct(long,long,short,char,array(char))))->(int)
,	O
alphasort	(*(*(struct(long,long,short,char,array(char)))),*(*(struct(long,long,short,char,array(char)))))->(int)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
dir	*(char)
,	O
"."	*(char)
)	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
dir	*(char)
,	O
cwd	short
)	O
)	O
{	O
j	int
=	O
chdir	(*(char))->(int)
(	O
dir	*(char)
)	O
;	O
if	O
(	O
j	int
==	O
-	O
1	int
)	O
{	O
showErrorMsgBox	(*(char),*(char))->(void)
(	O
"Error changing directory:"	*(char)
,	O
dir	*(char)
)	O
;	O
goto	O
finish	O
;	O
}	O
if	O
(	O
cwd	short
)	O
free	(*(void))->(void)
(	O
cwd	short
)	O
;	O
cwd	short
=	O
getcwd	(*(char),long)->(*(char))
(	O
NULL	O
,	O
0	int
)	O
;	O
cwdlen	int
=	O
strlen	(*(char))->(long)
(	O
cwd	short
)	O
;	O
}	O
if	O
(	O
n	int
>=	O
0	int
)	O
{	O
int	O
cnt	int
;	O
for	O
(	O
cnt	int
=	O
0	int
;	O
cnt	int
<	O
n	int
;	O
++	O
cnt	int
)	O
{	O
char	O
*	O
d	*(char)
=	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
cnt	int
]	O
->	O
d_name	array(char)
;	O
j	int
=	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
d	*(char)
,	O
&	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
if	O
(	O
j	int
==	O
-	O
1	int
)	O
{	O
char	O
tmp	array(char)
[	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
+	O
2	int
]	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
tmp	array(char)
,	O
": "	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
tmp	array(char)
,	O
d	*(char)
)	O
;	O
showErrorMsgBox	(*(char),*(char))->(void)
(	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
,	O
tmp	array(char)
)	O
;	O
goto	O
finish	O
;	O
}	O
if	O
(	O
S_ISDIR	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
if	O
(	O
dcount	int
>=	O
MAXENTRIES	int
)	O
break	O
;	O
if	O
(	O
!	O
addDirEntry	(int,*(char))->(int)
(	O
dcount	int
,	O
d	*(char)
)	O
)	O
{	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory."	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
goto	O
finish	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
d	*(char)
,	O
".."	*(char)
)	O
==	O
0	int
||	O
strcmp	(*(char),*(char))->(int)
(	O
d	*(char)
,	O
"."	*(char)
)	O
==	O
0	int
)	O
j	int
=	O
0	int
;	O
else	O
j	int
=	O
checkCutOrCopyDir	(int)->(int)
(	O
dcount	int
)	O
;	O
switch	O
(	O
j	int
)	O
{	O
case	O
1	int
:	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
dcount	int
]	O
->	O
star	char
=	O
'^'	O
;	O
break	O
;	O
case	O
2	int
:	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
dcount	int
]	O
->	O
star	char
=	O
'#'	O
;	O
break	O
;	O
default	O
:	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
dcount	int
]	O
->	O
star	char
=	O
' '	O
;	O
break	O
;	O
}	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
dcount	int
]	O
->	O
name	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
dcount	int
]	O
->	O
type	char
=	O
'h'	O
;	O
else	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
dcount	int
]	O
->	O
type	char
=	O
'd'	O
;	O
dcount	int
++	O
;	O
}	O
else	O
{	O
if	O
(	O
fcount	int
>=	O
MAXENTRIES	int
)	O
break	O
;	O
if	O
(	O
!	O
addFileEntry	(int,*(char))->(int)
(	O
fcount	int
,	O
d	*(char)
)	O
)	O
{	O
msgBoxH	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory."	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
goto	O
finish	O
;	O
}	O
j	int
=	O
checkCutOrCopyFile	(int)->(int)
(	O
fcount	int
)	O
;	O
switch	O
(	O
j	int
)	O
{	O
case	O
1	int
:	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
star	char
=	O
'^'	O
;	O
break	O
;	O
case	O
2	int
:	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
star	char
=	O
'#'	O
;	O
break	O
;	O
default	O
:	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
star	char
=	O
' '	O
;	O
break	O
;	O
}	O
if	O
(	O
d	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'h'	O
;	O
else	O
if	O
(	O
S_ISLNK	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'l'	O
;	O
else	O
if	O
(	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IXUSR	O
)	O
||	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IXGRP	O
)	O
||	O
(	O
statbuf	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IXOTH	O
)	O
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'x'	O
;	O
else	O
{	O
char	O
*	O
ext	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
d	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
!	O
ext	*(char)
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'r'	O
;	O
else	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".tar"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".gz"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".xz"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".Z"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".rar"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".zip"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".bz2"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".7z"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".lzma"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".lha"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".jar"	*(char)
)	O
==	O
0	int
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'a'	O
;	O
else	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".bmp"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".png"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".jpg"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".jpeg"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".pcx"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".ico"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".gif"	*(char)
)	O
==	O
0	int
||	O
strcasecmp	(*(char),*(char))->(int)
(	O
ext	*(char)
,	O
".tiff"	*(char)
)	O
==	O
0	int
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'p'	O
;	O
else	O
files	array(*(struct(*(char),int,char,char)))
[	O
fcount	int
]	O
->	O
type	char
=	O
'r'	O
;	O
}	O
}	O
fcount	int
++	O
;	O
}	O
free	(*(void))->(void)
(	O
eps	*(*(struct(long,long,short,char,array(char))))
[	O
cnt	int
]	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
eps	*(*(struct(long,long,short,char,array(char))))
)	O
;	O
}	O
else	O
{	O
showErrorMsgBox	(*(char),*(char))->(void)
(	O
"Failed to open directory:"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
goto	O
finish	O
;	O
}	O
freeFileStructs	(int,int)->(void)
(	O
fcount	int
,	O
totalFiles	int
)	O
;	O
totalFiles	int
=	O
fcount	int
;	O
if	O
(	O
totalFiles	int
<	O
numVisFiles	int
)	O
files	array(*(struct(*(char),int,char,char)))
[	O
totalFiles	int
]	O
=	O
NULL	O
;	O
firstVisFile	int
=	O
0	int
;	O
selectedFile	int
=	O
0	int
;	O
freeDirStructs	(int,int)->(void)
(	O
dcount	int
,	O
totalDirs	int
)	O
;	O
totalDirs	int
=	O
dcount	int
;	O
if	O
(	O
totalDirs	int
<	O
numVisDirs	int
)	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
totalDirs	int
]	O
=	O
NULL	O
;	O
firstVisDir	int
=	O
0	int
;	O
selectedDir	int
=	O
0	int
;	O
numStarred	int
=	O
0	int
;	O
finish	O
:	O
refreshAll	()->(void)
(	O
)	O
;	O
}	O
void	O
refreshAll	()->(void)
(	O
)	O
{	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
NO	int
)	O
;	O
drawMenuBar	(int,int,int)->(void)
(	O
2	int
,	O
2	int
,	O
SCREEN_W	int
-	O
2	int
)	O
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
refreshBottomView	()->(void)
(	O
)	O
;	O
}	O
void	O
refreshWindows	()->(void)
(	O
)	O
{	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
refreshFileView	()->(void)
(	O
)	O
;	O
refreshDirView	()->(void)
(	O
)	O
;	O
}	O
void	O
refreshDirView	()->(void)
(	O
)	O
{	O
if	O
(	O
activeWindow	int
==	O
DIR_WIN	int
)	O
setScreenColors	(int,int)->(void)
(	O
GREEN	int
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
3	int
,	O
2	int
,	O
SCREEN_H	int
-	O
5	int
,	O
(	O
int	O
)	O
(	O
SCREEN_W	int
/	O
2	int
)	O
-	O
1	int
,	O
" Directory view "	*(char)
,	O
YES	int
)	O
;	O
int	O
i	int
,	O
j	int
,	O
k	int
;	O
if	O
(	O
totalDirs	int
==	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH%s"	*(char)
,	O
4	int
,	O
3	int
,	O
dirHighLight	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH No directory entries found!"	*(char)
,	O
4	int
,	O
3	int
)	O
;	O
return	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numVisDirs	int
;	O
i	int
++	O
)	O
{	O
k	int
=	O
firstVisDir	int
+	O
i	int
;	O
if	O
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
k	int
]	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
i	int
==	O
selectedDir	int
&&	O
activeWindow	int
==	O
DIR_WIN	int
)	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
else	O
setScreenColors	(int,int)->(void)
(	O
FILE_DIR_COLOR	array(char)
[	O
DIRCOLOR	O
(	O
k	int
)	O
]	O
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
print_dir_highlight	(int)->(void)
(	O
i	int
)	O
;	O
}	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
NO	int
)	O
;	O
}	O
void	O
refreshFileView	()->(void)
(	O
)	O
{	O
if	O
(	O
activeWindow	int
==	O
FILE_WIN	int
)	O
setScreenColors	(int,int)->(void)
(	O
GREEN	int
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
3	int
,	O
(	O
int	O
)	O
(	O
SCREEN_W	int
/	O
2	int
)	O
,	O
SCREEN_H	int
-	O
5	int
,	O
SCREEN_W	int
-	O
1	int
,	O
" File view "	*(char)
,	O
YES	int
)	O
;	O
int	O
i	int
,	O
j	int
,	O
k	int
;	O
if	O
(	O
totalFiles	int
==	O
0	int
)	O
{	O
addFileEntry	(int,*(char))->(int)
(	O
0	int
,	O
"(Empty folder)"	*(char)
)	O
;	O
files	array(*(struct(*(char),int,char,char)))
[	O
0	int
]	O
->	O
type	char
=	O
'%'	O
;	O
files	array(*(struct(*(char),int,char,char)))
[	O
1	int
]	O
=	O
NULL	O
;	O
totalFiles	int
=	O
1	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
numVisFiles	int
;	O
i	int
++	O
)	O
{	O
k	int
=	O
firstVisDir	int
+	O
i	int
;	O
if	O
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
k	int
]	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
i	int
==	O
selectedFile	int
&&	O
activeWindow	int
==	O
FILE_WIN	int
)	O
setScreenColorsI	(int)->(void)
(	O
COLOR_HIGHLIGHT_TEXT	int
)	O
;	O
else	O
setScreenColors	(int,int)->(void)
(	O
FILE_DIR_COLOR	array(char)
[	O
FILECOLOR	O
(	O
k	int
)	O
]	O
,	O
BG_COLOR	array(int)
[	O
COLOR_WINDOW	int
]	O
)	O
;	O
print_file_highlight	(int)->(void)
(	O
i	int
)	O
;	O
}	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
NO	int
)	O
;	O
}	O
void	O
refreshBottomView	()->(void)
(	O
)	O
{	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
SCREEN_H	int
-	O
4	int
,	O
2	int
,	O
SCREEN_H	int
-	O
1	int
,	O
SCREEN_W	int
-	O
1	int
,	O
" Quick reference "	*(char)
,	O
YES	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
SCREEN_H	int
-	O
2	int
,	O
4	int
)	O
;	O
if	O
(	O
cwd	short
!=	O
NULL	O
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
cwd	short
)	O
>	O
SCREEN_W	int
-	O
7	int
)	O
{	O
int	O
i	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"CWD: "	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
SCREEN_W	int
-	O
12	int
;	O
i	int
++	O
)	O
putchar	(int)->(int)
(	O
cwd	short
[	O
i	int
]	O
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
".."	*(char)
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"CWD: %s"	*(char)
,	O
cwd	short
)	O
;	O
}	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\e[%d;%dH"	*(char)
,	O
SCREEN_H	int
-	O
3	int
,	O
4	int
)	O
;	O
if	O
(	O
numStarred	int
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Marked (%d) "	*(char)
,	O
numStarred	int
)	O
;	O
if	O
(	O
numCut	int
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Cut (%d) "	*(char)
,	O
numCut	int
)	O
;	O
if	O
(	O
numCopy	int
>	O
0	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Copy (%d) "	*(char)
,	O
numCopy	int
)	O
;	O
drawBox	(int,int,int,int,*(char),int)->(void)
(	O
1	int
,	O
1	int
,	O
SCREEN_H	int
,	O
SCREEN_W	int
,	O
" Prime File Manager "	*(char)
,	O
NO	int
)	O
;	O
}	O
void	O
drawMenuBar	(int,int,int)->(void)
(	O
int	O
x	int
,	O
int	O
y	int
,	O
int	O
w	int
)	O
{	O
printf	(*(char))->(int)
(	O
"\x1b[0m"	*(char)
)	O
;	O
setScreenColorsI	(int)->(void)
(	O
COLOR_MENU_BAR	int
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH"	*(char)
,	O
x	int
,	O
y	int
)	O
;	O
int	O
i	int
,	O
j	int
,	O
lastChar	int
=	O
y	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
w	int
;	O
i	int
++	O
)	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
' '	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\x1b[%d;%dH"	*(char)
,	O
x	int
,	O
y	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
totalMainMenus	int
;	O
i	int
++	O
)	O
{	O
j	int
=	O
0	int
;	O
lastChar	int
++	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" "	*(char)
)	O
;	O
while	O
(	O
menu	array(*(char))
[	O
i	int
]	O
[	O
j	int
]	O
!=	O
'\0'	O
)	O
{	O
if	O
(	O
menu	array(*(char))
[	O
i	int
]	O
[	O
j	int
]	O
==	O
'&'	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
menu	array(*(char))
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%c"	*(char)
,	O
menu	array(*(char))
[	O
i	int
]	O
[	O
j	int
+	O
1	int
]	O
)	O
;	O
}	O
lastChar	int
++	O
;	O
j	int
++	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" "	*(char)
)	O
;	O
}	O
setScreenColorsI	(int)->(void)
(	O
COLOR_WINDOW	int
)	O
;	O
}	O
