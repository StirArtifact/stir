static	O
void	O
pack_uint32	(int,*(char))->(void)
(	O
OM_uint32	int
i	int
,	O
char	O
*	O
buf	*(char)
)	O
{	O
buf	*(char)
[	O
0	int
]	O
=	O
i	int
&	O
0xFF	int
;	O
buf	*(char)
[	O
1	int
]	O
=	O
(	O
i	int
>>	O
8	int
)	O
&	O
0xFF	int
;	O
buf	*(char)
[	O
2	int
]	O
=	O
(	O
i	int
>>	O
16	int
)	O
&	O
0xFF	int
;	O
buf	*(char)
[	O
3	int
]	O
=	O
(	O
i	int
>>	O
24	int
)	O
&	O
0xFF	int
;	O
}	O
static	O
int	O
hash_cb	(*(int),*(*(struct(*(struct`)))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(*(char)))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
char	O
*	O
*	O
out	*(*(void))
)	O
{	O
gss_ctx_id_t	*(struct)
ctx	*(struct(*(struct(int,*(void)))))
=	O
*	O
context_handle	*(*(struct))
;	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
ctx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
;	O
char	O
*	O
buf	*(char)
,	O
*	O
p	*(char)
;	O
size_t	long
len	long
;	O
int	O
res	int
;	O
if	O
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
length	int
>	O
UINT32_MAX	O
||	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
length	int
>	O
UINT32_MAX	O
||	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
application_data	struct(long,*(void))
.	O
length	int
>	O
UINT32_MAX	O
)	O
return	O
GSS_S_BAD_BINDINGS	O
;	O
len	long
=	O
sizeof	O
(	O
OM_uint32	int
)	O
*	O
5	int
+	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
length	int
+	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
length	int
+	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
application_data	struct(long,*(void))
.	O
length	int
;	O
p	*(char)
=	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
pack_uint32	(int,*(char))->(void)
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_addrtype	int
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
pack_uint32	(int,*(char))->(void)
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
length	int
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
if	O
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
length	int
>	O
0	int
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
value	*(void)
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
length	int
)	O
;	O
p	*(char)
+=	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
initiator_address	struct(long,*(void))
.	O
length	int
;	O
}	O
pack_uint32	(int,*(char))->(void)
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_addrtype	int
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
pack_uint32	(int,*(char))->(void)
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
length	int
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
if	O
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
length	int
>	O
0	int
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
value	*(void)
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
length	int
)	O
;	O
p	*(char)
+=	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
acceptor_address	struct(long,*(void))
.	O
length	int
;	O
}	O
pack_uint32	(int,*(char))->(void)
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
application_data	struct(long,*(void))
.	O
length	int
,	O
p	*(char)
)	O
;	O
p	*(char)
+=	O
sizeof	O
(	O
OM_uint32	int
)	O
;	O
if	O
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
application_data	struct(long,*(void))
.	O
length	int
>	O
0	int
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(char)
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
application_data	struct(long,*(void))
.	O
value	*(void)
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
->	O
application_data	struct(long,*(void))
.	O
length	int
)	O
;	O
res	int
=	O
shishi_md5	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
buf	*(char)
,	O
len	long
,	O
out	*(*(void))
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
res	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
_gss_krb5_checksum_pack	(*(int),*(struct(*(struct(int,*`)))),*(*(struct(*(struct`)))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),int,*(*(char)),*(long))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_cred_id_t	*(struct)
initiator_cred_handle	*(struct)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
OM_uint32	int
req_flags	int
,	O
char	O
*	O
*	O
data	*(*(char))
,	O
size_t	long
*	O
datalen	*(long)
)	O
{	O
char	O
*	O
p	*(char)
;	O
*	O
datalen	*(long)
=	O
24	int
;	O
p	*(char)
=	O
*	O
data	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
*	O
datalen	*(long)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
p	*(char)
[	O
0	int
]	O
,	O
"\x10\x00\x00\x00"	*(char)
,	O
4	int
)	O
;	O
if	O
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
!=	O
GSS_C_NO_CHANNEL_BINDINGS	O
)	O
{	O
char	O
*	O
md5hash	*(char)
;	O
int	O
res	int
;	O
res	int
=	O
hash_cb	(*(int),*(*(struct(*(struct`)))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(*(char)))->(int)
(	O
minor_status	*(int)
,	O
context_handle	*(*(struct))
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
&	O
md5hash	*(char)
)	O
;	O
if	O
(	O
res	int
!=	O
GSS_S_COMPLETE	int
)	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
return	O
res	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
p	*(char)
[	O
4	int
]	O
,	O
md5hash	*(char)
,	O
16	int
)	O
;	O
free	(*(void))->(void)
(	O
md5hash	*(char)
)	O
;	O
}	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
p	*(char)
[	O
4	int
]	O
,	O
0	int
,	O
16	int
)	O
;	O
req_flags	int
&=	O
GSS_C_MUTUAL_FLAG	int
|	O
GSS_C_REPLAY_FLAG	int
|	O
GSS_C_SEQUENCE_FLAG	int
|	O
GSS_C_CONF_FLAG	int
|	O
GSS_C_INTEG_FLAG	int
;	O
p	*(char)
[	O
20	int
]	O
=	O
req_flags	int
&	O
0xFF	int
;	O
p	*(char)
[	O
21	int
]	O
=	O
(	O
req_flags	int
>>	O
8	int
)	O
&	O
0xFF	int
;	O
p	*(char)
[	O
22	int
]	O
=	O
(	O
req_flags	int
>>	O
16	int
)	O
&	O
0xFF	int
;	O
p	*(char)
[	O
23	int
]	O
=	O
(	O
req_flags	int
>>	O
24	int
)	O
&	O
0xFF	int
;	O
if	O
(	O
req_flags	int
&	O
GSS_C_DELEG_FLAG	int
)	O
{	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
_gss_krb5_checksum_parse	(*(int),*(*(struct(*(struct`)))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
)	O
{	O
gss_ctx_id_t	*(struct)
ctx	*(struct(*(struct(int,*(void)))))
=	O
*	O
context_handle	*(*(struct))
;	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
ctx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
;	O
char	O
*	O
out	*(*(void))
=	O
NULL	O
;	O
size_t	long
len	long
=	O
0	int
;	O
int	O
rc	int
;	O
char	O
*	O
md5hash	*(char)
;	O
if	O
(	O
shishi_ap_authenticator_cksumtype	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
!=	O
0x8003	int
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
GSS_KRB5_S_G_VALIDATE_FAILED	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_ap_authenticator_cksumdata	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
out	*(*(void))
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_TOO_SMALL_BUFFER	O
)	O
return	O
GSS_S_FAILURE	O
;	O
out	*(*(void))
=	O
malloc	(long)->(*(void))
(	O
len	long
)	O
;	O
if	O
(	O
!	O
out	*(*(void))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_ap_authenticator_cksumdata	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
out	*(*(void))
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
free	(*(void))->(void)
(	O
out	*(*(void))
)	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
out	*(*(void))
,	O
"\x10\x00\x00\x00"	*(char)
,	O
4	int
)	O
!=	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
out	*(*(void))
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
if	O
(	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
!=	O
GSS_C_NO_CHANNEL_BINDINGS	O
)	O
{	O
rc	int
=	O
hash_cb	(*(int),*(*(struct(*(struct`)))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(*(char)))->(int)
(	O
minor_status	*(int)
,	O
context_handle	*(*(struct))
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
&	O
md5hash	*(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
{	O
free	(*(void))->(void)
(	O
out	*(*(void))
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
rc	int
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
&	O
out	*(*(void))
[	O
4	int
]	O
,	O
md5hash	*(char)
,	O
16	int
)	O
;	O
free	(*(void))->(void)
(	O
md5hash	*(char)
)	O
;	O
}	O
else	O
{	O
char	O
zeros	array(char)
[	O
16	int
]	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
zeros	array(char)
[	O
0	int
]	O
,	O
0	int
,	O
sizeof	O
zeros	array(char)
)	O
;	O
rc	int
=	O
memcmp	(*(void),*(void),long)->(int)
(	O
&	O
out	*(*(void))
[	O
4	int
]	O
,	O
zeros	array(char)
,	O
16	int
)	O
;	O
}	O
free	(*(void))->(void)
(	O
out	*(*(void))
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
