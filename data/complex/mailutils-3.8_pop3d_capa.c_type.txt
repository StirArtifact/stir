static	O
int	O
print_capa	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
pop3d_capa	struct(enum(int,int),*(char),union(*(char),*((*(char),*(struct))->(void))))
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
item	*(void)
;	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
=	O
data	*(void)
;	O
if	O
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
type	int
==	O
capa_func	int
)	O
{	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
func	*(char)
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
,	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
;	O
}	O
else	O
{	O
pop3d_outf	(*(char))->(void)
(	O
"%s"	*(char)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
)	O
;	O
if	O
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
string	*(char)
)	O
pop3d_outf	(*(char))->(void)
(	O
"%s"	*(char)
,	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
string	*(char)
)	O
;	O
pop3d_outf	(*(char))->(void)
(	O
"\n"	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
pop3d_capa	struct(enum(int,int),*(char),union(*(char),*((*(char),*(struct))->(void))))
(	O
char	O
*	O
arg	*(char)
,	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
arg	*(char)
)	O
!=	O
0	int
)	O
return	O
ERR_BAD_ARGS	int
;	O
pop3d_outf	(*(char))->(void)
(	O
"+OK Capability list follows\n"	*(char)
)	O
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
print_capa	(*(void),*(void))->(int)
,	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
;	O
pop3d_outf	(*(char))->(void)
(	O
".\n"	*(char)
)	O
;	O
return	O
OK	int
;	O
}	O
static	O
void	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	union(*(char),*((*(char),*(struct))->(void)))
)	O
{	O
struct	O
pop3d_capa	struct(enum(int,int),*(char),union(*(char),*((*(char),*(struct))->(void))))
*	O
cp	*(struct(int,int,array(char),array(char)))
;	O
cp	*(struct(int,int,array(char),array(char)))
=	O
mu_alloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
cp	*(struct(int,int,array(char),array(char)))
)	O
)	O
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
type	int
=	O
capa_string	int
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
=	O
name	*(char)
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
string	*(char)
=	O
value	union(*(char),*((*(char),*(struct))->(void)))
?	O
mu_strdup	(*(char))->(*(char))
(	O
value	union(*(char),*((*(char),*(struct))->(void)))
)	O
:	O
NULL	O
;	O
if	O
(	O
mu_list_append	(*(struct),*(void))->(int)
(	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
cp	*(struct(int,int,array(char),array(char)))
)	O
)	O
mu_alloc_die	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
pop3d_append_capa_func	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*((*(char),*(struct(*`,enum(int,int,int,int,int),*`)))->(void)))->(void)
(	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
(	O
*	O
func	*(char)
)	O
(	O
const	O
char	O
*	O
,	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
)	O
)	O
{	O
struct	O
pop3d_capa	struct(enum(int,int),*(char),union(*(char),*((*(char),*(struct))->(void))))
*	O
cp	*(struct(int,int,array(char),array(char)))
;	O
if	O
(	O
!	O
func	*(char)
)	O
return	O
;	O
cp	*(struct(int,int,array(char),array(char)))
=	O
mu_alloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
cp	*(struct(int,int,array(char),array(char)))
)	O
)	O
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
type	int
=	O
capa_func	int
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
name	*(char)
=	O
name	*(char)
;	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
func	*(char)
=	O
func	*(char)
;	O
if	O
(	O
mu_list_append	(*(struct),*(void))->(int)
(	O
sess	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
cp	*(struct(int,int,array(char),array(char)))
)	O
)	O
mu_alloc_die	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
capa_free	(*(void))->(void)
(	O
void	O
*	O
p	*(char)
)	O
{	O
struct	O
pop3d_capa	struct(enum(int,int),*(char),union(*(char),*((*(char),*(struct))->(void))))
*	O
cp	*(struct(int,int,array(char),array(char)))
=	O
p	*(char)
;	O
if	O
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
type	int
==	O
capa_string	int
&&	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
string	*(char)
)	O
free	(*(void))->(void)
(	O
cp	*(struct(int,int,array(char),array(char)))
->	O
value	union(*(char),*((*(char),*(struct))->(void)))
.	O
string	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cp	*(struct(int,int,array(char),array(char)))
)	O
;	O
}	O
static	O
void	O
capa_implementation	(*(char),*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
if	O
(	O
state	*(int)
==	O
TRANSACTION	int
)	O
pop3d_outf	(*(char))->(void)
(	O
"%s %s\n"	*(char)
,	O
name	*(char)
,	O
PACKAGE_STRING	*(char)
)	O
;	O
}	O
static	O
void	O
capa_stls	(*(char),*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
switch	O
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
tls_mode	enum(int,int,int,int,int)
)	O
{	O
case	O
tls_ondemand	int
:	O
case	O
tls_required	int
:	O
pop3d_outf	(*(char))->(void)
(	O
"%s\n"	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
capa_user	(*(char),*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
const	O
char	O
*	O
name	*(char)
,	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
if	O
(	O
state	*(int)
==	O
INITIAL	O
)	O
pop3d_outf	(*(char))->(void)
(	O
"XTLSREQUIRED\n"	*(char)
)	O
;	O
else	O
pop3d_outf	(*(char))->(void)
(	O
"USER\n"	*(char)
)	O
;	O
}	O
void	O
pop3d_session_init	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
if	O
(	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
)	O
mu_alloc_die	()->(void)
(	O
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
capa_free	(*(void))->(void)
)	O
;	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"TOP"	*(char)
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"UIDL"	*(char)
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"RESP-CODES"	*(char)
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"PIPELINING"	*(char)
,	O
NULL	O
)	O
;	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"AUTH-RESP-CODE"	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
pop3d_xlines	int
)	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"XLINES"	*(char)
,	O
NULL	O
)	O
;	O
pop3d_append_capa_func	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*((*(char),*(struct(*`,enum(int,int,int,int,int),*`)))->(void)))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"LOGIN-DELAY"	*(char)
,	O
login_delay_capa	O
)	O
;	O
pop3d_append_capa_string	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*(char))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"EXPIRE"	*(char)
,	O
(	O
expire	int
==	O
EXPIRE_NEVER	O
)	O
?	O
"NEVER"	*(char)
:	O
mu_umaxtostr	(int,long)->(*(char))
(	O
0	int
,	O
expire	int
)	O
)	O
;	O
pop3d_append_capa_func	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*((*(char),*(struct(*`,enum(int,int,int,int,int),*`)))->(void)))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
NULL	O
,	O
capa_user	(*(char),*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
)	O
;	O
pop3d_append_capa_func	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*((*(char),*(struct(*`,enum(int,int,int,int,int),*`)))->(void)))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"STLS"	*(char)
,	O
capa_stls	(*(char),*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
)	O
;	O
pop3d_append_capa_func	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(char),*((*(char),*(struct(*`,enum(int,int,int,int,int),*`)))->(void)))->(void)
(	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
"IMPLEMENTATION"	*(char)
,	O
capa_implementation	(*(char),*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
)	O
;	O
}	O
void	O
pop3d_session_free	(*(struct(*(struct),enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))))->(void)
(	O
struct	O
pop3d_session	struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
)	O
{	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
session	*(struct(*(struct),enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
->	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
