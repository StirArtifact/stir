static	O
char	O
put_tty_line	(*(char),int,int)->(char)
(	O
const	O
char	O
*	O
s	*(char)
,	O
int	O
len	int
,	O
const	O
int	O
gflags	int
)	O
{	O
const	O
char	O
escapes	array(char)
[	O
]	O
=	O
"\a\b\f\n\r\t\v\\"	*(char)
;	O
const	O
char	O
escchars	array(char)
[	O
]	O
=	O
"abfnrtv\\"	*(char)
;	O
int	O
col	int
=	O
0	int
;	O
if	O
(	O
gflags	int
&	O
GNP	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%d\t"	*(char)
,	O
current_addr	()->(int)
(	O
)	O
)	O
;	O
col	int
=	O
8	int
;	O
}	O
while	O
(	O
--	O
len	int
>=	O
0	int
)	O
{	O
const	O
unsigned	O
char	O
ch	char
=	O
*	O
s	*(char)
++	O
;	O
if	O
(	O
!	O
(	O
gflags	int
&	O
GLS	int
)	O
)	O
putchar	(int)->(int)
(	O
ch	char
)	O
;	O
else	O
{	O
if	O
(	O
++	O
col	int
>	O
window_columns	()->(int)
(	O
)	O
)	O
{	O
col	int
=	O
1	int
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\\\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
ch	char
>=	O
32	int
&&	O
ch	char
<=	O
126	int
&&	O
ch	char
!=	O
'\\'	O
)	O
putchar	(int)->(int)
(	O
ch	char
)	O
;	O
else	O
{	O
char	O
*	O
cp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
escapes	array(char)
,	O
ch	char
)	O
;	O
++	O
col	int
;	O
putchar	(int)->(int)
(	O
'\\'	O
)	O
;	O
if	O
(	O
cp	*(char)
)	O
putchar	(int)->(int)
(	O
escchars	array(char)
[	O
cp	*(char)
-	O
escapes	array(char)
]	O
)	O
;	O
else	O
{	O
col	int
+=	O
2	int
;	O
putchar	(int)->(int)
(	O
(	O
(	O
ch	char
>>	O
6	int
)	O
&	O
7	int
)	O
+	O
'0'	O
)	O
;	O
putchar	(int)->(int)
(	O
(	O
(	O
ch	char
>>	O
3	int
)	O
&	O
7	int
)	O
+	O
'0'	O
)	O
;	O
putchar	(int)->(int)
(	O
(	O
ch	char
&	O
7	int
)	O
+	O
'0'	O
)	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
!	O
traditional	()->(char)
(	O
)	O
&&	O
(	O
gflags	int
&	O
GLS	int
)	O
)	O
putchar	(int)->(int)
(	O
'$'	O
)	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
return	O
1	int
;	O
}	O
char	O
display_lines	(int,int,int)->(char)
(	O
int	O
from	int
,	O
const	O
int	O
to	int
,	O
const	O
int	O
gflags	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
inc_addr	(int)->(int)
(	O
to	int
)	O
)	O
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
from	int
)	O
;	O
if	O
(	O
!	O
from	int
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Invalid address"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
while	O
(	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
char	O
*	O
s	*(char)
=	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
0	int
;	O
set_current_addr	(int)->(void)
(	O
from	int
++	O
)	O
;	O
if	O
(	O
!	O
put_tty_line	(*(char),int,int)->(char)
(	O
s	*(char)
,	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
,	O
gflags	int
)	O
)	O
return	O
0	int
;	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
return	O
1	int
;	O
}	O
static	O
char	O
trailing_escape	(*(char),int)->(char)
(	O
const	O
char	O
*	O
const	O
s	*(char)
,	O
int	O
len	int
)	O
{	O
char	O
parity	char
=	O
0	int
;	O
while	O
(	O
--	O
len	int
>=	O
0	int
&&	O
s	*(char)
[	O
len	int
]	O
==	O
'\\'	O
)	O
parity	char
=	O
!	O
parity	char
;	O
return	O
parity	char
;	O
}	O
const	O
char	O
*	O
get_extended_line	(*(char),*(int),char)->(*(char))
(	O
const	O
char	O
*	O
ibufp	*(char)
,	O
int	O
*	O
lenp	*(int)
,	O
const	O
char	O
nonl	char
)	O
{	O
static	O
char	O
*	O
buf	*(*(char))
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
len	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
ibufp	*(char)
[	O
len	int
++	O
]	O
!=	O
'\n'	O
;	O
)	O
;	O
if	O
(	O
len	int
<	O
2	int
||	O
!	O
trailing_escape	(*(char),int)->(char)
(	O
ibufp	*(char)
,	O
len	int
-	O
1	int
)	O
)	O
{	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
len	int
;	O
return	O
ibufp	*(char)
;	O
}	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
len	int
)	O
)	O
return	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(*(char))
,	O
ibufp	*(char)
,	O
len	int
)	O
;	O
--	O
len	int
;	O
buf	*(*(char))
[	O
len	int
-	O
1	int
]	O
=	O
'\n'	O
;	O
if	O
(	O
nonl	char
)	O
--	O
len	int
;	O
while	O
(	O
1	int
)	O
{	O
int	O
len2	int
;	O
if	O
(	O
!	O
(	O
ibufp	*(char)
=	O
get_tty_line	(*(int))->(*(char))
(	O
&	O
len2	int
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
len2	int
==	O
0	int
||	O
ibufp	*(char)
[	O
len2	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Unexpected end-of-file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
len	int
+	O
len2	int
)	O
)	O
return	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(*(char))
+	O
len	int
,	O
ibufp	*(char)
,	O
len2	int
)	O
;	O
len	int
+=	O
len2	int
;	O
if	O
(	O
len2	int
<	O
2	int
||	O
!	O
trailing_escape	(*(char),int)->(char)
(	O
buf	*(*(char))
,	O
len	int
-	O
1	int
)	O
)	O
break	O
;	O
--	O
len	int
;	O
buf	*(*(char))
[	O
len	int
-	O
1	int
]	O
=	O
'\n'	O
;	O
if	O
(	O
nonl	char
)	O
--	O
len	int
;	O
}	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
buf	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
len	int
;	O
return	O
buf	*(*(char))
;	O
}	O
const	O
char	O
*	O
get_tty_line	(*(int))->(*(char))
(	O
int	O
*	O
lenp	*(int)
)	O
{	O
static	O
char	O
*	O
buf	*(*(char))
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
i	*(int)
=	O
0	int
,	O
oi	int
=	O
-	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
const	O
int	O
c	int
=	O
getchar	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
"stdin"	*(char)
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot read stdin"	*(char)
)	O
;	O
clearerr	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
else	O
{	O
clearerr	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
i	*(int)
!=	O
oi	int
)	O
{	O
oi	int
=	O
i	*(int)
;	O
continue	O
;	O
}	O
if	O
(	O
i	*(int)
)	O
buf	*(*(char))
[	O
i	*(int)
]	O
=	O
0	int
;	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
i	*(int)
;	O
return	O
buf	*(*(char))
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
i	*(int)
+	O
2	int
)	O
)	O
{	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
buf	*(*(char))
[	O
i	*(int)
++	O
]	O
=	O
c	int
;	O
if	O
(	O
!	O
c	int
)	O
set_binary	()->(void)
(	O
)	O
;	O
if	O
(	O
c	int
!=	O
'\n'	O
)	O
continue	O
;	O
buf	*(*(char))
[	O
i	*(int)
]	O
=	O
0	int
;	O
if	O
(	O
lenp	*(int)
)	O
*	O
lenp	*(int)
=	O
i	*(int)
;	O
return	O
buf	*(*(char))
;	O
}	O
}	O
}	O
static	O
const	O
char	O
*	O
read_stream_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(int),*(char))->(*(char))
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
*	O
lenp	*(int)
,	O
char	O
*	O
newline_added_now	*(char)
)	O
{	O
static	O
char	O
*	O
buf	*(*(char))
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
c	int
,	O
i	*(int)
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
i	*(int)
+	O
2	int
)	O
)	O
return	O
0	int
;	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
break	O
;	O
buf	*(*(char))
[	O
i	*(int)
++	O
]	O
=	O
c	int
;	O
if	O
(	O
!	O
c	int
)	O
set_binary	()->(void)
(	O
)	O
;	O
else	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
break	O
;	O
}	O
buf	*(*(char))
[	O
i	*(int)
]	O
=	O
0	int
;	O
if	O
(	O
c	int
==	O
EOF	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot read input file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
i	*(int)
)	O
{	O
buf	*(*(char))
[	O
i	*(int)
]	O
=	O
'\n'	O
;	O
buf	*(*(char))
[	O
i	*(int)
+	O
1	int
]	O
=	O
0	int
;	O
*	O
newline_added_now	*(char)
=	O
1	int
;	O
if	O
(	O
!	O
isbinary	()->(char)
(	O
)	O
)	O
++	O
i	*(int)
;	O
}	O
}	O
*	O
lenp	*(int)
=	O
i	*(int)
;	O
return	O
buf	*(*(char))
;	O
}	O
static	O
long	O
read_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(long)
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
addr	int
)	O
;	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
long	O
size	*(int)
=	O
0	int
;	O
const	O
char	O
o_isbinary	char
=	O
isbinary	()->(char)
(	O
)	O
;	O
const	O
char	O
appended	char
=	O
(	O
addr	int
==	O
last_addr	()->(int)
(	O
)	O
)	O
;	O
char	O
newline_added_now	*(char)
=	O
0	int
;	O
set_current_addr	(int)->(void)
(	O
addr	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
len	int
=	O
0	int
;	O
const	O
char	O
*	O
buf	*(*(char))
=	O
read_stream_line	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(int),*(char))->(*(char))
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
&	O
len	int
,	O
&	O
newline_added_now	*(char)
)	O
;	O
if	O
(	O
!	O
buf	*(*(char))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
len	int
>	O
0	int
)	O
size	*(int)
+=	O
len	int
;	O
else	O
break	O
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
put_sbuf_line	(*(char),int)->(*(char))
(	O
buf	*(*(char))
,	O
current_addr	()->(int)
(	O
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
if	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
else	O
if	O
(	O
!	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
if	O
(	O
addr	int
&&	O
appended	char
&&	O
size	*(int)
&&	O
o_isbinary	char
&&	O
newline_added	()->(char)
(	O
)	O
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Newline inserted\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
if	O
(	O
newline_added_now	*(char)
&&	O
appended	char
)	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"Newline appended\n"	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
isbinary	()->(char)
(	O
)	O
&&	O
!	O
o_isbinary	char
&&	O
newline_added_now	*(char)
&&	O
!	O
appended	char
)	O
++	O
size	*(int)
;	O
if	O
(	O
!	O
size	*(int)
)	O
newline_added_now	*(char)
=	O
1	int
;	O
if	O
(	O
appended	char
&&	O
newline_added_now	*(char)
)	O
set_newline_added	()->(void)
(	O
)	O
;	O
return	O
size	*(int)
;	O
}	O
int	O
read_file	(*(char),int)->(int)
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
int	O
addr	int
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
long	O
size	*(int)
;	O
if	O
(	O
*	O
filename	*(char)
==	O
'!'	O
)	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
+	O
1	int
,	O
"r"	*(char)
)	O
;	O
else	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
strip_escapes	(*(char))->(*(char))
(	O
filename	*(char)
)	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
filename	*(char)
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot open input file"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	*(int)
=	O
read_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(long)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
addr	int
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
(	O
*	O
filename	*(char)
==	O
'!'	O
)	O
?	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
:	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
<	O
0	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
filename	*(char)
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot close input file"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
scripted	()->(char)
(	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%lu\n"	*(char)
,	O
size	*(int)
)	O
;	O
return	O
current_addr	()->(int)
(	O
)	O
-	O
addr	int
;	O
}	O
static	O
long	O
write_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int)->(long)
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
from	int
)	O
;	O
long	O
size	*(int)
=	O
0	int
;	O
while	O
(	O
from	int
&&	O
from	int
<=	O
to	int
)	O
{	O
int	O
len	int
;	O
char	O
*	O
s	*(char)
=	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
-	O
1	int
;	O
len	int
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
;	O
if	O
(	O
from	int
!=	O
last_addr	()->(int)
(	O
)	O
||	O
!	O
isbinary	()->(char)
(	O
)	O
||	O
!	O
newline_added	()->(char)
(	O
)	O
)	O
s	*(char)
[	O
len	int
++	O
]	O
=	O
'\n'	O
;	O
size	*(int)
+=	O
len	int
;	O
while	O
(	O
--	O
len	int
>=	O
0	int
)	O
if	O
(	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
*	O
s	*(char)
++	O
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
<	O
0	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot write file"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
++	O
from	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
return	O
size	*(int)
;	O
}	O
int	O
write_file	(*(char),*(char),int,int)->(int)
(	O
const	O
char	O
*	O
const	O
filename	*(char)
,	O
const	O
char	O
*	O
const	O
mode	*(char)
,	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
long	O
size	*(int)
;	O
if	O
(	O
*	O
filename	*(char)
==	O
'!'	O
)	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
+	O
1	int
,	O
"w"	*(char)
)	O
;	O
else	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
strip_escapes	(*(char))->(*(char))
(	O
filename	*(char)
)	O
,	O
mode	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
filename	*(char)
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot open output file"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	*(int)
=	O
write_stream	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,int)->(long)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
from	int
,	O
to	int
)	O
)	O
<	O
0	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
(	O
(	O
*	O
filename	*(char)
==	O
'!'	O
)	O
?	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
:	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
<	O
0	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
filename	*(char)
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot close output file"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
scripted	()->(char)
(	O
)	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%lu\n"	*(char)
,	O
size	*(int)
)	O
;	O
return	O
(	O
from	int
&&	O
from	int
<=	O
to	int
)	O
?	O
to	int
-	O
from	int
+	O
1	int
:	O
0	int
;	O
}	O
