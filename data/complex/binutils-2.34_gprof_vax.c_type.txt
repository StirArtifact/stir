enum	O
opermodes	O
{	O
literal	O
,	O
indexed	O
,	O
reg	O
,	O
regdef	O
,	O
autodec	O
,	O
autoinc	O
,	O
autoincdef	O
,	O
bytedisp	O
,	O
bytedispdef	O
,	O
worddisp	O
,	O
worddispdef	O
,	O
longdisp	O
,	O
longdispdef	O
,	O
immediate	O
,	O
absolute	O
,	O
byterel	O
,	O
bytereldef	O
,	O
wordrel	O
,	O
wordreldef	O
,	O
longrel	O
,	O
longreldef	O
}	O
;	O
typedef	O
enum	O
opermodes	O
operandenum	O
;	O
static	O
Sym	O
indirectchild	O
;	O
static	O
operandenum	O
vax_operandmode	O
(	O
unsigned	O
char	O
*	O
)	O
;	O
static	O
char	O
*	O
vax_operandname	O
(	O
operandenum	O
)	O
;	O
static	O
long	O
vax_operandlength	O
(	O
unsigned	O
char	O
*	O
)	O
;	O
static	O
bfd_signed_vma	long
vax_offset	O
(	O
unsigned	O
char	O
*	O
)	O
;	O
void	O
vax_find_call	O
(	O
Sym	O
*	O
,	O
bfd_vma	long
,	O
bfd_vma	long
)	O
;	O
static	O
operandenum	O
vax_operandmode	O
(	O
unsigned	O
char	O
*	O
modep	O
)	O
{	O
int	O
usesreg	O
=	O
*	O
modep	O
&	O
0xf	int
;	O
switch	O
(	O
(	O
*	O
modep	O
>>	O
4	int
)	O
&	O
0xf	int
)	O
{	O
case	O
0	int
:	O
case	O
1	int
:	O
case	O
2	int
:	O
case	O
3	int
:	O
return	O
literal	O
;	O
case	O
4	int
:	O
return	O
indexed	O
;	O
case	O
5	int
:	O
return	O
reg	O
;	O
case	O
6	int
:	O
return	O
regdef	O
;	O
case	O
7	int
:	O
return	O
autodec	O
;	O
case	O
8	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
autoinc	O
:	O
immediate	O
;	O
case	O
9	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
autoincdef	O
:	O
absolute	O
;	O
case	O
10	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
bytedisp	O
:	O
byterel	O
;	O
case	O
11	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
bytedispdef	O
:	O
bytereldef	O
;	O
case	O
12	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
worddisp	O
:	O
wordrel	O
;	O
case	O
13	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
worddispdef	O
:	O
wordreldef	O
;	O
case	O
14	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
longdisp	O
:	O
longrel	O
;	O
case	O
15	int
:	O
return	O
usesreg	O
!=	O
PC	O
?	O
longdispdef	O
:	O
longreldef	O
;	O
}	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
char	O
*	O
vax_operandname	O
(	O
operandenum	O
mode	*(char)
)	O
{	O
switch	O
(	O
mode	*(char)
)	O
{	O
case	O
literal	O
:	O
return	O
"literal"	*(char)
;	O
case	O
indexed	O
:	O
return	O
"indexed"	*(char)
;	O
case	O
reg	O
:	O
return	O
"register"	*(char)
;	O
case	O
regdef	O
:	O
return	O
"register deferred"	*(char)
;	O
case	O
autodec	O
:	O
return	O
"autodecrement"	*(char)
;	O
case	O
autoinc	O
:	O
return	O
"autoincrement"	*(char)
;	O
case	O
autoincdef	O
:	O
return	O
"autoincrement deferred"	*(char)
;	O
case	O
bytedisp	O
:	O
return	O
"byte displacement"	*(char)
;	O
case	O
bytedispdef	O
:	O
return	O
"byte displacement deferred"	*(char)
;	O
case	O
byterel	O
:	O
return	O
"byte relative"	*(char)
;	O
case	O
bytereldef	O
:	O
return	O
"byte relative deferred"	*(char)
;	O
case	O
worddisp	O
:	O
return	O
"word displacement"	*(char)
;	O
case	O
worddispdef	O
:	O
return	O
"word displacement deferred"	*(char)
;	O
case	O
wordrel	O
:	O
return	O
"word relative"	*(char)
;	O
case	O
wordreldef	O
:	O
return	O
"word relative deferred"	*(char)
;	O
case	O
immediate	O
:	O
return	O
"immediate"	*(char)
;	O
case	O
absolute	O
:	O
return	O
"absolute"	*(char)
;	O
case	O
longdisp	O
:	O
return	O
"long displacement"	*(char)
;	O
case	O
longdispdef	O
:	O
return	O
"long displacement deferred"	*(char)
;	O
case	O
longrel	O
:	O
return	O
"long relative"	*(char)
;	O
case	O
longreldef	O
:	O
return	O
"long relative deferred"	*(char)
;	O
}	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
long	O
vax_operandlength	O
(	O
unsigned	O
char	O
*	O
modep	O
)	O
{	O
switch	O
(	O
vax_operandmode	O
(	O
modep	O
)	O
)	O
{	O
case	O
literal	O
:	O
case	O
reg	O
:	O
case	O
regdef	O
:	O
case	O
autodec	O
:	O
case	O
autoinc	O
:	O
case	O
autoincdef	O
:	O
return	O
1	int
;	O
case	O
bytedisp	O
:	O
case	O
bytedispdef	O
:	O
case	O
byterel	O
:	O
case	O
bytereldef	O
:	O
return	O
2	int
;	O
case	O
worddisp	O
:	O
case	O
worddispdef	O
:	O
case	O
wordrel	O
:	O
case	O
wordreldef	O
:	O
return	O
3	int
;	O
case	O
immediate	O
:	O
case	O
absolute	O
:	O
case	O
longdisp	O
:	O
case	O
longdispdef	O
:	O
case	O
longrel	O
:	O
case	O
longreldef	O
:	O
return	O
5	int
;	O
case	O
indexed	O
:	O
return	O
1	int
+	O
vax_operandlength	O
(	O
modep	O
+	O
1	int
)	O
;	O
}	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
bfd_signed_vma	long
vax_offset	O
(	O
unsigned	O
char	O
*	O
modep	O
)	O
{	O
operandenum	O
mode	*(char)
=	O
vax_operandmode	O
(	O
modep	O
)	O
;	O
++	O
modep	O
;	O
switch	O
(	O
mode	*(char)
)	O
{	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"[reladdr] not relative address\n"	*(char)
)	O
;	O
return	O
0	int
;	O
case	O
byterel	O
:	O
return	O
1	int
+	O
bfd_get_signed_8	O
(	O
core_bfd	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
,	O
modep	O
)	O
;	O
case	O
wordrel	O
:	O
return	O
2	int
+	O
bfd_get_signed_16	O
(	O
core_bfd	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
,	O
modep	O
)	O
;	O
case	O
longrel	O
:	O
return	O
4	int
+	O
bfd_get_signed_32	O
(	O
core_bfd	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
,	O
modep	O
)	O
;	O
}	O
}	O
void	O
vax_find_call	O
(	O
Sym	O
*	O
parent	O
,	O
bfd_vma	long
p_lowpc	O
,	O
bfd_vma	long
p_highpc	O
)	O
{	O
unsigned	O
char	O
*	O
instructp	O
;	O
long	O
length	O
;	O
Sym	O
*	O
child	O
;	O
operandenum	O
mode	*(char)
;	O
operandenum	O
firstmode	O
;	O
bfd_vma	long
pc	O
,	O
destpc	O
;	O
static	O
bfd_boolean	int
inited	O
=	O
FALSE	O
;	O
if	O
(	O
!	O
inited	O
)	O
{	O
inited	O
=	O
TRUE	int
;	O
sym_init	O
(	O
&	O
indirectchild	O
)	O
;	O
indirectchild	O
.	O
cg	O
.	O
prop	O
.	O
fract	O
=	O
1.0	int
;	O
indirectchild	O
.	O
cg	O
.	O
cyc	O
.	O
head	O
=	O
&	O
indirectchild	O
;	O
}	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[findcall] %s: 0x%lx to 0x%lx\n"	*(char)
,	O
parent	O
->	O
name	*(char)
,	O
(	O
unsigned	O
long	O
)	O
p_lowpc	O
,	O
(	O
unsigned	O
long	O
)	O
p_highpc	O
)	O
)	O
;	O
for	O
(	O
pc	O
=	O
p_lowpc	O
;	O
pc	O
<	O
p_highpc	O
;	O
pc	O
+=	O
length	O
)	O
{	O
length	O
=	O
1	int
;	O
instructp	O
=	O
(	O
(	O
unsigned	O
char	O
*	O
)	O
core_text_space	O
+	O
pc	O
-	O
core_text_sect	O
->	O
vma	long
)	O
;	O
if	O
(	O
(	O
*	O
instructp	O
&	O
0xff	int
)	O
==	O
CALLS	O
)	O
{	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[findcall]\t0x%lx:calls"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
pc	O
)	O
)	O
;	O
firstmode	O
=	O
vax_operandmode	O
(	O
instructp	O
+	O
length	O
)	O
;	O
switch	O
(	O
firstmode	O
)	O
{	O
case	O
literal	O
:	O
case	O
immediate	O
:	O
break	O
;	O
default	O
:	O
goto	O
botched	O
;	O
}	O
length	O
+=	O
vax_operandlength	O
(	O
instructp	O
+	O
length	O
)	O
;	O
mode	*(char)
=	O
vax_operandmode	O
(	O
instructp	O
+	O
length	O
)	O
;	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"\tfirst operand is %s"	*(char)
,	O
vax_operandname	O
(	O
firstmode	O
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\tsecond operand is %s\n"	*(char)
,	O
vax_operandname	O
(	O
mode	*(char)
)	O
)	O
)	O
;	O
switch	O
(	O
mode	*(char)
)	O
{	O
case	O
regdef	O
:	O
case	O
bytedispdef	O
:	O
case	O
worddispdef	O
:	O
case	O
longdispdef	O
:	O
case	O
bytereldef	O
:	O
case	O
wordreldef	O
:	O
case	O
longreldef	O
:	O
arc_add	O
(	O
parent	O
,	O
&	O
indirectchild	O
,	O
(	O
unsigned	O
long	O
)	O
0	int
)	O
;	O
length	O
+=	O
vax_operandlength	O
(	O
instructp	O
+	O
length	O
)	O
;	O
continue	O
;	O
case	O
byterel	O
:	O
case	O
wordrel	O
:	O
case	O
longrel	O
:	O
destpc	O
=	O
pc	O
+	O
vax_offset	O
(	O
instructp	O
+	O
length	O
)	O
;	O
if	O
(	O
hist_check_address	O
(	O
destpc	O
)	O
)	O
{	O
child	O
=	O
sym_lookup	O
(	O
&	O
symtab	O
,	O
destpc	O
)	O
;	O
if	O
(	O
child	O
)	O
{	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[findcall]\tdestpc 0x%lx"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
destpc	O
)	O
;	O
printf	(*(char))->(int)
(	O
" child->name %s"	*(char)
,	O
child	O
->	O
name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
" child->addr 0x%lx\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
child	O
->	O
addr	*(void)
)	O
;	O
)	O
;	O
if	O
(	O
child	O
->	O
addr	*(void)
==	O
destpc	O
)	O
{	O
arc_add	O
(	O
parent	O
,	O
child	O
,	O
(	O
unsigned	O
long	O
)	O
0	int
)	O
;	O
length	O
+=	O
vax_operandlength	O
(	O
instructp	O
+	O
length	O
)	O
;	O
continue	O
;	O
}	O
}	O
goto	O
botched	O
;	O
}	O
goto	O
botched	O
;	O
default	O
:	O
botched	O
:	O
DBG	O
(	O
CALLDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[findcall]\tbut it's a botch\n"	*(char)
)	O
)	O
;	O
length	O
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
}	O
}	O
