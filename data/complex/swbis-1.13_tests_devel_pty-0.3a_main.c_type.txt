static	O
void	O
set_noecho	(int)->(void)
(	O
int	O
)	O
;	O
int	O
do_driver	(*(char),*(int),*(int))->(int)
(	O
char	O
*	O
,	O
int	O
*	O
,	O
int	O
*	O
)	O
;	O
int	O
loop	(int,int,int,int,int,int,*(int),*(int),int)->(int)
(	O
int	O
,	O
int	O
,	O
int	O
,	O
int	O
,	O
int	O
,	O
int	O
,	O
int	O
*	O
,	O
int	O
*	O
,	O
int	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
ret	int
;	O
int	O
xret	int
;	O
int	O
loopcount	int
=	O
0	int
;	O
int	O
fdm	int
,	O
c	int
,	O
ignoreeof	int
,	O
interactive	int
,	O
noecho	int
,	O
verbose	int
;	O
pid_t	int
apid	int
;	O
char	O
*	O
driver	*(char)
,	O
slave_name	array(char)
[	O
20	int
]	O
;	O
struct	O
termios	struct(int,int,int,int,char,array(char),int,int)
orig_termios	struct(int,int,int,int,char,array(char),int,int)
;	O
struct	O
winsize	struct(short,short,short,short)
size	struct(short,short,short,short)
;	O
pid_t	int
driver_pid	int
=	O
0	int
;	O
int	O
pgmexitval	int
=	O
99	int
;	O
int	O
exitval	int
=	O
99	int
;	O
int	O
waitret	int
;	O
int	O
status	int
;	O
int	O
ofd	int
,	O
ifd	int
;	O
interactive	int
=	O
isatty	(int)->(int)
(	O
STDIN_FILENO	int
)	O
;	O
ignoreeof	int
=	O
0	int
;	O
noecho	int
=	O
0	int
;	O
verbose	int
=	O
0	int
;	O
driver	*(char)
=	O
NULL	O
;	O
opterr	int
=	O
0	int
;	O
while	O
(	O
(	O
c	int
=	O
getopt	(int,*(*(char)),*(char))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"d:einv"	*(char)
)	O
)	O
!=	O
EOF	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
'd'	O
:	O
driver	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'e'	O
:	O
noecho	int
=	O
1	int
;	O
break	O
;	O
case	O
'i'	O
:	O
ignoreeof	int
=	O
1	int
;	O
break	O
;	O
case	O
'n'	O
:	O
interactive	int
=	O
0	int
;	O
break	O
;	O
case	O
'v'	O
:	O
verbose	int
=	O
1	int
;	O
break	O
;	O
case	O
'?'	O
:	O
err_quit	(*(char))->(void)
(	O
"unrecognized option: -%c"	*(char)
,	O
optopt	int
)	O
;	O
}	O
}	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"usage: pty [ -d driver -weinv ] program [ arg ... ]\n"	*(char)
"	-d pgm   execute driver and use output as program input.\n"	*(char)
"	         Note: Sometimes a delay is needed the driver pgm.\n"	*(char)
"	-e     no echo.\n"	*(char)
"	-i     ignore EOF.\n"	*(char)
"	-n     non interactive.\n"	*(char)
"	-v     be verbose.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
interactive	int
)	O
{	O
if	O
(	O
tcgetattr	(int,*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
STDIN_FILENO	int
,	O
&	O
orig_termios	struct(int,int,int,int,char,array(char),int,int)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"tcgetattr error on stdin"	*(char)
)	O
;	O
if	O
(	O
ioctl	(int,long)->(int)
(	O
STDIN_FILENO	int
,	O
TIOCGWINSZ	int
,	O
(	O
char	O
*	O
)	O
&	O
size	struct(short,short,short,short)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"TIOCGWINSZ error"	*(char)
)	O
;	O
apid	int
=	O
pty_fork	(*(int),*(char),*(struct(int,int,int,int,char,array(char),int,int)),*(struct(short,short,short,short)))->(int)
(	O
&	O
fdm	int
,	O
slave_name	array(char)
,	O
&	O
orig_termios	struct(int,int,int,int,char,array(char),int,int)
,	O
&	O
size	struct(short,short,short,short)
)	O
;	O
}	O
else	O
{	O
apid	int
=	O
pty_fork	(*(int),*(char),*(struct(int,int,int,int,char,array(char),int,int)),*(struct(short,short,short,short)))->(int)
(	O
&	O
fdm	int
,	O
slave_name	array(char)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
if	O
(	O
apid	int
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"fork error"	*(char)
)	O
;	O
else	O
if	O
(	O
apid	int
==	O
0	int
)	O
{	O
if	O
(	O
noecho	int
)	O
set_noecho	(int)->(void)
(	O
STDIN_FILENO	int
)	O
;	O
if	O
(	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	array(*(char))
[	O
optind	int
]	O
,	O
&	O
argv	array(*(char))
[	O
optind	int
]	O
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"can't execute: %s"	*(char)
,	O
argv	array(*(char))
[	O
optind	int
]	O
)	O
;	O
_exit	(int)->(void)
(	O
23	int
)	O
;	O
}	O
if	O
(	O
verbose	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"slave name = %s\n"	*(char)
,	O
slave_name	array(char)
)	O
;	O
if	O
(	O
driver	*(char)
!=	O
NULL	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"driver = %s\n"	*(char)
,	O
driver	*(char)
)	O
;	O
}	O
if	O
(	O
interactive	int
&&	O
driver	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
tty_raw	(int)->(int)
(	O
STDIN_FILENO	int
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"tty_raw error"	*(char)
)	O
;	O
if	O
(	O
atexit	(*(()->(void)))->(int)
(	O
tty_atexit	()->(void)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"atexit error"	*(char)
)	O
;	O
}	O
if	O
(	O
driver	*(char)
)	O
{	O
driver_pid	int
=	O
(	O
pid_t	int
)	O
do_driver	(*(char),*(int),*(int))->(int)
(	O
driver	*(char)
,	O
&	O
ofd	int
,	O
&	O
ifd	int
)	O
;	O
xret	int
=	O
loop	(int,int,int,int,int,int,*(int),*(int),int)->(int)
(	O
fdm	int
,	O
ofd	int
,	O
STDOUT_FILENO	int
,	O
fdm	int
,	O
ignoreeof	int
,	O
apid	int
,	O
&	O
waitret	int
,	O
&	O
status	int
,	O
verbose	int
)	O
;	O
close	(int)->(int)
(	O
ifd	int
)	O
;	O
close	(int)->(int)
(	O
ofd	int
)	O
;	O
close	(int)->(int)
(	O
fdm	int
)	O
;	O
}	O
else	O
{	O
ofd	int
=	O
STDOUT_FILENO	int
;	O
ifd	int
=	O
STDIN_FILENO	int
;	O
xret	int
=	O
loop	(int,int,int,int,int,int,*(int),*(int),int)->(int)
(	O
ofd	int
,	O
fdm	int
,	O
fdm	int
,	O
ifd	int
,	O
ignoreeof	int
,	O
apid	int
,	O
&	O
waitret	int
,	O
&	O
status	int
,	O
verbose	int
)	O
;	O
close	(int)->(int)
(	O
fdm	int
)	O
;	O
}	O
if	O
(	O
waitret	int
>	O
0	int
)	O
{	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
pgmexitval	int
=	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
}	O
else	O
{	O
pgmexitval	int
=	O
220	int
;	O
}	O
}	O
if	O
(	O
driver_pid	int
)	O
{	O
if	O
(	O
kill	(int,int)->(int)
(	O
driver_pid	int
,	O
SIGTERM	int
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"kill error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
if	O
(	O
driver_pid	int
)	O
{	O
loopcount	int
=	O
0	int
;	O
ret	int
=	O
waitpid	(int,*(int),int)->(int)
(	O
driver_pid	int
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
;	O
if	O
(	O
verbose	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"HERE 1\n"	*(char)
)	O
;	O
while	O
(	O
ret	int
==	O
0	int
&&	O
loopcount	int
<	O
30	int
)	O
{	O
sleep	(int)->(int)
(	O
1	int
)	O
;	O
loopcount	int
++	O
;	O
if	O
(	O
verbose	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"HERE 2 loopcount = %d\n"	*(char)
,	O
loopcount	int
)	O
;	O
ret	int
=	O
waitpid	(int,*(int),int)->(int)
(	O
driver_pid	int
,	O
&	O
status	int
,	O
WNOHANG	int
)	O
;	O
}	O
if	O
(	O
ret	int
>	O
0	int
)	O
{	O
if	O
(	O
verbose	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"HERE 3 \n"	*(char)
)	O
;	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
exitval	int
=	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
}	O
else	O
{	O
exitval	int
=	O
240	int
;	O
exitval	int
=	O
pgmexitval	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
verbose	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"HERE 4 \n"	*(char)
)	O
;	O
kill	(int,int)->(int)
(	O
driver_pid	int
,	O
SIGTERM	int
)	O
;	O
waitpid	(int,*(int),int)->(int)
(	O
driver_pid	int
,	O
&	O
status	int
,	O
0	int
)	O
;	O
if	O
(	O
WIFEXITED	O
(	O
status	int
)	O
)	O
{	O
exitval	int
=	O
WEXITSTATUS	O
(	O
status	int
)	O
;	O
}	O
else	O
{	O
exitval	int
=	O
241	int
;	O
exitval	int
=	O
pgmexitval	int
;	O
}	O
}	O
}	O
else	O
{	O
exitval	int
=	O
pgmexitval	int
;	O
}	O
if	O
(	O
driver_pid	int
)	O
{	O
}	O
exit	(int)->(void)
(	O
exitval	int
)	O
;	O
}	O
static	O
void	O
set_noecho	(int)->(void)
(	O
int	O
fd	int
)	O
{	O
struct	O
termios	struct(int,int,int,int,char,array(char),int,int)
stermios	struct(int,int,int,int,char,array(char),int,int)
;	O
if	O
(	O
tcgetattr	(int,*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
fd	int
,	O
&	O
stermios	struct(int,int,int,int,char,array(char),int,int)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"tcgetattr error"	*(char)
)	O
;	O
stermios	struct(int,int,int,int,char,array(char),int,int)
.	O
c_lflag	int
&=	O
~	O
(	O
ECHO	int
|	O
ECHOE	int
|	O
ECHOK	int
|	O
ECHONL	int
)	O
;	O
stermios	struct(int,int,int,int,char,array(char),int,int)
.	O
c_oflag	int
&=	O
~	O
(	O
ONLCR	int
)	O
;	O
if	O
(	O
tcsetattr	(int,int,*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
fd	int
,	O
TCSANOW	int
,	O
&	O
stermios	struct(int,int,int,int,char,array(char),int,int)
)	O
<	O
0	int
)	O
err_sys	(*(char))->(void)
(	O
"tcsetattr error"	*(char)
)	O
;	O
}	O
