static	O
double	O
shi_data	array(double)
[	O
7	int
]	O
=	O
{	O
0.0078372685688900950695	int
,	O
0.0039227664934234563973	int
,	O
0.0000041346787887617267	int
,	O
0.0000000024707480372883	int
,	O
0.0000000000009379295591	int
,	O
0.0000000000000002451817	int
,	O
0.0000000000000000000467	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
shi_cs	struct(*(double),int,double,double,int)
=	O
{	O
shi_data	array(double)
,	O
6	int
,	O
-	O
1	int
,	O
1	int
,	O
6	int
}	O
;	O
int	O
gsl_sf_Shi_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
const	O
double	O
xsml	double
=	O
GSL_SQRT_DBL_EPSILON	int
;	O
const	O
double	O
ax	double
=	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
if	O
(	O
ax	double
<	O
xsml	double
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<=	O
0.375	int
)	O
{	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
shi_cs	struct(*(double),int,double,double,int)
,	O
128.0	int
*	O
x	double
*	O
x	double
/	O
9.0	int
-	O
1.0	int
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
(	O
1.0	int
+	O
result_c	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
x	double
*	O
result_c	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
result_Ei	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_E1	struct(double,double)
;	O
int	O
status_Ei	int
=	O
gsl_sf_expint_Ei_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result_Ei	struct(double,double)
)	O
;	O
int	O
status_E1	int
=	O
gsl_sf_expint_E1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result_E1	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.5	int
*	O
(	O
result_Ei	struct(double,double)
.	O
val	double
+	O
result_E1	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.5	int
*	O
(	O
result_Ei	struct(double,double)
.	O
err	double
+	O
result_E1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
status_Ei	int
==	O
GSL_EUNDRFLW	int
&&	O
status_E1	int
==	O
GSL_EUNDRFLW	int
)	O
{	O
GSL_ERROR	O
(	O
"underflow"	*(char)
,	O
GSL_EUNDRFLW	int
)	O
;	O
}	O
else	O
if	O
(	O
status_Ei	int
==	O
GSL_EOVRFLW	int
||	O
status_E1	int
==	O
GSL_EOVRFLW	int
)	O
{	O
GSL_ERROR	O
(	O
"overflow"	*(char)
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
else	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
}	O
int	O
gsl_sf_Chi_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
gsl_sf_result	struct(double,double)
result_Ei	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_E1	struct(double,double)
;	O
int	O
status_Ei	int
=	O
gsl_sf_expint_Ei_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result_Ei	struct(double,double)
)	O
;	O
int	O
status_E1	int
=	O
gsl_sf_expint_E1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result_E1	struct(double,double)
)	O
;	O
if	O
(	O
status_Ei	int
==	O
GSL_EDOM	int
||	O
status_E1	int
==	O
GSL_EDOM	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
status_Ei	int
==	O
GSL_EUNDRFLW	int
&&	O
status_E1	int
==	O
GSL_EUNDRFLW	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
status_Ei	int
==	O
GSL_EOVRFLW	int
||	O
status_E1	int
==	O
GSL_EOVRFLW	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.5	int
*	O
(	O
result_Ei	struct(double,double)
.	O
val	double
-	O
result_E1	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.5	int
*	O
(	O
result_Ei	struct(double,double)
.	O
err	double
+	O
result_E1	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
double	O
gsl_sf_Shi	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_Shi_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_Chi	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_Chi_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
