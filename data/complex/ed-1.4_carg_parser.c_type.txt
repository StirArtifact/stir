void	O
*	O
ap_resize_buffer	(*(void),int)->(*(void))
(	O
void	O
*	O
buf	*(void)
,	O
const	O
int	O
min_size	int
)	O
{	O
if	O
(	O
buf	*(void)
)	O
buf	*(void)
=	O
realloc	(*(void),long)->(*(void))
(	O
buf	*(void)
,	O
min_size	int
)	O
;	O
else	O
buf	*(void)
=	O
malloc	(long)->(*(void))
(	O
min_size	int
)	O
;	O
return	O
buf	*(void)
;	O
}	O
char	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
int	O
code	int
,	O
const	O
char	O
*	O
argument	*(char)
)	O
{	O
const	O
int	O
len	int
=	O
strlen	(*(char))->(long)
(	O
argument	*(char)
)	O
;	O
ap_Record	struct(int,*(char))
*	O
p	*(struct(int,*(char)))
;	O
void	O
*	O
tmp	*(void)
=	O
ap_resize_buffer	(*(void),int)->(*(void))
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
,	O
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
ap_Record	struct(int,*(char))
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(void)
)	O
return	O
0	int
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
=	O
(	O
ap_Record	struct(int,*(char))
*	O
)	O
tmp	*(void)
;	O
p	*(struct(int,*(char)))
=	O
&	O
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
[	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
]	O
)	O
;	O
p	*(struct(int,*(char)))
->	O
code	int
=	O
code	int
;	O
p	*(struct(int,*(char)))
->	O
argument	*(char)
=	O
0	int
;	O
tmp	*(void)
=	O
ap_resize_buffer	(*(void),int)->(*(void))
(	O
p	*(struct(int,*(char)))
->	O
argument	*(char)
,	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	*(void)
)	O
return	O
0	int
;	O
p	*(struct(int,*(char)))
->	O
argument	*(char)
=	O
(	O
char	O
*	O
)	O
tmp	*(void)
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
p	*(struct(int,*(char)))
->	O
argument	*(char)
,	O
argument	*(char)
,	O
len	int
+	O
1	int
)	O
;	O
++	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
;	O
return	O
1	int
;	O
}	O
char	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
char	O
*	O
msg	*(char)
)	O
{	O
const	O
int	O
len	int
=	O
strlen	(*(char))->(long)
(	O
msg	*(char)
)	O
;	O
void	O
*	O
tmp	*(void)
=	O
ap_resize_buffer	(*(void),int)->(*(void))
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
,	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error_size	int
+	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
tmp	*(void)
)	O
return	O
0	int
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
=	O
(	O
char	O
*	O
)	O
tmp	*(void)
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
+	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error_size	int
,	O
msg	*(char)
,	O
len	int
+	O
1	int
)	O
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error_size	int
+=	O
len	int
;	O
return	O
1	int
;	O
}	O
void	O
free_data	(*(struct(*(struct(int,*`)),*(char),int,int)))->(void)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
;	O
++	O
i	int
)	O
free	(*(void))->(void)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
[	O
i	int
]	O
.	O
argument	*(char)
)	O
;	O
if	O
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
)	O
{	O
free	(*(void))->(void)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
)	O
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
=	O
0	int
;	O
}	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
=	O
0	int
;	O
}	O
char	O
parse_long_option	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char),*(char),array(struct(int,*(char),enum(int,int,int))),*(int))->(char)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
char	O
*	O
const	O
opt	*(char)
,	O
const	O
char	O
*	O
const	O
arg	*(char)
,	O
const	O
ap_Option	struct(int,*(char),enum(int,int,int))
options	array(struct(int,*(char),enum(int,int,int)))
[	O
]	O
,	O
int	O
*	O
argindp	*(int)
)	O
{	O
unsigned	O
int	O
len	int
;	O
int	O
index	(*(char),int)->(*(char))
=	O
-	O
1	int
;	O
int	O
i	int
;	O
char	O
exact	char
=	O
0	int
,	O
ambig	char
=	O
0	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
opt	*(char)
[	O
len	int
+	O
2	int
]	O
&&	O
opt	*(char)
[	O
len	int
+	O
2	int
]	O
!=	O
'='	O
;	O
++	O
len	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
code	int
!=	O
0	int
;	O
++	O
i	int
)	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
name	*(char)
&&	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
name	*(char)
,	O
&	O
opt	*(char)
[	O
2	int
]	O
,	O
len	int
)	O
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
name	*(char)
)	O
==	O
len	int
)	O
{	O
index	(*(char),int)->(*(char))
=	O
i	int
;	O
exact	char
=	O
1	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
0	int
)	O
index	(*(char),int)->(*(char))
=	O
i	int
;	O
else	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
code	int
!=	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
code	int
||	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
has_arg	enum(int,int,int)
!=	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
has_arg	enum(int,int,int)
)	O
ambig	char
=	O
1	int
;	O
}	O
if	O
(	O
ambig	char
&&	O
!	O
exact	char
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"option `"	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
opt	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"' is ambiguous"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
0	int
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"unrecognized option `"	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
opt	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"'"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
++	O
*	O
argindp	*(int)
;	O
if	O
(	O
opt	*(char)
[	O
len	int
+	O
2	int
]	O
)	O
{	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
has_arg	enum(int,int,int)
==	O
ap_no	int
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"option `--"	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
name	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"' doesn't allow an argument"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
has_arg	enum(int,int,int)
==	O
ap_yes	int
&&	O
!	O
opt	*(char)
[	O
len	int
+	O
3	int
]	O
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"option `--"	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
name	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"' requires an argument"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
return	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
code	int
,	O
&	O
opt	*(char)
[	O
len	int
+	O
3	int
]	O
)	O
;	O
}	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
has_arg	enum(int,int,int)
==	O
ap_yes	int
)	O
{	O
if	O
(	O
!	O
arg	*(char)
||	O
!	O
arg	*(char)
[	O
0	int
]	O
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"option `--"	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
name	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"' requires an argument"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
++	O
*	O
argindp	*(int)
;	O
return	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
code	int
,	O
arg	*(char)
)	O
;	O
}	O
return	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
code	int
,	O
""	*(char)
)	O
;	O
}	O
char	O
parse_short_option	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char),*(char),array(struct(int,*(char),enum(int,int,int))),*(int))->(char)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
char	O
*	O
const	O
opt	*(char)
,	O
const	O
char	O
*	O
const	O
arg	*(char)
,	O
const	O
ap_Option	struct(int,*(char),enum(int,int,int))
options	array(struct(int,*(char),enum(int,int,int)))
[	O
]	O
,	O
int	O
*	O
argindp	*(int)
)	O
{	O
int	O
cind	int
=	O
1	int
;	O
while	O
(	O
cind	int
>	O
0	int
)	O
{	O
int	O
index	(*(char),int)->(*(char))
=	O
-	O
1	int
;	O
int	O
i	int
;	O
const	O
unsigned	O
char	O
code	int
=	O
opt	*(char)
[	O
cind	int
]	O
;	O
const	O
char	O
code_str	array(char)
[	O
2	int
]	O
=	O
{	O
code	int
,	O
0	int
}	O
;	O
if	O
(	O
code	int
!=	O
0	int
)	O
for	O
(	O
i	int
=	O
0	int
;	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
code	int
;	O
++	O
i	int
)	O
if	O
(	O
code	int
==	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
i	int
]	O
.	O
code	int
)	O
{	O
index	(*(char),int)->(*(char))
=	O
i	int
;	O
break	O
;	O
}	O
if	O
(	O
index	(*(char),int)->(*(char))
<	O
0	int
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"invalid option -- "	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
code_str	array(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
opt	*(char)
[	O
++	O
cind	int
]	O
==	O
0	int
)	O
{	O
++	O
*	O
argindp	*(int)
;	O
cind	int
=	O
0	int
;	O
}	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
has_arg	enum(int,int,int)
!=	O
ap_no	int
&&	O
cind	int
>	O
0	int
&&	O
opt	*(char)
[	O
cind	int
]	O
)	O
{	O
if	O
(	O
!	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
code	int
,	O
&	O
opt	*(char)
[	O
cind	int
]	O
)	O
)	O
return	O
0	int
;	O
++	O
*	O
argindp	*(int)
;	O
cind	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
options	array(struct(int,*(char),enum(int,int,int)))
[	O
index	(*(char),int)->(*(char))
]	O
.	O
has_arg	enum(int,int,int)
==	O
ap_yes	int
)	O
{	O
if	O
(	O
!	O
arg	*(char)
||	O
!	O
arg	*(char)
[	O
0	int
]	O
)	O
{	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
"option requires an argument -- "	*(char)
)	O
;	O
add_error	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
code_str	array(char)
)	O
;	O
return	O
1	int
;	O
}	O
++	O
*	O
argindp	*(int)
;	O
cind	int
=	O
0	int
;	O
if	O
(	O
!	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
code	int
,	O
arg	*(char)
)	O
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
code	int
,	O
""	*(char)
)	O
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
char	O
ap_init	(*(struct(*(struct(int,*`)),*(char),int,int)),int,array(*(char)),array(struct(int,*(char),enum(int,int,int))),char)->(char)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
argv	array(*(char))
[	O
]	O
,	O
const	O
ap_Option	struct(int,*(char),enum(int,int,int))
options	array(struct(int,*(char),enum(int,int,int)))
[	O
]	O
,	O
const	O
char	O
in_order	char
)	O
{	O
const	O
char	O
*	O
*	O
non_options	*(*(char))
=	O
0	int
;	O
int	O
non_options_size	int
=	O
0	int
;	O
int	O
argind	int
=	O
1	int
;	O
int	O
i	int
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
=	O
0	int
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
=	O
0	int
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
=	O
0	int
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error_size	int
=	O
0	int
;	O
if	O
(	O
argc	int
<	O
2	int
||	O
!	O
argv	array(*(char))
||	O
!	O
options	array(struct(int,*(char),enum(int,int,int)))
)	O
return	O
1	int
;	O
while	O
(	O
argind	int
<	O
argc	int
)	O
{	O
const	O
unsigned	O
char	O
ch1	char
=	O
argv	array(*(char))
[	O
argind	int
]	O
[	O
0	int
]	O
;	O
const	O
unsigned	O
char	O
ch2	char
=	O
(	O
ch1	char
?	O
argv	array(*(char))
[	O
argind	int
]	O
[	O
1	int
]	O
:	O
0	int
)	O
;	O
if	O
(	O
ch1	char
==	O
'-'	O
&&	O
ch2	char
)	O
{	O
const	O
char	O
*	O
const	O
opt	*(char)
=	O
argv	array(*(char))
[	O
argind	int
]	O
;	O
const	O
char	O
*	O
const	O
arg	*(char)
=	O
(	O
argind	int
+	O
1	int
<	O
argc	int
)	O
?	O
argv	array(*(char))
[	O
argind	int
+	O
1	int
]	O
:	O
0	int
;	O
if	O
(	O
ch2	char
==	O
'-'	O
)	O
{	O
if	O
(	O
!	O
argv	array(*(char))
[	O
argind	int
]	O
[	O
2	int
]	O
)	O
{	O
++	O
argind	int
;	O
break	O
;	O
}	O
else	O
if	O
(	O
!	O
parse_long_option	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char),*(char),array(struct(int,*(char),enum(int,int,int))),*(int))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
opt	*(char)
,	O
arg	*(char)
,	O
options	array(struct(int,*(char),enum(int,int,int)))
,	O
&	O
argind	int
)	O
)	O
return	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
parse_short_option	(*(struct(*(struct(int,*`)),*(char),int,int)),*(char),*(char),array(struct(int,*(char),enum(int,int,int))),*(int))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
opt	*(char)
,	O
arg	*(char)
,	O
options	array(struct(int,*(char),enum(int,int,int)))
,	O
&	O
argind	int
)	O
)	O
return	O
0	int
;	O
if	O
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
)	O
break	O
;	O
}	O
else	O
{	O
if	O
(	O
!	O
in_order	char
)	O
{	O
void	O
*	O
tmp	*(void)
=	O
ap_resize_buffer	(*(void),int)->(*(void))
(	O
non_options	*(*(char))
,	O
(	O
non_options_size	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
*	O
non_options	*(*(char))
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(void)
)	O
return	O
0	int
;	O
non_options	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
tmp	*(void)
;	O
non_options	*(*(char))
[	O
non_options_size	int
++	O
]	O
=	O
argv	array(*(char))
[	O
argind	int
++	O
]	O
;	O
}	O
else	O
if	O
(	O
!	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
0	int
,	O
argv	array(*(char))
[	O
argind	int
++	O
]	O
)	O
)	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
)	O
free_data	(*(struct(*(struct(int,*`)),*(char),int,int)))->(void)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
;	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
non_options_size	int
;	O
++	O
i	int
)	O
if	O
(	O
!	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
0	int
,	O
non_options	*(*(char))
[	O
i	int
]	O
)	O
)	O
return	O
0	int
;	O
while	O
(	O
argind	int
<	O
argc	int
)	O
if	O
(	O
!	O
push_back_record	(*(struct(*(struct(int,*`)),*(char),int,int)),int,*(char))->(char)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
0	int
,	O
argv	array(*(char))
[	O
argind	int
++	O
]	O
)	O
)	O
return	O
0	int
;	O
}	O
if	O
(	O
non_options	*(*(char))
)	O
free	(*(void))->(void)
(	O
non_options	*(*(char))
)	O
;	O
return	O
1	int
;	O
}	O
void	O
ap_free	(*(struct(*(struct(int,*`)),*(char),int,int)))->(void)
(	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
{	O
free_data	(*(struct(*(struct(int,*`)),*(char),int,int)))->(void)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
;	O
if	O
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
)	O
;	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
=	O
0	int
;	O
}	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error_size	int
=	O
0	int
;	O
}	O
const	O
char	O
*	O
ap_error	(*(struct(*(struct(int,*`)),*(char),int,int)))->(*(char))
(	O
const	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
{	O
return	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
error	*(char)
;	O
}	O
int	O
ap_arguments	(*(struct(*(struct(int,*`)),*(char),int,int)))->(int)
(	O
const	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
{	O
return	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data_size	int
;	O
}	O
int	O
ap_code	(*(struct(*(struct(int,*`)),*(char),int,int)),int)->(int)
(	O
const	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
int	O
i	int
)	O
{	O
if	O
(	O
i	int
>=	O
0	int
&&	O
i	int
<	O
ap_arguments	(*(struct(*(struct(int,*`)),*(char),int,int)))->(int)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
)	O
return	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
[	O
i	int
]	O
.	O
code	int
;	O
else	O
return	O
0	int
;	O
}	O
const	O
char	O
*	O
ap_argument	(*(struct(*(struct(int,*`)),*(char),int,int)),int)->(*(char))
(	O
const	O
Arg_parser	struct(*(struct(int,*(char))),*(char),int,int)
*	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
,	O
const	O
int	O
i	int
)	O
{	O
if	O
(	O
i	int
>=	O
0	int
&&	O
i	int
<	O
ap_arguments	(*(struct(*(struct(int,*`)),*(char),int,int)))->(int)
(	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
)	O
)	O
return	O
ap	*(struct(*(struct(int,*(char))),*(char),int,int))
->	O
data	*(struct(int,*(char)))
[	O
i	int
]	O
.	O
argument	*(char)
;	O
else	O
return	O
""	*(char)
;	O
}	O
