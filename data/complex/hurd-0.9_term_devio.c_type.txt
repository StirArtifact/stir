static	O
int	O
output_pending	int
;	O
static	O
int	O
input_pending	int
;	O
static	O
enum	O
{	O
NOTPENDING	int
,	O
INITIAL	int
,	O
FAKE	int
,	O
}	O
open_pending	enum(int,int,int)
;	O
static	O
char	O
pending_output	char
[	O
IO_INBAND_MAX	O
]	O
;	O
static	O
int	O
npending_output	int
;	O
static	O
struct	O
port_class	O
*	O
phys_reply_class	*(struct)
;	O
static	O
device_t	O
phys_device	int
=	O
MACH_PORT_NULL	O
;	O
static	O
mach_port_t	O
phys_reply_writes	int
=	O
MACH_PORT_NULL	O
;	O
static	O
mach_port_t	O
phys_reply	int
=	O
MACH_PORT_NULL	O
;	O
static	O
struct	O
port_info	O
*	O
phys_reply_writes_pi	*(struct)
;	O
static	O
struct	O
port_info	O
*	O
phys_reply_pi	*(struct)
;	O
static	O
device_t	O
device_master	int
;	O
static	O
int	O
output_stopped	int
;	O
static	O
int	O
char_size_mask_xxx	int
=	O
0xff	int
;	O
static	O
error_t	int
devio_desert_dtr	()->(int)
(	O
)	O
;	O
static	O
error_t	int
devio_init	()->(int)
(	O
void	O
)	O
{	O
mach_port_t	O
host_priv	O
;	O
error_t	int
err	int
;	O
err	int
=	O
get_privileged_ports	()->(int)
(	O
&	O
host_priv	O
,	O
&	O
device_master	int
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
host_priv	O
)	O
;	O
if	O
(	O
!	O
phys_reply_class	*(struct)
)	O
phys_reply_class	*(struct)
=	O
ports_create_class	()->(int)
(	O
0	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_fini	()->(int)
(	O
void	O
)	O
{	O
if	O
(	O
phys_reply_pi	*(struct)
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_reply	int
)	O
;	O
phys_reply	int
=	O
MACH_PORT_NULL	O
;	O
ports_port_deref	()->(int)
(	O
phys_reply_pi	*(struct)
)	O
;	O
phys_reply_pi	*(struct)
=	O
0	int
;	O
}	O
if	O
(	O
phys_reply_writes_pi	*(struct)
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_reply_writes	int
)	O
;	O
phys_reply_writes	int
=	O
MACH_PORT_NULL	O
;	O
ports_port_deref	()->(int)
(	O
phys_reply_writes_pi	*(struct)
)	O
;	O
phys_reply_writes_pi	*(struct)
=	O
0	int
;	O
}	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_device	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
device_master	int
)	O
;	O
device_master	int
=	O
MACH_PORT_NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
real_speed_to_bogus_speed	(int,*(int))->(int)
(	O
int	O
rspeed	int
,	O
int	O
*	O
bspeed	*(int)
)	O
{	O
switch	O
(	O
rspeed	int
)	O
{	O
case	O
0	int
:	O
*	O
bspeed	*(int)
=	O
B0	int
;	O
break	O
;	O
case	O
50	int
:	O
*	O
bspeed	*(int)
=	O
B50	O
;	O
break	O
;	O
case	O
75	int
:	O
*	O
bspeed	*(int)
=	O
B75	O
;	O
break	O
;	O
case	O
110	int
:	O
*	O
bspeed	*(int)
=	O
B110	O
;	O
break	O
;	O
case	O
134	int
:	O
*	O
bspeed	*(int)
=	O
B134	O
;	O
break	O
;	O
case	O
150	int
:	O
*	O
bspeed	*(int)
=	O
B150	O
;	O
break	O
;	O
case	O
200	int
:	O
*	O
bspeed	*(int)
=	O
B200	O
;	O
break	O
;	O
case	O
300	int
:	O
*	O
bspeed	*(int)
=	O
B300	O
;	O
break	O
;	O
case	O
600	int
:	O
*	O
bspeed	*(int)
=	O
B600	O
;	O
break	O
;	O
case	O
1200	int
:	O
*	O
bspeed	*(int)
=	O
B1200	O
;	O
break	O
;	O
case	O
1800	int
:	O
*	O
bspeed	*(int)
=	O
B1800	O
;	O
break	O
;	O
case	O
2400	int
:	O
*	O
bspeed	*(int)
=	O
B2400	O
;	O
break	O
;	O
case	O
4800	int
:	O
*	O
bspeed	*(int)
=	O
B4800	O
;	O
break	O
;	O
case	O
9600	int
:	O
*	O
bspeed	*(int)
=	O
B9600	O
;	O
break	O
;	O
case	O
19200	int
:	O
*	O
bspeed	*(int)
=	O
EXTA	O
;	O
break	O
;	O
case	O
38400	int
:	O
*	O
bspeed	*(int)
=	O
EXTB	O
;	O
break	O
;	O
default	O
:	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
bogus_speed_to_real_speed	(int)->(int)
(	O
int	O
bspeed	*(int)
)	O
{	O
switch	O
(	O
bspeed	*(int)
)	O
{	O
case	O
B0	int
:	O
default	O
:	O
return	O
0	int
;	O
case	O
B50	O
:	O
return	O
50	int
;	O
case	O
B75	O
:	O
return	O
75	int
;	O
case	O
B110	O
:	O
return	O
110	int
;	O
case	O
B134	O
:	O
return	O
134	int
;	O
case	O
B150	O
:	O
return	O
150	int
;	O
case	O
B200	O
:	O
return	O
200	int
;	O
case	O
B300	O
:	O
return	O
300	int
;	O
case	O
B600	O
:	O
return	O
600	int
;	O
case	O
B1200	O
:	O
return	O
1200	int
;	O
case	O
B1800	O
:	O
return	O
1800	int
;	O
case	O
B2400	O
:	O
return	O
2400	int
;	O
case	O
B4800	O
:	O
return	O
4800	int
;	O
case	O
B9600	O
:	O
return	O
9600	int
;	O
case	O
EXTA	O
:	O
return	O
19200	int
;	O
case	O
EXTB	O
:	O
return	O
38400	int
;	O
}	O
}	O
static	O
error_t	int
devio_start_output	()->(int)
(	O
)	O
{	O
char	O
*	O
cp	*(char)
;	O
int	O
size	int
;	O
error_t	int
err	int
;	O
size	int
=	O
qsize	()->(int)
(	O
outputq	O
)	O
;	O
if	O
(	O
!	O
size	int
||	O
output_pending	int
||	O
(	O
termflags	O
&	O
USER_OUTPUT_SUSP	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
output_stopped	int
)	O
{	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_START	O
,	O
0	int
,	O
0	int
)	O
;	O
output_stopped	int
=	O
0	int
;	O
}	O
if	O
(	O
size	int
+	O
npending_output	int
>	O
IO_INBAND_MAX	O
)	O
size	int
=	O
IO_INBAND_MAX	O
-	O
npending_output	int
;	O
cp	*(char)
=	O
pending_output	char
+	O
npending_output	int
;	O
npending_output	int
+=	O
size	int
;	O
while	O
(	O
size	int
--	O
)	O
*	O
cp	*(char)
++	O
=	O
dequeue	()->(int)
(	O
outputq	O
)	O
;	O
err	int
=	O
device_write_request_inband	()->(int)
(	O
phys_device	int
,	O
phys_reply_writes	int
,	O
D_NOWAIT	O
,	O
0	int
,	O
pending_output	char
,	O
npending_output	int
)	O
;	O
if	O
(	O
err	int
==	O
MACH_SEND_INVALID_DEST	O
)	O
devio_desert_dtr	()->(int)
(	O
)	O
;	O
else	O
if	O
(	O
!	O
err	int
)	O
output_pending	int
=	O
1	int
;	O
return	O
0	int
;	O
}	O
error_t	int
device_write_reply_inband	(int,int,int)->(int)
(	O
mach_port_t	O
replypt	int
,	O
error_t	int
return_code	int
,	O
int	O
amount	int
)	O
{	O
if	O
(	O
replypt	int
!=	O
phys_reply_writes	int
)	O
return	O
EOPNOTSUPP	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
output_pending	int
=	O
0	int
;	O
if	O
(	O
return_code	int
==	O
0	int
)	O
{	O
if	O
(	O
amount	int
>=	O
npending_output	int
)	O
{	O
npending_output	int
=	O
0	int
;	O
pthread_cond_broadcast	()->(int)
(	O
outputq	O
->	O
wait	O
)	O
;	O
pthread_cond_broadcast	()->(int)
(	O
&	O
select_alert	O
)	O
;	O
}	O
else	O
{	O
npending_output	int
-=	O
amount	int
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
pending_output	char
,	O
pending_output	char
+	O
amount	int
,	O
npending_output	int
)	O
;	O
}	O
devio_start_output	()->(int)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
return_code	int
==	O
D_WOULD_BLOCK	O
)	O
devio_desert_dtr	()->(int)
(	O
)	O
;	O
else	O
devio_start_output	()->(int)
(	O
)	O
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	int
device_read_reply_inband	(int,int,*(char),int)->(int)
(	O
mach_port_t	O
replypt	int
,	O
error_t	int
error_code	int
,	O
char	O
*	O
data	*(char)
,	O
u_int	O
datalen	int
)	O
{	O
int	O
i	int
,	O
flush	int
;	O
error_t	int
err	int
;	O
if	O
(	O
replypt	int
!=	O
phys_reply	int
)	O
return	O
EOPNOTSUPP	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
input_pending	int
=	O
0	int
;	O
if	O
(	O
!	O
error_code	int
&&	O
(	O
termstate	O
.	O
c_cflag	int
&	O
CREAD	int
)	O
)	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
datalen	int
;	O
i	int
++	O
)	O
{	O
int	O
c	int
=	O
data	*(char)
[	O
i	int
]	O
;	O
c	int
&=	O
char_size_mask_xxx	int
;	O
flush	int
=	O
input_character	()->(int)
(	O
c	int
)	O
;	O
if	O
(	O
flush	int
)	O
break	O
;	O
}	O
else	O
if	O
(	O
error_code	int
==	O
D_WOULD_BLOCK	O
)	O
{	O
devio_desert_dtr	()->(int)
(	O
)	O
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
err	int
=	O
device_read_request_inband	()->(int)
(	O
phys_device	int
,	O
phys_reply	int
,	O
D_NOWAIT	O
,	O
0	int
,	O
vm_page_size	O
)	O
;	O
if	O
(	O
err	int
)	O
devio_desert_dtr	()->(int)
(	O
)	O
;	O
else	O
input_pending	int
=	O
1	int
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_set_break	()->(int)
(	O
)	O
{	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_SET_BREAK	O
,	O
0	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_clear_break	()->(int)
(	O
)	O
{	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_CLEAR_BREAK	O
,	O
0	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_abandon_physical_output	()->(int)
(	O
)	O
{	O
int	O
val	int
=	O
D_WRITE	O
;	O
if	O
(	O
!	O
phys_reply_writes_pi	*(struct)
)	O
return	O
0	int
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_reply_writes	int
)	O
;	O
ports_reallocate_port	()->(int)
(	O
phys_reply_writes_pi	*(struct)
)	O
;	O
phys_reply_writes	int
=	O
ports_get_send_right	()->(int)
(	O
phys_reply_writes_pi	*(struct)
)	O
;	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_FLUSH	O
,	O
&	O
val	int
,	O
TTY_FLUSH_COUNT	O
)	O
;	O
npending_output	int
=	O
0	int
;	O
output_pending	int
=	O
0	int
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_suspend_physical_output	()->(int)
(	O
)	O
{	O
if	O
(	O
!	O
output_stopped	int
)	O
{	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_STOP	O
,	O
0	int
,	O
0	int
)	O
;	O
output_stopped	int
=	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_notice_input_flushed	()->(int)
(	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
devio_pending_output_size	()->(int)
(	O
)	O
{	O
return	O
npending_output	int
;	O
}	O
static	O
error_t	int
initial_open	()->(int)
(	O
)	O
{	O
error_t	int
err	int
;	O
assert	O
(	O
open_pending	enum(int,int,int)
!=	O
FAKE	int
)	O
;	O
if	O
(	O
open_pending	enum(int,int,int)
==	O
INITIAL	int
)	O
return	O
0	int
;	O
assert	O
(	O
phys_device	int
==	O
MACH_PORT_NULL	O
)	O
;	O
assert	O
(	O
phys_reply	int
==	O
MACH_PORT_NULL	O
)	O
;	O
assert	O
(	O
phys_reply_pi	*(struct)
==	O
0	int
)	O
;	O
err	int
=	O
ports_create_port	()->(int)
(	O
phys_reply_class	*(struct)
,	O
term_bucket	O
,	O
sizeof	O
(	O
struct	O
port_info	O
)	O
,	O
&	O
phys_reply_pi	*(struct)
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
phys_reply	int
=	O
ports_get_send_right	()->(int)
(	O
phys_reply_pi	*(struct)
)	O
;	O
err	int
=	O
device_open_request	()->(int)
(	O
device_master	int
,	O
phys_reply	int
,	O
D_READ	O
|	O
D_WRITE	O
,	O
tty_arg	O
)	O
;	O
if	O
(	O
err	int
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_reply	int
)	O
;	O
phys_reply	int
=	O
MACH_PORT_NULL	O
;	O
ports_port_deref	()->(int)
(	O
phys_reply_pi	*(struct)
)	O
;	O
phys_reply_pi	*(struct)
=	O
0	int
;	O
}	O
else	O
open_pending	enum(int,int,int)
=	O
INITIAL	int
;	O
return	O
err	int
;	O
}	O
static	O
error_t	int
devio_desert_dtr	()->(int)
(	O
)	O
{	O
int	O
bits	int
;	O
bits	int
=	O
TM_HUP	O
;	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_MODEM	O
,	O
(	O
dev_status_t	O
)	O
&	O
bits	int
,	O
TTY_MODEM_COUNT	O
)	O
;	O
report_carrier_off	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_assert_dtr	()->(int)
(	O
)	O
{	O
error_t	int
err	int
;	O
if	O
(	O
phys_device	int
==	O
MACH_PORT_NULL	O
)	O
return	O
initial_open	()->(int)
(	O
)	O
;	O
assert	O
(	O
open_pending	enum(int,int,int)
!=	O
INITIAL	int
)	O
;	O
if	O
(	O
open_pending	enum(int,int,int)
==	O
FAKE	int
)	O
return	O
0	int
;	O
err	int
=	O
device_open_request	()->(int)
(	O
device_master	int
,	O
phys_reply	int
,	O
D_READ	O
|	O
D_WRITE	O
,	O
tty_arg	O
)	O
;	O
if	O
(	O
err	int
)	O
return	O
err	int
;	O
open_pending	enum(int,int,int)
=	O
FAKE	int
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
device_open_reply	(int,int,int)->(int)
(	O
mach_port_t	O
replyport	int
,	O
int	O
returncode	int
,	O
mach_port_t	O
device	int
)	O
{	O
struct	O
tty_status	O
ttystat	struct
;	O
size_t	long
count	long
=	O
TTY_STATUS_COUNT	O
;	O
error_t	int
err	int
=	O
0	int
;	O
if	O
(	O
replyport	int
!=	O
phys_reply	int
)	O
return	O
EOPNOTSUPP	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
assert	O
(	O
open_pending	enum(int,int,int)
!=	O
NOTPENDING	int
)	O
;	O
if	O
(	O
returncode	int
!=	O
0	int
)	O
{	O
report_carrier_error	()->(int)
(	O
returncode	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_reply	int
)	O
;	O
phys_reply	int
=	O
MACH_PORT_NULL	O
;	O
ports_port_deref	()->(int)
(	O
phys_reply_pi	*(struct)
)	O
;	O
phys_reply_pi	*(struct)
=	O
0	int
;	O
open_pending	enum(int,int,int)
=	O
NOTPENDING	int
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
open_pending	enum(int,int,int)
==	O
INITIAL	int
)	O
{	O
assert	O
(	O
phys_device	int
==	O
MACH_PORT_NULL	O
)	O
;	O
assert	O
(	O
phys_reply_writes	int
==	O
MACH_PORT_NULL	O
)	O
;	O
assert	O
(	O
phys_reply_writes_pi	*(struct)
==	O
0	int
)	O
;	O
phys_device	int
=	O
device	int
;	O
err	int
=	O
ports_create_port	()->(int)
(	O
phys_reply_class	*(struct)
,	O
term_bucket	O
,	O
sizeof	O
(	O
struct	O
port_info	O
)	O
,	O
&	O
phys_reply_writes_pi	*(struct)
)	O
;	O
if	O
(	O
err	int
)	O
{	O
open_pending	enum(int,int,int)
=	O
NOTPENDING	int
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
err	int
;	O
}	O
phys_reply_writes	int
=	O
ports_get_send_right	()->(int)
(	O
phys_reply_writes_pi	*(struct)
)	O
;	O
err	int
=	O
device_read_request_inband	()->(int)
(	O
phys_device	int
,	O
phys_reply	int
,	O
D_NOWAIT	O
,	O
0	int
,	O
vm_page_size	O
)	O
;	O
input_pending	int
=	O
1	int
;	O
}	O
else	O
{	O
device_close	()->(int)
(	O
device	int
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
device	int
)	O
;	O
}	O
device_get_status	()->(int)
(	O
phys_device	int
,	O
TTY_STATUS	O
,	O
(	O
dev_status_t	O
)	O
&	O
ttystat	struct
,	O
&	O
count	long
)	O
;	O
ttystat	struct
.	O
tt_breakc	O
=	O
0	int
;	O
ttystat	struct
.	O
tt_flags	O
=	O
TF_ANYP	O
|	O
TF_LITOUT	O
|	O
TF_NOHANG	O
|	O
TF_HUPCLS	O
;	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_STATUS	O
,	O
(	O
dev_status_t	O
)	O
&	O
ttystat	struct
,	O
TTY_STATUS_COUNT	O
)	O
;	O
report_carrier_on	()->(int)
(	O
)	O
;	O
if	O
(	O
err	int
)	O
devio_desert_dtr	()->(int)
(	O
)	O
;	O
open_pending	enum(int,int,int)
=	O
NOTPENDING	int
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_set_bits	(*(struct(int,int,int,int,char,array(char),int,int)))->(int)
(	O
struct	O
termios	struct(int,int,int,int,char,array(char),int,int)
*	O
state	*(struct(int,int,int,int,char,array(char),int,int))
)	O
{	O
if	O
(	O
!	O
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
c_cflag	int
&	O
CIGNORE	O
)	O
&&	O
phys_device	int
!=	O
MACH_PORT_NULL	O
)	O
{	O
struct	O
tty_status	O
ttystat	struct
;	O
size_t	long
cnt	long
=	O
TTY_STATUS_COUNT	O
;	O
device_get_status	()->(int)
(	O
phys_device	int
,	O
TTY_STATUS	O
,	O
(	O
dev_status_t	O
)	O
&	O
ttystat	struct
,	O
&	O
cnt	long
)	O
;	O
if	O
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ispeed	O
)	O
real_speed_to_bogus_speed	(int,*(int))->(int)
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ispeed	O
,	O
&	O
ttystat	struct
.	O
tt_ispeed	O
)	O
;	O
if	O
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ospeed	O
)	O
real_speed_to_bogus_speed	(int,*(int))->(int)
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ospeed	O
,	O
&	O
ttystat	struct
.	O
tt_ospeed	O
)	O
;	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_STATUS	O
,	O
(	O
dev_status_t	O
)	O
&	O
ttystat	struct
,	O
TTY_STATUS_COUNT	O
)	O
;	O
cnt	long
=	O
TTY_STATUS_COUNT	O
;	O
device_get_status	()->(int)
(	O
phys_device	int
,	O
TTY_STATUS	O
,	O
(	O
dev_status_t	O
)	O
&	O
ttystat	struct
,	O
&	O
cnt	long
)	O
;	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ispeed	O
=	O
bogus_speed_to_real_speed	(int)->(int)
(	O
ttystat	struct
.	O
tt_ispeed	O
)	O
;	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ospeed	O
=	O
bogus_speed_to_real_speed	(int)->(int)
(	O
ttystat	struct
.	O
tt_ospeed	O
)	O
;	O
if	O
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
__ispeed	O
==	O
110	int
)	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
c_cflag	int
|=	O
CSTOPB	int
;	O
else	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
c_cflag	int
&=	O
~	O
CSTOPB	int
;	O
switch	O
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
c_cflag	int
&	O
CSIZE	int
)	O
{	O
case	O
CS5	int
:	O
char_size_mask_xxx	int
=	O
0x1f	int
;	O
break	O
;	O
case	O
CS6	int
:	O
char_size_mask_xxx	int
=	O
0x3f	int
;	O
break	O
;	O
case	O
CS7	int
:	O
char_size_mask_xxx	int
=	O
0x7f	int
;	O
break	O
;	O
case	O
CS8	int
:	O
default	O
:	O
char_size_mask_xxx	int
=	O
0xff	int
;	O
break	O
;	O
}	O
if	O
(	O
state	*(struct(int,int,int,int,char,array(char),int,int))
->	O
c_cflag	int
&	O
PARENB	int
)	O
char_size_mask_xxx	int
|=	O
0x80	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_mdmctl	(int,int)->(int)
(	O
int	O
how	int
,	O
int	O
bits	int
)	O
{	O
int	O
oldbits	int
,	O
newbits	int
;	O
size_t	long
cnt	long
;	O
if	O
(	O
(	O
how	int
==	O
MDMCTL_BIS	O
)	O
||	O
(	O
how	int
==	O
MDMCTL_BIC	O
)	O
)	O
{	O
cnt	long
=	O
TTY_MODEM_COUNT	O
;	O
device_get_status	()->(int)
(	O
phys_device	int
,	O
TTY_MODEM	O
,	O
(	O
dev_status_t	O
)	O
&	O
oldbits	int
,	O
&	O
cnt	long
)	O
;	O
if	O
(	O
cnt	long
<	O
TTY_MODEM_COUNT	O
)	O
oldbits	int
=	O
0	int
;	O
}	O
if	O
(	O
how	int
==	O
MDMCTL_BIS	O
)	O
newbits	int
=	O
(	O
oldbits	int
|	O
bits	int
)	O
;	O
else	O
if	O
(	O
how	int
==	O
MDMCTL_BIC	O
)	O
newbits	int
=	O
(	O
oldbits	int
&=	O
~	O
bits	int
)	O
;	O
else	O
newbits	int
=	O
bits	int
;	O
device_set_status	()->(int)
(	O
phys_device	int
,	O
TTY_MODEM	O
,	O
(	O
dev_status_t	O
)	O
&	O
newbits	int
,	O
TTY_MODEM_COUNT	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
error_t	int
devio_mdmstate	(*(int))->(int)
(	O
int	O
*	O
state	*(struct(int,int,int,int,char,array(char),int,int))
)	O
{	O
int	O
bits	int
;	O
size_t	long
cnt	long
=	O
TTY_MODEM_COUNT	O
;	O
device_get_status	()->(int)
(	O
phys_device	int
,	O
TTY_MODEM	O
,	O
(	O
dev_status_t	O
)	O
&	O
bits	int
,	O
&	O
cnt	long
)	O
;	O
if	O
(	O
cnt	long
==	O
TTY_MODEM_COUNT	O
)	O
*	O
state	*(struct(int,int,int,int,char,array(char),int,int))
=	O
bits	int
;	O
else	O
*	O
state	*(struct(int,int,int,int,char,array(char),int,int))
=	O
0	int
;	O
return	O
0	int
;	O
}	O
kern_return_t	O
device_read_reply	(int,int,int,int)->(int)
(	O
mach_port_t	O
port	int
,	O
kern_return_t	O
retcode	int
,	O
io_buf_ptr_t	O
data	*(char)
,	O
mach_msg_type_number_t	O
cnt	long
)	O
{	O
return	O
EOPNOTSUPP	int
;	O
}	O
kern_return_t	O
device_write_reply	(int,int,int)->(int)
(	O
mach_port_t	O
replyport	int
,	O
kern_return_t	O
retcode	int
,	O
int	O
written	int
)	O
{	O
return	O
EOPNOTSUPP	int
;	O
}	O
error_t	int
ports_do_mach_notify_send_once	(*(struct))->(int)
(	O
struct	O
port_info	O
*	O
pi	*(struct)
)	O
{	O
error_t	int
err	int
;	O
pthread_mutex_lock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
if	O
(	O
pi	*(struct)
->	O
port_right	O
==	O
phys_reply_writes	int
)	O
{	O
err	int
=	O
0	int
;	O
devio_start_output	()->(int)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
pi	*(struct)
->	O
port_right	O
==	O
phys_reply	int
)	O
{	O
if	O
(	O
input_pending	int
)	O
{	O
char	O
msg	array(char)
[	O
]	O
=	O
"Term input check happened\r\n"	*(char)
;	O
int	O
foo	int
;	O
device_write_inband	()->(int)
(	O
phys_device	int
,	O
0	int
,	O
0	int
,	O
msg	array(char)
,	O
sizeof	O
msg	array(char)
,	O
&	O
foo	int
)	O
;	O
input_pending	int
=	O
0	int
;	O
err	int
=	O
device_read_request_inband	()->(int)
(	O
phys_device	int
,	O
phys_reply	int
,	O
D_NOWAIT	O
,	O
0	int
,	O
vm_page_size	O
)	O
;	O
if	O
(	O
err	int
)	O
devio_desert_dtr	()->(int)
(	O
)	O
;	O
else	O
input_pending	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
open_pending	enum(int,int,int)
!=	O
NOTPENDING	int
)	O
{	O
open_pending	enum(int,int,int)
=	O
NOTPENDING	int
;	O
report_carrier_on	()->(int)
(	O
)	O
;	O
report_carrier_off	()->(int)
(	O
)	O
;	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
phys_reply	int
)	O
;	O
phys_reply	int
=	O
MACH_PORT_NULL	O
;	O
ports_port_deref	()->(int)
(	O
phys_reply_pi	*(struct)
)	O
;	O
phys_reply_pi	*(struct)
=	O
0	int
;	O
}	O
err	int
=	O
0	int
;	O
}	O
else	O
err	int
=	O
EOPNOTSUPP	int
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
global_lock	O
)	O
;	O
return	O
err	int
;	O
}	O
const	O
struct	O
bottomhalf	O
devio_bottom	struct
=	O
{	O
TERM_ON_MACHDEV	O
,	O
devio_init	()->(int)
,	O
devio_fini	()->(int)
,	O
NULL	O
,	O
devio_start_output	()->(int)
,	O
devio_set_break	()->(int)
,	O
devio_clear_break	()->(int)
,	O
devio_abandon_physical_output	()->(int)
,	O
devio_suspend_physical_output	()->(int)
,	O
devio_pending_output_size	()->(int)
,	O
devio_notice_input_flushed	()->(int)
,	O
devio_assert_dtr	()->(int)
,	O
devio_desert_dtr	()->(int)
,	O
devio_set_bits	(*(struct(int,int,int,int,char,array(char),int,int)))->(int)
,	O
devio_mdmctl	(int,int)->(int)
,	O
devio_mdmstate	(*(int))->(int)
,	O
}	O
;	O
