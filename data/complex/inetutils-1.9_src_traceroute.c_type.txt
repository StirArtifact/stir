enum	O
trace_type	enum(int,int,int)
{	O
TRACE_UDP	int
,	O
TRACE_ICMP	int
,	O
TRACE_1393	int
}	O
;	O
typedef	O
struct	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
{	O
int	O
icmpfd	int
,	O
udpfd	int
;	O
enum	O
trace_type	enum(int,int,int)
type	enum(int,int,int,int)
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
to	struct(short,short,struct(int),array(char))
,	O
from	struct(short,short,struct(int),array(char))
;	O
int	O
ttl	char
;	O
struct	O
timeval	struct(long,long)
tsent	struct(long,long)
;	O
}	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
;	O
void	O
trace_init	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),struct(short,short,struct(int),array(char)),enum(int,int,int))->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
,	O
const	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
to	struct(short,short,struct(int),array(char))
,	O
const	O
enum	O
trace_type	enum(int,int,int)
type	enum(int,int,int,int)
)	O
;	O
void	O
trace_inc_ttl	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
void	O
trace_inc_port	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
void	O
trace_port	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),short)->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
,	O
const	O
unsigned	O
short	O
port	short
)	O
;	O
int	O
trace_read	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
int	O
trace_write	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
int	O
trace_udp_sock	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
int	O
trace_icmp_sock	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
void	O
do_try	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),int,int,int)->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
,	O
const	O
int	O
hop	int
,	O
const	O
int	O
max_hops	int
,	O
const	O
int	O
max_tries	int
)	O
;	O
char	O
*	O
get_hostname	(*(struct(int)))->(*(char))
(	O
struct	O
in_addr	struct(int)
*	O
addr	*(char)
)	O
;	O
int	O
stop	int
=	O
0	int
;	O
int	O
pid	int
=	O
0	int
;	O
static	O
char	O
*	O
hostname	*(char)
=	O
NULL	O
;	O
char	O
addrstr	array(char)
[	O
INET6_ADDRSTRLEN	int
]	O
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
dest	struct(short,short,struct(int),array(char))
;	O
static	O
enum	O
trace_type	enum(int,int,int)
opt_type	enum(int,int,int)
=	O
TRACE_ICMP	int
;	O
int	O
opt_port	int
=	O
33434	int
;	O
int	O
opt_max_hops	int
=	O
64	int
;	O
static	O
int	O
opt_max_tries	int
=	O
3	int
;	O
int	O
opt_resolve_hostnames	int
=	O
0	int
;	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"HOST"	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Print the route packets trace to network host."	*(char)
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Elian Gidoni"	*(char)
,	O
NULL	O
}	O
;	O
enum	O
{	O
OPT_RESOLVE	int
=	O
256	int
}	O
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"port"	*(char)
,	O
'p'	O
,	O
"PORT"	*(char)
,	O
0	int
,	O
"use destination PORT port (default: 33434)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"resolve-hostnames"	*(char)
,	O
OPT_RESOLVE	int
,	O
NULL	O
,	O
0	int
,	O
"resolve hostnames"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"tries"	*(char)
,	O
'q'	O
,	O
"NUM"	*(char)
,	O
0	int
,	O
"send NUM probe packets per hop (default: 3)"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
"type"	*(char)
,	O
'M'	O
,	O
"METHOD"	*(char)
,	O
0	int
,	O
"use METHOD (`icmp' or `udp') for traceroute "	*(char)
"operations"	*(char)
,	O
GRP	int
+	O
1	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
char	O
*	O
p	*(void)
;	O
static	O
bool	bool
host_is_given	bool
=	O
false	int
;	O
switch	O
(	O
key	int
)	O
{	O
case	O
'p'	O
:	O
opt_port	int
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
p	*(void)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	*(void)
||	O
opt_port	int
==	O
0	int
||	O
opt_port	int
>	O
65536	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid port number `%s'"	*(char)
,	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
OPT_RESOLVE	int
:	O
opt_resolve_hostnames	int
=	O
1	int
;	O
break	O
;	O
case	O
'q'	O
:	O
opt_max_tries	int
=	O
(	O
int	O
)	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
arg	*(char)
,	O
&	O
p	*(void)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
p	*(void)
)	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(int)
,	O
"invalid value (`%s' near `%s')"	*(char)
,	O
arg	*(char)
,	O
p	*(void)
)	O
;	O
if	O
(	O
opt_max_tries	int
<	O
1	int
||	O
opt_max_tries	int
>	O
10	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"number of tries should be between 1 and 10"	*(char)
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"icmp"	*(char)
)	O
==	O
0	int
)	O
opt_type	enum(int,int,int)
=	O
TRACE_ICMP	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"udp"	*(char)
)	O
==	O
0	int
)	O
opt_type	enum(int,int,int)
=	O
TRACE_UDP	int
;	O
else	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(int)
,	O
"invalid method"	*(char)
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_ARG	int
:	O
host_is_given	bool
=	O
true	int
;	O
hostname	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
ARGP_KEY_SUCCESS	int
:	O
if	O
(	O
!	O
host_is_given	bool
)	O
argp_error	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))),*(char))->(void)
(	O
state	*(int)
,	O
"missing host operand"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
*	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"traceroute"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
)	O
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_family	int
=	O
AF_INET	O
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_flags	int
=	O
AI_CANONNAME	int
;	O
if	O
(	O
(	O
hostname	*(char)
==	O
NULL	O
)	O
||	O
(	O
*	O
hostname	*(char)
==	O
'\0'	O
)	O
||	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
hostname	*(char)
,	O
NULL	O
,	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
&	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown host"	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
dest	struct(short,short,struct(int),array(char))
,	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
;	O
dest	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
opt_port	int
)	O
;	O
getnameinfo	(*(struct(short,array(char))),int,*(char),int,*(char),int,int)->(int)
(	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
,	O
addrstr	array(char)
,	O
sizeof	O
(	O
addrstr	array(char)
)	O
,	O
NULL	O
,	O
0	int
,	O
NI_NUMERICHOST	int
)	O
;	O
printf	(*(char))->(int)
(	O
"traceroute to %s (%s), %d hops max\n"	*(char)
,	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_canonname	*(char)
,	O
addrstr	array(char)
,	O
opt_max_hops	int
)	O
;	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
trace_init	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),struct(short,short,struct(int),array(char)),enum(int,int,int))->(void)
(	O
&	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
,	O
dest	struct(short,short,struct(int),array(char))
,	O
opt_type	enum(int,int,int)
)	O
;	O
int	O
hop	int
=	O
1	int
;	O
while	O
(	O
!	O
stop	int
)	O
{	O
if	O
(	O
hop	int
>	O
opt_max_hops	int
)	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
do_try	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),int,int,int)->(void)
(	O
&	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
,	O
hop	int
,	O
opt_max_hops	int
,	O
opt_max_tries	int
)	O
;	O
trace_inc_ttl	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(void)
(	O
&	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
)	O
;	O
trace_inc_port	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(void)
(	O
&	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
)	O
;	O
hop	int
++	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
void	O
do_try	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),int,int,int)->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
,	O
const	O
int	O
hop	int
,	O
const	O
int	O
max_hops	int
,	O
const	O
int	O
max_tries	int
)	O
{	O
fd_set	struct(array(long))
readset	struct(array(long))
;	O
int	O
ret	int
,	O
tries	int
,	O
readonly	int
=	O
0	int
;	O
struct	O
timeval	struct(long,long)
now	struct(long,long)
,	O
time	struct(long,long)
;	O
double	O
triptime	double
=	O
0.0	int
;	O
uint32_t	int
prev_addr	int
=	O
0	int
;	O
printf	(*(char))->(int)
(	O
" %d  "	*(char)
,	O
hop	int
)	O
;	O
for	O
(	O
tries	int
=	O
0	int
;	O
tries	int
<	O
max_tries	int
;	O
tries	int
++	O
)	O
{	O
FD_ZERO	O
(	O
&	O
readset	struct(array(long))
)	O
;	O
FD_SET	O
(	O
trace_icmp_sock	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
)	O
,	O
&	O
readset	struct(array(long))
)	O
;	O
time	struct(long,long)
.	O
tv_sec	long
=	O
TIME_INTERVAL	int
;	O
time	struct(long,long)
.	O
tv_usec	long
=	O
0	int
;	O
if	O
(	O
!	O
readonly	int
)	O
trace_write	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
)	O
;	O
ret	int
=	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
FD_SETSIZE	O
,	O
&	O
readset	struct(array(long))
,	O
NULL	O
,	O
NULL	O
,	O
&	O
time	struct(long,long)
)	O
;	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
now	struct(long,long)
,	O
NULL	O
)	O
;	O
now	struct(long,long)
.	O
tv_usec	long
-=	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
->	O
tsent	struct(long,long)
.	O
tv_usec	long
;	O
now	struct(long,long)
.	O
tv_sec	long
-=	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
->	O
tsent	struct(long,long)
.	O
tv_sec	long
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
EINTR	int
:	O
break	O
;	O
default	O
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
EPERM	int
,	O
"select failed"	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
else	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
" * "	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
{	O
if	O
(	O
FD_ISSET	O
(	O
trace_icmp_sock	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
)	O
,	O
&	O
readset	struct(array(long))
)	O
)	O
{	O
triptime	double
=	O
(	O
(	O
double	O
)	O
now	struct(long,long)
.	O
tv_sec	long
)	O
*	O
1000.0	int
+	O
(	O
(	O
double	O
)	O
now	struct(long,long)
.	O
tv_usec	long
)	O
/	O
1000.0	int
;	O
if	O
(	O
trace_read	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
)	O
)	O
{	O
tries	int
--	O
;	O
readonly	int
=	O
1	int
;	O
continue	O
;	O
}	O
else	O
{	O
if	O
(	O
tries	int
==	O
0	int
||	O
prev_addr	int
!=	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
->	O
from	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
)	O
printf	(*(char))->(int)
(	O
" %s (%s) "	*(char)
,	O
inet_ntoa	(struct(int))->(*(char))
(	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
->	O
from	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
,	O
get_hostname	(*(struct(int)))->(*(char))
(	O
&	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
->	O
from	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"%.3fms "	*(char)
,	O
triptime	double
)	O
;	O
}	O
prev_addr	int
=	O
trace	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
->	O
from	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
;	O
}	O
}	O
readonly	int
=	O
0	int
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
char	O
*	O
get_hostname	(*(struct(int)))->(*(char))
(	O
struct	O
in_addr	struct(int)
*	O
addr	*(char)
)	O
{	O
if	O
(	O
opt_resolve_hostnames	int
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
(	O
char	O
*	O
)	O
addr	*(char)
,	O
sizeof	O
(	O
*	O
addr	*(char)
)	O
,	O
AF_INET	O
)	O
;	O
if	O
(	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
!=	O
NULL	O
)	O
return	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
;	O
}	O
return	O
inet_ntoa	(struct(int))->(*(char))
(	O
*	O
addr	*(char)
)	O
;	O
}	O
void	O
trace_init	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),struct(short,short,struct(int),array(char)),enum(int,int,int))->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
,	O
const	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
to	struct(short,short,struct(int),array(char))
,	O
const	O
enum	O
trace_type	enum(int,int,int)
type	enum(int,int,int,int)
)	O
{	O
const	O
int	O
*	O
ttlp	*(int)
;	O
assert	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
ttlp	*(int)
=	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
ttl	char
;	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
=	O
to	struct(short,short,struct(int),array(char))
;	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
ttl	char
=	O
TRACE_TTL	int
;	O
if	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
==	O
TRACE_UDP	int
)	O
{	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
udpfd	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
udpfd	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"socket"	*(char)
)	O
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
udpfd	int
,	O
IPPROTO_IP	int
,	O
IP_TTL	int
,	O
ttlp	*(int)
,	O
sizeof	O
(	O
*	O
ttlp	*(int)
)	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"setsockopt"	*(char)
)	O
;	O
}	O
if	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
==	O
TRACE_ICMP	int
||	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
==	O
TRACE_UDP	int
)	O
{	O
struct	O
protoent	struct(*(char),*(*(char)),int)
*	O
protocol	char
=	O
getprotobyname	(*(char))->(*(struct(*(char),*(*(char)),int)))
(	O
"icmp"	*(char)
)	O
;	O
if	O
(	O
protocol	char
)	O
{	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
=	O
socket	(int,int,int)->(int)
(	O
PF_INET	int
,	O
SOCK_RAW	int
,	O
protocol	char
->	O
p_proto	int
)	O
;	O
if	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"socket"	*(char)
)	O
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
,	O
IPPROTO_IP	int
,	O
IP_TTL	int
,	O
ttlp	*(int)
,	O
sizeof	O
(	O
*	O
ttlp	*(int)
)	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"setsockopt"	*(char)
)	O
;	O
}	O
else	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"can't find supplied protocol 'icmp'"	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
}	O
}	O
void	O
trace_port	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))),short)->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
,	O
const	O
unsigned	O
short	O
int	O
port	short
)	O
{	O
assert	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
if	O
(	O
port	short
<	O
IPPORT_RESERVED	int
)	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
TRACE_UDP_PORT	int
;	O
else	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
port	short
;	O
}	O
int	O
trace_read	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
{	O
int	O
len	char
;	O
unsigned	O
char	O
data	array(int)
[	O
56	int
]	O
;	O
struct	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
*	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
;	O
icmphdr_t	struct
*	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
;	O
socklen_t	int
siz	int
;	O
assert	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
siz	int
=	O
sizeof	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
from	struct(short,short,struct(int),array(char))
)	O
;	O
len	char
=	O
recvfrom	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(long)
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
,	O
(	O
char	O
*	O
)	O
data	array(int)
,	O
56	int
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
from	struct(short,short,struct(int),array(char))
,	O
&	O
siz	int
)	O
;	O
if	O
(	O
len	char
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"recvfrom"	*(char)
)	O
;	O
icmp_generic_decode	(*(char),long,*(*(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int)))),*(*(struct(char,char,short,union(char,struct`,struct`,int,struct`,struct`),union(struct`,struct`,long,array(char))))))->(int)
(	O
data	array(int)
,	O
56	int
,	O
&	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
,	O
&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
)	O
;	O
switch	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
TRACE_UDP	int
:	O
{	O
unsigned	O
short	O
*	O
port	short
;	O
if	O
(	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
!=	O
ICMP_TIME_EXCEEDED	int
&&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
!=	O
ICMP_DEST_UNREACH	int
)	O
||	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
==	O
ICMP_DEST_UNREACH	int
&&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_code	char
!=	O
ICMP_PORT_UNREACH	int
)	O
)	O
return	O
-	O
1	int
;	O
port	short
=	O
(	O
unsigned	O
short	O
*	O
)	O
&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_ip	O
+	O
11	int
;	O
if	O
(	O
*	O
port	short
!=	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_code	char
==	O
ICMP_PORT_UNREACH	int
)	O
stop	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
TRACE_ICMP	int
:	O
if	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
!=	O
ICMP_TIME_EXCEEDED	int
&&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
!=	O
ICMP_ECHOREPLY	int
)	O
return	O
-	O
1	int
;	O
if	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
==	O
ICMP_ECHOREPLY	int
&&	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_seq	O
!=	O
pid	int
||	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_id	O
!=	O
pid	int
)	O
)	O
return	O
-	O
1	int
;	O
else	O
if	O
(	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_type	char
==	O
ICMP_TIME_EXCEEDED	int
)	O
{	O
unsigned	O
short	O
*	O
seq	*(short)
=	O
(	O
unsigned	O
short	O
*	O
)	O
&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_ip	O
+	O
12	int
;	O
unsigned	O
short	O
*	O
ident	int
=	O
(	O
unsigned	O
short	O
*	O
)	O
&	O
ic	*(struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct`,struct`)),long,array(char))))
->	O
icmp_ip	O
+	O
13	int
;	O
if	O
(	O
*	O
seq	*(short)
!=	O
pid	int
||	O
*	O
ident	int
!=	O
pid	int
)	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
ip	struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))
->	O
ip_src	struct(int)
.	O
s_addr	int
==	O
dest	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
)	O
stop	int
=	O
1	int
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
trace_write	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
{	O
int	O
len	char
;	O
assert	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
switch	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
)	O
{	O
case	O
TRACE_UDP	int
:	O
{	O
char	O
data	array(int)
[	O
]	O
=	O
"SUPERMAN"	*(char)
;	O
len	char
=	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
udpfd	int
,	O
(	O
char	O
*	O
)	O
data	array(int)
,	O
sizeof	O
(	O
data	array(int)
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
len	char
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
ECONNRESET	int
:	O
break	O
;	O
default	O
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"sendto"	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
tsent	struct(long,long)
,	O
NULL	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"gettimeofday"	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
TRACE_ICMP	int
:	O
{	O
icmphdr_t	struct
hdr	struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),long,array(char)))
;	O
if	O
(	O
icmp_echo_encode	(*(char),long,int,int)->(int)
(	O
(	O
unsigned	O
char	O
*	O
)	O
&	O
hdr	struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),long,array(char)))
,	O
sizeof	O
(	O
hdr	struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),long,array(char)))
)	O
,	O
pid	int
,	O
pid	int
)	O
)	O
return	O
-	O
1	int
;	O
len	char
=	O
sendto	(int,*(void),long,int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(long)
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
,	O
(	O
char	O
*	O
)	O
&	O
hdr	struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),long,array(char)))
,	O
sizeof	O
(	O
hdr	struct(char,char,short,union(char,struct(int),struct(short,short),int,struct(short,short),struct(char,char,short)),union(struct(int,int,int),struct(struct(int,int,char,short,short,short,char,char,short,struct(int),struct(int))),long,array(char)))
)	O
,	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
)	O
)	O
;	O
if	O
(	O
len	char
<	O
0	int
)	O
{	O
switch	O
(	O
errno	O
)	O
{	O
case	O
ECONNRESET	int
:	O
break	O
;	O
default	O
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"sendto"	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
tsent	struct(long,long)
,	O
NULL	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"gettimeofday"	*(char)
)	O
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
trace_udp_sock	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
{	O
return	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
!=	O
NULL	O
?	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
udpfd	int
:	O
-	O
1	int
)	O
;	O
}	O
int	O
trace_icmp_sock	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(int)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
{	O
return	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
!=	O
NULL	O
?	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
:	O
-	O
1	int
)	O
;	O
}	O
void	O
trace_inc_ttl	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
{	O
int	O
fd	int
;	O
const	O
int	O
*	O
ttlp	*(int)
;	O
assert	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
ttlp	*(int)
=	O
&	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
ttl	char
;	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
ttl	char
++	O
;	O
fd	int
=	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
==	O
TRACE_UDP	int
?	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
udpfd	int
:	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
icmpfd	int
)	O
;	O
if	O
(	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
fd	int
,	O
IPPROTO_IP	int
,	O
IP_TTL	int
,	O
ttlp	*(int)
,	O
sizeof	O
(	O
*	O
ttlp	*(int)
)	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"setsockopt"	*(char)
)	O
;	O
}	O
void	O
trace_inc_port	(*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))))->(void)
(	O
trace_t	struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long))
*	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
{	O
assert	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
)	O
;	O
if	O
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
type	enum(int,int,int,int)
==	O
TRACE_UDP	int
)	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
ntohs	(short)->(short)
(	O
t	*(struct(int,int,enum(int,int,int),struct(short,short,struct(int),array(char)),struct(short,short,struct(int),array(char)),int,struct(long,long)))
->	O
to	struct(short,short,struct(int),array(char))
.	O
sin_port	short
)	O
+	O
1	int
)	O
;	O
}	O
