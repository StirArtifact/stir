extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
pid_t	int
ixsspawn	(*(*(char)),*(int),int,int,*(char),int,int,*(char),*(char),*(char))->(int)
(	O
pazargs	*(*(char))
,	O
aidescs	*(int)
,	O
fkeepuid	int
,	O
fkeepenv	int
,	O
zchdir	*(char)
,	O
fnosigs	int
,	O
fshell	int
,	O
zpath	*(char)
,	O
zuu_machine	*(char)
,	O
zuu_user	*(char)
)	O
const	O
char	O
*	O
*	O
pazargs	*(*(char))
;	O
int	O
aidescs	*(int)
[	O
3	int
]	O
;	O
boolean	int
fkeepuid	int
;	O
boolean	int
fkeepenv	int
;	O
const	O
char	O
*	O
zchdir	*(char)
;	O
boolean	int
fnosigs	int
;	O
boolean	int
fshell	int
;	O
const	O
char	O
*	O
zpath	*(char)
;	O
const	O
char	O
*	O
zuu_machine	*(char)
;	O
const	O
char	O
*	O
zuu_user	*(char)
;	O
{	O
char	O
*	O
zshcmd	*(char)
;	O
int	O
i	int
;	O
char	O
*	O
azenv	array(*(char))
[	O
9	int
]	O
;	O
char	O
*	O
*	O
pazenv	*(*(char))
;	O
boolean	int
ferr	int
;	O
int	O
ierr	int
=	O
0	int
;	O
int	O
onull	int
;	O
int	O
aichild_descs	array(int)
[	O
3	int
]	O
;	O
int	O
cpar_close	int
;	O
int	O
aipar_close	array(int)
[	O
4	int
]	O
;	O
int	O
cchild_close	int
;	O
int	O
aichild_close	array(int)
[	O
3	int
]	O
;	O
pid_t	int
iret	int
=	O
0	int
;	O
const	O
char	O
*	O
zcmd	*(char)
;	O
zshcmd	*(char)
=	O
NULL	O
;	O
if	O
(	O
fshell	int
)	O
{	O
size_t	long
clen	long
;	O
clen	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
pazargs	*(*(char))
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
clen	long
+=	O
strlen	(*(char))->(long)
(	O
pazargs	*(*(char))
[	O
i	int
]	O
)	O
;	O
zshcmd	*(char)
=	O
zbufalc	(long)->(*(char))
(	O
2	int
*	O
clen	long
+	O
i	int
)	O
;	O
}	O
if	O
(	O
fkeepenv	int
)	O
pazenv	*(*(char))
=	O
environ	*(*(char))
;	O
else	O
{	O
const	O
char	O
*	O
zterm	*(char)
,	O
*	O
ztz	*(char)
;	O
char	O
*	O
zspace	*(char)
;	O
int	O
ienv	int
;	O
if	O
(	O
zpath	*(char)
==	O
NULL	O
)	O
zpath	*(char)
=	O
CMDPATH	*(char)
;	O
azenv	array(*(char))
[	O
0	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"PATH="	*(char)
+	O
strlen	(*(char))->(long)
(	O
zpath	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
0	int
]	O
,	O
"PATH=%s"	*(char)
,	O
zpath	*(char)
)	O
;	O
zspace	*(char)
=	O
azenv	array(*(char))
[	O
0	int
]	O
+	O
sizeof	O
"PATH="	*(char)
-	O
1	int
;	O
while	O
(	O
(	O
zspace	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
zspace	*(char)
,	O
' '	O
)	O
)	O
!=	O
NULL	O
)	O
*	O
zspace	*(char)
=	O
':'	O
;	O
azenv	array(*(char))
[	O
1	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"HOME="	*(char)
+	O
strlen	(*(char))->(long)
(	O
zSspooldir	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
1	int
]	O
,	O
"HOME=%s"	*(char)
,	O
zSspooldir	*(char)
)	O
;	O
zterm	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TERM"	*(char)
)	O
;	O
if	O
(	O
zterm	*(char)
==	O
NULL	O
)	O
zterm	*(char)
=	O
"unknown"	*(char)
;	O
azenv	array(*(char))
[	O
2	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"TERM="	*(char)
+	O
strlen	(*(char))->(long)
(	O
zterm	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
2	int
]	O
,	O
"TERM=%s"	*(char)
,	O
zterm	*(char)
)	O
;	O
azenv	array(*(char))
[	O
3	int
]	O
=	O
zbufcpy	(*(char))->(*(char))
(	O
"SHELL=/bin/sh"	*(char)
)	O
;	O
azenv	array(*(char))
[	O
4	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"USER="	*(char)
+	O
strlen	(*(char))->(long)
(	O
OWNER	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
4	int
]	O
,	O
"USER=%s"	*(char)
,	O
OWNER	*(char)
)	O
;	O
ienv	int
=	O
5	int
;	O
ztz	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"TZ"	*(char)
)	O
;	O
if	O
(	O
ztz	*(char)
!=	O
NULL	O
)	O
{	O
azenv	array(*(char))
[	O
ienv	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"TZ="	*(char)
+	O
strlen	(*(char))->(long)
(	O
ztz	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
ienv	int
]	O
,	O
"TZ=%s"	*(char)
,	O
ztz	*(char)
)	O
;	O
++	O
ienv	int
;	O
}	O
if	O
(	O
zuu_machine	*(char)
!=	O
NULL	O
)	O
{	O
azenv	array(*(char))
[	O
ienv	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"UU_MACHINE="	*(char)
+	O
strlen	(*(char))->(long)
(	O
zuu_machine	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
ienv	int
]	O
,	O
"UU_MACHINE=%s"	*(char)
,	O
zuu_machine	*(char)
)	O
;	O
++	O
ienv	int
;	O
}	O
if	O
(	O
zuu_user	*(char)
!=	O
NULL	O
)	O
{	O
azenv	array(*(char))
[	O
ienv	int
]	O
=	O
zbufalc	(long)->(*(char))
(	O
sizeof	O
"UU_USER="	*(char)
+	O
strlen	(*(char))->(long)
(	O
zuu_user	*(char)
)	O
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
azenv	array(*(char))
[	O
ienv	int
]	O
,	O
"UU_USER=%s"	*(char)
,	O
zuu_user	*(char)
)	O
;	O
++	O
ienv	int
;	O
}	O
azenv	array(*(char))
[	O
ienv	int
]	O
=	O
NULL	O
;	O
pazenv	*(*(char))
=	O
azenv	array(*(char))
;	O
}	O
ferr	int
=	O
FALSE	O
;	O
onull	int
=	O
-	O
1	int
;	O
cpar_close	int
=	O
0	int
;	O
cchild_close	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
aidescs	*(int)
[	O
i	int
]	O
==	O
SPAWN_NULL	O
)	O
{	O
if	O
(	O
onull	int
<	O
0	int
)	O
{	O
onull	int
=	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
"/dev/null"	*(char)
,	O
O_RDWR	int
)	O
;	O
if	O
(	O
onull	int
<	O
0	int
||	O
fcntl	(int,int)->(int)
(	O
onull	int
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
onull	int
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ierr	int
=	O
errno	O
;	O
(	O
void	O
)	O
close	(int)->(int)
(	O
onull	int
)	O
;	O
ferr	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
aipar_close	array(int)
[	O
cpar_close	int
]	O
=	O
onull	int
;	O
++	O
cpar_close	int
;	O
}	O
aichild_descs	array(int)
[	O
i	int
]	O
=	O
onull	int
;	O
}	O
else	O
if	O
(	O
aidescs	*(int)
[	O
i	int
]	O
!=	O
SPAWN_READ_PIPE	O
&&	O
aidescs	*(int)
[	O
i	int
]	O
!=	O
SPAWN_WRITE_PIPE	O
)	O
aichild_descs	array(int)
[	O
i	int
]	O
=	O
aidescs	*(int)
[	O
i	int
]	O
;	O
else	O
{	O
int	O
aipipe	array(int)
[	O
2	int
]	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
aipipe	array(int)
)	O
<	O
0	int
)	O
{	O
ierr	int
=	O
errno	O
;	O
ferr	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
if	O
(	O
aidescs	*(int)
[	O
i	int
]	O
==	O
SPAWN_READ_PIPE	O
)	O
{	O
aidescs	*(int)
[	O
i	int
]	O
=	O
aipipe	array(int)
[	O
0	int
]	O
;	O
aichild_close	array(int)
[	O
cchild_close	int
]	O
=	O
aipipe	array(int)
[	O
0	int
]	O
;	O
aichild_descs	array(int)
[	O
i	int
]	O
=	O
aipipe	array(int)
[	O
1	int
]	O
;	O
aipar_close	array(int)
[	O
cpar_close	int
]	O
=	O
aipipe	array(int)
[	O
1	int
]	O
;	O
}	O
else	O
{	O
aidescs	*(int)
[	O
i	int
]	O
=	O
aipipe	array(int)
[	O
1	int
]	O
;	O
aichild_close	array(int)
[	O
cchild_close	int
]	O
=	O
aipipe	array(int)
[	O
1	int
]	O
;	O
aichild_descs	array(int)
[	O
i	int
]	O
=	O
aipipe	array(int)
[	O
0	int
]	O
;	O
aipar_close	array(int)
[	O
cpar_close	int
]	O
=	O
aipipe	array(int)
[	O
0	int
]	O
;	O
}	O
++	O
cpar_close	int
;	O
++	O
cchild_close	int
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
aipipe	array(int)
[	O
0	int
]	O
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
aipipe	array(int)
[	O
0	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
||	O
fcntl	(int,int)->(int)
(	O
aipipe	array(int)
[	O
1	int
]	O
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
aipipe	array(int)
[	O
1	int
]	O
,	O
F_GETFD	int
,	O
0	int
)	O
|	O
FD_CLOEXEC	int
)	O
<	O
0	int
)	O
{	O
ierr	int
=	O
errno	O
;	O
ferr	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
ferr	int
&&	O
FDEBUGGING	O
(	O
DEBUG_EXECUTE	O
)	O
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_DEBUG_START	int
,	O
"Forking %s"	*(char)
,	O
pazargs	*(*(char))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
1	int
;	O
pazargs	*(*(char))
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_DEBUG_CONTINUE	int
,	O
" %s"	*(char)
,	O
pazargs	*(*(char))
[	O
i	int
]	O
)	O
;	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_DEBUG_END	int
,	O
"%s"	*(char)
,	O
""	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
ferr	int
)	O
{	O
iret	int
=	O
ixsfork	()->(int)
(	O
)	O
;	O
if	O
(	O
iret	int
<	O
0	int
)	O
{	O
ferr	int
=	O
TRUE	O
;	O
ierr	int
=	O
errno	O
;	O
}	O
}	O
if	O
(	O
ferr	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cchild_close	int
;	O
i	int
++	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aichild_close	array(int)
[	O
i	int
]	O
)	O
;	O
iret	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
iret	int
!=	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
cpar_close	int
;	O
i	int
++	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
aipar_close	array(int)
[	O
i	int
]	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zshcmd	*(char)
)	O
;	O
if	O
(	O
!	O
fkeepenv	int
)	O
{	O
char	O
*	O
*	O
pz	*(*(char))
;	O
for	O
(	O
pz	*(*(char))
=	O
azenv	array(*(char))
;	O
*	O
pz	*(*(char))
!=	O
NULL	O
;	O
pz	*(*(char))
++	O
)	O
ubuffree	(*(char))->(void)
(	O
*	O
pz	*(*(char))
)	O
;	O
}	O
errno	O
=	O
ierr	int
;	O
return	O
iret	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
3	int
;	O
i	int
++	O
)	O
{	O
if	O
(	O
aichild_descs	array(int)
[	O
i	int
]	O
!=	O
i	int
)	O
(	O
void	O
)	O
dup2	(int,int)->(int)
(	O
aichild_descs	array(int)
[	O
i	int
]	O
,	O
i	int
)	O
;	O
(	O
void	O
)	O
fcntl	(int,int)->(int)
(	O
i	int
,	O
F_SETFD	int
,	O
fcntl	(int,int)->(int)
(	O
i	int
,	O
F_GETFD	int
,	O
0	int
)	O
&	O
~	O
FD_CLOEXEC	int
)	O
;	O
}	O
zcmd	*(char)
=	O
pazargs	*(*(char))
[	O
0	int
]	O
;	O
pazargs	*(*(char))
[	O
0	int
]	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
zcmd	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
pazargs	*(*(char))
[	O
0	int
]	O
==	O
NULL	O
)	O
pazargs	*(*(char))
[	O
0	int
]	O
=	O
zcmd	*(char)
;	O
else	O
++	O
pazargs	*(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
!	O
fkeepuid	int
)	O
{	O
(	O
void	O
)	O
setuid	(int)->(int)
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
(	O
void	O
)	O
setgid	(int)->(int)
(	O
getgid	()->(int)
(	O
)	O
)	O
;	O
}	O
else	O
{	O
(	O
void	O
)	O
setreuid	(int,int)->(int)
(	O
geteuid	()->(int)
(	O
)	O
,	O
-	O
1	int
)	O
;	O
(	O
void	O
)	O
setregid	(int,int)->(int)
(	O
getegid	()->(int)
(	O
)	O
,	O
-	O
1	int
)	O
;	O
}	O
if	O
(	O
zchdir	*(char)
!=	O
NULL	O
)	O
(	O
void	O
)	O
chdir	(*(char))->(int)
(	O
zchdir	*(char)
)	O
;	O
if	O
(	O
fnosigs	int
)	O
{	O
(	O
void	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGHUP	int
,	O
SIG_IGN	O
)	O
;	O
(	O
void	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGINT	int
,	O
SIG_IGN	O
)	O
;	O
(	O
void	O
)	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGQUIT	int
,	O
SIG_IGN	O
)	O
;	O
}	O
(	O
void	O
)	O
execve	(*(char),array(*(char)),array(*(char)))->(int)
(	O
(	O
char	O
*	O
)	O
zcmd	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
pazargs	*(*(char))
,	O
pazenv	*(*(char))
)	O
;	O
if	O
(	O
errno	O
==	O
ENOEXEC	int
&&	O
fshell	int
)	O
{	O
char	O
*	O
zto	*(char)
;	O
const	O
char	O
*	O
azshargs	array(*(char))
[	O
4	int
]	O
;	O
pazargs	*(*(char))
[	O
0	int
]	O
=	O
zcmd	*(char)
;	O
zto	*(char)
=	O
zshcmd	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
pazargs	*(*(char))
[	O
i	int
]	O
!=	O
NULL	O
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
zfrom	*(char)
;	O
for	O
(	O
zfrom	*(char)
=	O
pazargs	*(*(char))
[	O
i	int
]	O
;	O
*	O
zfrom	*(char)
!=	O
'\0'	O
;	O
zfrom	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
zfrom	*(char)
!=	O
'/'	O
)	O
*	O
zto	*(char)
++	O
=	O
'\\'	O
;	O
*	O
zto	*(char)
++	O
=	O
*	O
zfrom	*(char)
;	O
}	O
*	O
zto	*(char)
++	O
=	O
' '	O
;	O
}	O
*	O
(	O
zto	*(char)
-	O
1	int
)	O
=	O
'\0'	O
;	O
azshargs	array(*(char))
[	O
0	int
]	O
=	O
"sh"	*(char)
;	O
azshargs	array(*(char))
[	O
1	int
]	O
=	O
"-c"	*(char)
;	O
azshargs	array(*(char))
[	O
2	int
]	O
=	O
zshcmd	*(char)
;	O
azshargs	array(*(char))
[	O
3	int
]	O
=	O
NULL	O
;	O
(	O
void	O
)	O
execve	(*(char),array(*(char)),array(*(char)))->(int)
(	O
(	O
char	O
*	O
)	O
"/bin/sh"	*(char)
,	O
(	O
char	O
*	O
*	O
)	O
azshargs	array(*(char))
,	O
pazenv	*(*(char))
)	O
;	O
}	O
_exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
