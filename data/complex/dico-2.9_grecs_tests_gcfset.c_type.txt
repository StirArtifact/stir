struct	O
logging_setup	struct(int,int,*(char),*(char))
{	O
int	O
use_syslog	int
;	O
int	O
print_priority	int
;	O
char	O
*	O
tag	*(char)
;	O
char	O
*	O
facility	*(char)
;	O
}	O
;	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
logging_setup	struct(int,int,*(char),*(char))
;	O
char	O
*	O
scalar_string	*(char)
;	O
char	O
*	O
mailbox_pattern	*(char)
;	O
char	O
*	O
mailbox_type	*(char)
;	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
listvar	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
struct	O
program	struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`))))))
{	O
char	O
*	O
name	*(char)
;	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
logging_setup	struct(int,int,*(char),*(char))
;	O
char	O
*	O
scalar_string	*(char)
;	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
struct	O
program	struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`))))))
*	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
}	O
;	O
struct	O
grecs_list	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))
*	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
static	O
int	O
cb_logging_facility	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void))->(int)
(	O
GRECS_CB_ARGS	O
)	O
{	O
GRECS_CB_AUTO	O
if	O
(	O
cmd	enum(int,int,int)
!=	O
grecs_callback_set_value	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
"Unexpected block statement"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
||	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
"expected string argument"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
*	O
(	O
char	O
*	O
*	O
)	O
varptr	*(void)
=	O
grecs_strdup	(*(char))->(*(char))
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
logging_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"syslog"	*(char)
,	O
NULL	O
,	O
"Send to syslog"	*(char)
,	O
grecs_type_bool	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
,	O
use_syslog	int
)	O
}	O
,	O
{	O
"facility"	*(char)
,	O
"name"	*(char)
,	O
"Set logging facility"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_AGGR	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
,	O
facility	*(char)
)	O
,	O
cb_logging_facility	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void))->(int)
}	O
,	O
{	O
"tag"	*(char)
,	O
"label"	*(char)
,	O
"Tag logging messages with this string"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
,	O
tag	*(char)
)	O
}	O
,	O
{	O
"print-priority"	*(char)
,	O
NULL	O
,	O
"Prefix each message with its priority"	*(char)
,	O
grecs_type_bool	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
,	O
print_priority	int
)	O
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
mailbox_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"mailbox-pattern"	*(char)
,	O
NULL	O
,	O
"Default mailbox pattern"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
&	O
mailbox_pattern	*(char)
}	O
,	O
{	O
"mailbox-type"	*(char)
,	O
NULL	O
,	O
"Default mailbox type"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
&	O
mailbox_type	*(char)
}	O
,	O
{	O
NULL	O
}	O
,	O
}	O
;	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
program_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"scalar"	*(char)
,	O
"label"	*(char)
,	O
"Scalar string"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
program	struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`))))))
,	O
scalar_string	*(char)
)	O
}	O
,	O
{	O
"logging"	*(char)
,	O
NULL	O
,	O
"Configure logging logging"	*(char)
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
offsetof	O
(	O
struct	O
program	struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`))))))
,	O
logging_setup	struct(int,int,*(char),*(char))
)	O
,	O
NULL	O
,	O
NULL	O
,	O
logging_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
cb_program	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void))->(int)
(	O
GRECS_CB_ARGS	O
)	O
{	O
struct	O
program	struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`))))))
*	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
;	O
void	O
*	O
*	O
pdata	*(*(void))
=	O
cb_data	*(void)
;	O
GRECS_CB_AUTO	O
switch	O
(	O
cmd	enum(int,int,int)
)	O
{	O
case	O
grecs_callback_section_begin	int
:	O
if	O
(	O
!	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
||	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	int
!=	O
GRECS_TYPE_STRING	int
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
"tag must be a string"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
=	O
grecs_zalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
)	O
)	O
;	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
->	O
name	*(char)
=	O
grecs_strdup	(*(char))->(*(char))
(	O
value	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
string	*(char)
)	O
;	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
->	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
=	O
*	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
*	O
pdata	*(*(void))
=	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
;	O
break	O
;	O
case	O
grecs_callback_section_end	int
:	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
=	O
*	O
pdata	*(*(void))
;	O
if	O
(	O
!	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
)	O
;	O
break	O
;	O
case	O
grecs_callback_set_value	int
:	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
locus	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
0	int
,	O
"invalid use of block statement"	*(char)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
grecs_keyword	struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct(*`,int,int),struct(*`,int,int))),*(void),*(struct(int,struct(struct`,struct`),union(*`,*`,struct`))),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct`),*(void),*(struct`),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct`))))))
main_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
[	O
]	O
=	O
{	O
{	O
"scalar"	*(char)
,	O
"label"	*(char)
,	O
"Scalar string"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_DFLT	int
,	O
&	O
scalar_string	*(char)
}	O
,	O
{	O
"logging"	*(char)
,	O
NULL	O
,	O
"Configure logging logging"	*(char)
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
&	O
logging_setup	struct(int,int,*(char),*(char))
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
logging_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
}	O
,	O
{	O
"mailbox"	*(char)
,	O
NULL	O
,	O
"Mailbox configuration"	*(char)
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
NULL	O
,	O
mailbox_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
}	O
,	O
{	O
"program"	*(char)
,	O
"name: string"	*(char)
,	O
"Subprogram configuration"	*(char)
,	O
grecs_type_section	int
,	O
GRECS_DFLT	int
,	O
NULL	O
,	O
0	int
,	O
cb_program	(enum(int,int,int),*(struct(struct(*(char),int,int),struct(*(char),int,int))),*(void),*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(void))->(int)
,	O
NULL	O
,	O
program_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
}	O
,	O
{	O
"listvar"	*(char)
,	O
NULL	O
,	O
"list variable"	*(char)
,	O
grecs_type_string	int
,	O
GRECS_LIST	int
,	O
&	O
listvar	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
print_logging_setup	(*(struct(int,int,*(char),*(char))))->(void)
(	O
struct	O
logging_setup	struct(int,int,*(char),*(char))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
{	O
printf	(*(char))->(int)
(	O
"logging: %d/%s/%s/%d\n"	*(char)
,	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
use_syslog	int
,	O
S	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
facility	*(char)
)	O
,	O
S	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
tag	*(char)
)	O
,	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
print_priority	int
)	O
;	O
}	O
static	O
void	O
print_program	(*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(*`,struct`,*`,struct`,*`)))))->(void)
(	O
struct	O
program	struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`))))))
*	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
)	O
{	O
printf	(*(char))->(int)
(	O
"Program %s:\n"	*(char)
,	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
->	O
name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"scalar = %s\n"	*(char)
,	O
S	O
(	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
->	O
scalar_string	*(char)
)	O
)	O
;	O
print_logging_setup	(*(struct(int,int,*(char),*(char))))->(void)
(	O
&	O
prog	*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(*(char),struct(int,int,*`,*`),*(char),struct(struct`,struct`),*(struct`)))))
->	O
logging_setup	struct(int,int,*(char),*(char))
)	O
;	O
}	O
static	O
int	O
node_ident_cmp	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
const	O
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
const	O
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ident	*(char)
,	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ident	*(char)
)	O
;	O
}	O
static	O
void	O
usage	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
const	O
char	O
*	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
FILE	struct
*	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
int	O
code	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
fp	*(struct(*((*(char),*(void))->(int)),*(void)))
,	O
"usage: %s [-h] [-cfhelp] [-reduce] [-sort] [-print] [-locus] [-noset] file\n"	*(char)
,	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
)	O
;	O
exit	(int)->(void)
(	O
code	int
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
progname	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
const	O
char	O
*	O
file	*(char)
=	O
NULL	O
;	O
struct	O
grecs_node	struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct)))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(char),struct(long,*`)))),*(struct)))
*	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
;	O
int	O
cfhelp	int
=	O
0	int
;	O
int	O
reduce	int
=	O
0	int
;	O
int	O
print	int
=	O
0	int
;	O
int	O
sort	int
=	O
0	int
;	O
int	O
flags	int
=	O
GRECS_NODE_FLAG_DEFAULT	O
;	O
int	O
dontset	int
=	O
0	int
;	O
while	O
(	O
--	O
argc	int
)	O
{	O
char	O
*	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
=	O
*	O
++	O
argv	*(*(char))
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-cfhelp"	*(char)
)	O
==	O
0	int
)	O
cfhelp	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-h"	*(char)
)	O
==	O
0	int
)	O
usage	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
progname	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-reduce"	*(char)
)	O
==	O
0	int
)	O
reduce	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-print"	*(char)
)	O
==	O
0	int
)	O
print	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-locus"	*(char)
)	O
==	O
0	int
)	O
flags	int
|=	O
GRECS_NODE_FLAG_LOCUS	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-delim="	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
flags	int
|=	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
[	O
7	int
]	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-sort"	*(char)
)	O
==	O
0	int
)	O
sort	int
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
,	O
"-noset"	*(char)
)	O
==	O
0	int
)	O
dontset	int
=	O
1	int
;	O
else	O
if	O
(	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
[	O
0	int
]	O
==	O
'-'	O
)	O
usage	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
progname	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
else	O
if	O
(	O
file	*(char)
)	O
usage	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
progname	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
else	O
file	*(char)
=	O
arg	struct(long,*(*(struct(int,struct(struct`,struct`)))))
;	O
}	O
if	O
(	O
(	O
!	O
file	*(char)
&&	O
!	O
cfhelp	int
)	O
||	O
argc	int
)	O
usage	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(void)
(	O
progname	*(char)
,	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
1	int
)	O
;	O
if	O
(	O
cfhelp	int
)	O
{	O
static	O
char	O
docstring	*(char)
[	O
]	O
=	O
"Sample configuration file structure.\n"	*(char)
;	O
grecs_print_docstring	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
docstring	*(char)
,	O
0	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
grecs_print_statement_array	(*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
main_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
,	O
1	int
,	O
0	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
=	O
grecs_parse	(*(char))->(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))
(	O
file	*(char)
)	O
;	O
if	O
(	O
!	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
if	O
(	O
reduce	int
)	O
grecs_tree_reduce	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))),int)->(int)
(	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
main_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
,	O
GRECS_AGGR	int
)	O
;	O
if	O
(	O
sort	int
)	O
grecs_tree_sort	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*((*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)))->(int)))->(void)
(	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
node_ident_cmp	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
)	O
;	O
if	O
(	O
print	int
)	O
{	O
grecs_print_node	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
flags	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
if	O
(	O
dontset	int
)	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
if	O
(	O
grecs_tree_process	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`)))))->(int)
(	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
,	O
main_kwtab	array(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*(struct(struct`,struct`)),*(void),*(struct(int,struct`,union`)),*(void))->(int)),*(void),*(struct(*(char),*(char),*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*(void),long,*((enum(int,int,int),*`,*`,*`,*`)->(int)),*(void),*(struct(*`,*`,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,*`,long,*`,*`,*`))))))
)	O
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
grecs_tree_free	(*(struct(enum(int,int,int),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(struct(enum(int,int,int),struct`,*`,*`,*`,*`,*`,struct`,union`)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),union(*(struct`),*(struct`)))))->(int)
(	O
tree	*(struct(enum(int,int,int),struct(struct(*(char),int,int),struct(*(char),int,int)),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(struct(enum(int,int,int),struct(struct`,struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(char),struct(struct`,struct`),union(*`,*`))),*(char),struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(int,struct`,union`)),*(struct))))
)	O
;	O
printf	(*(char))->(int)
(	O
"Global settings:\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"scalar = %s\n"	*(char)
,	O
S	O
(	O
scalar_string	*(char)
)	O
)	O
;	O
if	O
(	O
listvar	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
{	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
printf	(*(char))->(int)
(	O
"listvar ="	*(char)
)	O
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
listvar	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
printf	(*(char))->(int)
(	O
" \"%s\""	*(char)
,	O
(	O
char	O
*	O
)	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
)	O
;	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
print_logging_setup	(*(struct(int,int,*(char),*(char))))->(void)
(	O
&	O
logging_setup	struct(int,int,*(char),*(char))
)	O
;	O
if	O
(	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
{	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
printf	(*(char))->(int)
(	O
"Programs configured: %lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
grecs_list_size	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(long)
(	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
)	O
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
proglist	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
print_program	(*(struct(*(char),struct(int,int,*(char),*(char)),*(char),struct(struct(*`,int,int),struct(*`,int,int)),*(struct(*`,struct`,*`,struct`,*`)))))->(void)
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
