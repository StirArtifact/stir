static	O
gsl_odeiv2_driver	struct
*	O
driver_alloc	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))))->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
const	O
double	O
hstart	double
,	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	*(int)
;	O
if	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"gsl_odeiv2_system must be defined"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
=	O
(	O
gsl_odeiv2_driver	struct
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_odeiv2_driver	struct
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for driver state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
{	O
const	O
size_t	long
dim	long
=	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
->	O
dimension	long
;	O
if	O
(	O
dim	long
==	O
0	int
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"gsl_odeiv2_system dimension must be a positive integer"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
->	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
=	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
;	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
gsl_odeiv2_step_alloc	(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long)->(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))))
(	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
,	O
dim	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate step object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
=	O
gsl_odeiv2_evolve_alloc	(long)->(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))))
(	O
dim	long
)	O
;	O
}	O
if	O
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate evolve object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
hstart	double
>	O
0.0	int
||	O
hstart	double
<	O
0.0	int
)	O
{	O
state	*(int)
->	O
h	double
=	O
hstart	double
;	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"invalid hstart"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
->	O
h	double
=	O
hstart	double
;	O
state	*(int)
->	O
hmin	double
=	O
0.0	int
;	O
state	*(int)
->	O
hmax	double
=	O
GSL_DBL_MAX	int
;	O
state	*(int)
->	O
nmax	long
=	O
0	int
;	O
state	*(int)
->	O
n	long
=	O
0	int
;	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
=	O
NULL	O
;	O
return	O
state	*(int)
;	O
}	O
int	O
gsl_odeiv2_driver_set_hmin	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),double)->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
,	O
const	O
double	O
hmin	double
)	O
{	O
if	O
(	O
(	O
fabs	(double)->(double)
(	O
hmin	double
)	O
>	O
fabs	(double)->(double)
(	O
d	*(struct)
->	O
h	double
)	O
)	O
||	O
(	O
fabs	(double)->(double)
(	O
hmin	double
)	O
>	O
d	*(struct)
->	O
hmax	double
)	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"hmin <= fabs(h) <= hmax required"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
d	*(struct)
->	O
hmin	double
=	O
fabs	(double)->(double)
(	O
hmin	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_set_hmax	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),double)->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
,	O
const	O
double	O
hmax	double
)	O
{	O
if	O
(	O
(	O
fabs	(double)->(double)
(	O
hmax	double
)	O
<	O
fabs	(double)->(double)
(	O
d	*(struct)
->	O
h	double
)	O
)	O
||	O
(	O
fabs	(double)->(double)
(	O
hmax	double
)	O
<	O
d	*(struct)
->	O
hmin	double
)	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"hmin <= fabs(h) <= hmax required"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
hmax	double
>	O
0.0	int
||	O
hmax	double
<	O
0.0	int
)	O
{	O
d	*(struct)
->	O
hmax	double
=	O
fabs	(double)->(double)
(	O
hmax	double
)	O
;	O
}	O
else	O
{	O
GSL_ERROR_NULL	O
(	O
"invalid hmax"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_set_nmax	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),long)->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
,	O
const	O
unsigned	O
long	O
int	O
nmax	long
)	O
{	O
d	*(struct)
->	O
nmax	long
=	O
nmax	long
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_y_new	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),double,double,double)->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	*(int)
=	O
driver_alloc	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))))->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
hstart	double
,	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
=	O
gsl_odeiv2_control_y_new	(double,double)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))))
(	O
epsabs	double
,	O
epsrel	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_evolve_set_driver	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct))->(int)
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_control_set_driver	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
state	*(int)
)	O
;	O
return	O
state	*(int)
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_yp_new	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),double,double,double)->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	*(int)
=	O
driver_alloc	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))))->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
hstart	double
,	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
=	O
gsl_odeiv2_control_yp_new	(double,double)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))))
(	O
epsabs	double
,	O
epsrel	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_evolve_set_driver	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct))->(int)
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_control_set_driver	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
state	*(int)
)	O
;	O
return	O
state	*(int)
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_standard_new	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),double,double,double,double,double)->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
double	O
a_y	double
,	O
const	O
double	O
a_dydt	double
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	*(int)
=	O
driver_alloc	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))))->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
hstart	double
,	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
=	O
gsl_odeiv2_control_standard_new	(double,double,double,double)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))))
(	O
epsabs	double
,	O
epsrel	double
,	O
a_y	double
,	O
a_dydt	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_evolve_set_driver	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct))->(int)
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_control_set_driver	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
state	*(int)
)	O
;	O
return	O
state	*(int)
;	O
}	O
gsl_odeiv2_driver	struct
*	O
gsl_odeiv2_driver_alloc_scaled_new	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),double,double,double,double,double,array(double))->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
,	O
const	O
double	O
hstart	double
,	O
const	O
double	O
epsabs	double
,	O
const	O
double	O
epsrel	double
,	O
const	O
double	O
a_y	double
,	O
const	O
double	O
a_dydt	double
,	O
const	O
double	O
scale_abs	array(double)
[	O
]	O
)	O
{	O
gsl_odeiv2_driver	struct
*	O
state	*(int)
=	O
driver_alloc	(*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),double,*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))))->(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
hstart	double
,	O
T	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate driver object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
if	O
(	O
epsabs	double
>=	O
0.0	int
&&	O
epsrel	double
>=	O
0.0	int
)	O
{	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
=	O
gsl_odeiv2_control_scaled_new	(double,double,double,double,array(double),long)->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))))
(	O
epsabs	double
,	O
epsrel	double
,	O
a_y	double
,	O
a_dydt	double
,	O
scale_abs	array(double)
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
->	O
dimension	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
==	O
NULL	O
)	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate control object"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
}	O
else	O
{	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"epsabs and epsrel must be positive"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
gsl_odeiv2_step_set_driver	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_evolve_set_driver	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct))->(int)
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
,	O
state	*(int)
)	O
;	O
gsl_odeiv2_control_set_driver	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct))->(int)
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
state	*(int)
)	O
;	O
return	O
state	*(int)
;	O
}	O
int	O
gsl_odeiv2_driver_apply	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),*(double),double,array(double))->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
,	O
double	O
*	O
t	double
,	O
const	O
double	O
t1	double
,	O
double	O
y	array(double)
[	O
]	O
)	O
{	O
int	O
sign	int
=	O
0	int
;	O
d	*(struct)
->	O
n	long
=	O
0	int
;	O
if	O
(	O
d	*(struct)
->	O
h	double
>	O
0.0	int
)	O
{	O
sign	int
=	O
1	int
;	O
}	O
else	O
{	O
sign	int
=	O
-	O
1	int
;	O
}	O
if	O
(	O
sign	int
*	O
(	O
t1	double
-	O
*	O
t	double
)	O
<	O
0.0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"integration limits and/or step direction not consistent"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
while	O
(	O
sign	int
*	O
(	O
t1	double
-	O
*	O
t	double
)	O
>	O
0.0	int
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
gsl_odeiv2_evolve_apply	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(double),double,*(double),array(double))->(int)
(	O
d	*(struct)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
,	O
d	*(struct)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
d	*(struct)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
d	*(struct)
->	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
t1	double
,	O
&	O
(	O
d	*(struct)
->	O
h	double
)	O
,	O
y	array(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
if	O
(	O
(	O
d	*(struct)
->	O
nmax	long
>	O
0	int
)	O
&&	O
(	O
d	*(struct)
->	O
n	long
>	O
d	*(struct)
->	O
nmax	long
)	O
)	O
{	O
return	O
GSL_EMAXITER	int
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
d	*(struct)
->	O
h	double
)	O
>	O
d	*(struct)
->	O
hmax	double
)	O
{	O
d	*(struct)
->	O
h	double
=	O
sign	int
*	O
d	*(struct)
->	O
hmax	double
;	O
}	O
if	O
(	O
fabs	(double)->(double)
(	O
d	*(struct)
->	O
h	double
)	O
<	O
d	*(struct)
->	O
hmin	double
)	O
{	O
return	O
GSL_ENOPROG	int
;	O
}	O
d	*(struct)
->	O
n	long
++	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_apply_fixed_step	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),*(double),double,long,array(double))->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
,	O
double	O
*	O
t	double
,	O
const	O
double	O
h	double
,	O
const	O
unsigned	O
long	O
int	O
n	long
,	O
double	O
y	array(double)
[	O
]	O
)	O
{	O
unsigned	O
long	O
int	O
i	long
;	O
d	*(struct)
->	O
n	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
gsl_odeiv2_evolve_apply_fixed_step	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),*(double),double,array(double))->(int)
(	O
d	*(struct)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
,	O
d	*(struct)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
d	*(struct)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
,	O
d	*(struct)
->	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
h	double
,	O
y	array(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
d	*(struct)
->	O
n	long
++	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_reset	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
)	O
{	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
gsl_odeiv2_evolve_reset	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))))->(int)
(	O
d	*(struct)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
gsl_odeiv2_step_reset	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))))->(int)
(	O
d	*(struct)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_odeiv2_driver_reset_hstart	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)),double)->(int)
(	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
,	O
const	O
double	O
hstart	double
)	O
{	O
gsl_odeiv2_driver_reset	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(int)
(	O
d	*(struct)
)	O
;	O
if	O
(	O
(	O
d	*(struct)
->	O
hmin	double
>	O
fabs	(double)->(double)
(	O
hstart	double
)	O
)	O
||	O
(	O
fabs	(double)->(double)
(	O
hstart	double
)	O
>	O
d	*(struct)
->	O
hmax	double
)	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"hmin <= fabs(h) <= hmax required"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
hstart	double
>	O
0.0	int
||	O
hstart	double
<	O
0.0	int
)	O
{	O
d	*(struct)
->	O
h	double
=	O
hstart	double
;	O
}	O
else	O
{	O
GSL_ERROR_NULL	O
(	O
"invalid hstart"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
void	O
gsl_odeiv2_driver_free	(*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(void)
(	O
gsl_odeiv2_driver	struct
*	O
state	*(int)
)	O
{	O
if	O
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
)	O
gsl_odeiv2_control_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))))->(void)
(	O
state	*(int)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
)	O
;	O
if	O
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
)	O
gsl_odeiv2_evolve_free	(*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct))))->(void)
(	O
state	*(int)
->	O
e	*(struct(long,*(double),*(double),*(double),*(double),double,long,long,*(struct)))
)	O
;	O
if	O
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
)	O
gsl_odeiv2_step_free	(*(struct(*(struct(*`,int,int,*`,*`,*`,*`,*`,*`)),long,*(void))))->(void)
(	O
state	*(int)
->	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
