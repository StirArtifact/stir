static	O
inline	O
void	O
francis_schur_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
inline	O
size_t	long
francis_search_subdiag_small_elements	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
static	O
inline	O
int	O
francis_qrstep	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
inline	O
void	O
francis_schur_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),*(struct(array(double))),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_complex	struct(array(double))
*	O
eval1	*(struct(array(double)))
,	O
gsl_complex	struct(array(double))
*	O
eval2	*(struct(array(double)))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
static	O
inline	O
size_t	long
francis_get_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
;	O
static	O
void	O
francis_standard_form	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
cs	*(double)
,	O
double	O
*	O
sn	*(double)
)	O
;	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
gsl_eigen_francis_alloc	()->(*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))
(	O
void	O
)	O
{	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
(	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
)	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
)	O
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
=	O
0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
max_iterations	long
=	O
0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
=	O
0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
compute_t	int
=	O
0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
NULL	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
NULL	O
;	O
return	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
void	O
gsl_eigen_francis_free	(*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
RETURN_IF_NULL	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
void	O
gsl_eigen_francis_T	(int,*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
const	O
int	O
compute_t	int
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
compute_t	int
=	O
compute_t	int
;	O
}	O
int	O
gsl_eigen_francis	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
if	O
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square to compute eigenvalues"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalue vector must match matrix size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
int	O
j	long
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
=	O
N	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
max_iterations	long
=	O
30	int
*	O
N	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
=	O
0	int
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
(	O
int	O
)	O
N	int
-	O
3	int
;	O
++	O
j	long
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
(	O
size_t	long
)	O
j	long
+	O
2	int
,	O
(	O
size_t	long
)	O
j	long
,	O
0.0	int
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
(	O
size_t	long
)	O
j	long
+	O
3	int
,	O
(	O
size_t	long
)	O
j	long
,	O
0.0	int
)	O
;	O
}	O
if	O
(	O
N	int
>	O
2	int
)	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
1	int
,	O
N	int
-	O
3	int
,	O
0.0	int
)	O
;	O
francis_schur_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"maximum iterations reached without finding all eigenvalues"	*(char)
,	O
GSL_EMAXITER	int
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_francis_Z	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
int	O
s	*(float)
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
s	*(float)
=	O
gsl_eigen_francis	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
NULL	O
;	O
return	O
s	*(float)
;	O
}	O
static	O
inline	O
void	O
francis_schur_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
size_t	long
N	int
;	O
size_t	long
q	*(struct(long,*(long)))
;	O
gsl_complex	struct(array(double))
lambda1	struct(array(double))
,	O
lambda2	struct(array(double))
;	O
N	int
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
while	O
(	O
(	O
N	int
>	O
2	int
)	O
&&	O
(	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
)	O
++	O
<	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
max_iterations	long
)	O
)	O
{	O
q	*(struct(long,*(long)))
=	O
francis_search_subdiag_small_elements	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
q	*(struct(long,*(long)))
==	O
0	int
)	O
{	O
francis_qrstep	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
q	*(struct(long,*(long)))
==	O
(	O
N	int
-	O
1	int
)	O
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda1	struct(array(double))
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
q	*(struct(long,*(long)))
,	O
q	*(struct(long,*(long)))
)	O
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
,	O
lambda1	struct(array(double))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+=	O
1	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
--	O
N	int
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
if	O
(	O
q	*(struct(long,*(long)))
==	O
(	O
N	int
-	O
2	int
)	O
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
q	*(struct(long,*(long)))
,	O
q	*(struct(long,*(long)))
,	O
2	int
,	O
2	int
)	O
;	O
francis_schur_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),*(struct(array(double))),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
lambda1	struct(array(double))
,	O
&	O
lambda2	struct(array(double))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
,	O
lambda1	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+	O
1	int
,	O
lambda2	struct(array(double))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+=	O
2	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
N	int
-=	O
2	int
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
if	O
(	O
q	*(struct(long,*(long)))
==	O
1	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda1	struct(array(double))
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
)	O
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
,	O
lambda1	struct(array(double))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+=	O
1	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
--	O
N	int
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
1	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
if	O
(	O
q	*(struct(long,*(long)))
==	O
2	int
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
2	int
,	O
2	int
)	O
;	O
francis_schur_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),*(struct(array(double))),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
lambda1	struct(array(double))
,	O
&	O
lambda2	struct(array(double))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
,	O
lambda1	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+	O
1	int
,	O
lambda2	struct(array(double))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+=	O
2	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
N	int
-=	O
2	int
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
2	int
,	O
2	int
,	O
N	int
,	O
N	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
q	*(struct(long,*(long)))
,	O
q	*(struct(long,*(long)))
,	O
N	int
-	O
q	*(struct(long,*(long)))
,	O
N	int
-	O
q	*(struct(long,*(long)))
)	O
;	O
francis_schur_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
q	*(struct(long,*(long)))
,	O
q	*(struct(long,*(long)))
)	O
;	O
francis_schur_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
N	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
lambda1	struct(array(double))
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
)	O
,	O
0.0	int
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
,	O
lambda1	struct(array(double))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+=	O
1	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
N	int
==	O
2	int
)	O
{	O
francis_schur_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),*(struct(array(double))),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
lambda1	struct(array(double))
,	O
&	O
lambda2	struct(array(double))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
,	O
lambda1	struct(array(double))
)	O
;	O
gsl_vector_complex_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,struct(array(double)))->(void)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+	O
1	int
,	O
lambda2	struct(array(double))
)	O
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_evals	long
+=	O
2	int
;	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
=	O
0	int
;	O
}	O
}	O
static	O
inline	O
int	O
francis_qrstep	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
size_t	long
i	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
tau_i	double
;	O
double	O
dat	array(long double)
[	O
3	int
]	O
;	O
double	O
scale	double
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
size_t	long
q	*(struct(long,*(long)))
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
size_t	long
top	long
=	O
0	int
;	O
double	O
s	*(float)
,	O
disc	double
;	O
double	O
h_nn	double
,	O
h_nm1nm1	double
,	O
h_cross	double
,	O
h_tmp1	double
,	O
h_tmp2	double
;	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat	array(long double)
,	O
2	int
)	O
;	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
dat	array(long double)
,	O
3	int
)	O
;	O
if	O
(	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
n_iter	long
%	O
10	int
)	O
==	O
0	int
)	O
{	O
s	*(float)
=	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
1	int
,	O
N	int
-	O
2	int
)	O
)	O
+	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
2	int
,	O
N	int
-	O
3	int
)	O
)	O
;	O
h_nn	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
1	int
,	O
N	int
-	O
1	int
)	O
+	O
GSL_FRANCIS_COEFF1	O
*	O
s	*(float)
;	O
h_nm1nm1	double
=	O
h_nn	double
;	O
h_cross	double
=	O
GSL_FRANCIS_COEFF2	O
*	O
s	*(float)
*	O
s	*(float)
;	O
}	O
else	O
{	O
h_nn	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
1	int
,	O
N	int
-	O
1	int
)	O
;	O
h_nm1nm1	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
2	int
,	O
N	int
-	O
2	int
)	O
;	O
h_cross	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
1	int
,	O
N	int
-	O
2	int
)	O
*	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
2	int
,	O
N	int
-	O
1	int
)	O
;	O
disc	double
=	O
0.5	int
*	O
(	O
h_nm1nm1	double
-	O
h_nn	double
)	O
;	O
disc	double
=	O
disc	double
*	O
disc	double
+	O
h_cross	double
;	O
if	O
(	O
disc	double
>	O
0.0	int
)	O
{	O
double	O
ave	double
;	O
disc	double
=	O
sqrt	(double)->(double)
(	O
disc	double
)	O
;	O
ave	double
=	O
0.5	int
*	O
(	O
h_nm1nm1	double
+	O
h_nn	double
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
h_nm1nm1	double
)	O
-	O
fabs	(double)->(double)
(	O
h_nn	double
)	O
>	O
0.0	int
)	O
{	O
h_nm1nm1	double
=	O
h_nm1nm1	double
*	O
h_nn	double
-	O
h_cross	double
;	O
h_nn	double
=	O
h_nm1nm1	double
/	O
(	O
disc	double
*	O
GSL_SIGN	O
(	O
ave	double
)	O
+	O
ave	double
)	O
;	O
}	O
else	O
{	O
h_nn	double
=	O
disc	double
*	O
GSL_SIGN	O
(	O
ave	double
)	O
+	O
ave	double
;	O
}	O
h_nm1nm1	double
=	O
h_nn	double
;	O
h_cross	double
=	O
0.0	int
;	O
}	O
}	O
h_tmp1	double
=	O
h_nm1nm1	double
-	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
h_tmp2	double
=	O
h_nn	double
-	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
dat	array(long double)
[	O
0	int
]	O
=	O
(	O
h_tmp1	double
*	O
h_tmp2	double
-	O
h_cross	double
)	O
/	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
0	int
)	O
+	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
1	int
)	O
;	O
dat	array(long double)
[	O
1	int
]	O
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
1	int
)	O
-	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
-	O
h_tmp1	double
-	O
h_tmp2	double
;	O
dat	array(long double)
[	O
2	int
]	O
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
2	int
,	O
1	int
)	O
;	O
scale	double
=	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
0	int
]	O
)	O
+	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
1	int
]	O
)	O
+	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
{	O
dat	array(long double)
[	O
0	int
]	O
/=	O
scale	double
;	O
dat	array(long double)
[	O
1	int
]	O
/=	O
scale	double
;	O
dat	array(long double)
[	O
2	int
]	O
/=	O
scale	double
;	O
}	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
||	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
compute_t	int
)	O
{	O
top	long
=	O
francis_get_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
2	int
;	O
++	O
i	long
)	O
{	O
tau_i	double
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
tau_i	double
!=	O
0.0	int
)	O
{	O
q	*(struct(long,*(long)))
=	O
(	O
1	int
>	O
(	O
(	O
int	O
)	O
i	long
-	O
1	int
)	O
)	O
?	O
0	int
:	O
(	O
i	long
-	O
1	int
)	O
;	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
(	O
(	O
i	long
+	O
3	int
)	O
<	O
(	O
N	int
-	O
1	int
)	O
)	O
?	O
(	O
i	long
+	O
3	int
)	O
:	O
(	O
N	int
-	O
1	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
compute_t	int
)	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
+	O
i	long
,	O
top	long
+	O
q	*(struct(long,*(long)))
,	O
3	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
-	O
top	long
-	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_linalg_householder_hm	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
top	long
+	O
i	long
,	O
top	long
+	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
+	O
1	int
,	O
3	int
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
q	*(struct(long,*(long)))
,	O
3	int
,	O
N	int
-	O
q	*(struct(long,*(long)))
)	O
;	O
gsl_linalg_householder_hm	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
i	long
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
+	O
1	int
,	O
3	int
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
top	long
+	O
i	long
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
,	O
3	int
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v3	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
dat	array(long double)
[	O
0	int
]	O
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
,	O
i	long
)	O
;	O
dat	array(long double)
[	O
1	int
]	O
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
2	int
,	O
i	long
)	O
;	O
if	O
(	O
i	long
<	O
(	O
N	int
-	O
3	int
)	O
)	O
{	O
dat	array(long double)
[	O
2	int
]	O
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
3	int
,	O
i	long
)	O
;	O
}	O
scale	double
=	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
0	int
]	O
)	O
+	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
1	int
]	O
)	O
+	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
2	int
]	O
)	O
;	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
{	O
dat	array(long double)
[	O
0	int
]	O
/=	O
scale	double
;	O
dat	array(long double)
[	O
1	int
]	O
/=	O
scale	double
;	O
dat	array(long double)
[	O
2	int
]	O
/=	O
scale	double
;	O
}	O
}	O
scale	double
=	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
0	int
]	O
)	O
+	O
fabs	(double)->(double)
(	O
dat	array(long double)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
scale	double
!=	O
0.0	int
)	O
{	O
dat	array(long double)
[	O
0	int
]	O
/=	O
scale	double
;	O
dat	array(long double)
[	O
1	int
]	O
/=	O
scale	double
;	O
}	O
tau_i	double
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
compute_t	int
)	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
+	O
N	int
-	O
2	int
,	O
top	long
+	O
N	int
-	O
3	int
,	O
2	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
-	O
top	long
-	O
N	int
+	O
3	int
)	O
;	O
gsl_linalg_householder_hm	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
top	long
+	O
N	int
-	O
2	int
,	O
top	long
+	O
N	int
,	O
2	int
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
-	O
2	int
,	O
N	int
-	O
3	int
,	O
2	int
,	O
3	int
)	O
;	O
gsl_linalg_householder_hm	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N	int
-	O
2	int
,	O
N	int
,	O
2	int
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
top	long
+	O
N	int
-	O
2	int
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
,	O
2	int
)	O
;	O
gsl_linalg_householder_mh	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
tau_i	double
,	O
&	O
v2	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
inline	O
size_t	long
francis_search_subdiag_small_elements	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
size_t	long
i	long
;	O
double	O
dpel	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
N	int
-	O
2	int
,	O
N	int
-	O
2	int
)	O
;	O
for	O
(	O
i	long
=	O
N	int
-	O
1	int
;	O
i	long
>	O
0	int
;	O
--	O
i	long
)	O
{	O
double	O
sel	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
i	long
,	O
i	long
-	O
1	int
)	O
;	O
double	O
del	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
(	O
sel	double
==	O
0.0	int
)	O
||	O
(	O
fabs	(double)->(double)
(	O
sel	double
)	O
<	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
del	double
)	O
+	O
fabs	(double)->(double)
(	O
dpel	double
)	O
)	O
)	O
)	O
{	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
i	long
,	O
i	long
-	O
1	int
,	O
0.0	int
)	O
;	O
return	O
(	O
i	long
)	O
;	O
}	O
dpel	double
=	O
del	double
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
static	O
inline	O
void	O
francis_schur_standardize	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(array(double))),*(struct(array(double))),*(struct(long,long,long,long,int,*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_complex	struct(array(double))
*	O
eval1	*(struct(array(double)))
,	O
gsl_complex	struct(array(double))
*	O
eval2	*(struct(array(double)))
,	O
gsl_eigen_francis_workspace	struct(long,long,long,long,int,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
size	long
;	O
double	O
cs	*(double)
,	O
sn	*(double)
;	O
size_t	long
top	long
;	O
top	long
=	O
francis_get_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
A	*(float)
)	O
;	O
francis_standard_form	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(void)
(	O
A	*(float)
,	O
&	O
cs	*(double)
,	O
&	O
sn	*(double)
)	O
;	O
GSL_SET_REAL	O
(	O
eval1	*(struct(array(double)))
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
)	O
;	O
GSL_SET_REAL	O
(	O
eval2	*(struct(array(double)))
,	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
1	int
)	O
)	O
;	O
if	O
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
==	O
0.0	int
)	O
{	O
GSL_SET_IMAG	O
(	O
eval1	*(struct(array(double)))
,	O
0.0	int
)	O
;	O
GSL_SET_IMAG	O
(	O
eval2	*(struct(array(double)))
,	O
0.0	int
)	O
;	O
}	O
else	O
{	O
double	O
tmp	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
1	int
)	O
)	O
*	O
fabs	(double)->(double)
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
)	O
)	O
;	O
GSL_SET_IMAG	O
(	O
eval1	*(struct(array(double)))
,	O
tmp	double
)	O
;	O
GSL_SET_IMAG	O
(	O
eval2	*(struct(array(double)))
,	O
-	O
tmp	double
)	O
;	O
}	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
compute_t	int
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
if	O
(	O
top	long
<	O
(	O
N	int
-	O
2	int
)	O
)	O
{	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
,	O
top	long
+	O
2	int
,	O
N	int
-	O
top	long
-	O
2	int
)	O
;	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
+	O
1	int
,	O
top	long
+	O
2	int
,	O
N	int
-	O
top	long
-	O
2	int
)	O
;	O
gsl_blas_drot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
cs	*(double)
,	O
sn	*(double)
)	O
;	O
}	O
if	O
(	O
top	long
>	O
0	int
)	O
{	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
,	O
0	int
,	O
top	long
)	O
;	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
H	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
+	O
1	int
,	O
0	int
,	O
top	long
)	O
;	O
gsl_blas_drot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
cs	*(double)
,	O
sn	*(double)
)	O
;	O
}	O
}	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
)	O
;	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
Z	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
top	long
+	O
1	int
)	O
;	O
gsl_blas_drot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
(	O
&	O
xv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
yv	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
cs	*(double)
,	O
sn	*(double)
)	O
;	O
}	O
}	O
static	O
inline	O
size_t	long
francis_get_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
)	O
{	O
size_t	long
diff	long
;	O
double	O
ratio	double
;	O
size_t	long
top	long
;	O
diff	long
=	O
(	O
size_t	long
)	O
(	O
B	*(float)
->	O
data	*(long double)
-	O
A	*(float)
->	O
data	*(long double)
)	O
;	O
ratio	double
=	O
(	O
double	O
)	O
diff	long
/	O
(	O
(	O
double	O
)	O
(	O
A	*(float)
->	O
tda	long
+	O
1	int
)	O
)	O
;	O
top	long
=	O
(	O
size_t	long
)	O
floor	(double)->(double)
(	O
ratio	double
)	O
;	O
return	O
top	long
;	O
}	O
static	O
void	O
francis_standard_form	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(void)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
double	O
*	O
cs	*(double)
,	O
double	O
*	O
sn	*(double)
)	O
{	O
double	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
b	*(struct(long,*(long double)))
,	O
c	*(float)
,	O
d	*(double)
;	O
double	O
tmp	double
;	O
double	O
p	int
,	O
z	struct(array(long double))
;	O
double	O
bcmax	double
,	O
bcmis	double
,	O
scale	double
;	O
double	O
tau	*(double)
,	O
sigma	double
;	O
double	O
cs1	double
,	O
sn1	double
;	O
double	O
aa	double
,	O
bb	double
,	O
cc	double
,	O
dd	double
;	O
double	O
sab	double
,	O
sac	double
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
b	*(struct(long,*(long double)))
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
0	int
,	O
1	int
)	O
;	O
c	*(float)
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
0	int
)	O
;	O
d	*(double)
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
A	*(float)
,	O
1	int
,	O
1	int
)	O
;	O
if	O
(	O
c	*(float)
==	O
0.0	int
)	O
{	O
*	O
cs	*(double)
=	O
1.0	int
;	O
*	O
sn	*(double)
=	O
0.0	int
;	O
}	O
else	O
if	O
(	O
b	*(struct(long,*(long double)))
==	O
0.0	int
)	O
{	O
*	O
cs	*(double)
=	O
0.0	int
;	O
*	O
sn	*(double)
=	O
1.0	int
;	O
tmp	double
=	O
d	*(double)
;	O
d	*(double)
=	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
tmp	double
;	O
b	*(struct(long,*(long double)))
=	O
-	O
c	*(float)
;	O
c	*(float)
=	O
0.0	int
;	O
}	O
else	O
if	O
(	O
(	O
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
-	O
d	*(double)
)	O
==	O
0.0	int
)	O
&&	O
(	O
GSL_SIGN	O
(	O
b	*(struct(long,*(long double)))
)	O
!=	O
GSL_SIGN	O
(	O
c	*(float)
)	O
)	O
)	O
{	O
*	O
cs	*(double)
=	O
1.0	int
;	O
*	O
sn	*(double)
=	O
0.0	int
;	O
}	O
else	O
{	O
tmp	double
=	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
-	O
d	*(double)
;	O
p	int
=	O
0.5	int
*	O
tmp	double
;	O
bcmax	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
b	*(struct(long,*(long double)))
)	O
,	O
fabs	(double)->(double)
(	O
c	*(float)
)	O
)	O
;	O
bcmis	double
=	O
GSL_MIN	O
(	O
fabs	(double)->(double)
(	O
b	*(struct(long,*(long double)))
)	O
,	O
fabs	(double)->(double)
(	O
c	*(float)
)	O
)	O
*	O
GSL_SIGN	O
(	O
b	*(struct(long,*(long double)))
)	O
*	O
GSL_SIGN	O
(	O
c	*(float)
)	O
;	O
scale	double
=	O
GSL_MAX	O
(	O
fabs	(double)->(double)
(	O
p	int
)	O
,	O
bcmax	double
)	O
;	O
z	struct(array(long double))
=	O
(	O
p	int
/	O
scale	double
)	O
*	O
p	int
+	O
(	O
bcmax	double
/	O
scale	double
)	O
*	O
bcmis	double
;	O
if	O
(	O
z	struct(array(long double))
>=	O
4.0	int
*	O
GSL_DBL_EPSILON	int
)	O
{	O
z	struct(array(long double))
=	O
p	int
+	O
GSL_SIGN	O
(	O
p	int
)	O
*	O
fabs	(double)->(double)
(	O
sqrt	(double)->(double)
(	O
scale	double
)	O
*	O
sqrt	(double)->(double)
(	O
z	struct(array(long double))
)	O
)	O
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
d	*(double)
+	O
z	struct(array(long double))
;	O
d	*(double)
-=	O
(	O
bcmax	double
/	O
z	struct(array(long double))
)	O
*	O
bcmis	double
;	O
tau	*(double)
=	O
gsl_hypot	(double,double)->(double)
(	O
c	*(float)
,	O
z	struct(array(long double))
)	O
;	O
*	O
cs	*(double)
=	O
z	struct(array(long double))
/	O
tau	*(double)
;	O
*	O
sn	*(double)
=	O
c	*(float)
/	O
tau	*(double)
;	O
b	*(struct(long,*(long double)))
-=	O
c	*(float)
;	O
c	*(float)
=	O
0.0	int
;	O
}	O
else	O
{	O
sigma	double
=	O
b	*(struct(long,*(long double)))
+	O
c	*(float)
;	O
tau	*(double)
=	O
gsl_hypot	(double,double)->(double)
(	O
sigma	double
,	O
tmp	double
)	O
;	O
*	O
cs	*(double)
=	O
sqrt	(double)->(double)
(	O
0.5	int
*	O
(	O
1.0	int
+	O
fabs	(double)->(double)
(	O
sigma	double
)	O
/	O
tau	*(double)
)	O
)	O
;	O
*	O
sn	*(double)
=	O
-	O
(	O
p	int
/	O
(	O
tau	*(double)
*	O
(	O
*	O
cs	*(double)
)	O
)	O
)	O
*	O
GSL_SIGN	O
(	O
sigma	double
)	O
;	O
aa	double
=	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
(	O
*	O
cs	*(double)
)	O
+	O
b	*(struct(long,*(long double)))
*	O
(	O
*	O
sn	*(double)
)	O
;	O
bb	double
=	O
-	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
(	O
*	O
sn	*(double)
)	O
+	O
b	*(struct(long,*(long double)))
*	O
(	O
*	O
cs	*(double)
)	O
;	O
cc	double
=	O
c	*(float)
*	O
(	O
*	O
cs	*(double)
)	O
+	O
d	*(double)
*	O
(	O
*	O
sn	*(double)
)	O
;	O
dd	double
=	O
-	O
c	*(float)
*	O
(	O
*	O
sn	*(double)
)	O
+	O
d	*(double)
*	O
(	O
*	O
cs	*(double)
)	O
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
aa	double
*	O
(	O
*	O
cs	*(double)
)	O
+	O
cc	double
*	O
(	O
*	O
sn	*(double)
)	O
;	O
b	*(struct(long,*(long double)))
=	O
bb	double
*	O
(	O
*	O
cs	*(double)
)	O
+	O
dd	double
*	O
(	O
*	O
sn	*(double)
)	O
;	O
c	*(float)
=	O
-	O
aa	double
*	O
(	O
*	O
sn	*(double)
)	O
+	O
cc	double
*	O
(	O
*	O
cs	*(double)
)	O
;	O
d	*(double)
=	O
-	O
bb	double
*	O
(	O
*	O
sn	*(double)
)	O
+	O
dd	double
*	O
(	O
*	O
cs	*(double)
)	O
;	O
tmp	double
=	O
0.5	int
*	O
(	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
+	O
d	*(double)
)	O
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
d	*(double)
=	O
tmp	double
;	O
if	O
(	O
c	*(float)
!=	O
0.0	int
)	O
{	O
if	O
(	O
b	*(struct(long,*(long double)))
!=	O
0.0	int
)	O
{	O
if	O
(	O
GSL_SIGN	O
(	O
b	*(struct(long,*(long double)))
)	O
==	O
GSL_SIGN	O
(	O
c	*(float)
)	O
)	O
{	O
sab	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
b	*(struct(long,*(long double)))
)	O
)	O
;	O
sac	double
=	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
c	*(float)
)	O
)	O
;	O
p	int
=	O
GSL_SIGN	O
(	O
c	*(float)
)	O
*	O
fabs	(double)->(double)
(	O
sab	double
*	O
sac	double
)	O
;	O
tau	*(double)
=	O
1.0	int
/	O
sqrt	(double)->(double)
(	O
fabs	(double)->(double)
(	O
b	*(struct(long,*(long double)))
+	O
c	*(float)
)	O
)	O
;	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
tmp	double
+	O
p	int
;	O
d	*(double)
=	O
tmp	double
-	O
p	int
;	O
b	*(struct(long,*(long double)))
-=	O
c	*(float)
;	O
c	*(float)
=	O
0.0	int
;	O
cs1	double
=	O
sab	double
*	O
tau	*(double)
;	O
sn1	double
=	O
sac	double
*	O
tau	*(double)
;	O
tmp	double
=	O
(	O
*	O
cs	*(double)
)	O
*	O
cs1	double
-	O
(	O
*	O
sn	*(double)
)	O
*	O
sn1	double
;	O
*	O
sn	*(double)
=	O
(	O
*	O
cs	*(double)
)	O
*	O
sn1	double
+	O
(	O
*	O
sn	*(double)
)	O
*	O
cs1	double
;	O
*	O
cs	*(double)
=	O
tmp	double
;	O
}	O
}	O
else	O
{	O
b	*(struct(long,*(long double)))
=	O
-	O
c	*(float)
;	O
c	*(float)
=	O
0.0	int
;	O
tmp	double
=	O
*	O
cs	*(double)
;	O
*	O
cs	*(double)
=	O
-	O
(	O
*	O
sn	*(double)
)	O
;	O
*	O
sn	*(double)
=	O
tmp	double
;	O
}	O
}	O
}	O
}	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
a	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
0	int
,	O
1	int
,	O
b	*(struct(long,*(long double)))
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
1	int
,	O
0	int
,	O
c	*(float)
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
1	int
,	O
1	int
,	O
d	*(double)
)	O
;	O
}	O
