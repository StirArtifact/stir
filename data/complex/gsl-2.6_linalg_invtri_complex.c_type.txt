static	O
int	O
complex_tri_invert_L2	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
complex_tri_invert_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
int	O
gsl_linalg_complex_tri_invert	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
status	int
=	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
complex_tri_invert_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
static	O
int	O
complex_tri_invert_L2	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasUpper	int
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
*	O
Tii	*(struct(array(double)))
=	O
gsl_matrix_complex_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(struct(array(double))))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
aii	struct(array(double))
;	O
if	O
(	O
Diag	enum(int,int)
==	O
CblasNonUnit	int
)	O
{	O
*	O
Tii	*(struct(array(double)))
=	O
gsl_complex_inverse	(struct(array(double)))->(struct(array(double)))
(	O
*	O
Tii	*(struct(array(double)))
)	O
;	O
GSL_REAL	O
(	O
aii	struct(array(double))
)	O
=	O
-	O
GSL_REAL	O
(	O
*	O
Tii	*(struct(array(double)))
)	O
;	O
GSL_IMAG	O
(	O
aii	struct(array(double))
)	O
=	O
-	O
GSL_IMAG	O
(	O
*	O
Tii	*(struct(array(double)))
)	O
;	O
}	O
else	O
aii	struct(array(double))
=	O
GSL_COMPLEX_NEGONE	O
;	O
if	O
(	O
i	long
>	O
0	int
)	O
{	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
i	long
,	O
i	long
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
0	int
,	O
i	long
)	O
;	O
gsl_blas_ztrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zscal	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
aii	struct(array(double))
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
}	O
else	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
size_t	long
j	long
=	O
N	int
-	O
i	long
-	O
1	int
;	O
gsl_complex	struct(array(double))
*	O
Tjj	*(struct(array(double)))
=	O
gsl_matrix_complex_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(struct(array(double))))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
ajj	struct(array(double))
;	O
if	O
(	O
Diag	enum(int,int)
==	O
CblasNonUnit	int
)	O
{	O
*	O
Tjj	*(struct(array(double)))
=	O
gsl_complex_inverse	(struct(array(double)))->(struct(array(double)))
(	O
*	O
Tjj	*(struct(array(double)))
)	O
;	O
GSL_REAL	O
(	O
ajj	struct(array(double))
)	O
=	O
-	O
GSL_REAL	O
(	O
*	O
Tjj	*(struct(array(double)))
)	O
;	O
GSL_IMAG	O
(	O
ajj	struct(array(double))
)	O
=	O
-	O
GSL_IMAG	O
(	O
*	O
Tjj	*(struct(array(double)))
)	O
;	O
}	O
else	O
ajj	struct(array(double))
=	O
GSL_COMPLEX_NEGONE	O
;	O
if	O
(	O
j	long
<	O
N	int
-	O
1	int
)	O
{	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
+	O
1	int
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_vector_complex_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_complex_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
,	O
j	long
+	O
1	int
,	O
N	int
-	O
j	long
-	O
1	int
)	O
;	O
gsl_blas_ztrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_zscal	(struct(array(double)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
ajj	struct(array(double))
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
complex_tri_invert_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CBLAS_UPLO_t	enum(int,int)
Uplo	enum(int,int)
,	O
CBLAS_DIAG_t	enum(int,int)
Diag	enum(int,int)
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
<=	O
CROSSOVER_INVTRI	O
)	O
{	O
return	O
complex_tri_invert_L2	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
GSL_LINALG_SPLIT_COMPLEX	O
(	O
N	int
)	O
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_complex_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_complex_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
complex_tri_invert_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
Uplo	enum(int,int)
==	O
CblasLower	int
)	O
{	O
gsl_blas_ztrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
else	O
{	O
gsl_blas_ztrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
GSL_COMPLEX_NEGONE	O
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ztrsm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),struct(array(double)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
Uplo	enum(int,int)
,	O
CblasNoTrans	int
,	O
Diag	enum(int,int)
,	O
GSL_COMPLEX_ONE	O
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
status	int
=	O
complex_tri_invert_L3	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
Uplo	enum(int,int)
,	O
Diag	enum(int,int)
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
triangular_singular	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
++	O
i	long
)	O
{	O
gsl_complex	struct(array(double))
z	double
=	O
gsl_matrix_complex_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(array(double)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
i	long
)	O
;	O
if	O
(	O
GSL_REAL	O
(	O
z	double
)	O
==	O
0.0	int
&&	O
GSL_IMAG	O
(	O
z	double
)	O
==	O
0.0	int
)	O
return	O
GSL_ESING	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
