unsigned	O
char	O
en	array(char)
[	O
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"	*(char)
"0123456789+/"	*(char)
;	O
int	O
base64en	(*(char),int,*(char),int)->(int)
(	O
unsigned	O
char	O
*	O
dst	*(char)
,	O
int	O
dst_max	int
,	O
unsigned	O
char	O
*	O
src	*(char)
,	O
int	O
src_size	int
)	O
{	O
int	O
last_size	int
=	O
src_size	int
%	O
3	int
;	O
int	O
dst_size	int
=	O
src_size	int
/	O
3	int
*	O
4	int
+	O
(	O
last_size	int
?	O
4	int
:	O
0	int
)	O
;	O
unsigned	O
char	O
*	O
last	*(char)
=	O
src	*(char)
+	O
src_size	int
-	O
last_size	int
;	O
if	O
(	O
dst_size	int
>	O
dst_max	int
)	O
return	O
-	O
1	int
;	O
for	O
(	O
;	O
src	*(char)
<	O
last	*(char)
;	O
src	*(char)
+=	O
3	int
,	O
dst	*(char)
+=	O
4	int
)	O
{	O
dst	*(char)
[	O
0	int
]	O
=	O
en	array(char)
[	O
src	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
dst	*(char)
[	O
1	int
]	O
=	O
en	array(char)
[	O
(	O
(	O
src	*(char)
[	O
0	int
]	O
&	O
3	int
)	O
<<	O
4	int
)	O
+	O
(	O
src	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
]	O
;	O
dst	*(char)
[	O
2	int
]	O
=	O
en	array(char)
[	O
(	O
(	O
src	*(char)
[	O
1	int
]	O
&	O
0xF	int
)	O
<<	O
2	int
)	O
+	O
(	O
src	*(char)
[	O
2	int
]	O
>>	O
6	int
)	O
]	O
;	O
dst	*(char)
[	O
3	int
]	O
=	O
en	array(char)
[	O
src	*(char)
[	O
2	int
]	O
&	O
0x3F	int
]	O
;	O
}	O
if	O
(	O
last_size	int
)	O
{	O
dst	*(char)
[	O
0	int
]	O
=	O
en	array(char)
[	O
last	*(char)
[	O
0	int
]	O
>>	O
2	int
]	O
;	O
if	O
(	O
last_size	int
==	O
1	int
)	O
{	O
dst	*(char)
[	O
1	int
]	O
=	O
en	array(char)
[	O
(	O
last	*(char)
[	O
0	int
]	O
&	O
3	int
)	O
<<	O
4	int
]	O
;	O
dst	*(char)
[	O
2	int
]	O
=	O
'='	O
;	O
}	O
else	O
{	O
dst	*(char)
[	O
1	int
]	O
=	O
en	array(char)
[	O
(	O
(	O
last	*(char)
[	O
0	int
]	O
&	O
3	int
)	O
<<	O
4	int
)	O
+	O
(	O
last	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
]	O
;	O
dst	*(char)
[	O
2	int
]	O
=	O
en	array(char)
[	O
(	O
last	*(char)
[	O
1	int
]	O
&	O
0xF	int
)	O
<<	O
2	int
]	O
;	O
}	O
dst	*(char)
[	O
3	int
]	O
=	O
'='	O
;	O
}	O
return	O
dst_size	int
;	O
}	O
