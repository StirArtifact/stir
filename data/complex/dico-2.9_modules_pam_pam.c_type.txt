static	O
char	O
*	O
service	*(char)
=	O
"dicod"	*(char)
;	O
struct	O
pam_cred	struct(*(char),*(char))
{	O
const	O
char	O
*	O
user	*(char)
;	O
const	O
char	O
*	O
pass	*(char)
;	O
}	O
;	O
static	O
int	O
_dico_conv	(int,*(*(struct)),*(*(struct)),*(void))->(int)
(	O
int	O
num_msg	int
,	O
const	O
struct	O
pam_message	O
*	O
*	O
msg	*(*(struct))
,	O
struct	O
pam_response	O
*	O
*	O
resp	*(*(struct))
,	O
void	O
*	O
appdata_ptr	*(void)
)	O
{	O
int	O
status	int
=	O
PAM_SUCCESS	O
;	O
int	O
i	int
;	O
struct	O
pam_response	O
*	O
reply	*(struct)
=	O
NULL	O
;	O
struct	O
pam_cred	struct(*(char),*(char))
*	O
cred	*(struct(*(char),*(char)))
=	O
appdata_ptr	*(void)
;	O
reply	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
num_msg	int
,	O
sizeof	O
(	O
*	O
reply	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
reply	*(struct)
)	O
return	O
PAM_CONV_ERR	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_msg	int
&&	O
status	int
==	O
PAM_SUCCESS	O
;	O
i	int
++	O
)	O
{	O
switch	O
(	O
msg	*(*(struct))
[	O
i	int
]	O
->	O
msg_style	O
)	O
{	O
case	O
PAM_PROMPT_ECHO_ON	O
:	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp_retcode	O
=	O
PAM_SUCCESS	O
;	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp	*(*(struct))
=	O
COPY_STRING	O
(	O
cred	*(struct(*(char),*(char)))
->	O
user	*(char)
)	O
;	O
break	O
;	O
case	O
PAM_PROMPT_ECHO_OFF	O
:	O
if	O
(	O
cred	*(struct(*(char),*(char)))
->	O
pass	*(char)
)	O
{	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp_retcode	O
=	O
PAM_SUCCESS	O
;	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp	*(*(struct))
=	O
COPY_STRING	O
(	O
cred	*(struct(*(char),*(char)))
->	O
pass	*(char)
)	O
;	O
}	O
else	O
status	int
=	O
PAM_AUTHTOK_RECOVER_ERR	O
;	O
break	O
;	O
case	O
PAM_TEXT_INFO	O
:	O
case	O
PAM_ERROR_MSG	O
:	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp_retcode	O
=	O
PAM_SUCCESS	O
;	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp	*(*(struct))
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
status	int
=	O
PAM_CONV_ERR	O
;	O
}	O
}	O
if	O
(	O
status	int
!=	O
PAM_SUCCESS	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
num_msg	int
;	O
i	int
++	O
)	O
if	O
(	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp	*(*(struct))
)	O
{	O
switch	O
(	O
msg	*(*(struct))
[	O
i	int
]	O
->	O
msg_style	O
)	O
{	O
case	O
PAM_PROMPT_ECHO_ON	O
:	O
case	O
PAM_PROMPT_ECHO_OFF	O
:	O
overwrite_and_free	O
(	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp	*(*(struct))
)	O
;	O
break	O
;	O
case	O
PAM_ERROR_MSG	O
:	O
case	O
PAM_TEXT_INFO	O
:	O
free	(*(void))->(void)
(	O
reply	*(struct)
[	O
i	int
]	O
.	O
resp	*(*(struct))
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
reply	*(struct)
)	O
;	O
}	O
else	O
*	O
resp	*(*(struct))
=	O
reply	*(struct)
;	O
return	O
status	int
;	O
}	O
static	O
int	O
db_check_pass	(*(void),*(char),*(char),*(char))->(int)
(	O
void	O
*	O
handle	*(void)
,	O
const	O
char	O
*	O
pwres	*(char)
,	O
const	O
char	O
*	O
key	*(char)
,	O
const	O
char	O
*	O
pass	*(char)
)	O
{	O
pam_handle_t	O
*	O
pamh	O
;	O
int	O
pamerror	int
;	O
struct	O
pam_cred	struct(*(char),*(char))
cred	*(struct(*(char),*(char)))
=	O
{	O
key	*(char)
,	O
pass	*(char)
}	O
;	O
struct	O
pam_conv	O
_dico_pam_conv	struct
=	O
{	O
&	O
_dico_conv	(int,*(*(struct)),*(*(struct)),*(void))->(int)
,	O
&	O
cred	*(struct(*(char),*(char)))
}	O
;	O
do	O
{	O
pamerror	int
=	O
pam_start	()->(int)
(	O
pwres	*(char)
?	O
pwres	*(char)
:	O
service	*(char)
,	O
key	*(char)
,	O
&	O
_dico_pam_conv	struct
,	O
&	O
pamh	O
)	O
;	O
PAM_ERROR	O
;	O
pamerror	int
=	O
pam_authenticate	()->(int)
(	O
pamh	O
,	O
0	int
)	O
;	O
PAM_ERROR	O
;	O
pamerror	int
=	O
pam_acct_mgmt	()->(int)
(	O
pamh	O
,	O
0	int
)	O
;	O
PAM_ERROR	O
;	O
pamerror	int
=	O
pam_setcred	()->(int)
(	O
pamh	O
,	O
PAM_ESTABLISH_CRED	O
)	O
;	O
}	O
while	O
(	O
0	int
)	O
;	O
pam_end	()->(int)
(	O
pamh	O
,	O
PAM_SUCCESS	O
)	O
;	O
switch	O
(	O
pamerror	int
)	O
{	O
case	O
PAM_SUCCESS	O
:	O
return	O
0	int
;	O
case	O
PAM_AUTH_ERR	O
:	O
return	O
1	int
;	O
}	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
"PAM authentication error"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
static	O
int	O
db_get_groups	(*(void),*(char),*(char),*(*(struct)))->(int)
(	O
void	O
*	O
handle	*(void)
,	O
const	O
char	O
*	O
qgr	*(char)
,	O
const	O
char	O
*	O
key	*(char)
,	O
dico_list_t	*(struct)
*	O
pgroups	*(*(struct))
)	O
{	O
*	O
pgroups	*(*(struct))
=	O
NULL	O
;	O
return	O
0	int
;	O
}	O
static	O
struct	O
dico_udb_def	struct(*(char),*((*(*(void)),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),struct(int,*`,*`,*`,long))),*(char))->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),*(*(char)))->(int)),*((*(void),*(char),*(char),*(*(struct)))->(int)),*((*(void),*(char),*(char),*(char))->(int)))
pam_udb_def	struct(*(char),*((*(*(void)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`)),*(char))->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),*(*(char)))->(int)),*((*(void),*(char),*(char),*(*(struct`)))->(int)),*((*(void),*(char),*(char),*(char))->(int)))
=	O
{	O
"pam"	*(char)
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
db_get_groups	(*(void),*(char),*(char),*(*(struct)))->(int)
,	O
db_check_pass	(*(void),*(char),*(char),*(char))->(int)
}	O
;	O
static	O
int	O
dico_pam_init	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
dico_option	struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int)))
init_option	array(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*`,long,enum(int,int,int,int,int,int,int,int,int),*`,union`,*`)),*(char))->(int))))
[	O
]	O
=	O
{	O
{	O
DICO_OPTSTR	O
(	O
service	*(char)
)	O
,	O
dico_opt_string	int
,	O
&	O
service	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
if	O
(	O
dico_parseopt	(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))),int,*(*(char)),int,*(int))->(int)
(	O
init_option	array(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*`,long,enum(int,int,int,int,int,int,int,int,int),*`,union`,*`)),*(char))->(int))))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
NULL	O
)	O
)	O
return	O
-	O
1	int
;	O
return	O
dico_udb_define	(*(struct(*(char),*((*`,*`,*`)->(int)),*((*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)))))->(int)
(	O
&	O
pam_udb_def	struct(*(char),*((*(*(void)),*(struct(*`,*`,*`,*`,*`,*`,*`,*`,struct`)),*(char))->(int)),*((*(void))->(int)),*((*(void),*(char),*(char),*(*(char)))->(int)),*((*(void),*(char),*(char),*(*(struct`)))->(int)),*((*(void),*(char),*(char),*(char))->(int)))
)	O
;	O
}	O
struct	O
dico_database_module	struct(int,int,*((int,*(*(char)))->(int)),*((*(char),int,*(*(char)))->(*(struct))),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(int)),*((*(struct))->(*(char))),*((*(struct))->(*(char))),*((*(struct),array(*(struct)))->(int)),*((*(struct),*(struct),*(char))->(*(struct))),*((*(struct),*(char))->(*(struct))),*((*(struct),long,*(struct))->(int)),*((*(struct))->(long)),*((*(struct))->(long)),*((*(struct))->(void)),*((*(struct),*(struct))->(int)),*((int,*(*(char)))->(int)),*((*(struct))->(*(char))),*((*(char),int,*(*(char)),*(void))->(*(struct))),*((*(struct))->(int)),*((*(struct),long)->(*(struct))))
DICO_EXPORT	O
(	O
pam	O
,	O
module	O
)	O
=	O
{	O
DICO_MODULE_VERSION	int
,	O
DICO_CAPA_NODB	int
,	O
dico_pam_init	(int,*(*(char)))->(int)
,	O
}	O
;	O
