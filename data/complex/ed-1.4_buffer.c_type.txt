static	O
int	O
current_addr_	int
=	O
0	int
;	O
static	O
int	O
last_addr_	int
=	O
0	int
;	O
static	O
char	O
isbinary_	char
=	O
0	int
;	O
static	O
char	O
modified_	char
=	O
0	int
;	O
static	O
char	O
newline_added_	char
=	O
0	int
;	O
static	O
int	O
seek_write	int
=	O
0	int
;	O
static	O
FILE	struct
*	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
0	int
;	O
static	O
long	O
sfpos	long
=	O
0	int
;	O
static	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
;	O
static	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
;	O
int	O
current_addr	()->(int)
(	O
void	O
)	O
{	O
return	O
current_addr_	int
;	O
}	O
int	O
inc_current_addr	()->(int)
(	O
void	O
)	O
{	O
if	O
(	O
++	O
current_addr_	int
>	O
last_addr_	int
)	O
current_addr_	int
=	O
last_addr_	int
;	O
return	O
current_addr_	int
;	O
}	O
void	O
set_current_addr	(int)->(void)
(	O
const	O
int	O
addr	int
)	O
{	O
current_addr_	int
=	O
addr	int
;	O
}	O
int	O
last_addr	()->(int)
(	O
void	O
)	O
{	O
return	O
last_addr_	int
;	O
}	O
char	O
isbinary	()->(char)
(	O
void	O
)	O
{	O
return	O
isbinary_	char
;	O
}	O
void	O
set_binary	()->(void)
(	O
void	O
)	O
{	O
isbinary_	char
=	O
1	int
;	O
}	O
char	O
modified	()->(char)
(	O
void	O
)	O
{	O
return	O
modified_	char
;	O
}	O
void	O
set_modified	(char)->(void)
(	O
const	O
char	O
m	char
)	O
{	O
modified_	char
=	O
m	char
;	O
}	O
char	O
newline_added	()->(char)
(	O
void	O
)	O
{	O
return	O
newline_added_	char
;	O
}	O
void	O
set_newline_added	()->(void)
(	O
void	O
)	O
{	O
newline_added_	char
=	O
1	int
;	O
}	O
int	O
inc_addr	(int)->(int)
(	O
int	O
addr	int
)	O
{	O
if	O
(	O
++	O
addr	int
>	O
last_addr_	int
)	O
addr	int
=	O
0	int
;	O
return	O
addr	int
;	O
}	O
int	O
dec_addr	(int)->(int)
(	O
int	O
addr	int
)	O
{	O
if	O
(	O
--	O
addr	int
<	O
0	int
)	O
addr	int
=	O
last_addr_	int
;	O
return	O
addr	int
;	O
}	O
static	O
void	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
next	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
prev	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
next	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
next	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
prev	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
static	O
void	O
insert_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
node	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
}	O
static	O
void	O
add_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),int)->(void)
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
addr	int
)	O
;	O
insert_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
++	O
last_addr_	int
;	O
}	O
static	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
dup_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
)	O
;	O
if	O
(	O
!	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Memory exhausted"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
pos	long
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
pos	long
;	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
;	O
}	O
return	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
char	O
append_lines	(*(char),int,char)->(char)
(	O
const	O
char	O
*	O
ibufp	*(char)
,	O
const	O
int	O
addr	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
len	int
;	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
current_addr_	int
=	O
addr	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
!	O
isglobal	char
)	O
{	O
ibufp	*(char)
=	O
get_tty_line	(*(int))->(*(char))
(	O
&	O
len	int
)	O
;	O
if	O
(	O
!	O
ibufp	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
!	O
len	int
||	O
ibufp	*(char)
[	O
len	int
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
clearerr	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
return	O
!	O
len	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
!	O
*	O
ibufp	*(char)
)	O
return	O
1	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
ibufp	*(char)
[	O
len	int
++	O
]	O
!=	O
'\n'	O
;	O
)	O
;	O
}	O
if	O
(	O
len	int
==	O
2	int
&&	O
ibufp	*(char)
[	O
0	int
]	O
==	O
'.'	O
)	O
return	O
1	int
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
put_sbuf_line	(*(char),int)->(*(char))
(	O
ibufp	*(char)
,	O
current_addr_	int
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
current_addr_	int
)	O
;	O
else	O
if	O
(	O
!	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
ibufp	*(char)
+=	O
len	int
;	O
modified_	char
=	O
1	int
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
}	O
static	O
void	O
clear_yank_buffer	()->(void)
(	O
void	O
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
.	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
while	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
&	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
free	(*(void))->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
char	O
close_sbuf	()->(char)
(	O
void	O
)	O
{	O
clear_yank_buffer	()->(void)
(	O
)	O
;	O
clear_undo_stack	()->(void)
(	O
)	O
;	O
if	O
(	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
<	O
0	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot close temp file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
0	int
;	O
}	O
sfpos	long
=	O
0	int
;	O
seek_write	int
=	O
0	int
;	O
return	O
1	int
;	O
}	O
char	O
copy_lines	(int,int,int)->(char)
(	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
*	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
first_addr	int
)	O
;	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
int	O
n	int
=	O
second_addr	int
-	O
first_addr	int
+	O
1	int
;	O
int	O
m	char
=	O
0	int
;	O
current_addr_	int
=	O
addr	int
;	O
if	O
(	O
addr	int
>=	O
first_addr	int
&&	O
addr	int
<	O
second_addr	int
)	O
{	O
n	int
=	O
addr	int
-	O
first_addr	int
+	O
1	int
;	O
m	char
=	O
second_addr	int
-	O
addr	int
;	O
}	O
for	O
(	O
;	O
n	int
>	O
0	int
;	O
n	int
=	O
m	char
,	O
m	char
=	O
0	int
,	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
current_addr_	int
+	O
1	int
)	O
)	O
for	O
(	O
;	O
n	int
--	O
>	O
0	int
;	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
disable_interrupts	()->(void)
(	O
)	O
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
dup_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
np	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
add_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),int)->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
current_addr_	int
++	O
)	O
;	O
if	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
else	O
if	O
(	O
!	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
modified_	char
=	O
1	int
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
char	O
delete_lines	(int,int,char)->(char)
(	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
n	int
,	O
*	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
if	O
(	O
!	O
yank_lines	(int,int)->(char)
(	O
from	int
,	O
to	int
)	O
)	O
return	O
0	int
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UDEL	int
,	O
from	int
,	O
to	int
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
n	int
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
inc_addr	(int)->(int)
(	O
to	int
)	O
)	O
;	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
from	int
-	O
1	int
)	O
;	O
if	O
(	O
isglobal	char
)	O
unset_active_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
n	int
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
n	int
)	O
;	O
last_addr_	int
-=	O
to	int
-	O
from	int
+	O
1	int
;	O
current_addr_	int
=	O
from	int
-	O
1	int
;	O
modified_	char
=	O
1	int
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
int	O
get_line_node_addr	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(int)
(	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
;	O
int	O
addr	int
=	O
0	int
;	O
while	O
(	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
&&	O
(	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
!=	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
++	O
addr	int
;	O
if	O
(	O
addr	int
&&	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
==	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Invalid address"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
return	O
addr	int
;	O
}	O
char	O
*	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
const	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
static	O
char	O
*	O
buf	*(*(char))
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
len	int
,	O
ct	int
;	O
if	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
==	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
return	O
0	int
;	O
seek_write	int
=	O
1	int
;	O
if	O
(	O
sfpos	long
!=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
pos	long
)	O
{	O
sfpos	long
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
pos	long
;	O
if	O
(	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
sfpos	long
,	O
SEEK_SET	int
)	O
<	O
0	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot seek temp file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
len	int
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
;	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
len	int
+	O
1	int
)	O
)	O
return	O
0	int
;	O
ct	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(*(char))
,	O
1	int
,	O
len	int
,	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
ct	int
<	O
0	int
||	O
ct	int
!=	O
len	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot read temp file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
sfpos	long
+=	O
len	int
;	O
buf	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
return	O
buf	*(*(char))
;	O
}	O
char	O
init_buffers	()->(char)
(	O
void	O
)	O
{	O
setvbuf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),int,long)->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
,	O
_IONBF	int
,	O
0	int
)	O
;	O
if	O
(	O
!	O
open_sbuf	()->(char)
(	O
)	O
)	O
return	O
0	int
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
,	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
&	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
,	O
&	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
;	O
return	O
1	int
;	O
}	O
char	O
join_lines	(int,int,char)->(char)
(	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
static	O
char	O
*	O
buf	*(*(char))
=	O
0	int
;	O
static	O
int	O
bufsz	int
=	O
0	int
;	O
int	O
size	*(int)
=	O
0	int
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
inc_addr	(int)->(int)
(	O
to	int
)	O
)	O
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
from	int
)	O
;	O
while	O
(	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
char	O
*	O
s	*(char)
=	O
get_sbuf_line	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(char))
(	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
s	*(char)
||	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
size	*(int)
+	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
)	O
)	O
return	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(*(char))
+	O
size	*(int)
,	O
s	*(char)
,	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
)	O
;	O
size	*(int)
+=	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
;	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
if	O
(	O
!	O
resize_buffer	(*(*(char)),*(int),int)->(char)
(	O
&	O
buf	*(*(char))
,	O
&	O
bufsz	int
,	O
size	*(int)
+	O
2	int
)	O
)	O
return	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	*(*(char))
+	O
size	*(int)
,	O
"\n"	*(char)
,	O
2	int
)	O
;	O
if	O
(	O
!	O
delete_lines	(int,int,char)->(char)
(	O
from	int
,	O
to	int
,	O
isglobal	char
)	O
)	O
return	O
0	int
;	O
current_addr_	int
=	O
from	int
-	O
1	int
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
put_sbuf_line	(*(char),int)->(*(char))
(	O
buf	*(*(char))
,	O
current_addr_	int
)	O
||	O
!	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
modified_	char
=	O
1	int
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
char	O
move_lines	(int,int,int,char)->(char)
(	O
const	O
int	O
first_addr	int
,	O
const	O
int	O
second_addr	int
,	O
const	O
int	O
addr	int
,	O
const	O
char	O
isglobal	char
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
b1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
*	O
a1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
*	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
*	O
a2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
int	O
n	int
=	O
inc_addr	(int)->(int)
(	O
second_addr	int
)	O
;	O
int	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
first_addr	int
-	O
1	int
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
addr	int
==	O
first_addr	int
-	O
1	int
||	O
addr	int
==	O
second_addr	int
)	O
{	O
a2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
n	int
)	O
;	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
current_addr_	int
=	O
second_addr	int
;	O
}	O
else	O
if	O
(	O
!	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UMOV	int
,	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
n	int
)	O
||	O
!	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UMOV	int
,	O
addr	int
,	O
inc_addr	(int)->(int)
(	O
addr	int
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
a1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
n	int
)	O
;	O
if	O
(	O
addr	int
<	O
first_addr	int
)	O
{	O
b1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
addr	int
)	O
;	O
}	O
else	O
{	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
addr	int
)	O
;	O
b1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
p	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
}	O
a2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
b1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
a1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
a2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
b1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
a1	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
current_addr_	int
=	O
addr	int
+	O
(	O
(	O
addr	int
<	O
first_addr	int
)	O
?	O
second_addr	int
-	O
first_addr	int
+	O
1	int
:	O
0	int
)	O
;	O
}	O
if	O
(	O
isglobal	char
)	O
unset_active_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
b2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
a2	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
modified_	char
=	O
1	int
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
char	O
open_sbuf	()->(char)
(	O
void	O
)	O
{	O
isbinary_	char
=	O
newline_added_	char
=	O
0	int
;	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
tmpfile	()->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
;	O
if	O
(	O
!	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot open temp file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
int	O
path_max	(*(char))->(int)
(	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
long	O
result	long
;	O
if	O
(	O
!	O
filename	*(char)
)	O
filename	*(char)
=	O
"/"	*(char)
;	O
errno	O
=	O
0	int
;	O
result	long
=	O
pathconf	(*(char),int)->(long)
(	O
filename	*(char)
,	O
_PC_PATH_MAX	int
)	O
;	O
if	O
(	O
result	long
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
)	O
result	long
=	O
256	int
;	O
else	O
result	long
=	O
1024	int
;	O
}	O
else	O
if	O
(	O
result	long
<	O
256	int
)	O
result	long
=	O
256	int
;	O
return	O
result	long
;	O
}	O
char	O
put_lines	(int)->(char)
(	O
const	O
int	O
addr	int
)	O
{	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
.	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
*	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
if	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
==	O
&	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Nothing to put"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
current_addr_	int
=	O
addr	int
;	O
while	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
&	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
)	O
{	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
dup_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
add_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),int)->(void)
(	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
current_addr_	int
++	O
)	O
;	O
if	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
->	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
else	O
if	O
(	O
!	O
(	O
up	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
UADD	int
,	O
-	O
1	int
,	O
-	O
1	int
)	O
)	O
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
modified_	char
=	O
1	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
const	O
char	O
*	O
put_sbuf_line	(*(char),int)->(*(char))
(	O
const	O
char	O
*	O
cs	*(char)
,	O
const	O
int	O
addr	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
dup_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
0	int
)	O
;	O
int	O
len	int
,	O
ct	int
;	O
const	O
char	O
*	O
s	*(char)
=	O
cs	*(char)
;	O
if	O
(	O
!	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
return	O
0	int
;	O
while	O
(	O
*	O
s	*(char)
!=	O
'\n'	O
)	O
++	O
s	*(char)
;	O
if	O
(	O
s	*(char)
-	O
cs	*(char)
>=	O
INT_MAX	O
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Line too long"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
len	int
=	O
s	*(char)
-	O
cs	*(char)
;	O
if	O
(	O
seek_write	int
)	O
{	O
if	O
(	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0L	int
,	O
SEEK_END	int
)	O
<	O
0	int
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot seek temp file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
sfpos	long
=	O
ftell	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
seek_write	int
=	O
0	int
;	O
}	O
ct	int
=	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
cs	*(char)
,	O
1	int
,	O
len	int
,	O
sfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
ct	int
<	O
0	int
||	O
ct	int
!=	O
len	int
)	O
{	O
sfpos	long
=	O
-	O
1	int
;	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Cannot write temp file"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
len	int
=	O
len	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
pos	long
=	O
sfpos	long
;	O
add_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),int)->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
addr	int
)	O
;	O
++	O
current_addr_	int
;	O
sfpos	long
+=	O
len	int
;	O
return	O
++	O
s	*(char)
;	O
}	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
const	O
int	O
addr	int
)	O
{	O
static	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
;	O
static	O
int	O
o_addr	int
=	O
0	int
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
o_addr	int
<	O
addr	int
)	O
{	O
if	O
(	O
o_addr	int
+	O
last_addr_	int
>=	O
2	int
*	O
addr	int
)	O
while	O
(	O
o_addr	int
<	O
addr	int
)	O
{	O
++	O
o_addr	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
else	O
{	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
.	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
o_addr	int
=	O
last_addr_	int
;	O
while	O
(	O
o_addr	int
>	O
addr	int
)	O
{	O
--	O
o_addr	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
}	O
}	O
else	O
if	O
(	O
o_addr	int
<=	O
2	int
*	O
addr	int
)	O
while	O
(	O
o_addr	int
>	O
addr	int
)	O
{	O
--	O
o_addr	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
else	O
{	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
&	O
buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
;	O
o_addr	int
=	O
0	int
;	O
while	O
(	O
o_addr	int
<	O
addr	int
)	O
{	O
++	O
o_addr	int
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
char	O
yank_lines	(int,int)->(char)
(	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
inc_addr	(int)->(int)
(	O
to	int
)	O
)	O
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
from	int
)	O
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
&	O
yank_buffer_head	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
clear_yank_buffer	()->(void)
(	O
)	O
;	O
while	O
(	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
disable_interrupts	()->(void)
(	O
)	O
;	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
dup_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
if	O
(	O
!	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
insert_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
bp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
cp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
static	O
int	O
usize	int
=	O
0	int
;	O
static	O
int	O
u_ptr	int
=	O
0	int
;	O
static	O
int	O
u_current_addr	int
=	O
-	O
1	int
;	O
static	O
int	O
u_addr_last	int
=	O
-	O
1	int
;	O
static	O
char	O
u_modified	char
=	O
0	int
;	O
void	O
clear_undo_stack	()->(void)
(	O
void	O
)	O
{	O
while	O
(	O
u_ptr	int
--	O
)	O
if	O
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
]	O
.	O
type	enum(int,int,int,int)
==	O
UDEL	int
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
while	O
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
!=	O
ep	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
{	O
line_t	struct(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),long,int)
*	O
tl	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
unmark_line_node	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
free	(*(void))->(void)
(	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
lp	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
tl	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
;	O
}	O
}	O
u_ptr	int
=	O
0	int
;	O
u_current_addr	int
=	O
current_addr_	int
;	O
u_addr_last	int
=	O
last_addr_	int
;	O
u_modified	char
=	O
modified_	char
;	O
}	O
void	O
reset_undo_state	()->(void)
(	O
void	O
)	O
{	O
clear_undo_stack	()->(void)
(	O
)	O
;	O
u_current_addr	int
=	O
u_addr_last	int
=	O
-	O
1	int
;	O
u_modified	char
=	O
0	int
;	O
}	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
*	O
push_undo_atom	(int,int,int)->(*(struct(enum(int,int,int,int),*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)))))
(	O
const	O
int	O
type	enum(int,int,int,int)
,	O
const	O
int	O
from	int
,	O
const	O
int	O
to	int
)	O
{	O
disable_interrupts	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
resize_undo_buffer	(*(*(struct(enum(int,int,int,int),*(struct`),*(struct`)))),*(int),int)->(char)
(	O
&	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
,	O
&	O
usize	int
,	O
(	O
u_ptr	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
)	O
)	O
)	O
{	O
show_strerror	(*(char),int)->(void)
(	O
0	int
,	O
errno	O
)	O
;	O
set_error_msg	(*(char))->(void)
(	O
"Memory exhausted"	*(char)
)	O
;	O
if	O
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
{	O
clear_undo_stack	()->(void)
(	O
)	O
;	O
free	(*(void))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
)	O
;	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
=	O
0	int
;	O
usize	int
=	O
u_ptr	int
=	O
0	int
;	O
u_current_addr	int
=	O
u_addr_last	int
=	O
-	O
1	int
;	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
enable_interrupts	()->(void)
(	O
)	O
;	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
]	O
.	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
(	O
to	int
>=	O
0	int
)	O
?	O
to	int
:	O
current_addr_	int
)	O
;	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
=	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
(	O
from	int
>=	O
0	int
)	O
?	O
from	int
:	O
current_addr_	int
)	O
;	O
return	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
+	O
u_ptr	int
++	O
;	O
}	O
char	O
undo	(char)->(char)
(	O
const	O
char	O
isglobal	char
)	O
{	O
int	O
n	int
;	O
const	O
int	O
o_current_addr	int
=	O
current_addr_	int
;	O
const	O
int	O
o_addr_last	int
=	O
last_addr_	int
;	O
const	O
char	O
o_modified	char
=	O
modified_	char
;	O
if	O
(	O
u_ptr	int
<=	O
0	int
||	O
u_current_addr	int
<	O
0	int
||	O
u_addr_last	int
<	O
0	int
)	O
{	O
set_error_msg	(*(char))->(void)
(	O
"Nothing to undo"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
search_line_node	(int)->(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
(	O
0	int
)	O
;	O
disable_interrupts	()->(void)
(	O
)	O
;	O
for	O
(	O
n	int
=	O
u_ptr	int
-	O
1	int
;	O
n	int
>=	O
0	int
;	O
--	O
n	int
)	O
{	O
switch	O
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
type	enum(int,int,int,int)
)	O
{	O
case	O
UADD	int
:	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
break	O
;	O
case	O
UDEL	int
:	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
break	O
;	O
case	O
UMOV	int
:	O
case	O
VMOV	int
:	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
-	O
1	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_forw	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
->	O
q_back	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
-	O
1	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
link_nodes	(*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))->(void)
(	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
head	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
,	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
tail	*(struct(*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int)),long,int))
)	O
;	O
--	O
n	int
;	O
break	O
;	O
}	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
.	O
type	enum(int,int,int,int)
^=	O
1	int
;	O
}	O
for	O
(	O
n	int
=	O
0	int
;	O
2	int
*	O
n	int
<	O
u_ptr	int
-	O
1	int
;	O
++	O
n	int
)	O
{	O
undo_t	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
tmp	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
=	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
;	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
n	int
]	O
=	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
-	O
1	int
-	O
n	int
]	O
;	O
ustack	*(struct(enum(int,int,int,int),*(struct(*(struct`),*(struct`),long,int)),*(struct(*(struct`),*(struct`),long,int))))
[	O
u_ptr	int
-	O
1	int
-	O
n	int
]	O
=	O
tmp	struct(enum(int,int,int,int),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)),*(struct(*(struct(*`,*`,long,int)),*(struct(*`,*`,long,int)),long,int)))
;	O
}	O
if	O
(	O
isglobal	char
)	O
clear_active_list	()->(void)
(	O
)	O
;	O
current_addr_	int
=	O
u_current_addr	int
;	O
u_current_addr	int
=	O
o_current_addr	int
;	O
last_addr_	int
=	O
u_addr_last	int
;	O
u_addr_last	int
=	O
o_addr_last	int
;	O
modified_	char
=	O
u_modified	char
;	O
u_modified	char
=	O
o_modified	char
;	O
enable_interrupts	()->(void)
(	O
)	O
;	O
return	O
1	int
;	O
}	O
