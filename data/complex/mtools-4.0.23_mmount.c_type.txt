void	O
mmount	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
NORETURN	O
;	O
void	O
mmount	(int,*(*(char)),int)->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
type	enum(int,int,int,int)
UNUSEDP	O
)	O
{	O
char	O
drive	char
;	O
int	O
pid	int
;	O
int	O
status	int
;	O
struct	O
device	struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
;	O
char	O
name	*(char)
[	O
EXPAND_BUF	int
]	O
;	O
int	O
media	char
;	O
union	O
bootsector	union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char)))))
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
;	O
Stream_t	struct(*(struct),int,*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))),*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`))))))
*	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
;	O
if	O
(	O
argc	int
<	O
2	int
||	O
!	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
||	O
argv	*(*(char))
[	O
1	int
]	O
[	O
1	int
]	O
!=	O
':'	O
||	O
argv	*(*(char))
[	O
1	int
]	O
[	O
2	int
]	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s -V drive:\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
drive	char
=	O
ch_toupper	(char)->(char)
(	O
argv	*(*(char))
[	O
1	int
]	O
[	O
0	int
]	O
)	O
;	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
=	O
find_device	(char,int,*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char))),*(union(array(char),array(char),struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct`,struct`)))),*(char),*(int),*(long),*(int))->(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`)),int,*(struct(*`,int,*`,*`)),*(struct(*`,int,*`,*`)))))
(	O
drive	char
,	O
O_RDONLY	int
,	O
&	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
,	O
&	O
boot	struct(array(char),array(char),array(char),char,array(char),char,array(char),array(char),char,array(char),array(char),array(char),array(char),array(char),union(struct(array(char),array(char),array(char),array(char),array(char),array(char),array(char),array(char),struct(char,char,char,array(char),array(char),array(char))),struct(struct(char,char,char,array(char),array(char),array(char)),char,char,char,char,char,char,array(char),array(char),array(char),array(char),array(char),array(char),array(char))))
,	O
name	*(char)
,	O
&	O
media	char
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
FREE	O
(	O
&	O
Stream	*(struct(*(struct),int,*(struct(*(struct`),int,*(struct`),*(struct`))),*(struct(*(struct`),int,*(struct`),*(struct`)))))
)	O
;	O
destroy_privs	()->(void)
(	O
)	O
;	O
if	O
(	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
partition	int
)	O
{	O
char	O
part_name	array(char)
[	O
4	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
part_name	array(char)
,	O
"%d"	*(char)
,	O
dev	*(struct(*(char),char,int,int,int,short,short,int,long,int,int,char,int,*(char),int,int,int,*(char)))
.	O
partition	int
%	O
1000	int
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
name	*(char)
,	O
part_name	array(char)
)	O
;	O
}	O
switch	O
(	O
(	O
pid	int
=	O
fork	()->(int)
(	O
)	O
)	O
)	O
{	O
case	O
-	O
1	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"fork failed\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
0	int
:	O
close	*((*(void))->(int))
(	O
2	int
)	O
;	O
open	(*(char),int)->(int)
(	O
"/dev/null"	*(char)
,	O
O_RDWR	int
|	O
O_BINARY	int
|	O
O_LARGEFILE	O
)	O
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
"mount"	*(char)
)	O
;	O
if	O
(	O
argc	int
>	O
2	int
)	O
execvp	(*(char),array(*(char)))->(int)
(	O
"mount"	*(char)
,	O
argv	*(*(char))
+	O
1	int
)	O
;	O
else	O
execlp	(*(char),*(char))->(int)
(	O
"mount"	*(char)
,	O
"mount"	*(char)
,	O
name	*(char)
,	O
NULL	O
)	O
;	O
perror	(*(char))->(void)
(	O
"exec mount"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
default	O
:	O
while	O
(	O
wait	(*(int))->(int)
(	O
&	O
status	int
)	O
!=	O
pid	int
)	O
;	O
}	O
if	O
(	O
WEXITSTATUS	O
(	O
status	int
)	O
==	O
0	int
)	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
"mount"	*(char)
)	O
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
"-r"	*(char)
)	O
;	O
if	O
(	O
!	O
argv	*(*(char))
[	O
0	int
]	O
||	O
!	O
argv	*(*(char))
[	O
1	int
]	O
)	O
{	O
printOom	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
argc	int
>	O
2	int
)	O
execvp	(*(char),array(*(char)))->(int)
(	O
"mount"	*(char)
,	O
argv	*(*(char))
)	O
;	O
else	O
execlp	(*(char),*(char))->(int)
(	O
"mount"	*(char)
,	O
"mount"	*(char)
,	O
"-r"	*(char)
,	O
name	*(char)
,	O
NULL	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
