static	O
double	O
bj1_data	array(double)
[	O
12	int
]	O
=	O
{	O
-	O
0.11726141513332787	int
,	O
-	O
0.25361521830790640	int
,	O
0.050127080984469569	int
,	O
-	O
0.004631514809625081	int
,	O
0.000247996229415914	int
,	O
-	O
0.000008678948686278	int
,	O
0.000000214293917143	int
,	O
-	O
0.000000003936093079	int
,	O
0.000000000055911823	int
,	O
-	O
0.000000000000632761	int
,	O
0.000000000000005840	int
,	O
-	O
0.000000000000000044	int
,	O
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
bj1_cs	struct(*(double),int,double,double,int)
=	O
{	O
bj1_data	array(double)
,	O
11	int
,	O
-	O
1	int
,	O
1	int
,	O
8	int
}	O
;	O
int	O
gsl_sf_bessel_J1_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
y	double
=	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
if	O
(	O
y	double
==	O
0.0	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.0	int
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<	O
2.0	int
*	O
GSL_DBL_MIN	int
)	O
{	O
UNDERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
y	double
<	O
ROOT_EIGHT	O
*	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
0.5	int
*	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
y	double
<	O
4.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
c	*(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
bj1_cs	struct(*(double),int,double,double,int)
,	O
0.125	int
*	O
y	double
*	O
y	double
-	O
1.0	int
,	O
&	O
c	*(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
(	O
0.25	int
+	O
c	*(double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
x	double
*	O
c	*(double)
.	O
err	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
z	double
=	O
32.0	int
/	O
(	O
y	double
*	O
y	double
)	O
-	O
1.0	int
;	O
gsl_sf_result	struct(double,double)
ca	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
ct	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
sp	struct(double,double)
;	O
const	O
int	O
stat_ca	int
=	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
_gsl_sf_bessel_amp_phase_bm1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
&	O
ca	struct(double,double)
)	O
;	O
const	O
int	O
stat_ct	int
=	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
_gsl_sf_bessel_amp_phase_bth1_cs	struct(*(double),int,double,double,int)
,	O
z	double
,	O
&	O
ct	struct(double,double)
)	O
;	O
const	O
int	O
stat_sp	int
=	O
gsl_sf_bessel_sin_pi4_e	(double,double,*(struct(double,double)))->(int)
(	O
y	double
,	O
ct	struct(double,double)
.	O
val	double
/	O
y	double
,	O
&	O
sp	struct(double,double)
)	O
;	O
const	O
double	O
sqrty	double
=	O
sqrt	(double)->(double)
(	O
y	double
)	O
;	O
const	O
double	O
ampl	double
=	O
(	O
0.75	int
+	O
ca	struct(double,double)
.	O
val	double
)	O
/	O
sqrty	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
x	double
<	O
0.0	int
?	O
-	O
ampl	double
:	O
ampl	double
)	O
*	O
sp	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
sp	struct(double,double)
.	O
val	double
)	O
*	O
ca	struct(double,double)
.	O
err	double
/	O
sqrty	double
+	O
fabs	(double)->(double)
(	O
ampl	double
)	O
*	O
sp	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_3	O
(	O
stat_ca	int
,	O
stat_ct	int
,	O
stat_sp	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_J1	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_J1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
