int	O
osip_message_set_via	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char))->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
;	O
int	O
i	int
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
||	O
hvalue	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
return	O
OSIP_SUCCESS	int
;	O
i	int
=	O
osip_via_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`)))))->(int)
(	O
&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_via_parse	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(int)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
hvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
i	int
;	O
}	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
vias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_append_via	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),*(char))->(int)
(	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
;	O
int	O
i	int
;	O
i	int
=	O
osip_via_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`)))))->(int)
(	O
&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_via_parse	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(int)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
hvalue	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
i	int
;	O
}	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
message_property	int
=	O
2	int
;	O
osip_list_add	(*(struct(int,*(struct(*`,*`)))),*(void),int)->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
vias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
0	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_message_get_via	(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))),int,*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`)))))->(int)
(	O
const	O
osip_message_t	struct
*	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
,	O
int	O
pos	int
,	O
osip_via_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
osip_list_size	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
vias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
<=	O
pos	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
*	O
dest	*(char)
=	O
(	O
osip_via_t	struct
*	O
)	O
osip_list_get	(*(struct(int,*(struct(*`,*`)))),int)->(*(void))
(	O
&	O
sip	*(*(struct(*(char),*(struct(*`,*`,*`,*`,*`,struct`,struct`,*`)),*(char),int,*(char),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`)),*(struct(*`,*`,struct`)),*(struct(*`,*`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),*(struct(*`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),*(struct(*`,*`,struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),struct(int,*(struct`)),int,*(char),long,*(void))))
->	O
vias	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
pos	int
)	O
;	O
return	O
pos	int
;	O
}	O
int	O
osip_via_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`)))))->(int)
(	O
osip_via_t	struct
*	O
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
=	O
(	O
osip_via_t	struct
*	O
)	O
osip_malloc	O
(	O
sizeof	O
(	O
osip_via_t	struct
)	O
)	O
;	O
if	O
(	O
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
osip_via_t	struct
)	O
)	O
;	O
osip_list_init	(*(struct(int,*(struct(*`,*`)))))->(int)
(	O
&	O
(	O
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
->	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
;	O
osip_free	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
)	O
;	O
osip_free	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
)	O
;	O
osip_free	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
)	O
;	O
osip_free	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
)	O
;	O
osip_free	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
)	O
;	O
osip_generic_param_freelist	O
(	O
&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
osip_free	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
}	O
int	O
osip_via_parse	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(int)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
const	O
char	O
*	O
version	*(char)
;	O
const	O
char	O
*	O
protocol	*(char)
;	O
const	O
char	O
*	O
host	*(char)
;	O
const	O
char	O
*	O
ipv6host	*(char)
;	O
const	O
char	O
*	O
port	*(char)
;	O
const	O
char	O
*	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
;	O
const	O
char	O
*	O
comment	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
hvalue	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
version	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
hvalue	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
version	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
protocol	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
version	*(char)
+	O
1	int
,	O
'/'	O
)	O
;	O
if	O
(	O
protocol	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
protocol	*(char)
-	O
version	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
protocol	*(char)
-	O
version	*(char)
)	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
,	O
version	*(char)
+	O
1	int
,	O
protocol	*(char)
-	O
version	*(char)
-	O
1	int
)	O
;	O
host	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
protocol	*(char)
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
host	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
host	*(char)
==	O
protocol	*(char)
+	O
1	int
)	O
{	O
while	O
(	O
0	int
==	O
strncmp	(*(char),*(char),long)->(int)
(	O
host	*(char)
,	O
" "	*(char)
,	O
1	int
)	O
)	O
{	O
host	*(char)
++	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
==	O
1	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
host	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
+	O
1	int
,	O
' '	O
)	O
;	O
if	O
(	O
host	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
if	O
(	O
host	*(char)
-	O
protocol	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
host	*(char)
-	O
protocol	*(char)
)	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
,	O
protocol	*(char)
+	O
1	int
,	O
host	*(char)
-	O
protocol	*(char)
-	O
1	int
)	O
;	O
comment	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
'('	O
)	O
;	O
if	O
(	O
comment	*(char)
!=	O
NULL	O
)	O
{	O
char	O
*	O
end_comment	*(char)
;	O
end_comment	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
')'	O
)	O
;	O
if	O
(	O
end_comment	*(char)
==	O
NULL	O
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
end_comment	*(char)
-	O
comment	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
end_comment	*(char)
-	O
comment	*(char)
)	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
,	O
comment	*(char)
+	O
1	int
,	O
end_comment	*(char)
-	O
comment	*(char)
-	O
1	int
)	O
;	O
comment	*(char)
--	O
;	O
}	O
else	O
comment	*(char)
=	O
host	*(char)
+	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
;	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
';'	O
)	O
;	O
if	O
(	O
(	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
!=	O
NULL	O
)	O
&&	O
(	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
<	O
comment	*(char)
)	O
)	O
{	O
char	O
*	O
tmp	*(char)
;	O
if	O
(	O
comment	*(char)
-	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
tmp	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
comment	*(char)
-	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
+	O
1	int
)	O
;	O
if	O
(	O
tmp	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_strncpy	(*(char),*(char),long)->(*(char))
(	O
tmp	*(char)
,	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
comment	*(char)
-	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
;	O
i	int
=	O
__osip_generic_param_parseall	(*(struct(int,*(struct(*`,*`)))),*(char))->(int)
(	O
&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
tmp	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
tmp	*(char)
)	O
;	O
return	O
i	int
;	O
}	O
osip_free	O
(	O
tmp	*(char)
)	O
;	O
}	O
if	O
(	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
==	O
NULL	O
)	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
=	O
comment	*(char)
;	O
ipv6host	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
'['	O
)	O
;	O
if	O
(	O
ipv6host	*(char)
!=	O
NULL	O
&&	O
ipv6host	*(char)
<	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
{	O
port	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
ipv6host	*(char)
,	O
']'	O
)	O
;	O
if	O
(	O
port	*(char)
==	O
NULL	O
||	O
port	*(char)
>	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
if	O
(	O
port	*(char)
-	O
ipv6host	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
port	*(char)
-	O
ipv6host	*(char)
)	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
,	O
ipv6host	*(char)
+	O
1	int
,	O
port	*(char)
-	O
ipv6host	*(char)
-	O
1	int
)	O
;	O
port	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
port	*(char)
,	O
':'	O
)	O
;	O
}	O
else	O
{	O
port	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
':'	O
)	O
;	O
ipv6host	*(char)
=	O
NULL	O
;	O
}	O
if	O
(	O
(	O
port	*(char)
!=	O
NULL	O
)	O
&&	O
(	O
port	*(char)
<	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
)	O
)	O
{	O
if	O
(	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
-	O
port	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
-	O
port	*(char)
)	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
,	O
port	*(char)
+	O
1	int
,	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
-	O
port	*(char)
-	O
1	int
)	O
;	O
if	O
(	O
osip_atoi	(*(char))->(int)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
)	O
<	O
0	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
}	O
else	O
port	*(char)
=	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
;	O
if	O
(	O
ipv6host	*(char)
!=	O
NULL	O
)	O
return	O
OSIP_SUCCESS	int
;	O
if	O
(	O
port	*(char)
-	O
host	*(char)
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
port	*(char)
-	O
host	*(char)
)	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
,	O
host	*(char)
+	O
1	int
,	O
port	*(char)
-	O
host	*(char)
-	O
1	int
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_via_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
const	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
*	O
dest	*(char)
)	O
{	O
char	O
*	O
buf	*(char)
;	O
size_t	long
len	long
;	O
size_t	long
plen	long
;	O
char	O
*	O
tmp	*(char)
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
||	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
==	O
NULL	O
)	O
||	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
==	O
NULL	O
)	O
||	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
==	O
NULL	O
)	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
)	O
+	O
1	int
+	O
3	int
+	O
2	int
;	O
len	long
=	O
len	long
+	O
strlen	(*(char))->(long)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
)	O
+	O
3	int
+	O
1	int
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
!=	O
NULL	O
)	O
len	long
=	O
len	long
+	O
strlen	(*(char))->(long)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
)	O
+	O
2	int
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
len	long
)	O
;	O
if	O
(	O
buf	*(char)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
,	O
':'	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
==	O
NULL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"SIP/%s/%s [%s]"	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"SIP/%s/%s [%s]:%s"	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
==	O
NULL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"SIP/%s/%s %s"	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"SIP/%s/%s %s:%s"	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
)	O
;	O
}	O
{	O
osip_list_iterator_t	struct
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
;	O
osip_generic_param_t	struct(*(char),*(char))
*	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_generic_param_t	struct(*(char),*(char))
*	O
)	O
osip_list_get_first	(*(struct(int,*(struct(*`,*`)))),*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
while	O
(	O
u_param	*(struct(*(char),*(char)))
!=	O
OSIP_SUCCESS	int
)	O
{	O
if	O
(	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
==	O
NULL	O
)	O
plen	long
=	O
strlen	(*(char))->(long)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
+	O
2	int
;	O
else	O
plen	long
=	O
strlen	(*(char))->(long)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
)	O
+	O
3	int
;	O
len	long
=	O
len	long
+	O
plen	long
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	*(char)
,	O
len	long
)	O
;	O
tmp	*(char)
=	O
buf	*(char)
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
if	O
(	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
==	O
NULL	O
)	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
";%s"	*(char)
,	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
)	O
;	O
else	O
sprintf	(*(char),*(char))->(int)
(	O
tmp	*(char)
,	O
";%s=%s"	*(char)
,	O
u_param	*(struct(*(char),*(char)))
->	O
gname	*(char)
,	O
u_param	*(struct(*(char),*(char)))
->	O
gvalue	*(char)
)	O
;	O
u_param	*(struct(*(char),*(char)))
=	O
(	O
osip_generic_param_t	struct(*(char),*(char))
*	O
)	O
osip_list_get_next	(*(struct(*(struct(*`,*`)),*(*(struct`)),*(struct(int,*`)),int)))->(*(void))
(	O
&	O
it	*(struct(*(struct(*(struct`),*(void))),*(*(struct(*`,*`))),*(struct(int,*(struct`))),int))
)	O
;	O
}	O
}	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
!=	O
NULL	O
)	O
{	O
len	long
=	O
len	long
+	O
strlen	(*(char))->(long)
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
)	O
+	O
4	int
;	O
buf	*(char)
=	O
(	O
char	O
*	O
)	O
osip_realloc	O
(	O
buf	*(char)
,	O
len	long
)	O
;	O
tmp	*(char)
=	O
buf	*(char)
;	O
tmp	*(char)
=	O
tmp	*(char)
+	O
strlen	(*(char))->(long)
(	O
tmp	*(char)
)	O
;	O
snprintf	(*(char),long,*(char))->(int)
(	O
tmp	*(char)
,	O
len	long
-	O
(	O
tmp	*(char)
-	O
buf	*(char)
)	O
,	O
" (%s)"	*(char)
,	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
)	O
;	O
}	O
*	O
dest	*(char)
=	O
buf	*(char)
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
void	O
via_set_version	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(void)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
version	*(char)
)	O
{	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
=	O
version	*(char)
;	O
}	O
char	O
*	O
via_get_version	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(*(char))
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
;	O
}	O
void	O
via_set_protocol	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(void)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
protocol	*(char)
)	O
{	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
=	O
protocol	*(char)
;	O
}	O
char	O
*	O
via_get_protocol	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(*(char))
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
;	O
}	O
void	O
via_set_host	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(void)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
host	*(char)
)	O
{	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
=	O
host	*(char)
;	O
}	O
char	O
*	O
via_get_host	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(*(char))
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
;	O
}	O
void	O
via_set_port	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(void)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
port	*(char)
)	O
{	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
=	O
port	*(char)
;	O
}	O
char	O
*	O
via_get_port	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(*(char))
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
;	O
}	O
void	O
via_set_comment	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(char))->(void)
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
char	O
*	O
comment	*(char)
)	O
{	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
=	O
comment	*(char)
;	O
}	O
char	O
*	O
via_get_comment	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(*(char))
(	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
;	O
}	O
int	O
osip_via_clone	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`)))))->(int)
(	O
const	O
osip_via_t	struct
*	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
osip_via_t	struct
*	O
*	O
dest	*(char)
)	O
{	O
int	O
i	int
;	O
osip_via_t	struct
*	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
;	O
*	O
dest	*(char)
=	O
NULL	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_via_init	(*(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*`)))))->(int)
(	O
&	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
)	O
;	O
if	O
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
==	O
NULL	O
&&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
version	*(char)
!=	O
NULL	O
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
)	O
;	O
if	O
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
==	O
NULL	O
&&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
protocol	*(char)
!=	O
NULL	O
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
)	O
;	O
if	O
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
==	O
NULL	O
&&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
host	*(char)
!=	O
NULL	O
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
!=	O
NULL	O
)	O
{	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
)	O
;	O
if	O
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
port	*(char)
==	O
NULL	O
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
if	O
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
!=	O
NULL	O
)	O
{	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
=	O
osip_strdup	(*(char))->(*(char))
(	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
)	O
;	O
if	O
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
comment	*(char)
==	O
NULL	O
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
OSIP_NOMEM	O
;	O
}	O
}	O
i	int
=	O
osip_list_clone	(*(struct(int,*(struct(*`,*`)))),*(struct(int,*(struct(*`,*`)))),*((*(void),*(*(void)))->(int)))->(int)
(	O
&	O
via	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
&	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
->	O
via_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
(	O
int	O
(	O
*	O
)	O
(	O
void	O
*	O
,	O
void	O
*	O
*	O
)	O
)	O
&	O
osip_generic_param_clone	O
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_via_free	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(void)
(	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
;	O
return	O
i	int
;	O
}	O
*	O
dest	*(char)
=	O
vi	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
int	O
osip_via_match	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))))->(int)
(	O
osip_via_t	struct
*	O
via1	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
osip_via_t	struct
*	O
via2	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
)	O
{	O
char	O
*	O
_via1	*(char)
;	O
char	O
*	O
_via2	*(char)
;	O
int	O
i	int
;	O
if	O
(	O
via1	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
||	O
via2	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
==	O
NULL	O
)	O
return	O
OSIP_BADPARAMETER	O
;	O
i	int
=	O
osip_via_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
via1	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
&	O
_via1	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
i	int
=	O
osip_via_to_str	(*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct`)))),*(*(char)))->(int)
(	O
via2	*(struct(*(char),*(char),*(char),*(char),*(char),struct(int,*(struct(*`,*`)))))
,	O
&	O
_via2	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
{	O
osip_free	O
(	O
_via1	*(char)
)	O
;	O
return	O
i	int
;	O
}	O
i	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
_via1	*(char)
,	O
_via2	*(char)
)	O
;	O
osip_free	O
(	O
_via1	*(char)
)	O
;	O
osip_free	O
(	O
_via2	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
OSIP_UNDEFINED_ERROR	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
