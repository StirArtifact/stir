struct	O
_linetrimstr	struct(*(struct),int,long,long)
{	O
dico_stream_t	*(struct)
transport	*(struct)
;	O
int	O
noclose	int
;	O
size_t	long
maxlen	long
;	O
size_t	long
linelen	long
;	O
}	O
;	O
static	O
size_t	long
_linetrimstr_find_end	(*(struct(*(struct),int,long,long)),*(char),long,*(long))->(long)
(	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
,	O
const	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
struct	O
utf8_iterator	struct(*(char),*(char),int,long,int,int)
itr	*((*(void),*(void))->(int))
;	O
const	O
char	O
*	O
wordstart	*(char)
=	O
buf	*(void)
;	O
utf8_iter_init	(*(struct(*(char),*(char),int,long,int,int)),*(char),long)->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
,	O
(	O
char	O
*	O
)	O
buf	*(void)
,	O
size	long
)	O
;	O
while	O
(	O
!	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
for	O
(	O
;	O
!	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
ISWS	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
)	O
;	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
==	O
'\n'	O
)	O
s	*(char)
->	O
linelen	long
=	O
0	int
;	O
else	O
if	O
(	O
++	O
s	*(char)
->	O
linelen	long
>=	O
s	*(char)
->	O
maxlen	long
)	O
{	O
*	O
psize	*(long)
=	O
wordstart	*(char)
>	O
buf	*(void)
?	O
wordstart	*(char)
-	O
buf	*(void)
:	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
-	O
buf	*(void)
;	O
s	*(char)
->	O
linelen	long
=	O
0	int
;	O
return	O
1	int
;	O
}	O
}	O
wordstart	*(char)
=	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
;	O
for	O
(	O
;	O
!	O
utf8_iter_end_p	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
!	O
(	O
utf8_iter_isascii	O
(	O
itr	*((*(void),*(void))->(int))
)	O
&&	O
ISWS	O
(	O
*	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
)	O
)	O
;	O
utf8_iter_next	(*(struct(*(char),*(char),int,long,int,int)))->(int)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
++	O
s	*(char)
->	O
linelen	long
>=	O
s	*(char)
->	O
maxlen	long
)	O
{	O
size_t	long
size	long
=	O
itr	*((*(void),*(void))->(int))
.	O
string	*(*(char))
==	O
wordstart	*(char)
?	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
-	O
buf	*(void)
:	O
wordstart	*(char)
-	O
itr	*((*(void),*(void))->(int))
.	O
string	*(*(char))
;	O
s	*(char)
->	O
linelen	long
=	O
0	int
;	O
if	O
(	O
size	long
>	O
0	int
)	O
{	O
*	O
psize	*(long)
=	O
size	long
;	O
return	O
1	int
;	O
}	O
}	O
}	O
}	O
*	O
psize	*(long)
=	O
itr	*((*(void),*(void))->(int))
.	O
curptr	*(char)
-	O
buf	*(void)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_linetrimstr_write	(*(void),*(char),long,*(long))->(int)
(	O
void	O
*	O
data	*(void)
,	O
const	O
char	O
*	O
buf	*(void)
,	O
size_t	long
size	long
,	O
size_t	long
*	O
pret	*(*(void))
)	O
{	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
=	O
data	*(void)
;	O
size_t	long
len	int
;	O
int	O
nl	int
;	O
nl	int
=	O
_linetrimstr_find_end	(*(struct(*(struct),int,long,long)),*(char),long,*(long))->(long)
(	O
s	*(char)
,	O
buf	*(void)
,	O
size	long
,	O
&	O
len	int
)	O
;	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
s	*(char)
->	O
transport	*(struct)
,	O
buf	*(void)
,	O
len	int
)	O
;	O
if	O
(	O
nl	int
)	O
dico_stream_write	(*(struct),*(void),long)->(int)
(	O
s	*(char)
->	O
transport	*(struct)
,	O
"\n"	*(char)
,	O
1	int
)	O
;	O
*	O
pret	*(*(void))
=	O
len	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_linetrimstr_destroy	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
=	O
data	*(void)
;	O
if	O
(	O
!	O
s	*(char)
->	O
noclose	int
)	O
dico_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_linetrimstr_flush	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
=	O
data	*(void)
;	O
return	O
dico_stream_flush	(*(struct))->(int)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
}	O
static	O
int	O
_linetrimstr_close	(*(void))->(int)
(	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
=	O
data	*(void)
;	O
if	O
(	O
s	*(char)
->	O
noclose	int
)	O
return	O
0	int
;	O
return	O
dico_stream_close	(*(struct))->(int)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
}	O
static	O
int	O
_linetrimstr_ioctl	(*(void),int,*(void))->(int)
(	O
void	O
*	O
data	*(void)
,	O
int	O
code	int
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
=	O
data	*(void)
;	O
switch	O
(	O
code	int
)	O
{	O
case	O
DICO_IOCTL_GET_TRANSPORT	int
:	O
*	O
(	O
dico_stream_t	*(struct)
*	O
)	O
call_data	*(void)
=	O
s	*(char)
->	O
transport	*(struct)
;	O
break	O
;	O
case	O
DICO_IOCTL_SET_TRANSPORT	int
:	O
s	*(char)
->	O
transport	*(struct)
=	O
call_data	*(void)
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_IN	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	*(void)
=	O
dico_stream_bytes_in	(*(struct))->(long)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
break	O
;	O
case	O
DICO_IOCTL_BYTES_OUT	int
:	O
*	O
(	O
off_t	long
*	O
)	O
call_data	*(void)
=	O
dico_stream_bytes_out	(*(struct))->(long)
(	O
s	*(char)
->	O
transport	*(struct)
)	O
;	O
break	O
;	O
case	O
DICO_IOCTL_SET_LINELEN	int
:	O
s	*(char)
->	O
maxlen	long
=	O
*	O
(	O
size_t	long
*	O
)	O
call_data	*(void)
;	O
break	O
;	O
case	O
DICO_IOCTL_GET_LINELEN	int
:	O
*	O
(	O
size_t	long
*	O
)	O
call_data	*(void)
=	O
s	*(char)
->	O
maxlen	long
;	O
break	O
;	O
default	O
:	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
dico_stream_t	*(struct)
dico_linetrim_stream	(*(struct),long,int)->(*(struct))
(	O
dico_stream_t	*(struct)
transport	*(struct)
,	O
size_t	long
maxlen	long
,	O
int	O
noclose	int
)	O
{	O
int	O
rc	int
;	O
struct	O
_linetrimstr	struct(*(struct),int,long,long)
*	O
s	*(char)
;	O
dico_stream_t	*(struct)
str	*(struct)
;	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
s	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
s	*(char)
,	O
0	int
,	O
sizeof	O
(	O
*	O
s	*(char)
)	O
)	O
;	O
rc	int
=	O
dico_stream_create	(*(*(struct)),int,*(void))->(int)
(	O
&	O
str	*(struct)
,	O
DICO_STREAM_WRITE	int
,	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
s	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
s	*(char)
->	O
transport	*(struct)
=	O
transport	*(struct)
;	O
s	*(char)
->	O
maxlen	long
=	O
maxlen	long
;	O
s	*(char)
->	O
noclose	int
=	O
noclose	int
;	O
dico_stream_set_write	(*(struct),*((*(void),*(char),long,*(long))->(int)))->(void)
(	O
str	*(struct)
,	O
_linetrimstr_write	(*(void),*(char),long,*(long))->(int)
)	O
;	O
dico_stream_set_flush	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_linetrimstr_flush	(*(void))->(int)
)	O
;	O
dico_stream_set_close	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_linetrimstr_close	(*(void))->(int)
)	O
;	O
dico_stream_set_destroy	(*(struct),*((*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_linetrimstr_destroy	(*(void))->(int)
)	O
;	O
dico_stream_set_ioctl	(*(struct),*((*(void),int,*(void))->(int)))->(void)
(	O
str	*(struct)
,	O
_linetrimstr_ioctl	(*(void),int,*(void))->(int)
)	O
;	O
dico_stream_set_buffer	(*(struct),enum(int,int,int),long)->(int)
(	O
str	*(struct)
,	O
dico_buffer_line	int
,	O
1024	int
)	O
;	O
return	O
str	*(struct)
;	O
}	O
