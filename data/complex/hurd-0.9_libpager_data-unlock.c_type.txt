kern_return_t	O
_pager_S_memory_object_data_unlock	(*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*`,*`,int,int,int,int,int)),*(struct(*`,*`,int,int,int,int)),int,int,int,int,int,int,int,*(short),int)),int,int,int,int)->(int)
(	O
struct	O
pager	struct(struct,*(struct),enum(int,int,int),int,int,*(struct),*(struct),int,int,int,int,int,int,int,*(short),int)
*	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
,	O
mach_port_t	O
control	int
,	O
vm_offset_t	int
offset	int
,	O
vm_size_t	int
length	int
,	O
vm_prot_t	int
access	int
)	O
{	O
volatile	O
int	O
err	int
;	O
if	O
(	O
!	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
||	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
port	struct
.	O
class	O
!=	O
_pager_class	*(struct)
)	O
return	O
EOPNOTSUPP	O
;	O
if	O
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
pager_state	enum(int,int,int)
!=	O
NORMAL	int
)	O
{	O
printf	O
(	O
"pager in wrong state for unlock\n"	*(char)
)	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
control	int
!=	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
memobjcntl	int
)	O
{	O
printf	O
(	O
"incg data unlock: wrong control port\n"	*(char)
)	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
(	O
access	int
&	O
VM_PROT_WRITE	O
)	O
==	O
0	int
)	O
{	O
printf	O
(	O
"incg data unlock: not unlock writes\n"	*(char)
)	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
offset	int
%	O
__vm_page_size	O
)	O
{	O
printf	O
(	O
"incg data unlock: misaligned request\n"	*(char)
)	O
;	O
goto	O
out	O
;	O
}	O
if	O
(	O
length	int
!=	O
__vm_page_size	O
)	O
{	O
printf	O
(	O
"incg data unlock: bad length size %zd\n"	*(char)
,	O
length	int
)	O
;	O
goto	O
out	O
;	O
}	O
err	int
=	O
pager_unlock_page	()->(int)
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
->	O
upi	*(struct)
,	O
offset	int
)	O
;	O
if	O
(	O
!	O
err	int
)	O
_pager_lock_object	(*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*`,*`,int,int,int,int,int)),*(struct(*`,*`,int,int,int,int)),int,int,int,int,int,int,int,*(short),int)),int,int,int,int,int,int)->(void)
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
,	O
offset	int
,	O
length	int
,	O
MEMORY_OBJECT_RETURN_NONE	O
,	O
0	int
,	O
VM_PROT_NONE	O
,	O
0	int
)	O
;	O
else	O
{	O
_pager_lock_object	(*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*`,*`,int,int,int,int,int)),*(struct(*`,*`,int,int,int,int)),int,int,int,int,int,int,int,*(short),int)),int,int,int,int,int,int)->(void)
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
,	O
offset	int
,	O
length	int
,	O
MEMORY_OBJECT_RETURN_NONE	O
,	O
1	int
,	O
VM_PROT_WRITE	O
,	O
0	int
)	O
;	O
_pager_mark_next_request_error	(*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*`,*`,int,int,int,int,int)),*(struct(*`,*`,int,int,int,int)),int,int,int,int,int,int,int,*(short),int)),int,int,int)->(void)
(	O
p	*(struct(struct,*(struct),enum(int,int,int),int,int,*(struct(*(struct`),*(*`),int,int,int,int,int)),*(struct(*(struct`),*(*`),int,int,int,int)),int,int,int,int,int,int,int,*(short),int))
,	O
offset	int
,	O
length	int
,	O
err	int
)	O
;	O
}	O
out	O
:	O
return	O
0	int
;	O
}	O
