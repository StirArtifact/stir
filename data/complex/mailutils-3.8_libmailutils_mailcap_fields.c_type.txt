void	O
mu_mailcap_entry_field_deallocate	(*(void))->(void)
(	O
void	O
*	O
ptr	*(*(char))
)	O
{	O
struct	O
mailcap_field	struct(enum(int,int),*(char))
*	O
flg	*(struct(enum(int,int),*(char)))
=	O
ptr	*(*(char))
;	O
if	O
(	O
flg	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
==	O
fld_string	int
)	O
free	(*(void))->(void)
(	O
flg	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
flg	*(struct(enum(int,int),*(char)))
)	O
;	O
}	O
int	O
mu_mailcap_entry_set_bool	(*(struct),*(char))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
struct	O
mailcap_field	struct(enum(int,int),*(char))
*	O
fp	*(struct(enum(int,int),*(char)))
,	O
*	O
*	O
fpp	*(*(struct(enum(int,int),*(char))))
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
ent	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_assoc_install_ref	(*(struct),*(char),*(void))->(int)
(	O
ent	*(struct)
->	O
fields	*(struct)
,	O
name	*(char)
,	O
(	O
void	O
*	O
)	O
&	O
fpp	*(*(struct(enum(int,int),*(char))))
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
fp	*(struct(enum(int,int),*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
fp	*(struct(enum(int,int),*(char)))
)	O
)	O
;	O
if	O
(	O
!	O
fp	*(struct(enum(int,int),*(char)))
)	O
return	O
ENOMEM	int
;	O
fp	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
=	O
fld_bool	int
;	O
*	O
fpp	*(*(struct(enum(int,int),*(char))))
=	O
fp	*(struct(enum(int,int),*(char)))
;	O
break	O
;	O
case	O
MU_ERR_EXISTS	O
:	O
fp	*(struct(enum(int,int),*(char)))
=	O
*	O
fpp	*(*(struct(enum(int,int),*(char))))
;	O
if	O
(	O
fp	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
==	O
fld_string	int
)	O
{	O
free	(*(void))->(void)
(	O
fp	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
)	O
;	O
fp	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
=	O
NULL	O
;	O
fp	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
=	O
fld_bool	int
;	O
}	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailcap_entry_set_string	(*(struct),*(char),*(char))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
,	O
char	O
const	O
*	O
value	*(void)
)	O
{	O
struct	O
mailcap_field	struct(enum(int,int),*(char))
*	O
fp	*(struct(enum(int,int),*(char)))
,	O
*	O
*	O
fpp	*(*(struct(enum(int,int),*(char))))
;	O
int	O
rc	int
;	O
char	O
*	O
copy	*(char)
;	O
if	O
(	O
!	O
ent	*(struct)
||	O
!	O
name	*(char)
||	O
!	O
value	*(void)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_assoc_install_ref	(*(struct),*(char),*(void))->(int)
(	O
ent	*(struct)
->	O
fields	*(struct)
,	O
name	*(char)
,	O
(	O
void	O
*	O
)	O
&	O
fpp	*(*(struct(enum(int,int),*(char))))
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
fp	*(struct(enum(int,int),*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
fp	*(struct(enum(int,int),*(char)))
)	O
)	O
;	O
if	O
(	O
!	O
fp	*(struct(enum(int,int),*(char)))
)	O
return	O
ENOMEM	int
;	O
fp	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
fp	*(struct(enum(int,int),*(char)))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
fp	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
=	O
fld_string	int
;	O
*	O
fpp	*(*(struct(enum(int,int),*(char))))
=	O
fp	*(struct(enum(int,int),*(char)))
;	O
break	O
;	O
case	O
MU_ERR_EXISTS	O
:	O
copy	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	*(void)
)	O
;	O
if	O
(	O
!	O
copy	*(char)
)	O
return	O
ENOMEM	int
;	O
fp	*(struct(enum(int,int),*(char)))
=	O
*	O
fpp	*(*(struct(enum(int,int),*(char))))
;	O
if	O
(	O
fp	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
==	O
fld_string	int
)	O
free	(*(void))->(void)
(	O
fp	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
)	O
;	O
else	O
fp	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
=	O
fld_string	int
;	O
fp	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
=	O
copy	*(char)
;	O
break	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_mailcap_entry_field_unset	(*(struct),*(char))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
if	O
(	O
!	O
ent	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
return	O
mu_assoc_remove	(*(struct),*(char))->(int)
(	O
ent	*(struct)
->	O
fields	*(struct)
,	O
name	*(char)
)	O
;	O
}	O
int	O
mu_mailcap_entry_fields_count	(*(struct),*(long))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
if	O
(	O
!	O
ent	*(struct)
)	O
return	O
EINVAL	int
;	O
return	O
mu_assoc_count	(*(struct),*(long))->(int)
(	O
ent	*(struct)
->	O
fields	*(struct)
,	O
pcount	*(long)
)	O
;	O
}	O
struct	O
fields_iter_closure	struct(*((*(char),*(char),*(void))->(int)),*(void))
{	O
int	O
(	O
*	O
action	*((*(char),*(void),*(void))->(int))
)	O
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
void	O
*	O
)	O
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
static	O
int	O
fields_iter_action	(*(char),*(void),*(void))->(int)
(	O
char	O
const	O
*	O
name	*(char)
,	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
mailcap_field	struct(enum(int,int),*(char))
*	O
flg	*(struct(enum(int,int),*(char)))
=	O
item	*(void)
;	O
struct	O
fields_iter_closure	struct(*((*(char),*(char),*(void))->(int)),*(void))
*	O
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
=	O
data	*(void)
;	O
return	O
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
->	O
action	*((*(char),*(void),*(void))->(int))
(	O
name	*(char)
,	O
flg	*(struct(enum(int,int),*(char)))
->	O
type	*(char)
==	O
fld_string	int
?	O
flg	*(struct(enum(int,int),*(char)))
->	O
strval	*(char)
:	O
NULL	O
,	O
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
->	O
data	*(void)
)	O
;	O
}	O
int	O
mu_mailcap_entry_fields_foreach	(*(struct),*((*(char),*(char),*(void))->(int)),*(void))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
int	O
(	O
*	O
action	*((*(char),*(void),*(void))->(int))
)	O
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
fields_iter_closure	struct(*((*(char),*(char),*(void))->(int)),*(void))
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
;	O
if	O
(	O
!	O
ent	*(struct)
||	O
!	O
action	*((*(char),*(void),*(void))->(int))
)	O
return	O
EINVAL	int
;	O
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
.	O
action	*((*(char),*(void),*(void))->(int))
=	O
action	*((*(char),*(void),*(void))->(int))
;	O
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
.	O
data	*(void)
=	O
data	*(void)
;	O
return	O
mu_assoc_foreach	(*(struct),*((*(char),*(void),*(void))->(int)),*(void))->(int)
(	O
ent	*(struct)
->	O
fields	*(struct)
,	O
fields_iter_action	(*(char),*(void),*(void))->(int)
,	O
&	O
clos	*(struct(*((*(char),*(char),*(void))->(int)),*(void)))
)	O
;	O
}	O
int	O
mu_mailcap_entry_fields_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mu_mailcap_entry_t	*(struct)
ent	*(struct)
,	O
mu_iterator_t	*(struct)
*	O
pitr	*(*(struct))
)	O
{	O
if	O
(	O
!	O
ent	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
pitr	*(*(struct))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
return	O
mu_assoc_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
ent	*(struct)
->	O
fields	*(struct)
,	O
pitr	*(*(struct))
)	O
;	O
}	O
