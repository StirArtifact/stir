static	O
struct	O
mu_conf_option	struct(*(char),*(char))
mu_conf_option	struct(*(char),*(char))
[	O
]	O
=	O
{	O
{	O
"VERSION="	*(char)
VERSION	*(char)
,	O
N_	O
(	O
"Version of this package"	*(char)
)	O
}	O
,	O
{	O
"SYSCONFDIR="	*(char)
SYSCONFDIR	O
,	O
N_	O
(	O
"System configuration directory"	*(char)
)	O
}	O
,	O
{	O
"MAILSPOOLDIR="	*(char)
MU_PATH_MAILDIR	O
,	O
N_	O
(	O
"Default mail spool directory"	*(char)
)	O
}	O
,	O
{	O
"SCHEME="	*(char)
MU_DEFAULT_SCHEME	*(char)
,	O
N_	O
(	O
"Default mailbox type"	*(char)
)	O
}	O
,	O
{	O
"LOG_FACILITY="	*(char)
LOG_FACILITY_STRING	*(char)
,	O
N_	O
(	O
"Default syslog facility"	*(char)
)	O
}	O
,	O
{	O
"IPV6"	*(char)
,	O
N_	O
(	O
"IPv6 support"	*(char)
)	O
}	O
,	O
{	O
"WITH_PTHREAD"	*(char)
,	O
N_	O
(	O
"Support for POSIX threads"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_VIRTUAL_DOMAINS"	*(char)
,	O
N_	O
(	O
"Support for virtual mail domains"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_IMAP"	*(char)
,	O
N_	O
(	O
"IMAP4 protocol support"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_POP"	*(char)
,	O
N_	O
(	O
"POP3 protocol support"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_MH"	*(char)
,	O
N_	O
(	O
"MH mail storage support"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_MAILDIR"	*(char)
,	O
N_	O
(	O
"Maildir mail storage support"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_SMTP"	*(char)
,	O
N_	O
(	O
"SMTP protocol support"	*(char)
)	O
}	O
,	O
{	O
"ENABLE_SENDMAIL"	*(char)
,	O
N_	O
(	O
"Sendmail command line interface support"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
void	O
mu_format_conf_option	(*(struct),*(struct(*(char),*(char))),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
const	O
struct	O
mu_conf_option	struct(*(char),*(char))
*	O
opt	*(struct(*(char),*(char)))
,	O
int	O
verbose	int
)	O
{	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"%s"	*(char)
,	O
opt	*(struct(*(char),*(char)))
->	O
name	*(char)
)	O
;	O
if	O
(	O
verbose	int
&&	O
opt	*(struct(*(char),*(char)))
->	O
descr	*(char)
)	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
" \t- %s"	*(char)
,	O
_	O
(	O
opt	*(struct(*(char),*(char)))
->	O
descr	*(char)
)	O
)	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
stream	*(struct)
,	O
"\n"	*(char)
)	O
;	O
}	O
void	O
mu_format_options	(*(struct),int)->(void)
(	O
mu_stream_t	*(struct)
stream	*(struct)
,	O
int	O
verbose	int
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
mu_format_conf_option	(*(struct),*(struct(*(char),*(char))),int)->(void)
(	O
stream	*(struct)
,	O
mu_conf_option	struct(*(char),*(char))
+	O
i	int
,	O
verbose	int
)	O
;	O
}	O
void	O
mu_print_options	()->(void)
(	O
)	O
{	O
if	O
(	O
mu_strout	*(struct)
)	O
mu_stream_ref	(*(struct))->(void)
(	O
mu_strout	*(struct)
)	O
;	O
else	O
{	O
int	O
yes	int
=	O
1	int
;	O
int	O
rc	int
=	O
mu_stdio_stream_create	(*(*(struct)),int,int)->(int)
(	O
&	O
mu_strout	*(struct)
,	O
MU_STDOUT_FD	int
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"mu_stdio_stream_create(%d): %s\n"	*(char)
,	O
MU_STDOUT_FD	int
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
mu_strout	*(struct)
,	O
MU_IOCTL_FD	int
,	O
MU_IOCTL_FD_SET_BORROW	int
,	O
&	O
yes	int
)	O
;	O
}	O
mu_format_options	(*(struct),int)->(void)
(	O
mu_strout	*(struct)
,	O
1	int
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
mu_strout	*(struct)
)	O
;	O
}	O
const	O
struct	O
mu_conf_option	struct(*(char),*(char))
*	O
mu_check_option	(*(char))->(*(struct(*(char),*(char))))
(	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
;	O
i	int
++	O
)	O
{	O
int	O
len	int
;	O
char	O
*	O
q	*(char)
,	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
,	O
'='	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
len	int
=	O
p	*(char)
-	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
;	O
else	O
len	int
=	O
strlen	(*(char))->(long)
(	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
)	O
;	O
if	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
,	O
name	*(char)
,	O
len	int
)	O
==	O
0	int
)	O
return	O
&	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
;	O
else	O
if	O
(	O
(	O
q	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
,	O
'_'	O
)	O
)	O
!=	O
NULL	O
&&	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
q	*(char)
+	O
1	int
,	O
name	*(char)
,	O
len	int
-	O
(	O
q	*(char)
-	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
.	O
name	*(char)
)	O
-	O
1	int
)	O
==	O
0	int
)	O
return	O
&	O
mu_conf_option	struct(*(char),*(char))
[	O
i	int
]	O
;	O
}	O
return	O
NULL	O
;	O
}	O
