static	O
OM_uint32	int
init_request	(*(int),*(struct(*(struct(int,*`)))),*(*(struct(*(struct`)))),*(struct(long,*(char),*(struct(int,*`)))),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(struct(long,*(void))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_cred_id_t	*(struct)
initiator_cred_handle	*(struct)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_name_t	*(struct)
target_name	*(struct)
,	O
const	O
gss_OID	*(struct(int,*(void)))
mech_type	*(struct(int,*(void)))
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
input_token	*(struct(long,*(void)))
,	O
gss_OID	*(struct(int,*(void)))
*	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
,	O
OM_uint32	int
*	O
ret_flags	*(int)
,	O
OM_uint32	int
*	O
time_rec	*(int)
)	O
{	O
gss_ctx_id_t	*(struct)
ctx	*(struct(*(struct(int,*(void)))))
=	O
*	O
context_handle	*(*(struct))
;	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
ctx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
;	O
char	O
*	O
cksum	*(char)
,	O
*	O
der	*(char)
;	O
size_t	long
cksumlen	long
,	O
derlen	long
;	O
int	O
rc	int
;	O
OM_uint32	int
maj_stat	int
;	O
Shishi_tkts_hint	O
hint	O
;	O
maj_stat	int
=	O
gss_krb5_canonicalize_name	(*(int),*(struct(long,*(char),*(struct(int,*`)))),*(struct(int,*(void))),*(*(struct(long,*(char),*(struct`)))))->(int)
(	O
minor_status	*(int)
,	O
target_name	*(struct)
,	O
GSS_C_NO_OID	O
,	O
&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
peerptr	*(struct(long,*(char),*(struct(int,*(void)))))
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hint	O
,	O
0	int
,	O
sizeof	O
(	O
hint	O
)	O
)	O
;	O
hint	O
.	O
server	O
=	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
peerptr	*(struct(long,*(char),*(struct(int,*(void)))))
->	O
value	*(void)
;	O
hint	O
.	O
endtime	O
=	O
time_req	int
;	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
=	O
shishi_tkts_get	()->(int)
(	O
shishi_tkts_default	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
)	O
,	O
&	O
hint	O
)	O
;	O
if	O
(	O
!	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
GSS_KRB5_S_KG_CCACHE_NOMATCH	O
;	O
return	O
GSS_S_NO_CRED	O
;	O
}	O
maj_stat	int
=	O
_gss_krb5_checksum_pack	()->(int)
(	O
minor_status	*(int)
,	O
initiator_cred_handle	*(struct)
,	O
context_handle	*(*(struct))
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
req_flags	int
,	O
&	O
cksum	*(char)
,	O
&	O
cksumlen	long
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
rc	int
=	O
shishi_ap_tktoptionsraw	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
,	O
SHISHI_APOPTIONS_MUTUAL_REQUIRED	O
,	O
0x8003	int
,	O
cksum	*(char)
,	O
cksumlen	long
)	O
;	O
free	(*(void))->(void)
(	O
cksum	*(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
shishi_authenticator_seqnumber_get	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
shishi_ap_authenticator	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
,	O
&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
initseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
shishi_ap_req_der	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
&	O
der	*(char)
,	O
&	O
derlen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
_gss_encapsulate_token_prefix	(*(char),long,*(char),long,*(char),int,*(*(void)),*(long))->(int)
(	O
TOK_AP_REQ	*(char)
,	O
TOK_LEN	int
,	O
der	*(char)
,	O
derlen	long
,	O
GSS_KRB5	O
->	O
elements	*(void)
,	O
GSS_KRB5	O
->	O
length	int
,	O
&	O
output_token	*(struct(long,*(void)))
->	O
value	*(void)
,	O
&	O
output_token	*(struct(long,*(void)))
->	O
length	int
)	O
;	O
free	(*(void))->(void)
(	O
der	*(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
req_flags	int
&	O
GSS_C_MUTUAL_FLAG	int
)	O
return	O
GSS_S_CONTINUE_NEEDED	O
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
static	O
OM_uint32	int
init_reply	(*(int),*(struct(*(struct(int,*`)))),*(*(struct(*(struct`)))),*(struct(long,*(char),*(struct(int,*`)))),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(struct(long,*(void))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_cred_id_t	*(struct)
initiator_cred_handle	*(struct)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_name_t	*(struct)
target_name	*(struct)
,	O
const	O
gss_OID	*(struct(int,*(void)))
mech_type	*(struct(int,*(void)))
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
input_token	*(struct(long,*(void)))
,	O
gss_OID	*(struct(int,*(void)))
*	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
,	O
OM_uint32	int
*	O
ret_flags	*(int)
,	O
OM_uint32	int
*	O
time_rec	*(int)
)	O
{	O
gss_ctx_id_t	*(struct)
ctx	*(struct(*(struct(int,*(void)))))
=	O
*	O
context_handle	*(*(struct))
;	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
ctx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
;	O
OM_uint32	int
tmp_min_stat	int
;	O
gss_buffer_desc	struct(long,*(void))
data	struct(long,*(void))
;	O
int	O
rc	int
;	O
if	O
(	O
gss_decapsulate_token	(*(struct(long,*(void))),*(struct(int,*(void))),*(struct(long,*(void))))->(int)
(	O
input_token	*(struct(long,*(void)))
,	O
GSS_KRB5	O
,	O
&	O
data	struct(long,*(void))
)	O
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
if	O
(	O
data	struct(long,*(void))
.	O
length	int
<	O
TOK_LEN	int
)	O
{	O
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
&	O
tmp_min_stat	int
,	O
&	O
data	struct(long,*(void))
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
data	struct(long,*(void))
.	O
value	*(void)
,	O
TOK_AP_REP	*(char)
,	O
TOK_LEN	int
)	O
!=	O
0	int
)	O
{	O
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
&	O
tmp_min_stat	int
,	O
&	O
data	struct(long,*(void))
)	O
;	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
}	O
rc	int
=	O
shishi_ap_rep_der_set	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
(	O
char	O
*	O
)	O
data	struct(long,*(void))
.	O
value	*(void)
+	O
TOK_LEN	int
,	O
data	struct(long,*(void))
.	O
length	int
-	O
TOK_LEN	int
)	O
;	O
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
&	O
tmp_min_stat	int
,	O
&	O
data	struct(long,*(void))
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
rc	int
=	O
shishi_ap_rep_verify	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_DEFECTIVE_TOKEN	O
;	O
rc	int
=	O
shishi_encapreppart_seqnumber_get	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
shishi_ap_encapreppart	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
,	O
&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
acceptseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
acceptseqnr	int
=	O
0	int
;	O
}	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_init_sec_context	(*(int),*(struct(*(struct(int,*`)))),*(*(struct(*(struct`)))),*(struct(long,*(char),*(struct(int,*`)))),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(struct(long,*(void))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_cred_id_t	*(struct)
initiator_cred_handle	*(struct)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_name_t	*(struct)
target_name	*(struct)
,	O
const	O
gss_OID	*(struct(int,*(void)))
mech_type	*(struct(int,*(void)))
,	O
OM_uint32	int
req_flags	int
,	O
OM_uint32	int
time_req	int
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
input_token	*(struct(long,*(void)))
,	O
gss_OID	*(struct(int,*(void)))
*	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
,	O
OM_uint32	int
*	O
ret_flags	*(int)
,	O
OM_uint32	int
*	O
time_rec	*(int)
)	O
{	O
gss_ctx_id_t	*(struct)
ctx	*(struct(*(struct(int,*(void)))))
=	O
*	O
context_handle	*(*(struct))
;	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
ctx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
;	O
OM_uint32	int
maj_stat	int
;	O
int	O
rc	int
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
if	O
(	O
initiator_cred_handle	*(struct)
)	O
{	O
return	O
GSS_S_NO_CRED	O
;	O
}	O
if	O
(	O
target_name	*(struct)
==	O
NULL	O
)	O
{	O
return	O
GSS_S_BAD_NAME	O
;	O
}	O
if	O
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
==	O
NULL	O
)	O
{	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
ctx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_init	()->(int)
(	O
&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
}	O
if	O
(	O
!	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
reqdone	int
)	O
{	O
maj_stat	int
=	O
init_request	(*(int),*(struct(*(struct(int,*`)))),*(*(struct(*(struct`)))),*(struct(long,*(char),*(struct(int,*`)))),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(struct(long,*(void))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int))->(int)
(	O
minor_status	*(int)
,	O
initiator_cred_handle	*(struct)
,	O
context_handle	*(*(struct))
,	O
target_name	*(struct)
,	O
mech_type	*(struct(int,*(void)))
,	O
req_flags	int
,	O
time_req	int
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
input_token	*(struct(long,*(void)))
,	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
output_token	*(struct(long,*(void)))
,	O
ret_flags	*(int)
,	O
time_rec	*(int)
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
flags	int
=	O
req_flags	int
&	O
(	O
GSS_C_MUTUAL_FLAG	int
|	O
GSS_C_REPLAY_FLAG	int
|	O
GSS_C_SEQUENCE_FLAG	int
|	O
GSS_C_CONF_FLAG	int
|	O
GSS_C_INTEG_FLAG	int
)	O
;	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
flags	int
|=	O
GSS_C_PROT_READY_FLAG	int
;	O
if	O
(	O
ret_flags	*(int)
)	O
*	O
ret_flags	*(int)
=	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
flags	int
;	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
key	*(int)
=	O
shishi_ap_key	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
;	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
reqdone	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
reqdone	int
&&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
flags	int
&	O
GSS_C_MUTUAL_FLAG	int
&&	O
!	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
repdone	int
)	O
{	O
maj_stat	int
=	O
init_reply	(*(int),*(struct(*(struct(int,*`)))),*(*(struct(*(struct`)))),*(struct(long,*(char),*(struct(int,*`)))),*(struct(int,*(void))),int,int,*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(struct(long,*(void))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int))->(int)
(	O
minor_status	*(int)
,	O
initiator_cred_handle	*(struct)
,	O
context_handle	*(*(struct))
,	O
target_name	*(struct)
,	O
mech_type	*(struct(int,*(void)))
,	O
req_flags	int
,	O
time_req	int
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
input_token	*(struct(long,*(void)))
,	O
actual_mech_type	*(*(struct(int,*(void))))
,	O
output_token	*(struct(long,*(void)))
,	O
ret_flags	*(int)
,	O
time_rec	*(int)
)	O
;	O
if	O
(	O
GSS_ERROR	O
(	O
maj_stat	int
)	O
)	O
return	O
maj_stat	int
;	O
if	O
(	O
ret_flags	*(int)
)	O
*	O
ret_flags	*(int)
=	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
flags	int
;	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
repdone	int
=	O
1	int
;	O
}	O
else	O
maj_stat	int
=	O
GSS_S_FAILURE	O
;	O
if	O
(	O
time_rec	*(int)
)	O
*	O
time_rec	*(int)
=	O
gss_krb5_tktlifetime	(*(int))->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
)	O
;	O
return	O
maj_stat	int
;	O
}	O
OM_uint32	int
gss_krb5_accept_sec_context	(*(int),*(*(struct(*(struct`)))),*(struct(*(struct(int,*`)))),*(struct(long,*(void))),*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void)))),*(*(struct(long,*(char),*(struct`)))),*(*(struct(int,*(void)))),*(struct(long,*(void))),*(int),*(int),*(*(struct(*(struct`)))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
const	O
gss_cred_id_t	*(struct)
acceptor_cred_handle	*(struct)
,	O
const	O
gss_buffer_t	*(struct(long,*(void)))
input_token_buffer	*(struct(long,*(void)))
,	O
const	O
gss_channel_bindings_t	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
,	O
gss_name_t	*(struct)
*	O
src_name	*(*(struct))
,	O
gss_OID	*(struct(int,*(void)))
*	O
mech_type	*(struct(int,*(void)))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
,	O
OM_uint32	int
*	O
ret_flags	*(int)
,	O
OM_uint32	int
*	O
time_rec	*(int)
,	O
gss_cred_id_t	*(struct)
*	O
delegated_cred_handle	*(*(struct))
)	O
{	O
gss_buffer_desc	struct(long,*(void))
in	*(char)
;	O
gss_ctx_id_t	*(struct)
cx	*(struct(*(struct(int,*(void)))))
;	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
;	O
_gss_krb5_cred_t	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
;	O
OM_uint32	int
tmp_min_stat	int
;	O
int	O
rc	int
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
if	O
(	O
ret_flags	*(int)
)	O
*	O
ret_flags	*(int)
=	O
0	int
;	O
if	O
(	O
!	O
acceptor_cred_handle	*(struct)
)	O
return	O
GSS_S_NO_CRED	O
;	O
if	O
(	O
*	O
context_handle	*(*(struct))
)	O
return	O
GSS_S_FAILURE	O
;	O
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
=	O
acceptor_cred_handle	*(struct)
->	O
krb5	O
;	O
cx	*(struct(*(struct(int,*(void)))))
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
cx	*(struct(*(struct(int,*(void)))))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
cx	*(struct(*(struct(int,*(void)))))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
calloc	(long,long)->(*(void))
(	O
sizeof	O
(	O
*	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
)	O
,	O
1	int
)	O
;	O
if	O
(	O
!	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
)	O
{	O
free	(*(void))->(void)
(	O
cx	*(struct(*(struct(int,*(void)))))
)	O
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
cx	*(struct(*(struct(int,*(void)))))
->	O
mech	*(struct(int,*(void)))
=	O
GSS_KRB5	O
;	O
cx	*(struct(*(struct(int,*(void)))))
->	O
krb5	O
=	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
;	O
*	O
context_handle	*(*(struct))
=	O
cx	*(struct(*(struct(int,*(void)))))
;	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
=	O
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
->	O
sh	*(int)
;	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
key	*(int)
=	O
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
->	O
key	*(int)
;	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
acceptor	int
=	O
1	int
;	O
rc	int
=	O
shishi_ap	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
&	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
gss_decapsulate_token	(*(struct(long,*(void))),*(struct(int,*(void))),*(struct(long,*(void))))->(int)
(	O
input_token_buffer	*(struct(long,*(void)))
,	O
GSS_KRB5	O
,	O
&	O
in	*(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_BAD_MIC	O
;	O
if	O
(	O
in	*(char)
.	O
length	int
<	O
TOK_LEN	int
)	O
{	O
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
&	O
tmp_min_stat	int
,	O
&	O
in	*(char)
)	O
;	O
return	O
GSS_S_BAD_MIC	O
;	O
}	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
in	*(char)
.	O
value	*(void)
,	O
TOK_AP_REQ	*(char)
,	O
TOK_LEN	int
)	O
!=	O
0	int
)	O
{	O
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
&	O
tmp_min_stat	int
,	O
&	O
in	*(char)
)	O
;	O
return	O
GSS_S_BAD_MIC	O
;	O
}	O
rc	int
=	O
shishi_ap_req_der_set	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
(	O
char	O
*	O
)	O
in	*(char)
.	O
value	*(void)
+	O
TOK_LEN	int
,	O
in	*(char)
.	O
length	int
-	O
TOK_LEN	int
)	O
;	O
gss_release_buffer	(*(int),*(struct(long,*(void))))->(int)
(	O
&	O
tmp_min_stat	int
,	O
&	O
in	*(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
shishi_ap_req_process	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
->	O
key	*(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
GSS_KRB5_S_G_VALIDATE_FAILED	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_authenticator_seqnumber_get	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
shishi_ap_authenticator	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
,	O
&	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
initseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
rc	int
=	O
_gss_krb5_checksum_parse	()->(int)
(	O
minor_status	*(int)
,	O
context_handle	*(*(struct))
,	O
input_chan_bindings	*(struct(int,struct(long,*(void)),int,struct(long,*(void)),struct(long,*(void))))
)	O
;	O
if	O
(	O
rc	int
!=	O
GSS_S_COMPLETE	int
)	O
return	O
GSS_S_FAILURE	O
;	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
=	O
shishi_ap_tkt	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
;	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
key	*(int)
=	O
shishi_ap_key	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
;	O
if	O
(	O
shishi_apreq_mutual_required_p	()->(int)
(	O
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
->	O
sh	*(int)
,	O
shishi_ap_req	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
)	O
)	O
{	O
Shishi_asn1	O
aprep	O
;	O
char	O
*	O
der	*(char)
;	O
size_t	long
len	long
;	O
rc	int
=	O
shishi_ap_rep_asn1	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
,	O
&	O
aprep	O
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error creating AP-REP: %s\n"	*(char)
,	O
shishi_strerror	()->(int)
(	O
rc	int
)	O
)	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_encapreppart_seqnumber_get	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
shishi_ap_encapreppart	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
,	O
&	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
acceptseqnr	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
acceptseqnr	int
=	O
0	int
;	O
}	O
rc	int
=	O
shishi_asn1_to_der	()->(int)
(	O
crk5	*(struct(*(int),*(struct(long,*(char),*(struct`))),*(int)))
->	O
sh	*(int)
,	O
aprep	O
,	O
&	O
der	*(char)
,	O
&	O
len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
{	O
printf	(*(char))->(int)
(	O
"Error der encoding aprep: %s\n"	*(char)
,	O
shishi_strerror	()->(int)
(	O
rc	int
)	O
)	O
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
_gss_encapsulate_token_prefix	(*(char),long,*(char),long,*(char),int,*(*(void)),*(long))->(int)
(	O
TOK_AP_REP	*(char)
,	O
TOK_LEN	int
,	O
der	*(char)
,	O
len	long
,	O
GSS_KRB5	O
->	O
elements	*(void)
,	O
GSS_KRB5	O
->	O
length	int
,	O
&	O
output_token	*(struct(long,*(void)))
->	O
value	*(void)
,	O
&	O
output_token	*(struct(long,*(void)))
->	O
length	int
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
GSS_S_FAILURE	O
;	O
if	O
(	O
ret_flags	*(int)
)	O
*	O
ret_flags	*(int)
=	O
GSS_C_MUTUAL_FLAG	int
;	O
}	O
else	O
{	O
output_token	*(struct(long,*(void)))
->	O
value	*(void)
=	O
NULL	O
;	O
output_token	*(struct(long,*(void)))
->	O
length	int
=	O
0	int
;	O
}	O
if	O
(	O
src_name	*(*(struct))
)	O
{	O
gss_name_t	*(struct)
p	*(struct(long,*(char),*(struct(int,*(void)))))
;	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
)	O
)	O
;	O
if	O
(	O
!	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
ENOMEM	int
;	O
return	O
GSS_S_FAILURE	O
;	O
}	O
rc	int
=	O
shishi_encticketpart_client	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
,	O
shishi_tkt_encticketpart	()->(int)
(	O
cxk5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
)	O
,	O
&	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
->	O
value	*(void)
,	O
&	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
->	O
length	int
)	O
;	O
if	O
(	O
rc	int
!=	O
SHISHI_OK	O
)	O
return	O
GSS_S_FAILURE	O
;	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
->	O
type	*(struct(int,*(void)))
=	O
GSS_KRB5_NT_PRINCIPAL_NAME	O
;	O
*	O
src_name	*(*(struct))
=	O
p	*(struct(long,*(char),*(struct(int,*(void)))))
;	O
}	O
if	O
(	O
ret_flags	*(int)
)	O
*	O
ret_flags	*(int)
|=	O
GSS_C_PROT_READY_FLAG	int
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_delete_sec_context	(*(int),*(*(struct(*(struct`)))),*(struct(long,*(void))))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
gss_ctx_id_t	*(struct)
*	O
context_handle	*(*(struct))
,	O
gss_buffer_t	*(struct(long,*(void)))
output_token	*(struct(long,*(void)))
)	O
{	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
(	O
*	O
context_handle	*(*(struct))
)	O
->	O
krb5	O
;	O
if	O
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
peerptr	*(struct(long,*(char),*(struct(int,*(void)))))
!=	O
GSS_C_NO_NAME	O
)	O
gss_release_name	(*(int),*(*(struct)))->(int)
(	O
NULL	O
,	O
&	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
peerptr	*(struct(long,*(char),*(struct(int,*(void)))))
)	O
;	O
if	O
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
shishi_ap_done	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
ap	*(int)
)	O
;	O
if	O
(	O
!	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
acceptor	int
)	O
shishi_done	()->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
sh	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
)	O
;	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
OM_uint32	int
gss_krb5_context_time	(*(int),*(struct(*(struct(int,*`)))),*(int))->(int)
(	O
OM_uint32	int
*	O
minor_status	*(int)
,	O
const	O
gss_ctx_id_t	*(struct)
context_handle	*(*(struct))
,	O
OM_uint32	int
*	O
time_rec	*(int)
)	O
{	O
_gss_krb5_ctx_t	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
=	O
context_handle	*(*(struct))
->	O
krb5	O
;	O
if	O
(	O
time_rec	*(int)
)	O
{	O
*	O
time_rec	*(int)
=	O
gss_krb5_tktlifetime	(*(int))->(int)
(	O
k5	*(struct(*(int),*(int),*(int),*(int),*(struct(long,*(char),*(struct`))),int,int,int,int,int,int))
->	O
tkt	*(int)
)	O
;	O
if	O
(	O
*	O
time_rec	*(int)
==	O
0	int
)	O
{	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_CONTEXT_EXPIRED	O
;	O
}	O
}	O
if	O
(	O
minor_status	*(int)
)	O
*	O
minor_status	*(int)
=	O
0	int
;	O
return	O
GSS_S_COMPLETE	int
;	O
}	O
