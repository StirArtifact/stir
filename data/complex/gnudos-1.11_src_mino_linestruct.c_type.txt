struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
allocLineStruct	()->(*(struct(*(char),int,int,int,int)))
(	O
)	O
{	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
line	*(struct(*(char),int,int,int,int))
=	O
(	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
linestruct	struct(*(char),int,int,int,int)
)	O
)	O
;	O
if	O
(	O
!	O
line	*(struct(*(char),int,int,int,int))
)	O
{	O
msgBox	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory"	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
return	O
NULL	O
;	O
}	O
line	*(struct(*(char),int,int,int,int))
->	O
byteCount	int
=	O
0	int
;	O
line	*(struct(*(char),int,int,int,int))
->	O
bytesAlloced	int
=	O
0	int
;	O
line	*(struct(*(char),int,int,int,int))
->	O
charCount	int
=	O
0	int
;	O
line	*(struct(*(char),int,int,int,int))
->	O
linkedToNext	int
=	O
0	int
;	O
line	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
=	O
NULL	O
;	O
return	O
line	*(struct(*(char),int,int,int,int))
;	O
}	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
allocLineStructB	(int)->(*(struct(*(char),int,int,int,int)))
(	O
int	O
bytes	int
)	O
{	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
line	*(struct(*(char),int,int,int,int))
=	O
allocLineStruct	()->(*(struct(*(char),int,int,int,int)))
(	O
)	O
;	O
if	O
(	O
line	*(struct(*(char),int,int,int,int))
)	O
{	O
line	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
bytes	int
+	O
1	int
)	O
;	O
if	O
(	O
!	O
line	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
)	O
{	O
msgBox	(*(char),int,enum(int,int,int))->(int)
(	O
"Insufficient memory"	*(char)
,	O
OK	int
,	O
ERROR	int
)	O
;	O
free	(*(void))->(void)
(	O
line	*(struct(*(char),int,int,int,int))
)	O
;	O
return	O
NULL	O
;	O
}	O
line	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
line	*(struct(*(char),int,int,int,int))
->	O
bytesAlloced	int
=	O
bytes	int
+	O
1	int
;	O
}	O
return	O
line	*(struct(*(char),int,int,int,int))
;	O
}	O
void	O
copyLineStruct	(int,int)->(void)
(	O
int	O
pos1	int
,	O
int	O
pos2	int
)	O
{	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
line1	*(struct(*(char),int,int,int,int))
=	O
lines	array(*(struct(*(char),int,int,int,int)))
[	O
pos1	int
]	O
;	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
line2	*(struct(*(char),int,int,int,int))
=	O
lines	array(*(struct(*(char),int,int,int,int)))
[	O
pos2	int
]	O
;	O
if	O
(	O
!	O
line2	*(struct(*(char),int,int,int,int))
)	O
return	O
;	O
if	O
(	O
!	O
line1	*(struct(*(char),int,int,int,int))
)	O
{	O
line1	*(struct(*(char),int,int,int,int))
=	O
allocLineStruct	()->(*(struct(*(char),int,int,int,int)))
(	O
)	O
;	O
if	O
(	O
!	O
line1	*(struct(*(char),int,int,int,int))
)	O
return	O
;	O
lines	array(*(struct(*(char),int,int,int,int)))
[	O
pos1	int
]	O
=	O
line1	*(struct(*(char),int,int,int,int))
;	O
}	O
if	O
(	O
line1	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
)	O
free	(*(void))->(void)
(	O
line1	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
line1	*(struct(*(char),int,int,int,int))
,	O
line2	*(struct(*(char),int,int,int,int))
,	O
sizeof	O
(	O
struct	O
linestruct	struct(*(char),int,int,int,int)
)	O
)	O
;	O
line2	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
=	O
NULL	O
;	O
}	O
void	O
freeLineStruct	(*(struct(*(char),int,int,int,int)))->(void)
(	O
struct	O
linestruct	struct(*(char),int,int,int,int)
*	O
line	*(struct(*(char),int,int,int,int))
)	O
{	O
if	O
(	O
!	O
line	*(struct(*(char),int,int,int,int))
)	O
return	O
;	O
if	O
(	O
line	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
)	O
free	(*(void))->(void)
(	O
line	*(struct(*(char),int,int,int,int))
->	O
text	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
line	*(struct(*(char),int,int,int,int))
)	O
;	O
}	O
