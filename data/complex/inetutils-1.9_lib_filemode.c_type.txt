static	O
char	O
ftypelet	(int)->(char)
(	O
mode_t	int
bits	int
)	O
{	O
if	O
(	O
S_ISREG	O
(	O
bits	int
)	O
)	O
return	O
'-'	O
;	O
if	O
(	O
S_ISDIR	O
(	O
bits	int
)	O
)	O
return	O
'd'	O
;	O
if	O
(	O
S_ISBLK	O
(	O
bits	int
)	O
)	O
return	O
'b'	O
;	O
if	O
(	O
S_ISCHR	O
(	O
bits	int
)	O
)	O
return	O
'c'	O
;	O
if	O
(	O
S_ISLNK	O
(	O
bits	int
)	O
)	O
return	O
'l'	O
;	O
if	O
(	O
S_ISFIFO	O
(	O
bits	int
)	O
)	O
return	O
'p'	O
;	O
if	O
(	O
S_ISSOCK	O
(	O
bits	int
)	O
)	O
return	O
's'	O
;	O
if	O
(	O
S_ISCTG	int
(	O
bits	int
)	O
)	O
return	O
'C'	O
;	O
if	O
(	O
S_ISDOOR	int
(	O
bits	int
)	O
)	O
return	O
'D'	O
;	O
if	O
(	O
S_ISMPB	int
(	O
bits	int
)	O
||	O
S_ISMPC	int
(	O
bits	int
)	O
)	O
return	O
'm'	O
;	O
if	O
(	O
S_ISNWK	int
(	O
bits	int
)	O
)	O
return	O
'n'	O
;	O
if	O
(	O
S_ISPORT	int
(	O
bits	int
)	O
)	O
return	O
'P'	O
;	O
if	O
(	O
S_ISWHT	int
(	O
bits	int
)	O
)	O
return	O
'w'	O
;	O
return	O
'?'	O
;	O
}	O
void	O
strmode	(int,*(char))->(void)
(	O
mode_t	int
mode	int
,	O
char	O
*	O
str	*(char)
)	O
{	O
str	*(char)
[	O
0	int
]	O
=	O
ftypelet	(int)->(char)
(	O
mode	int
)	O
;	O
str	*(char)
[	O
1	int
]	O
=	O
mode	int
&	O
S_IRUSR	O
?	O
'r'	O
:	O
'-'	O
;	O
str	*(char)
[	O
2	int
]	O
=	O
mode	int
&	O
S_IWUSR	O
?	O
'w'	O
:	O
'-'	O
;	O
str	*(char)
[	O
3	int
]	O
=	O
(	O
mode	int
&	O
S_ISUID	O
?	O
(	O
mode	int
&	O
S_IXUSR	O
?	O
's'	O
:	O
'S'	O
)	O
:	O
(	O
mode	int
&	O
S_IXUSR	O
?	O
'x'	O
:	O
'-'	O
)	O
)	O
;	O
str	*(char)
[	O
4	int
]	O
=	O
mode	int
&	O
S_IRGRP	O
?	O
'r'	O
:	O
'-'	O
;	O
str	*(char)
[	O
5	int
]	O
=	O
mode	int
&	O
S_IWGRP	O
?	O
'w'	O
:	O
'-'	O
;	O
str	*(char)
[	O
6	int
]	O
=	O
(	O
mode	int
&	O
S_ISGID	O
?	O
(	O
mode	int
&	O
S_IXGRP	O
?	O
's'	O
:	O
'S'	O
)	O
:	O
(	O
mode	int
&	O
S_IXGRP	O
?	O
'x'	O
:	O
'-'	O
)	O
)	O
;	O
str	*(char)
[	O
7	int
]	O
=	O
mode	int
&	O
S_IROTH	O
?	O
'r'	O
:	O
'-'	O
;	O
str	*(char)
[	O
8	int
]	O
=	O
mode	int
&	O
S_IWOTH	O
?	O
'w'	O
:	O
'-'	O
;	O
str	*(char)
[	O
9	int
]	O
=	O
(	O
mode	int
&	O
S_ISVTX	O
?	O
(	O
mode	int
&	O
S_IXOTH	O
?	O
't'	O
:	O
'T'	O
)	O
:	O
(	O
mode	int
&	O
S_IXOTH	O
?	O
'x'	O
:	O
'-'	O
)	O
)	O
;	O
str	*(char)
[	O
10	int
]	O
=	O
' '	O
;	O
str	*(char)
[	O
11	int
]	O
=	O
'\0'	O
;	O
}	O
void	O
filemodestring	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(char))->(void)
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
const	O
*	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
char	O
*	O
str	*(char)
)	O
{	O
strmode	(int,*(char))->(void)
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
->	O
st_mode	int
,	O
str	*(char)
)	O
;	O
if	O
(	O
S_TYPEISSEM	O
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
str	*(char)
[	O
0	int
]	O
=	O
'F'	O
;	O
else	O
if	O
(	O
IS_MIGRATED_FILE	int
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
str	*(char)
[	O
0	int
]	O
=	O
'M'	O
;	O
else	O
if	O
(	O
S_TYPEISMQ	O
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
str	*(char)
[	O
0	int
]	O
=	O
'Q'	O
;	O
else	O
if	O
(	O
S_TYPEISSHM	O
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
str	*(char)
[	O
0	int
]	O
=	O
'S'	O
;	O
else	O
if	O
(	O
S_TYPEISTMO	int
(	O
statp	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
str	*(char)
[	O
0	int
]	O
=	O
'T'	O
;	O
}	O
