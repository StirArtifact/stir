struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
{	O
kwset_t	*(struct)
kwset	*(struct)
;	O
char	O
*	O
trans	*(char)
;	O
bool	bool
match_words	bool
;	O
bool	bool
match_lines	bool
;	O
char	O
eolbyte	char
;	O
}	O
;	O
static	O
void	O
kwsinit	(*(struct(*(struct),*(char),bool,bool,char)),bool,bool,bool,char)->(void)
(	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
*	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
,	O
bool	bool
match_icase	bool
,	O
bool	bool
match_words	bool
,	O
bool	bool
match_lines	bool
,	O
char	O
eolbyte	char
)	O
{	O
if	O
(	O
match_icase	bool
)	O
{	O
int	O
i	int
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
trans	*(char)
=	O
XNMALLOC	O
(	O
NCHAR	O
,	O
char	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NCHAR	O
;	O
i	int
++	O
)	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
trans	*(char)
[	O
i	int
]	O
=	O
TOLOWER	O
(	O
i	int
)	O
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
=	O
kwsalloc	(*(char))->(*(struct))
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
trans	*(char)
)	O
;	O
}	O
else	O
{	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
trans	*(char)
=	O
NULL	O
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
=	O
kwsalloc	(*(char))->(*(struct))
(	O
NULL	O
)	O
;	O
}	O
if	O
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
exit_failure	int
,	O
0	int
,	O
_	O
(	O
"memory exhausted"	*(char)
)	O
)	O
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
match_words	bool
=	O
match_words	bool
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
match_lines	bool
=	O
match_lines	bool
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
eolbyte	char
=	O
eolbyte	char
;	O
}	O
static	O
void	O
*	O
Fcompile	(*(char),long,bool,bool,bool,char)->(*(void))
(	O
const	O
char	O
*	O
pattern	*(char)
,	O
size_t	long
pattern_size	long
,	O
bool	bool
match_icase	bool
,	O
bool	bool
match_words	bool
,	O
bool	bool
match_lines	bool
,	O
char	O
eolbyte	char
)	O
{	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
*	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
;	O
const	O
char	O
*	O
beg	*(char)
;	O
const	O
char	O
*	O
err	*(char)
;	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
=	O
XMALLOC	O
(	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
)	O
;	O
kwsinit	(*(struct(*(struct),*(char),bool,bool,char)),bool,bool,bool,char)->(void)
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
,	O
match_icase	bool
,	O
match_words	bool
,	O
match_lines	bool
,	O
eolbyte	char
)	O
;	O
beg	*(char)
=	O
pattern	*(char)
;	O
do	O
{	O
const	O
char	O
*	O
lim	*(char)
;	O
for	O
(	O
lim	*(char)
=	O
beg	*(char)
;	O
lim	*(char)
<	O
pattern	*(char)
+	O
pattern_size	long
&&	O
*	O
lim	*(char)
!=	O
'\n'	O
;	O
++	O
lim	*(char)
)	O
;	O
if	O
(	O
(	O
err	*(char)
=	O
kwsincr	(*(struct),*(char),long)->(*(char))
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
,	O
beg	*(char)
,	O
lim	*(char)
-	O
beg	*(char)
)	O
)	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
exit_failure	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	*(char)
)	O
;	O
if	O
(	O
lim	*(char)
<	O
pattern	*(char)
+	O
pattern_size	long
)	O
++	O
lim	*(char)
;	O
beg	*(char)
=	O
lim	*(char)
;	O
}	O
while	O
(	O
beg	*(char)
<	O
pattern	*(char)
+	O
pattern_size	long
)	O
;	O
if	O
(	O
(	O
err	*(char)
=	O
kwsprep	(*(struct))->(*(char))
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
)	O
)	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
exit_failure	int
,	O
0	int
,	O
"%s"	*(char)
,	O
err	*(char)
)	O
;	O
return	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
;	O
}	O
static	O
char	O
*	O
check_multibyte_string	(*(char),long)->(*(char))
(	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_size	long
)	O
{	O
char	O
*	O
mb_properties	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
buf_size	long
)	O
;	O
mbstate_t	struct(int,union(int,array(char)))
cur_state	struct(int,union(int,array(char)))
;	O
int	O
i	int
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
cur_state	struct(int,union(int,array(char)))
,	O
0	int
,	O
sizeof	O
(	O
mbstate_t	struct(int,union(int,array(char)))
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
mb_properties	*(char)
,	O
0	int
,	O
sizeof	O
(	O
char	O
)	O
*	O
buf_size	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
buf_size	long
;	O
)	O
{	O
size_t	long
mbclen	long
;	O
mbclen	long
=	O
mbrlen	(*(char),long,*(struct(int,union(int,array(char)))))->(long)
(	O
buf	*(char)
+	O
i	int
,	O
buf_size	long
-	O
i	int
,	O
&	O
cur_state	struct(int,union(int,array(char)))
)	O
;	O
if	O
(	O
mbclen	long
==	O
(	O
size_t	long
)	O
-	O
1	int
||	O
mbclen	long
==	O
(	O
size_t	long
)	O
-	O
2	int
||	O
mbclen	long
==	O
0	int
)	O
{	O
mbclen	long
=	O
1	int
;	O
}	O
mb_properties	*(char)
[	O
i	int
]	O
=	O
mbclen	long
;	O
i	int
+=	O
mbclen	long
;	O
}	O
return	O
mb_properties	*(char)
;	O
}	O
static	O
size_t	long
Fexecute	(*(void),*(char),long,*(long),bool)->(long)
(	O
const	O
void	O
*	O
compiled_pattern	*(void)
,	O
const	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buf_size	long
,	O
size_t	long
*	O
match_size	*(long)
,	O
bool	bool
exact	bool
)	O
{	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
*	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
=	O
(	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
*	O
)	O
compiled_pattern	*(void)
;	O
char	O
eol	char
=	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
eolbyte	char
;	O
register	O
const	O
char	O
*	O
buflim	*(char)
=	O
buf	*(char)
+	O
buf_size	long
;	O
register	O
const	O
char	O
*	O
beg	*(char)
;	O
register	O
size_t	long
len	long
;	O
char	O
*	O
mb_properties	*(char)
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
mb_properties	*(char)
=	O
check_multibyte_string	(*(char),long)->(*(char))
(	O
buf	*(char)
,	O
buf_size	long
)	O
;	O
for	O
(	O
beg	*(char)
=	O
buf	*(char)
;	O
beg	*(char)
<=	O
buflim	*(char)
;	O
++	O
beg	*(char)
)	O
{	O
struct	O
kwsmatch	struct(int,array(long),array(long))
kwsmatch	struct(int,array(long),array(long))
;	O
size_t	long
offset	long
=	O
kwsexec	(*(struct),*(char),long,*(struct(int,array(long),array(long))))->(long)
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
,	O
beg	*(char)
,	O
buflim	*(char)
-	O
beg	*(char)
,	O
&	O
kwsmatch	struct(int,array(long),array(long))
)	O
;	O
if	O
(	O
offset	long
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
free	*((*(void))->(void))
(	O
mb_properties	*(char)
)	O
;	O
return	O
offset	long
;	O
}	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
&&	O
mb_properties	*(char)
[	O
offset	long
+	O
beg	*(char)
-	O
buf	*(char)
]	O
==	O
0	int
)	O
continue	O
;	O
beg	*(char)
+=	O
offset	long
;	O
len	long
=	O
kwsmatch	struct(int,array(long),array(long))
.	O
size	long
[	O
0	int
]	O
;	O
if	O
(	O
exact	bool
)	O
{	O
*	O
match_size	*(long)
=	O
len	long
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
free	*((*(void))->(void))
(	O
mb_properties	*(char)
)	O
;	O
return	O
beg	*(char)
-	O
buf	*(char)
;	O
}	O
if	O
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
match_lines	bool
)	O
{	O
if	O
(	O
beg	*(char)
>	O
buf	*(char)
&&	O
beg	*(char)
[	O
-	O
1	int
]	O
!=	O
eol	char
)	O
continue	O
;	O
if	O
(	O
beg	*(char)
+	O
len	long
<	O
buflim	*(char)
&&	O
beg	*(char)
[	O
len	long
]	O
!=	O
eol	char
)	O
continue	O
;	O
goto	O
success	O
;	O
}	O
else	O
if	O
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
match_words	bool
)	O
{	O
register	O
const	O
char	O
*	O
curr	*(char)
;	O
for	O
(	O
curr	*(char)
=	O
beg	*(char)
;	O
len	long
;	O
)	O
{	O
if	O
(	O
curr	*(char)
>	O
buf	*(char)
&&	O
IS_WORD_CONSTITUENT	O
(	O
(	O
unsigned	O
char	O
)	O
curr	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
break	O
;	O
if	O
(	O
curr	*(char)
+	O
len	long
<	O
buflim	*(char)
&&	O
IS_WORD_CONSTITUENT	O
(	O
(	O
unsigned	O
char	O
)	O
curr	*(char)
[	O
len	long
]	O
)	O
)	O
{	O
offset	long
=	O
kwsexec	(*(struct),*(char),long,*(struct(int,array(long),array(long))))->(long)
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
kwset	*(struct)
,	O
beg	*(char)
,	O
--	O
len	long
,	O
&	O
kwsmatch	struct(int,array(long),array(long))
)	O
;	O
if	O
(	O
offset	long
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
free	*((*(void))->(void))
(	O
mb_properties	*(char)
)	O
;	O
return	O
offset	long
;	O
}	O
curr	*(char)
=	O
beg	*(char)
+	O
offset	long
;	O
len	long
=	O
kwsmatch	struct(int,array(long),array(long))
.	O
size	long
[	O
0	int
]	O
;	O
}	O
else	O
goto	O
success	O
;	O
}	O
}	O
else	O
goto	O
success	O
;	O
}	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
free	*((*(void))->(void))
(	O
mb_properties	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
success	O
:	O
{	O
register	O
const	O
char	O
*	O
end	*(char)
;	O
end	*(char)
=	O
(	O
const	O
char	O
*	O
)	O
memchr	(*(void),int,long)->(*(void))
(	O
beg	*(char)
+	O
len	long
,	O
eol	char
,	O
buflim	*(char)
-	O
(	O
beg	*(char)
+	O
len	long
)	O
)	O
;	O
if	O
(	O
end	*(char)
!=	O
NULL	O
)	O
end	*(char)
++	O
;	O
else	O
end	*(char)
=	O
buflim	*(char)
;	O
while	O
(	O
buf	*(char)
<	O
beg	*(char)
&&	O
beg	*(char)
[	O
-	O
1	int
]	O
!=	O
eol	char
)	O
--	O
beg	*(char)
;	O
*	O
match_size	*(long)
=	O
end	*(char)
-	O
beg	*(char)
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
free	*((*(void))->(void))
(	O
mb_properties	*(char)
)	O
;	O
return	O
beg	*(char)
-	O
buf	*(char)
;	O
}	O
}	O
static	O
void	O
Ffree	(*(void))->(void)
(	O
void	O
*	O
compiled_pattern	*(void)
)	O
{	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
*	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
=	O
(	O
struct	O
compiled_kwset	struct(*(struct),*(char),bool,bool,char)
*	O
)	O
compiled_pattern	*(void)
;	O
free	*((*(void))->(void))
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
->	O
trans	*(char)
)	O
;	O
free	*((*(void))->(void))
(	O
ckwset	*(struct(*(struct),*(char),bool,bool,char))
)	O
;	O
}	O
matcher_t	struct(*((*(char),long,bool,bool,bool,char)->(*(void))),*((*(void),*(char),long,*(long),bool)->(long)),*((*(void))->(void)))
matcher_fgrep	struct(*((*(char),long,bool,bool,bool,char)->(*(void))),*((*(void),*(char),long,*(long),bool)->(long)),*((*(void))->(void)))
=	O
{	O
Fcompile	(*(char),long,bool,bool,bool,char)->(*(void))
,	O
Fexecute	(*(void),*(char),long,*(long),bool)->(long)
,	O
Ffree	(*(void))->(void)
}	O
;	O
