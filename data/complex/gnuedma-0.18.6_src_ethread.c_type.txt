ESint32	long
EDMAPROC	O
edma_thread_register	()->(long)
(	O
void	O
)	O
{	O
OBJID	long
*	O
aux	*(long)
;	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
temp	*(struct(long,long,*(long)))
;	O
ETHREAD	long
current	long
;	O
ESint32	long
i	long
;	O
current	long
=	O
edma_thread_self	()->(long)
(	O
)	O
;	O
if	O
(	O
(	O
aux	*(long)
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_log	(*(char))->(long)
(	O
"[edma_thread_register] Thread %p not registered. "	*(char)
"Registering now"	*(char)
,	O
current	long
)	O
;	O
if	O
(	O
(	O
temp	*(struct(long,long,*(long)))
=	O
(	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
)	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
ETHREAD_DATA	struct(long,long,*(long))
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[edma_thread_register] %s"	*(char)
,	O
"Can't alloc stack for thread. Register aborted"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
aux	*(long)
=	O
(	O
OBJID	long
*	O
)	O
edma_palloc	(long)->(long)
(	O
sizeof	O
(	O
OBJID	long
)	O
*	O
MAX_STACK_EXECUTION	O
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
temp	*(struct(long,long,*(long)))
,	O
temp	*(struct(long,long,*(long)))
)	O
;	O
edma_printf_err	(*(char))->(long)
(	O
"[edma_thread_register] %s"	*(char)
,	O
"Can't alloc stack for thread. Register aborted"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
temp	*(struct(long,long,*(long)))
->	O
tid	long
=	O
current	long
;	O
temp	*(struct(long,long,*(long)))
->	O
top	long
=	O
0	int
;	O
temp	*(struct(long,long,*(long)))
->	O
current_stack_execution	*(long)
=	O
aux	*(long)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
MAX_STACK_EXECUTION	O
;	O
i	long
++	O
)	O
temp	*(struct(long,long,*(long)))
->	O
current_stack_execution	*(long)
[	O
i	long
]	O
=	O
-	O
1	int
;	O
edma_tsd_set_data	(int,*(void))->(long)
(	O
thread_stack_key	int
,	O
temp	*(struct(long,long,*(long)))
)	O
;	O
if	O
(	O
(	O
thread_list	*(*(struct(long,long,*(long))))
=	O
(	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
*	O
)	O
edma_prealloc	(long,long)->(long)
(	O
(	O
HMEM	long
)	O
thread_list	*(*(struct(long,long,*(long))))
,	O
(	O
num_threads	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
)	O
)	O
)	O
==	O
NULL	O
)	O
{	O
edma_printf_err	(*(char))->(long)
(	O
"[edma_thread_register] %s"	*(char)
,	O
"Can't alloc memory for thread in "	*(char)
"GNU/EDMA Global Thread List"	*(char)
)	O
;	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
aux	*(long)
,	O
aux	*(long)
)	O
;	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
temp	*(struct(long,long,*(long)))
,	O
temp	*(struct(long,long,*(long)))
)	O
;	O
edma_tsd_set_data	(int,*(void))->(long)
(	O
thread_stack_key	int
,	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
thread_list	*(*(struct(long,long,*(long))))
[	O
num_threads	long
]	O
=	O
(	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
)	O
temp	*(struct(long,long,*(long)))
;	O
num_threads	long
++	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_thread_unregister	()->(long)
(	O
void	O
)	O
{	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
aux	*(long)
;	O
ETHREAD	long
current	long
;	O
ESint32	long
i	long
;	O
current	long
=	O
edma_thread_self	()->(long)
(	O
)	O
;	O
edma_log	(*(char))->(long)
(	O
"[edma_thread_unregister] Unregistering thread %p"	*(char)
,	O
current	long
)	O
;	O
if	O
(	O
(	O
aux	*(long)
=	O
edma_tsd_get_data	(int)->(*(void))
(	O
thread_stack_key	int
)	O
)	O
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_threads	long
;	O
i	long
++	O
)	O
if	O
(	O
thread_list	*(*(struct(long,long,*(long))))
[	O
i	long
]	O
->	O
tid	long
==	O
current	long
)	O
break	O
;	O
edma_log	(*(char))->(long)
(	O
"======> Index %ld of %ld"	*(char)
,	O
i	long
,	O
num_threads	long
)	O
;	O
if	O
(	O
i	long
!=	O
num_threads	long
)	O
{	O
edma_log	(*(char))->(long)
(	O
"[edma_thread_unregister] Thread %p found at index %d"	*(char)
,	O
current	long
,	O
i	long
)	O
;	O
thread_list	*(*(struct(long,long,*(long))))
[	O
i	long
]	O
=	O
NULL	O
;	O
if	O
(	O
i	long
!=	O
num_threads	long
-	O
1	int
)	O
memcpy	(*(void),*(void),int)->(*(void))
(	O
thread_list	*(*(struct(long,long,*(long))))
+	O
i	long
,	O
(	O
thread_list	*(*(struct(long,long,*(long))))
+	O
i	long
+	O
1	int
)	O
,	O
sizeof	O
(	O
ETHREAD_DATA	struct(long,long,*(long))
*	O
)	O
*	O
(	O
num_threads	long
-	O
i	long
)	O
)	O
;	O
num_threads	long
--	O
;	O
}	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
aux	*(long)
->	O
current_stack_execution	*(long)
,	O
aux	*(long)
->	O
current_stack_execution	*(long)
)	O
;	O
edma_pfree	(long,*(void))->(void)
(	O
(	O
HMEM	long
)	O
aux	*(long)
,	O
aux	*(long)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
ESint32	long
EDMAPROC	O
edma_thread_list	()->(long)
(	O
void	O
)	O
{	O
ESint32	long
i	long
;	O
edma_printf	(*(char))->(long)
(	O
"[edma_thread_list] GNU/EDMA Global Thread List:"	*(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
num_threads	long
;	O
i	long
++	O
)	O
edma_printf	(*(char))->(long)
(	O
"[edma_thread_list] Index %d: Thread 0x%p Thread Stack: %d"	*(char)
,	O
i	long
,	O
thread_list	*(*(struct(long,long,*(long))))
[	O
i	long
]	O
->	O
tid	long
,	O
thread_list	*(*(struct(long,long,*(long))))
[	O
i	long
]	O
->	O
top	long
)	O
;	O
return	O
0	int
;	O
}	O
