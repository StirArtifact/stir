static	O
struct	O
dico_option	struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int)))
*	O
find_opt	(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))),*(char),*(*(char)))->(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))))
(	O
struct	O
dico_option	struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int)))
*	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
,	O
const	O
char	O
*	O
str	*(struct)
,	O
const	O
char	O
*	O
*	O
value	*(char)
)	O
{	O
size_t	long
len	int
=	O
strlen	(*(char))->(long)
(	O
str	*(struct)
)	O
;	O
int	O
isbool	int
;	O
if	O
(	O
len	int
>	O
2	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
str	*(struct)
,	O
"no"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
{	O
*	O
value	*(char)
=	O
NULL	O
;	O
str	*(struct)
+=	O
2	int
;	O
isbool	int
=	O
1	int
;	O
}	O
else	O
{	O
isbool	int
=	O
0	int
;	O
*	O
value	*(char)
=	O
str	*(struct)
;	O
}	O
for	O
(	O
;	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
name	*(char)
;	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
++	O
)	O
{	O
if	O
(	O
len	int
>=	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
len	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
name	*(char)
,	O
str	*(struct)
,	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
len	int
)	O
==	O
0	int
&&	O
(	O
!	O
isbool	int
||	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
type	enum(int,int,int)
==	O
dico_opt_bool	int
)	O
)	O
{	O
int	O
eq	int
=	O
str	*(struct)
[	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
len	int
]	O
==	O
'='	O
;	O
switch	O
(	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
type	enum(int,int,int)
)	O
{	O
case	O
dico_opt_long	int
:	O
case	O
dico_opt_string	int
:	O
case	O
dico_opt_const_string	int
:	O
case	O
dico_opt_enum	int
:	O
if	O
(	O
!	O
eq	int
)	O
continue	O
;	O
*	O
value	*(char)
=	O
str	*(struct)
+	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
len	int
+	O
1	int
;	O
break	O
;	O
case	O
dico_opt_null	int
:	O
if	O
(	O
eq	int
)	O
*	O
value	*(char)
=	O
str	*(struct)
+	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
->	O
len	int
+	O
1	int
;	O
else	O
*	O
value	*(char)
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
eq	int
)	O
continue	O
;	O
break	O
;	O
}	O
return	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
;	O
}	O
}	O
return	O
NULL	O
;	O
}	O
int	O
find_value	(*(*(char)),*(char))->(int)
(	O
const	O
char	O
*	O
*	O
enumstr	*(*(char))
,	O
const	O
char	O
*	O
value	*(char)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
enumstr	*(*(char))
;	O
enumstr	*(*(char))
++	O
,	O
i	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
*	O
enumstr	*(*(char))
,	O
value	*(char)
)	O
==	O
0	int
)	O
return	O
i	int
;	O
return	O
-	O
1	int
;	O
}	O
int	O
dico_parseopt	(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))),int,*(*(char)),int,*(int))->(int)
(	O
struct	O
dico_option	struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int)))
*	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
,	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
int	O
flags	int
,	O
int	O
*	O
pindex	*(int)
)	O
{	O
int	O
i	int
;	O
long	O
n	long
;	O
char	O
*	O
s	*(char)
;	O
int	O
rc	int
=	O
0	int
;	O
const	O
char	O
*	O
modname	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
_dico_libi18n_init	()->(void)
(	O
)	O
;	O
for	O
(	O
i	int
=	O
(	O
flags	int
&	O
DICO_PARSEOPT_PARSE_ARGV0	int
)	O
?	O
0	int
:	O
1	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
const	O
char	O
*	O
value	*(char)
;	O
struct	O
dico_option	struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int)))
*	O
p	*(char)
=	O
find_opt	(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))),*(char),*(*(char)))->(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))))
(	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
,	O
argv	*(*(char))
[	O
i	int
]	O
,	O
&	O
value	*(char)
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
if	O
(	O
pindex	*(int)
)	O
{	O
if	O
(	O
flags	int
&	O
DICO_PARSEOPT_PERMUTE	int
)	O
{	O
int	O
j	int
;	O
for	O
(	O
j	int
=	O
i	int
+	O
1	int
;	O
j	int
<	O
argc	int
;	O
j	int
++	O
)	O
if	O
(	O
(	O
p	*(char)
=	O
find_opt	(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))),*(char),*(*(char)))->(*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*`)),*((*`,*`)->(int)))))
(	O
opt	*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*(*(char))),*((*(struct`),*(char))->(int))))
,	O
argv	*(*(char))
[	O
j	int
]	O
,	O
&	O
value	*(char)
)	O
)	O
)	O
break	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
char	O
*	O
tmp	*(char)
=	O
argv	*(*(char))
[	O
j	int
]	O
;	O
argv	*(*(char))
[	O
j	int
]	O
=	O
argv	*(*(char))
[	O
i	int
]	O
;	O
argv	*(*(char))
[	O
i	int
]	O
=	O
tmp	*(char)
;	O
}	O
else	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
else	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s: %s: unknown option"	*(char)
)	O
,	O
modname	*(char)
,	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
rc	int
=	O
1	int
;	O
continue	O
;	O
}	O
}	O
switch	O
(	O
p	*(char)
->	O
type	enum(int,int,int)
)	O
{	O
case	O
dico_opt_long	int
:	O
n	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
value	*(char)
,	O
&	O
s	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
s	*(char)
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s: %s: %s is not a valid number"	*(char)
)	O
,	O
modname	*(char)
,	O
p	*(char)
->	O
name	*(char)
,	O
value	*(char)
)	O
;	O
rc	int
=	O
1	int
;	O
continue	O
;	O
}	O
*	O
(	O
long	O
*	O
)	O
p	*(char)
->	O
data	*(void)
=	O
n	long
;	O
break	O
;	O
case	O
dico_opt_const	int
:	O
*	O
(	O
long	O
*	O
)	O
p	*(char)
->	O
data	*(void)
=	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
value	*(char)
;	O
break	O
;	O
case	O
dico_opt_const_string	int
:	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
p	*(char)
->	O
data	*(void)
=	O
value	*(char)
;	O
break	O
;	O
case	O
dico_opt_string	int
:	O
*	O
(	O
const	O
char	O
*	O
*	O
)	O
p	*(char)
->	O
data	*(void)
=	O
strdup	(*(char))->(*(char))
(	O
value	*(char)
)	O
;	O
break	O
;	O
case	O
dico_opt_bool	int
:	O
if	O
(	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
value	*(char)
)	O
{	O
if	O
(	O
value	*(char)
)	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
->	O
data	*(void)
|=	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
value	*(char)
;	O
else	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
->	O
data	*(void)
&=	O
~	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
value	*(char)
;	O
}	O
else	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
->	O
data	*(void)
=	O
value	*(char)
!=	O
NULL	O
;	O
break	O
;	O
case	O
dico_opt_bitmask	int
:	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
->	O
data	*(void)
|=	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
value	*(char)
;	O
break	O
;	O
case	O
dico_opt_bitmask_rev	int
:	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
->	O
data	*(void)
&=	O
~	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
value	*(char)
;	O
break	O
;	O
case	O
dico_opt_enum	int
:	O
n	long
=	O
find_value	(*(*(char)),*(char))->(int)
(	O
p	*(char)
->	O
v	union(long,*(*(char)))
.	O
enumstr	*(*(char))
,	O
value	*(char)
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
dico_log	(int,int,*(char))->(void)
(	O
L_ERR	int
,	O
0	int
,	O
_	O
(	O
"%s: %s: invalid value %s"	*(char)
)	O
,	O
modname	*(char)
,	O
p	*(char)
->	O
name	*(char)
,	O
value	*(char)
)	O
;	O
rc	int
=	O
1	int
;	O
continue	O
;	O
}	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
->	O
data	*(void)
=	O
n	long
;	O
break	O
;	O
case	O
dico_opt_null	int
:	O
break	O
;	O
}	O
if	O
(	O
p	*(char)
->	O
func	*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int))
&&	O
p	*(char)
->	O
func	*((*(struct(*(char),long,enum(int,int,int,int,int,int,int,int,int),*(void),union(long,*`),*((*`,*`)->(int)))),*(char))->(int))
(	O
p	*(char)
,	O
value	*(char)
)	O
)	O
rc	int
=	O
1	int
;	O
}	O
if	O
(	O
pindex	*(int)
)	O
*	O
pindex	*(int)
=	O
i	int
;	O
return	O
rc	int
;	O
}	O
