typedef	O
struct	O
{	O
char	O
*	O
me	*(char)
;	O
char	O
*	O
device	*(char)
;	O
const	O
char	O
*	O
host	*(char)
;	O
int	O
port	int
;	O
char	O
*	O
forward_host	*(char)
;	O
int	O
forward_port	int
;	O
size_t	long
content_length	long
;	O
char	O
*	O
pid_filename	*(char)
;	O
int	O
use_std	int
;	O
int	O
use_daemon	int
;	O
int	O
strict_content_length	int
;	O
int	O
keep_alive	int
;	O
int	O
max_connection_age	int
;	O
}	O
Arguments	struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int)
;	O
int	O
debug_level	int
=	O
0	int
;	O
FILE	struct
*	O
debug_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
static	O
void	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
FILE	struct
*	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
me	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
f	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Usage: %s [OPTION]... [PORT]\n"	*(char)
"Listen for incoming httptunnel connections at PORT (default port is %d).\n"	*(char)
"When a connection is made, I/O is redirected to the destination specified\n"	*(char)
"by the --device, --forward-port or --stdin-stdout switch.\n"	*(char)
"\n"	*(char)
"  -c, --content-length BYTES     use HTTP PUT requests of BYTES size\n"	*(char)
"                                 (k, M, and G postfixes recognized)\n"	*(char)
"  -d, --device DEVICE            use DEVICE for input and output\n"	*(char)
"  -F, --forward-port HOST:PORT   connect to PORT at HOST and use it for \n"	*(char)
"                                 input and output\n"	*(char)
"  -h, --help                     display this help and exit\n"	*(char)
"  -k, --keep-alive SECONDS       send keepalive bytes every SECONDS seconds\n"	*(char)
"                                 (default is %d)\n"	*(char)
"  -M, --max-connection-age SEC   maximum time a connection will stay\n"	*(char)
"                                 open is SEC seconds (default is %d)\n"	*(char)
"  -s, --stdin-stdout             use stdin/stdout for communication\n"	*(char)
"                                 (implies --no-daemon)\n"	*(char)
"  -S, --strict-content-length    always write Content-Length bytes in requests\n"	*(char)
"  -V, --version                  output version information and exit\n"	*(char)
"  -w, --no-daemon                don't fork into the background\n"	*(char)
"  -p, --pid-file LOCATION        write a PID file to LOCATION\n"	*(char)
"\n"	*(char)
"Report bugs to %s.\n"	*(char)
,	O
me	*(char)
,	O
DEFAULT_HOST_PORT	int
,	O
DEFAULT_KEEP_ALIVE	int
,	O
DEFAULT_MAX_CONNECTION_AGE	int
,	O
BUG_REPORT_EMAIL	*(char)
)	O
;	O
}	O
static	O
void	O
parse_arguments	(int,*(*(char)),*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int)))->(void)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
Arguments	struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int)
*	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
)	O
{	O
int	O
c	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
host	*(char)
=	O
NULL	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
port	int
=	O
DEFAULT_HOST_PORT	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
device	*(char)
=	O
NULL	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_host	*(char)
=	O
NULL	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
=	O
-	O
1	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
content_length	long
=	O
DEFAULT_CONTENT_LENGTH	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
pid_filename	*(char)
=	O
NULL	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_std	int
=	O
FALSE	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_daemon	int
=	O
TRUE	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
strict_content_length	int
=	O
FALSE	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
keep_alive	int
=	O
DEFAULT_KEEP_ALIVE	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
max_connection_age	int
=	O
DEFAULT_CONNECTION_MAX_TIME	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
int	O
option_index	int
=	O
0	int
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'h'	O
}	O
,	O
{	O
"stdin-stdout"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"strict-content-length"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'S'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'V'	O
}	O
,	O
{	O
"no-daemon"	*(char)
,	O
no_argument	int
,	O
0	int
,	O
'w'	O
}	O
,	O
{	O
"device"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"pid-file"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'p'	O
}	O
,	O
{	O
"keep-alive"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'k'	O
}	O
,	O
{	O
"forward-port"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'F'	O
}	O
,	O
{	O
"content-length"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'c'	O
}	O
,	O
{	O
"max-connection-age"	*(char)
,	O
required_argument	int
,	O
0	int
,	O
'M'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
const	O
char	O
*	O
short_options	*(char)
=	O
"c:d:F:hk:M:p:sSVw"	*(char)
;	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
short_options	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
&	O
option_index	int
)	O
;	O
if	O
(	O
c	int
==	O
-	O
1	int
)	O
break	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
0	int
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"option %s"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
[	O
option_index	int
]	O
.	O
name	*(char)
)	O
;	O
if	O
(	O
optarg	*(char)
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" with arg %s"	*(char)
,	O
optarg	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
content_length	long
=	O
atoi_with_postfix	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'd'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
device	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'F'	O
:	O
name_and_port	(*(char),*(*(char)),*(int))->(void)
(	O
optarg	*(char)
,	O
&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_host	*(char)
,	O
&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
)	O
;	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: you must specify a port number.\n"	*(char)
"%s: try '%s --help' for help.\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
case	O
'k'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
keep_alive	int
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'M'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
max_connection_age	int
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
's'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_std	int
=	O
TRUE	int
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_daemon	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
'S'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
strict_content_length	int
=	O
TRUE	int
;	O
break	O
;	O
case	O
'V'	O
:	O
printf	(*(char))->(int)
(	O
"hts (%s) %s\n"	*(char)
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
case	O
'p'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
pid_filename	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'w'	O
:	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_daemon	int
=	O
FALSE	int
;	O
break	O
;	O
case	O
'?'	O
:	O
break	O
;	O
default	O
:	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"?? getopt returned character code 0%o ??\n"	*(char)
,	O
c	int
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
-	O
1	int
==	O
optind	int
)	O
{	O
char	O
*	O
colon	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
':'	O
)	O
;	O
if	O
(	O
colon	*(char)
)	O
{	O
*	O
colon	*(char)
=	O
'\0'	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
host	*(char)
=	O
argv	*(*(char))
[	O
optind	int
]	O
;	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
port	int
=	O
atoi	(*(char))->(int)
(	O
colon	*(char)
+	O
1	int
)	O
;	O
}	O
else	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
port	int
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
}	O
else	O
if	O
(	O
argc	int
-	O
1	int
>	O
optind	int
)	O
{	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
device	*(char)
==	O
NULL	O
&&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
==	O
-	O
1	int
&&	O
!	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_std	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: one of --device, --forward-port or --stdin-stdout must be used.\n"	*(char)
"%s: try '%s -help' for help.\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
device	*(char)
!=	O
NULL	O
&&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
!=	O
-	O
1	int
)	O
||	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
device	*(char)
!=	O
NULL	O
&&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_std	int
)	O
||	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
!=	O
-	O
1	int
&&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
use_std	int
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: only one of --device, --forward-port or --stdin-stdout can be used.\n"	*(char)
"%s: try '%s --help' for help.\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
debug_level	int
==	O
0	int
&&	O
debug_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s: --logfile can't be used without debugging\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
port	int
==	O
-	O
1	int
||	O
(	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_host	*(char)
==	O
NULL	O
)	O
!=	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
forward_port	int
==	O
-	O
1	int
)	O
)	O
)	O
{	O
usage	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
->	O
me	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
closed	*(int)
;	O
int	O
fd	int
=	O
-	O
1	int
;	O
Arguments	struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int)
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
;	O
Tunnel	struct
*	O
tunnel	*(struct)
;	O
FILE	struct
*	O
pid_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
parse_arguments	(int,*(*(char)),*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int)))->(void)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
)	O
;	O
if	O
(	O
(	O
debug_level	int
==	O
0	int
||	O
debug_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
&&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
use_daemon	int
)	O
daemon	(int,int)->(int)
(	O
0	int
,	O
1	int
)	O
;	O
openlog	(*(char),int,int)->(void)
(	O
"hts"	*(char)
,	O
LOG_PID	int
,	O
LOG_DAEMON	O
)	O
;	O
log_notice	(*(char))->(void)
(	O
"hts (%s) %s started with arguments:"	*(char)
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  me = %s"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
me	*(char)
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  device = %s"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
device	*(char)
?	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
device	*(char)
:	O
"(null)"	*(char)
)	O
;	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
host	*(char)
)	O
log_notice	(*(char))->(void)
(	O
"  port = %s:%d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
host	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
port	int
)	O
;	O
else	O
log_notice	(*(char))->(void)
(	O
"  port = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
port	int
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  forward_port = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_port	int
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  forward_host = %s"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_host	*(char)
?	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_host	*(char)
:	O
"(null)"	*(char)
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  content_length = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
content_length	long
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  strict_content_length = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
strict_content_length	int
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  use_std = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
use_std	int
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  debug_level = %d"	*(char)
,	O
debug_level	int
)	O
;	O
log_notice	(*(char))->(void)
(	O
"  pid_filename = %s"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
pid_filename	*(char)
?	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
pid_filename	*(char)
:	O
"(null)"	*(char)
)	O
;	O
tunnel	*(struct)
=	O
tunnel_new_server	(*(char),int,long)->(*(struct))
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
host	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
port	int
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
content_length	long
)	O
;	O
if	O
(	O
tunnel	*(struct)
==	O
NULL	O
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't create tunnel"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
tunnel_setopt	(*(struct),*(char),*(void))->(int)
(	O
tunnel	*(struct)
,	O
"strict_content_length"	*(char)
,	O
&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
strict_content_length	int
)	O
==	O
-	O
1	int
)	O
log_debug	()->(void)
(	O
"tunnel_setopt strict_content_length error: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
tunnel_setopt	(*(struct),*(char),*(void))->(int)
(	O
tunnel	*(struct)
,	O
"keep_alive"	*(char)
,	O
&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
keep_alive	int
)	O
==	O
-	O
1	int
)	O
log_debug	()->(void)
(	O
"tunnel_setopt keep_alive error: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
tunnel_setopt	(*(struct),*(char),*(void))->(int)
(	O
tunnel	*(struct)
,	O
"max_connection_age"	*(char)
,	O
&	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
max_connection_age	int
)	O
==	O
-	O
1	int
)	O
log_debug	()->(void)
(	O
"tunnel_setopt max_connection_age error: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGPIPE	int
,	O
SIG_IGN	O
)	O
;	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
pid_filename	*(char)
!=	O
NULL	O
)	O
{	O
pid_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
pid_filename	*(char)
,	O
"w+"	*(char)
)	O
;	O
if	O
(	O
pid_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Couldn't open pid file %s: %s\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
pid_filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
pid_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d\n"	*(char)
,	O
(	O
int	O
)	O
getpid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pid_file	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Error closing pid file: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
time_t	long
last_tunnel_write	long
;	O
log_debug	()->(void)
(	O
"waiting for tunnel connection"	*(char)
)	O
;	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
device	*(char)
!=	O
NULL	O
)	O
{	O
fd	int
=	O
open_device	(*(char))->(int)
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
device	*(char)
)	O
;	O
log_debug	()->(void)
(	O
"open_device (\"%s\") = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
device	*(char)
,	O
fd	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't open %s: %s"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
device	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
fd	int
==	O
0	int
)	O
{	O
log_notice	(*(char))->(void)
(	O
"changing fd from %d to 3"	*(char)
,	O
fd	int
)	O
;	O
if	O
(	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
3	int
)	O
!=	O
3	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't dup2(%d,3): %s"	*(char)
,	O
fd	int
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
use_std	int
)	O
{	O
log_debug	()->(void)
(	O
"using stdin as fd"	*(char)
)	O
;	O
fd	int
=	O
0	int
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_SETFL	int
,	O
O_NONBLOCK	int
)	O
==	O
-	O
1	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't set stdin to non-blocking mode: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
tunnel_accept	(*(struct))->(int)
(	O
tunnel	*(struct)
)	O
==	O
-	O
1	int
)	O
{	O
log_notice	(*(char))->(void)
(	O
"couldn't accept connection: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_port	int
!=	O
-	O
1	int
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(int)
;	O
if	O
(	O
set_address	(*(struct(short,short,struct(int),array(char))),*(char),int)->(int)
(	O
&	O
addr	struct(int)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_host	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_port	int
)	O
==	O
-	O
1	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't forward port to %s:%d: %s\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_host	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_port	int
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
fd	int
=	O
do_connect	(*(struct(short,short,struct(int),array(char))))->(int)
(	O
&	O
addr	struct(int)
)	O
;	O
log_debug	()->(void)
(	O
"do_connect (\"%s:%d\") = %d"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_host	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_port	int
,	O
fd	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't connect to %s:%d: %s\n"	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_host	*(char)
,	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
forward_port	int
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
if	O
(	O
fd	int
==	O
0	int
)	O
{	O
log_notice	(*(char))->(void)
(	O
"changing fd from %d to 3"	*(char)
,	O
fd	int
)	O
;	O
if	O
(	O
dup2	(int,int)->(int)
(	O
fd	int
,	O
3	int
)	O
!=	O
3	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"couldn't dup2(%d,3): %s"	*(char)
,	O
fd	int
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
}	O
closed	*(int)
=	O
FALSE	int
;	O
time	()->(int)
(	O
&	O
last_tunnel_write	long
)	O
;	O
while	O
(	O
!	O
closed	*(int)
)	O
{	O
struct	O
pollfd	struct(int,short,short)
pollfd	struct(int,short,short)
[	O
2	int
]	O
;	O
int	O
timeout	int
;	O
time_t	long
t	long
;	O
int	O
n	long
;	O
pollfd	struct(int,short,short)
[	O
0	int
]	O
.	O
fd	int
=	O
fd	int
;	O
pollfd	struct(int,short,short)
[	O
0	int
]	O
.	O
events	short
=	O
POLLIN	int
;	O
pollfd	struct(int,short,short)
[	O
1	int
]	O
.	O
fd	int
=	O
tunnel_pollin_fd	(*(struct))->(int)
(	O
tunnel	*(struct)
)	O
;	O
pollfd	struct(int,short,short)
[	O
1	int
]	O
.	O
events	short
=	O
POLLIN	int
;	O
time	()->(int)
(	O
&	O
t	long
)	O
;	O
timeout	int
=	O
1000	int
*	O
(	O
arg	*(struct(*(char),*(char),*(char),int,*(char),int,long,*(char),int,int,int,int,int))
.	O
keep_alive	int
-	O
(	O
t	long
-	O
last_tunnel_write	long
)	O
)	O
;	O
if	O
(	O
timeout	int
<	O
0	int
)	O
timeout	int
=	O
0	int
;	O
log_annoying	()->(void)
(	O
"poll () ..."	*(char)
)	O
;	O
n	long
=	O
poll	(*(struct(int,short,short)),long,int)->(int)
(	O
pollfd	struct(int,short,short)
,	O
2	int
,	O
timeout	int
)	O
;	O
log_annoying	()->(void)
(	O
"... = %d"	*(char)
,	O
n	long
)	O
;	O
if	O
(	O
n	long
==	O
-	O
1	int
)	O
{	O
log_error	(*(char))->(void)
(	O
"poll error: %s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
log_exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
log_verbose	()->(void)
(	O
"poll() timed out"	*(char)
)	O
;	O
tunnel_padding	(*(struct),long)->(long)
(	O
tunnel	*(struct)
,	O
1	int
)	O
;	O
time	()->(int)
(	O
&	O
last_tunnel_write	long
)	O
;	O
continue	O
;	O
}	O
log_annoying	()->(void)
(	O
"revents[0] = %x, revents[1] = %x, POLLIN = %x"	*(char)
,	O
pollfd	struct(int,short,short)
[	O
0	int
]	O
.	O
revents	short
,	O
pollfd	struct(int,short,short)
[	O
1	int
]	O
.	O
revents	short
,	O
POLLIN	int
)	O
;	O
handle_input	(*(char),*(struct),int,int,*((*(struct),int,int)->(int)),*(int))->(void)
(	O
"device or port"	*(char)
,	O
tunnel	*(struct)
,	O
fd	int
,	O
pollfd	struct(int,short,short)
[	O
0	int
]	O
.	O
revents	short
,	O
handle_device_input	(*(struct),int,int)->(int)
,	O
&	O
closed	*(int)
)	O
;	O
handle_input	(*(char),*(struct),int,int,*((*(struct),int,int)->(int)),*(int))->(void)
(	O
"tunnel"	*(char)
,	O
tunnel	*(struct)
,	O
fd	int
,	O
pollfd	struct(int,short,short)
[	O
1	int
]	O
.	O
revents	short
,	O
handle_tunnel_input	(*(struct),int,int)->(int)
,	O
&	O
closed	*(int)
)	O
;	O
if	O
(	O
pollfd	struct(int,short,short)
[	O
0	int
]	O
.	O
revents	short
&	O
POLLIN	int
)	O
time	()->(int)
(	O
&	O
last_tunnel_write	long
)	O
;	O
}	O
log_debug	()->(void)
(	O
"closing tunnel"	*(char)
)	O
;	O
if	O
(	O
fd	int
!=	O
0	int
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
}	O
tunnel_close	(*(struct))->(int)
(	O
tunnel	*(struct)
)	O
;	O
log_notice	(*(char))->(void)
(	O
"disconnected from FIXME:hostname:port"	*(char)
)	O
;	O
}	O
log_debug	()->(void)
(	O
"destroying tunnel"	*(char)
)	O
;	O
tunnel_destroy	(*(struct))->(void)
(	O
tunnel	*(struct)
)	O
;	O
log_exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
