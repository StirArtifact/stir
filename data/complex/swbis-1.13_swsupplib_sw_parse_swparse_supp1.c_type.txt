int	O
swlib_is_ansi_escape	(char)->(int)
(	O
char	O
c	int
)	O
;	O
static	O
char	O
*	O
de_quote_it	(*(char))->(*(char))
(	O
char	O
*	O
src	*(char)
)	O
;	O
int	O
swparse_expand_n	(*(*(void)),*(int),*(char))->(int)
(	O
void	O
*	O
*	O
pa	*(*(void))
,	O
int	O
*	O
newlen	*(int)
,	O
char	O
*	O
src	*(char)
)	O
{	O
int	O
n	long
;	O
int	O
i	int
=	O
0	int
,	O
j	int
=	O
0	int
;	O
char	O
*	O
lp	*(char)
;	O
STROB	struct(*(char),*(char),int,int,int,char,int)
*	O
store	*(struct(*(char),*(char),int,int,int,char,int))
;	O
store	*(struct(*(char),*(char),int,int,int,char,int))
=	O
strob_open	(long)->(*(struct(*(char),*(char),int,int,int,char,int)))
(	O
2	int
)	O
;	O
strob_strcpy	(*(struct(*(char),*(char),int,int,int,char,int)),*(char))->(*(char))
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
""	*(char)
)	O
;	O
src	*(char)
=	O
de_quote_it	(*(char))->(*(char))
(	O
src	*(char)
)	O
;	O
lp	*(char)
=	O
src	*(char)
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
lp	*(char)
)	O
;	O
strob_set_memlength	(*(struct(*(char),*(char),int,int,int,char,int)),int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
n	long
+	O
1	int
)	O
;	O
while	O
(	O
i	int
<	O
n	long
)	O
{	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
==	O
'\n'	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\\'	O
)	O
;	O
j	int
++	O
;	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'n'	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
+	O
1	int
)	O
==	O
'\\'	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
)	O
;	O
i	int
++	O
;	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
+	O
1	int
)	O
==	O
'n'	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
)	O
;	O
i	int
++	O
;	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
-	O
1	int
)	O
)	O
;	O
j	int
++	O
;	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
+	O
1	int
)	O
==	O
'#'	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'#'	O
)	O
;	O
i	int
++	O
;	O
j	int
--	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
+	O
1	int
)	O
==	O
'\"'	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\"'	O
)	O
;	O
i	int
++	O
;	O
j	int
--	O
;	O
}	O
else	O
if	O
(	O
*	O
(	O
lp	*(char)
+	O
i	int
+	O
1	int
)	O
==	O
'\0'	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\\'	O
)	O
;	O
j	int
++	O
;	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\\'	O
)	O
;	O
}	O
else	O
if	O
(	O
!	O
swlib_is_ansi_escape	(char)->(int)
(	O
*	O
(	O
lp	*(char)
+	O
i	int
+	O
1	int
)	O
)	O
)	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\\'	O
)	O
;	O
j	int
++	O
;	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\\'	O
)	O
;	O
}	O
else	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
)	O
;	O
}	O
}	O
else	O
{	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
*	O
(	O
lp	*(char)
+	O
i	int
)	O
)	O
;	O
}	O
i	int
++	O
;	O
}	O
strob_chr_index	(*(struct(*(char),*(char),int,int,int,char,int)),int,int)->(void)
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
,	O
i	int
+	O
j	int
,	O
'\0'	O
)	O
;	O
*	O
pa	*(*(void))
=	O
strob_release	(*(struct(*(char),*(char),int,int,int,char,int)))->(*(char))
(	O
store	*(struct(*(char),*(char),int,int,int,char,int))
)	O
;	O
*	O
newlen	*(int)
=	O
i	int
+	O
j	int
;	O
return	O
0	int
;	O
}	O
static	O
char	O
*	O
de_quote_it	(*(char))->(*(char))
(	O
char	O
*	O
src	*(char)
)	O
{	O
if	O
(	O
*	O
src	*(char)
!=	O
'\"'	O
)	O
return	O
src	*(char)
;	O
src	*(char)
++	O
;	O
if	O
(	O
!	O
strlen	(*(char))->(long)
(	O
src	*(char)
)	O
)	O
{	O
return	O
--	O
src	*(char)
;	O
}	O
*	O
(	O
src	*(char)
+	O
strlen	(*(char))->(long)
(	O
src	*(char)
)	O
-	O
1	int
)	O
=	O
'\0'	O
;	O
return	O
src	*(char)
;	O
}	O
