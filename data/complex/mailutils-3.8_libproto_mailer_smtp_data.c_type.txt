int	O
_mu_smtp_data_begin	(*(struct(int,*(struct(int,enum(int,int,int),long,*`,long,long,int,long,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
)	O
{	O
int	O
status	int
;	O
status	int
=	O
mu_smtp_write	(*(struct),*(char))->(int)
(	O
smtp	*(struct)
,	O
"DATA\r\n"	*(char)
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
status	int
=	O
mu_smtp_response	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
MU_SMTP_CHECK_ERROR	O
(	O
smtp	*(struct)
,	O
status	int
)	O
;	O
if	O
(	O
smtp	*(struct)
->	O
replcode	array(char)
[	O
0	int
]	O
!=	O
'3'	O
)	O
return	O
MU_ERR_REPLY	O
;	O
if	O
(	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_QRY	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
)	O
_mu_smtp_xscript_level	(*(struct(int,*(struct(int,enum(int,int,int),long,*`,long,long,int,long,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))),int)->(int)
(	O
smtp	*(struct)
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
smtp	*(struct)
->	O
savebuf	struct(int,enum(int,int,int),long)
.	O
type	int
=	O
MU_TRANSPORT_OUTPUT	int
;	O
if	O
(	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
smtp	*(struct)
->	O
carrier	*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char)))))
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_GET	int
,	O
&	O
smtp	*(struct)
->	O
savebuf	struct(int,enum(int,int,int),long)
)	O
==	O
0	int
)	O
{	O
struct	O
mu_buffer_query	struct(int,enum(int,int,int),long)
newbuf	struct(int,enum(int,int,int),long)
;	O
newbuf	struct(int,enum(int,int,int),long)
.	O
type	int
=	O
MU_TRANSPORT_OUTPUT	int
;	O
newbuf	struct(int,enum(int,int,int),long)
.	O
buftype	enum(int,int,int)
=	O
mu_buffer_full	int
;	O
newbuf	struct(int,enum(int,int,int),long)
.	O
bufsize	long
=	O
64	int
*	O
1024	int
;	O
if	O
(	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
smtp	*(struct)
->	O
carrier	*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char)))))
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_SET	int
,	O
&	O
newbuf	struct(int,enum(int,int,int),long)
)	O
==	O
0	int
)	O
MU_SMTP_FSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_SAVEBUF	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
_mu_smtp_data_end	(*(struct(int,*(struct(int,enum(int,int,int),long,*`,long,long,int,long,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
MU_SMTP_FISSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_SAVEBUF	int
)	O
)	O
{	O
status	int
=	O
mu_stream_ioctl	(*(struct),int,int,*(void))->(int)
(	O
smtp	*(struct)
->	O
carrier	*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char)))))
,	O
MU_IOCTL_TRANSPORT_BUFFER	int
,	O
MU_IOCTL_OP_SET	int
,	O
&	O
smtp	*(struct)
->	O
savebuf	struct(int,enum(int,int,int),long)
)	O
;	O
if	O
(	O
status	int
)	O
mu_diag_output	(int,*(char))->(void)
(	O
MU_DIAG_NOTICE	O
,	O
"failed to restore buffer state on SMTP carrier: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
}	O
_mu_smtp_xscript_level	(*(struct(int,*(struct(int,enum(int,int,int),long,*`,long,long,int,long,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))),int)->(int)
(	O
smtp	*(struct)
,	O
MU_XSCRIPT_NORMAL	int
)	O
;	O
smtp	*(struct)
->	O
state	*(int)
=	O
MU_SMTP_DOT	int
;	O
return	O
status	int
;	O
}	O
static	O
void	O
_smtp_event_cb	(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,long,*(void))->(void)
(	O
struct	O
_mu_stream	struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,int,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(char),long,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(void)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))))->(void)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),long,*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(long))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,int,*(void))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),*(int),*(struct(long,long)))->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),long)->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int)->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,long,*(void))->(void)),int,*(void),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),enum(int,int,int),long)->(int)),*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int)->(*(char))))
*	O
str	*(char)
,	O
int	O
code	int
,	O
unsigned	O
long	O
lval	long
,	O
void	O
*	O
pval	*(void)
)	O
{	O
mu_smtp_t	*(struct)
smtp	*(struct)
=	O
str	*(char)
->	O
event_cb_data	*(void)
;	O
_mu_smtp_data_end	(*(struct(int,*(struct(int,enum(int,int,int),long,*`,long,long,int,long,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
smtp	*(struct)
)	O
;	O
}	O
int	O
mu_smtp_data	(*(struct),*(*(struct)))->(int)
(	O
mu_smtp_t	*(struct)
smtp	*(struct)
,	O
mu_stream_t	*(struct)
*	O
pstream	*(*(struct))
)	O
{	O
int	O
status	int
;	O
mu_stream_t	*(struct)
input	*(char)
;	O
if	O
(	O
!	O
smtp	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
MU_SMTP_FISSET	O
(	O
smtp	*(struct)
,	O
_MU_SMTP_ERR	int
)	O
)	O
return	O
MU_ERR_FAILURE	O
;	O
if	O
(	O
smtp	*(struct)
->	O
state	*(int)
!=	O
MU_SMTP_MORE	int
)	O
return	O
MU_ERR_SEQ	O
;	O
status	int
=	O
_mu_smtp_data_begin	(*(struct(int,*(struct(int,enum(int,int,int),long,*`,long,long,int,long,int,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,*`,*`,*`)),enum(int,int,int,int,int,int,int,int),*(struct),*(struct),array(*(char)),*(struct),*(struct),*(struct),array(char),*(char),*(char),long,*(char),long,*(struct),struct(int,enum(int,int,int),long))))->(int)
(	O
smtp	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
mu_filter_create	(*(*(struct)),*(struct),*(char),int,int)->(int)
(	O
&	O
input	*(char)
,	O
smtp	*(struct)
->	O
carrier	*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`),*(char),long,int,*(long))->(int)),*((*(struct`),*(char),long,*(long))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(int)),*((*(struct`))->(void)),*((*(struct`))->(void)),*((*(struct`),long,*(long))->(int)),*((*(struct`),*(long))->(int)),*((*(struct`),int,int,*(void))->(int)),*((*(struct`),*(int),*(struct`))->(int)),*((*(struct`),long)->(int)),*((*(struct`),int)->(int)),*((*(struct`),int,long,*(void))->(void)),int,*(void),*((*(struct`),enum(int,int,int),long)->(int)),*((*(struct`),int)->(*(char)))))
,	O
"CRLFDOT"	*(char)
,	O
MU_FILTER_ENCODE	int
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
input	*(char)
->	O
event_cb	*((*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,long,*(void))->(void))
=	O
_smtp_event_cb	(*(struct(int,enum(int,int,int),long,*(char),long,long,int,long,int,*(long),int,*((*`,*`,long,*`)->(int)),*((*`,*`,long,int,*`)->(int)),*((*`,*`,long,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(void)),*((*`)->(void)),*((*`,long,*`)->(int)),*((*`,*`)->(int)),*((*`,int,int,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,long)->(int)),*((*`,int)->(int)),*((*`,int,long,*`)->(void)),int,*(void),*((*`,enum(int,int,int),long)->(int)),*((*`,int)->(*`)))),int,long,*(void))->(void)
;	O
input	*(char)
->	O
event_cb_data	*(void)
=	O
smtp	*(struct)
;	O
input	*(char)
->	O
event_mask	int
=	O
_MU_STR_EVMASK	O
(	O
_MU_STR_EVENT_CLOSE	int
)	O
;	O
*	O
pstream	*(*(struct))
=	O
input	*(char)
;	O
return	O
0	int
;	O
}	O
