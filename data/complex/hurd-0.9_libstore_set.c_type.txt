error_t	int
store_set_runs	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(struct(long,long)),long)->(int)
(	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
const	O
struct	O
store_run	struct(long,long)
*	O
runs	*(struct(long,long))
,	O
size_t	long
num_runs	long
)	O
{	O
unsigned	O
size	long
=	O
num_runs	long
*	O
sizeof	O
(	O
struct	O
store_run	struct(long,long)
)	O
;	O
struct	O
store_run	struct(long,long)
*	O
copy	*(struct(long,long))
=	O
malloc	(long)->(*(void))
(	O
size	long
)	O
;	O
if	O
(	O
!	O
copy	*(struct(long,long))
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
)	O
free	(*(void))->(void)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
copy	*(struct(long,long))
,	O
runs	*(struct(long,long))
,	O
size	long
)	O
;	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
runs	*(struct(long,long))
=	O
copy	*(struct(long,long))
;	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
num_runs	long
=	O
num_runs	long
;	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
block_size	long
>	O
0	int
)	O
_store_derive	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))))->(void)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
;	O
return	O
0	int
;	O
}	O
error_t	int
store_set_name	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))),*(char))->(int)
(	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
char	O
*	O
copy	*(struct(long,long))
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
copy	*(struct(long,long))
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
)	O
;	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
name	*(char)
=	O
copy	*(struct(long,long))
;	O
return	O
0	int
;	O
}	O
void	O
store_close_source	(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct(enum,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(*(struct`)),long,*(void))))->(void)
(	O
struct	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
*	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
)	O
{	O
if	O
(	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
source	int
!=	O
MACH_PORT_NULL	O
)	O
{	O
mach_port_deallocate	()->(int)
(	O
mach_task_self	()->(int)
(	O
)	O
,	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
source	int
)	O
;	O
store	struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct(int,*(struct(long,long)),long,long,long,long,*(char),int,long,long,long,int,int,int,*(void),long,*(struct),*(*(struct`)),long,*(void)))),long,*(void))
->	O
source	int
=	O
MACH_PORT_NULL	O
;	O
}	O
}	O
