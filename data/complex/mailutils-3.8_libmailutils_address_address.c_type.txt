int	O
mu_address_create_null	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mu_address_t	*(struct)
*	O
pa	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
mu_address_t	*(struct)
a	*(struct(int,int,array(char),array(char)))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
)	O
;	O
if	O
(	O
!	O
a	*(struct(int,int,array(char),array(char)))
)	O
return	O
ENOMEM	int
;	O
*	O
pa	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
a	*(struct(int,int,array(char),array(char)))
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_create_hint	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
mu_address_t	*(struct)
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
const	O
char	O
*	O
s	*(char)
,	O
mu_address_t	*(struct)
hint	*(struct)
,	O
int	O
hflags	int
)	O
{	O
int	O
status	int
;	O
if	O
(	O
!	O
a	*(struct(int,int,array(char),array(char)))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
EINVAL	int
;	O
*	O
a	*(struct(int,int,array(char),array(char)))
=	O
NULL	O
;	O
status	int
=	O
mu_parse822_address_list	(*(*(struct)),*(char),*(struct),int)->(int)
(	O
a	*(struct(int,int,array(char),array(char)))
,	O
s	*(char)
,	O
hint	*(struct)
,	O
hflags	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
if	O
(	O
!	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
return	O
MU_ERR_EMPTY_ADDRESS	O
;	O
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
->	O
printable	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
->	O
printable	*(char)
)	O
{	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
a	*(struct(int,int,array(char),array(char)))
)	O
;	O
return	O
ENOMEM	int
;	O
}	O
}	O
return	O
status	int
;	O
}	O
int	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
mu_address_t	*(struct)
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
const	O
char	O
*	O
s	*(char)
)	O
{	O
struct	O
mu_address	struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`))))))
hint	*(struct)
;	O
const	O
char	O
*	O
d	*(char)
;	O
mu_get_user_email_domain	(*(*(char)))->(int)
(	O
&	O
d	*(char)
)	O
;	O
hint	*(struct)
.	O
domain	*(char)
=	O
(	O
char	O
*	O
)	O
d	*(char)
;	O
return	O
mu_address_create_hint	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
a	*(struct(int,int,array(char),array(char)))
,	O
s	*(char)
,	O
&	O
hint	*(struct)
,	O
MU_ADDR_HINT_DOMAIN	int
)	O
;	O
}	O
int	O
mu_address_createv	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),array(*(char)),long)->(int)
(	O
mu_address_t	*(struct)
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
const	O
char	O
*	O
sv	array(*(char))
[	O
]	O
,	O
size_t	long
len	int
)	O
{	O
int	O
status	int
=	O
0	int
;	O
size_t	long
buflen	long
=	O
0	int
;	O
char	O
*	O
buf	*(char)
=	O
0	int
;	O
size_t	long
i	long
;	O
if	O
(	O
!	O
a	*(struct(int,int,array(char),array(char)))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
sv	array(*(char))
)	O
return	O
EINVAL	int
;	O
if	O
(	O
len	int
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
const	O
char	O
*	O
*	O
vp	*(*(char))
=	O
sv	array(*(char))
;	O
len	int
=	O
0	int
;	O
for	O
(	O
len	int
=	O
0	int
;	O
*	O
vp	*(*(char))
;	O
vp	*(*(char))
++	O
,	O
len	int
++	O
)	O
;	O
}	O
if	O
(	O
len	int
==	O
0	int
)	O
return	O
EINVAL	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
sv	array(*(char))
[	O
i	long
]	O
)	O
buflen	long
+=	O
strlen	(*(char))->(long)
(	O
sv	array(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
buflen	long
+=	O
(	O
len	int
-	O
1	int
)	O
*	O
strlen	(*(char))->(long)
(	O
", "	*(char)
)	O
;	O
buflen	long
+=	O
1	int
;	O
buf	*(char)
=	O
malloc	(long)->(*(void))
(	O
buflen	long
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
return	O
ENOMEM	int
;	O
for	O
(	O
i	long
=	O
0	int
,	O
buf	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
i	long
<	O
len	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
0	int
)	O
strcat	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
", "	*(char)
)	O
;	O
if	O
(	O
sv	array(*(char))
[	O
i	long
]	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
sv	array(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
status	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
a	*(struct(int,int,array(char),array(char)))
,	O
buf	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
static	O
void	O
_address_free	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
mu_address_t	*(struct)
address	array(char)
)	O
{	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
printable	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
comments	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
personal	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
email	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
local_part	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
domain	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
->	O
route	*(*(char))
)	O
;	O
}	O
void	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
mu_address_t	*(struct)
*	O
paddress	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
if	O
(	O
paddress	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
&&	O
*	O
paddress	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
mu_address_t	*(struct)
address	array(char)
=	O
*	O
paddress	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
mu_address_t	*(struct)
current	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
for	O
(	O
;	O
address	array(char)
;	O
address	array(char)
=	O
current	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
current	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
address	array(char)
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
_address_free	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
address	array(char)
)	O
;	O
free	(*(void))->(void)
(	O
address	array(char)
)	O
;	O
}	O
*	O
paddress	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_address_concatenate	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mu_address_t	*(struct)
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
mu_address_t	*(struct)
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
if	O
(	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
||	O
!	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
||	O
!	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
return	O
EINVAL	int
;	O
while	O
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
assert	O
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
&&	O
!	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
;	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
if	O
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
)	O
;	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
=	O
NULL	O
;	O
}	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
)	O
;	O
to	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
=	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
mu_address_t	*(struct)
_address_get_nth	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long)->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
no	long
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
1	int
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
i	long
++	O
)	O
if	O
(	O
i	long
==	O
no	long
)	O
break	O
;	O
return	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
int	O
mu_address_get_nth	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
no	long
,	O
mu_address_t	*(struct)
*	O
pret	*(long)
)	O
{	O
mu_address_t	*(struct)
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
_address_get_nth	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long)->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
MU_ERR_NOENT	O
;	O
*	O
pret	*(long)
=	O
mu_address_dup	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
DECL_ACCESSORS	O
(	O
personal	*(char)
)	O
DECL_ACCESSORS	O
(	O
comments	*(char)
)	O
DECL_ACCESSORS_EI	O
(	O
local_part	*(*(char))
)	O
DECL_ACCESSORS_EI	O
(	O
domain	*(char)
)	O
DECL_ACCESSORS	O
(	O
route	*(*(char))
)	O
int	O
mu_address_set_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(char))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
no	long
,	O
const	O
char	O
*	O
buf	*(char)
)	O
{	O
char	O
*	O
s	*(char)
;	O
mu_address_t	*(struct)
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
_address_get_nth	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long)->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
buf	*(char)
)	O
{	O
s	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
buf	*(char)
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
errno	O
;	O
}	O
else	O
s	*(char)
=	O
(	O
char	O
*	O
)	O
buf	*(char)
;	O
free	(*(void))->(void)
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
=	O
s	*(char)
;	O
free	(*(void))->(void)
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
domain	*(char)
)	O
;	O
if	O
(	O
s	*(char)
)	O
{	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
,	O
'@'	O
)	O
;	O
if	O
(	O
p	*(char)
)	O
{	O
size_t	long
len	int
=	O
p	*(char)
-	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
len	int
+	O
1	int
)	O
;	O
if	O
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
,	O
p	*(char)
,	O
len	int
)	O
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
[	O
len	int
]	O
=	O
0	int
;	O
}	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
domain	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
p	*(char)
+	O
1	int
)	O
;	O
}	O
}	O
else	O
{	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
=	O
NULL	O
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
domain	*(char)
=	O
NULL	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_validate_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
!	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
{	O
if	O
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
)	O
{	O
const	O
char	O
*	O
domain	*(char)
;	O
if	O
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
domain	*(char)
)	O
domain	*(char)
=	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
domain	*(char)
;	O
else	O
mu_get_user_email_domain	(*(*(char)))->(int)
(	O
&	O
domain	*(char)
)	O
;	O
if	O
(	O
domain	*(char)
)	O
{	O
char	O
*	O
p	*(char)
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
)	O
+	O
strlen	(*(char))->(long)
(	O
domain	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
!	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
return	O
ENOMEM	int
;	O
p	*(char)
=	O
mu_stpcpy	(*(char),*(char))->(*(char))
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
,	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
)	O
;	O
*	O
p	*(char)
++	O
=	O
'@'	O
;	O
mu_stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
(	O
char	O
*	O
)	O
domain	*(char)
)	O
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_address_sget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
no	long
,	O
char	O
const	O
*	O
*	O
sptr	*(*(char))
)	O
{	O
mu_address_t	*(struct)
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
_address_get_nth	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long)->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
MU_ERR_NOENT	O
;	O
mu_validate_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
*	O
sptr	*(*(char))
=	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
;	O
return	O
0	int
;	O
}	O
DECL_GET	O
(	O
email	*(char)
)	O
DECL_AGET	O
(	O
email	*(char)
)	O
size_t	long
mu_address_format_string	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),long)->(long)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
buflen	long
)	O
{	O
mu_stream_t	*(struct)
str	*(char)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
buf	*(char)
)	O
rc	int
=	O
mu_nullstream_create	(*(*(struct)),int)->(int)
(	O
&	O
str	*(char)
,	O
MU_STREAM_WRITE	int
)	O
;	O
else	O
rc	int
=	O
mu_fixed_memory_stream_create	(*(*(struct)),*(void),long,int)->(int)
(	O
&	O
str	*(char)
,	O
buf	*(char)
,	O
buflen	long
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
size	long
;	O
mu_stream_stat_buffer	array(long)
statbuf	array(long)
;	O
mu_stream_set_stat	(*(struct),int,array(long))->(int)
(	O
str	*(char)
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
statbuf	array(long)
)	O
;	O
rc	int
=	O
mu_stream_format_address	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
str	*(char)
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
0	int
;	O
size	long
=	O
statbuf	array(long)
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
if	O
(	O
buf	*(char)
)	O
{	O
if	O
(	O
size	long
+	O
1	int
>=	O
buflen	long
)	O
size	long
=	O
buflen	long
-	O
1	int
;	O
buf	*(char)
[	O
size	long
]	O
=	O
0	int
;	O
}	O
return	O
size	long
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_address_is_group	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
personal	*(char)
&&	O
!	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
&&	O
!	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
domain	*(char)
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_address_is_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_address_is_unix_mailbox	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
local_part	*(*(char))
&&	O
!	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_is_group	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(int))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
no	long
,	O
int	O
*	O
yes	*(int)
)	O
{	O
mu_address_t	*(struct)
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
_address_get_nth	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long)->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
no	long
)	O
;	O
if	O
(	O
!	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
yes	*(int)
)	O
*	O
yes	*(int)
=	O
_address_is_group	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
subaddr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_sget_printable	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
const	O
char	O
*	O
*	O
sptr	*(*(char))
)	O
{	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
sptr	*(*(char))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
!	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
)	O
{	O
mu_stream_t	*(struct)
str	*(char)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_memory_stream_create	(*(*(struct)),int)->(int)
(	O
&	O
str	*(char)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
rc	int
=	O
mu_stream_format_address	(*(struct),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
str	*(char)
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_off_t	long
size	long
;	O
mu_stream_size	(*(struct),*(long))->(int)
(	O
str	*(char)
,	O
&	O
size	long
)	O
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
mu_stream_seek	(*(struct),long,int,*(long))->(int)
(	O
str	*(char)
,	O
0	int
,	O
MU_SEEK_SET	int
,	O
NULL	O
)	O
;	O
rc	int
=	O
mu_stream_read	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(char)
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
,	O
size	long
,	O
NULL	O
)	O
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
[	O
size	long
]	O
=	O
0	int
;	O
}	O
}	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
str	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
*	O
sptr	*(*(char))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_aget_printable	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
char	O
*	O
*	O
presult	*(*(char))
)	O
{	O
int	O
rc	int
;	O
const	O
char	O
*	O
s	*(char)
;	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
presult	*(*(char))
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
mu_address_sget_printable	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
char	O
*	O
result	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
if	O
(	O
result	*(char)
)	O
*	O
presult	*(*(char))
=	O
result	*(char)
;	O
else	O
rc	int
=	O
ENOMEM	int
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_address_get_printable	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),long,*(long))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
n	long
)	O
{	O
const	O
char	O
*	O
s	*(char)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_address_sget_printable	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
size_t	long
i	long
;	O
i	long
=	O
mu_cpystr	(*(char),*(char),long)->(long)
(	O
buf	*(char)
,	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
printable	*(char)
,	O
len	int
)	O
;	O
if	O
(	O
n	long
)	O
*	O
n	long
=	O
i	long
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_address_to_string	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),long,*(long))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
n	long
)	O
{	O
return	O
mu_address_get_printable	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),long,*(long))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
buf	*(char)
,	O
len	int
,	O
n	long
)	O
;	O
}	O
int	O
mu_address_get_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
i	long
,	O
count	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
i	long
++	O
)	O
{	O
mu_validate_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
++	O
count	long
;	O
}	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
count	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_get_group_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
_address_is_group	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
j	long
++	O
;	O
}	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
j	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_get_email_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
_address_is_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
j	long
++	O
;	O
}	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
j	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_get_unix_mailbox_count	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(long))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
j	long
;	O
for	O
(	O
j	long
=	O
0	int
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
if	O
(	O
_address_is_unix_mailbox	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
j	long
++	O
;	O
}	O
if	O
(	O
pcount	*(long)
)	O
*	O
pcount	*(long)
=	O
j	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_address_contains_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(int)
(	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
const	O
char	O
*	O
email	*(char)
)	O
{	O
for	O
(	O
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
{	O
mu_validate_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
!	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
break	O
;	O
if	O
(	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
,	O
email	*(char)
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
mu_list_copy	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
dst	*(char)
,	O
mu_address_t	*(struct)
src	*(char)
)	O
{	O
if	O
(	O
src	*(char)
->	O
comments	*(char)
&&	O
!	O
(	O
dst	*(char)
->	O
comments	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
src	*(char)
->	O
comments	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	*(char)
->	O
personal	*(char)
&&	O
!	O
(	O
dst	*(char)
->	O
personal	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
src	*(char)
->	O
personal	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	*(char)
->	O
email	*(char)
&&	O
!	O
(	O
dst	*(char)
->	O
email	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
src	*(char)
->	O
email	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	*(char)
->	O
local_part	*(*(char))
&&	O
!	O
(	O
dst	*(char)
->	O
local_part	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
src	*(char)
->	O
local_part	*(*(char))
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	*(char)
->	O
domain	*(char)
&&	O
!	O
(	O
dst	*(char)
->	O
domain	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
src	*(char)
->	O
domain	*(char)
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
if	O
(	O
src	*(char)
->	O
route	*(*(char))
&&	O
!	O
(	O
dst	*(char)
->	O
route	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
src	*(char)
->	O
route	*(*(char))
)	O
)	O
)	O
return	O
ENOMEM	int
;	O
return	O
0	int
;	O
}	O
mu_address_t	*(struct)
mu_address_dup	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
mu_address_t	*(struct)
src	*(char)
)	O
{	O
mu_address_t	*(struct)
dst	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
dst	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
dst	*(char)
)	O
return	O
NULL	O
;	O
if	O
(	O
mu_list_copy	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
dst	*(char)
,	O
src	*(char)
)	O
)	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
dst	*(char)
)	O
;	O
return	O
dst	*(char)
;	O
}	O
int	O
mu_address_union	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_address_t	*(struct)
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
mu_address_t	*(struct)
b	*(struct(int,int,array(char),array(char)))
)	O
{	O
mu_address_t	*(struct)
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
NULL	O
;	O
if	O
(	O
!	O
a	*(struct(int,int,array(char),array(char)))
||	O
!	O
b	*(struct(int,int,array(char),array(char)))
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
{	O
*	O
a	*(struct(int,int,array(char),array(char)))
=	O
mu_address_dup	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
b	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
!	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
return	O
ENOMEM	int
;	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
*	O
a	*(struct(int,int,array(char),array(char)))
;	O
b	*(struct(int,int,array(char),array(char)))
=	O
b	*(struct(int,int,array(char),array(char)))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
else	O
{	O
if	O
(	O
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
->	O
printable	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
->	O
printable	*(char)
)	O
;	O
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
)	O
->	O
printable	*(char)
=	O
NULL	O
;	O
}	O
for	O
(	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
*	O
a	*(struct(int,int,array(char),array(char)))
;	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
}	O
for	O
(	O
;	O
b	*(struct(int,int,array(char),array(char)))
;	O
b	*(struct(int,int,array(char),array(char)))
=	O
b	*(struct(int,int,array(char),array(char)))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
if	O
(	O
!	O
mu_address_contains_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(char))->(int)
(	O
*	O
a	*(struct(int,int,array(char),array(char)))
,	O
b	*(struct(int,int,array(char),array(char)))
->	O
email	*(char)
)	O
)	O
{	O
if	O
(	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
email	*(char)
)	O
{	O
mu_address_t	*(struct)
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mu_address_dup	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
b	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
!	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
return	O
ENOMEM	int
;	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
->	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
next	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
else	O
{	O
int	O
rc	int
=	O
mu_list_copy	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
b	*(struct(int,int,array(char),array(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
_address_free	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
0	int
,	O
sizeof	O
(	O
*	O
last	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
}	O
return	O
0	int
;	O
}	O
