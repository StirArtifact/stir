bool	bool
add_all_comments	bool
=	O
false	O
;	O
char	O
*	O
comment_tag	*(char)
;	O
static	O
const	O
char	O
*	O
default_domain	O
;	O
static	O
int	O
do_debug	O
;	O
message_list_ty	struct
*	O
exclude	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
static	O
int	O
force_po	O
;	O
static	O
const	O
char	O
*	O
copyright_holder	O
=	O
"THE PACKAGE'S COPYRIGHT HOLDER"	*(char)
;	O
static	O
const	O
char	O
*	O
package_name	O
=	O
NULL	O
;	O
static	O
const	O
char	O
*	O
package_version	O
=	O
NULL	O
;	O
static	O
const	O
char	O
*	O
msgid_bugs_address	O
=	O
NULL	O
;	O
const	O
char	O
*	O
msgstr_prefix	*(char)
;	O
const	O
char	O
*	O
msgstr_suffix	*(char)
;	O
static	O
char	O
*	O
output_dir	O
;	O
static	O
catalog_output_format_ty	O
output_syntax	O
=	O
&	O
output_format_po	O
;	O
int	O
xgettext_omit_header	int
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_c	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_cxx_qt	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_cxx_kde	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_cxx_boost	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_objc	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_gcc_internal	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_sh	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_python	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_lisp	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_elisp	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_librep	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_scheme	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_java	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_csharp	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_awk	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_ycp	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_tcl	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_perl	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_php	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_lua	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_javascript	O
;	O
static	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
flag_table_vala	O
;	O
static	O
bool	bool
recognize_format_qt	O
;	O
static	O
bool	bool
recognize_format_kde	O
;	O
static	O
bool	bool
recognize_format_boost	O
;	O
enum	O
is_syntax_check	O
default_syntax_check	array(enum(int,int,int,int,int,int))
[	O
NSYNTAXCHECKS	int
]	O
;	O
static	O
locating_rule_list_ty	O
*	O
its_locating_rules	O
;	O
static	O
bool	bool
add_itstool_comments	O
=	O
false	O
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	O
[	O
]	O
=	O
{	O
{	O
"add-comments"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'c'	O
}	O
,	O
{	O
"add-location"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'n'	O
}	O
,	O
{	O
"boost"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
11	int
}	O
,	O
{	O
"c++"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'C'	O
}	O
,	O
{	O
"check"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
17	int
}	O
,	O
{	O
"color"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
14	int
}	O
,	O
{	O
"copyright-holder"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
1	int
}	O
,	O
{	O
"debug"	*(char)
,	O
no_argument	O
,	O
&	O
do_debug	O
,	O
1	int
}	O
,	O
{	O
"default-domain"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'd'	O
}	O
,	O
{	O
"directory"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'D'	O
}	O
,	O
{	O
"escape"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'E'	O
}	O
,	O
{	O
"exclude-file"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'x'	O
}	O
,	O
{	O
"extract-all"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"files-from"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"flag"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
8	int
}	O
,	O
{	O
"force-po"	*(char)
,	O
no_argument	O
,	O
&	O
force_po	O
,	O
1	int
}	O
,	O
{	O
"foreign-user"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
2	int
}	O
,	O
{	O
"from-code"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
3	int
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"indent"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"its"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
20	int
}	O
,	O
{	O
"itstool"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
19	int
}	O
,	O
{	O
"join-existing"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'j'	O
}	O
,	O
{	O
"kde"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
10	int
}	O
,	O
{	O
"keyword"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'k'	O
}	O
,	O
{	O
"language"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'L'	O
}	O
,	O
{	O
"msgid-bugs-address"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
5	int
}	O
,	O
{	O
"msgstr-prefix"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'm'	O
}	O
,	O
{	O
"msgstr-suffix"	*(char)
,	O
optional_argument	O
,	O
NULL	O
,	O
'M'	O
}	O
,	O
{	O
"no-escape"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"no-location"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
16	int
}	O
,	O
{	O
"no-wrap"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
4	int
}	O
,	O
{	O
"omit-header"	*(char)
,	O
no_argument	O
,	O
&	O
xgettext_omit_header	int
,	O
1	int
}	O
,	O
{	O
"output"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'o'	O
}	O
,	O
{	O
"output-dir"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"package-name"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
12	int
}	O
,	O
{	O
"package-version"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
13	int
}	O
,	O
{	O
"properties-output"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
6	int
}	O
,	O
{	O
"qt"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
9	int
}	O
,	O
{	O
"sentence-end"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
18	int
}	O
,	O
{	O
"sort-by-file"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'F'	O
}	O
,	O
{	O
"sort-output"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"strict"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'S'	O
}	O
,	O
{	O
"string-limit"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"stringtable-output"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
7	int
}	O
,	O
{	O
"style"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
CHAR_MAX	O
+	O
15	int
}	O
,	O
{	O
"trigraphs"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'T'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	O
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"width"	*(char)
,	O
required_argument	O
,	O
NULL	O
,	O
'w'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
typedef	O
void	O
(	O
*	O
extractor_func	O
)	O
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
real_filename	*(char)
,	O
const	O
char	O
*	O
logical_filename	*(char)
,	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
typedef	O
struct	O
extractor_ty	O
extractor_ty	O
;	O
struct	O
extractor_ty	O
{	O
extractor_func	O
func	O
;	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
struct	O
formatstring_parser	O
*	O
formatstring_parser1	O
;	O
struct	O
formatstring_parser	O
*	O
formatstring_parser2	O
;	O
struct	O
formatstring_parser	O
*	O
formatstring_parser3	O
;	O
}	O
;	O
static	O
void	O
usage	O
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
read_exclusion_file	O
(	O
char	O
*	O
file_name	*(char)
)	O
;	O
static	O
void	O
extract_from_file	O
(	O
const	O
char	O
*	O
file_name	*(char)
,	O
extractor_ty	O
extractor	O
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
static	O
void	O
extract_from_xml_file	O
(	O
const	O
char	O
*	O
file_name	*(char)
,	O
its_rule_list_ty	O
*	O
rules	O
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
static	O
message_ty	struct
*	O
construct_header	O
(	O
void	O
)	O
;	O
static	O
void	O
finalize_header	O
(	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
static	O
extractor_ty	O
language_to_extractor	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
;	O
static	O
const	O
char	O
*	O
extension_to_language	O
(	O
const	O
char	O
*	O
extension	O
)	O
;	O
int	O
main	O
(	O
int	O
argc	O
,	O
char	O
*	O
argv	O
[	O
]	O
)	O
{	O
int	O
optchar	O
;	O
bool	bool
do_help	O
=	O
false	O
;	O
bool	bool
do_version	O
=	O
false	O
;	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
;	O
bool	bool
join_existing	O
=	O
false	O
;	O
bool	bool
no_default_keywords	O
=	O
false	O
;	O
bool	bool
some_additional_keywords	O
=	O
false	O
;	O
bool	bool
sort_by_msgid	O
=	O
false	O
;	O
bool	bool
sort_by_filepos	O
=	O
false	O
;	O
char	O
*	O
*	O
dirs	O
;	O
char	O
*	O
*	O
its_dirs	O
=	O
NULL	O
;	O
char	O
*	O
explicit_its_filename	O
=	O
NULL	O
;	O
const	O
char	O
*	O
file_name	*(char)
;	O
const	O
char	O
*	O
files_from	O
=	O
NULL	O
;	O
string_list_ty	struct
*	O
file_list	O
;	O
char	O
*	O
output_file	O
=	O
NULL	O
;	O
const	O
char	O
*	O
language	O
=	O
NULL	O
;	O
extractor_ty	O
extractor	O
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
int	O
cnt	O
;	O
size_t	long
i	long
;	O
set_program_name	(*(char))->(void)
(	O
argv	O
[	O
0	int
]	O
)	O
;	O
error_print_progname	*(()->(void))
=	O
maybe_print_progname	()->(void)
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	O
(	O
PACKAGE	O
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
bindtextdomain	O
(	O
"bison-runtime"	*(char)
,	O
relocate	O
(	O
BISON_LOCALEDIR	O
)	O
)	O
;	O
textdomain	O
(	O
PACKAGE	O
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
default_domain	O
=	O
MESSAGE_DOMAIN_DEFAULT	O
;	O
xgettext_global_source_encoding	*(char)
=	O
po_charset_ascii	*(char)
;	O
init_flag_table_c	O
(	O
)	O
;	O
init_flag_table_objc	O
(	O
)	O
;	O
init_flag_table_gcc_internal	O
(	O
)	O
;	O
init_flag_table_kde	O
(	O
)	O
;	O
init_flag_table_sh	O
(	O
)	O
;	O
init_flag_table_python	O
(	O
)	O
;	O
init_flag_table_lisp	O
(	O
)	O
;	O
init_flag_table_elisp	O
(	O
)	O
;	O
init_flag_table_librep	O
(	O
)	O
;	O
init_flag_table_scheme	O
(	O
)	O
;	O
init_flag_table_java	O
(	O
)	O
;	O
init_flag_table_csharp	O
(	O
)	O
;	O
init_flag_table_awk	O
(	O
)	O
;	O
init_flag_table_ycp	O
(	O
)	O
;	O
init_flag_table_tcl	O
(	O
)	O
;	O
init_flag_table_perl	O
(	O
)	O
;	O
init_flag_table_php	O
(	O
)	O
;	O
init_flag_table_lua	O
(	O
)	O
;	O
init_flag_table_javascript	O
(	O
)	O
;	O
init_flag_table_vala	O
(	O
)	O
;	O
while	O
(	O
(	O
optchar	O
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	O
,	O
argv	O
,	O
"ac::Cd:D:eEf:Fhijk::l:L:m::M::no:p:sTVw:W:x:"	*(char)
,	O
long_options	O
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	O
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'a'	O
:	O
x_c_extract_all	O
(	O
)	O
;	O
x_sh_extract_all	O
(	O
)	O
;	O
x_python_extract_all	O
(	O
)	O
;	O
x_lisp_extract_all	O
(	O
)	O
;	O
x_elisp_extract_all	O
(	O
)	O
;	O
x_librep_extract_all	O
(	O
)	O
;	O
x_scheme_extract_all	O
(	O
)	O
;	O
x_java_extract_all	O
(	O
)	O
;	O
x_csharp_extract_all	O
(	O
)	O
;	O
x_awk_extract_all	O
(	O
)	O
;	O
x_tcl_extract_all	O
(	O
)	O
;	O
x_perl_extract_all	O
(	O
)	O
;	O
x_php_extract_all	O
(	O
)	O
;	O
x_lua_extract_all	O
(	O
)	O
;	O
x_javascript_extract_all	O
(	O
)	O
;	O
x_vala_extract_all	O
(	O
)	O
;	O
break	O
;	O
case	O
'c'	O
:	O
if	O
(	O
optarg	*(char)
==	O
NULL	O
)	O
{	O
add_all_comments	bool
=	O
true	O
;	O
comment_tag	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
add_all_comments	bool
=	O
false	O
;	O
comment_tag	*(char)
=	O
optarg	*(char)
;	O
while	O
(	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
comment_tag	*(char)
)	O
)	O
++	O
comment_tag	*(char)
;	O
}	O
break	O
;	O
case	O
'C'	O
:	O
language	O
=	O
"C++"	*(char)
;	O
break	O
;	O
case	O
'd'	O
:	O
default_domain	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'D'	O
:	O
dir_list_append	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
message_print_style_escape	O
(	O
false	O
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
message_print_style_escape	O
(	O
true	O
)	O
;	O
break	O
;	O
case	O
'f'	O
:	O
files_from	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'F'	O
:	O
sort_by_filepos	O
=	O
true	O
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	O
=	O
true	O
;	O
break	O
;	O
case	O
'i'	O
:	O
message_print_style_indent	O
(	O
)	O
;	O
break	O
;	O
case	O
'j'	O
:	O
join_existing	O
=	O
true	O
;	O
break	O
;	O
case	O
'k'	O
:	O
if	O
(	O
optarg	*(char)
!=	O
NULL	O
&&	O
*	O
optarg	*(char)
==	O
'\0'	O
)	O
optarg	*(char)
=	O
NULL	O
;	O
x_c_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_objc_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_sh_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_python_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_lisp_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_elisp_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_librep_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_scheme_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_java_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_csharp_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_awk_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_tcl_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_perl_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_php_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_lua_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_javascript_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_vala_keyword	O
(	O
optarg	*(char)
)	O
;	O
x_desktop_keyword	O
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
optarg	*(char)
==	O
NULL	O
)	O
no_default_keywords	O
=	O
true	O
;	O
else	O
some_additional_keywords	O
=	O
true	O
;	O
break	O
;	O
case	O
'l'	O
:	O
break	O
;	O
case	O
'L'	O
:	O
language	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'm'	O
:	O
msgstr_prefix	*(char)
=	O
optarg	*(char)
==	O
NULL	O
?	O
""	*(char)
:	O
optarg	*(char)
;	O
break	O
;	O
case	O
'M'	O
:	O
msgstr_suffix	*(char)
=	O
optarg	*(char)
==	O
NULL	O
?	O
""	*(char)
:	O
optarg	*(char)
;	O
break	O
;	O
case	O
'n'	O
:	O
if	O
(	O
handle_filepos_comment_option	O
(	O
optarg	*(char)
)	O
)	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
output_file	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'p'	O
:	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
output_dir	O
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
output_dir	O
)	O
;	O
if	O
(	O
optarg	*(char)
[	O
len	long
-	O
1	int
]	O
==	O
'/'	O
)	O
output_dir	O
=	O
xstrdup	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
else	O
output_dir	O
=	O
xasprintf	(*(char))->(*(char))
(	O
"%s/"	*(char)
,	O
optarg	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
sort_by_msgid	O
=	O
true	O
;	O
break	O
;	O
case	O
'S'	O
:	O
message_print_style_uniforum	O
(	O
)	O
;	O
break	O
;	O
case	O
'T'	O
:	O
x_c_trigraphs	O
(	O
)	O
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	O
=	O
true	O
;	O
break	O
;	O
case	O
'w'	O
:	O
{	O
int	O
value	enum(int,int,int,int,int,int)
;	O
char	O
*	O
endp	O
;	O
value	enum(int,int,int,int,int,int)
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
endp	O
,	O
10	int
)	O
;	O
if	O
(	O
endp	O
!=	O
optarg	*(char)
)	O
message_page_width_set	O
(	O
value	enum(int,int,int,int,int,int)
)	O
;	O
}	O
break	O
;	O
case	O
'x'	O
:	O
read_exclusion_file	O
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
1	int
:	O
copyright_holder	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
2	int
:	O
copyright_holder	O
=	O
""	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
3	int
:	O
xgettext_global_source_encoding	*(char)
=	O
po_charset_canonicalize	(*(char))->(*(char))
(	O
optarg	*(char)
)	O
;	O
if	O
(	O
xgettext_global_source_encoding	*(char)
==	O
NULL	O
)	O
{	O
multiline_warning	(*(char),*(char))->(void)
(	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"warning: "	*(char)
)	O
)	O
,	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"'%s' is not a valid encoding name.  Using ASCII as fallback.\n"	*(char)
)	O
,	O
optarg	*(char)
)	O
)	O
;	O
xgettext_global_source_encoding	*(char)
=	O
po_charset_ascii	*(char)
;	O
}	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
4	int
:	O
message_page_width_ignore	O
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
5	int
:	O
msgid_bugs_address	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
6	int
:	O
output_syntax	O
=	O
&	O
output_format_properties	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
7	int
:	O
output_syntax	O
=	O
&	O
output_format_stringtable	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
8	int
:	O
xgettext_record_flag	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
9	int
:	O
recognize_format_qt	O
=	O
true	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
10	int
:	O
recognize_format_kde	O
=	O
true	O
;	O
activate_additional_keywords_kde	O
(	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
11	int
:	O
recognize_format_boost	O
=	O
true	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
12	int
:	O
package_name	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
13	int
:	O
package_version	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
14	int
:	O
if	O
(	O
handle_color_option	(*(char))->(bool)
(	O
optarg	*(char)
)	O
||	O
color_test_mode	bool
)	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
15	int
:	O
handle_style_option	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
16	int
:	O
message_print_style_filepos	O
(	O
filepos_comment_none	O
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
17	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NSYNTAXCHECKS	int
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
syntax_check_name	array(*(char))
[	O
i	long
]	O
)	O
==	O
0	int
)	O
{	O
default_syntax_check	array(enum(int,int,int,int,int,int))
[	O
i	long
]	O
=	O
yes	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
i	long
==	O
NSYNTAXCHECKS	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"syntax check '%s' unknown"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
18	int
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"single-space"	*(char)
)	O
==	O
0	int
)	O
sentence_end_required_spaces	O
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"double-space"	*(char)
)	O
==	O
0	int
)	O
sentence_end_required_spaces	O
=	O
2	int
;	O
else	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"sentence end type '%s' unknown"	*(char)
)	O
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
20	int
:	O
explicit_its_filename	O
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
CHAR_MAX	O
+	O
19	int
:	O
add_itstool_comments	O
=	O
true	O
;	O
break	O
;	O
default	O
:	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	O
,	O
VERSION	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"1995-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	O
(	O
"Ulrich Drepper"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
}	O
if	O
(	O
do_help	O
)	O
usage	O
(	O
EXIT_SUCCESS	O
)	O
;	O
if	O
(	O
sort_by_msgid	O
&&	O
sort_by_filepos	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--sort-output"	*(char)
,	O
"--sort-by-file"	*(char)
)	O
;	O
if	O
(	O
recognize_format_qt	O
&&	O
recognize_format_kde	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--qt"	*(char)
,	O
"--kde"	*(char)
)	O
;	O
if	O
(	O
recognize_format_qt	O
&&	O
recognize_format_boost	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--qt"	*(char)
,	O
"--boost"	*(char)
)	O
;	O
if	O
(	O
recognize_format_kde	O
&&	O
recognize_format_boost	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--kde"	*(char)
,	O
"--boost"	*(char)
)	O
;	O
if	O
(	O
join_existing	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
default_domain	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"--join-existing cannot be used when output is written to stdout"	*(char)
)	O
)	O
;	O
if	O
(	O
no_default_keywords	O
&&	O
!	O
some_additional_keywords	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"xgettext cannot work without keywords to look for"	*(char)
)	O
)	O
;	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
files_from	O
==	O
NULL	O
&&	O
optind	int
>=	O
argc	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
EXIT_SUCCESS	O
,	O
0	int
,	O
_	O
(	O
"no input file given"	*(char)
)	O
)	O
;	O
usage	O
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
explicit_its_filename	O
!=	O
NULL	O
&&	O
language	O
!=	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"%s and %s are mutually exclusive"	*(char)
)	O
,	O
"--its"	*(char)
,	O
"--language"	*(char)
)	O
;	O
if	O
(	O
explicit_its_filename	O
==	O
NULL	O
)	O
{	O
its_dirs	O
=	O
get_search_path	O
(	O
"its"	*(char)
)	O
;	O
its_locating_rules	O
=	O
locating_rule_list_alloc	O
(	O
)	O
;	O
for	O
(	O
dirs	O
=	O
its_dirs	O
;	O
*	O
dirs	O
!=	O
NULL	O
;	O
dirs	O
++	O
)	O
locating_rule_list_add_from_directory	O
(	O
its_locating_rules	O
,	O
*	O
dirs	O
)	O
;	O
}	O
if	O
(	O
language	O
!=	O
NULL	O
)	O
extractor	O
=	O
language_to_extractor	O
(	O
language	O
)	O
;	O
if	O
(	O
msgstr_prefix	*(char)
!=	O
NULL	O
&&	O
msgstr_suffix	*(char)
==	O
NULL	O
)	O
msgstr_suffix	*(char)
=	O
""	*(char)
;	O
else	O
if	O
(	O
msgstr_prefix	*(char)
==	O
NULL	O
&&	O
msgstr_suffix	*(char)
!=	O
NULL	O
)	O
msgstr_prefix	*(char)
=	O
""	*(char)
;	O
if	O
(	O
output_dir	O
==	O
NULL	O
)	O
output_dir	O
=	O
"."	*(char)
;	O
if	O
(	O
output_file	O
)	O
{	O
if	O
(	O
IS_ABSOLUTE_PATH	O
(	O
output_file	O
)	O
||	O
strcmp	(*(char),*(char))->(int)
(	O
output_file	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
file_name	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
output_file	O
)	O
;	O
else	O
file_name	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
output_dir	O
,	O
output_file	O
,	O
NULL	O
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
default_domain	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
file_name	*(char)
=	O
"-"	*(char)
;	O
else	O
file_name	*(char)
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
output_dir	O
,	O
default_domain	O
,	O
".po"	*(char)
)	O
;	O
if	O
(	O
files_from	O
!=	O
NULL	O
)	O
file_list	O
=	O
read_names_from_file	(*(char))->(*(struct(*(*(char)),long,long)))
(	O
files_from	O
)	O
;	O
else	O
file_list	O
=	O
string_list_alloc	()->(*(struct(*(*(char)),long,long)))
(	O
)	O
;	O
for	O
(	O
cnt	O
=	O
optind	int
;	O
cnt	O
<	O
argc	O
;	O
++	O
cnt	O
)	O
string_list_append_unique	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
file_list	O
,	O
argv	O
[	O
cnt	O
]	O
)	O
;	O
if	O
(	O
xgettext_global_source_encoding	*(char)
!=	O
po_charset_ascii	*(char)
&&	O
xgettext_global_source_encoding	*(char)
!=	O
po_charset_utf8	*(char)
)	O
{	O
iconv_t	*(void)
cd	*(void)
;	O
cd	*(void)
=	O
iconv_open	(*(char),*(char))->(*(void))
(	O
po_charset_utf8	*(char)
,	O
xgettext_global_source_encoding	*(char)
)	O
;	O
if	O
(	O
cd	*(void)
==	O
(	O
iconv_t	*(void)
)	O
(	O
-	O
1	int
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"Cannot convert from \"%s\" to \"%s\". %s relies on iconv(), and iconv() does not support this conversion."	*(char)
)	O
,	O
xgettext_global_source_encoding	*(char)
,	O
po_charset_utf8	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
)	O
;	O
xgettext_global_source_iconv	*(void)
=	O
cd	*(void)
;	O
}	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
=	O
msgdomain_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
true	O
)	O
;	O
if	O
(	O
!	O
xgettext_omit_header	int
)	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
construct_header	O
(	O
)	O
)	O
;	O
if	O
(	O
join_existing	O
)	O
{	O
void	O
*	O
saved_directory_list	O
=	O
dir_list_save_reset	()->(*(void))
(	O
)	O
;	O
extractor_ty	O
po_extractor	O
=	O
{	O
extract_po	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
extract_from_file	O
(	O
file_name	*(char)
,	O
po_extractor	O
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
if	O
(	O
!	O
is_ascii_msgdomain_list	(*(struct(*(*(struct`)),long,long,bool,*(char))))->(bool)
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
)	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
=	O
iconv_msgdomain_list	(*(struct(*(*(struct`)),long,long,bool,*(char))),*(char),bool,*(char))->(*(struct(*(*(struct`)),long,long,bool,*(char))))
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
,	O
"UTF-8"	*(char)
,	O
true	O
,	O
file_name	*(char)
)	O
;	O
dir_list_restore	(*(void))->(void)
(	O
saved_directory_list	O
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
file_list	O
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
extractor_ty	O
this_file_extractor	O
;	O
its_rule_list_ty	O
*	O
its_rules	O
=	O
NULL	O
;	O
filename	*(char)
=	O
file_list	O
->	O
item	*(*(char))
[	O
i	long
]	O
;	O
if	O
(	O
extractor	O
.	O
func	O
)	O
this_file_extractor	O
=	O
extractor	O
;	O
else	O
if	O
(	O
explicit_its_filename	O
!=	O
NULL	O
)	O
{	O
its_rules	O
=	O
its_rule_list_alloc	O
(	O
)	O
;	O
if	O
(	O
!	O
its_rule_list_add_from_file	O
(	O
its_rules	O
,	O
explicit_its_filename	O
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"warning: ITS rule file '%s' does not exist"	*(char)
)	O
,	O
explicit_its_filename	O
)	O
;	O
}	O
else	O
{	O
const	O
char	O
*	O
language_from_extension	O
=	O
NULL	O
;	O
const	O
char	O
*	O
base	O
;	O
char	O
*	O
reduced	O
;	O
base	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
filename	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
base	O
)	O
base	O
=	O
filename	*(char)
;	O
reduced	O
=	O
xstrdup	(*(char))->(*(char))
(	O
base	O
)	O
;	O
while	O
(	O
strlen	(*(char))->(long)
(	O
reduced	O
)	O
>=	O
3	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
reduced	O
+	O
strlen	(*(char))->(long)
(	O
reduced	O
)	O
-	O
3	int
,	O
".in"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
reduced	O
[	O
strlen	(*(char))->(long)
(	O
reduced	O
)	O
-	O
3	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
language	O
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
p	*(void)
=	O
reduced	O
+	O
strlen	(*(char))->(long)
(	O
reduced	O
)	O
;	O
for	O
(	O
;	O
p	*(void)
>	O
reduced	O
&&	O
language_from_extension	O
==	O
NULL	O
;	O
p	*(void)
--	O
)	O
{	O
if	O
(	O
*	O
p	*(void)
==	O
'.'	O
)	O
{	O
const	O
char	O
*	O
extension	O
=	O
p	*(void)
+	O
1	int
;	O
language_from_extension	O
=	O
extension_to_language	O
(	O
extension	O
)	O
;	O
}	O
}	O
}	O
if	O
(	O
language_from_extension	O
==	O
NULL	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"-"	*(char)
)	O
!=	O
0	int
)	O
{	O
const	O
char	O
*	O
its_basename	O
;	O
its_basename	O
=	O
locating_rule_list_locate	O
(	O
its_locating_rules	O
,	O
filename	*(char)
,	O
language	O
)	O
;	O
if	O
(	O
its_basename	O
!=	O
NULL	O
)	O
{	O
size_t	long
j	O
;	O
its_rules	O
=	O
its_rule_list_alloc	O
(	O
)	O
;	O
if	O
(	O
language	O
!=	O
NULL	O
)	O
its_rule_list_add_from_string	O
(	O
its_rules	O
,	O
ITS_ROOT_UNTRANSLATABLE	O
)	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
its_dirs	O
[	O
j	O
]	O
!=	O
NULL	O
;	O
j	O
++	O
)	O
{	O
char	O
*	O
its_filename	O
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
its_dirs	O
[	O
j	O
]	O
,	O
its_basename	O
,	O
NULL	O
)	O
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
statbuf	O
;	O
bool	bool
ok	O
=	O
false	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
its_filename	O
,	O
&	O
statbuf	O
)	O
==	O
0	int
)	O
ok	O
=	O
its_rule_list_add_from_file	O
(	O
its_rules	O
,	O
its_filename	O
)	O
;	O
free	(*(void))->(void)
(	O
its_filename	O
)	O
;	O
if	O
(	O
ok	O
)	O
break	O
;	O
}	O
if	O
(	O
its_dirs	O
[	O
j	O
]	O
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"warning: ITS rule file '%s' does not exist; check your gettext installation"	*(char)
)	O
,	O
its_basename	O
)	O
;	O
its_rule_list_free	O
(	O
its_rules	O
)	O
;	O
its_rules	O
=	O
NULL	O
;	O
}	O
}	O
}	O
if	O
(	O
its_rules	O
==	O
NULL	O
)	O
{	O
if	O
(	O
language_from_extension	O
==	O
NULL	O
)	O
{	O
const	O
char	O
*	O
extension	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
reduced	O
,	O
'.'	O
)	O
;	O
if	O
(	O
extension	O
==	O
NULL	O
)	O
extension	O
=	O
""	*(char)
;	O
else	O
extension	O
++	O
;	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"warning: file '%s' extension '%s' is unknown; will try C"	*(char)
)	O
,	O
filename	*(char)
,	O
extension	O
)	O
;	O
language_from_extension	O
=	O
"C"	*(char)
;	O
}	O
this_file_extractor	O
=	O
language_to_extractor	O
(	O
language_from_extension	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
reduced	O
)	O
;	O
}	O
if	O
(	O
its_rules	O
!=	O
NULL	O
)	O
{	O
extract_from_xml_file	O
(	O
filename	*(char)
,	O
its_rules	O
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
its_rule_list_free	O
(	O
its_rules	O
)	O
;	O
}	O
else	O
extract_from_file	O
(	O
filename	*(char)
,	O
this_file_extractor	O
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
}	O
string_list_free	(*(struct(*(*(char)),long,long)))->(void)
(	O
file_list	O
)	O
;	O
if	O
(	O
!	O
xgettext_omit_header	int
)	O
finalize_header	O
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
if	O
(	O
xgettext_global_source_encoding	*(char)
!=	O
po_charset_ascii	*(char)
&&	O
xgettext_global_source_encoding	*(char)
!=	O
po_charset_utf8	*(char)
)	O
iconv_close	(*(void))->(int)
(	O
xgettext_global_source_iconv	*(void)
)	O
;	O
if	O
(	O
sort_by_filepos	O
)	O
msgdomain_list_sort_by_filepos	O
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
else	O
if	O
(	O
sort_by_msgid	O
)	O
msgdomain_list_sort_by_msgid	O
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
{	O
int	O
nerrors	O
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
i	long
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
nerrors	O
=	O
syntax_check_message_list	O
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
;	O
}	O
if	O
(	O
nerrors	O
>	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
ngettext	O
(	O
"found %d fatal error"	*(char)
,	O
"found %d fatal errors"	*(char)
,	O
nerrors	O
)	O
,	O
nerrors	O
)	O
;	O
}	O
msgdomain_list_print	O
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
,	O
file_name	*(char)
,	O
output_syntax	O
,	O
force_po	O
,	O
do_debug	O
)	O
;	O
if	O
(	O
its_locating_rules	O
)	O
locating_rule_list_free	O
(	O
its_locating_rules	O
)	O
;	O
if	O
(	O
its_dirs	O
!=	O
NULL	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
its_dirs	O
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
its_dirs	O
[	O
i	long
]	O
)	O
;	O
free	(*(void))->(void)
(	O
its_dirs	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	O
)	O
;	O
}	O
static	O
void	O
usage	O
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION] [INPUTFILE]...\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Extract translatable strings from given input files.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\nSimilarly for optional arguments.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  INPUTFILE ...               input files\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -f, --files-from=FILE       get list of input files from FILE\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -D, --directory=DIRECTORY   add DIRECTORY to list for input files search\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"If input file is -, standard input is read.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output file location:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -d, --default-domain=NAME   use NAME.po for output (instead of messages.po)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -o, --output=FILE           write output to specified file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -p, --output-dir=DIR        output files will be placed in directory DIR\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"If output file is -, output is written to standard output.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Choice of input file language:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -L, --language=NAME         recognise the specified language\n                                (C, C++, ObjectiveC, PO, Shell, Python, Lisp,\n                                EmacsLisp, librep, Scheme, Smalltalk, Java,\n                                JavaProperties, C#, awk, YCP, Tcl, Perl, PHP,\n                                GCC-source, NXStringTable, RST, RSJ, Glade,\n                                Lua, JavaScript, Vala, Desktop)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -C, --c++                   shorthand for --language=C++\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"By default the language is guessed depending on the input file name extension.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Input file interpretation:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --from-code=NAME        encoding of input files\n                                (except for Python, Tcl, Glade)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"By default the input files are assumed to be in ASCII.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Operation mode:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -j, --join-existing         join messages with existing file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -x, --exclude-file=FILE.po  entries from FILE.po are not extracted\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -cTAG, --add-comments=TAG   place comment blocks starting with TAG and\n                                preceding keyword lines in output file\n  -c, --add-comments          place all comment blocks preceding keyword lines\n                                in output file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --check=NAME            perform syntax check on messages\n                                (ellipsis-unicode, space-ellipsis,\n                                 quote-unicode, bullet-unicode)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --sentence-end=TYPE     type describing the end of sentence\n                                (single-space, which is the default, \n                                 or double-space)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Language specific options:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -a, --extract-all           extract all strings\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only languages C, C++, ObjectiveC, Shell,\n                                Python, Lisp, EmacsLisp, librep, Scheme, Java,\n                                C#, awk, Tcl, Perl, PHP, GCC-source, Glade,\n                                Lua, JavaScript, Vala)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -kWORD, --keyword=WORD      look for WORD as an additional keyword\n  -k, --keyword               do not to use default keywords\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only languages C, C++, ObjectiveC, Shell,\n                                Python, Lisp, EmacsLisp, librep, Scheme, Java,\n                                C#, awk, Tcl, Perl, PHP, GCC-source, Glade,\n                                Lua, JavaScript, Vala, Desktop)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --flag=WORD:ARG:FLAG    additional flag for strings inside the argument\n                              number ARG of keyword WORD\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only languages C, C++, ObjectiveC, Shell,\n                                Python, Lisp, EmacsLisp, librep, Scheme, Java,\n                                C#, awk, YCP, Tcl, Perl, PHP, GCC-source,\n                                Lua, JavaScript, Vala)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -T, --trigraphs             understand ANSI C trigraphs for input\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only languages C, C++, ObjectiveC)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --its=FILE              apply ITS rules from FILE\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only XML based languages)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --qt                    recognize Qt format strings\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only language C++)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --kde                   recognize KDE 4 format strings\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only language C++)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --boost                 recognize Boost format strings\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"                                (only language C++)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --debug                 more detailed formatstring recognition result\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output details:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --color                 use colors and other text attributes always\n      --color=WHEN            use colors and other text attributes if WHEN.\n                              WHEN may be 'always', 'never', 'auto', or 'html'.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --style=STYLEFILE       specify CSS style rule file for --color\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -e, --no-escape             do not use C escapes in output (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -E, --escape                use C escapes in output, no extended chars\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --force-po              write PO file even if empty\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -i, --indent                write the .po file using indented style\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-location           do not write '#: filename:line' lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -n, --add-location          generate '#: filename:line' lines (default)\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --strict                write out strict Uniforum conforming .po file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --properties-output     write out a Java .properties file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --stringtable-output    write out a NeXTstep/GNUstep .strings file\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --itstool               write out itstool comments\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -w, --width=NUMBER          set output page width\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --no-wrap               do not break long message lines, longer than\n                              the output page width, into several lines\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -s, --sort-output           generate sorted output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -F, --sort-by-file          sort output by file location\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --omit-header           don't write header with 'msgid \"\"' entry\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --copyright-holder=STRING  set copyright holder in output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --foreign-user          omit FSF copyright in output for foreign user\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --package-name=PACKAGE  set package name in output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --package-version=VERSION  set package version in output\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"      --msgid-bugs-address=EMAIL@ADDRESS  set report address for msgid bugs\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -m[STRING], --msgstr-prefix[=STRING]  use STRING or \"\" as prefix for msgstr\n                                values\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -M[STRING], --msgstr-suffix[=STRING]  use STRING or \"\" as suffix for msgstr\n                                values\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
void	O
exclude_directive_domain	O
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
char	O
*	O
name	*(char)
)	O
{	O
po_gram_error_at_line	(*(struct(*(char),long)),*(char))->(void)
(	O
&	O
gram_pos	struct(*(char),long)
,	O
_	O
(	O
"this file may not contain domain directives"	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
exclude_directive_message	O
(	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
,	O
char	O
*	O
msgctxt	*(char)
,	O
char	O
*	O
msgid	*(char)
,	O
lex_pos_ty	struct
*	O
msgid_pos	*(struct(*(char),long))
,	O
char	O
*	O
msgid_plural	*(char)
,	O
char	O
*	O
msgstr	*(char)
,	O
size_t	long
msgstr_len	long
,	O
lex_pos_ty	struct
*	O
msgstr_pos	*(struct(*(char),long))
,	O
char	O
*	O
prev_msgctxt	*(char)
,	O
char	O
*	O
prev_msgid	*(char)
,	O
char	O
*	O
prev_msgid_plural	*(char)
,	O
bool	bool
force_fuzzy	bool
,	O
bool	bool
obsolete	bool
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
if	O
(	O
exclude	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
==	O
NULL	O
)	O
exclude	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
message_list_alloc	(bool)->(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))
(	O
true	O
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
exclude	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
msgctxt	*(char)
,	O
msgid	*(char)
)	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
msgid	*(char)
)	O
;	O
else	O
{	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
msgctxt	*(char)
,	O
msgid	*(char)
,	O
msgid_plural	*(char)
,	O
""	*(char)
,	O
1	int
,	O
msgstr_pos	*(struct(*(char),long))
)	O
;	O
message_list_append	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))->(void)
(	O
exclude	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
)	O
;	O
}	O
free	(*(void))->(void)
(	O
msgstr	*(char)
)	O
;	O
}	O
static	O
abstract_catalog_reader_class_ty	struct
exclude_methods	O
=	O
{	O
sizeof	O
(	O
abstract_catalog_reader_ty	struct
)	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
exclude_directive_domain	O
,	O
exclude_directive_message	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
}	O
;	O
static	O
void	O
read_exclusion_file	O
(	O
char	O
*	O
filename	*(char)
)	O
{	O
char	O
*	O
real_filename	*(char)
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
open_catalog_file	(*(char),*(*(char)),bool)->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
&	O
real_filename	*(char)
,	O
true	O
)	O
;	O
abstract_catalog_reader_ty	struct
*	O
pop	*(struct)
;	O
pop	*(struct)
=	O
catalog_reader_alloc	(*(struct(long,*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*((*`,*`)->(void)),*((*`,*`,*`,*`,*`,*`,long,*`,*`,*`,*`,bool,bool)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`,long)->(void)),*((*`,*`)->(void)))))->(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))
(	O
&	O
exclude_methods	O
)	O
;	O
catalog_reader_parse	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(struct(*((*`,*`,*`,*`)->(void)),bool)))->(void)
(	O
pop	*(struct)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
real_filename	*(char)
,	O
filename	*(char)
,	O
&	O
input_format_po	struct(*((*(struct(*`)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),*(char))->(void)),bool)
)	O
;	O
catalog_reader_free	(*(struct(*(struct(long,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(void)
(	O
pop	*(struct)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
static	O
void	O
flag_context_list_table_insert	O
(	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
table	*(struct)
,	O
unsigned	O
int	O
index	(*(char),int)->(*(char))
,	O
const	O
char	O
*	O
name_start	*(char)
,	O
const	O
char	O
*	O
name_end	*(char)
,	O
int	O
argnum	int
,	O
enum	O
is_format	enum(int,int,int,int,int,int)
value	enum(int,int,int,int,int,int)
,	O
bool	bool
pass	bool
)	O
{	O
char	O
*	O
allocated_name	O
=	O
NULL	O
;	O
if	O
(	O
table	*(struct)
==	O
&	O
flag_table_lisp	O
)	O
{	O
size_t	long
name_len	O
=	O
name_end	*(char)
-	O
name_start	*(char)
;	O
char	O
*	O
name	*(char)
=	O
allocated_name	O
=	O
(	O
char	O
*	O
)	O
xmalloca	O
(	O
name_len	O
)	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
name_len	O
;	O
i	long
++	O
)	O
name	*(char)
[	O
i	long
]	O
=	O
(	O
name_start	*(char)
[	O
i	long
]	O
>=	O
'a'	O
&&	O
name_start	*(char)
[	O
i	long
]	O
<=	O
'z'	O
?	O
name_start	*(char)
[	O
i	long
]	O
-	O
'a'	O
+	O
'A'	O
:	O
name_start	*(char)
[	O
i	long
]	O
)	O
;	O
name_start	*(char)
=	O
name	*(char)
;	O
name_end	*(char)
=	O
name	*(char)
+	O
name_len	O
;	O
}	O
else	O
if	O
(	O
table	*(struct)
==	O
&	O
flag_table_tcl	O
)	O
{	O
if	O
(	O
name_end	*(char)
-	O
name_start	*(char)
>	O
2	int
&&	O
name_start	*(char)
[	O
0	int
]	O
==	O
':'	O
&&	O
name_start	*(char)
[	O
1	int
]	O
==	O
':'	O
)	O
name_start	*(char)
+=	O
2	int
;	O
}	O
flag_context_list_table_add	(*(struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))),int,*(char),*(char),int,enum(int,int,int,int,int,int),bool)->(void)
(	O
table	*(struct)
,	O
index	(*(char),int)->(*(char))
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
if	O
(	O
allocated_name	O
!=	O
NULL	O
)	O
freea	(*(void))->(void)
(	O
allocated_name	O
)	O
;	O
}	O
void	O
xgettext_record_flag	(*(char))->(void)
(	O
const	O
char	O
*	O
optionstring	*(char)
)	O
{	O
const	O
char	O
*	O
colon1	O
;	O
const	O
char	O
*	O
colon2	O
;	O
for	O
(	O
colon2	O
=	O
optionstring	*(char)
+	O
strlen	(*(char))->(long)
(	O
optionstring	*(char)
)	O
;	O
;	O
)	O
{	O
if	O
(	O
colon2	O
==	O
optionstring	*(char)
)	O
goto	O
err	O
;	O
colon2	O
--	O
;	O
if	O
(	O
*	O
colon2	O
==	O
':'	O
)	O
break	O
;	O
}	O
for	O
(	O
colon1	O
=	O
colon2	O
;	O
;	O
)	O
{	O
if	O
(	O
colon1	O
==	O
optionstring	*(char)
)	O
goto	O
err	O
;	O
colon1	O
--	O
;	O
if	O
(	O
*	O
colon1	O
==	O
':'	O
)	O
break	O
;	O
}	O
{	O
const	O
char	O
*	O
name_start	*(char)
=	O
optionstring	*(char)
;	O
const	O
char	O
*	O
name_end	*(char)
=	O
colon1	O
;	O
const	O
char	O
*	O
argnum_start	O
=	O
colon1	O
+	O
1	int
;	O
const	O
char	O
*	O
argnum_end	O
=	O
colon2	O
;	O
const	O
char	O
*	O
flag	*(int)
=	O
colon2	O
+	O
1	int
;	O
int	O
argnum	int
;	O
if	O
(	O
name_end	*(char)
==	O
name_start	*(char)
)	O
goto	O
err	O
;	O
if	O
(	O
argnum_end	O
==	O
argnum_start	O
)	O
goto	O
err	O
;	O
{	O
char	O
*	O
endp	O
;	O
argnum	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
argnum_start	O
,	O
&	O
endp	O
,	O
10	int
)	O
;	O
if	O
(	O
endp	O
!=	O
argnum_end	O
)	O
goto	O
err	O
;	O
}	O
if	O
(	O
argnum	int
<=	O
0	int
)	O
goto	O
err	O
;	O
{	O
bool	bool
pass	bool
;	O
pass	bool
=	O
false	O
;	O
if	O
(	O
strlen	(*(char))->(long)
(	O
flag	*(int)
)	O
>=	O
5	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
flag	*(int)
,	O
"pass-"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
pass	bool
=	O
true	O
;	O
flag	*(int)
+=	O
5	int
;	O
}	O
if	O
(	O
strlen	(*(char))->(long)
(	O
flag	*(int)
)	O
>=	O
7	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
flag	*(int)
+	O
strlen	(*(char))->(long)
(	O
flag	*(int)
)	O
-	O
7	int
,	O
"-format"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
size_t	long
n	long
;	O
enum	O
is_format	enum(int,int,int,int,int,int)
value	enum(int,int,int,int,int,int)
;	O
size_t	long
type	O
;	O
p	*(void)
=	O
flag	*(int)
;	O
n	long
=	O
strlen	(*(char))->(long)
(	O
flag	*(int)
)	O
-	O
7	int
;	O
if	O
(	O
n	long
>=	O
3	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"no-"	*(char)
,	O
3	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
3	int
;	O
n	long
-=	O
3	int
;	O
value	enum(int,int,int,int,int,int)
=	O
no	int
;	O
}	O
else	O
if	O
(	O
n	long
>=	O
9	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"possible-"	*(char)
,	O
9	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
9	int
;	O
n	long
-=	O
9	int
;	O
value	enum(int,int,int,int,int,int)
=	O
possible	int
;	O
}	O
else	O
if	O
(	O
n	long
>=	O
11	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
p	*(void)
,	O
"impossible-"	*(char)
,	O
11	int
)	O
==	O
0	int
)	O
{	O
p	*(void)
+=	O
11	int
;	O
n	long
-=	O
11	int
;	O
value	enum(int,int,int,int,int,int)
=	O
impossible	int
;	O
}	O
else	O
value	enum(int,int,int,int,int,int)
=	O
yes_according_to_context	int
;	O
for	O
(	O
type	O
=	O
0	int
;	O
type	O
<	O
NFORMATS	int
;	O
type	O
++	O
)	O
if	O
(	O
strlen	(*(char))->(long)
(	O
format_language	array(*(char))
[	O
type	O
]	O
)	O
==	O
n	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
format_language	array(*(char))
[	O
type	O
]	O
,	O
p	*(void)
,	O
n	long
)	O
==	O
0	int
)	O
{	O
switch	O
(	O
type	O
)	O
{	O
case	O
format_c	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_c	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_qt	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_kde	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_boost	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_objc	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_objc	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_objc	O
,	O
1	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_sh	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_sh	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_python	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_python	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_python_brace	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_python	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_lisp	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_lisp	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_elisp	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_elisp	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_librep	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_librep	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_scheme	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_scheme	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_smalltalk	int
:	O
break	O
;	O
case	O
format_java	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_java	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_csharp	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_csharp	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_awk	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_awk	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_pascal	int
:	O
break	O
;	O
case	O
format_ycp	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_ycp	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_tcl	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_tcl	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_perl	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_perl	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_perl_brace	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_perl	O
,	O
1	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_php	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_php	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_gcc_internal	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_gcc_internal	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_gfc_internal	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_gcc_internal	O
,	O
1	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_qt	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_qt	O
,	O
1	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_qt_plural	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_qt	O
,	O
2	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_kde	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_kde	O
,	O
1	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_kde_kuit	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_kde	O
,	O
2	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_boost	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_cxx_boost	O
,	O
1	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_lua	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_lua	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
case	O
format_javascript	int
:	O
flag_context_list_table_insert	O
(	O
&	O
flag_table_javascript	O
,	O
0	int
,	O
name_start	*(char)
,	O
name_end	*(char)
,	O
argnum	int
,	O
value	enum(int,int,int,int,int,int)
,	O
pass	bool
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
;	O
}	O
}	O
}	O
}	O
err	O
:	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"A --flag argument doesn't have the <keyword>:<argnum>:[pass-]<flag> syntax: %s"	*(char)
)	O
,	O
optionstring	*(char)
)	O
;	O
}	O
static	O
string_list_ty	struct
*	O
comment	*(struct(*(*(char)),long,long))
;	O
static	O
void	O
xgettext_comment_add	O
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
comment	*(struct(*(*(char)),long,long))
==	O
NULL	O
)	O
comment	*(struct(*(*(char)),long,long))
=	O
string_list_alloc	()->(*(struct(*(*(char)),long,long)))
(	O
)	O
;	O
string_list_append	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
comment	*(struct(*(*(char)),long,long))
,	O
str	*(char)
)	O
;	O
}	O
const	O
char	O
*	O
xgettext_comment	(long)->(*(char))
(	O
size_t	long
n	long
)	O
{	O
if	O
(	O
comment	*(struct(*(*(char)),long,long))
==	O
NULL	O
||	O
n	long
>=	O
comment	*(struct(*(*(char)),long,long))
->	O
nitems	long
)	O
return	O
NULL	O
;	O
return	O
comment	*(struct(*(*(char)),long,long))
->	O
item	*(*(char))
[	O
n	long
]	O
;	O
}	O
void	O
xgettext_comment_reset	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
comment	*(struct(*(*(char)),long,long))
!=	O
NULL	O
)	O
{	O
string_list_free	(*(struct(*(*(char)),long,long)))->(void)
(	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
comment	*(struct(*(*(char)),long,long))
=	O
NULL	O
;	O
}	O
}	O
refcounted_string_list_ty	struct
*	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
;	O
void	O
savable_comment_add	(*(char))->(void)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
==	O
NULL	O
)	O
{	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
=	O
XMALLOC	O
(	O
refcounted_string_list_ty	struct
)	O
;	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
refcount	int
=	O
1	int
;	O
string_list_init	(*(struct(*(*(char)),long,long)))->(void)
(	O
&	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
)	O
;	O
}	O
else	O
if	O
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
refcount	int
>	O
1	int
)	O
{	O
struct	O
string_list_ty	struct
*	O
oldcontents	O
;	O
size_t	long
i	long
;	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
refcount	int
--	O
;	O
oldcontents	O
=	O
&	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
;	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
=	O
XMALLOC	O
(	O
refcounted_string_list_ty	struct
)	O
;	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
refcount	int
=	O
1	int
;	O
string_list_init	(*(struct(*(*(char)),long,long)))->(void)
(	O
&	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
oldcontents	O
->	O
nitems	long
;	O
i	long
++	O
)	O
string_list_append	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
&	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
,	O
oldcontents	O
->	O
item	*(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
string_list_append	(*(struct(*(*(char)),long,long)),*(char))->(void)
(	O
&	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
,	O
str	*(char)
)	O
;	O
}	O
void	O
savable_comment_reset	()->(void)
(	O
)	O
{	O
drop_reference	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
)	O
;	O
savable_comment	*(struct(int,struct(*(*(char)),long,long)))
=	O
NULL	O
;	O
}	O
void	O
savable_comment_to_xgettext_comment	(*(struct(int,struct(*(*`),long,long))))->(void)
(	O
refcounted_string_list_ty	struct
*	O
rslp	*(struct(int,struct(*(*(char)),long,long)))
)	O
{	O
xgettext_comment_reset	()->(void)
(	O
)	O
;	O
if	O
(	O
rslp	*(struct(int,struct(*(*(char)),long,long)))
!=	O
NULL	O
)	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
rslp	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
.	O
nitems	long
;	O
i	long
++	O
)	O
xgettext_comment_add	O
(	O
rslp	*(struct(int,struct(*(*(char)),long,long)))
->	O
contents	array(char)
.	O
item	*(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
}	O
static	O
FILE	struct
*	O
xgettext_open	O
(	O
const	O
char	O
*	O
fn	O
,	O
char	O
*	O
*	O
logical_file_name_p	O
,	O
char	O
*	O
*	O
real_file_name_p	*(*(char))
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
new_name	O
;	O
char	O
*	O
logical_file_name	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fn	O
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
new_name	O
=	O
xstrdup	(*(char))->(*(char))
(	O
_	O
(	O
"standard input"	*(char)
)	O
)	O
;	O
logical_file_name	O
=	O
xstrdup	(*(char))->(*(char))
(	O
new_name	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
else	O
if	O
(	O
IS_ABSOLUTE_PATH	O
(	O
fn	O
)	O
)	O
{	O
new_name	O
=	O
xstrdup	(*(char))->(*(char))
(	O
fn	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fn	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	*(char)
)	O
,	O
fn	O
)	O
;	O
logical_file_name	O
=	O
xstrdup	(*(char))->(*(char))
(	O
new_name	O
)	O
;	O
}	O
else	O
{	O
int	O
j	O
;	O
for	O
(	O
j	O
=	O
0	int
;	O
;	O
++	O
j	O
)	O
{	O
const	O
char	O
*	O
dir	O
=	O
dir_list_nth	(int)->(*(char))
(	O
j	O
)	O
;	O
if	O
(	O
dir	O
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
ENOENT	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	*(char)
)	O
,	O
fn	O
)	O
;	O
new_name	O
=	O
xconcatenated_filename	(*(char),*(char),*(char))->(*(char))
(	O
dir	O
,	O
fn	O
,	O
NULL	O
)	O
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
new_name	O
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
break	O
;	O
if	O
(	O
errno	O
!=	O
ENOENT	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"error while opening \"%s\" for reading"	*(char)
)	O
,	O
new_name	O
)	O
;	O
free	(*(void))->(void)
(	O
new_name	O
)	O
;	O
}	O
logical_file_name	O
=	O
xstrdup	(*(char))->(*(char))
(	O
fn	O
)	O
;	O
}	O
*	O
logical_file_name_p	O
=	O
logical_file_name	O
;	O
*	O
real_file_name_p	*(*(char))
=	O
new_name	O
;	O
return	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
struct	O
formatstring_parser	O
*	O
current_formatstring_parser1	*(struct)
;	O
struct	O
formatstring_parser	O
*	O
current_formatstring_parser2	*(struct)
;	O
struct	O
formatstring_parser	O
*	O
current_formatstring_parser3	*(struct)
;	O
static	O
void	O
extract_from_file	O
(	O
const	O
char	O
*	O
file_name	*(char)
,	O
extractor_ty	O
extractor	O
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
char	O
*	O
logical_file_name	O
;	O
char	O
*	O
real_file_name	O
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
xgettext_open	O
(	O
file_name	*(char)
,	O
&	O
logical_file_name	O
,	O
&	O
real_file_name	O
)	O
;	O
xgettext_current_source_encoding	*(char)
=	O
xgettext_global_source_encoding	*(char)
;	O
xgettext_current_source_iconv	*(void)
=	O
xgettext_global_source_iconv	*(void)
;	O
current_formatstring_parser1	*(struct)
=	O
extractor	O
.	O
formatstring_parser1	O
;	O
current_formatstring_parser2	*(struct)
=	O
extractor	O
.	O
formatstring_parser2	O
;	O
current_formatstring_parser3	*(struct)
=	O
extractor	O
.	O
formatstring_parser3	O
;	O
extractor	O
.	O
func	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
real_file_name	O
,	O
logical_file_name	O
,	O
extractor	O
.	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
free	(*(void))->(void)
(	O
logical_file_name	O
)	O
;	O
free	(*(void))->(void)
(	O
real_file_name	O
)	O
;	O
}	O
static	O
message_ty	struct
*	O
xgettext_its_extract_callback	O
(	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
const	O
char	O
*	O
msgctxt	*(char)
,	O
const	O
char	O
*	O
msgid	*(char)
,	O
lex_pos_ty	struct
*	O
pos	struct(*(char),long)
,	O
const	O
char	O
*	O
extracted_comment	*(char)
,	O
const	O
char	O
*	O
marker	O
,	O
enum	O
its_whitespace_type_ty	O
whitespace	O
)	O
{	O
message_ty	struct
*	O
message	*(char)
;	O
message	*(char)
=	O
remember_a_message	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),bool,struct(int,int,int,int,int,int),*(struct(*(char),long)),*(char),*(struct(int,struct(*(*`),long,long))),bool)->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
msgctxt	*(char)
==	O
NULL	O
?	O
NULL	O
:	O
xstrdup	(*(char))->(*(char))
(	O
msgctxt	*(char)
)	O
,	O
xstrdup	(*(char))->(*(char))
(	O
msgid	*(char)
)	O
,	O
false	O
,	O
null_context	struct(int,int,int,int,int,int)
,	O
pos	struct(*(char),long)
,	O
extracted_comment	*(char)
,	O
NULL	O
,	O
false	O
)	O
;	O
if	O
(	O
add_itstool_comments	O
)	O
{	O
char	O
*	O
dot	O
=	O
xasprintf	(*(char))->(*(char))
(	O
"(itstool) path: %s"	*(char)
,	O
marker	O
)	O
;	O
message_comment_dot_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
message	*(char)
,	O
dot	O
)	O
;	O
free	(*(void))->(void)
(	O
dot	O
)	O
;	O
if	O
(	O
whitespace	O
==	O
ITS_WHITESPACE_PRESERVE	O
)	O
message	*(char)
->	O
do_wrap	enum(int,int,int,int,int,int)
=	O
no	int
;	O
}	O
return	O
message	*(char)
;	O
}	O
static	O
void	O
extract_from_xml_file	O
(	O
const	O
char	O
*	O
file_name	*(char)
,	O
its_rule_list_ty	O
*	O
rules	O
,	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
char	O
*	O
logical_file_name	O
;	O
char	O
*	O
real_file_name	O
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
xgettext_open	O
(	O
file_name	*(char)
,	O
&	O
logical_file_name	O
,	O
&	O
real_file_name	O
)	O
;	O
xgettext_current_source_encoding	*(char)
=	O
po_charset_utf8	*(char)
;	O
xgettext_current_source_iconv	*(void)
=	O
xgettext_global_source_iconv	*(void)
;	O
its_rule_list_extract	O
(	O
rules	O
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
real_file_name	O
,	O
logical_file_name	O
,	O
NULL	O
,	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
,	O
xgettext_its_extract_callback	O
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
free	(*(void))->(void)
(	O
logical_file_name	O
)	O
;	O
free	(*(void))->(void)
(	O
real_file_name	O
)	O
;	O
}	O
bool	bool
recognize_qt_formatstrings	()->(bool)
(	O
void	O
)	O
{	O
return	O
recognize_format_qt	O
&&	O
current_formatstring_parser3	*(struct)
==	O
&	O
formatstring_qt_plural	O
;	O
}	O
static	O
message_ty	struct
*	O
construct_header	O
(	O
)	O
{	O
char	O
*	O
project_id_version	O
;	O
time_t	long
now	O
;	O
char	O
*	O
timestring	O
;	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
char	O
*	O
msgstr	*(char)
;	O
char	O
*	O
comment	*(struct(*(*(char)),long,long))
;	O
static	O
lex_pos_ty	struct
pos	struct(*(char),long)
=	O
{	O
__FILE__	O
,	O
__LINE__	O
}	O
;	O
if	O
(	O
package_name	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
package_version	O
!=	O
NULL	O
)	O
project_id_version	O
=	O
xasprintf	(*(char))->(*(char))
(	O
"%s %s"	*(char)
,	O
package_name	O
,	O
package_version	O
)	O
;	O
else	O
project_id_version	O
=	O
xasprintf	(*(char))->(*(char))
(	O
"%s"	*(char)
,	O
package_name	O
)	O
;	O
}	O
else	O
project_id_version	O
=	O
xstrdup	(*(char))->(*(char))
(	O
"PACKAGE VERSION"	*(char)
)	O
;	O
if	O
(	O
msgid_bugs_address	O
!=	O
NULL	O
&&	O
msgid_bugs_address	O
[	O
0	int
]	O
==	O
'\0'	O
)	O
multiline_warning	(*(char),*(char))->(void)
(	O
xasprintf	(*(char))->(*(char))
(	O
_	O
(	O
"warning: "	*(char)
)	O
)	O
,	O
xstrdup	(*(char))->(*(char))
(	O
_	O
(	O
"The option --msgid-bugs-address was not specified.\nIf you are using a 'Makevars' file, please specify\nthe MSGID_BUGS_ADDRESS variable there; otherwise please\nspecify an --msgid-bugs-address command line option.\n"	*(char)
)	O
)	O
)	O
;	O
time	struct(long,long)
(	O
&	O
now	O
)	O
;	O
timestring	O
=	O
po_strftime	O
(	O
&	O
now	O
)	O
;	O
msgstr	*(char)
=	O
xasprintf	(*(char))->(*(char))
(	O
"Project-Id-Version: %s\nReport-Msgid-Bugs-To: %s\nPOT-Creation-Date: %s\nPO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\nLast-Translator: FULL NAME <EMAIL@ADDRESS>\nLanguage-Team: LANGUAGE <LL@li.org>\nLanguage: \nMIME-Version: 1.0\nContent-Type: text/plain; charset=CHARSET\nContent-Transfer-Encoding: 8bit\n"	*(char)
,	O
project_id_version	O
,	O
msgid_bugs_address	O
!=	O
NULL	O
?	O
msgid_bugs_address	O
:	O
""	*(char)
,	O
timestring	O
)	O
;	O
free	(*(void))->(void)
(	O
timestring	O
)	O
;	O
free	(*(void))->(void)
(	O
project_id_version	O
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
message_alloc	(*(char),*(char),*(char),*(char),long,*(struct(*(char),long)))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
NULL	O
,	O
""	*(char)
,	O
NULL	O
,	O
msgstr	*(char)
,	O
strlen	(*(char))->(long)
(	O
msgstr	*(char)
)	O
+	O
1	int
,	O
&	O
pos	struct(*(char),long)
)	O
;	O
if	O
(	O
copyright_holder	O
[	O
0	int
]	O
!=	O
'\0'	O
)	O
comment	*(struct(*(*(char)),long,long))
=	O
xasprintf	(*(char))->(*(char))
(	O
"SOME DESCRIPTIVE TITLE.\nCopyright (C) YEAR %s\nThis file is distributed under the same license as the %s package.\nFIRST AUTHOR <EMAIL@ADDRESS>, YEAR.\n"	*(char)
,	O
copyright_holder	O
,	O
package_name	O
!=	O
NULL	O
?	O
package_name	O
:	O
"PACKAGE"	*(char)
)	O
;	O
else	O
comment	*(struct(*(*(char)),long,long))
=	O
xstrdup	(*(char))->(*(char))
(	O
"SOME DESCRIPTIVE TITLE.\nThis file is put in the public domain.\nFIRST AUTHOR <EMAIL@ADDRESS>, YEAR.\n"	*(char)
)	O
;	O
message_comment_append	(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))),*(char))->(void)
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
,	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
free	(*(void))->(void)
(	O
comment	*(struct(*(*(char)),long,long))
)	O
;	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
is_fuzzy	bool
=	O
true	O
;	O
return	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
;	O
}	O
static	O
void	O
finalize_header	O
(	O
msgdomain_list_ty	struct
*	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
)	O
{	O
{	O
bool	bool
has_plural	O
;	O
size_t	long
i	long
,	O
j	O
;	O
has_plural	O
=	O
false	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
i	long
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
for	O
(	O
j	O
=	O
0	int
;	O
j	O
<	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
nitems	long
;	O
j	O
++	O
)	O
{	O
message_ty	struct
*	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
=	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
->	O
item	*(*(char))
[	O
j	O
]	O
;	O
if	O
(	O
mp	*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*(*`),long,long)),*(struct(*(*`),long,long)),long,*(struct(*(char),long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*(char),*(char),*(char),*(char),long,struct(*`,long),*(struct`),*(struct`),long,*(struct`),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct`),int,*(struct`))),int,*(struct(*(char),long,*(char),*(struct`),*(struct`),*(char)))))
->	O
msgid_plural	*(char)
!=	O
NULL	O
)	O
{	O
has_plural	O
=	O
true	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
has_plural	O
)	O
break	O
;	O
}	O
if	O
(	O
has_plural	O
)	O
{	O
message_ty	struct
*	O
header	O
=	O
message_list_search	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char))->(*(struct(*(char),*(char),*(char),*(char),long,struct(*(char),long),*(struct(*`,long,long)),*(struct(*`,long,long)),long,*(struct(*`,long)),bool,array(enum(int,int,int,int,int,int)),struct(int,int),enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*(char),*(char),*(char),bool,int,*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`)),int,*(struct(*`,long,*`,*`,*`,*`)))))
(	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
NULL	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
header	O
!=	O
NULL	O
&&	O
c_strstr	(*(char),*(char))->(*(char))
(	O
header	O
->	O
msgstr	*(char)
,	O
"Plural-Forms:"	*(char)
)	O
==	O
NULL	O
)	O
{	O
size_t	long
insertpos	O
=	O
strlen	(*(char))->(long)
(	O
header	O
->	O
msgstr	*(char)
)	O
;	O
const	O
char	O
*	O
suffix	*(char)
;	O
size_t	long
suffix_len	O
;	O
char	O
*	O
new_msgstr	O
;	O
suffix	*(char)
=	O
"\nPlural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"	*(char)
;	O
if	O
(	O
insertpos	O
==	O
0	int
||	O
header	O
->	O
msgstr	*(char)
[	O
insertpos	O
-	O
1	int
]	O
==	O
'\n'	O
)	O
suffix	*(char)
++	O
;	O
suffix_len	O
=	O
strlen	(*(char))->(long)
(	O
suffix	*(char)
)	O
;	O
new_msgstr	O
=	O
XNMALLOC	O
(	O
header	O
->	O
msgstr_len	long
+	O
suffix_len	O
,	O
char	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_msgstr	O
,	O
header	O
->	O
msgstr	*(char)
,	O
insertpos	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_msgstr	O
+	O
insertpos	O
,	O
suffix	*(char)
,	O
suffix_len	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_msgstr	O
+	O
insertpos	O
+	O
suffix_len	O
,	O
header	O
->	O
msgstr	*(char)
+	O
insertpos	O
,	O
header	O
->	O
msgstr_len	long
-	O
insertpos	O
)	O
;	O
header	O
->	O
msgstr	*(char)
=	O
new_msgstr	O
;	O
header	O
->	O
msgstr_len	long
=	O
header	O
->	O
msgstr_len	long
+	O
suffix_len	O
;	O
}	O
}	O
}	O
{	O
bool	bool
has_nonascii	O
=	O
false	O
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
nitems	long
;	O
i	long
++	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
i	long
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
if	O
(	O
!	O
is_ascii_message_list	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
)	O
)	O
has_nonascii	O
=	O
true	O
;	O
}	O
if	O
(	O
has_nonascii	O
||	O
output_syntax	O
->	O
requires_utf8	O
)	O
{	O
message_list_ty	struct
*	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
=	O
mdlp	*(struct(*(*(struct(*`,*`))),long,long,bool,*(char)))
->	O
item	*(*(char))
[	O
0	int
]	O
->	O
messages	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
;	O
iconv_message_list	(*(struct(*(*(struct`)),long,long,bool,struct(long,long,*(struct`),*(struct`),struct(long,*`,*`,*`,*`,union`,long,union`,union`,*`,int,int,int)))),*(char),*(char),*(char))->(bool)
(	O
mlp	*(struct(*(*(struct(*`,*`,*`,*`,long,struct`,*`,*`,long,*`,bool,array(enum(int,int,int,int,int,int)),struct`,enum(int,int,int,int,int,int),array(enum(int,int,int,int,int,int)),*`,*`,*`,bool,int,*`,int,*`))),long,long,bool,struct(long,long,*(struct),*(struct),struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),long,union(*`,*`),union(*`,*`),*(void),int,int,int))))
,	O
po_charset_utf8	*(char)
,	O
po_charset_utf8	*(char)
,	O
NULL	O
)	O
;	O
}	O
}	O
}	O
static	O
extractor_ty	O
language_to_extractor	O
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
table_ty	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
extractor_func	O
func	O
;	O
flag_context_list_table_ty	struct(long,long,*(struct),*(struct),struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int))
*	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
struct	O
formatstring_parser	O
*	O
formatstring_parser1	O
;	O
struct	O
formatstring_parser	O
*	O
formatstring_parser2	O
;	O
}	O
;	O
typedef	O
struct	O
table_ty	O
table_ty	O
;	O
static	O
table_ty	O
table	*(struct)
[	O
]	O
=	O
{	O
SCANNERS_C	O
SCANNERS_PO	O
SCANNERS_SH	O
SCANNERS_PYTHON	O
SCANNERS_LISP	O
SCANNERS_ELISP	O
SCANNERS_LIBREP	O
SCANNERS_SCHEME	O
SCANNERS_SMALLTALK	O
SCANNERS_JAVA	O
SCANNERS_PROPERTIES	O
SCANNERS_CSHARP	O
SCANNERS_AWK	O
SCANNERS_YCP	O
SCANNERS_TCL	O
SCANNERS_PERL	O
SCANNERS_PHP	O
SCANNERS_STRINGTABLE	O
SCANNERS_RST	O
SCANNERS_GLADE	O
SCANNERS_LUA	O
SCANNERS_JAVASCRIPT	O
SCANNERS_VALA	O
SCANNERS_GSETTINGS	O
SCANNERS_DESKTOP	O
SCANNERS_APPDATA	O
}	O
;	O
table_ty	O
*	O
tp	O
;	O
for	O
(	O
tp	O
=	O
table	*(struct)
;	O
tp	O
<	O
ENDOF	O
(	O
table	*(struct)
)	O
;	O
++	O
tp	O
)	O
if	O
(	O
c_strcasecmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
tp	O
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
extractor_ty	O
result	*(*(void))
;	O
result	*(*(void))
.	O
func	O
=	O
tp	O
->	O
func	O
;	O
result	*(*(void))
.	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
tp	O
->	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
;	O
result	*(*(void))
.	O
formatstring_parser1	O
=	O
tp	O
->	O
formatstring_parser1	O
;	O
result	*(*(void))
.	O
formatstring_parser2	O
=	O
tp	O
->	O
formatstring_parser2	O
;	O
result	*(*(void))
.	O
formatstring_parser3	O
=	O
NULL	O
;	O
if	O
(	O
recognize_format_qt	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
tp	O
->	O
name	*(char)
,	O
"C++"	*(char)
)	O
==	O
0	int
)	O
{	O
result	*(*(void))
.	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
&	O
flag_table_cxx_qt	O
;	O
result	*(*(void))
.	O
formatstring_parser2	O
=	O
&	O
formatstring_qt	O
;	O
result	*(*(void))
.	O
formatstring_parser3	O
=	O
&	O
formatstring_qt_plural	O
;	O
}	O
if	O
(	O
recognize_format_kde	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
tp	O
->	O
name	*(char)
,	O
"C++"	*(char)
)	O
==	O
0	int
)	O
{	O
result	*(*(void))
.	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
&	O
flag_table_cxx_kde	O
;	O
result	*(*(void))
.	O
formatstring_parser2	O
=	O
&	O
formatstring_kde	O
;	O
result	*(*(void))
.	O
formatstring_parser3	O
=	O
&	O
formatstring_kde_kuit	O
;	O
}	O
if	O
(	O
recognize_format_boost	O
&&	O
strcmp	(*(char),*(char))->(int)
(	O
tp	O
->	O
name	*(char)
,	O
"C++"	*(char)
)	O
==	O
0	int
)	O
{	O
result	*(*(void))
.	O
flag_table	*(struct(long,long,*(struct),*(struct),struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),long,union(*((long)->(*`)),*((*`,long)->(*`))),union(*((*`)->(void)),*((*`,*`)->(void))),*(void),int,int,int)))
=	O
&	O
flag_table_cxx_boost	O
;	O
result	*(*(void))
.	O
formatstring_parser2	O
=	O
&	O
formatstring_boost	O
;	O
}	O
return	O
result	*(*(void))
;	O
}	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"language '%s' unknown"	*(char)
)	O
,	O
name	*(char)
)	O
;	O
{	O
extractor_ty	O
result	*(*(void))
=	O
{	O
NULL	O
,	O
NULL	O
,	O
NULL	O
,	O
NULL	O
}	O
;	O
return	O
result	*(*(void))
;	O
}	O
}	O
static	O
const	O
char	O
*	O
extension_to_language	O
(	O
const	O
char	O
*	O
extension	O
)	O
{	O
struct	O
table_ty	O
{	O
const	O
char	O
*	O
extension	O
;	O
const	O
char	O
*	O
language	O
;	O
}	O
;	O
typedef	O
struct	O
table_ty	O
table_ty	O
;	O
static	O
table_ty	O
table	*(struct)
[	O
]	O
=	O
{	O
EXTENSIONS_C	O
EXTENSIONS_PO	O
EXTENSIONS_SH	O
EXTENSIONS_PYTHON	O
EXTENSIONS_LISP	O
EXTENSIONS_ELISP	O
EXTENSIONS_LIBREP	O
EXTENSIONS_SCHEME	O
EXTENSIONS_SMALLTALK	O
EXTENSIONS_JAVA	O
EXTENSIONS_PROPERTIES	O
EXTENSIONS_CSHARP	O
EXTENSIONS_AWK	O
EXTENSIONS_YCP	O
EXTENSIONS_TCL	O
EXTENSIONS_PERL	O
EXTENSIONS_PHP	O
EXTENSIONS_STRINGTABLE	O
EXTENSIONS_RST	O
EXTENSIONS_GLADE	O
EXTENSIONS_LUA	O
EXTENSIONS_JAVASCRIPT	O
EXTENSIONS_VALA	O
EXTENSIONS_GSETTINGS	O
EXTENSIONS_DESKTOP	O
EXTENSIONS_APPDATA	O
}	O
;	O
table_ty	O
*	O
tp	O
;	O
for	O
(	O
tp	O
=	O
table	*(struct)
;	O
tp	O
<	O
ENDOF	O
(	O
table	*(struct)
)	O
;	O
++	O
tp	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
extension	O
,	O
tp	O
->	O
extension	O
)	O
==	O
0	int
)	O
return	O
tp	O
->	O
language	O
;	O
return	O
NULL	O
;	O
}	O
