static	O
enum	O
{	O
default_format	int
,	O
short_format	int
,	O
long_format	int
,	O
ip_format	int
}	O
format	enum(int,int,int,int)
;	O
static	O
const	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"fqdn"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"ip-address"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'i'	O
}	O
,	O
{	O
"long"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'f'	O
}	O
,	O
{	O
"short"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
print_hostname	()->(void)
(	O
void	O
)	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
int	O
optchar	int
;	O
bool	bool
do_help	bool
;	O
bool	bool
do_version	bool
;	O
set_program_name	(*(char))->(void)
(	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
error_print_progname	*(()->(void))
=	O
maybe_print_progname	()->(void)
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
relocate	O
(	O
LOCALEDIR	O
)	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
atexit	(*(()->(void)))->(int)
(	O
close_stdout	()->(void)
)	O
;	O
do_help	bool
=	O
false	int
;	O
do_version	bool
=	O
false	int
;	O
format	enum(int,int,int,int)
=	O
default_format	int
;	O
while	O
(	O
(	O
optchar	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"fhisV"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
EOF	O
)	O
switch	O
(	O
optchar	int
)	O
{	O
case	O
'\0'	O
:	O
break	O
;	O
case	O
'f'	O
:	O
format	enum(int,int,int,int)
=	O
long_format	int
;	O
break	O
;	O
case	O
's'	O
:	O
format	enum(int,int,int,int)
=	O
short_format	int
;	O
break	O
;	O
case	O
'i'	O
:	O
format	enum(int,int,int,int)
=	O
ip_format	int
;	O
break	O
;	O
case	O
'h'	O
:	O
do_help	bool
=	O
true	int
;	O
break	O
;	O
case	O
'V'	O
:	O
do_version	bool
=	O
true	int
;	O
break	O
;	O
default	O
:	O
usage	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
}	O
if	O
(	O
do_version	bool
)	O
{	O
printf	(*(char))->(int)
(	O
"%s (GNU %s) %s\n"	*(char)
,	O
basename	(*(char))->(*(char))
(	O
program_name	*(char)
)	O
,	O
PACKAGE	*(char)
,	O
VERSION	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Copyright (C) %s Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n"	*(char)
)	O
,	O
"2001-2019"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Written by %s.\n"	*(char)
)	O
,	O
proper_name	(*(char))->(*(char))
(	O
"Bruno Haible"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
if	O
(	O
do_help	bool
)	O
usage	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
if	O
(	O
optind	int
!=	O
argc	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
_	O
(	O
"too many arguments"	*(char)
)	O
)	O
;	O
print_hostname	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
static	O
void	O
usage	(int)->(void)
(	O
int	O
status	int
)	O
{	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"Try '%s --help' for more information.\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
else	O
{	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION]\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Print the machine's hostname.\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Output format:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -s, --short                 short host name\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -f, --fqdn, --long          long host name, includes fully qualified domain\n                                name, and aliases\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -i, --ip-address            addresses for the hostname\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Informative output:\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -h, --help                  display this help and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"  -V, --version               output version information and exit\n"	*(char)
)	O
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Report bugs to <bug-gnu-gettext@gnu.org>.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
exit	(int)->(void)
(	O
status	int
)	O
;	O
}	O
static	O
char	O
*	O
xgethostname	()->(*(char))
(	O
)	O
{	O
char	O
hostname	array(char)
[	O
MAXHOSTNAMELEN	int
+	O
1	int
]	O
;	O
if	O
(	O
gethostname	(*(char),long)->(int)
(	O
hostname	array(char)
,	O
MAXHOSTNAMELEN	int
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
_	O
(	O
"could not get host name"	*(char)
)	O
)	O
;	O
hostname	array(char)
[	O
MAXHOSTNAMELEN	int
]	O
=	O
'\0'	O
;	O
return	O
xstrdup	(*(char))->(*(char))
(	O
hostname	array(char)
)	O
;	O
}	O
static	O
void	O
print_hostname	()->(void)
(	O
)	O
{	O
char	O
*	O
hostname	array(char)
;	O
char	O
*	O
dot	*(char)
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
size_t	long
i	long
;	O
hostname	array(char)
=	O
xgethostname	()->(*(char))
(	O
)	O
;	O
switch	O
(	O
format	enum(int,int,int,int)
)	O
{	O
case	O
default_format	int
:	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
hostname	array(char)
)	O
;	O
break	O
;	O
case	O
short_format	int
:	O
dot	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
hostname	array(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
dot	*(char)
!=	O
NULL	O
)	O
*	O
dot	*(char)
=	O
'\0'	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
hostname	array(char)
)	O
;	O
break	O
;	O
case	O
long_format	int
:	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
hostname	array(char)
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
!=	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
!=	O
NULL	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_aliases	*(*(char))
[	O
i	long
]	O
)	O
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
hostname	array(char)
)	O
;	O
break	O
;	O
case	O
ip_format	int
:	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
hostname	array(char)
)	O
;	O
if	O
(	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
!=	O
NULL	O
&&	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
!=	O
NULL	O
)	O
for	O
(	O
i	long
=	O
0	int
;	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	long
]	O
!=	O
NULL	O
;	O
i	long
++	O
)	O
{	O
if	O
(	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addrtype	int
==	O
AF_INET6	O
)	O
{	O
char	O
buffer	array(char)
[	O
45	int
+	O
1	int
]	O
;	O
ipv6_ntop	O
(	O
buffer	array(char)
,	O
*	O
(	O
const	O
struct	O
in6_addr	struct(union(array(char),array(short),array(int)))
*	O
)	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	long
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"[%s]\n"	*(char)
,	O
buffer	array(char)
)	O
;	O
}	O
else	O
if	O
(	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addrtype	int
==	O
AF_INET	O
)	O
{	O
char	O
buffer	array(char)
[	O
15	int
+	O
1	int
]	O
;	O
ipv4_ntop	O
(	O
buffer	array(char)
,	O
*	O
(	O
const	O
struct	O
in_addr	struct(int)
*	O
)	O
h	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr_list	*(*(char))
[	O
i	long
]	O
)	O
;	O
printf	(*(char))->(int)
(	O
"[%s]\n"	*(char)
,	O
buffer	array(char)
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
