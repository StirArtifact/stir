int	O
XShmGetEventBase	(*(struct))->(int)
(	O
Display	struct
*	O
dpy	*(struct)
)	O
;	O
int	O
mit_shm	int
;	O
int	O
factor	short
;	O
int	O
bpl	int
;	O
int	O
bitmap_pad	int
;	O
int	O
bitmap_bit_order	int
;	O
char	O
*	O
screen_buffer	*(char)
,	O
*	O
screen_buffer2	*(char)
;	O
char	O
*	O
sky	*(char)
;	O
void	O
init_display	()->(void)
(	O
void	O
)	O
{	O
int	O
i	int
;	O
printf	(*(char))->(int)
(	O
". Drawing Initialised ..."	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
(	O
display	*(struct)
=	O
XOpenDisplay	(*(char))->(*(struct))
(	O
DisplayName	array(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
printf	(*(char))->(int)
(	O
"ERREUR! (Display invalide : %s)\n"	*(char)
,	O
DisplayName	array(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
=	O
DefaultScreen	O
(	O
display	*(struct)
)	O
;	O
depth	int
=	O
DefaultDepth	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
bpp	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
(	O
_XPrivDisplay	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),int,int,int,int,*(char),long,long,long,int,*((*(struct`))->(long)),int,int,int,int,int,*(struct(*(struct`),int,int,int)),int,int,*(struct),*(struct),int,long,long,*(char),*(char),*(char),*(char),int,*(struct),*((*(struct`))->(int)),*(char),int,int,*(struct(*(struct`),*(struct`),long,int,int,int,int,int,*(struct`),int,*(struct`),*(struct`),long,long,long,int,int,int,int,long)),long,long,int,int,*(char),*(char),int,*(char)))
)	O
display	*(struct)
)	O
->	O
nformats	int
;	O
i	int
++	O
)	O
{	O
ScreenFormat	struct(*(struct(int,*(struct(int,*`,*`,*`)),*((*`)->(int)),*(char))),int,int,int)
sf	struct(*(struct(int,*(struct(int,*`,*`,*`)),*((*`)->(int)),*(char))),int,int,int)
=	O
(	O
(	O
_XPrivDisplay	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),int,int,int,int,*(char),long,long,long,int,*((*(struct`))->(long)),int,int,int,int,int,*(struct(*(struct`),int,int,int)),int,int,*(struct),*(struct),int,long,long,*(char),*(char),*(char),*(char),int,*(struct),*((*(struct`))->(int)),*(char),int,int,*(struct(*(struct`),*(struct`),long,int,int,int,int,int,*(struct`),int,*(struct`),*(struct`),long,long,long,int,int,int,int,long)),long,long,int,int,*(char),*(char),int,*(char)))
)	O
display	*(struct)
)	O
->	O
pixmap_format	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),int,int,int))
[	O
i	int
]	O
;	O
if	O
(	O
sf	struct(*(struct(int,*(struct(int,*`,*`,*`)),*((*`)->(int)),*(char))),int,int,int)
.	O
depth	int
==	O
(	O
int	O
)	O
depth	int
)	O
{	O
bpp	int
=	O
sf	struct(*(struct(int,*(struct(int,*`,*`,*`)),*((*`)->(int)),*(char))),int,int,int)
.	O
bits_per_pixel	int
;	O
}	O
}	O
bitmap_bit_order	int
=	O
BitmapBitOrder	O
(	O
display	*(struct)
)	O
;	O
switch	O
(	O
bpp	int
)	O
{	O
case	O
8	int
:	O
factor	short
=	O
1	int
;	O
bitmap_pad	int
=	O
8	int
;	O
break	O
;	O
case	O
15	int
:	O
case	O
16	int
:	O
factor	short
=	O
2	int
;	O
bitmap_pad	int
=	O
16	int
;	O
break	O
;	O
case	O
24	int
:	O
factor	short
=	O
3	int
;	O
bitmap_pad	int
=	O
32	int
;	O
break	O
;	O
case	O
32	int
:	O
factor	short
=	O
4	int
;	O
bitmap_pad	int
=	O
32	int
;	O
break	O
;	O
default	O
:	O
factor	short
=	O
0	int
;	O
printf	(*(char))->(int)
(	O
"Error : (This graphics mode is not managed ..)\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
break	O
;	O
}	O
visual	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),long,int,long,long,long,int,int))
=	O
DefaultVisual	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
root_width	int
=	O
DisplayWidth	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
root_height	int
=	O
DisplayHeight	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
root	long
=	O
DefaultRootWindow	O
(	O
display	*(struct)
)	O
;	O
printf	(*(char))->(int)
(	O
"OK\n"	*(char)
)	O
;	O
}	O
void	O
init_win	()->(void)
(	O
)	O
{	O
unsigned	O
long	O
win_mask	long
;	O
XSetWindowAttributes	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
;	O
XSizeHints	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
;	O
printf	(*(char))->(int)
(	O
". Window Initialised..."	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
mit_shm	int
=	O
0	int
;	O
{	O
int	O
major	int
,	O
minor	int
;	O
Bool	int
pix	int
;	O
mit_shm	int
=	O
XShmQueryVersion	(*(struct),*(int),*(int),*(int))->(int)
(	O
display	*(struct)
,	O
&	O
major	int
,	O
&	O
minor	int
,	O
&	O
pix	int
)	O
;	O
CompletionType	int
=	O
XShmGetEventBase	(*(struct))->(int)
(	O
display	*(struct)
)	O
+	O
ShmCompletion	int
;	O
if	O
(	O
multi	int
)	O
{	O
mit_shm	int
=	O
0	int
;	O
}	O
}	O
win_mask	long
=	O
CWBackPixel	O
|	O
CWBorderPixel	O
;	O
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
.	O
border_pixel	long
=	O
BlackPixel	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
.	O
background_pixel	long
=	O
BlackPixel	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
if	O
(	O
dble	int
==	O
0	int
)	O
if	O
(	O
multi	int
==	O
0	int
)	O
{	O
win	long
=	O
XCreateWindow	(*(struct),long,int,int,int,int,int,int,int,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),long,*(struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)))->(long)
(	O
display	*(struct)
,	O
root	long
,	O
root_width	int
>>	O
1	int
,	O
root_height	int
>>	O
2	int
,	O
WIDTH	int
,	O
HEIGHT	int
,	O
BORDER	int
,	O
depth	int
,	O
InputOutput	int
,	O
CopyFromParent	int
,	O
win_mask	long
,	O
&	O
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
)	O
;	O
}	O
else	O
{	O
win	long
=	O
XCreateWindow	(*(struct),long,int,int,int,int,int,int,int,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),long,*(struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)))->(long)
(	O
display	*(struct)
,	O
root	long
,	O
root_width	int
>>	O
2	int
,	O
root_height	int
>>	O
1	int
,	O
(	O
WIDTH	int
)	O
,	O
(	O
HEIGHT	int
)	O
,	O
BORDER	int
,	O
depth	int
,	O
InputOutput	int
,	O
CopyFromParent	int
,	O
win_mask	long
,	O
&	O
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
)	O
;	O
printf	(*(char))->(int)
(	O
"MULTI 1\n"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
multi	int
==	O
0	int
)	O
{	O
win	long
=	O
XCreateWindow	(*(struct),long,int,int,int,int,int,int,int,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),long,*(struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)))->(long)
(	O
display	*(struct)
,	O
root	long
,	O
root_width	int
>>	O
2	int
,	O
root_height	int
>>	O
2	int
,	O
(	O
WIDTH	int
*	O
2	int
)	O
,	O
(	O
HEIGHT	int
*	O
2	int
)	O
,	O
BORDER	int
,	O
depth	int
,	O
InputOutput	int
,	O
CopyFromParent	int
,	O
win_mask	long
,	O
&	O
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
)	O
;	O
printf	(*(char))->(int)
(	O
"MULTI 0\n"	*(char)
)	O
;	O
}	O
else	O
{	O
win	long
=	O
XCreateWindow	(*(struct),long,int,int,int,int,int,int,int,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),long,*(struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)))->(long)
(	O
display	*(struct)
,	O
root	long
,	O
root_width	int
>>	O
2	int
,	O
root_height	int
>>	O
2	int
,	O
(	O
WIDTH	int
)	O
,	O
(	O
HEIGHT	int
)	O
,	O
BORDER	int
,	O
depth	int
,	O
InputOutput	int
,	O
CopyFromParent	int
,	O
win_mask	long
,	O
&	O
win_attr	struct(long,long,long,long,int,int,int,long,long,int,long,long,int,long,long)
)	O
;	O
printf	(*(char))->(int)
(	O
"MULTI 1\n"	*(char)
)	O
;	O
}	O
multi	int
=	O
0	int
;	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
flags	char
=	O
PPosition	O
|	O
PMinSize	O
|	O
PMaxSize	O
;	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
x	int
=	O
0	int
;	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
y	int
=	O
0	int
;	O
if	O
(	O
dble	int
==	O
0	int
)	O
{	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
max_width	int
=	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
min_width	int
=	O
WIDTH	int
;	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
max_height	int
=	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
min_height	int
=	O
HEIGHT	int
;	O
}	O
else	O
{	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
max_width	int
=	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
min_width	int
=	O
WIDTH	int
*	O
2	int
;	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
max_height	int
=	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
.	O
min_height	int
=	O
HEIGHT	int
*	O
2	int
;	O
}	O
XSetWMNormalHints	(*(struct),long,*(struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)))->(void)
(	O
display	*(struct)
,	O
win	long
,	O
&	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
)	O
;	O
if	O
(	O
multi	int
)	O
XSetWMNormalHints	(*(struct),long,*(struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)))->(void)
(	O
display	*(struct)
,	O
win2	long
,	O
&	O
win_hint	struct(long,int,int,int,int,int,int,int,int,int,int,struct(int,int),struct(int,int),int,int,int)
)	O
;	O
if	O
(	O
depth	int
==	O
8	int
)	O
{	O
cmap	long
=	O
XCreateColormap	(*(struct),long,*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),int)->(long)
(	O
display	*(struct)
,	O
win	long
,	O
visual	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),long,int,long,long,long,int,int))
,	O
AllocAll	int
)	O
;	O
XSetWindowColormap	(*(struct),long,long)->(int)
(	O
display	*(struct)
,	O
win	long
,	O
cmap	long
)	O
;	O
if	O
(	O
multi	int
)	O
XSetWindowColormap	(*(struct),long,long)->(int)
(	O
display	*(struct)
,	O
win2	long
,	O
cmap	long
)	O
;	O
}	O
XMapWindow	(*(struct),long)->(int)
(	O
display	*(struct)
,	O
win	long
)	O
;	O
if	O
(	O
multi	int
)	O
XMapWindow	(*(struct),long)->(int)
(	O
display	*(struct)
,	O
win2	long
)	O
;	O
XFlush	(*(struct))->(int)
(	O
display	*(struct)
)	O
;	O
XSelectInput	(*(struct),long,long)->(int)
(	O
display	*(struct)
,	O
win	long
,	O
KeyPressMask	O
|	O
KeyReleaseMask	O
|	O
FocusChangeMask	O
)	O
;	O
if	O
(	O
multi	int
)	O
XSelectInput	(*(struct),long,long)->(int)
(	O
display	*(struct)
,	O
win2	long
,	O
KeyPressMask	O
|	O
KeyReleaseMask	O
|	O
FocusChangeMask	O
)	O
;	O
gcVal	struct(int,long,long,long,int,int,int,int,int,int,int,long,long,int,int,long,int,int,int,int,long,int,char)
.	O
foreground	long
=	O
0	int
;	O
gcVal	struct(int,long,long,long,int,int,int,int,int,int,int,long,long,int,int,long,int,int,int,int,long,int,char)
.	O
background	long
=	O
WhitePixel	O
(	O
display	*(struct)
,	O
screen	*(struct(*(struct(int,*(struct`),*((*`)->(int)),*(char))),*(struct),long,int,int,int,int,int,*(struct(int,int,*(struct`))),int,*(struct(*(struct`),long,int,long,long,long,int,int)),*(struct),long,long,long,int,int,int,int,long))
)	O
;	O
gcMask	long
=	O
GCForeground	O
|	O
GCBackground	O
;	O
gc	*(struct)
=	O
XCreateGC	(*(struct),long,long,*(struct(int,long,long,long,int,int,int,int,int,int,int,long,long,int,int,long,int,int,int,int,long,int,char)))->(*(struct))
(	O
display	*(struct)
,	O
win	long
,	O
gcMask	long
,	O
&	O
gcVal	struct(int,long,long,long,int,int,int,int,int,int,int,long,long,int,int,long,int,int,int,int,long,int,char)
)	O
;	O
{	O
Cursor	long
c	long
;	O
c	long
=	O
XCreateFontCursor	(*(struct),int)->(long)
(	O
display	*(struct)
,	O
XC_circle	int
)	O
;	O
XDefineCursor	(*(struct),long,long)->(int)
(	O
display	*(struct)
,	O
win	long
,	O
c	long
)	O
;	O
}	O
XAutoRepeatOn	(*(struct))->(int)
(	O
display	*(struct)
)	O
;	O
init_table_perspective	()->(void)
(	O
)	O
;	O
if	O
(	O
multi	int
)	O
{	O
XStoreName	(*(struct),long,*(char))->(int)
(	O
display	*(struct)
,	O
win	long
,	O
"SpeedX : 1"	*(char)
)	O
;	O
XStoreName	(*(struct),long,*(char))->(int)
(	O
display	*(struct)
,	O
win2	long
,	O
"SpeedX : 2"	*(char)
)	O
;	O
}	O
else	O
XStoreName	(*(struct),long,*(char))->(int)
(	O
display	*(struct)
,	O
win	long
,	O
"SpeedX"	*(char)
)	O
;	O
if	O
(	O
depth	int
==	O
8	int
)	O
{	O
XColor	struct(long,short,short,short,char,char)
xc	struct(long,short,short,short,char,char)
;	O
unsigned	O
int	O
r	int
,	O
g	int
,	O
b	array(char)
;	O
for	O
(	O
b	array(char)
=	O
0	int
;	O
b	array(char)
<	O
8	int
;	O
b	array(char)
++	O
)	O
{	O
for	O
(	O
g	int
=	O
0	int
;	O
g	int
<	O
8	int
;	O
g	int
++	O
)	O
{	O
for	O
(	O
r	int
=	O
0	int
;	O
r	int
<	O
4	int
;	O
r	int
++	O
)	O
{	O
xc	struct(long,short,short,short,char,char)
.	O
pixel	long
=	O
b	array(char)
|	O
g	int
<<	O
3	int
|	O
r	int
<<	O
6	int
;	O
xc	struct(long,short,short,short,char,char)
.	O
red	short
=	O
r	int
<<	O
14	int
;	O
xc	struct(long,short,short,short,char,char)
.	O
green	short
=	O
g	int
<<	O
13	int
;	O
xc	struct(long,short,short,short,char,char)
.	O
blue	short
=	O
b	array(char)
<<	O
13	int
;	O
xc	struct(long,short,short,short,char,char)
.	O
flags	char
=	O
DoRed	O
|	O
DoGreen	O
|	O
DoBlue	O
;	O
XStoreColor	(*(struct),long,*(struct(long,short,short,short,char,char)))->(int)
(	O
display	*(struct)
,	O
cmap	long
,	O
&	O
xc	struct(long,short,short,short,char,char)
)	O
;	O
}	O
}	O
}	O
}	O
printf	(*(char))->(int)
(	O
"OK\n"	*(char)
)	O
;	O
}	O
void	O
init_buffers	()->(void)
(	O
void	O
)	O
{	O
int	O
taille_img	int
;	O
printf	(*(char))->(int)
(	O
". Buffers Initialisation ..."	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
bpl	int
=	O
factor	short
*	O
WIDTH	int
;	O
if	O
(	O
dble	int
!=	O
0	int
)	O
bpl	int
=	O
2	int
*	O
bpl	int
;	O
screen_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
factor	short
*	O
(	O
WIDTH	int
)	O
*	O
(	O
HEIGHT	int
)	O
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
if	O
(	O
dble	int
!=	O
0	int
)	O
screen_buffer2	*(char)
=	O
(	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
4	int
*	O
factor	short
*	O
(	O
WIDTH	int
)	O
*	O
(	O
HEIGHT	int
)	O
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
sky	*(char)
=	O
(	O
char	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
factor	short
*	O
(	O
WIDTH	int
)	O
*	O
(	O
HEIGHT	int
)	O
,	O
sizeof	O
(	O
char	O
)	O
)	O
;	O
bool	int
=	O
1	int
;	O
if	O
(	O
dble	int
==	O
0	int
)	O
{	O
if	O
(	O
mit_shm	int
)	O
{	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
=	O
XShmCreateImage	(*(struct),*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),int,int,*(char),*(struct(long,int,*(char),int)),int,int)->(*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int))))))
(	O
display	*(struct)
,	O
CopyFromParent	int
,	O
(	O
unsigned	O
int	O
)	O
depth	int
,	O
ZPixmap	int
,	O
0	int
,	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
,	O
WIDTH	int
,	O
HEIGHT	int
)	O
;	O
}	O
else	O
{	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
=	O
XCreateImage	(*(struct),*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int))))))
(	O
display	*(struct)
,	O
CopyFromParent	int
,	O
(	O
unsigned	O
int	O
)	O
depth	int
,	O
ZPixmap	int
,	O
0	int
,	O
screen_buffer	*(char)
,	O
WIDTH	int
,	O
HEIGHT	int
,	O
bitmap_pad	int
,	O
bpl	int
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
mit_shm	int
)	O
{	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
=	O
XShmCreateImage	(*(struct),*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),int,int,*(char),*(struct(long,int,*(char),int)),int,int)->(*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int))))))
(	O
display	*(struct)
,	O
CopyFromParent	int
,	O
(	O
unsigned	O
int	O
)	O
depth	int
,	O
ZPixmap	int
,	O
0	int
,	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
,	O
WIDTH	int
*	O
2	int
,	O
HEIGHT	int
*	O
2	int
)	O
;	O
}	O
else	O
{	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
=	O
XCreateImage	(*(struct),*(struct(*(struct(int,*`,*`,*`)),long,int,long,long,long,int,int)),int,int,int,*(char),int,int,int,int)->(*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int))))))
(	O
display	*(struct)
,	O
CopyFromParent	int
,	O
(	O
unsigned	O
int	O
)	O
depth	int
,	O
ZPixmap	int
,	O
0	int
,	O
screen_buffer2	*(char)
,	O
WIDTH	int
*	O
2	int
,	O
HEIGHT	int
*	O
2	int
,	O
bitmap_pad	int
,	O
bpl	int
)	O
;	O
}	O
}	O
switch	O
(	O
rand	()->(int)
(	O
)	O
%	O
2	int
)	O
{	O
case	O
0	int
:	O
taille_img	int
=	O
init	(*(*(char)),int,int)->(int)
(	O
&	O
sky	*(char)
,	O
0	int
,	O
depth	int
)	O
;	O
break	O
;	O
case	O
1	int
:	O
taille_img	int
=	O
init	(*(*(char)),int,int)->(int)
(	O
&	O
sky	*(char)
,	O
1	int
,	O
depth	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
mit_shm	int
)	O
{	O
key_t	int
clef	int
;	O
int	O
id	int
;	O
int	O
size	int
=	O
-	O
1	int
;	O
size	int
=	O
factor	short
*	O
WIDTH	int
*	O
HEIGHT	int
;	O
if	O
(	O
dble	int
)	O
size	int
*=	O
4	int
;	O
{	O
int	O
key_id	int
=	O
1	int
;	O
do	O
{	O
clef	int
=	O
ftok	(*(char),int)->(int)
(	O
"."	*(char)
,	O
key_id	int
)	O
;	O
key_id	int
++	O
;	O
}	O
while	O
(	O
(	O
id	int
=	O
shmget	(int,long,int)->(int)
(	O
clef	int
,	O
size	int
,	O
IPC_CREAT	int
|	O
0777	int
)	O
)	O
==	O
-	O
1	int
)	O
;	O
}	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
shmid	int
=	O
id	int
;	O
if	O
(	O
dble	int
==	O
0	int
)	O
{	O
if	O
(	O
screen_buffer	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
screen_buffer	*(char)
)	O
;	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
->	O
data	*(char)
=	O
screen_buffer	*(char)
=	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
shmaddr	*(char)
=	O
(	O
void	O
*	O
)	O
shmat	(int,*(void),int)->(*(void))
(	O
id	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
else	O
{	O
if	O
(	O
screen_buffer2	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
screen_buffer2	*(char)
)	O
;	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
->	O
data	*(char)
=	O
screen_buffer2	*(char)
=	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
shmaddr	*(char)
=	O
(	O
void	O
*	O
)	O
shmat	(int,*(void),int)->(*(void))
(	O
id	int
,	O
0	int
,	O
0	int
)	O
;	O
}	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
readOnly	int
=	O
False	int
;	O
if	O
(	O
!	O
XShmAttach	(*(struct),*(struct(long,int,*(char),int)))->(int)
(	O
display	*(struct)
,	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
)	O
)	O
{	O
}	O
XSync	(*(struct),int)->(int)
(	O
display	*(struct)
,	O
0	int
)	O
;	O
shmctl	(int,int,*(struct(struct(int,int,int,int,int,int,short,short,long,long),long,long,long,long,int,int,long,long,long)))->(int)
(	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
shmid	int
,	O
IPC_RMID	int
,	O
0	int
)	O
;	O
XShmPutImage	(*(struct),long,*(struct),*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int))))),int,int,int,int,int,int,int)->(int)
(	O
display	*(struct)
,	O
win	long
,	O
gc	*(struct)
,	O
xim	*(struct(int,int,int,int,*(char),int,int,int,int,int,int,int,long,long,long,*(char),struct(*((*`,*`,int,int,int,*`,int,int,int,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(long)),*((*`,int,int,long)->(int)),*((*`,int,int,int,int)->(*`)),*((*`,long)->(int)))))
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
WIDTH	int
,	O
HEIGHT	int
,	O
False	int
)	O
;	O
}	O
printf	(*(char))->(int)
(	O
"OK\n"	*(char)
)	O
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
OptionParsing	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
;	O
srand	(int)->(void)
(	O
(	O
unsigned	O
int	O
)	O
time	long
(	O
NULL	O
)	O
)	O
;	O
init_display	()->(void)
(	O
)	O
;	O
init_keyboard	(*(struct))->(void)
(	O
display	*(struct)
)	O
;	O
init_win	()->(void)
(	O
)	O
;	O
init_buffers	()->(void)
(	O
)	O
;	O
init_world	()->(void)
(	O
)	O
;	O
switch	O
(	O
player	int
)	O
{	O
case	O
-	O
1	int
:	O
printf	(*(char))->(int)
(	O
"Sorry ! Every cars have a pilot.\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Come back later !.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
break	O
;	O
case	O
0	int
:	O
printf	(*(char))->(int)
(	O
"You are the server.\n"	*(char)
)	O
;	O
break	O
;	O
default	O
:	O
printf	(*(char))->(int)
(	O
"You are a client [IPC].\n"	*(char)
)	O
;	O
break	O
;	O
}	O
printf	(*(char))->(int)
(	O
"   * depth = %d\n"	*(char)
,	O
depth	int
)	O
;	O
printf	(*(char))->(int)
(	O
"   * bpp   = %d\n"	*(char)
,	O
bpp	int
)	O
;	O
if	O
(	O
autorun	int
!=	O
1	int
)	O
{	O
loop	(*(struct))->(int)
(	O
display	*(struct)
)	O
;	O
}	O
else	O
auto_run	()->(int)
(	O
)	O
;	O
{	O
if	O
(	O
mit_shm	int
)	O
{	O
XShmDetach	(*(struct),*(struct(long,int,*(char),int)))->(int)
(	O
display	*(struct)
,	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
)	O
;	O
shmctl	(int,int,*(struct(struct(int,int,int,int,int,int,short,short,long,long),long,long,long,long,int,int,long,long,long)))->(int)
(	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
shmid	int
,	O
IPC_RMID	int
,	O
0	int
)	O
;	O
shmdt	(*(void))->(int)
(	O
shminfo	struct(long,long,long,long,long,long,long,long,long)
[	O
0	int
]	O
.	O
shmaddr	*(char)
)	O
;	O
}	O
if	O
(	O
!	O
mit_shm	int
)	O
free	(*(void))->(void)
(	O
screen_buffer	*(char)
)	O
;	O
XDestroyWindow	(*(struct),long)->(int)
(	O
display	*(struct)
,	O
win	long
)	O
;	O
XCloseDisplay	(*(struct))->(int)
(	O
display	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
sky	*(char)
)	O
;	O
Free_sprite	()->(void)
(	O
)	O
;	O
liberation	()->(void)
(	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
