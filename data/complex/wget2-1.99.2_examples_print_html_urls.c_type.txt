static	O
void	O
html_parse_localfile	(*(char))->(void)
(	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
char	O
*	O
data	*(void)
,	O
*	O
data_allocated	*(char)
;	O
size_t	long
len	long
;	O
if	O
(	O
(	O
data_allocated	*(char)
=	O
data	*(void)
=	O
wget_read_file	(*(char),*(long))->(*(char))
(	O
fname	*(char)
,	O
&	O
len	long
)	O
)	O
)	O
{	O
const	O
char	O
*	O
encoding	*(char)
=	O
NULL	O
;	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
0	int
]	O
==	O
0xFE	int
&&	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
1	int
]	O
==	O
0xFF	int
)	O
{	O
encoding	*(char)
=	O
"UTF-16BE"	*(char)
;	O
data	*(void)
+=	O
2	int
;	O
len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
0	int
]	O
==	O
0xFF	int
&&	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
1	int
]	O
==	O
0xFE	int
)	O
{	O
encoding	*(char)
=	O
"UTF-16LE"	*(char)
;	O
data	*(void)
+=	O
2	int
;	O
len	long
-=	O
2	int
;	O
}	O
else	O
if	O
(	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
0	int
]	O
==	O
0xEF	int
&&	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
1	int
]	O
==	O
0xBB	int
&&	O
(	O
unsigned	O
char	O
)	O
data	*(void)
[	O
2	int
]	O
==	O
0xBF	int
)	O
{	O
encoding	*(char)
=	O
"UTF-8"	*(char)
;	O
data	*(void)
+=	O
3	int
;	O
len	long
-=	O
3	int
;	O
}	O
if	O
(	O
encoding	*(char)
)	O
printf	(*(char))->(int)
(	O
"URI encoding '%s' set by BOM\n"	*(char)
,	O
encoding	*(char)
)	O
;	O
if	O
(	O
!	O
wget_strncasecmp_ascii	(*(char),*(char),long)->(int)
(	O
encoding	*(char)
,	O
"UTF-16"	*(char)
,	O
6	int
)	O
)	O
{	O
size_t	long
n	long
;	O
char	O
*	O
utf8	*(char)
;	O
len	long
-=	O
len	long
&	O
1	int
;	O
if	O
(	O
wget_memiconv	(*(char),*(void),long,*(char),*(*(char)),*(long))->(int)
(	O
encoding	*(char)
,	O
data	*(void)
,	O
len	long
,	O
"UTF-8"	*(char)
,	O
&	O
utf8	*(char)
,	O
&	O
n	long
)	O
==	O
0	int
)	O
{	O
printf	(*(char))->(int)
(	O
"Convert non-ASCII encoding '%s' to UTF-8\n"	*(char)
,	O
encoding	*(char)
)	O
;	O
wget_xfree	O
(	O
data_allocated	*(char)
)	O
;	O
data_allocated	*(char)
=	O
data	*(void)
=	O
utf8	*(char)
;	O
}	O
else	O
{	O
printf	(*(char))->(int)
(	O
"Failed to convert non-ASCII encoding '%s' to UTF-8, skip parsing\n"	*(char)
,	O
encoding	*(char)
)	O
;	O
return	O
;	O
}	O
}	O
wget_html_parsed_result	struct(*(struct),*(char),struct(*(char),long),bool)
*	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
=	O
wget_html_get_urls_inline	(*(char),*(struct),*(struct))->(*(struct(*(struct),*(char),struct(*(char),long),bool)))
(	O
data	*(void)
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
encoding	*(char)
)	O
{	O
if	O
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
encoding	*(char)
&&	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
encoding	*(char)
,	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
encoding	*(char)
)	O
)	O
printf	(*(char))->(int)
(	O
"Encoding '%s' as stated in document has been ignored\n"	*(char)
,	O
encoding	*(char)
)	O
;	O
}	O
for	O
(	O
int	O
it	int
=	O
0	int
;	O
it	int
<	O
wget_vector_size	(*(struct))->(int)
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
)	O
;	O
it	int
++	O
)	O
{	O
wget_html_parsed_url	struct(struct(*(char),long),array(char),array(char),bool)
*	O
html_url	*(struct(struct(*(char),long),array(char),array(char),bool))
=	O
wget_vector_get	(*(struct),int)->(*(void))
(	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
->	O
uris	*(struct)
,	O
it	int
)	O
;	O
wget_string	struct(*(char),long)
*	O
url	*(char)
=	O
&	O
html_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
url	*(char)
;	O
printf	(*(char))->(int)
(	O
"  %s.%s '%.*s'\n"	*(char)
,	O
html_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
dir	array(char)
,	O
html_url	*(struct(struct(*(char),long),array(char),array(char),bool))
->	O
attr	array(char)
,	O
(	O
int	O
)	O
url	*(char)
->	O
len	long
,	O
url	*(char)
->	O
p	*(char)
)	O
;	O
}	O
wget_xfree	O
(	O
data_allocated	*(char)
)	O
;	O
wget_html_free_urls_inline	(*(*(struct(*(struct`),*(char),struct(*`,long),bool))))->(void)
(	O
&	O
res	*(*(struct(*(struct),*(char),struct(*(char),long),bool)))
)	O
;	O
}	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
const	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
if	O
(	O
!	O
isatty	(int)->(int)
(	O
STDIN_FILENO	int
)	O
)	O
{	O
html_parse_localfile	(*(char))->(void)
(	O
"-"	*(char)
)	O
;	O
}	O
else	O
{	O
int	O
argpos	int
;	O
for	O
(	O
argpos	int
=	O
1	int
;	O
argpos	int
<	O
argc	int
;	O
argpos	int
++	O
)	O
{	O
printf	(*(char))->(int)
(	O
"%s:\n"	*(char)
,	O
argv	*(*(char))
[	O
argpos	int
]	O
)	O
;	O
html_parse_localfile	(*(char))->(void)
(	O
argv	*(*(char))
[	O
argpos	int
]	O
)	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
