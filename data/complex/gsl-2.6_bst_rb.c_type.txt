typedef	O
struct	O
gsl_bst_rb_node	O
rb_node	O
;	O
typedef	O
gsl_bst_rb_table	O
rb_table	O
;	O
typedef	O
gsl_bst_rb_traverser	O
rb_traverser	O
;	O
enum	O
rb_color	O
{	O
RB_BLACK	O
,	O
RB_RED	O
}	O
;	O
static	O
int	O
rb_init	O
(	O
const	O
gsl_bst_allocator	struct(*((long,*(void))->(*(void))),*((*(void),*(void))->(void)))
*	O
allocator	O
,	O
gsl_bst_cmp_function	(*(void),*(void),*(void))->(int)
*	O
compare	O
,	O
void	O
*	O
params	*(void)
,	O
void	O
*	O
vtable	O
)	O
;	O
static	O
size_t	long
rb_nodes	O
(	O
const	O
void	O
*	O
vtable	O
)	O
;	O
static	O
int	O
rb_empty	O
(	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
*	O
rb_probe	O
(	O
void	O
*	O
item	O
,	O
rb_table	O
*	O
table	O
)	O
;	O
static	O
void	O
*	O
rb_insert	O
(	O
void	O
*	O
item	O
,	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_find	O
(	O
const	O
void	O
*	O
item	O
,	O
const	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_remove	O
(	O
const	O
void	O
*	O
item	O
,	O
void	O
*	O
vtable	O
)	O
;	O
static	O
int	O
rb_t_init	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_t_first	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_t_last	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_t_find	O
(	O
const	O
void	O
*	O
item	O
,	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_t_insert	O
(	O
void	O
*	O
item	O
,	O
void	O
*	O
vtrav	O
,	O
void	O
*	O
vtable	O
)	O
;	O
static	O
void	O
*	O
rb_t_copy	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vsrc	O
)	O
;	O
static	O
void	O
*	O
rb_t_next	O
(	O
void	O
*	O
vtrav	O
)	O
;	O
static	O
void	O
*	O
rb_t_prev	O
(	O
void	O
*	O
vtrav	O
)	O
;	O
static	O
void	O
*	O
rb_t_cur	O
(	O
const	O
void	O
*	O
vtrav	O
)	O
;	O
static	O
void	O
*	O
rb_t_replace	O
(	O
void	O
*	O
vtrav	O
,	O
void	O
*	O
new_item	O
)	O
;	O
static	O
void	O
rb_trav_refresh	O
(	O
rb_traverser	O
*	O
trav	O
)	O
;	O
static	O
int	O
rb_init	O
(	O
const	O
gsl_bst_allocator	struct(*((long,*(void))->(*(void))),*((*(void),*(void))->(void)))
*	O
allocator	O
,	O
gsl_bst_cmp_function	(*(void),*(void),*(void))->(int)
*	O
compare	O
,	O
void	O
*	O
params	*(void)
,	O
void	O
*	O
vtable	O
)	O
{	O
rb_table	O
*	O
table	O
=	O
(	O
rb_table	O
*	O
)	O
vtable	O
;	O
table	O
->	O
rb_alloc	O
=	O
allocator	O
;	O
table	O
->	O
rb_compare	O
=	O
compare	O
;	O
table	O
->	O
rb_param	O
=	O
params	*(void)
;	O
table	O
->	O
rb_root	O
=	O
NULL	O
;	O
table	O
->	O
rb_count	O
=	O
0	int
;	O
table	O
->	O
rb_generation	O
=	O
0	int
;	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
size_t	long
rb_nodes	O
(	O
const	O
void	O
*	O
vtable	O
)	O
{	O
const	O
rb_table	O
*	O
table	O
=	O
(	O
const	O
rb_table	O
*	O
)	O
vtable	O
;	O
return	O
table	O
->	O
rb_count	O
;	O
}	O
static	O
int	O
rb_empty	O
(	O
void	O
*	O
vtable	O
)	O
{	O
rb_table	O
*	O
table	O
=	O
(	O
rb_table	O
*	O
)	O
vtable	O
;	O
rb_node	O
*	O
p	O
,	O
*	O
q	O
;	O
for	O
(	O
p	O
=	O
table	O
->	O
rb_root	O
;	O
p	O
!=	O
NULL	O
;	O
p	O
=	O
q	O
)	O
{	O
if	O
(	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
q	O
=	O
p	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
table	O
->	O
rb_alloc	O
->	O
free	(*(void))->(void)
(	O
p	O
,	O
table	O
->	O
rb_param	O
)	O
;	O
}	O
else	O
{	O
q	O
=	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
q	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
q	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
p	O
;	O
}	O
}	O
table	O
->	O
rb_root	O
=	O
NULL	O
;	O
table	O
->	O
rb_count	O
=	O
0	int
;	O
table	O
->	O
rb_generation	O
=	O
0	int
;	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
void	O
*	O
*	O
rb_probe	O
(	O
void	O
*	O
item	O
,	O
rb_table	O
*	O
table	O
)	O
{	O
rb_node	O
*	O
pa	O
[	O
RB_MAX_HEIGHT	O
]	O
;	O
unsigned	O
char	O
da	O
[	O
RB_MAX_HEIGHT	O
]	O
;	O
int	O
k	O
;	O
rb_node	O
*	O
p	O
;	O
rb_node	O
*	O
n	int
;	O
pa	O
[	O
0	int
]	O
=	O
(	O
rb_node	O
*	O
)	O
&	O
table	O
->	O
rb_root	O
;	O
da	O
[	O
0	int
]	O
=	O
0	int
;	O
k	O
=	O
1	int
;	O
for	O
(	O
p	O
=	O
table	O
->	O
rb_root	O
;	O
p	O
!=	O
NULL	O
;	O
p	O
=	O
p	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
1	int
]	O
]	O
)	O
{	O
int	O
cmp	O
=	O
table	O
->	O
rb_compare	O
(	O
item	O
,	O
p	O
->	O
rb_data	O
,	O
table	O
->	O
rb_param	O
)	O
;	O
if	O
(	O
cmp	O
==	O
0	int
)	O
return	O
&	O
p	O
->	O
rb_data	O
;	O
pa	O
[	O
k	O
]	O
=	O
p	O
;	O
da	O
[	O
k	O
++	O
]	O
=	O
cmp	O
>	O
0	int
;	O
}	O
n	int
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
1	int
]	O
]	O
=	O
table	O
->	O
rb_alloc	O
->	O
alloc	*((long,*(void))->(*(void)))
(	O
sizeof	O
*	O
n	int
,	O
table	O
->	O
rb_param	O
)	O
;	O
if	O
(	O
n	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
n	int
->	O
rb_data	O
=	O
item	O
;	O
n	int
->	O
rb_link	O
[	O
0	int
]	O
=	O
n	int
->	O
rb_link	O
[	O
1	int
]	O
=	O
NULL	O
;	O
n	int
->	O
rb_color	O
=	O
RB_RED	O
;	O
table	O
->	O
rb_count	O
++	O
;	O
table	O
->	O
rb_generation	O
++	O
;	O
while	O
(	O
k	O
>=	O
3	int
&&	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
==	O
RB_RED	O
)	O
{	O
if	O
(	O
da	O
[	O
k	O
-	O
2	int
]	O
==	O
0	int
)	O
{	O
rb_node	O
*	O
y	double
=	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
if	O
(	O
y	double
!=	O
NULL	O
&&	O
y	double
->	O
rb_color	O
==	O
RB_RED	O
)	O
{	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
=	O
y	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
k	O
-=	O
2	int
;	O
}	O
else	O
{	O
rb_node	O
*	O
x	double
;	O
if	O
(	O
da	O
[	O
k	O
-	O
1	int
]	O
==	O
0	int
)	O
y	double
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
else	O
{	O
x	double
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
y	double
=	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
=	O
y	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
y	double
->	O
rb_link	O
[	O
0	int
]	O
=	O
x	double
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
y	double
;	O
}	O
x	double
=	O
pa	O
[	O
k	O
-	O
2	int
]	O
;	O
x	double
->	O
rb_color	O
=	O
RB_RED	O
;	O
y	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
=	O
y	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
y	double
->	O
rb_link	O
[	O
1	int
]	O
=	O
x	double
;	O
pa	O
[	O
k	O
-	O
3	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
3	int
]	O
]	O
=	O
y	double
;	O
break	O
;	O
}	O
}	O
else	O
{	O
rb_node	O
*	O
y	double
=	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
if	O
(	O
y	double
!=	O
NULL	O
&&	O
y	double
->	O
rb_color	O
==	O
RB_RED	O
)	O
{	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
=	O
y	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
k	O
-=	O
2	int
;	O
}	O
else	O
{	O
rb_node	O
*	O
x	double
;	O
if	O
(	O
da	O
[	O
k	O
-	O
1	int
]	O
==	O
1	int
)	O
y	double
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
else	O
{	O
x	double
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
y	double
=	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
=	O
y	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
y	double
->	O
rb_link	O
[	O
1	int
]	O
=	O
x	double
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
y	double
;	O
}	O
x	double
=	O
pa	O
[	O
k	O
-	O
2	int
]	O
;	O
x	double
->	O
rb_color	O
=	O
RB_RED	O
;	O
y	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
=	O
y	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
y	double
->	O
rb_link	O
[	O
0	int
]	O
=	O
x	double
;	O
pa	O
[	O
k	O
-	O
3	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
3	int
]	O
]	O
=	O
y	double
;	O
break	O
;	O
}	O
}	O
}	O
table	O
->	O
rb_root	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
return	O
&	O
n	int
->	O
rb_data	O
;	O
}	O
static	O
void	O
*	O
rb_insert	O
(	O
void	O
*	O
item	O
,	O
void	O
*	O
vtable	O
)	O
{	O
void	O
*	O
*	O
p	O
=	O
rb_probe	O
(	O
item	O
,	O
vtable	O
)	O
;	O
return	O
p	O
==	O
NULL	O
||	O
*	O
p	O
==	O
item	O
?	O
NULL	O
:	O
*	O
p	O
;	O
}	O
static	O
void	O
*	O
rb_find	O
(	O
const	O
void	O
*	O
item	O
,	O
const	O
void	O
*	O
vtable	O
)	O
{	O
const	O
rb_table	O
*	O
table	O
=	O
(	O
const	O
rb_table	O
*	O
)	O
vtable	O
;	O
const	O
rb_node	O
*	O
p	O
;	O
for	O
(	O
p	O
=	O
table	O
->	O
rb_root	O
;	O
p	O
!=	O
NULL	O
;	O
)	O
{	O
int	O
cmp	O
=	O
table	O
->	O
rb_compare	O
(	O
item	O
,	O
p	O
->	O
rb_data	O
,	O
table	O
->	O
rb_param	O
)	O
;	O
if	O
(	O
cmp	O
<	O
0	int
)	O
p	O
=	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	O
>	O
0	int
)	O
p	O
=	O
p	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
else	O
return	O
p	O
->	O
rb_data	O
;	O
}	O
return	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_remove	O
(	O
const	O
void	O
*	O
item	O
,	O
void	O
*	O
vtable	O
)	O
{	O
rb_table	O
*	O
table	O
=	O
(	O
rb_table	O
*	O
)	O
vtable	O
;	O
rb_node	O
*	O
pa	O
[	O
RB_MAX_HEIGHT	O
]	O
;	O
unsigned	O
char	O
da	O
[	O
RB_MAX_HEIGHT	O
]	O
;	O
int	O
k	O
;	O
rb_node	O
*	O
p	O
;	O
int	O
cmp	O
;	O
k	O
=	O
0	int
;	O
p	O
=	O
(	O
rb_node	O
*	O
)	O
&	O
table	O
->	O
rb_root	O
;	O
for	O
(	O
cmp	O
=	O
-	O
1	int
;	O
cmp	O
!=	O
0	int
;	O
cmp	O
=	O
table	O
->	O
rb_compare	O
(	O
item	O
,	O
p	O
->	O
rb_data	O
,	O
table	O
->	O
rb_param	O
)	O
)	O
{	O
int	O
dir	O
=	O
cmp	O
>	O
0	int
;	O
pa	O
[	O
k	O
]	O
=	O
p	O
;	O
da	O
[	O
k	O
++	O
]	O
=	O
dir	O
;	O
p	O
=	O
p	O
->	O
rb_link	O
[	O
dir	O
]	O
;	O
if	O
(	O
p	O
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
item	O
=	O
p	O
->	O
rb_data	O
;	O
if	O
(	O
p	O
->	O
rb_link	O
[	O
1	int
]	O
==	O
NULL	O
)	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
1	int
]	O
]	O
=	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
else	O
{	O
enum	O
rb_color	O
t	O
;	O
rb_node	O
*	O
r	O
=	O
p	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
if	O
(	O
r	O
->	O
rb_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
r	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
t	O
=	O
r	O
->	O
rb_color	O
;	O
r	O
->	O
rb_color	O
=	O
p	O
->	O
rb_color	O
;	O
p	O
->	O
rb_color	O
=	O
t	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
1	int
]	O
]	O
=	O
r	O
;	O
da	O
[	O
k	O
]	O
=	O
1	int
;	O
pa	O
[	O
k	O
++	O
]	O
=	O
r	O
;	O
}	O
else	O
{	O
rb_node	O
*	O
s	O
;	O
int	O
j	O
=	O
k	O
++	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
da	O
[	O
k	O
]	O
=	O
0	int
;	O
pa	O
[	O
k	O
++	O
]	O
=	O
r	O
;	O
s	O
=	O
r	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
if	O
(	O
s	O
->	O
rb_link	O
[	O
0	int
]	O
==	O
NULL	O
)	O
break	O
;	O
r	O
=	O
s	O
;	O
}	O
da	O
[	O
j	O
]	O
=	O
1	int
;	O
pa	O
[	O
j	O
]	O
=	O
s	O
;	O
pa	O
[	O
j	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
j	O
-	O
1	int
]	O
]	O
=	O
s	O
;	O
s	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
r	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
s	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
s	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
p	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
t	O
=	O
s	O
->	O
rb_color	O
;	O
s	O
->	O
rb_color	O
=	O
p	O
->	O
rb_color	O
;	O
p	O
->	O
rb_color	O
=	O
t	O
;	O
}	O
}	O
if	O
(	O
p	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
rb_node	O
*	O
x	double
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
1	int
]	O
]	O
;	O
if	O
(	O
x	double
!=	O
NULL	O
&&	O
x	double
->	O
rb_color	O
==	O
RB_RED	O
)	O
{	O
x	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
break	O
;	O
}	O
if	O
(	O
k	O
<	O
2	int
)	O
break	O
;	O
if	O
(	O
da	O
[	O
k	O
-	O
1	int
]	O
==	O
0	int
)	O
{	O
rb_node	O
*	O
w	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
if	O
(	O
w	O
->	O
rb_color	O
==	O
RB_RED	O
)	O
{	O
w	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
2	int
]	O
]	O
=	O
w	O
;	O
pa	O
[	O
k	O
]	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
da	O
[	O
k	O
]	O
=	O
0	int
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
=	O
w	O
;	O
k	O
++	O
;	O
w	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
}	O
if	O
(	O
(	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
==	O
NULL	O
||	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
&&	O
(	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
==	O
NULL	O
||	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
)	O
w	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
else	O
{	O
if	O
(	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
==	O
NULL	O
||	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
{	O
rb_node	O
*	O
y	double
=	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
y	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
w	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
y	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
y	double
->	O
rb_link	O
[	O
1	int
]	O
=	O
w	O
;	O
w	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
y	double
;	O
}	O
w	O
->	O
rb_color	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
2	int
]	O
]	O
=	O
w	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
rb_node	O
*	O
w	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
if	O
(	O
w	O
->	O
rb_color	O
==	O
RB_RED	O
)	O
{	O
w	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
2	int
]	O
]	O
=	O
w	O
;	O
pa	O
[	O
k	O
]	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
da	O
[	O
k	O
]	O
=	O
1	int
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
=	O
w	O
;	O
k	O
++	O
;	O
w	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
}	O
if	O
(	O
(	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
==	O
NULL	O
||	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
&&	O
(	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
==	O
NULL	O
||	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
)	O
w	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
else	O
{	O
if	O
(	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
==	O
NULL	O
||	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
->	O
rb_color	O
==	O
RB_BLACK	O
)	O
{	O
rb_node	O
*	O
y	double
=	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
y	double
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
w	O
->	O
rb_color	O
=	O
RB_RED	O
;	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
y	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
y	double
->	O
rb_link	O
[	O
0	int
]	O
=	O
w	O
;	O
w	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
y	double
;	O
}	O
w	O
->	O
rb_color	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
w	O
->	O
rb_link	O
[	O
0	int
]	O
->	O
rb_color	O
=	O
RB_BLACK	O
;	O
pa	O
[	O
k	O
-	O
1	int
]	O
->	O
rb_link	O
[	O
0	int
]	O
=	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
w	O
->	O
rb_link	O
[	O
1	int
]	O
=	O
pa	O
[	O
k	O
-	O
1	int
]	O
;	O
pa	O
[	O
k	O
-	O
2	int
]	O
->	O
rb_link	O
[	O
da	O
[	O
k	O
-	O
2	int
]	O
]	O
=	O
w	O
;	O
break	O
;	O
}	O
}	O
k	O
--	O
;	O
}	O
}	O
table	O
->	O
rb_alloc	O
->	O
free	(*(void))->(void)
(	O
p	O
,	O
table	O
->	O
rb_param	O
)	O
;	O
table	O
->	O
rb_count	O
--	O
;	O
table	O
->	O
rb_generation	O
++	O
;	O
return	O
(	O
void	O
*	O
)	O
item	O
;	O
}	O
static	O
int	O
rb_t_init	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
{	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
const	O
rb_table	O
*	O
table	O
=	O
(	O
const	O
rb_table	O
*	O
)	O
vtable	O
;	O
trav	O
->	O
rb_table	O
=	O
table	O
;	O
trav	O
->	O
rb_node	O
=	O
NULL	O
;	O
trav	O
->	O
rb_height	O
=	O
0	int
;	O
trav	O
->	O
rb_generation	O
=	O
table	O
->	O
rb_generation	O
;	O
return	O
GSL_SUCCESS	O
;	O
}	O
static	O
void	O
*	O
rb_t_first	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
{	O
const	O
rb_table	O
*	O
table	O
=	O
(	O
const	O
rb_table	O
*	O
)	O
vtable	O
;	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
rb_node	O
*	O
x	double
;	O
trav	O
->	O
rb_table	O
=	O
table	O
;	O
trav	O
->	O
rb_height	O
=	O
0	int
;	O
trav	O
->	O
rb_generation	O
=	O
table	O
->	O
rb_generation	O
;	O
x	double
=	O
table	O
->	O
rb_root	O
;	O
if	O
(	O
x	double
!=	O
NULL	O
)	O
{	O
while	O
(	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
}	O
}	O
trav	O
->	O
rb_node	O
=	O
x	double
;	O
return	O
x	double
!=	O
NULL	O
?	O
x	double
->	O
rb_data	O
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_last	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
{	O
const	O
rb_table	O
*	O
table	O
=	O
(	O
const	O
rb_table	O
*	O
)	O
vtable	O
;	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
rb_node	O
*	O
x	double
;	O
trav	O
->	O
rb_table	O
=	O
table	O
;	O
trav	O
->	O
rb_height	O
=	O
0	int
;	O
trav	O
->	O
rb_generation	O
=	O
table	O
->	O
rb_generation	O
;	O
x	double
=	O
table	O
->	O
rb_root	O
;	O
if	O
(	O
x	double
!=	O
NULL	O
)	O
{	O
while	O
(	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
}	O
}	O
trav	O
->	O
rb_node	O
=	O
x	double
;	O
return	O
x	double
!=	O
NULL	O
?	O
x	double
->	O
rb_data	O
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_find	O
(	O
const	O
void	O
*	O
item	O
,	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vtable	O
)	O
{	O
const	O
rb_table	O
*	O
table	O
=	O
(	O
const	O
rb_table	O
*	O
)	O
vtable	O
;	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
rb_node	O
*	O
p	O
,	O
*	O
q	O
;	O
trav	O
->	O
rb_table	O
=	O
table	O
;	O
trav	O
->	O
rb_height	O
=	O
0	int
;	O
trav	O
->	O
rb_generation	O
=	O
table	O
->	O
rb_generation	O
;	O
for	O
(	O
p	O
=	O
table	O
->	O
rb_root	O
;	O
p	O
!=	O
NULL	O
;	O
p	O
=	O
q	O
)	O
{	O
int	O
cmp	O
=	O
table	O
->	O
rb_compare	O
(	O
item	O
,	O
p	O
->	O
rb_data	O
,	O
table	O
->	O
rb_param	O
)	O
;	O
if	O
(	O
cmp	O
<	O
0	int
)	O
q	O
=	O
p	O
->	O
rb_link	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
cmp	O
>	O
0	int
)	O
q	O
=	O
p	O
->	O
rb_link	O
[	O
1	int
]	O
;	O
else	O
{	O
trav	O
->	O
rb_node	O
=	O
p	O
;	O
return	O
p	O
->	O
rb_data	O
;	O
}	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
p	O
;	O
}	O
trav	O
->	O
rb_height	O
=	O
0	int
;	O
trav	O
->	O
rb_node	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_insert	O
(	O
void	O
*	O
item	O
,	O
void	O
*	O
vtrav	O
,	O
void	O
*	O
vtable	O
)	O
{	O
rb_table	O
*	O
table	O
=	O
(	O
rb_table	O
*	O
)	O
vtable	O
;	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
void	O
*	O
*	O
p	O
;	O
p	O
=	O
rb_probe	O
(	O
item	O
,	O
table	O
)	O
;	O
if	O
(	O
p	O
!=	O
NULL	O
)	O
{	O
trav	O
->	O
rb_table	O
=	O
table	O
;	O
trav	O
->	O
rb_node	O
=	O
(	O
(	O
rb_node	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
p	O
-	O
offsetof	O
(	O
rb_node	O
,	O
rb_data	O
)	O
)	O
)	O
;	O
trav	O
->	O
rb_generation	O
=	O
table	O
->	O
rb_generation	O
-	O
1	int
;	O
return	O
*	O
p	O
;	O
}	O
else	O
{	O
rb_t_init	O
(	O
vtrav	O
,	O
vtable	O
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
static	O
void	O
*	O
rb_t_copy	O
(	O
void	O
*	O
vtrav	O
,	O
const	O
void	O
*	O
vsrc	O
)	O
{	O
const	O
rb_traverser	O
*	O
src	O
=	O
(	O
const	O
rb_traverser	O
*	O
)	O
vsrc	O
;	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
if	O
(	O
trav	O
!=	O
src	O
)	O
{	O
trav	O
->	O
rb_table	O
=	O
src	O
->	O
rb_table	O
;	O
trav	O
->	O
rb_node	O
=	O
src	O
->	O
rb_node	O
;	O
trav	O
->	O
rb_generation	O
=	O
src	O
->	O
rb_generation	O
;	O
if	O
(	O
trav	O
->	O
rb_generation	O
==	O
trav	O
->	O
rb_table	O
->	O
rb_generation	O
)	O
{	O
trav	O
->	O
rb_height	O
=	O
src	O
->	O
rb_height	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
trav	O
->	O
rb_stack	O
,	O
(	O
const	O
void	O
*	O
)	O
src	O
->	O
rb_stack	O
,	O
sizeof	O
*	O
trav	O
->	O
rb_stack	O
*	O
trav	O
->	O
rb_height	O
)	O
;	O
}	O
}	O
return	O
trav	O
->	O
rb_node	O
!=	O
NULL	O
?	O
trav	O
->	O
rb_node	O
->	O
rb_data	O
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_next	O
(	O
void	O
*	O
vtrav	O
)	O
{	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
rb_node	O
*	O
x	double
;	O
if	O
(	O
trav	O
->	O
rb_generation	O
!=	O
trav	O
->	O
rb_table	O
->	O
rb_generation	O
)	O
rb_trav_refresh	O
(	O
trav	O
)	O
;	O
x	double
=	O
trav	O
->	O
rb_node	O
;	O
if	O
(	O
x	double
==	O
NULL	O
)	O
{	O
return	O
rb_t_first	O
(	O
vtrav	O
,	O
trav	O
->	O
rb_table	O
)	O
;	O
}	O
else	O
if	O
(	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
while	O
(	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
}	O
}	O
else	O
{	O
rb_node	O
*	O
y	double
;	O
do	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
==	O
0	int
)	O
{	O
trav	O
->	O
rb_node	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	double
=	O
x	double
;	O
x	double
=	O
trav	O
->	O
rb_stack	O
[	O
--	O
trav	O
->	O
rb_height	O
]	O
;	O
}	O
while	O
(	O
y	double
==	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
)	O
;	O
}	O
trav	O
->	O
rb_node	O
=	O
x	double
;	O
return	O
x	double
->	O
rb_data	O
;	O
}	O
static	O
void	O
*	O
rb_t_prev	O
(	O
void	O
*	O
vtrav	O
)	O
{	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
rb_node	O
*	O
x	double
;	O
if	O
(	O
trav	O
->	O
rb_generation	O
!=	O
trav	O
->	O
rb_table	O
->	O
rb_generation	O
)	O
rb_trav_refresh	O
(	O
trav	O
)	O
;	O
x	double
=	O
trav	O
->	O
rb_node	O
;	O
if	O
(	O
x	double
==	O
NULL	O
)	O
{	O
return	O
rb_t_last	O
(	O
vtrav	O
,	O
trav	O
->	O
rb_table	O
)	O
;	O
}	O
else	O
if	O
(	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
;	O
while	O
(	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
x	double
;	O
x	double
=	O
x	double
->	O
rb_link	O
[	O
1	int
]	O
;	O
}	O
}	O
else	O
{	O
rb_node	O
*	O
y	double
;	O
do	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
==	O
0	int
)	O
{	O
trav	O
->	O
rb_node	O
=	O
NULL	O
;	O
return	O
NULL	O
;	O
}	O
y	double
=	O
x	double
;	O
x	double
=	O
trav	O
->	O
rb_stack	O
[	O
--	O
trav	O
->	O
rb_height	O
]	O
;	O
}	O
while	O
(	O
y	double
==	O
x	double
->	O
rb_link	O
[	O
0	int
]	O
)	O
;	O
}	O
trav	O
->	O
rb_node	O
=	O
x	double
;	O
return	O
x	double
->	O
rb_data	O
;	O
}	O
static	O
void	O
*	O
rb_t_cur	O
(	O
const	O
void	O
*	O
vtrav	O
)	O
{	O
const	O
rb_traverser	O
*	O
trav	O
=	O
(	O
const	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
return	O
trav	O
->	O
rb_node	O
!=	O
NULL	O
?	O
trav	O
->	O
rb_node	O
->	O
rb_data	O
:	O
NULL	O
;	O
}	O
static	O
void	O
*	O
rb_t_replace	O
(	O
void	O
*	O
vtrav	O
,	O
void	O
*	O
new_item	O
)	O
{	O
rb_traverser	O
*	O
trav	O
=	O
(	O
rb_traverser	O
*	O
)	O
vtrav	O
;	O
void	O
*	O
old	O
;	O
old	O
=	O
trav	O
->	O
rb_node	O
->	O
rb_data	O
;	O
trav	O
->	O
rb_node	O
->	O
rb_data	O
=	O
new_item	O
;	O
return	O
old	O
;	O
}	O
static	O
void	O
rb_trav_refresh	O
(	O
rb_traverser	O
*	O
trav	O
)	O
{	O
trav	O
->	O
rb_generation	O
=	O
trav	O
->	O
rb_table	O
->	O
rb_generation	O
;	O
if	O
(	O
trav	O
->	O
rb_node	O
!=	O
NULL	O
)	O
{	O
gsl_bst_cmp_function	(*(void),*(void),*(void))->(int)
*	O
cmp	O
=	O
trav	O
->	O
rb_table	O
->	O
rb_compare	O
;	O
void	O
*	O
param	O
=	O
trav	O
->	O
rb_table	O
->	O
rb_param	O
;	O
rb_node	O
*	O
node	O
=	O
trav	O
->	O
rb_node	O
;	O
rb_node	O
*	O
i	O
;	O
trav	O
->	O
rb_height	O
=	O
0	int
;	O
for	O
(	O
i	O
=	O
trav	O
->	O
rb_table	O
->	O
rb_root	O
;	O
i	O
!=	O
node	O
;	O
)	O
{	O
if	O
(	O
trav	O
->	O
rb_height	O
>=	O
RB_MAX_HEIGHT	O
)	O
{	O
GSL_ERROR_VOID	O
(	O
"traverser height exceeds maximum"	*(char)
,	O
GSL_ETABLE	O
)	O
;	O
}	O
trav	O
->	O
rb_stack	O
[	O
trav	O
->	O
rb_height	O
++	O
]	O
=	O
i	O
;	O
i	O
=	O
i	O
->	O
rb_link	O
[	O
cmp	O
(	O
node	O
->	O
rb_data	O
,	O
i	O
->	O
rb_data	O
,	O
param	O
)	O
>	O
0	int
]	O
;	O
}	O
}	O
}	O
static	O
const	O
gsl_bst_type	O
rb_tree_type	O
=	O
{	O
"red-black"	*(char)
,	O
sizeof	O
(	O
rb_node	O
)	O
,	O
rb_init	O
,	O
rb_nodes	O
,	O
rb_insert	O
,	O
rb_find	O
,	O
rb_remove	O
,	O
rb_empty	O
,	O
rb_t_init	O
,	O
rb_t_first	O
,	O
rb_t_last	O
,	O
rb_t_find	O
,	O
rb_t_insert	O
,	O
rb_t_copy	O
,	O
rb_t_next	O
,	O
rb_t_prev	O
,	O
rb_t_cur	O
,	O
rb_t_replace	O
}	O
;	O
const	O
gsl_bst_type	O
*	O
gsl_bst_rb	O
=	O
&	O
rb_tree_type	O
;	O
