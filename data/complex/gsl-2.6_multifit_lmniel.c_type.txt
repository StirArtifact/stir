typedef	O
struct	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A_copy	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
long	O
nu	long
;	O
double	O
mu	double
;	O
double	O
tau	double
;	O
}	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
;	O
static	O
int	O
lmniel_alloc	(*(void),long,long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
lmniel_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
lmniel_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
lmniel_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
lmniel_alloc	(*(void),long,long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
state	*(int)
=	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
A	*(float)
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
A	*(float)
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for A"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for J"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for diag"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for rhs"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for work"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
A_copy	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
A_copy	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for A_copy"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for f_trial"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
tau	double
=	O
1.0e-3	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
lmniel_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
state	*(int)
=	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
A	*(float)
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
if	O
(	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
A_copy	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A_copy	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
int	O
lmniel_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
;	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
state	*(int)
=	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
)	O
vstate	*(void)
;	O
const	O
size_t	long
p	int
=	O
x	double
->	O
size	long
;	O
size_t	long
i	long
;	O
fdf	*((double,*(void),*(double),*(double))->(void))
->	O
nevalf	long
=	O
0	int
;	O
fdf	*((double,*(void),*(double),*(double))->(void))
->	O
nevaldf	long
=	O
0	int
;	O
status	int
=	O
gsl_multifit_eval_wf	(*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
->	O
df	*(double)
)	O
status	int
=	O
gsl_multifit_eval_wdf	(*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x	double
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
else	O
status	int
=	O
gsl_multifit_fdfsolver_dif_df	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
f	*(double)
,	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
-	O
1.0	int
,	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
,	O
0.0	int
,	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set_all	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
)	O
;	O
state	*(int)
->	O
nu	long
=	O
2	int
;	O
state	*(int)
->	O
mu	double
=	O
-	O
1.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
result	*(float)
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
result	*(float)
)	O
;	O
state	*(int)
->	O
mu	double
=	O
GSL_MAX	O
(	O
state	*(int)
->	O
mu	double
,	O
result	*(float)
)	O
;	O
}	O
state	*(int)
->	O
mu	double
*=	O
state	*(int)
->	O
tau	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmniel_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multifit_function_fdf	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))->(int)),long,long,*(void),long,long)
*	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
;	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
state	*(int)
=	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
)	O
vstate	*(void)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
=	O
state	*(int)
->	O
A	*(float)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
dF	double
;	O
double	O
dL	double
;	O
int	O
foundstep	int
=	O
0	int
;	O
status	int
=	O
gsl_blas_dsyrk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
A	*(float)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_matrix_transpose_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
A	*(float)
,	O
A	*(float)
)	O
;	O
while	O
(	O
!	O
foundstep	int
)	O
{	O
status	int
=	O
lmniel_calc_dx	(double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),long,double,double)))->(int)
(	O
state	*(int)
->	O
mu	double
,	O
A	*(float)
,	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
lmniel_trial_step	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x	double
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
status	int
=	O
gsl_multifit_eval_wf	(*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
dF	double
=	O
lmniel_calc_dF	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
f	*(double)
,	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
dL	double
=	O
lmniel_calc_dL	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
mu	double
,	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
(	O
dL	double
>	O
0.0	int
)	O
&&	O
(	O
dF	double
>=	O
0.0	int
)	O
)	O
{	O
double	O
tmp	double
;	O
tmp	double
=	O
2.0	int
*	O
(	O
dF	double
/	O
dL	double
)	O
-	O
1.0	int
;	O
tmp	double
=	O
1.0	int
-	O
tmp	double
*	O
tmp	double
*	O
tmp	double
;	O
state	*(int)
->	O
mu	double
*=	O
GSL_MAX	O
(	O
LM_ONE_THIRD	O
,	O
tmp	double
)	O
;	O
state	*(int)
->	O
nu	long
=	O
2	int
;	O
if	O
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
->	O
df	*(double)
)	O
status	int
=	O
gsl_multifit_eval_wdf	(*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
else	O
status	int
=	O
gsl_multifit_fdfsolver_dif_df	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
swts	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
fdf	*((double,*(void),*(double),*(double))->(void))
,	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	double
,	O
x_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
f	*(double)
,	O
f_trial	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
-	O
1.0	int
,	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
,	O
0.0	int
,	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
foundstep	int
=	O
1	int
;	O
}	O
else	O
{	O
long	O
nu2	long
;	O
state	*(int)
->	O
mu	double
*=	O
(	O
double	O
)	O
state	*(int)
->	O
nu	long
;	O
nu2	long
=	O
state	*(int)
->	O
nu	long
<<	O
1	int
;	O
if	O
(	O
nu2	long
<=	O
state	*(int)
->	O
nu	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
d	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
)	O
;	O
state	*(int)
->	O
nu	long
=	O
2	int
;	O
state	*(int)
->	O
mu	double
=	O
state	*(int)
->	O
tau	double
*	O
gsl_vector_max	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
d	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
break	O
;	O
}	O
state	*(int)
->	O
nu	long
=	O
nu2	long
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmniel_gradient	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
state	*(int)
=	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
)	O
vstate	*(void)
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
rhs	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
lmniel_jac	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
state	*(int)
=	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
*	O
)	O
vstate	*(void)
;	O
int	O
s	*(float)
=	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
s	*(float)
;	O
}	O
static	O
const	O
gsl_multifit_fdfsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
lmniel_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
=	O
{	O
"lmniel"	*(char)
,	O
sizeof	O
(	O
lmniel_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double,double)
)	O
,	O
&	O
lmniel_alloc	(*(void),long,long)->(int)
,	O
&	O
lmniel_set	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmniel_iterate	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmniel_gradient	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmniel_jac	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
lmniel_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multifit_fdfsolver_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_fdfsolver_lmniel	*(struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void))->(void))))
=	O
&	O
lmniel_type	struct(*(char),long,*((*(void),long,long)->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(struct(*`,*`,*`,long,long,*`,long,long)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(long,long,long,*`,*`,int)))->(int)),*((*(void))->(void)))
;	O
