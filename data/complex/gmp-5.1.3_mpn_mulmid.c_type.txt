void	O
mpn_mulmid	O
(	O
mp_ptr	*(long)
rp	*(long)
,	O
mp_srcptr	*(long)
ap	*(long)
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	*(long)
bp	*(long)
,	O
mp_size_t	long
bn	long
)	O
{	O
mp_size_t	long
rn	long
,	O
k	int
;	O
mp_ptr	*(long)
scratch	*(long)
,	O
temp	*(long)
;	O
ASSERT	O
(	O
an	long
>=	O
bn	long
)	O
;	O
ASSERT	O
(	O
bn	long
>=	O
1	int
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
rp	*(long)
,	O
an	long
-	O
bn	long
+	O
3	int
,	O
ap	*(long)
,	O
an	long
)	O
)	O
;	O
ASSERT	O
(	O
!	O
MPN_OVERLAP_P	O
(	O
rp	*(long)
,	O
an	long
-	O
bn	long
+	O
3	int
,	O
bp	*(long)
,	O
bn	long
)	O
)	O
;	O
if	O
(	O
bn	long
<	O
MULMID_TOOM42_THRESHOLD	int
)	O
{	O
if	O
(	O
an	long
<	O
CHUNK	O
)	O
{	O
mpn_mulmid_basecase	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
return	O
;	O
}	O
k	int
=	O
CHUNK	O
-	O
bn	long
+	O
1	int
;	O
mpn_mulmid_basecase	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
CHUNK	O
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
an	long
-=	O
k	int
;	O
while	O
(	O
an	long
>=	O
CHUNK	O
)	O
{	O
mp_limb_t	long
t0	long
,	O
t1	long
,	O
cy	long
;	O
ap	*(long)
+=	O
k	int
,	O
rp	*(long)
+=	O
k	int
;	O
t0	long
=	O
rp	*(long)
[	O
0	int
]	O
,	O
t1	long
=	O
rp	*(long)
[	O
1	int
]	O
;	O
mpn_mulmid_basecase	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
CHUNK	O
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	*(long)
[	O
0	int
]	O
,	O
rp	*(long)
[	O
0	int
]	O
,	O
t0	long
)	O
;	O
MPN_INCR_U	O
(	O
rp	*(long)
+	O
1	int
,	O
k	int
+	O
1	int
,	O
t1	long
+	O
cy	long
)	O
;	O
an	long
-=	O
k	int
;	O
}	O
if	O
(	O
an	long
>=	O
bn	long
)	O
{	O
mp_limb_t	long
t0	long
,	O
t1	long
,	O
cy	long
;	O
ap	*(long)
+=	O
k	int
,	O
rp	*(long)
+=	O
k	int
;	O
t0	long
=	O
rp	*(long)
[	O
0	int
]	O
,	O
t1	long
=	O
rp	*(long)
[	O
1	int
]	O
;	O
mpn_mulmid_basecase	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	*(long)
[	O
0	int
]	O
,	O
rp	*(long)
[	O
0	int
]	O
,	O
t0	long
)	O
;	O
MPN_INCR_U	O
(	O
rp	*(long)
+	O
1	int
,	O
an	long
-	O
bn	long
+	O
2	int
,	O
t1	long
+	O
cy	long
)	O
;	O
}	O
return	O
;	O
}	O
rn	long
=	O
an	long
-	O
bn	long
+	O
1	int
;	O
if	O
(	O
rn	long
<	O
MULMID_TOOM42_THRESHOLD	int
)	O
{	O
TMP_DECL	O
;	O
if	O
(	O
bn	long
<	O
CHUNK	O
)	O
{	O
mpn_mulmid_basecase	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
return	O
;	O
}	O
TMP_MARK	O
;	O
temp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
rn	long
+	O
2	int
)	O
;	O
bp	*(long)
+=	O
bn	long
-	O
CHUNK	O
,	O
an	long
-=	O
bn	long
-	O
CHUNK	O
;	O
mpn_mulmid_basecase	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
CHUNK	O
)	O
;	O
bn	long
-=	O
CHUNK	O
;	O
while	O
(	O
bn	long
>=	O
CHUNK	O
)	O
{	O
ap	*(long)
+=	O
CHUNK	O
,	O
bp	*(long)
-=	O
CHUNK	O
;	O
mpn_mulmid_basecase	O
(	O
temp	*(long)
,	O
ap	*(long)
,	O
an	long
,	O
bp	*(long)
,	O
CHUNK	O
)	O
;	O
mpn_add_n	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
temp	*(long)
,	O
rn	long
+	O
2	int
)	O
;	O
bn	long
-=	O
CHUNK	O
;	O
}	O
if	O
(	O
bn	long
)	O
{	O
ap	*(long)
+=	O
CHUNK	O
,	O
bp	*(long)
-=	O
bn	long
;	O
mpn_mulmid_basecase	O
(	O
temp	*(long)
,	O
ap	*(long)
,	O
rn	long
+	O
bn	long
-	O
1	int
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
mpn_add_n	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
temp	*(long)
,	O
rn	long
+	O
2	int
)	O
;	O
}	O
TMP_FREE	O
;	O
return	O
;	O
}	O
if	O
(	O
bn	long
>	O
rn	long
)	O
{	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
temp	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
rn	long
+	O
2	int
+	O
mpn_toom42_mulmid_itch	O
(	O
rn	long
)	O
)	O
;	O
scratch	*(long)
=	O
temp	*(long)
+	O
rn	long
+	O
2	int
;	O
bp	*(long)
+=	O
bn	long
-	O
rn	long
;	O
mpn_toom42_mulmid	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
bp	*(long)
,	O
rn	long
,	O
scratch	*(long)
)	O
;	O
bn	long
-=	O
rn	long
;	O
while	O
(	O
bn	long
>=	O
rn	long
)	O
{	O
ap	*(long)
+=	O
rn	long
,	O
bp	*(long)
-=	O
rn	long
;	O
mpn_toom42_mulmid	O
(	O
temp	*(long)
,	O
ap	*(long)
,	O
bp	*(long)
,	O
rn	long
,	O
scratch	*(long)
)	O
;	O
mpn_add_n	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
temp	*(long)
,	O
rn	long
+	O
2	int
)	O
;	O
bn	long
-=	O
rn	long
;	O
}	O
if	O
(	O
bn	long
)	O
{	O
ap	*(long)
+=	O
rn	long
,	O
bp	*(long)
-=	O
bn	long
;	O
mpn_mulmid	O
(	O
temp	*(long)
,	O
ap	*(long)
,	O
rn	long
+	O
bn	long
-	O
1	int
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
mpn_add_n	O
(	O
rp	*(long)
,	O
rp	*(long)
,	O
temp	*(long)
,	O
rn	long
+	O
2	int
)	O
;	O
}	O
TMP_FREE	O
;	O
}	O
else	O
{	O
TMP_DECL	O
;	O
TMP_MARK	O
;	O
scratch	*(long)
=	O
TMP_ALLOC_LIMBS	O
(	O
mpn_toom42_mulmid_itch	O
(	O
bn	long
)	O
)	O
;	O
mpn_toom42_mulmid	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
bp	*(long)
,	O
bn	long
,	O
scratch	*(long)
)	O
;	O
rn	long
-=	O
bn	long
;	O
while	O
(	O
rn	long
>=	O
bn	long
)	O
{	O
mp_limb_t	long
t0	long
,	O
t1	long
,	O
cy	long
;	O
ap	*(long)
+=	O
bn	long
,	O
rp	*(long)
+=	O
bn	long
;	O
t0	long
=	O
rp	*(long)
[	O
0	int
]	O
,	O
t1	long
=	O
rp	*(long)
[	O
1	int
]	O
;	O
mpn_toom42_mulmid	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
bp	*(long)
,	O
bn	long
,	O
scratch	*(long)
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	*(long)
[	O
0	int
]	O
,	O
rp	*(long)
[	O
0	int
]	O
,	O
t0	long
)	O
;	O
MPN_INCR_U	O
(	O
rp	*(long)
+	O
1	int
,	O
bn	long
+	O
1	int
,	O
t1	long
+	O
cy	long
)	O
;	O
rn	long
-=	O
bn	long
;	O
}	O
TMP_FREE	O
;	O
if	O
(	O
rn	long
)	O
{	O
mp_limb_t	long
t0	long
,	O
t1	long
,	O
cy	long
;	O
ap	*(long)
+=	O
bn	long
,	O
rp	*(long)
+=	O
bn	long
;	O
t0	long
=	O
rp	*(long)
[	O
0	int
]	O
,	O
t1	long
=	O
rp	*(long)
[	O
1	int
]	O
;	O
mpn_mulmid	O
(	O
rp	*(long)
,	O
ap	*(long)
,	O
rn	long
+	O
bn	long
-	O
1	int
,	O
bp	*(long)
,	O
bn	long
)	O
;	O
ADDC_LIMB	O
(	O
cy	long
,	O
rp	*(long)
[	O
0	int
]	O
,	O
rp	*(long)
[	O
0	int
]	O
,	O
t0	long
)	O
;	O
MPN_INCR_U	O
(	O
rp	*(long)
+	O
1	int
,	O
rn	long
+	O
1	int
,	O
t1	long
+	O
cy	long
)	O
;	O
}	O
}	O
}	O
