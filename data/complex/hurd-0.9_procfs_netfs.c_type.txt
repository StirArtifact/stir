char	O
*	O
netfs_server_name	*(char)
=	O
PROCFS_SERVER_NAME	*(char)
;	O
char	O
*	O
netfs_server_version	*(char)
=	O
PROCFS_SERVER_VERSION	*(char)
;	O
int	O
netfs_maxsymlinks	int
=	O
PROCFS_MAXSYMLINKS	int
;	O
error_t	O
netfs_validate_stat	(*(struct),*(struct))->(int)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
struct	O
iouser	O
*	O
cred	*(struct)
)	O
{	O
char	O
*	O
contents	*(char)
;	O
ssize_t	O
contents_len	int
;	O
error_t	O
err	O
;	O
if	O
(	O
!	O
S_ISLNK	()->(int)
(	O
np	*(struct)
->	O
nn_stat	O
.	O
st_mode	O
)	O
)	O
return	O
0	int
;	O
err	O
=	O
procfs_get_contents	()->(int)
(	O
np	*(struct)
,	O
&	O
contents	*(char)
,	O
&	O
contents_len	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
np	*(struct)
->	O
nn_stat	O
.	O
st_size	O
=	O
contents_len	int
;	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_read	(*(struct),*(struct),int,*(int),*(void))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
loff_t	O
offset	int
,	O
size_t	O
*	O
len	*(int)
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
*	O
contents	*(char)
;	O
ssize_t	O
contents_len	int
;	O
error_t	O
err	O
;	O
if	O
(	O
offset	int
==	O
0	int
)	O
procfs_refresh	()->(int)
(	O
np	*(struct)
)	O
;	O
err	O
=	O
procfs_get_contents	()->(int)
(	O
np	*(struct)
,	O
&	O
contents	*(char)
,	O
&	O
contents_len	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
contents	*(char)
+=	O
offset	int
;	O
contents_len	int
-=	O
offset	int
;	O
if	O
(	O
*	O
len	*(int)
>	O
contents_len	int
)	O
*	O
len	*(int)
=	O
contents_len	int
;	O
if	O
(	O
*	O
len	*(int)
<	O
0	int
)	O
*	O
len	*(int)
=	O
0	int
;	O
memcpy	O
(	O
data	*(void)
,	O
contents	*(char)
,	O
*	O
len	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_readlink	(*(struct),*(struct),*(char))->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
char	O
*	O
buf	*(char)
)	O
{	O
char	O
*	O
contents	*(char)
;	O
ssize_t	O
contents_len	int
;	O
error_t	O
err	O
;	O
err	O
=	O
procfs_get_contents	()->(int)
(	O
np	*(struct)
,	O
&	O
contents	*(char)
,	O
&	O
contents_len	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
assert	()->(int)
(	O
contents_len	int
==	O
np	*(struct)
->	O
nn_stat	O
.	O
st_size	O
)	O
;	O
memcpy	O
(	O
buf	*(char)
,	O
contents	*(char)
,	O
contents_len	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
putentries	(*(char),int,int,*(char),*(int))->(int)
(	O
char	O
*	O
contents	*(char)
,	O
size_t	O
contents_len	int
,	O
int	O
nentries	int
,	O
char	O
*	O
data	*(void)
,	O
mach_msg_type_number_t	O
*	O
datacnt	*(int)
)	O
{	O
int	O
i	int
;	O
*	O
datacnt	*(int)
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
contents_len	int
&&	O
(	O
nentries	int
<	O
0	int
||	O
i	int
<	O
nentries	int
)	O
;	O
i	int
++	O
)	O
{	O
int	O
namlen	int
=	O
strlen	O
(	O
contents	*(char)
)	O
;	O
int	O
reclen	int
=	O
sizeof	O
(	O
struct	O
dirent	O
)	O
+	O
namlen	int
;	O
if	O
(	O
data	*(void)
)	O
{	O
struct	O
dirent	O
*	O
d	*(struct)
=	O
(	O
struct	O
dirent	O
*	O
)	O
(	O
data	*(void)
+	O
*	O
datacnt	*(int)
)	O
;	O
d	*(struct)
->	O
d_fileno	O
=	O
42	int
;	O
d	*(struct)
->	O
d_namlen	O
=	O
namlen	int
;	O
d	*(struct)
->	O
d_reclen	O
=	O
reclen	int
;	O
d	*(struct)
->	O
d_type	O
=	O
DT_UNKNOWN	O
;	O
strcpy	O
(	O
d	*(struct)
->	O
d_name	O
,	O
contents	*(char)
)	O
;	O
}	O
*	O
datacnt	*(int)
+=	O
reclen	int
;	O
contents	*(char)
+=	O
namlen	int
+	O
1	int
;	O
contents_len	int
-=	O
namlen	int
+	O
1	int
;	O
}	O
return	O
i	int
;	O
}	O
error_t	O
netfs_get_dirents	(*(struct),*(struct),int,int,*(*(char)),*(int),int,*(int))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
int	O
entry	int
,	O
int	O
nentries	int
,	O
char	O
*	O
*	O
data	*(void)
,	O
mach_msg_type_number_t	O
*	O
datacnt	*(int)
,	O
vm_size_t	O
bufsize	int
,	O
int	O
*	O
amt	*(int)
)	O
{	O
char	O
*	O
contents	*(char)
;	O
ssize_t	O
contents_len	int
;	O
error_t	O
err	O
;	O
if	O
(	O
entry	int
==	O
0	int
)	O
procfs_refresh	()->(int)
(	O
dir	*(struct)
)	O
;	O
err	O
=	O
procfs_get_contents	()->(int)
(	O
dir	*(struct)
,	O
&	O
contents	*(char)
,	O
&	O
contents_len	int
)	O
;	O
if	O
(	O
err	O
)	O
return	O
err	O
;	O
assert	()->(int)
(	O
contents_len	int
==	O
0	int
||	O
contents	*(char)
[	O
contents_len	int
-	O
1	int
]	O
==	O
'\0'	O
)	O
;	O
while	O
(	O
contents_len	int
&&	O
entry	int
--	O
)	O
{	O
int	O
ofs	int
=	O
strlen	O
(	O
contents	*(char)
)	O
+	O
1	int
;	O
contents	*(char)
+=	O
ofs	int
;	O
contents_len	int
-=	O
ofs	int
;	O
}	O
putentries	(*(char),int,int,*(char),*(int))->(int)
(	O
contents	*(char)
,	O
contents_len	int
,	O
nentries	int
,	O
NULL	O
,	O
datacnt	*(int)
)	O
;	O
if	O
(	O
bufsize	int
<	O
*	O
datacnt	*(int)
)	O
{	O
char	O
*	O
n	*(char)
=	O
mmap	()->(int)
(	O
0	int
,	O
*	O
datacnt	*(int)
,	O
PROT_READ	O
|	O
PROT_WRITE	O
,	O
MAP_ANONYMOUS	O
,	O
0	int
,	O
0	int
)	O
;	O
if	O
(	O
n	*(char)
==	O
MAP_FAILED	O
)	O
return	O
ENOMEM	O
;	O
*	O
data	*(void)
=	O
n	*(char)
;	O
}	O
*	O
amt	*(int)
=	O
putentries	(*(char),int,int,*(char),*(int))->(int)
(	O
contents	*(char)
,	O
contents_len	int
,	O
nentries	int
,	O
*	O
data	*(void)
,	O
datacnt	*(int)
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_lookup	(*(struct),*(struct),*(char),*(*(struct)))->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
struct	O
node	O
*	O
*	O
np	*(struct)
)	O
{	O
error_t	O
err	O
;	O
err	O
=	O
procfs_lookup	()->(int)
(	O
dir	*(struct)
,	O
name	*(char)
,	O
np	*(struct)
)	O
;	O
pthread_mutex_unlock	()->(int)
(	O
&	O
dir	*(struct)
->	O
lock	O
)	O
;	O
if	O
(	O
!	O
err	O
)	O
pthread_mutex_lock	()->(int)
(	O
&	O
(	O
*	O
np	*(struct)
)	O
->	O
lock	O
)	O
;	O
return	O
err	O
;	O
}	O
void	O
netfs_node_norefs	(*(struct))->(void)
(	O
struct	O
node	O
*	O
np	*(struct)
)	O
{	O
procfs_cleanup	()->(int)
(	O
np	*(struct)
)	O
;	O
free	()->(int)
(	O
np	*(struct)
)	O
;	O
}	O
error_t	O
netfs_get_translator	(*(struct),*(*(char)),*(int))->(int)
(	O
struct	O
node	O
*	O
np	*(struct)
,	O
char	O
*	O
*	O
argz	*(*(char))
,	O
size_t	O
*	O
argz_len	*(int)
)	O
{	O
return	O
procfs_get_translator	()->(int)
(	O
np	*(struct)
,	O
argz	*(*(char))
,	O
argz_len	*(int)
)	O
;	O
}	O
error_t	O
netfs_check_open_permissions	(*(struct),*(struct),int,int)->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
int	O
flags	int
,	O
int	O
newnode	int
)	O
{	O
error_t	O
err	O
=	O
0	int
;	O
if	O
(	O
!	O
err	O
&&	O
(	O
flags	int
&	O
O_READ	O
)	O
)	O
err	O
=	O
fshelp_access	()->(int)
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
S_IREAD	O
,	O
user	*(struct)
)	O
;	O
if	O
(	O
!	O
err	O
&&	O
(	O
flags	int
&	O
O_WRITE	O
)	O
)	O
err	O
=	O
fshelp_access	()->(int)
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
S_IWRITE	O
,	O
user	*(struct)
)	O
;	O
if	O
(	O
!	O
err	O
&&	O
(	O
flags	int
&	O
O_EXEC	O
)	O
)	O
err	O
=	O
fshelp_access	()->(int)
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
S_IEXEC	O
,	O
user	*(struct)
)	O
;	O
return	O
err	O
;	O
}	O
error_t	O
netfs_report_access	(*(struct),*(struct),*(int))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
int	O
*	O
types	*(int)
)	O
{	O
*	O
types	*(int)
=	O
0	int
;	O
if	O
(	O
fshelp_access	()->(int)
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
S_IREAD	O
,	O
cred	*(struct)
)	O
==	O
0	int
)	O
*	O
types	*(int)
|=	O
O_READ	O
;	O
if	O
(	O
fshelp_access	()->(int)
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
S_IWRITE	O
,	O
cred	*(struct)
)	O
==	O
0	int
)	O
*	O
types	*(int)
|=	O
O_WRITE	O
;	O
if	O
(	O
fshelp_access	()->(int)
(	O
&	O
np	*(struct)
->	O
nn_stat	O
,	O
S_IEXEC	O
,	O
cred	*(struct)
)	O
==	O
0	int
)	O
*	O
types	*(int)
|=	O
O_EXEC	O
;	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_chown	(*(struct),*(struct),int,int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
uid_t	O
uid	int
,	O
uid_t	O
gid	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_chauthor	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
uid_t	O
author	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_chmod	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
mode_t	O
mode	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_mksymlink	(*(struct),*(struct),*(char))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_mkdev	(*(struct),*(struct),int,int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
mode_t	O
type	int
,	O
dev_t	O
indexes	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_chflags	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
int	O
flags	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_utimes	(*(struct),*(struct),*(struct),*(struct))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
struct	O
timespec	O
*	O
atime	*(struct)
,	O
struct	O
timespec	O
*	O
mtime	*(struct)
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_set_size	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
loff_t	O
size	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_statfs	(*(struct),*(struct),*(int))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
fsys_statfsbuf_t	O
*	O
st	*(int)
)	O
{	O
memset	O
(	O
st	*(int)
,	O
0	int
,	O
sizeof	O
*	O
st	*(int)
)	O
;	O
st	*(int)
->	O
f_type	O
=	O
FSTYPE_PROC	O
;	O
st	*(int)
->	O
f_fsid	O
=	O
getpid	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_sync	(*(struct),*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
int	O
wait	int
)	O
{	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_syncfs	(*(struct),int)->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
int	O
wait	int
)	O
{	O
return	O
0	int
;	O
}	O
error_t	O
netfs_attempt_unlink	(*(struct),*(struct),*(char))->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_rename	(*(struct),*(struct),*(char),*(struct),*(char),int)->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
fromdir	*(struct)
,	O
char	O
*	O
fromname	*(char)
,	O
struct	O
node	O
*	O
todir	*(struct)
,	O
char	O
*	O
toname	*(char)
,	O
int	O
excl	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_mkdir	(*(struct),*(struct),*(char),int)->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
mode_t	O
mode	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_rmdir	(*(struct),*(struct),*(char))->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_link	(*(struct),*(struct),*(struct),*(char),int)->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
struct	O
node	O
*	O
file	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
int	O
excl	int
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_mkfile	(*(struct),*(struct),int,*(*(struct)))->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
mode_t	O
mode	int
,	O
struct	O
node	O
*	O
*	O
np	*(struct)
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_create_file	(*(struct),*(struct),*(char),int,*(*(struct)))->(int)
(	O
struct	O
iouser	O
*	O
user	*(struct)
,	O
struct	O
node	O
*	O
dir	*(struct)
,	O
char	O
*	O
name	*(char)
,	O
mode_t	O
mode	int
,	O
struct	O
node	O
*	O
*	O
np	*(struct)
)	O
{	O
return	O
EROFS	O
;	O
}	O
error_t	O
netfs_attempt_write	(*(struct),*(struct),int,*(int),*(void))->(int)
(	O
struct	O
iouser	O
*	O
cred	*(struct)
,	O
struct	O
node	O
*	O
np	*(struct)
,	O
loff_t	O
offset	int
,	O
size_t	O
*	O
len	*(int)
,	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
EROFS	O
;	O
}	O
