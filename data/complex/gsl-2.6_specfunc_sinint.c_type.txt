static	O
double	O
f1_data	array(double)
[	O
20	int
]	O
=	O
{	O
-	O
0.1191081969051363610	int
,	O
-	O
0.0247823144996236248	int
,	O
0.0011910281453357821	int
,	O
-	O
0.0000927027714388562	int
,	O
0.0000093373141568271	int
,	O
-	O
0.0000011058287820557	int
,	O
0.0000001464772071460	int
,	O
-	O
0.0000000210694496288	int
,	O
0.0000000032293492367	int
,	O
-	O
0.0000000005206529618	int
,	O
0.0000000000874878885	int
,	O
-	O
0.0000000000152176187	int
,	O
0.0000000000027257192	int
,	O
-	O
0.0000000000005007053	int
,	O
0.0000000000000940241	int
,	O
-	O
0.0000000000000180014	int
,	O
0.0000000000000035063	int
,	O
-	O
0.0000000000000006935	int
,	O
0.0000000000000001391	int
,	O
-	O
0.0000000000000000282	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
f1_cs	struct(*(double),int,double,double,int)
=	O
{	O
f1_data	array(double)
,	O
19	int
,	O
-	O
1	int
,	O
1	int
,	O
10	int
}	O
;	O
static	O
double	O
f2_data	array(double)
[	O
29	int
]	O
=	O
{	O
-	O
0.0348409253897013234	int
,	O
-	O
0.0166842205677959686	int
,	O
0.0006752901241237738	int
,	O
-	O
0.0000535066622544701	int
,	O
0.0000062693421779007	int
,	O
-	O
0.0000009526638801991	int
,	O
0.0000001745629224251	int
,	O
-	O
0.0000000368795403065	int
,	O
0.0000000087202677705	int
,	O
-	O
0.0000000022601970392	int
,	O
0.0000000006324624977	int
,	O
-	O
0.0000000001888911889	int
,	O
0.0000000000596774674	int
,	O
-	O
0.0000000000198044313	int
,	O
0.0000000000068641396	int
,	O
-	O
0.0000000000024731020	int
,	O
0.0000000000009226360	int
,	O
-	O
0.0000000000003552364	int
,	O
0.0000000000001407606	int
,	O
-	O
0.0000000000000572623	int
,	O
0.0000000000000238654	int
,	O
-	O
0.0000000000000101714	int
,	O
0.0000000000000044259	int
,	O
-	O
0.0000000000000019634	int
,	O
0.0000000000000008868	int
,	O
-	O
0.0000000000000004074	int
,	O
0.0000000000000001901	int
,	O
-	O
0.0000000000000000900	int
,	O
0.0000000000000000432	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
f2_cs	struct(*(double),int,double,double,int)
=	O
{	O
f2_data	array(double)
,	O
28	int
,	O
-	O
1	int
,	O
1	int
,	O
14	int
}	O
;	O
static	O
double	O
g1_data	array(double)
[	O
21	int
]	O
=	O
{	O
-	O
0.3040578798253495954	int
,	O
-	O
0.0566890984597120588	int
,	O
0.0039046158173275644	int
,	O
-	O
0.0003746075959202261	int
,	O
0.0000435431556559844	int
,	O
-	O
0.0000057417294453025	int
,	O
0.0000008282552104503	int
,	O
-	O
0.0000001278245892595	int
,	O
0.0000000207978352949	int
,	O
-	O
0.0000000035313205922	int
,	O
0.0000000006210824236	int
,	O
-	O
0.0000000001125215474	int
,	O
0.0000000000209088918	int
,	O
-	O
0.0000000000039715832	int
,	O
0.0000000000007690431	int
,	O
-	O
0.0000000000001514697	int
,	O
0.0000000000000302892	int
,	O
-	O
0.0000000000000061400	int
,	O
0.0000000000000012601	int
,	O
-	O
0.0000000000000002615	int
,	O
0.0000000000000000548	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
g1_cs	struct(*(double),int,double,double,int)
=	O
{	O
g1_data	array(double)
,	O
20	int
,	O
-	O
1	int
,	O
1	int
,	O
13	int
}	O
;	O
static	O
double	O
g2_data	array(double)
[	O
34	int
]	O
=	O
{	O
-	O
0.0967329367532432218	int
,	O
-	O
0.0452077907957459871	int
,	O
0.0028190005352706523	int
,	O
-	O
0.0002899167740759160	int
,	O
0.0000407444664601121	int
,	O
-	O
0.0000071056382192354	int
,	O
0.0000014534723163019	int
,	O
-	O
0.0000003364116512503	int
,	O
0.0000000859774367886	int
,	O
-	O
0.0000000238437656302	int
,	O
0.0000000070831906340	int
,	O
-	O
0.0000000022318068154	int
,	O
0.0000000007401087359	int
,	O
-	O
0.0000000002567171162	int
,	O
0.0000000000926707021	int
,	O
-	O
0.0000000000346693311	int
,	O
0.0000000000133950573	int
,	O
-	O
0.0000000000053290754	int
,	O
0.0000000000021775312	int
,	O
-	O
0.0000000000009118621	int
,	O
0.0000000000003905864	int
,	O
-	O
0.0000000000001708459	int
,	O
0.0000000000000762015	int
,	O
-	O
0.0000000000000346151	int
,	O
0.0000000000000159996	int
,	O
-	O
0.0000000000000075213	int
,	O
0.0000000000000035970	int
,	O
-	O
0.0000000000000017530	int
,	O
0.0000000000000008738	int
,	O
-	O
0.0000000000000004487	int
,	O
0.0000000000000002397	int
,	O
-	O
0.0000000000000001347	int
,	O
0.0000000000000000801	int
,	O
-	O
0.0000000000000000501	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
g2_cs	struct(*(double),int,double,double,int)
=	O
{	O
g2_data	array(double)
,	O
33	int
,	O
-	O
1	int
,	O
1	int
,	O
20	int
}	O
;	O
static	O
void	O
fg_asymp	(double,*(struct(double,double)),*(struct(double,double)))->(void)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
f	*(double)
,	O
gsl_sf_result	struct(double,double)
*	O
g	*(struct(double,double))
)	O
{	O
const	O
double	O
xbig	double
=	O
1.0	int
/	O
GSL_SQRT_DBL_EPSILON	int
;	O
const	O
double	O
xmaxf	double
=	O
1.0	int
/	O
GSL_DBL_MIN	int
;	O
const	O
double	O
xmaxg	double
=	O
1.0	int
/	O
GSL_SQRT_DBL_MIN	int
;	O
const	O
double	O
xbnd	double
=	O
7.07106781187	int
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
if	O
(	O
x	double
<=	O
xbnd	double
)	O
{	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c2	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
f1_cs	struct(*(double),int,double,double,int)
,	O
(	O
1.0	int
/	O
x2	double
-	O
0.04125	int
)	O
/	O
0.02125	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
g1_cs	struct(*(double),int,double,double,int)
,	O
(	O
1.0	int
/	O
x2	double
-	O
0.04125	int
)	O
/	O
0.02125	int
,	O
&	O
result_c2	struct(double,double)
)	O
;	O
f	*(double)
->	O
val	double
=	O
(	O
1.0	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
/	O
x	double
;	O
g	*(struct(double,double))
->	O
val	double
=	O
(	O
1.0	int
+	O
result_c2	struct(double,double)
.	O
val	double
)	O
/	O
x2	double
;	O
f	*(double)
->	O
err	double
=	O
result_c1	struct(double,double)
.	O
err	double
/	O
x	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
f	*(double)
->	O
val	double
)	O
;	O
g	*(struct(double,double))
->	O
err	double
=	O
result_c2	struct(double,double)
.	O
err	double
/	O
x2	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
g	*(struct(double,double))
->	O
val	double
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
xbig	double
)	O
{	O
gsl_sf_result	struct(double,double)
result_c1	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
result_c2	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
f2_cs	struct(*(double),int,double,double,int)
,	O
100.0	int
/	O
x2	double
-	O
1.0	int
,	O
&	O
result_c1	struct(double,double)
)	O
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
g2_cs	struct(*(double),int,double,double,int)
,	O
100.0	int
/	O
x2	double
-	O
1.0	int
,	O
&	O
result_c2	struct(double,double)
)	O
;	O
f	*(double)
->	O
val	double
=	O
(	O
1.0	int
+	O
result_c1	struct(double,double)
.	O
val	double
)	O
/	O
x	double
;	O
g	*(struct(double,double))
->	O
val	double
=	O
(	O
1.0	int
+	O
result_c2	struct(double,double)
.	O
val	double
)	O
/	O
x2	double
;	O
f	*(double)
->	O
err	double
=	O
result_c1	struct(double,double)
.	O
err	double
/	O
x	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
f	*(double)
->	O
val	double
)	O
;	O
g	*(struct(double,double))
->	O
err	double
=	O
result_c2	struct(double,double)
.	O
err	double
/	O
x2	double
+	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
g	*(struct(double,double))
->	O
val	double
)	O
;	O
}	O
else	O
{	O
f	*(double)
->	O
val	double
=	O
(	O
x	double
<	O
xmaxf	double
?	O
1.0	int
/	O
x	double
:	O
0.0	int
)	O
;	O
g	*(struct(double,double))
->	O
val	double
=	O
(	O
x	double
<	O
xmaxg	double
?	O
1.0	int
/	O
x2	double
:	O
0.0	int
)	O
;	O
f	*(double)
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
f	*(double)
->	O
val	double
)	O
;	O
g	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
g	*(struct(double,double))
->	O
val	double
)	O
;	O
}	O
return	O
;	O
}	O
static	O
double	O
si_data	array(double)
[	O
12	int
]	O
=	O
{	O
-	O
0.1315646598184841929	int
,	O
-	O
0.2776578526973601892	int
,	O
0.0354414054866659180	int
,	O
-	O
0.0025631631447933978	int
,	O
0.0001162365390497009	int
,	O
-	O
0.0000035904327241606	int
,	O
0.0000000802342123706	int
,	O
-	O
0.0000000013562997693	int
,	O
0.0000000000179440722	int
,	O
-	O
0.0000000000001908387	int
,	O
0.0000000000000016670	int
,	O
-	O
0.0000000000000000122	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
si_cs	struct(*(double),int,double,double,int)
=	O
{	O
si_data	array(double)
,	O
11	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
ci_data	array(double)
[	O
13	int
]	O
=	O
{	O
-	O
0.34004281856055363156	int
,	O
-	O
1.03302166401177456807	int
,	O
0.19388222659917082877	int
,	O
-	O
0.01918260436019865894	int
,	O
0.00110789252584784967	int
,	O
-	O
0.00004157234558247209	int
,	O
0.00000109278524300229	int
,	O
-	O
0.00000002123285954183	int
,	O
0.00000000031733482164	int
,	O
-	O
0.00000000000376141548	int
,	O
0.00000000000003622653	int
,	O
-	O
0.00000000000000028912	int
,	O
0.00000000000000000194	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
ci_cs	struct(*(double),int,double,double,int)
=	O
{	O
ci_data	array(double)
,	O
12	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
int	O
gsl_sf_Si_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
ax	double
=	O
fabs	(double)->(double)
(	O
x	double
)	O
;	O
if	O
(	O
ax	double
<	O
GSL_SQRT_DBL_EPSILON	int
)	O
{	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
0.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
ax	double
<=	O
4.0	int
)	O
{	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
si_cs	struct(*(double),int,double,double,int)
,	O
(	O
x	double
*	O
x	double
-	O
8.0	int
)	O
*	O
0.125	int
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
x	double
*	O
(	O
0.75	int
+	O
result_c	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
ax	double
*	O
result_c	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
f	*(double)
;	O
gsl_sf_result	struct(double,double)
g	*(struct(double,double))
;	O
fg_asymp	(double,*(struct(double,double)),*(struct(double,double)))->(void)
(	O
ax	double
,	O
&	O
f	*(double)
,	O
&	O
g	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
0.5	int
*	O
M_PI	int
-	O
f	*(double)
.	O
val	double
*	O
cos	(double)->(double)
(	O
ax	double
)	O
-	O
g	*(struct(double,double))
.	O
val	double
*	O
sin	(double)->(double)
(	O
ax	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
f	*(double)
.	O
err	double
+	O
g	*(struct(double,double))
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
if	O
(	O
x	double
<	O
0.0	int
)	O
result	*(struct(double,double))
->	O
val	double
=	O
-	O
result	*(struct(double,double))
->	O
val	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_Ci_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
4.0	int
)	O
{	O
const	O
double	O
lx	double
=	O
log	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
y	double
=	O
(	O
x	double
*	O
x	double
-	O
8.0	int
)	O
*	O
0.125	int
;	O
gsl_sf_result	struct(double,double)
result_c	struct(double,double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
ci_cs	struct(*(double),int,double,double,int)
,	O
y	double
,	O
&	O
result_c	struct(double,double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
lx	double
-	O
0.5	int
+	O
result_c	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
fabs	(double)->(double)
(	O
lx	double
)	O
+	O
0.5	int
)	O
+	O
result_c	struct(double,double)
.	O
err	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
sin_result	struct(double,double)
;	O
gsl_sf_result	struct(double,double)
cos_result	struct(double,double)
;	O
int	O
stat_sin	int
=	O
gsl_sf_sin_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
sin_result	struct(double,double)
)	O
;	O
int	O
stat_cos	int
=	O
gsl_sf_cos_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
cos_result	struct(double,double)
)	O
;	O
gsl_sf_result	struct(double,double)
f	*(double)
;	O
gsl_sf_result	struct(double,double)
g	*(struct(double,double))
;	O
fg_asymp	(double,*(struct(double,double)),*(struct(double,double)))->(void)
(	O
x	double
,	O
&	O
f	*(double)
,	O
&	O
g	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
f	*(double)
.	O
val	double
*	O
sin_result	struct(double,double)
.	O
val	double
-	O
g	*(struct(double,double))
.	O
val	double
*	O
cos_result	struct(double,double)
.	O
val	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
f	*(double)
.	O
err	double
*	O
sin_result	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
fabs	(double)->(double)
(	O
g	*(struct(double,double))
.	O
err	double
*	O
cos_result	struct(double,double)
.	O
val	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
fabs	(double)->(double)
(	O
f	*(double)
.	O
val	double
*	O
sin_result	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
fabs	(double)->(double)
(	O
g	*(struct(double,double))
.	O
val	double
*	O
cos_result	struct(double,double)
.	O
err	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_sin	int
,	O
stat_cos	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_Si	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_Si_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_Ci	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_Ci_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
