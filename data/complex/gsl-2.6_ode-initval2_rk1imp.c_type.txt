typedef	O
struct	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
;	O
double	O
*	O
y_onestep	*(double)
;	O
double	O
*	O
y_twostep	*(double)
;	O
double	O
*	O
ytmp	*(double)
;	O
double	O
*	O
y_save	*(double)
;	O
double	O
*	O
YZ	array(double)
;	O
double	O
*	O
fYZ	*(double)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
dfdy	*(double)
;	O
double	O
*	O
dfdt	array(double)
;	O
modnewton1_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
;	O
double	O
*	O
errlev	*(double)
;	O
const	O
gsl_odeiv2_driver	struct
*	O
driver	*(struct)
;	O
}	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
;	O
static	O
void	O
*	O
rk1imp_alloc	(long)->(*(void))
(	O
size_t	long
dim	long
)	O
{	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
state	*(int)
=	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rk1imp_state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
A	*(float)
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
RK1IMP_STAGE	int
,	O
RK1IMP_STAGE	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
A	*(float)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for A"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y_onestep	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y_onestep	*(double)
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_onestep"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y_twostep	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y_twostep	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_onestep"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ytmp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
ytmp	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y_save	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y_save	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_save"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
YZ	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
RK1IMP_STAGE	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
YZ	array(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for YZ"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
fYZ	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
RK1IMP_STAGE	int
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
fYZ	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
YZ	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for fYZ"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
dfdt	array(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
dfdt	array(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
fYZ	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
YZ	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dfdt"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
dfdy	*(double)
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
dim	long
,	O
dim	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
dfdy	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
dfdt	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
fYZ	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
YZ	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dfdy"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
=	O
modnewton1_alloc	(long,long)->(*(void))
(	O
dim	long
,	O
RK1IMP_STAGE	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
==	O
0	int
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dfdy	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
dfdt	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
fYZ	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
YZ	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for esol"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
errlev	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
errlev	*(double)
==	O
0	int
)	O
{	O
modnewton1_free	(*(void))->(void)
(	O
state	*(int)
->	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dfdy	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
dfdt	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
fYZ	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
YZ	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for errlev"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
driver	*(struct)
=	O
NULL	O
;	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
rk1imp_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	double
[	O
]	O
,	O
double	O
yerr	array(double)
[	O
]	O
,	O
const	O
double	O
dydt_in	array(double)
[	O
]	O
,	O
double	O
dydt_out	array(double)
[	O
]	O
,	O
const	O
gsl_odeiv2_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
{	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
state	*(int)
=	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
)	O
vstate	*(void)
;	O
double	O
*	O
const	O
y_onestep	*(double)
=	O
state	*(int)
->	O
y_onestep	*(double)
;	O
double	O
*	O
const	O
y_twostep	*(double)
=	O
state	*(int)
->	O
y_twostep	*(double)
;	O
double	O
*	O
const	O
ytmp	*(double)
=	O
state	*(int)
->	O
ytmp	*(double)
;	O
double	O
*	O
const	O
y_save	*(double)
=	O
state	*(int)
->	O
y_save	*(double)
;	O
double	O
*	O
const	O
YZ	array(double)
=	O
state	*(int)
->	O
YZ	array(double)
;	O
double	O
*	O
const	O
fYZ	*(double)
=	O
state	*(int)
->	O
fYZ	*(double)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
const	O
dfdy	*(double)
=	O
state	*(int)
->	O
dfdy	*(double)
;	O
double	O
*	O
const	O
dfdt	array(double)
=	O
state	*(int)
->	O
dfdt	array(double)
;	O
double	O
*	O
const	O
errlev	*(double)
=	O
state	*(int)
->	O
errlev	*(double)
;	O
const	O
modnewton1_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)),double)
*	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
=	O
state	*(int)
->	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
=	O
state	*(int)
->	O
A	*(float)
;	O
const	O
double	O
b	double
[	O
]	O
=	O
{	O
1.0	int
}	O
;	O
const	O
double	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
[	O
]	O
=	O
{	O
1.0	int
}	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
1.0	int
)	O
;	O
if	O
(	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"no non-linear equation solver speficied"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
state	*(int)
->	O
driver	*(struct)
==	O
NULL	O
)	O
{	O
return	O
GSL_EFAULT	int
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
dydt_in	array(double)
!=	O
NULL	O
)	O
{	O
gsl_odeiv2_control_errlevel	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),double,double,double,long,*(double))->(int)
(	O
state	*(int)
->	O
driver	*(struct)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
y	double
[	O
i	long
]	O
,	O
dydt_in	array(double)
[	O
i	long
]	O
,	O
h	double
,	O
i	long
,	O
&	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
else	O
{	O
gsl_odeiv2_control_errlevel	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(void))),double,double,double,long,*(double))->(int)
(	O
state	*(int)
->	O
driver	*(struct)
->	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
y	double
[	O
i	long
]	O
,	O
0.0	int
,	O
h	double
,	O
i	long
,	O
&	O
errlev	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_JA_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
y	double
,	O
dfdy	*(double)
->	O
data	*(long)
,	O
dfdt	array(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
modnewton1_init	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
(	O
void	O
*	O
)	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
,	O
A	*(float)
,	O
h	double
,	O
dfdy	*(double)
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
modnewton1_solve	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),double,double,array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),array(double),array(double))->(int)
(	O
(	O
void	O
*	O
)	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
,	O
A	*(float)
,	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
t	double
,	O
h	double
,	O
y	double
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
YZ	array(double)
,	O
errlev	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
[	O
0	int
]	O
*	O
h	double
,	O
YZ	array(double)
,	O
fYZ	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
rksubs	(array(double),double,array(double),array(double),array(double),long,long)->(int)
(	O
y_onestep	*(double)
,	O
h	double
,	O
y	double
,	O
fYZ	*(double)
,	O
b	double
,	O
RK1IMP_STAGE	int
,	O
dim	long
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
modnewton1_init	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
(	O
void	O
*	O
)	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
,	O
A	*(float)
,	O
h	double
/	O
2.0	int
,	O
dfdy	*(double)
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
modnewton1_solve	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),double,double,array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),array(double),array(double))->(int)
(	O
(	O
void	O
*	O
)	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
,	O
A	*(float)
,	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
t	double
,	O
h	double
/	O
2.0	int
,	O
y	double
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
YZ	array(double)
,	O
errlev	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
[	O
0	int
]	O
*	O
h	double
/	O
2.0	int
,	O
YZ	array(double)
,	O
fYZ	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
rksubs	(array(double),double,array(double),array(double),array(double),long,long)->(int)
(	O
ytmp	*(double)
,	O
h	double
/	O
2.0	int
,	O
y	double
,	O
fYZ	*(double)
,	O
b	double
,	O
RK1IMP_STAGE	int
,	O
dim	long
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
DBL_MEMCPY	O
(	O
y_save	*(double)
,	O
y	double
,	O
dim	long
)	O
;	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
modnewton1_solve	(*(void),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),array(double),double,double,array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))),array(double),array(double))->(int)
(	O
(	O
void	O
*	O
)	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
,	O
A	*(float)
,	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
,	O
t	double
+	O
h	double
/	O
2.0	int
,	O
h	double
/	O
2.0	int
,	O
ytmp	*(double)
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
YZ	array(double)
,	O
errlev	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
/	O
2.0	int
+	O
c	*(struct(*(struct(*(char),*(()->(*`)),*((*`,double,double,double,double)->(int)),*((*`,long,int,array(double),array(double),array(double),*`)->(int)),*((*`,double,double,double,long,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),*(void)))
[	O
0	int
]	O
*	O
h	double
/	O
2.0	int
,	O
YZ	array(double)
,	O
fYZ	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
rksubs	(array(double),double,array(double),array(double),array(double),long,long)->(int)
(	O
y_twostep	*(double)
,	O
h	double
/	O
2.0	int
,	O
ytmp	*(double)
,	O
fYZ	*(double)
,	O
b	double
,	O
RK1IMP_STAGE	int
,	O
dim	long
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_save	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_twostep	*(double)
,	O
dim	long
)	O
;	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array(double)
[	O
i	long
]	O
=	O
ODEIV_ERR_SAFETY	int
*	O
0.5	int
*	O
fabs	(double)->(double)
(	O
y_twostep	*(double)
[	O
i	long
]	O
-	O
y_onestep	*(double)
[	O
i	long
]	O
)	O
;	O
}	O
}	O
if	O
(	O
dydt_out	array(double)
!=	O
NULL	O
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
,	O
y	double
,	O
dydt_out	array(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y_save	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk1imp_set_driver	(*(void),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
const	O
gsl_odeiv2_driver	struct
*	O
d	*(struct)
)	O
{	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
state	*(int)
=	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
)	O
vstate	*(void)
;	O
state	*(int)
->	O
driver	*(struct)
=	O
d	*(struct)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk1imp_reset	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
)	O
{	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
state	*(int)
=	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
)	O
vstate	*(void)
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
y_onestep	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
y_twostep	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
ytmp	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
y_save	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
YZ	array(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
fYZ	*(double)
,	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
rk1imp_order	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
state	*(int)
=	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
)	O
vstate	*(void)
;	O
state	*(int)
=	O
0	int
;	O
return	O
1	int
;	O
}	O
static	O
void	O
rk1imp_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
state	*(int)
=	O
(	O
rk1imp_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double),*(double),*(double),*(double),*(double),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(double),*(struct(long,long,*`,*`,int)),double)),*(double),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))
*	O
)	O
vstate	*(void)
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
errlev	*(double)
)	O
;	O
modnewton1_free	(*(void))->(void)
(	O
state	*(int)
->	O
esol	*(struct(*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(double),*(struct(long,long,*(double),*(struct`),int)),double))
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dfdy	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
dfdt	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
fYZ	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
YZ	array(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_save	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_twostep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
A	*(float)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
rk1imp_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct(*`,*`,*`,*`,double,double,double,long,long)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"rk1imp"	*(char)
,	O
1	int
,	O
1	int
,	O
&	O
rk1imp_alloc	(long)->(*(void))
,	O
&	O
rk1imp_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
,	O
&	O
rk1imp_set_driver	(*(void),*(struct(*(struct(*`,*`,long,*`)),*(struct(*`,long,*`)),*(struct(*`,*`)),*(struct(long,*`,*`,*`,*`,double,long,long,*`)),double,double,double,long,long)))->(int)
,	O
&	O
rk1imp_reset	(*(void),long)->(int)
,	O
&	O
rk1imp_order	(*(void))->(int)
,	O
&	O
rk1imp_free	(*(void))->(void)
}	O
;	O
const	O
gsl_odeiv2_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
gsl_odeiv2_step_rk1imp	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
=	O
&	O
rk1imp_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),*(struct(*`,*`,*`,*`,double,double,double,long,long)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
;	O
