static	O
unsigned	O
int	O
bfd_id_counter	O
=	O
0	int
;	O
static	O
unsigned	O
int	O
bfd_reserved_id_counter	O
=	O
0	int
;	O
unsigned	O
int	O
bfd_use_reserved_id	int
=	O
0	int
;	O
bfd	struct
*	O
_bfd_new_bfd	O
(	O
void	O
)	O
{	O
bfd	struct
*	O
nbfd	*(struct)
;	O
nbfd	*(struct)
=	O
(	O
bfd	struct
*	O
)	O
bfd_zmalloc	O
(	O
sizeof	O
(	O
bfd	struct
)	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
bfd_use_reserved_id	int
)	O
{	O
nbfd	*(struct)
->	O
id	int
=	O
--	O
bfd_reserved_id_counter	O
;	O
--	O
bfd_use_reserved_id	int
;	O
}	O
else	O
nbfd	*(struct)
->	O
id	int
=	O
bfd_id_counter	O
++	O
;	O
nbfd	*(struct)
->	O
memory	*(void)
=	O
objalloc_create	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
memory	*(void)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
free	(*(void))->(void)
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
arch_info	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
=	O
&	O
bfd_default_arch_struct	O
;	O
if	O
(	O
!	O
bfd_hash_table_init_n	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),int,int)->(int)
(	O
&	O
nbfd	*(struct)
->	O
section_htab	struct(*(*(struct(*(struct`),*(char),long))),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),*(void),int,int,int,int)
,	O
bfd_section_hash_newfunc	O
,	O
sizeof	O
(	O
struct	O
section_hash_entry	O
)	O
,	O
13	int
)	O
)	O
{	O
free	(*(void))->(void)
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
nbfd	*(struct)
;	O
}	O
static	O
const	O
struct	O
bfd_iovec	O
opncls_iovec	O
;	O
bfd	struct
*	O
_bfd_new_bfd_contained_in	O
(	O
bfd	struct
*	O
obfd	*(struct)
)	O
{	O
bfd	struct
*	O
nbfd	*(struct)
;	O
nbfd	*(struct)
=	O
_bfd_new_bfd	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
nbfd	*(struct)
->	O
xvec	*(struct)
=	O
obfd	*(struct)
->	O
xvec	*(struct)
;	O
nbfd	*(struct)
->	O
iovec	struct(*(void),long)
=	O
obfd	*(struct)
->	O
iovec	struct(*(void),long)
;	O
if	O
(	O
obfd	*(struct)
->	O
iovec	struct(*(void),long)
==	O
&	O
opncls_iovec	O
)	O
nbfd	*(struct)
->	O
iostream	*(void)
=	O
obfd	*(struct)
->	O
iostream	*(void)
;	O
nbfd	*(struct)
->	O
my_archive	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
=	O
obfd	*(struct)
;	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
read_direction	int
;	O
nbfd	*(struct)
->	O
target_defaulted	int
=	O
obfd	*(struct)
->	O
target_defaulted	int
;	O
nbfd	*(struct)
->	O
lto_output	int
=	O
obfd	*(struct)
->	O
lto_output	int
;	O
nbfd	*(struct)
->	O
no_export	int
=	O
obfd	*(struct)
->	O
no_export	int
;	O
return	O
nbfd	*(struct)
;	O
}	O
static	O
void	O
_bfd_delete_bfd	O
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
if	O
(	O
abfd	*(struct)
->	O
memory	*(void)
)	O
{	O
bfd_hash_table_free	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)))->(void)
(	O
&	O
abfd	*(struct)
->	O
section_htab	struct(*(*(struct(*(struct`),*(char),long))),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),*(void),int,int,int,int)
)	O
;	O
objalloc_free	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
abfd	*(struct)
->	O
memory	*(void)
)	O
;	O
}	O
if	O
(	O
abfd	*(struct)
->	O
filename	*(char)
)	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
abfd	*(struct)
->	O
filename	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
abfd	*(struct)
->	O
arelt_data	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
abfd	*(struct)
)	O
;	O
}	O
bfd_boolean	int
_bfd_free_cached_info	O
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
if	O
(	O
abfd	*(struct)
->	O
memory	*(void)
)	O
{	O
bfd_hash_table_free	(*(struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int)))->(void)
(	O
&	O
abfd	*(struct)
->	O
section_htab	struct(*(*(struct(*(struct`),*(char),long))),*((*(struct(*`,*`,long)),*(struct(*`,*`,*`,int,int,int,int)),*(char))->(*(struct(*`,*`,long)))),*(void),int,int,int,int)
)	O
;	O
objalloc_free	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
abfd	*(struct)
->	O
memory	*(void)
)	O
;	O
abfd	*(struct)
->	O
sections	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
NULL	O
;	O
abfd	*(struct)
->	O
section_last	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
NULL	O
;	O
abfd	*(struct)
->	O
outsymbols	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
=	O
NULL	O
;	O
abfd	*(struct)
->	O
tdata	union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void))
.	O
any	*(void)
=	O
NULL	O
;	O
abfd	*(struct)
->	O
usrdata	*(void)
=	O
NULL	O
;	O
abfd	*(struct)
->	O
memory	*(void)
=	O
NULL	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
bfd	struct
*	O
bfd_fopen	(*(char),*(char),*(char),int)->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
target	*(char)
,	O
const	O
char	O
*	O
mode	*(char)
,	O
int	O
fd	int
)	O
{	O
bfd	struct
*	O
nbfd	*(struct)
;	O
const	O
bfd_target	O
*	O
target_vec	O
;	O
nbfd	*(struct)
=	O
_bfd_new_bfd	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
{	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
return	O
NULL	O
;	O
}	O
target_vec	O
=	O
bfd_find_target	O
(	O
target	*(char)
,	O
nbfd	*(struct)
)	O
;	O
if	O
(	O
target_vec	O
==	O
NULL	O
)	O
{	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
nbfd	*(struct)
->	O
iostream	*(void)
=	O
fdopen	(int,*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fd	int
,	O
mode	*(char)
)	O
;	O
else	O
nbfd	*(struct)
->	O
iostream	*(void)
=	O
_bfd_real_fopen	O
(	O
filename	*(char)
,	O
mode	*(char)
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
iostream	*(void)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_system_call	int
)	O
;	O
if	O
(	O
fd	int
!=	O
-	O
1	int
)	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
filename	*(char)
=	O
bfd_strdup	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
nbfd	*(struct)
->	O
iostream	*(void)
)	O
;	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
mode	*(char)
[	O
0	int
]	O
==	O
'r'	O
||	O
mode	*(char)
[	O
0	int
]	O
==	O
'w'	O
||	O
mode	*(char)
[	O
0	int
]	O
==	O
'a'	O
)	O
&&	O
mode	*(char)
[	O
1	int
]	O
==	O
'+'	O
)	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
both_direction	int
;	O
else	O
if	O
(	O
mode	*(char)
[	O
0	int
]	O
==	O
'r'	O
)	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
read_direction	int
;	O
else	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
write_direction	int
;	O
if	O
(	O
!	O
bfd_cache_init	O
(	O
nbfd	*(struct)
)	O
)	O
{	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
nbfd	*(struct)
->	O
iostream	*(void)
)	O
;	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
opened_once	int
=	O
TRUE	int
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
(	O
void	O
)	O
bfd_set_cacheable	(*(struct(*(char),*(struct),*(void),*(struct),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),long,long,struct(*(*`),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,long,*(*(struct`)),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*`,*`,int,int,*`,*`,*`,*`,int)),*(void),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(void)),*(void),*(void),*(struct(long,array(char))))),int)->(int)
(	O
nbfd	*(struct)
,	O
TRUE	int
)	O
;	O
return	O
nbfd	*(struct)
;	O
}	O
bfd	struct
*	O
bfd_openr	(*(char),*(char))->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
target	*(char)
)	O
{	O
return	O
bfd_fopen	(*(char),*(char),*(char),int)->(*(struct))
(	O
filename	*(char)
,	O
target	*(char)
,	O
FOPEN_RB	O
,	O
-	O
1	int
)	O
;	O
}	O
bfd	struct
*	O
bfd_fdopenr	(*(char),*(char),int)->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
target	*(char)
,	O
int	O
fd	int
)	O
{	O
const	O
char	O
*	O
mode	*(char)
;	O
int	O
fdflags	O
;	O
fdflags	O
=	O
fcntl	(int,int)->(int)
(	O
fd	int
,	O
F_GETFL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
fdflags	O
==	O
-	O
1	int
)	O
{	O
int	O
save	O
=	O
errno	O
;	O
close	*((*(void))->(int))
(	O
fd	int
)	O
;	O
errno	O
=	O
save	O
;	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_system_call	int
)	O
;	O
return	O
NULL	O
;	O
}	O
switch	O
(	O
fdflags	O
&	O
(	O
O_ACCMODE	O
)	O
)	O
{	O
case	O
O_RDONLY	O
:	O
mode	*(char)
=	O
FOPEN_RB	O
;	O
break	O
;	O
case	O
O_WRONLY	O
:	O
mode	*(char)
=	O
FOPEN_RUB	O
;	O
break	O
;	O
case	O
O_RDWR	O
:	O
mode	*(char)
=	O
FOPEN_RUB	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
return	O
bfd_fopen	(*(char),*(char),*(char),int)->(*(struct))
(	O
filename	*(char)
,	O
target	*(char)
,	O
mode	*(char)
,	O
fd	int
)	O
;	O
}	O
bfd	struct
*	O
bfd_openstreamr	(*(char),*(char),*(void))->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
target	*(char)
,	O
void	O
*	O
streamarg	O
)	O
{	O
FILE	struct
*	O
stream	*(void)
=	O
(	O
FILE	struct
*	O
)	O
streamarg	O
;	O
bfd	struct
*	O
nbfd	*(struct)
;	O
const	O
bfd_target	O
*	O
target_vec	O
;	O
nbfd	*(struct)
=	O
_bfd_new_bfd	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target_vec	O
=	O
bfd_find_target	O
(	O
target	*(char)
,	O
nbfd	*(struct)
)	O
;	O
if	O
(	O
target_vec	O
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
iostream	*(void)
=	O
stream	*(void)
;	O
nbfd	*(struct)
->	O
filename	*(char)
=	O
bfd_strdup	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
read_direction	int
;	O
if	O
(	O
!	O
bfd_cache_init	O
(	O
nbfd	*(struct)
)	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
nbfd	*(struct)
;	O
}	O
struct	O
opncls	O
{	O
void	O
*	O
stream	*(void)
;	O
file_ptr	long
(	O
*	O
pread	(int,*(void),long,long)->(long)
)	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
stream	*(void)
,	O
void	O
*	O
buf	*(void)
,	O
file_ptr	long
nbytes	long
,	O
file_ptr	long
offset	long
)	O
;	O
int	O
(	O
*	O
close	*((*(void))->(int))
)	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
stream	*(void)
)	O
;	O
int	O
(	O
*	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
stream	*(void)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
file_ptr	long
where	long
;	O
}	O
;	O
static	O
file_ptr	long
opncls_btell	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
struct	O
opncls	O
*	O
vec	O
=	O
(	O
struct	O
opncls	O
*	O
)	O
abfd	*(struct)
->	O
iostream	*(void)
;	O
return	O
vec	O
->	O
where	long
;	O
}	O
static	O
int	O
opncls_bseek	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
,	O
file_ptr	long
offset	long
,	O
int	O
whence	O
)	O
{	O
struct	O
opncls	O
*	O
vec	O
=	O
(	O
struct	O
opncls	O
*	O
)	O
abfd	*(struct)
->	O
iostream	*(void)
;	O
switch	O
(	O
whence	O
)	O
{	O
case	O
SEEK_SET	O
:	O
vec	O
->	O
where	long
=	O
offset	long
;	O
break	O
;	O
case	O
SEEK_CUR	O
:	O
vec	O
->	O
where	long
+=	O
offset	long
;	O
break	O
;	O
case	O
SEEK_END	O
:	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
file_ptr	long
opncls_bread	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
buf	*(void)
,	O
file_ptr	long
nbytes	long
)	O
{	O
struct	O
opncls	O
*	O
vec	O
=	O
(	O
struct	O
opncls	O
*	O
)	O
abfd	*(struct)
->	O
iostream	*(void)
;	O
file_ptr	long
nread	O
=	O
(	O
vec	O
->	O
pread	(int,*(void),long,long)->(long)
)	O
(	O
abfd	*(struct)
,	O
vec	O
->	O
stream	*(void)
,	O
buf	*(void)
,	O
nbytes	long
,	O
vec	O
->	O
where	long
)	O
;	O
if	O
(	O
nread	O
<	O
0	int
)	O
return	O
nread	O
;	O
vec	O
->	O
where	long
+=	O
nread	O
;	O
return	O
nread	O
;	O
}	O
static	O
file_ptr	long
opncls_bwrite	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
ATTRIBUTE_UNUSED	O
,	O
const	O
void	O
*	O
where	long
ATTRIBUTE_UNUSED	O
,	O
file_ptr	long
nbytes	long
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
opncls_bclose	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
struct	O
opncls	O
*	O
vec	O
=	O
(	O
struct	O
opncls	O
*	O
)	O
abfd	*(struct)
->	O
iostream	*(void)
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
vec	O
->	O
close	*((*(void))->(int))
!=	O
NULL	O
)	O
status	int
=	O
(	O
vec	O
->	O
close	*((*(void))->(int))
)	O
(	O
abfd	*(struct)
,	O
vec	O
->	O
stream	*(void)
)	O
;	O
abfd	*(struct)
->	O
iostream	*(void)
=	O
NULL	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
opncls_bflush	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
0	int
;	O
}	O
static	O
int	O
opncls_bstat	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
struct	O
opncls	O
*	O
vec	O
=	O
(	O
struct	O
opncls	O
*	O
)	O
abfd	*(struct)
->	O
iostream	*(void)
;	O
memset	(*(void),int,long)->(*(void))
(	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
0	int
,	O
sizeof	O
(	O
*	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
)	O
;	O
if	O
(	O
vec	O
->	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
==	O
NULL	O
)	O
return	O
0	int
;	O
return	O
(	O
vec	O
->	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
(	O
abfd	*(struct)
,	O
vec	O
->	O
stream	*(void)
,	O
sb	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
;	O
}	O
static	O
void	O
*	O
opncls_bmmap	O
(	O
struct	O
bfd	struct
*	O
abfd	*(struct)
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
addr	*(void)
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
len	long
ATTRIBUTE_UNUSED	O
,	O
int	O
prot	int
ATTRIBUTE_UNUSED	O
,	O
int	O
flags	int
ATTRIBUTE_UNUSED	O
,	O
file_ptr	long
offset	long
ATTRIBUTE_UNUSED	O
,	O
void	O
*	O
*	O
map_addr	*(*(void))
ATTRIBUTE_UNUSED	O
,	O
bfd_size_type	long
*	O
map_len	*(long)
ATTRIBUTE_UNUSED	O
)	O
{	O
return	O
(	O
void	O
*	O
)	O
-	O
1	int
;	O
}	O
static	O
const	O
struct	O
bfd_iovec	O
opncls_iovec	O
=	O
{	O
&	O
opncls_bread	O
,	O
&	O
opncls_bwrite	O
,	O
&	O
opncls_btell	O
,	O
&	O
opncls_bseek	O
,	O
&	O
opncls_bclose	O
,	O
&	O
opncls_bflush	O
,	O
&	O
opncls_bstat	O
,	O
&	O
opncls_bmmap	O
}	O
;	O
bfd	struct
*	O
bfd_openr_iovec	(*(char),*(char),*((*(struct),*(void))->(*(void))),*(void),*((*(struct),*(void),*(void),long,long)->(long)),*((*(struct),*(void))->(int)),*((*(struct),*(void),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct`,struct`,struct`,array(long))))->(int)))->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
target	*(char)
,	O
void	O
*	O
(	O
*	O
open_p	O
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
open_closure	*(void)
,	O
file_ptr	long
(	O
*	O
pread_p	O
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
,	O
void	O
*	O
,	O
file_ptr	long
,	O
file_ptr	long
)	O
,	O
int	O
(	O
*	O
close_p	O
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
)	O
,	O
int	O
(	O
*	O
stat_p	O
)	O
(	O
struct	O
bfd	struct
*	O
,	O
void	O
*	O
,	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
)	O
)	O
{	O
bfd	struct
*	O
nbfd	*(struct)
;	O
const	O
bfd_target	O
*	O
target_vec	O
;	O
struct	O
opncls	O
*	O
vec	O
;	O
void	O
*	O
stream	*(void)
;	O
nbfd	*(struct)
=	O
_bfd_new_bfd	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target_vec	O
=	O
bfd_find_target	O
(	O
target	*(char)
,	O
nbfd	*(struct)
)	O
;	O
if	O
(	O
target_vec	O
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
filename	*(char)
=	O
bfd_strdup	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
read_direction	int
;	O
stream	*(void)
=	O
(	O
*	O
open_p	O
)	O
(	O
nbfd	*(struct)
,	O
open_closure	*(void)
)	O
;	O
if	O
(	O
stream	*(void)
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
vec	O
=	O
(	O
struct	O
opncls	O
*	O
)	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
nbfd	*(struct)
,	O
sizeof	O
(	O
struct	O
opncls	O
)	O
)	O
;	O
vec	O
->	O
stream	*(void)
=	O
stream	*(void)
;	O
vec	O
->	O
pread	(int,*(void),long,long)->(long)
=	O
pread_p	O
;	O
vec	O
->	O
close	*((*(void))->(int))
=	O
close_p	O
;	O
vec	O
->	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
=	O
stat_p	O
;	O
nbfd	*(struct)
->	O
iovec	struct(*(void),long)
=	O
&	O
opncls_iovec	O
;	O
nbfd	*(struct)
->	O
iostream	*(void)
=	O
vec	O
;	O
return	O
nbfd	*(struct)
;	O
}	O
bfd	struct
*	O
bfd_openw	(*(char),*(char))->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
const	O
char	O
*	O
target	*(char)
)	O
{	O
bfd	struct
*	O
nbfd	*(struct)
;	O
const	O
bfd_target	O
*	O
target_vec	O
;	O
nbfd	*(struct)
=	O
_bfd_new_bfd	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target_vec	O
=	O
bfd_find_target	O
(	O
target	*(char)
,	O
nbfd	*(struct)
)	O
;	O
if	O
(	O
target_vec	O
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
filename	*(char)
=	O
bfd_strdup	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
write_direction	int
;	O
if	O
(	O
bfd_open_file	O
(	O
nbfd	*(struct)
)	O
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_system_call	int
)	O
;	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
nbfd	*(struct)
;	O
}	O
static	O
inline	O
void	O
_maybe_make_executable	O
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
if	O
(	O
abfd	*(struct)
->	O
direction	enum(int,int,int,int)
==	O
write_direction	int
&&	O
(	O
abfd	*(struct)
->	O
flags	int
&	O
(	O
EXEC_P	O
|	O
DYNAMIC	O
)	O
)	O
!=	O
0	int
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
buf	*(void)
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
abfd	*(struct)
->	O
filename	*(char)
,	O
&	O
buf	*(void)
)	O
==	O
0	int
&&	O
S_ISREG	O
(	O
buf	*(void)
.	O
st_mode	int
)	O
)	O
{	O
unsigned	O
int	O
mask	O
=	O
umask	(int)->(int)
(	O
0	int
)	O
;	O
umask	(int)->(int)
(	O
mask	O
)	O
;	O
chmod	(*(char),int)->(int)
(	O
abfd	*(struct)
->	O
filename	*(char)
,	O
(	O
0777	int
&	O
(	O
buf	*(void)
.	O
st_mode	int
|	O
(	O
(	O
S_IXUSR	O
|	O
S_IXGRP	O
|	O
S_IXOTH	O
)	O
&	O
~	O
mask	O
)	O
)	O
)	O
)	O
;	O
}	O
}	O
}	O
bfd_boolean	int
bfd_close	(*(struct))->(int)
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
if	O
(	O
bfd_write_p	O
(	O
abfd	*(struct)
)	O
)	O
{	O
if	O
(	O
!	O
BFD_SEND_FMT	O
(	O
abfd	*(struct)
,	O
_bfd_write_contents	O
,	O
(	O
abfd	*(struct)
)	O
)	O
)	O
return	O
FALSE	O
;	O
}	O
return	O
bfd_close_all_done	(*(struct))->(int)
(	O
abfd	*(struct)
)	O
;	O
}	O
bfd_boolean	int
bfd_close_all_done	(*(struct))->(int)
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
bfd_boolean	int
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
if	O
(	O
!	O
BFD_SEND	O
(	O
abfd	*(struct)
,	O
_close_and_cleanup	O
,	O
(	O
abfd	*(struct)
)	O
)	O
)	O
return	O
FALSE	O
;	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
abfd	*(struct)
->	O
iovec	struct(*(void),long)
->	O
bclose	O
(	O
abfd	*(struct)
)	O
==	O
0	int
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
)	O
_maybe_make_executable	O
(	O
abfd	*(struct)
)	O
;	O
_bfd_delete_bfd	O
(	O
abfd	*(struct)
)	O
;	O
return	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
}	O
bfd	struct
*	O
bfd_create	(*(char),*(struct))->(*(struct))
(	O
const	O
char	O
*	O
filename	*(char)
,	O
bfd	struct
*	O
templ	*(struct)
)	O
{	O
bfd	struct
*	O
nbfd	*(struct)
;	O
nbfd	*(struct)
=	O
_bfd_new_bfd	O
(	O
)	O
;	O
if	O
(	O
nbfd	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
nbfd	*(struct)
->	O
filename	*(char)
=	O
bfd_strdup	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
nbfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
)	O
{	O
_bfd_delete_bfd	O
(	O
nbfd	*(struct)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
templ	*(struct)
)	O
nbfd	*(struct)
->	O
xvec	*(struct)
=	O
templ	*(struct)
->	O
xvec	*(struct)
;	O
nbfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
no_direction	int
;	O
bfd_set_format	O
(	O
nbfd	*(struct)
,	O
bfd_object	int
)	O
;	O
return	O
nbfd	*(struct)
;	O
}	O
bfd_boolean	int
bfd_make_writable	(*(struct))->(int)
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
struct	O
bfd_in_memory	O
*	O
bim	O
;	O
if	O
(	O
abfd	*(struct)
->	O
direction	enum(int,int,int,int)
!=	O
no_direction	int
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
bim	O
=	O
(	O
struct	O
bfd_in_memory	O
*	O
)	O
bfd_malloc	O
(	O
sizeof	O
(	O
struct	O
bfd_in_memory	O
)	O
)	O
;	O
if	O
(	O
bim	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
abfd	*(struct)
->	O
iostream	*(void)
=	O
bim	O
;	O
bim	O
->	O
size	long
=	O
0	int
;	O
bim	O
->	O
buffer	O
=	O
0	int
;	O
abfd	*(struct)
->	O
flags	int
|=	O
BFD_IN_MEMORY	O
;	O
abfd	*(struct)
->	O
iovec	struct(*(void),long)
=	O
&	O
_bfd_memory_iovec	O
;	O
abfd	*(struct)
->	O
origin	long
=	O
0	int
;	O
abfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
write_direction	int
;	O
abfd	*(struct)
->	O
where	long
=	O
0	int
;	O
return	O
TRUE	int
;	O
}	O
bfd_boolean	int
bfd_make_readable	(*(struct))->(int)
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
if	O
(	O
abfd	*(struct)
->	O
direction	enum(int,int,int,int)
!=	O
write_direction	int
||	O
!	O
(	O
abfd	*(struct)
->	O
flags	int
&	O
BFD_IN_MEMORY	O
)	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
if	O
(	O
!	O
BFD_SEND_FMT	O
(	O
abfd	*(struct)
,	O
_bfd_write_contents	O
,	O
(	O
abfd	*(struct)
)	O
)	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
BFD_SEND	O
(	O
abfd	*(struct)
,	O
_close_and_cleanup	O
,	O
(	O
abfd	*(struct)
)	O
)	O
)	O
return	O
FALSE	O
;	O
abfd	*(struct)
->	O
arch_info	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
=	O
&	O
bfd_default_arch_struct	O
;	O
abfd	*(struct)
->	O
where	long
=	O
0	int
;	O
abfd	*(struct)
->	O
format	enum(int,int,int,int,int)
=	O
bfd_unknown	int
;	O
abfd	*(struct)
->	O
my_archive	*(struct(*(char),*(struct),*(void),*(struct),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),long,long,struct(*(*(struct`)),*((*`,*`,*`)->(*`)),*(void),int,int,int,int),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,long,*(*(struct(*`,*`,long,int,*`,union`))),int,int,*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),*(void),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),union(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(struct)),union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void)),*(void),*(void),*(struct(long,array(char)))))
=	O
NULL	O
;	O
abfd	*(struct)
->	O
origin	long
=	O
0	int
;	O
abfd	*(struct)
->	O
opened_once	int
=	O
FALSE	O
;	O
abfd	*(struct)
->	O
output_has_begun	int
=	O
FALSE	O
;	O
abfd	*(struct)
->	O
section_count	int
=	O
0	int
;	O
abfd	*(struct)
->	O
usrdata	*(void)
=	O
NULL	O
;	O
abfd	*(struct)
->	O
cacheable	int
=	O
FALSE	O
;	O
abfd	*(struct)
->	O
flags	int
|=	O
BFD_IN_MEMORY	O
;	O
abfd	*(struct)
->	O
mtime_set	int
=	O
FALSE	O
;	O
abfd	*(struct)
->	O
target_defaulted	int
=	O
TRUE	int
;	O
abfd	*(struct)
->	O
direction	enum(int,int,int,int)
=	O
read_direction	int
;	O
abfd	*(struct)
->	O
sections	*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct(*(*`),long,long,*(struct`))),*(*(struct(*`,long,long,*`))),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct(struct(*`,long,long,*`),*(struct`))),*(struct(*(char),*(struct`),*(void),*(struct`),*(struct`),*(struct`),long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*(struct`),long,long,struct(*`,*`,*`,int,int,int,int),*(struct`),*(struct`),int,int,long,*(*`),int,int,*(struct`),*(void),*(struct`),*(struct`),*(struct`),*(struct`),union(*`,*`),union(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`),*(void),*(void),*(struct`))),*(struct(*(struct`),*(char),long,int,*(struct`),union(*`,long))),*(*(struct(*`,*`,long,int,*`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)))))
=	O
0	int
;	O
abfd	*(struct)
->	O
symcount	int
=	O
0	int
;	O
abfd	*(struct)
->	O
outsymbols	*(*(struct(*(struct(*`,*`,*`,*`,*`,*`,long,long,int,enum(int,int,int,int,int),enum(int,int,int,int),int,int,int,int,int,int,int,int,int,int,int,int,int,enum(int,int,int),int,int,*`,long,long,struct`,*`,*`,int,int,long,*`,int,int,*`,*`,*`,*`,*`,*`,union`,union`,*`,*`,*`)),*(char),long,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),union(*(void),long))))
=	O
0	int
;	O
abfd	*(struct)
->	O
tdata	union(*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(void))
.	O
any	*(void)
=	O
0	int
;	O
bfd_section_list_clear	(*(struct))->(void)
(	O
abfd	*(struct)
)	O
;	O
bfd_check_format	O
(	O
abfd	*(struct)
,	O
bfd_object	int
)	O
;	O
return	O
TRUE	int
;	O
}	O
void	O
*	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd_size_type	long
size	long
)	O
{	O
void	O
*	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
unsigned	O
long	O
ul_size	O
=	O
(	O
unsigned	O
long	O
)	O
size	long
;	O
if	O
(	O
size	long
!=	O
ul_size	O
||	O
(	O
(	O
signed	O
long	O
)	O
ul_size	O
)	O
<	O
0	int
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
=	O
objalloc_alloc	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
abfd	*(struct)
->	O
memory	*(void)
,	O
ul_size	O
)	O
;	O
if	O
(	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
==	O
NULL	O
)	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
ret	*(struct(long,char,*(char),char,char,short,*(char)))
;	O
}	O
void	O
*	O
bfd_alloc2	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd_size_type	long
nmemb	O
,	O
bfd_size_type	long
size	long
)	O
{	O
if	O
(	O
(	O
nmemb	O
|	O
size	long
)	O
>=	O
HALF_BFD_SIZE_TYPE	O
&&	O
size	long
!=	O
0	int
&&	O
nmemb	O
>	O
~	O
(	O
bfd_size_type	long
)	O
0	int
/	O
size	long
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
return	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
size	long
*	O
nmemb	O
)	O
;	O
}	O
void	O
*	O
bfd_zalloc	(*(struct),long)->(*(void))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd_size_type	long
size	long
)	O
{	O
void	O
*	O
res	O
;	O
res	O
=	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
size	long
)	O
;	O
if	O
(	O
res	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
res	O
,	O
0	int
,	O
(	O
size_t	long
)	O
size	long
)	O
;	O
return	O
res	O
;	O
}	O
void	O
*	O
bfd_zalloc2	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd_size_type	long
nmemb	O
,	O
bfd_size_type	long
size	long
)	O
{	O
void	O
*	O
res	O
;	O
if	O
(	O
(	O
nmemb	O
|	O
size	long
)	O
>=	O
HALF_BFD_SIZE_TYPE	O
&&	O
size	long
!=	O
0	int
&&	O
nmemb	O
>	O
~	O
(	O
bfd_size_type	long
)	O
0	int
/	O
size	long
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
size	long
*=	O
nmemb	O
;	O
res	O
=	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
size	long
)	O
;	O
if	O
(	O
res	O
)	O
memset	(*(void),int,long)->(*(void))
(	O
res	O
,	O
0	int
,	O
(	O
size_t	long
)	O
size	long
)	O
;	O
return	O
res	O
;	O
}	O
void	O
bfd_release	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
block	O
)	O
{	O
objalloc_free_block	O
(	O
(	O
struct	O
objalloc	O
*	O
)	O
abfd	*(struct)
->	O
memory	*(void)
,	O
block	O
)	O
;	O
}	O
unsigned	O
long	O
bfd_calc_gnu_debuglink_crc32	(long,*(char),long)->(long)
(	O
unsigned	O
long	O
crc	long
,	O
const	O
unsigned	O
char	O
*	O
buf	*(void)
,	O
bfd_size_type	long
len	long
)	O
{	O
static	O
const	O
unsigned	O
long	O
crc32_table	O
[	O
256	int
]	O
=	O
{	O
0x00000000	int
,	O
0x77073096	int
,	O
0xee0e612c	int
,	O
0x990951ba	int
,	O
0x076dc419	int
,	O
0x706af48f	int
,	O
0xe963a535	int
,	O
0x9e6495a3	int
,	O
0x0edb8832	int
,	O
0x79dcb8a4	int
,	O
0xe0d5e91e	int
,	O
0x97d2d988	int
,	O
0x09b64c2b	int
,	O
0x7eb17cbd	int
,	O
0xe7b82d07	int
,	O
0x90bf1d91	int
,	O
0x1db71064	int
,	O
0x6ab020f2	int
,	O
0xf3b97148	int
,	O
0x84be41de	int
,	O
0x1adad47d	int
,	O
0x6ddde4eb	int
,	O
0xf4d4b551	int
,	O
0x83d385c7	int
,	O
0x136c9856	int
,	O
0x646ba8c0	int
,	O
0xfd62f97a	int
,	O
0x8a65c9ec	int
,	O
0x14015c4f	int
,	O
0x63066cd9	int
,	O
0xfa0f3d63	int
,	O
0x8d080df5	int
,	O
0x3b6e20c8	int
,	O
0x4c69105e	int
,	O
0xd56041e4	int
,	O
0xa2677172	int
,	O
0x3c03e4d1	int
,	O
0x4b04d447	int
,	O
0xd20d85fd	int
,	O
0xa50ab56b	int
,	O
0x35b5a8fa	int
,	O
0x42b2986c	int
,	O
0xdbbbc9d6	int
,	O
0xacbcf940	int
,	O
0x32d86ce3	int
,	O
0x45df5c75	int
,	O
0xdcd60dcf	int
,	O
0xabd13d59	int
,	O
0x26d930ac	int
,	O
0x51de003a	int
,	O
0xc8d75180	int
,	O
0xbfd06116	int
,	O
0x21b4f4b5	int
,	O
0x56b3c423	int
,	O
0xcfba9599	int
,	O
0xb8bda50f	int
,	O
0x2802b89e	int
,	O
0x5f058808	int
,	O
0xc60cd9b2	int
,	O
0xb10be924	int
,	O
0x2f6f7c87	int
,	O
0x58684c11	int
,	O
0xc1611dab	int
,	O
0xb6662d3d	int
,	O
0x76dc4190	int
,	O
0x01db7106	int
,	O
0x98d220bc	int
,	O
0xefd5102a	int
,	O
0x71b18589	int
,	O
0x06b6b51f	int
,	O
0x9fbfe4a5	int
,	O
0xe8b8d433	int
,	O
0x7807c9a2	int
,	O
0x0f00f934	int
,	O
0x9609a88e	int
,	O
0xe10e9818	int
,	O
0x7f6a0dbb	int
,	O
0x086d3d2d	int
,	O
0x91646c97	int
,	O
0xe6635c01	int
,	O
0x6b6b51f4	int
,	O
0x1c6c6162	int
,	O
0x856530d8	int
,	O
0xf262004e	int
,	O
0x6c0695ed	int
,	O
0x1b01a57b	int
,	O
0x8208f4c1	int
,	O
0xf50fc457	int
,	O
0x65b0d9c6	int
,	O
0x12b7e950	int
,	O
0x8bbeb8ea	int
,	O
0xfcb9887c	int
,	O
0x62dd1ddf	int
,	O
0x15da2d49	int
,	O
0x8cd37cf3	int
,	O
0xfbd44c65	int
,	O
0x4db26158	int
,	O
0x3ab551ce	int
,	O
0xa3bc0074	int
,	O
0xd4bb30e2	int
,	O
0x4adfa541	int
,	O
0x3dd895d7	int
,	O
0xa4d1c46d	int
,	O
0xd3d6f4fb	int
,	O
0x4369e96a	int
,	O
0x346ed9fc	int
,	O
0xad678846	int
,	O
0xda60b8d0	int
,	O
0x44042d73	int
,	O
0x33031de5	int
,	O
0xaa0a4c5f	int
,	O
0xdd0d7cc9	int
,	O
0x5005713c	int
,	O
0x270241aa	int
,	O
0xbe0b1010	int
,	O
0xc90c2086	int
,	O
0x5768b525	int
,	O
0x206f85b3	int
,	O
0xb966d409	int
,	O
0xce61e49f	int
,	O
0x5edef90e	int
,	O
0x29d9c998	int
,	O
0xb0d09822	int
,	O
0xc7d7a8b4	int
,	O
0x59b33d17	int
,	O
0x2eb40d81	int
,	O
0xb7bd5c3b	int
,	O
0xc0ba6cad	int
,	O
0xedb88320	int
,	O
0x9abfb3b6	int
,	O
0x03b6e20c	int
,	O
0x74b1d29a	int
,	O
0xead54739	int
,	O
0x9dd277af	int
,	O
0x04db2615	int
,	O
0x73dc1683	int
,	O
0xe3630b12	int
,	O
0x94643b84	int
,	O
0x0d6d6a3e	int
,	O
0x7a6a5aa8	int
,	O
0xe40ecf0b	int
,	O
0x9309ff9d	int
,	O
0x0a00ae27	int
,	O
0x7d079eb1	int
,	O
0xf00f9344	int
,	O
0x8708a3d2	int
,	O
0x1e01f268	int
,	O
0x6906c2fe	int
,	O
0xf762575d	int
,	O
0x806567cb	int
,	O
0x196c3671	int
,	O
0x6e6b06e7	int
,	O
0xfed41b76	int
,	O
0x89d32be0	int
,	O
0x10da7a5a	int
,	O
0x67dd4acc	int
,	O
0xf9b9df6f	int
,	O
0x8ebeeff9	int
,	O
0x17b7be43	int
,	O
0x60b08ed5	int
,	O
0xd6d6a3e8	int
,	O
0xa1d1937e	int
,	O
0x38d8c2c4	int
,	O
0x4fdff252	int
,	O
0xd1bb67f1	int
,	O
0xa6bc5767	int
,	O
0x3fb506dd	int
,	O
0x48b2364b	int
,	O
0xd80d2bda	int
,	O
0xaf0a1b4c	int
,	O
0x36034af6	int
,	O
0x41047a60	int
,	O
0xdf60efc3	int
,	O
0xa867df55	int
,	O
0x316e8eef	int
,	O
0x4669be79	int
,	O
0xcb61b38c	int
,	O
0xbc66831a	int
,	O
0x256fd2a0	int
,	O
0x5268e236	int
,	O
0xcc0c7795	int
,	O
0xbb0b4703	int
,	O
0x220216b9	int
,	O
0x5505262f	int
,	O
0xc5ba3bbe	int
,	O
0xb2bd0b28	int
,	O
0x2bb45a92	int
,	O
0x5cb36a04	int
,	O
0xc2d7ffa7	int
,	O
0xb5d0cf31	int
,	O
0x2cd99e8b	int
,	O
0x5bdeae1d	int
,	O
0x9b64c2b0	int
,	O
0xec63f226	int
,	O
0x756aa39c	int
,	O
0x026d930a	int
,	O
0x9c0906a9	int
,	O
0xeb0e363f	int
,	O
0x72076785	int
,	O
0x05005713	int
,	O
0x95bf4a82	int
,	O
0xe2b87a14	int
,	O
0x7bb12bae	int
,	O
0x0cb61b38	int
,	O
0x92d28e9b	int
,	O
0xe5d5be0d	int
,	O
0x7cdcefb7	int
,	O
0x0bdbdf21	int
,	O
0x86d3d2d4	int
,	O
0xf1d4e242	int
,	O
0x68ddb3f8	int
,	O
0x1fda836e	int
,	O
0x81be16cd	int
,	O
0xf6b9265b	int
,	O
0x6fb077e1	int
,	O
0x18b74777	int
,	O
0x88085ae6	int
,	O
0xff0f6a70	int
,	O
0x66063bca	int
,	O
0x11010b5c	int
,	O
0x8f659eff	int
,	O
0xf862ae69	int
,	O
0x616bffd3	int
,	O
0x166ccf45	int
,	O
0xa00ae278	int
,	O
0xd70dd2ee	int
,	O
0x4e048354	int
,	O
0x3903b3c2	int
,	O
0xa7672661	int
,	O
0xd06016f7	int
,	O
0x4969474d	int
,	O
0x3e6e77db	int
,	O
0xaed16a4a	int
,	O
0xd9d65adc	int
,	O
0x40df0b66	int
,	O
0x37d83bf0	int
,	O
0xa9bcae53	int
,	O
0xdebb9ec5	int
,	O
0x47b2cf7f	int
,	O
0x30b5ffe9	int
,	O
0xbdbdf21c	int
,	O
0xcabac28a	int
,	O
0x53b39330	int
,	O
0x24b4a3a6	int
,	O
0xbad03605	int
,	O
0xcdd70693	int
,	O
0x54de5729	int
,	O
0x23d967bf	int
,	O
0xb3667a2e	int
,	O
0xc4614ab8	int
,	O
0x5d681b02	int
,	O
0x2a6f2b94	int
,	O
0xb40bbe37	int
,	O
0xc30c8ea1	int
,	O
0x5a05df1b	int
,	O
0x2d02ef8d	int
}	O
;	O
const	O
unsigned	O
char	O
*	O
end	*(*(char))
;	O
crc	long
=	O
~	O
crc	long
&	O
0xffffffff	int
;	O
for	O
(	O
end	*(*(char))
=	O
buf	*(void)
+	O
len	long
;	O
buf	*(void)
<	O
end	*(*(char))
;	O
++	O
buf	*(void)
)	O
crc	long
=	O
crc32_table	O
[	O
(	O
crc	long
^	O
*	O
buf	*(void)
)	O
&	O
0xff	int
]	O
^	O
(	O
crc	long
>>	O
8	int
)	O
;	O
return	O
~	O
crc	long
&	O
0xffffffff	int
;	O
}	O
static	O
char	O
*	O
bfd_get_debug_link_info_1	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
crc32_out	*(long)
)	O
{	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
sect	*(struct)
;	O
unsigned	O
long	O
*	O
crc32	O
=	O
(	O
unsigned	O
long	O
*	O
)	O
crc32_out	*(long)
;	O
bfd_byte	char
*	O
contents	*(char)
;	O
unsigned	O
int	O
crc_offset	O
;	O
char	O
*	O
name	*(char)
;	O
bfd_size_type	long
size	long
;	O
BFD_ASSERT	O
(	O
abfd	*(struct)
)	O
;	O
BFD_ASSERT	O
(	O
crc32_out	*(long)
)	O
;	O
sect	*(struct)
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
GNU_DEBUGLINK	O
)	O
;	O
if	O
(	O
sect	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
size	long
=	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
sect	*(struct)
)	O
;	O
if	O
(	O
size	long
<	O
8	int
||	O
size	long
>=	O
bfd_get_size	(*(struct))->(long)
(	O
abfd	*(struct)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	(*(struct),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(*(char)))->(int)
(	O
abfd	*(struct)
,	O
sect	*(struct)
,	O
&	O
contents	*(char)
)	O
)	O
{	O
if	O
(	O
contents	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
contents	*(char)
;	O
crc_offset	O
=	O
strnlen	(*(char),long)->(long)
(	O
name	*(char)
,	O
size	long
)	O
+	O
1	int
;	O
crc_offset	O
=	O
(	O
crc_offset	O
+	O
3	int
)	O
&	O
~	O
3	int
;	O
if	O
(	O
crc_offset	O
+	O
4	int
>	O
size	long
)	O
return	O
NULL	O
;	O
*	O
crc32	O
=	O
bfd_get_32	O
(	O
abfd	*(struct)
,	O
contents	*(char)
+	O
crc_offset	O
)	O
;	O
return	O
name	*(char)
;	O
}	O
char	O
*	O
bfd_get_debug_link_info	(*(struct),*(long))->(*(char))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
unsigned	O
long	O
*	O
crc32_out	*(long)
)	O
{	O
return	O
bfd_get_debug_link_info_1	O
(	O
abfd	*(struct)
,	O
crc32_out	*(long)
)	O
;	O
}	O
char	O
*	O
bfd_get_alt_debug_link_info	(*(struct),*(long),*(*(char)))->(*(char))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
bfd_size_type	long
*	O
buildid_len	*(long)
,	O
bfd_byte	char
*	O
*	O
buildid_out	*(*(char))
)	O
{	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
sect	*(struct)
;	O
bfd_byte	char
*	O
contents	*(char)
;	O
unsigned	O
int	O
buildid_offset	O
;	O
char	O
*	O
name	*(char)
;	O
bfd_size_type	long
size	long
;	O
BFD_ASSERT	O
(	O
abfd	*(struct)
)	O
;	O
BFD_ASSERT	O
(	O
buildid_len	*(long)
)	O
;	O
BFD_ASSERT	O
(	O
buildid_out	*(*(char))
)	O
;	O
sect	*(struct)
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
GNU_DEBUGALTLINK	O
)	O
;	O
if	O
(	O
sect	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
size	long
=	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
sect	*(struct)
)	O
;	O
if	O
(	O
size	long
<	O
8	int
||	O
size	long
>=	O
bfd_get_size	(*(struct))->(long)
(	O
abfd	*(struct)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
bfd_malloc_and_get_section	(*(struct),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(*(char)))->(int)
(	O
abfd	*(struct)
,	O
sect	*(struct)
,	O
&	O
contents	*(char)
)	O
)	O
{	O
if	O
(	O
contents	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
contents	*(char)
;	O
buildid_offset	O
=	O
strnlen	(*(char),long)->(long)
(	O
name	*(char)
,	O
size	long
)	O
+	O
1	int
;	O
if	O
(	O
buildid_offset	O
>=	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
sect	*(struct)
)	O
)	O
return	O
NULL	O
;	O
*	O
buildid_len	*(long)
=	O
size	long
-	O
buildid_offset	O
;	O
*	O
buildid_out	*(*(char))
=	O
bfd_malloc	O
(	O
*	O
buildid_len	*(long)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
buildid_out	*(*(char))
,	O
contents	*(char)
+	O
buildid_offset	O
,	O
*	O
buildid_len	*(long)
)	O
;	O
return	O
name	*(char)
;	O
}	O
static	O
bfd_boolean	int
separate_debug_file_exists	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
crc32_p	O
)	O
{	O
static	O
unsigned	O
char	O
buffer	O
[	O
8	int
*	O
1024	int
]	O
;	O
unsigned	O
long	O
file_crc	O
=	O
0	int
;	O
FILE	struct
*	O
f	O
;	O
bfd_size_type	long
count	int
;	O
unsigned	O
long	O
crc	long
;	O
BFD_ASSERT	O
(	O
name	*(char)
)	O
;	O
BFD_ASSERT	O
(	O
crc32_p	O
)	O
;	O
crc	long
=	O
*	O
(	O
unsigned	O
long	O
*	O
)	O
crc32_p	O
;	O
f	O
=	O
_bfd_real_fopen	O
(	O
name	*(char)
,	O
FOPEN_RB	O
)	O
;	O
if	O
(	O
f	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
while	O
(	O
(	O
count	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buffer	O
,	O
1	int
,	O
sizeof	O
(	O
buffer	O
)	O
,	O
f	O
)	O
)	O
>	O
0	int
)	O
file_crc	O
=	O
bfd_calc_gnu_debuglink_crc32	(long,*(char),long)->(long)
(	O
file_crc	O
,	O
buffer	O
,	O
count	int
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	O
)	O
;	O
return	O
crc	long
==	O
file_crc	O
;	O
}	O
static	O
bfd_boolean	int
separate_alt_debug_file_exists	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
unused	O
ATTRIBUTE_UNUSED	O
)	O
{	O
FILE	struct
*	O
f	O
;	O
BFD_ASSERT	O
(	O
name	*(char)
)	O
;	O
f	O
=	O
_bfd_real_fopen	O
(	O
name	*(char)
,	O
FOPEN_RB	O
)	O
;	O
if	O
(	O
f	O
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
f	O
)	O
;	O
return	O
TRUE	int
;	O
}	O
typedef	O
char	O
*	O
(	O
*	O
get_func_type	O
)	O
(	O
bfd	struct
*	O
,	O
void	O
*	O
)	O
;	O
typedef	O
bfd_boolean	int
(	O
*	O
check_func_type	O
)	O
(	O
const	O
char	O
*	O
,	O
void	O
*	O
)	O
;	O
static	O
char	O
*	O
find_separate_debug_file	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
const	O
char	O
*	O
debug_file_directory	O
,	O
bfd_boolean	int
include_dirs	O
,	O
get_func_type	O
get_func	O
,	O
check_func_type	O
check_func	O
,	O
void	O
*	O
func_data	O
)	O
{	O
char	O
*	O
base	int
;	O
char	O
*	O
dir	*(char)
;	O
char	O
*	O
debugfile	O
;	O
char	O
*	O
canon_dir	O
;	O
size_t	long
dirlen	O
;	O
size_t	long
canon_dirlen	O
;	O
BFD_ASSERT	O
(	O
abfd	*(struct)
)	O
;	O
if	O
(	O
debug_file_directory	O
==	O
NULL	O
)	O
debug_file_directory	O
=	O
"."	*(char)
;	O
if	O
(	O
abfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
base	int
=	O
get_func	O
(	O
abfd	*(struct)
,	O
func_data	O
)	O
;	O
if	O
(	O
base	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
base	int
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
free	(*(void))->(void)
(	O
base	int
)	O
;	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_debug_section	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
include_dirs	O
)	O
{	O
for	O
(	O
dirlen	O
=	O
strlen	(*(char))->(long)
(	O
abfd	*(struct)
->	O
filename	*(char)
)	O
;	O
dirlen	O
>	O
0	int
;	O
dirlen	O
--	O
)	O
if	O
(	O
IS_DIR_SEPARATOR	O
(	O
abfd	*(struct)
->	O
filename	*(char)
[	O
dirlen	O
-	O
1	int
]	O
)	O
)	O
break	O
;	O
dir	*(char)
=	O
(	O
char	O
*	O
)	O
bfd_malloc	O
(	O
dirlen	O
+	O
1	int
)	O
;	O
if	O
(	O
dir	*(char)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
base	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dir	*(char)
,	O
abfd	*(struct)
->	O
filename	*(char)
,	O
dirlen	O
)	O
;	O
dir	*(char)
[	O
dirlen	O
]	O
=	O
'\0'	O
;	O
}	O
else	O
{	O
dir	*(char)
=	O
(	O
char	O
*	O
)	O
bfd_malloc	O
(	O
1	int
)	O
;	O
*	O
dir	*(char)
=	O
0	int
;	O
dirlen	O
=	O
0	int
;	O
}	O
canon_dir	O
=	O
lrealpath	O
(	O
abfd	*(struct)
->	O
filename	*(char)
)	O
;	O
for	O
(	O
canon_dirlen	O
=	O
strlen	(*(char))->(long)
(	O
canon_dir	O
)	O
;	O
canon_dirlen	O
>	O
0	int
;	O
canon_dirlen	O
--	O
)	O
if	O
(	O
IS_DIR_SEPARATOR	O
(	O
canon_dir	O
[	O
canon_dirlen	O
-	O
1	int
]	O
)	O
)	O
break	O
;	O
canon_dir	O
[	O
canon_dirlen	O
]	O
=	O
'\0'	O
;	O
debugfile	O
=	O
(	O
char	O
*	O
)	O
bfd_malloc	O
(	O
strlen	(*(char))->(long)
(	O
debug_file_directory	O
)	O
+	O
1	int
+	O
(	O
canon_dirlen	O
>	O
dirlen	O
?	O
canon_dirlen	O
:	O
dirlen	O
)	O
+	O
strlen	(*(char))->(long)
(	O
".debug/"	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
EXTRA_DEBUG_ROOT1	O
)	O
+	O
strlen	(*(char))->(long)
(	O
EXTRA_DEBUG_ROOT2	O
)	O
+	O
strlen	(*(char))->(long)
(	O
base	int
)	O
+	O
1	int
)	O
;	O
if	O
(	O
debugfile	O
==	O
NULL	O
)	O
goto	O
found	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
debugfile	O
,	O
"%s%s"	*(char)
,	O
dir	*(char)
,	O
base	int
)	O
;	O
if	O
(	O
check_func	O
(	O
debugfile	O
,	O
func_data	O
)	O
)	O
goto	O
found	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
debugfile	O
,	O
"%s.debug/%s"	*(char)
,	O
dir	*(char)
,	O
base	int
)	O
;	O
if	O
(	O
check_func	O
(	O
debugfile	O
,	O
func_data	O
)	O
)	O
goto	O
found	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
debugfile	O
,	O
"%s%s%s"	*(char)
,	O
EXTRA_DEBUG_ROOT1	O
,	O
include_dirs	O
?	O
canon_dir	O
:	O
"/"	*(char)
,	O
base	int
)	O
;	O
if	O
(	O
check_func	O
(	O
debugfile	O
,	O
func_data	O
)	O
)	O
goto	O
found	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
debugfile	O
,	O
"%s%s%s"	*(char)
,	O
EXTRA_DEBUG_ROOT2	O
,	O
include_dirs	O
?	O
canon_dir	O
:	O
"/"	*(char)
,	O
base	int
)	O
;	O
if	O
(	O
check_func	O
(	O
debugfile	O
,	O
func_data	O
)	O
)	O
goto	O
found	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
debugfile	O
,	O
debug_file_directory	O
)	O
;	O
dirlen	O
=	O
strlen	(*(char))->(long)
(	O
debug_file_directory	O
)	O
-	O
1	int
;	O
if	O
(	O
include_dirs	O
)	O
{	O
if	O
(	O
dirlen	O
>	O
0	int
&&	O
debug_file_directory	O
[	O
dirlen	O
]	O
!=	O
'/'	O
&&	O
canon_dir	O
[	O
0	int
]	O
!=	O
'/'	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
debugfile	O
,	O
"/"	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
debugfile	O
,	O
canon_dir	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
dirlen	O
>	O
0	int
&&	O
debug_file_directory	O
[	O
dirlen	O
]	O
!=	O
'/'	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
debugfile	O
,	O
"/"	*(char)
)	O
;	O
}	O
strcat	(*(char),*(char))->(*(char))
(	O
debugfile	O
,	O
base	int
)	O
;	O
if	O
(	O
check_func	O
(	O
debugfile	O
,	O
func_data	O
)	O
)	O
goto	O
found	O
;	O
free	(*(void))->(void)
(	O
debugfile	O
)	O
;	O
debugfile	O
=	O
NULL	O
;	O
found	O
:	O
free	(*(void))->(void)
(	O
base	int
)	O
;	O
free	(*(void))->(void)
(	O
dir	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
canon_dir	O
)	O
;	O
return	O
debugfile	O
;	O
}	O
char	O
*	O
bfd_follow_gnu_debuglink	(*(struct),*(char))->(*(char))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
const	O
char	O
*	O
dir	*(char)
)	O
{	O
unsigned	O
long	O
crc32	O
;	O
return	O
find_separate_debug_file	O
(	O
abfd	*(struct)
,	O
dir	*(char)
,	O
TRUE	int
,	O
bfd_get_debug_link_info_1	O
,	O
separate_debug_file_exists	O
,	O
&	O
crc32	O
)	O
;	O
}	O
static	O
char	O
*	O
get_alt_debug_link_info_shim	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
unused	O
ATTRIBUTE_UNUSED	O
)	O
{	O
bfd_size_type	long
len	long
;	O
bfd_byte	char
*	O
buildid	O
=	O
NULL	O
;	O
char	O
*	O
result	O
=	O
bfd_get_alt_debug_link_info	(*(struct),*(long),*(*(char)))->(*(char))
(	O
abfd	*(struct)
,	O
&	O
len	long
,	O
&	O
buildid	O
)	O
;	O
free	(*(void))->(void)
(	O
buildid	O
)	O
;	O
return	O
result	O
;	O
}	O
char	O
*	O
bfd_follow_gnu_debugaltlink	(*(struct),*(char))->(*(char))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
const	O
char	O
*	O
dir	*(char)
)	O
{	O
return	O
find_separate_debug_file	O
(	O
abfd	*(struct)
,	O
dir	*(char)
,	O
TRUE	int
,	O
get_alt_debug_link_info_shim	O
,	O
separate_alt_debug_file_exists	O
,	O
NULL	O
)	O
;	O
}	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
bfd_create_gnu_debuglink_section	(*(struct),*(char))->(*(struct))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
sect	*(struct)
;	O
bfd_size_type	long
debuglink_size	O
;	O
flagword	int
flags	int
;	O
if	O
(	O
abfd	*(struct)
==	O
NULL	O
||	O
filename	*(char)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
filename	*(char)
=	O
lbasename	O
(	O
filename	*(char)
)	O
;	O
sect	*(struct)
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
GNU_DEBUGLINK	O
)	O
;	O
if	O
(	O
sect	*(struct)
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
flags	int
=	O
SEC_HAS_CONTENTS	O
|	O
SEC_READONLY	O
|	O
SEC_DEBUGGING	O
;	O
sect	*(struct)
=	O
bfd_make_section_with_flags	(*(struct),*(char),int)->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
GNU_DEBUGLINK	O
,	O
flags	int
)	O
;	O
if	O
(	O
sect	*(struct)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
debuglink_size	O
=	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
+	O
1	int
;	O
debuglink_size	O
+=	O
3	int
;	O
debuglink_size	O
&=	O
~	O
3	int
;	O
debuglink_size	O
+=	O
4	int
;	O
if	O
(	O
!	O
bfd_set_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long)->(int)
(	O
sect	*(struct)
,	O
debuglink_size	O
)	O
)	O
return	O
NULL	O
;	O
bfd_set_section_alignment	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int)->(int)
(	O
sect	*(struct)
,	O
2	int
)	O
;	O
return	O
sect	*(struct)
;	O
}	O
bfd_boolean	int
bfd_fill_in_gnu_debuglink_section	(*(struct),*(struct),*(char))->(int)
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
struct	O
bfd_section	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))))),*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct),long))),int,int,*(struct(*(char),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*`,long))),int,int,*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))),union(*(struct),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`))))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`))))),union(*(struct),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`))))))
*	O
sect	*(struct)
,	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
bfd_size_type	long
debuglink_size	O
;	O
unsigned	O
long	O
crc32	O
;	O
char	O
*	O
contents	*(char)
;	O
bfd_size_type	long
crc_offset	O
;	O
FILE	struct
*	O
handle	O
;	O
static	O
unsigned	O
char	O
buffer	O
[	O
8	int
*	O
1024	int
]	O
;	O
size_t	long
count	int
;	O
size_t	long
filelen	O
;	O
if	O
(	O
abfd	*(struct)
==	O
NULL	O
||	O
sect	*(struct)
==	O
NULL	O
||	O
filename	*(char)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
handle	O
=	O
_bfd_real_fopen	O
(	O
filename	*(char)
,	O
FOPEN_RB	O
)	O
;	O
if	O
(	O
handle	O
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_system_call	int
)	O
;	O
return	O
FALSE	O
;	O
}	O
crc32	O
=	O
0	int
;	O
while	O
(	O
(	O
count	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buffer	O
,	O
1	int
,	O
sizeof	O
buffer	O
,	O
handle	O
)	O
)	O
>	O
0	int
)	O
crc32	O
=	O
bfd_calc_gnu_debuglink_crc32	(long,*(char),long)->(long)
(	O
crc32	O
,	O
buffer	O
,	O
count	int
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
handle	O
)	O
;	O
filename	*(char)
=	O
lbasename	O
(	O
filename	*(char)
)	O
;	O
filelen	O
=	O
strlen	(*(char))->(long)
(	O
filename	*(char)
)	O
;	O
debuglink_size	O
=	O
filelen	O
+	O
1	int
;	O
debuglink_size	O
+=	O
3	int
;	O
debuglink_size	O
&=	O
~	O
3	int
;	O
debuglink_size	O
+=	O
4	int
;	O
contents	*(char)
=	O
(	O
char	O
*	O
)	O
bfd_malloc	O
(	O
debuglink_size	O
)	O
;	O
if	O
(	O
contents	*(char)
==	O
NULL	O
)	O
{	O
return	O
FALSE	O
;	O
}	O
crc_offset	O
=	O
debuglink_size	O
-	O
4	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
contents	*(char)
,	O
filename	*(char)
,	O
filelen	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
contents	*(char)
+	O
filelen	O
,	O
0	int
,	O
crc_offset	O
-	O
filelen	O
)	O
;	O
bfd_put_32	O
(	O
abfd	*(struct)
,	O
crc32	O
,	O
contents	*(char)
+	O
crc_offset	O
)	O
;	O
if	O
(	O
!	O
bfd_set_section_contents	(*(struct),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(void),long,long)->(int)
(	O
abfd	*(struct)
,	O
sect	*(struct)
,	O
contents	*(char)
,	O
0	int
,	O
debuglink_size	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
return	O
TRUE	int
;	O
}	O
static	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
get_build_id	O
(	O
bfd	struct
*	O
abfd	*(struct)
)	O
{	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
build_id	*(struct(long,array(char)))
;	O
Elf_Internal_Note	O
inote	O
;	O
Elf_External_Note	O
*	O
enote	O
;	O
bfd_byte	char
*	O
contents	*(char)
;	O
asection	struct(*(char),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),int,*(struct),*(*(struct)),int,long,long,long,*(void),*(char),*(struct(int,union(*(struct`),long))),int,int,*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct)),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))),union(*(struct),*(struct(*(char),int,int,*(struct`),*(struct`),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct`),int,long,*(struct`),int,*(struct`),*(*`),int,long,long,long,*(void),*(char),*(struct`),int,int,*(struct`),long,int,*(void),*(struct`),*(struct`),*(struct`),*(*`),union(*`,*`),union(*`,*`)))))
*	O
sect	*(struct)
;	O
bfd_size_type	long
size	long
;	O
BFD_ASSERT	O
(	O
abfd	*(struct)
)	O
;	O
if	O
(	O
abfd	*(struct)
->	O
build_id	*(struct(long,array(char)))
&&	O
abfd	*(struct)
->	O
build_id	*(struct(long,array(char)))
->	O
size	long
>	O
0	int
)	O
return	O
(	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
)	O
abfd	*(struct)
->	O
build_id	*(struct(long,array(char)))
;	O
sect	*(struct)
=	O
bfd_get_section_by_name	(*(struct),*(char))->(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))
(	O
abfd	*(struct)
,	O
".note.gnu.build-id"	*(char)
)	O
;	O
if	O
(	O
sect	*(struct)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_debug_section	int
)	O
;	O
return	O
NULL	O
;	O
}	O
size	long
=	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
sect	*(struct)
)	O
;	O
if	O
(	O
size	long
<	O
0x24	int
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
bfd_malloc_and_get_section	(*(struct),*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))),*(*(char)))->(int)
(	O
abfd	*(struct)
,	O
sect	*(struct)
,	O
&	O
contents	*(char)
)	O
)	O
{	O
if	O
(	O
contents	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
size	long
=	O
bfd_section_size	(*(struct(*(char),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*(struct(long,int)),int,long,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),int,*(struct),*(*(struct`)),int,long,long,long,*(void),*(char),*(struct(int,union`)),int,int,*(struct(*`,int,int,*`,*`,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,long,long,long,long,long,*`,int,long,*`,int,*`,*`,int,long,long,long,*`,*`,*`,int,int,*`,long,int,*`,*`,*`,*`,*`,union`,union`)),long,int,*(void),*(struct),*(struct),*(struct),*(*(struct`)),union(*(struct`),*(struct`)),union(*(struct`),*(struct`)))))->(long)
(	O
sect	*(struct)
)	O
;	O
if	O
(	O
size	long
<	O
sizeof	O
(	O
Elf_External_Note	O
)	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
enote	O
=	O
(	O
Elf_External_Note	O
*	O
)	O
contents	*(char)
;	O
inote	O
.	O
type	enum(int,int,int,int)
=	O
H_GET_32	O
(	O
abfd	*(struct)
,	O
enote	O
->	O
type	enum(int,int,int,int)
)	O
;	O
inote	O
.	O
namesz	O
=	O
H_GET_32	O
(	O
abfd	*(struct)
,	O
enote	O
->	O
namesz	O
)	O
;	O
inote	O
.	O
namedata	O
=	O
enote	O
->	O
name	*(char)
;	O
inote	O
.	O
descsz	O
=	O
H_GET_32	O
(	O
abfd	*(struct)
,	O
enote	O
->	O
descsz	O
)	O
;	O
inote	O
.	O
descdata	O
=	O
inote	O
.	O
namedata	O
+	O
BFD_ALIGN	O
(	O
inote	O
.	O
namesz	O
,	O
4	int
)	O
;	O
if	O
(	O
inote	O
.	O
descsz	O
<=	O
0	int
||	O
inote	O
.	O
type	enum(int,int,int,int)
!=	O
NT_GNU_BUILD_ID	O
||	O
inote	O
.	O
namesz	O
!=	O
4	int
||	O
strncmp	(*(char),*(char),long)->(int)
(	O
inote	O
.	O
namedata	O
,	O
"GNU"	*(char)
,	O
4	int
)	O
!=	O
0	int
||	O
inote	O
.	O
descsz	O
>	O
0x7ffffffe	int
||	O
size	long
<	O
(	O
12	int
+	O
BFD_ALIGN	O
(	O
inote	O
.	O
namesz	O
,	O
4	int
)	O
+	O
inote	O
.	O
descsz	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
build_id	*(struct(long,array(char)))
=	O
bfd_alloc	(*(struct),long)->(*(void))
(	O
abfd	*(struct)
,	O
sizeof	O
(	O
struct	O
bfd_build_id	struct(long,array(char))
)	O
+	O
inote	O
.	O
descsz	O
)	O
;	O
if	O
(	O
build_id	*(struct(long,array(char)))
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
build_id	*(struct(long,array(char)))
->	O
size	long
=	O
inote	O
.	O
descsz	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
build_id	*(struct(long,array(char)))
->	O
data	*(void)
,	O
inote	O
.	O
descdata	O
,	O
inote	O
.	O
descsz	O
)	O
;	O
abfd	*(struct)
->	O
build_id	*(struct(long,array(char)))
=	O
build_id	*(struct(long,array(char)))
;	O
free	(*(void))->(void)
(	O
contents	*(char)
)	O
;	O
return	O
build_id	*(struct(long,array(char)))
;	O
}	O
static	O
char	O
*	O
get_build_id_name	O
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
void	O
*	O
build_id_out_p	O
)	O
{	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
*	O
build_id_out	O
=	O
build_id_out_p	O
;	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
build_id	*(struct(long,array(char)))
;	O
char	O
*	O
name	*(char)
;	O
char	O
*	O
n	long
;	O
bfd_size_type	long
s	*(void)
;	O
bfd_byte	char
*	O
d	O
;	O
if	O
(	O
abfd	*(struct)
==	O
NULL	O
||	O
abfd	*(struct)
->	O
filename	*(char)
==	O
NULL	O
||	O
build_id_out	O
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_invalid_operation	int
)	O
;	O
return	O
NULL	O
;	O
}	O
build_id	*(struct(long,array(char)))
=	O
get_build_id	O
(	O
abfd	*(struct)
)	O
;	O
if	O
(	O
build_id	*(struct(long,array(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
name	*(char)
=	O
bfd_malloc	O
(	O
strlen	(*(char))->(long)
(	O
".build-id/"	*(char)
)	O
+	O
build_id	*(struct(long,array(char)))
->	O
size	long
*	O
2	int
+	O
2	int
+	O
strlen	(*(char))->(long)
(	O
".debug"	*(char)
)	O
)	O
;	O
if	O
(	O
name	*(char)
==	O
NULL	O
)	O
{	O
bfd_set_error	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(void)
(	O
bfd_error_no_memory	int
)	O
;	O
return	O
NULL	O
;	O
}	O
n	long
=	O
name	*(char)
;	O
d	O
=	O
build_id	*(struct(long,array(char)))
->	O
data	*(void)
;	O
s	*(void)
=	O
build_id	*(struct(long,array(char)))
->	O
size	long
;	O
n	long
+=	O
sprintf	(*(char),*(char))->(int)
(	O
n	long
,	O
".build-id/"	*(char)
)	O
;	O
n	long
+=	O
sprintf	(*(char),*(char))->(int)
(	O
n	long
,	O
"%02x"	*(char)
,	O
(	O
unsigned	O
)	O
*	O
d	O
++	O
)	O
;	O
s	*(void)
--	O
;	O
n	long
+=	O
sprintf	(*(char),*(char))->(int)
(	O
n	long
,	O
"/"	*(char)
)	O
;	O
while	O
(	O
s	*(void)
--	O
)	O
n	long
+=	O
sprintf	(*(char),*(char))->(int)
(	O
n	long
,	O
"%02x"	*(char)
,	O
(	O
unsigned	O
)	O
*	O
d	O
++	O
)	O
;	O
n	long
+=	O
sprintf	(*(char),*(char))->(int)
(	O
n	long
,	O
".debug"	*(char)
)	O
;	O
*	O
build_id_out	O
=	O
build_id	*(struct(long,array(char)))
;	O
return	O
name	*(char)
;	O
}	O
static	O
bfd_boolean	int
check_build_id_file	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
buildid_p	O
)	O
{	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
orig_build_id	O
;	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
build_id	*(struct(long,array(char)))
;	O
bfd	struct
*	O
file	*(void)
;	O
bfd_boolean	int
result	O
;	O
BFD_ASSERT	O
(	O
name	*(char)
)	O
;	O
BFD_ASSERT	O
(	O
buildid_p	O
)	O
;	O
file	*(void)
=	O
bfd_openr	(*(char),*(char))->(*(struct))
(	O
name	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
file	*(void)
==	O
NULL	O
)	O
return	O
FALSE	O
;	O
if	O
(	O
!	O
bfd_check_format	O
(	O
file	*(void)
,	O
bfd_object	int
)	O
)	O
{	O
bfd_close	(*(struct))->(int)
(	O
file	*(void)
)	O
;	O
return	O
FALSE	O
;	O
}	O
build_id	*(struct(long,array(char)))
=	O
get_build_id	O
(	O
file	*(void)
)	O
;	O
if	O
(	O
build_id	*(struct(long,array(char)))
==	O
NULL	O
)	O
{	O
bfd_close	(*(struct))->(int)
(	O
file	*(void)
)	O
;	O
return	O
FALSE	O
;	O
}	O
orig_build_id	O
=	O
*	O
(	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
*	O
)	O
buildid_p	O
;	O
result	O
=	O
build_id	*(struct(long,array(char)))
->	O
size	long
==	O
orig_build_id	O
->	O
size	long
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
build_id	*(struct(long,array(char)))
->	O
data	*(void)
,	O
orig_build_id	O
->	O
data	*(void)
,	O
build_id	*(struct(long,array(char)))
->	O
size	long
)	O
==	O
0	int
;	O
(	O
void	O
)	O
bfd_close	(*(struct))->(int)
(	O
file	*(void)
)	O
;	O
return	O
result	O
;	O
}	O
char	O
*	O
bfd_follow_build_id_debuglink	(*(struct),*(char))->(*(char))
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
const	O
char	O
*	O
dir	*(char)
)	O
{	O
struct	O
bfd_build_id	struct(long,array(char))
*	O
build_id	*(struct(long,array(char)))
;	O
return	O
find_separate_debug_file	O
(	O
abfd	*(struct)
,	O
dir	*(char)
,	O
FALSE	O
,	O
get_build_id_name	O
,	O
check_build_id_file	O
,	O
&	O
build_id	*(struct(long,array(char)))
)	O
;	O
}	O
void	O
bfd_set_filename	(*(struct),*(char))->(void)
(	O
bfd	struct
*	O
abfd	*(struct)
,	O
char	O
*	O
filename	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
(	O
char	O
*	O
)	O
abfd	*(struct)
->	O
filename	*(char)
)	O
;	O
abfd	*(struct)
->	O
filename	*(char)
=	O
filename	*(char)
;	O
}	O
