typedef	O
struct	O
{	O
double	O
*	O
Y1	*(double)
;	O
double	O
*	O
y0	(double)->(double)
;	O
double	O
*	O
ytmp	*(double)
;	O
double	O
*	O
y_onestep	*(double)
;	O
double	O
*	O
y0_orig	*(double)
;	O
}	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
;	O
static	O
void	O
*	O
rk2imp_alloc	(long)->(*(void))
(	O
size_t	long
dim	long
)	O
{	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
0	int
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for rk2imp_state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
Y1	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
Y1	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for Y1"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ytmp	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
ytmp	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
Y1	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for ytmp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y0	(double)->(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y0	(double)->(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
Y1	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y0"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y_onestep	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y_onestep	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
Y1	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y_onestep"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y0_orig	*(double)
=	O
(	O
double	O
*	O
)	O
malloc	(long)->(*(void))
(	O
dim	long
*	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
state	*(int)
->	O
y0_orig	*(double)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
Y1	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for y0_orig"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
return	O
state	*(int)
;	O
}	O
static	O
int	O
rk2imp_step	(*(double),*(struct(*(double),*(double),*(double),*(double),*(double))),double,double,long,*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
double	O
*	O
y	double
,	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
,	O
const	O
double	O
h	double
,	O
const	O
double	O
t	double
,	O
const	O
size_t	long
dim	long
,	O
const	O
gsl_odeiv_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
{	O
const	O
double	O
*	O
y0	(double)->(double)
=	O
state	*(int)
->	O
y0	(double)->(double)
;	O
double	O
*	O
Y1	*(double)
=	O
state	*(int)
->	O
Y1	*(double)
;	O
double	O
*	O
ytmp	*(double)
=	O
state	*(int)
->	O
ytmp	*(double)
;	O
int	O
max_iter	int
=	O
3	int
;	O
int	O
nu	int
;	O
size_t	long
i	long
;	O
for	O
(	O
nu	int
=	O
0	int
;	O
nu	int
<	O
max_iter	int
;	O
nu	int
++	O
)	O
{	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
ytmp	*(double)
[	O
i	long
]	O
=	O
y0	(double)->(double)
[	O
i	long
]	O
+	O
0.5	int
*	O
h	double
*	O
Y1	*(double)
[	O
i	long
]	O
;	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
0.5	int
*	O
h	double
,	O
ytmp	*(double)
,	O
Y1	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
y	double
[	O
i	long
]	O
=	O
y0	(double)->(double)
[	O
i	long
]	O
+	O
h	double
*	O
Y1	*(double)
[	O
i	long
]	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk2imp_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
,	O
double	O
t	double
,	O
double	O
h	double
,	O
double	O
y	double
[	O
]	O
,	O
double	O
yerr	array(double)
[	O
]	O
,	O
const	O
double	O
dydt_in	array(double)
[	O
]	O
,	O
double	O
dydt_out	array(double)
[	O
]	O
,	O
const	O
gsl_odeiv_system	struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void))
*	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
{	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
size_t	long
i	long
;	O
double	O
*	O
Y1	*(double)
=	O
state	*(int)
->	O
Y1	*(double)
;	O
double	O
*	O
y0	(double)->(double)
=	O
state	*(int)
->	O
y0	(double)->(double)
;	O
double	O
*	O
y_onestep	*(double)
=	O
state	*(int)
->	O
y_onestep	*(double)
;	O
double	O
*	O
y0_orig	*(double)
=	O
state	*(int)
->	O
y0_orig	*(double)
;	O
DBL_MEMCPY	O
(	O
y0	(double)->(double)
,	O
y	double
,	O
dim	long
)	O
;	O
DBL_MEMCPY	O
(	O
y0_orig	*(double)
,	O
y	double
,	O
dim	long
)	O
;	O
if	O
(	O
dydt_in	array(double)
!=	O
NULL	O
)	O
{	O
DBL_MEMCPY	O
(	O
Y1	*(double)
,	O
dydt_in	array(double)
,	O
dim	long
)	O
;	O
}	O
else	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
,	O
y	double
,	O
Y1	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
DBL_MEMCPY	O
(	O
y_onestep	*(double)
,	O
y	double
,	O
dim	long
)	O
;	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
rk2imp_step	(*(double),*(struct(*(double),*(double),*(double),*(double),*(double))),double,double,long,*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
y_onestep	*(double)
,	O
state	*(int)
,	O
h	double
,	O
t	double
,	O
dim	long
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
rk2imp_step	(*(double),*(struct(*(double),*(double),*(double),*(double),*(double))),double,double,long,*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
y	double
,	O
state	*(int)
,	O
h	double
/	O
2.0	int
,	O
t	double
,	O
dim	long
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y0_orig	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
DBL_MEMCPY	O
(	O
y0	(double)->(double)
,	O
y	double
,	O
dim	long
)	O
;	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
/	O
2.0	int
,	O
y	double
,	O
Y1	*(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y0_orig	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
rk2imp_step	(*(double),*(struct(*(double),*(double),*(double),*(double),*(double))),double,double,long,*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
(	O
y	double
,	O
state	*(int)
,	O
h	double
/	O
2.0	int
,	O
t	double
+	O
h	double
/	O
2.0	int
,	O
dim	long
,	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y0_orig	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
if	O
(	O
dydt_out	array(double)
!=	O
NULL	O
)	O
{	O
int	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
=	O
GSL_ODEIV_FN_EVAL	O
(	O
sys	*(struct(*((double,array(double),array(double),*(void))->(int)),*((double,array(double),*(double),array(double),*(void))->(int)),long,*(void)))
,	O
t	double
+	O
h	double
,	O
y	double
,	O
dydt_out	array(double)
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
!=	O
GSL_SUCCESS	int
)	O
{	O
DBL_MEMCPY	O
(	O
y	double
,	O
y0_orig	*(double)
,	O
dim	long
)	O
;	O
return	O
s	*(struct(*(struct(*(char),int,int,*((long)->(*`)),*((*`,long,double,double,array(double),array(double),array(double),array(double),*`)->(int)),*((*`,long)->(int)),*((*`)->(int)),*((*`)->(void)))),long,*(void)))
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
dim	long
;	O
i	long
++	O
)	O
{	O
yerr	array(double)
[	O
i	long
]	O
=	O
4.0	int
*	O
(	O
y	double
[	O
i	long
]	O
-	O
y_onestep	*(double)
[	O
i	long
]	O
)	O
/	O
3.0	int
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
rk2imp_reset	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
dim	long
)	O
{	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
Y1	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
ytmp	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
y0	(double)->(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
y_onestep	*(double)
,	O
dim	long
)	O
;	O
DBL_ZERO_MEMSET	O
(	O
state	*(int)
->	O
y0_orig	*(double)
,	O
dim	long
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
unsigned	O
int	O
rk2imp_order	(*(void))->(int)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
state	*(int)
=	O
0	int
;	O
return	O
2	int
;	O
}	O
static	O
void	O
rk2imp_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
state	*(int)
=	O
(	O
rk2imp_state_t	struct(*(double),*(double),*(double),*(double),*(double))
*	O
)	O
vstate	*(void)
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
Y1	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
ytmp	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y0	(double)->(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y_onestep	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
->	O
y0_orig	*(double)
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
const	O
gsl_odeiv_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
rk2imp_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"rk2imp"	*(char)
,	O
1	int
,	O
1	int
,	O
&	O
rk2imp_alloc	(long)->(*(void))
,	O
&	O
rk2imp_apply	(*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*((double,array(double),array(double),*`)->(int)),*((double,array(double),*`,array(double),*`)->(int)),long,*(void))))->(int)
,	O
&	O
rk2imp_reset	(*(void),long)->(int)
,	O
&	O
rk2imp_order	(*(void))->(int)
,	O
&	O
rk2imp_free	(*(void))->(void)
}	O
;	O
const	O
gsl_odeiv_step_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
*	O
gsl_odeiv_step_rk2imp	*(struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct`))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void))))
=	O
&	O
rk2imp_type	struct(*(char),int,int,*((long)->(*(void))),*((*(void),long,double,double,array(double),array(double),array(double),array(double),*(struct(*`,*`,long,*`)))->(int)),*((*(void),long)->(int)),*((*(void))->(int)),*((*(void))->(void)))
;	O
