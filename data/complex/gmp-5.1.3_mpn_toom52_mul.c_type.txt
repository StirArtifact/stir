void	O
mpn_toom52_mul	O
(	O
mp_ptr	*(long)
pp	*(long)
,	O
mp_srcptr	*(long)
ap	*(long)
,	O
mp_size_t	long
an	long
,	O
mp_srcptr	*(long)
bp	*(long)
,	O
mp_size_t	long
bn	long
,	O
mp_ptr	*(long)
scratch	*(long)
)	O
{	O
mp_size_t	long
n	long
,	O
s	array(char)
,	O
t	long
;	O
enum	O
toom6_flags	enum(int,int,int)
flags	enum(int,int,int)
;	O
n	long
=	O
1	int
+	O
(	O
2	int
*	O
an	long
>=	O
5	int
*	O
bn	long
?	O
(	O
an	long
-	O
1	int
)	O
/	O
(	O
size_t	long
)	O
5	int
:	O
(	O
bn	long
-	O
1	int
)	O
>>	O
1	int
)	O
;	O
s	array(char)
=	O
an	long
-	O
4	int
*	O
n	long
;	O
t	long
=	O
bn	long
-	O
n	long
;	O
ASSERT	O
(	O
0	int
<	O
s	array(char)
&&	O
s	array(char)
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
0	int
<	O
t	long
&&	O
t	long
<=	O
n	long
)	O
;	O
ASSERT	O
(	O
s	array(char)
+	O
t	long
>=	O
5	int
)	O
;	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
toom6_vm2_neg	int
&	O
mpn_toom_eval_pm2	O
(	O
as2	O
,	O
asm2	O
,	O
4	int
,	O
ap	*(long)
,	O
n	long
,	O
s	array(char)
,	O
a1a3	O
)	O
)	O
;	O
if	O
(	O
t	long
==	O
n	long
)	O
{	O
bs1	O
[	O
n	long
]	O
=	O
mpn_add_n	O
(	O
bs1	O
,	O
b0	O
,	O
b1	O
,	O
n	long
)	O
;	O
if	O
(	O
mpn_cmp	O
(	O
b0	O
,	O
b1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm1	O
,	O
b1	O
,	O
b0	O
,	O
n	long
)	O
;	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
flags	enum(int,int,int)
^	O
toom6_vm1_neg	int
)	O
;	O
}	O
else	O
{	O
mpn_sub_n	O
(	O
bsm1	O
,	O
b0	O
,	O
b1	O
,	O
n	long
)	O
;	O
}	O
}	O
else	O
{	O
bs1	O
[	O
n	long
]	O
=	O
mpn_add	O
(	O
bs1	O
,	O
b0	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
;	O
if	O
(	O
mpn_zero_p	(*(long),long)->(int)
(	O
b0	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
&&	O
mpn_cmp	O
(	O
b0	O
,	O
b1	O
,	O
t	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm1	O
,	O
b1	O
,	O
b0	O
,	O
t	long
)	O
;	O
MPN_ZERO	O
(	O
bsm1	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
;	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
flags	enum(int,int,int)
^	O
toom6_vm1_neg	int
)	O
;	O
}	O
else	O
{	O
mpn_sub	O
(	O
bsm1	O
,	O
b0	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
;	O
}	O
}	O
mpn_add	O
(	O
bs2	O
,	O
bs1	O
,	O
n	long
+	O
1	int
,	O
b1	O
,	O
t	long
)	O
;	O
if	O
(	O
flags	enum(int,int,int)
&	O
toom6_vm1_neg	int
)	O
{	O
bsm2	O
[	O
n	long
]	O
=	O
mpn_add	O
(	O
bsm2	O
,	O
bsm1	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
;	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
flags	enum(int,int,int)
^	O
toom6_vm2_neg	int
)	O
;	O
}	O
else	O
{	O
bsm2	O
[	O
n	long
]	O
=	O
0	int
;	O
if	O
(	O
t	long
==	O
n	long
)	O
{	O
if	O
(	O
mpn_cmp	O
(	O
bsm1	O
,	O
b1	O
,	O
n	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm2	O
,	O
b1	O
,	O
bsm1	O
,	O
n	long
)	O
;	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
flags	enum(int,int,int)
^	O
toom6_vm2_neg	int
)	O
;	O
}	O
else	O
{	O
mpn_sub_n	O
(	O
bsm2	O
,	O
bsm1	O
,	O
b1	O
,	O
n	long
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
mpn_zero_p	(*(long),long)->(int)
(	O
bsm1	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
&&	O
mpn_cmp	O
(	O
bsm1	O
,	O
b1	O
,	O
t	long
)	O
<	O
0	int
)	O
{	O
mpn_sub_n	O
(	O
bsm2	O
,	O
b1	O
,	O
bsm1	O
,	O
t	long
)	O
;	O
MPN_ZERO	O
(	O
bsm2	O
+	O
t	long
,	O
n	long
-	O
t	long
)	O
;	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
flags	enum(int,int,int)
^	O
toom6_vm2_neg	int
)	O
;	O
}	O
else	O
{	O
mpn_sub	O
(	O
bsm2	O
,	O
bsm1	O
,	O
n	long
,	O
b1	O
,	O
t	long
)	O
;	O
}	O
}	O
}	O
flags	enum(int,int,int)
=	O
(	O
enum	O
toom6_flags	enum(int,int,int)
)	O
(	O
flags	enum(int,int,int)
^	O
toom6_vm1_neg	int
&	O
mpn_toom_eval_pm1	O
(	O
as1	O
,	O
asm1	O
,	O
4	int
,	O
ap	*(long)
,	O
n	long
,	O
s	array(char)
,	O
a0a2	O
)	O
)	O
;	O
ASSERT	O
(	O
as1	O
[	O
n	long
]	O
<=	O
4	int
)	O
;	O
ASSERT	O
(	O
bs1	O
[	O
n	long
]	O
<=	O
1	int
)	O
;	O
ASSERT	O
(	O
asm1	O
[	O
n	long
]	O
<=	O
2	int
)	O
;	O
ASSERT	O
(	O
as2	O
[	O
n	long
]	O
<=	O
30	int
)	O
;	O
ASSERT	O
(	O
bs2	O
[	O
n	long
]	O
<=	O
2	int
)	O
;	O
ASSERT	O
(	O
asm2	O
[	O
n	long
]	O
<=	O
20	int
)	O
;	O
ASSERT	O
(	O
bsm2	O
[	O
n	long
]	O
<=	O
1	int
)	O
;	O
mpn_mul	O
(	O
vm1	O
,	O
asm1	O
,	O
n	long
+	O
1	int
,	O
bsm1	O
,	O
n	long
)	O
;	O
mpn_mul_n	O
(	O
vm2	O
,	O
asm2	O
,	O
bsm2	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_mul_n	O
(	O
v2	O
,	O
as2	O
,	O
bs2	O
,	O
n	long
+	O
1	int
)	O
;	O
mpn_mul_n	O
(	O
v1	O
,	O
as1	O
,	O
bs1	O
,	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
s	array(char)
>	O
t	long
)	O
mpn_mul	O
(	O
vinf	O
,	O
a4	O
,	O
s	array(char)
,	O
b1	O
,	O
t	long
)	O
;	O
else	O
mpn_mul	O
(	O
vinf	O
,	O
b1	O
,	O
t	long
,	O
a4	O
,	O
s	array(char)
)	O
;	O
mpn_mul_n	O
(	O
v0	O
,	O
ap	*(long)
,	O
bp	*(long)
,	O
n	long
)	O
;	O
mpn_toom_interpolate_6pts	O
(	O
pp	*(long)
,	O
n	long
,	O
flags	enum(int,int,int)
,	O
vm1	O
,	O
vm2	O
,	O
v2	O
,	O
t	long
+	O
s	array(char)
)	O
;	O
}	O
