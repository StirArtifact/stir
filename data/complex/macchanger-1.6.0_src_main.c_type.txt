static	O
void	O
print_help	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"GNU MAC Changer\n"	*(char)
"Usage: macchanger [options] device\n\n"	*(char)
"  -h,  --help                   Print this help\n"	*(char)
"  -V,  --version                Print version and exit\n"	*(char)
"  -s,  --show                   Print the MAC address and exit\n"	*(char)
"  -e,  --endding                Don't change the vendor bytes\n"	*(char)
"  -a,  --another                Set random vendor MAC of the same kind\n"	*(char)
"  -A                            Set random vendor MAC of any kind\n"	*(char)
"  -p,  --permanent              Reset to original, permanent hardware MAC\n"	*(char)
"  -r,  --random                 Set fully random MAC\n"	*(char)
"  -l,  --list[=keyword]         Print known vendors\n"	*(char)
"  -b,  --bia                    Pretend to be a burned-in-address\n"	*(char)
"  -m,  --mac=XX:XX:XX:XX:XX:XX  Set the MAC XX:XX:XX:XX:XX:XX\n\n"	*(char)
"Report bugs to https://github.com/alobbs/macchanger/issues\n"	*(char)
)	O
;	O
}	O
static	O
void	O
print_usage	()->(void)
(	O
void	O
)	O
{	O
printf	(*(char))->(int)
(	O
"GNU MAC Changer\n"	*(char)
"Usage: macchanger [options] device\n\n"	*(char)
"Try `macchanger --help' for more options.\n"	*(char)
)	O
;	O
}	O
static	O
void	O
print_mac	(*(char),*(struct(array(char))))->(void)
(	O
const	O
char	O
*	O
s	*(char)
,	O
const	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
)	O
{	O
char	O
string	array(char)
[	O
18	int
]	O
;	O
int	O
is_wireless	int
;	O
is_wireless	int
=	O
mc_maclist_is_wireless	(*(struct(array(char))))->(int)
(	O
mac	*(struct(array(char)))
)	O
;	O
mc_mac_into_string	(*(struct(array(char))),*(char))->(void)
(	O
mac	*(struct(array(char)))
,	O
string	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s%s%s (%s)\n"	*(char)
,	O
s	*(char)
,	O
string	array(char)
,	O
is_wireless	int
?	O
" [wireless]"	*(char)
:	O
""	*(char)
,	O
CARD_NAME	O
(	O
mac	*(struct(array(char)))
)	O
)	O
;	O
}	O
static	O
void	O
random_seed	()->(void)
(	O
void	O
)	O
{	O
int	O
fd	int
;	O
struct	O
timeval	struct(long,long)
tv	struct(long,long)
;	O
unsigned	O
int	O
seed	int
;	O
if	O
(	O
(	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/urandom"	*(char)
,	O
O_RDONLY	int
)	O
)	O
>=	O
0	int
||	O
(	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
"/dev/random"	*(char)
,	O
O_RDONLY	int
)	O
)	O
>=	O
0	int
)	O
{	O
read	(int,*(void),long)->(long)
(	O
fd	int
,	O
&	O
seed	int
,	O
sizeof	O
(	O
seed	int
)	O
)	O
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
}	O
else	O
{	O
gettimeofday	(*(struct(long,long)),*(void))->(int)
(	O
&	O
tv	struct(long,long)
,	O
NULL	O
)	O
;	O
seed	int
=	O
(	O
getpid	()->(int)
(	O
)	O
<<	O
16	int
)	O
^	O
tv	struct(long,long)
.	O
tv_sec	long
^	O
tv	struct(long,long)
.	O
tv_usec	long
;	O
}	O
srandom	(int)->(void)
(	O
seed	int
)	O
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	array(*(char))
[	O
]	O
)	O
{	O
char	O
random	()->(long)
=	O
0	int
;	O
char	O
endding	char
=	O
0	int
;	O
char	O
another_any	char
=	O
0	int
;	O
char	O
another_same	char
=	O
0	int
;	O
char	O
permanent	char
=	O
0	int
;	O
char	O
print_list	char
=	O
0	int
;	O
char	O
show	char
=	O
0	int
;	O
char	O
set_bia	char
=	O
0	int
;	O
char	O
*	O
set_mac	*(char)
=	O
NULL	O
;	O
char	O
*	O
search_word	*(char)
=	O
NULL	O
;	O
struct	O
option	struct(*(char),int,*(int),int)
long_options	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"help"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'h'	O
}	O
,	O
{	O
"version"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'V'	O
}	O
,	O
{	O
"random"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'r'	O
}	O
,	O
{	O
"endding"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'e'	O
}	O
,	O
{	O
"another"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'a'	O
}	O
,	O
{	O
"permanent"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'p'	O
}	O
,	O
{	O
"show"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
's'	O
}	O
,	O
{	O
"another_any"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'A'	O
}	O
,	O
{	O
"bia"	*(char)
,	O
no_argument	int
,	O
NULL	O
,	O
'b'	O
}	O
,	O
{	O
"list"	*(char)
,	O
optional_argument	int
,	O
NULL	O
,	O
'l'	O
}	O
,	O
{	O
"mac"	*(char)
,	O
required_argument	int
,	O
NULL	O
,	O
'm'	O
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
}	O
;	O
net_info_t	struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char))))
*	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
;	O
mac_t	struct(array(char))
*	O
mac	*(struct(array(char)))
;	O
mac_t	struct(array(char))
*	O
mac_permanent	*(struct(array(char)))
;	O
mac_t	struct(array(char))
*	O
mac_faked	*(struct(array(char)))
;	O
char	O
*	O
device_name	*(char)
;	O
int	O
val	int
;	O
int	O
ret	int
;	O
while	O
(	O
(	O
val	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	array(*(char))
,	O
"VasAbrephlm:"	*(char)
,	O
long_options	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
switch	O
(	O
val	int
)	O
{	O
case	O
'V'	O
:	O
printf	(*(char))->(int)
(	O
"GNU MAC changer %s\n"	*(char)
"Written by Alvaro Lopez Ortega <alvaro@gnu.org>\n\n"	*(char)
"Copyright (C) 2003,2013 Alvaro Lopez Ortega <alvaro@gnu.org>.\n"	*(char)
"This is free software; see the source for copying conditions.  There is NO\n"	*(char)
"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"	*(char)
,	O
VERSION	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
print_list	char
=	O
1	int
;	O
search_word	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'r'	O
:	O
random	()->(long)
=	O
1	int
;	O
break	O
;	O
case	O
'e'	O
:	O
endding	char
=	O
1	int
;	O
break	O
;	O
case	O
'b'	O
:	O
set_bia	char
=	O
1	int
;	O
break	O
;	O
case	O
'a'	O
:	O
another_same	char
=	O
1	int
;	O
break	O
;	O
case	O
's'	O
:	O
show	char
=	O
1	int
;	O
break	O
;	O
case	O
'A'	O
:	O
another_any	char
=	O
1	int
;	O
break	O
;	O
case	O
'p'	O
:	O
permanent	char
=	O
1	int
;	O
break	O
;	O
case	O
'm'	O
:	O
set_mac	*(char)
=	O
optarg	*(char)
;	O
break	O
;	O
case	O
'h'	O
:	O
case	O
'?'	O
:	O
default	O
:	O
print_help	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
mc_maclist_init	()->(int)
(	O
)	O
<	O
0	int
)	O
{	O
exit	(int)->(void)
(	O
EXIT_ERROR	int
)	O
;	O
}	O
if	O
(	O
print_list	char
)	O
{	O
mc_maclist_print	(*(char))->(void)
(	O
search_word	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
}	O
if	O
(	O
optind	int
>=	O
argc	int
)	O
{	O
print_usage	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
}	O
device_name	*(char)
=	O
argv	array(*(char))
[	O
optind	int
]	O
;	O
random_seed	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
=	O
mc_net_info_new	(*(char))->(*(struct(int,struct(union(array(char)),union(struct`,struct`,struct`,struct`,struct`,short,int,int,struct`,array(char),array(char),*`)))))
(	O
device_name	*(char)
)	O
)	O
==	O
NULL	O
)	O
{	O
exit	(int)->(void)
(	O
EXIT_ERROR	int
)	O
;	O
}	O
mac	*(struct(array(char)))
=	O
mc_net_info_get_mac	(*(struct(int,struct(union(array(char)),union(struct`,struct`,struct`,struct`,struct`,short,int,int,struct`,array(char),array(char),*`)))))->(*(struct(array(char))))
(	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
)	O
;	O
mac_permanent	*(struct(array(char)))
=	O
mc_net_info_get_permanent_mac	(*(struct(int,struct(union(array(char)),union(struct`,struct`,struct`,struct`,struct`,short,int,int,struct`,array(char),array(char),*`)))))->(*(struct(array(char))))
(	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
)	O
;	O
print_mac	(*(char),*(struct(array(char))))->(void)
(	O
"Current MAC:   "	*(char)
,	O
mac	*(struct(array(char)))
)	O
;	O
print_mac	(*(char),*(struct(array(char))))->(void)
(	O
"Permanent MAC: "	*(char)
,	O
mac_permanent	*(struct(array(char)))
)	O
;	O
mac_faked	*(struct(array(char)))
=	O
mc_mac_dup	(*(struct(array(char))))->(*(struct(array(char))))
(	O
mac	*(struct(array(char)))
)	O
;	O
if	O
(	O
show	char
)	O
{	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
}	O
else	O
if	O
(	O
set_mac	*(char)
)	O
{	O
if	O
(	O
mc_mac_read_string	(*(struct(array(char))),*(char))->(int)
(	O
mac_faked	*(struct(array(char)))
,	O
set_mac	*(char)
)	O
<	O
0	int
)	O
{	O
exit	(int)->(void)
(	O
EXIT_ERROR	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
random	()->(long)
)	O
{	O
mc_mac_random	(*(struct(array(char))),char,char)->(void)
(	O
mac_faked	*(struct(array(char)))
,	O
6	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
endding	char
)	O
{	O
mc_mac_random	(*(struct(array(char))),char,char)->(void)
(	O
mac_faked	*(struct(array(char)))
,	O
3	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
another_same	char
)	O
{	O
val	int
=	O
mc_maclist_is_wireless	(*(struct(array(char))))->(int)
(	O
mac	*(struct(array(char)))
)	O
;	O
mc_maclist_set_random_vendor	(*(struct(array(char))),enum(int,int,int))->(void)
(	O
mac_faked	*(struct(array(char)))
,	O
val	int
)	O
;	O
mc_mac_random	(*(struct(array(char))),char,char)->(void)
(	O
mac_faked	*(struct(array(char)))
,	O
3	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
another_any	char
)	O
{	O
mc_maclist_set_random_vendor	(*(struct(array(char))),enum(int,int,int))->(void)
(	O
mac_faked	*(struct(array(char)))
,	O
mac_is_anykind	int
)	O
;	O
mc_mac_random	(*(struct(array(char))),char,char)->(void)
(	O
mac_faked	*(struct(array(char)))
,	O
3	int
,	O
set_bia	char
)	O
;	O
}	O
else	O
if	O
(	O
permanent	char
)	O
{	O
mac_faked	*(struct(array(char)))
=	O
mc_mac_dup	(*(struct(array(char))))->(*(struct(array(char))))
(	O
mac_permanent	*(struct(array(char)))
)	O
;	O
}	O
else	O
{	O
mc_mac_next	(*(struct(array(char))))->(void)
(	O
mac_faked	*(struct(array(char)))
)	O
;	O
}	O
ret	int
=	O
mc_net_info_set_mac	(*(struct(int,struct(union(array(char)),union(struct`,struct`,struct`,struct`,struct`,short,int,int,struct`,array(char),array(char),*`)))),*(struct(array(char))))->(int)
(	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
,	O
mac_faked	*(struct(array(char)))
)	O
;	O
if	O
(	O
ret	int
==	O
0	int
)	O
{	O
mc_mac_free	(*(struct(array(char))))->(void)
(	O
mac_faked	*(struct(array(char)))
)	O
;	O
mac_faked	*(struct(array(char)))
=	O
mc_net_info_get_mac	(*(struct(int,struct(union(array(char)),union(struct`,struct`,struct`,struct`,struct`,short,int,int,struct`,array(char),array(char),*`)))))->(*(struct(array(char))))
(	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
)	O
;	O
print_mac	(*(char),*(struct(array(char))))->(void)
(	O
"New MAC:       "	*(char)
,	O
mac_faked	*(struct(array(char)))
)	O
;	O
if	O
(	O
mc_mac_equal	(*(struct(array(char))),*(struct(array(char))))->(int)
(	O
mac	*(struct(array(char)))
,	O
mac_faked	*(struct(array(char)))
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"It's the same MAC!!\n"	*(char)
)	O
;	O
}	O
}	O
mc_mac_free	(*(struct(array(char))))->(void)
(	O
mac	*(struct(array(char)))
)	O
;	O
mc_mac_free	(*(struct(array(char))))->(void)
(	O
mac_faked	*(struct(array(char)))
)	O
;	O
mc_mac_free	(*(struct(array(char))))->(void)
(	O
mac_permanent	*(struct(array(char)))
)	O
;	O
mc_net_info_free	(*(struct(int,struct(union(array(char)),union(struct`,struct`,struct`,struct`,struct`,short,int,int,struct`,array(char),array(char),*`)))))->(void)
(	O
net	*(struct(int,struct(union(array(char)),union(struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),struct(short,array(char)),short,int,int,struct(long,long,short,char,char,char),array(char),array(char),*(char)))))
)	O
;	O
mc_maclist_free	()->(void)
(	O
)	O
;	O
return	O
(	O
ret	int
==	O
0	int
)	O
?	O
EXIT_OK	int
:	O
EXIT_ERROR	int
;	O
}	O
