static	O
void	O
backward_recurse_c	(double,double,double,*(double),*(double),int,int)->(void)
(	O
double	O
aa	*(double)
,	O
double	O
qq	double
,	O
double	O
xx	double
,	O
double	O
*	O
ff	*(double)
,	O
double	O
*	O
gx	*(double)
,	O
int	O
even_odd	int
,	O
int	O
ni	int
)	O
{	O
int	O
ii	int
,	O
nn	long
;	O
double	O
g1	double
;	O
g1	double
=	O
*	O
gx	*(double)
;	O
ff	*(double)
[	O
ni	int
]	O
=	O
xx	double
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
ni	int
;	O
ii	int
++	O
)	O
{	O
nn	long
=	O
GSL_SF_MATHIEU_COEFF	int
-	O
ii	int
-	O
1	int
;	O
ff	*(double)
[	O
ni	int
-	O
ii	int
-	O
1	int
]	O
=	O
-	O
1.0	int
/	O
(	O
(	O
4	int
*	O
nn	long
*	O
nn	long
-	O
aa	*(double)
)	O
/	O
qq	double
+	O
ff	*(double)
[	O
ni	int
-	O
ii	int
]	O
)	O
;	O
}	O
if	O
(	O
ni	int
==	O
GSL_SF_MATHIEU_COEFF	int
-	O
1	int
)	O
ff	*(double)
[	O
0	int
]	O
*=	O
2.0	int
;	O
}	O
else	O
{	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
ni	int
;	O
ii	int
++	O
)	O
{	O
nn	long
=	O
GSL_SF_MATHIEU_COEFF	int
-	O
ii	int
-	O
1	int
;	O
ff	*(double)
[	O
ni	int
-	O
ii	int
-	O
1	int
]	O
=	O
-	O
1.0	int
/	O
(	O
(	O
(	O
2	int
*	O
nn	long
+	O
1	int
)	O
*	O
(	O
2	int
*	O
nn	long
+	O
1	int
)	O
-	O
aa	*(double)
)	O
/	O
qq	double
+	O
ff	*(double)
[	O
ni	int
-	O
ii	int
]	O
)	O
;	O
}	O
}	O
*	O
gx	*(double)
=	O
ff	*(double)
[	O
0	int
]	O
-	O
g1	double
;	O
}	O
static	O
void	O
backward_recurse_s	(double,double,double,*(double),*(double),int,int)->(void)
(	O
double	O
aa	*(double)
,	O
double	O
qq	double
,	O
double	O
xx	double
,	O
double	O
*	O
ff	*(double)
,	O
double	O
*	O
gx	*(double)
,	O
int	O
even_odd	int
,	O
int	O
ni	int
)	O
{	O
int	O
ii	int
,	O
nn	long
;	O
double	O
g1	double
;	O
g1	double
=	O
*	O
gx	*(double)
;	O
ff	*(double)
[	O
ni	int
]	O
=	O
xx	double
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
ni	int
;	O
ii	int
++	O
)	O
{	O
nn	long
=	O
GSL_SF_MATHIEU_COEFF	int
-	O
ii	int
-	O
1	int
;	O
ff	*(double)
[	O
ni	int
-	O
ii	int
-	O
1	int
]	O
=	O
-	O
1.0	int
/	O
(	O
(	O
4	int
*	O
(	O
nn	long
+	O
1	int
)	O
*	O
(	O
nn	long
+	O
1	int
)	O
-	O
aa	*(double)
)	O
/	O
qq	double
+	O
ff	*(double)
[	O
ni	int
-	O
ii	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
ni	int
;	O
ii	int
++	O
)	O
{	O
nn	long
=	O
GSL_SF_MATHIEU_COEFF	int
-	O
ii	int
-	O
1	int
;	O
ff	*(double)
[	O
ni	int
-	O
ii	int
-	O
1	int
]	O
=	O
-	O
1.0	int
/	O
(	O
(	O
(	O
2	int
*	O
nn	long
+	O
1	int
)	O
*	O
(	O
2	int
*	O
nn	long
+	O
1	int
)	O
-	O
aa	*(double)
)	O
/	O
qq	double
+	O
ff	*(double)
[	O
ni	int
-	O
ii	int
]	O
)	O
;	O
}	O
}	O
*	O
gx	*(double)
=	O
ff	*(double)
[	O
0	int
]	O
-	O
g1	double
;	O
}	O
int	O
gsl_sf_mathieu_a_coeff	(int,double,double,array(double))->(int)
(	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
aa	*(double)
,	O
double	O
coeff	array(double)
[	O
]	O
)	O
{	O
int	O
ni	int
,	O
nn	long
,	O
ii	int
,	O
even_odd	int
;	O
double	O
eps	double
,	O
g1	double
,	O
g2	double
,	O
x1	double
,	O
x2	double
,	O
e1	double
,	O
e2	*(double)
,	O
de	double
,	O
xh	double
,	O
sum	double
,	O
ratio	double
,	O
ff	*(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
;	O
eps	double
=	O
1e-14	int
;	O
coeff	array(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
order	enum(int,int)
>	O
GSL_SF_MATHIEU_COEFF	int
)	O
return	O
GSL_FAILURE	int
;	O
if	O
(	O
qq	double
==	O
0.0	int
)	O
{	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
coeff	array(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
coeff	array(double)
[	O
order	enum(int,int)
/	O
2	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
order	enum(int,int)
<	O
5	int
)	O
{	O
nn	long
=	O
0	int
;	O
sum	double
=	O
0.0	int
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
ratio	double
=	O
aa	*(double)
/	O
qq	double
;	O
else	O
ratio	double
=	O
(	O
aa	*(double)
-	O
1	int
-	O
qq	double
)	O
/	O
qq	double
;	O
}	O
else	O
{	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
coeff	array(double)
[	O
1	int
]	O
=	O
aa	*(double)
/	O
qq	double
;	O
coeff	array(double)
[	O
2	int
]	O
=	O
(	O
aa	*(double)
-	O
4	int
)	O
/	O
qq	double
*	O
coeff	array(double)
[	O
1	int
]	O
-	O
2	int
;	O
sum	double
=	O
coeff	array(double)
[	O
0	int
]	O
+	O
coeff	array(double)
[	O
1	int
]	O
+	O
coeff	array(double)
[	O
2	int
]	O
;	O
for	O
(	O
ii	int
=	O
3	int
;	O
ii	int
<	O
order	enum(int,int)
/	O
2	int
+	O
1	int
;	O
ii	int
++	O
)	O
{	O
coeff	array(double)
[	O
ii	int
]	O
=	O
(	O
aa	*(double)
-	O
4	int
*	O
(	O
ii	int
-	O
1	int
)	O
*	O
(	O
ii	int
-	O
1	int
)	O
)	O
/	O
qq	double
*	O
coeff	array(double)
[	O
ii	int
-	O
1	int
]	O
-	O
coeff	array(double)
[	O
ii	int
-	O
2	int
]	O
;	O
sum	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
;	O
}	O
}	O
else	O
{	O
coeff	array(double)
[	O
1	int
]	O
=	O
(	O
aa	*(double)
-	O
1	int
)	O
/	O
qq	double
-	O
1	int
;	O
sum	double
=	O
coeff	array(double)
[	O
0	int
]	O
+	O
coeff	array(double)
[	O
1	int
]	O
;	O
for	O
(	O
ii	int
=	O
2	int
;	O
ii	int
<	O
order	enum(int,int)
/	O
2	int
+	O
1	int
;	O
ii	int
++	O
)	O
{	O
coeff	array(double)
[	O
ii	int
]	O
=	O
(	O
aa	*(double)
-	O
(	O
2	int
*	O
ii	int
-	O
1	int
)	O
*	O
(	O
2	int
*	O
ii	int
-	O
1	int
)	O
)	O
/	O
qq	double
*	O
coeff	array(double)
[	O
ii	int
-	O
1	int
]	O
-	O
coeff	array(double)
[	O
ii	int
-	O
2	int
]	O
;	O
sum	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
;	O
}	O
}	O
nn	long
=	O
ii	int
-	O
1	int
;	O
ratio	double
=	O
coeff	array(double)
[	O
nn	long
]	O
/	O
coeff	array(double)
[	O
nn	long
-	O
1	int
]	O
;	O
}	O
ni	int
=	O
GSL_SF_MATHIEU_COEFF	int
-	O
nn	long
-	O
1	int
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
x1	double
=	O
-	O
qq	double
/	O
(	O
4.0	int
*	O
GSL_SF_MATHIEU_COEFF	int
*	O
GSL_SF_MATHIEU_COEFF	int
)	O
;	O
else	O
x1	double
=	O
-	O
qq	double
/	O
(	O
(	O
2.0	int
*	O
GSL_SF_MATHIEU_COEFF	int
+	O
1.0	int
)	O
*	O
(	O
2.0	int
*	O
GSL_SF_MATHIEU_COEFF	int
+	O
1.0	int
)	O
)	O
;	O
g1	double
=	O
ratio	double
;	O
backward_recurse_c	(double,double,double,*(double),*(double),int,int)->(void)
(	O
aa	*(double)
,	O
qq	double
,	O
x1	double
,	O
ff	*(double)
,	O
&	O
g1	double
,	O
even_odd	int
,	O
ni	int
)	O
;	O
x2	double
=	O
g1	double
;	O
g2	double
=	O
ratio	double
;	O
backward_recurse_c	(double,double,double,*(double),*(double),int,int)->(void)
(	O
aa	*(double)
,	O
qq	double
,	O
x2	double
,	O
ff	*(double)
,	O
&	O
g2	double
,	O
even_odd	int
,	O
ni	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
e1	double
=	O
g1	double
-	O
x1	double
;	O
e2	*(double)
=	O
g2	double
-	O
x2	double
;	O
de	double
=	O
e1	double
-	O
e2	*(double)
;	O
if	O
(	O
fabs	(double)->(double)
(	O
de	double
)	O
<	O
eps	double
)	O
break	O
;	O
xh	double
=	O
(	O
e1	double
*	O
x2	double
-	O
e2	*(double)
*	O
x1	double
)	O
/	O
de	double
;	O
x1	double
=	O
x2	double
;	O
g1	double
=	O
g2	double
;	O
x2	double
=	O
xh	double
;	O
g2	double
=	O
ratio	double
;	O
backward_recurse_c	(double,double,double,*(double),*(double),int,int)->(void)
(	O
aa	*(double)
,	O
qq	double
,	O
x2	double
,	O
ff	*(double)
,	O
&	O
g2	double
,	O
even_odd	int
,	O
ni	int
)	O
;	O
}	O
sum	double
+=	O
coeff	array(double)
[	O
nn	long
]	O
;	O
for	O
(	O
ii	int
=	O
nn	long
+	O
1	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
{	O
coeff	array(double)
[	O
ii	int
]	O
=	O
ff	*(double)
[	O
ii	int
-	O
nn	long
-	O
1	int
]	O
*	O
coeff	array(double)
[	O
ii	int
-	O
1	int
]	O
;	O
sum	double
+=	O
coeff	array(double)
[	O
ii	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
ii	int
]	O
)	O
<	O
1e-20	int
)	O
{	O
for	O
(	O
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
)	O
coeff	array(double)
[	O
ii	int
++	O
]	O
=	O
0.0	int
;	O
}	O
}	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
coeff	array(double)
[	O
ii	int
]	O
/=	O
sum	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
int	O
gsl_sf_mathieu_b_coeff	(int,double,double,array(double))->(int)
(	O
int	O
order	enum(int,int)
,	O
double	O
qq	double
,	O
double	O
aa	*(double)
,	O
double	O
coeff	array(double)
[	O
]	O
)	O
{	O
int	O
ni	int
,	O
nn	long
,	O
ii	int
,	O
even_odd	int
;	O
double	O
eps	double
,	O
g1	double
,	O
g2	double
,	O
x1	double
,	O
x2	double
,	O
e1	double
,	O
e2	*(double)
,	O
de	double
,	O
xh	double
,	O
sum	double
,	O
ratio	double
,	O
ff	*(double)
[	O
GSL_SF_MATHIEU_COEFF	int
]	O
;	O
eps	double
=	O
1e-10	int
;	O
coeff	array(double)
[	O
0	int
]	O
=	O
1.0	int
;	O
even_odd	int
=	O
0	int
;	O
if	O
(	O
order	enum(int,int)
%	O
2	int
!=	O
0	int
)	O
even_odd	int
=	O
1	int
;	O
if	O
(	O
order	enum(int,int)
>	O
GSL_SF_MATHIEU_COEFF	int
)	O
return	O
GSL_FAILURE	int
;	O
if	O
(	O
qq	double
==	O
0.0	int
)	O
{	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
coeff	array(double)
[	O
ii	int
]	O
=	O
0.0	int
;	O
coeff	array(double)
[	O
(	O
order	enum(int,int)
-	O
1	int
)	O
/	O
2	int
]	O
=	O
1.0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
if	O
(	O
order	enum(int,int)
<	O
5	int
)	O
{	O
nn	long
=	O
0	int
;	O
sum	double
=	O
0.0	int
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
ratio	double
=	O
(	O
aa	*(double)
-	O
4	int
)	O
/	O
qq	double
;	O
else	O
ratio	double
=	O
(	O
aa	*(double)
-	O
1	int
-	O
qq	double
)	O
/	O
qq	double
;	O
}	O
else	O
{	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
{	O
coeff	array(double)
[	O
1	int
]	O
=	O
(	O
aa	*(double)
-	O
4	int
)	O
/	O
qq	double
;	O
sum	double
=	O
2	int
*	O
coeff	array(double)
[	O
0	int
]	O
+	O
4	int
*	O
coeff	array(double)
[	O
1	int
]	O
;	O
for	O
(	O
ii	int
=	O
2	int
;	O
ii	int
<	O
order	enum(int,int)
/	O
2	int
;	O
ii	int
++	O
)	O
{	O
coeff	array(double)
[	O
ii	int
]	O
=	O
(	O
aa	*(double)
-	O
4	int
*	O
ii	int
*	O
ii	int
)	O
/	O
qq	double
*	O
coeff	array(double)
[	O
ii	int
-	O
1	int
]	O
-	O
coeff	array(double)
[	O
ii	int
-	O
2	int
]	O
;	O
sum	double
+=	O
2	int
*	O
(	O
ii	int
+	O
1	int
)	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
}	O
}	O
else	O
{	O
coeff	array(double)
[	O
1	int
]	O
=	O
(	O
aa	*(double)
-	O
1	int
)	O
/	O
qq	double
+	O
1	int
;	O
sum	double
=	O
coeff	array(double)
[	O
0	int
]	O
+	O
3	int
*	O
coeff	array(double)
[	O
1	int
]	O
;	O
for	O
(	O
ii	int
=	O
2	int
;	O
ii	int
<	O
order	enum(int,int)
/	O
2	int
+	O
1	int
;	O
ii	int
++	O
)	O
{	O
coeff	array(double)
[	O
ii	int
]	O
=	O
(	O
aa	*(double)
-	O
(	O
2	int
*	O
ii	int
-	O
1	int
)	O
*	O
(	O
2	int
*	O
ii	int
-	O
1	int
)	O
)	O
/	O
qq	double
*	O
coeff	array(double)
[	O
ii	int
-	O
1	int
]	O
-	O
coeff	array(double)
[	O
ii	int
-	O
2	int
]	O
;	O
sum	double
+=	O
(	O
2	int
*	O
(	O
ii	int
+	O
1	int
)	O
-	O
1	int
)	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
}	O
}	O
nn	long
=	O
ii	int
-	O
1	int
;	O
ratio	double
=	O
coeff	array(double)
[	O
nn	long
]	O
/	O
coeff	array(double)
[	O
nn	long
-	O
1	int
]	O
;	O
}	O
ni	int
=	O
GSL_SF_MATHIEU_COEFF	int
-	O
nn	long
-	O
1	int
;	O
if	O
(	O
even_odd	int
==	O
0	int
)	O
x1	double
=	O
-	O
qq	double
/	O
(	O
4.0	int
*	O
(	O
GSL_SF_MATHIEU_COEFF	int
+	O
1.0	int
)	O
*	O
(	O
GSL_SF_MATHIEU_COEFF	int
+	O
1.0	int
)	O
)	O
;	O
else	O
x1	double
=	O
-	O
qq	double
/	O
(	O
(	O
2.0	int
*	O
GSL_SF_MATHIEU_COEFF	int
+	O
1.0	int
)	O
*	O
(	O
2.0	int
*	O
GSL_SF_MATHIEU_COEFF	int
+	O
1.0	int
)	O
)	O
;	O
g1	double
=	O
ratio	double
;	O
backward_recurse_s	(double,double,double,*(double),*(double),int,int)->(void)
(	O
aa	*(double)
,	O
qq	double
,	O
x1	double
,	O
ff	*(double)
,	O
&	O
g1	double
,	O
even_odd	int
,	O
ni	int
)	O
;	O
x2	double
=	O
g1	double
;	O
g2	double
=	O
ratio	double
;	O
backward_recurse_s	(double,double,double,*(double),*(double),int,int)->(void)
(	O
aa	*(double)
,	O
qq	double
,	O
x2	double
,	O
ff	*(double)
,	O
&	O
g2	double
,	O
even_odd	int
,	O
ni	int
)	O
;	O
while	O
(	O
1	int
)	O
{	O
e1	double
=	O
g1	double
-	O
x1	double
;	O
e2	*(double)
=	O
g2	double
-	O
x2	double
;	O
de	double
=	O
e1	double
-	O
e2	*(double)
;	O
if	O
(	O
fabs	(double)->(double)
(	O
de	double
)	O
<	O
eps	double
)	O
break	O
;	O
xh	double
=	O
(	O
e1	double
*	O
x2	double
-	O
e2	*(double)
*	O
x1	double
)	O
/	O
de	double
;	O
x1	double
=	O
x2	double
;	O
g1	double
=	O
g2	double
;	O
x2	double
=	O
xh	double
;	O
g2	double
=	O
ratio	double
;	O
backward_recurse_s	(double,double,double,*(double),*(double),int,int)->(void)
(	O
aa	*(double)
,	O
qq	double
,	O
x2	double
,	O
ff	*(double)
,	O
&	O
g2	double
,	O
even_odd	int
,	O
ni	int
)	O
;	O
}	O
sum	double
+=	O
2	int
*	O
(	O
nn	long
+	O
1	int
)	O
*	O
coeff	array(double)
[	O
nn	long
]	O
;	O
for	O
(	O
ii	int
=	O
nn	long
+	O
1	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
{	O
coeff	array(double)
[	O
ii	int
]	O
=	O
ff	*(double)
[	O
ii	int
-	O
nn	long
-	O
1	int
]	O
*	O
coeff	array(double)
[	O
ii	int
-	O
1	int
]	O
;	O
sum	double
+=	O
2	int
*	O
(	O
ii	int
+	O
1	int
)	O
*	O
coeff	array(double)
[	O
ii	int
]	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
coeff	array(double)
[	O
ii	int
]	O
)	O
<	O
1e-20	int
)	O
{	O
for	O
(	O
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
)	O
coeff	array(double)
[	O
ii	int
++	O
]	O
=	O
0.0	int
;	O
}	O
}	O
for	O
(	O
ii	int
=	O
0	int
;	O
ii	int
<	O
GSL_SF_MATHIEU_COEFF	int
;	O
ii	int
++	O
)	O
coeff	array(double)
[	O
ii	int
]	O
/=	O
sum	double
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
