int	O
mu_is_proto	(*(char))->(int)
(	O
const	O
char	O
*	O
p	*(char)
)	O
{	O
if	O
(	O
*	O
p	*(char)
==	O
'|'	O
)	O
return	O
1	int
;	O
for	O
(	O
;	O
*	O
p	*(char)
&&	O
*	O
p	*(char)
!=	O
'/'	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
*	O
p	*(char)
==	O
':'	O
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_mh_delim	(*(char))->(int)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
'-'	O
)	O
{	O
for	O
(	O
;	O
*	O
str	*(char)
==	O
'-'	O
;	O
str	*(char)
++	O
)	O
;	O
for	O
(	O
;	O
*	O
str	*(char)
==	O
' '	O
||	O
*	O
str	*(char)
==	O
'\t'	O
;	O
str	*(char)
++	O
)	O
;	O
}	O
return	O
str	*(char)
[	O
0	int
]	O
==	O
'\n'	O
;	O
}	O
int	O
mutil_parse_field_map	(*(char),*(*(struct)),*(int))->(int)
(	O
const	O
char	O
*	O
map	*(char)
,	O
mu_assoc_t	*(struct)
*	O
passoc_tab	*(*(struct))
,	O
int	O
*	O
perr	*(int)
)	O
{	O
int	O
rc	int
;	O
int	O
i	int
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
mu_assoc_t	*(struct)
assoc_tab	*(struct)
=	O
NULL	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
":"	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
map	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot split line `%s': %s"	*(char)
)	O
,	O
map	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
return	O
errno	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
;	O
i	int
++	O
)	O
{	O
char	O
*	O
tok	*(char)
=	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
i	int
]	O
;	O
char	O
*	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
tok	*(char)
,	O
'='	O
)	O
;	O
char	O
*	O
pptr	*(char)
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
rc	int
=	O
EINVAL	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
assoc_tab	*(struct)
)	O
{	O
rc	int
=	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
assoc_tab	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
mu_assoc_set_destroy_item	(*(struct),*((*(void))->(void)))->(int)
(	O
assoc_tab	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
*	O
passoc_tab	*(*(struct))
=	O
assoc_tab	*(struct)
;	O
}	O
*	O
p	*(char)
++	O
=	O
0	int
;	O
pptr	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
pptr	*(char)
)	O
{	O
rc	int
=	O
errno	O
;	O
break	O
;	O
}	O
rc	int
=	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc_tab	*(struct)
,	O
tok	*(char)
,	O
pptr	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
p	*(char)
)	O
;	O
break	O
;	O
}	O
}	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
if	O
(	O
rc	int
&&	O
perr	*(int)
)	O
*	O
perr	*(int)
=	O
i	int
;	O
return	O
rc	int
;	O
}	O
int	O
mu_stream_flags_to_mode	(int,int)->(int)
(	O
int	O
flags	int
,	O
int	O
isdir	int
)	O
{	O
int	O
mode	int
=	O
0	int
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IRGRP	int
)	O
mode	int
|=	O
S_IRGRP	O
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IWGRP	int
)	O
mode	int
|=	O
S_IWGRP	O
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IROTH	int
)	O
mode	int
|=	O
S_IROTH	O
;	O
if	O
(	O
flags	int
&	O
MU_STREAM_IWOTH	int
)	O
mode	int
|=	O
S_IWOTH	O
;	O
if	O
(	O
isdir	int
)	O
{	O
if	O
(	O
mode	int
&	O
(	O
S_IRGRP	O
|	O
S_IWGRP	O
)	O
)	O
mode	int
|=	O
S_IXGRP	O
;	O
if	O
(	O
mode	int
&	O
(	O
S_IROTH	O
|	O
S_IWOTH	O
)	O
)	O
mode	int
|=	O
S_IXOTH	O
;	O
}	O
return	O
mode	int
;	O
}	O
