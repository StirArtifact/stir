gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
gsl_root_fsolver_alloc	(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))))->(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))
(	O
const	O
gsl_root_fsolver_type	struct(*(char),long,*((*(void),*(struct(*`,*`)),*(double),double,double)->(int)),*((*(void),*(struct(*`,*`)),*(double),*(double),*(double))->(int)))
*	O
T	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
)	O
{	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
=	O
(	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
)	O
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
==	O
0	int
)	O
{	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for root solver struct"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
=	O
malloc	(long)->(*(void))
(	O
T	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
size	long
)	O
;	O
if	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
;	O
GSL_ERROR_VAL	O
(	O
"failed to allocate space for root solver state"	*(char)
,	O
GSL_ENOMEM	int
,	O
0	int
)	O
;	O
}	O
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
=	O
T	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
function	*((double,*(void))->(double))
=	O
NULL	O
;	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
;	O
}	O
int	O
gsl_root_fsolver_set	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))),*(struct(*((double,*`)->(double)),*(void))),double,double)->(int)
(	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
,	O
gsl_function	struct(*((double,*(void))->(double)),*(void))
*	O
f	*(double)
,	O
double	O
x_lower	double
,	O
double	O
x_upper	double
)	O
{	O
if	O
(	O
x_lower	double
>	O
x_upper	double
)	O
{	O
GSL_ERROR	O
(	O
"invalid interval (lower > upper)"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
function	*((double,*(void))->(double))
=	O
f	*(double)
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
=	O
0.5	int
*	O
(	O
x_lower	double
+	O
x_upper	double
)	O
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
x_lower	double
=	O
x_lower	double
;	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
x_upper	double
=	O
x_upper	double
;	O
return	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
set	*((*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),double,double)->(int))
)	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
,	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
function	*((double,*(void))->(double))
,	O
&	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
)	O
,	O
x_lower	double
,	O
x_upper	double
)	O
;	O
}	O
int	O
gsl_root_fsolver_iterate	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))->(int)
(	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
iterate	*((*(void),*(struct(*((double,*`)->(double)),*(void))),*(double),*(double),*(double))->(int))
)	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
,	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
function	*((double,*(void))->(double))
,	O
&	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
)	O
,	O
&	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
x_lower	double
)	O
,	O
&	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
x_upper	double
)	O
)	O
;	O
}	O
void	O
gsl_root_fsolver_free	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))->(void)
(	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
RETURN_IF_NULL	O
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
state	*(int)
)	O
;	O
free	(*(void))->(void)
(	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
;	O
}	O
const	O
char	O
*	O
gsl_root_fsolver_name	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))->(*(char))
(	O
const	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
type	*(struct(*(char),long,*((*(void),*(struct`),*(double),double,double)->(int)),*((*(void),*(struct`),*(double),*(double),*(double))->(int))))
->	O
name	*(char)
;	O
}	O
double	O
gsl_root_fsolver_root	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))->(double)
(	O
const	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
root	*(double)
;	O
}	O
double	O
gsl_root_fsolver_x_lower	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))->(double)
(	O
const	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
x_lower	double
;	O
}	O
double	O
gsl_root_fsolver_x_upper	(*(struct(*(struct(*`,long,*`,*`)),*(struct(*`,*`)),double,double,double,*(void))))->(double)
(	O
const	O
gsl_root_fsolver	struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void))
*	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
)	O
{	O
return	O
s	*(struct(*(struct(*(char),long,*((*`,*`,*`,double,double)->(int)),*((*`,*`,*`,*`,*`)->(int)))),*(struct(*((double,*`)->(double)),*(void))),double,double,double,*(void)))
->	O
x_upper	double
;	O
}	O
