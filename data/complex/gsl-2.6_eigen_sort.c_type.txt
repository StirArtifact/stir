static	O
int	O
complex_less	(struct(array(double)),struct(array(double)))->(int)
(	O
gsl_complex	struct(array(double))
a	double
,	O
gsl_complex	struct(array(double))
b	double
)	O
{	O
return	O
gsl_fcmp	(double,double,double)->(int)
(	O
GSL_REAL	O
(	O
a	double
)	O
,	O
GSL_REAL	O
(	O
b	double
)	O
,	O
GSL_DBL_EPSILON	int
)	O
==	O
0	int
?	O
GSL_IMAG	O
(	O
a	double
)	O
<	O
GSL_IMAG	O
(	O
b	double
)	O
:	O
GSL_REAL	O
(	O
a	double
)	O
<	O
GSL_REAL	O
(	O
b	double
)	O
;	O
}	O
int	O
gsl_eigen_symmv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_sort_t	enum(int,int,int,int)
sort_type	enum(int,int,int,int)
)	O
{	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
double	O
ek	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
double	O
ej	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
switch	O
(	O
sort_type	enum(int,int,int,int)
)	O
{	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
test	int
=	O
(	O
ej	double
<	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
test	int
=	O
(	O
ej	double
>	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
fabs	(double)->(double)
(	O
ej	double
)	O
<	O
fabs	(double)->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
fabs	(double)->(double)
(	O
ej	double
)	O
>	O
fabs	(double)->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"unrecognized sort type"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_swap_elements	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
gsl_matrix_swap_columns	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_hermv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_sort_t	enum(int,int,int,int)
sort_type	enum(int,int,int,int)
)	O
{	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
double	O
ek	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
double	O
ej	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
switch	O
(	O
sort_type	enum(int,int,int,int)
)	O
{	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
test	int
=	O
(	O
ej	double
<	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
test	int
=	O
(	O
ej	double
>	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
fabs	(double)->(double)
(	O
ej	double
)	O
<	O
fabs	(double)->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
fabs	(double)->(double)
(	O
ej	double
)	O
>	O
fabs	(double)->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"unrecognized sort type"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_swap_elements	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
gsl_matrix_complex_swap_columns	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_nonsymmv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_sort_t	enum(int,int,int,int)
sort_type	enum(int,int,int,int)
)	O
{	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
&&	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
&&	O
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
gsl_complex	struct(array(double))
ek	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
gsl_complex	struct(array(double))
ej	double
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
switch	O
(	O
sort_type	enum(int,int,int,int)
)	O
{	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ej	double
)	O
<	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ej	double
)	O
>	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
test	int
=	O
complex_less	(struct(array(double)),struct(array(double)))->(int)
(	O
ej	double
,	O
ek	double
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
test	int
=	O
complex_less	(struct(array(double)),struct(array(double)))->(int)
(	O
ek	double
,	O
ej	double
)	O
;	O
break	O
;	O
default	O
:	O
GSL_ERROR	O
(	O
"invalid sort type"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_complex_swap_elements	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_complex_swap_columns	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_eigen_gensymmv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_sort_t	enum(int,int,int,int)
sort_type	enum(int,int,int,int)
)	O
{	O
int	O
s	*(float)
;	O
s	*(float)
=	O
gsl_eigen_symmv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
sort_type	enum(int,int,int,int)
)	O
;	O
return	O
s	*(float)
;	O
}	O
int	O
gsl_eigen_genhermv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_sort_t	enum(int,int,int,int)
sort_type	enum(int,int,int,int)
)	O
{	O
int	O
s	*(float)
;	O
s	*(float)
=	O
gsl_eigen_hermv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
eval	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
sort_type	enum(int,int,int,int)
)	O
;	O
return	O
s	*(float)
;	O
}	O
int	O
gsl_eigen_genv_sort	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),enum(int,int,int,int))->(int)
(	O
gsl_vector_complex	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
alpha	long double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
beta	long double
,	O
gsl_matrix_complex	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_eigen_sort_t	enum(int,int,int,int)
sort_type	enum(int,int,int,int)
)	O
{	O
if	O
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvector matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
alpha	long double
->	O
size	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
beta	long double
->	O
size	long
!=	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
)	O
{	O
GSL_ERROR	O
(	O
"eigenvalues must match eigenvector matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
const	O
size_t	long
N	int
=	O
alpha	long double
->	O
size	long
;	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
-	O
1	int
;	O
i	long
++	O
)	O
{	O
size_t	long
j	long
;	O
size_t	long
k	long
=	O
i	long
;	O
gsl_complex	struct(array(double))
ak	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
alpha	long double
,	O
i	long
)	O
;	O
double	O
bk	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
beta	long double
,	O
i	long
)	O
;	O
gsl_complex	struct(array(double))
ek	double
;	O
if	O
(	O
bk	double
<	O
GSL_DBL_EPSILON	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
ek	double
,	O
GSL_SIGN	O
(	O
GSL_REAL	O
(	O
ak	struct(array(double))
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
,	O
GSL_SIGN	O
(	O
GSL_IMAG	O
(	O
ak	struct(array(double))
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
)	O
;	O
}	O
else	O
ek	double
=	O
gsl_complex_div_real	(struct(array(double)),double)->(struct(array(double)))
(	O
ak	struct(array(double))
,	O
bk	double
)	O
;	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
N	int
;	O
j	long
++	O
)	O
{	O
int	O
test	int
;	O
const	O
gsl_complex	struct(array(double))
aj	struct(array(double))
=	O
gsl_vector_complex_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(struct(array(double)))
(	O
alpha	long double
,	O
j	long
)	O
;	O
double	O
bj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
beta	long double
,	O
j	long
)	O
;	O
gsl_complex	struct(array(double))
ej	double
;	O
if	O
(	O
bj	double
<	O
GSL_DBL_EPSILON	int
)	O
{	O
GSL_SET_COMPLEX	O
(	O
&	O
ej	double
,	O
GSL_SIGN	O
(	O
GSL_REAL	O
(	O
aj	struct(array(double))
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
,	O
GSL_SIGN	O
(	O
GSL_IMAG	O
(	O
aj	struct(array(double))
)	O
)	O
?	O
GSL_POSINF	O
:	O
GSL_NEGINF	O
)	O
;	O
}	O
else	O
ej	double
=	O
gsl_complex_div_real	(struct(array(double)),double)->(struct(array(double)))
(	O
aj	struct(array(double))
,	O
bj	double
)	O
;	O
switch	O
(	O
sort_type	enum(int,int,int,int)
)	O
{	O
case	O
GSL_EIGEN_SORT_ABS_ASC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ej	double
)	O
<	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_ABS_DESC	int
:	O
test	int
=	O
(	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ej	double
)	O
>	O
gsl_complex_abs	(struct(array(double)))->(double)
(	O
ek	double
)	O
)	O
;	O
break	O
;	O
case	O
GSL_EIGEN_SORT_VAL_ASC	int
:	O
case	O
GSL_EIGEN_SORT_VAL_DESC	int
:	O
default	O
:	O
GSL_ERROR	O
(	O
"invalid sort type"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
test	int
)	O
{	O
k	long
=	O
j	long
;	O
ek	double
=	O
ej	double
;	O
}	O
}	O
if	O
(	O
k	long
!=	O
i	long
)	O
{	O
gsl_vector_complex_swap_elements	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
alpha	long double
,	O
i	long
,	O
k	long
)	O
;	O
gsl_vector_swap_elements	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
beta	long double
,	O
i	long
,	O
k	long
)	O
;	O
gsl_matrix_complex_swap_columns	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(int)
(	O
evec	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
k	long
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
