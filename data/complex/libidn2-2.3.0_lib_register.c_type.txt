int	O
idn2_register_u8	(*(char),*(char),*(*(char)),int)->(int)
(	O
const	O
uint8_t	char
*	O
ulabel	*(char)
,	O
const	O
uint8_t	char
*	O
alabel	*(char)
,	O
uint8_t	char
*	O
*	O
insertname	*(*(char))
,	O
int	O
flags	int
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
ulabel	*(char)
==	O
NULL	O
&&	O
alabel	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
insertname	*(*(char))
)	O
*	O
insertname	*(*(char))
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
if	O
(	O
alabel	*(char)
)	O
{	O
size_t	long
alabellen	long
=	O
strlen	(*(char))->(long)
(	O
(	O
char	O
*	O
)	O
alabel	*(char)
)	O
,	O
u32len	long
=	O
IDN2_LABEL_MAX_LENGTH	int
*	O
4	int
;	O
uint32_t	int
u32	array(int)
[	O
IDN2_DOMAIN_MAX_LENGTH	int
*	O
4	int
]	O
;	O
uint8_t	char
*	O
tmp	*(char)
;	O
uint8_t	char
u8	array(char)
[	O
IDN2_DOMAIN_MAX_LENGTH	int
+	O
1	int
]	O
;	O
size_t	long
u8len	long
;	O
if	O
(	O
alabellen	long
>	O
IDN2_LABEL_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_LABEL	int
;	O
if	O
(	O
alabellen	long
<=	O
4	int
)	O
return	O
IDN2_INVALID_ALABEL	int
;	O
if	O
(	O
alabel	*(char)
[	O
0	int
]	O
!=	O
'x'	O
||	O
alabel	*(char)
[	O
1	int
]	O
!=	O
'n'	O
||	O
alabel	*(char)
[	O
2	int
]	O
!=	O
'-'	O
||	O
alabel	*(char)
[	O
3	int
]	O
!=	O
'-'	O
)	O
return	O
IDN2_INVALID_ALABEL	int
;	O
if	O
(	O
!	O
_idn2_ascii_p	(*(char),long)->(bool)
(	O
alabel	*(char)
,	O
alabellen	long
)	O
)	O
return	O
IDN2_INVALID_ALABEL	int
;	O
rc	int
=	O
_idn2_punycode_decode_internal	(long,array(char),*(long),array(int))->(int)
(	O
alabellen	long
-	O
4	int
,	O
(	O
char	O
*	O
)	O
alabel	*(char)
+	O
4	int
,	O
&	O
u32len	long
,	O
u32	array(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
u8len	long
=	O
sizeof	O
(	O
u8	array(char)
)	O
;	O
if	O
(	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
u32	array(int)
,	O
u32len	long
,	O
u8	array(char)
,	O
&	O
u8len	long
)	O
==	O
NULL	O
)	O
return	O
IDN2_ENCODING_ERROR	int
;	O
u8	array(char)
[	O
u8len	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
ulabel	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
ulabel	*(char)
,	O
(	O
char	O
*	O
)	O
u8	array(char)
)	O
!=	O
0	int
)	O
return	O
IDN2_UALABEL_MISMATCH	int
;	O
}	O
rc	int
=	O
idn2_register_u8	(*(char),*(char),*(*(char)),int)->(int)
(	O
u8	array(char)
,	O
NULL	O
,	O
&	O
tmp	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
rc	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
(	O
char	O
*	O
)	O
alabel	*(char)
,	O
(	O
char	O
*	O
)	O
tmp	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(char)
)	O
;	O
if	O
(	O
rc	int
!=	O
0	int
)	O
return	O
IDN2_UALABEL_MISMATCH	int
;	O
if	O
(	O
insertname	*(*(char))
)	O
{	O
uint8_t	char
*	O
m	*(char)
=	O
(	O
uint8_t	char
*	O
)	O
strdup	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
alabel	*(char)
)	O
;	O
if	O
(	O
!	O
m	*(char)
)	O
return	O
IDN2_MALLOC	int
;	O
*	O
insertname	*(*(char))
=	O
m	*(char)
;	O
}	O
}	O
else	O
{	O
size_t	long
ulabellen	long
=	O
u8_strlen	(*(char))->(long)
(	O
ulabel	*(char)
)	O
;	O
uint32_t	int
*	O
u32	array(int)
;	O
size_t	long
u32len	long
;	O
size_t	long
tmpl	long
;	O
uint8_t	char
tmp	*(char)
[	O
IDN2_LABEL_MAX_LENGTH	int
+	O
1	int
]	O
;	O
if	O
(	O
_idn2_ascii_p	(*(char),long)->(bool)
(	O
ulabel	*(char)
,	O
ulabellen	long
)	O
)	O
{	O
if	O
(	O
ulabellen	long
>	O
IDN2_LABEL_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_LABEL	int
;	O
if	O
(	O
insertname	*(*(char))
)	O
{	O
uint8_t	char
*	O
m	*(char)
=	O
(	O
uint8_t	char
*	O
)	O
strdup	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
ulabel	*(char)
)	O
;	O
if	O
(	O
!	O
m	*(char)
)	O
return	O
IDN2_MALLOC	int
;	O
*	O
insertname	*(*(char))
=	O
m	*(char)
;	O
}	O
return	O
IDN2_OK	int
;	O
}	O
rc	int
=	O
_idn2_u8_to_u32_nfc	(*(char),long,*(*(int)),*(long),int)->(int)
(	O
ulabel	*(char)
,	O
ulabellen	long
,	O
&	O
u32	array(int)
,	O
&	O
u32len	long
,	O
flags	int
&	O
IDN2_NFC_INPUT	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
rc	int
=	O
_idn2_label_test	(int,*(int),long)->(int)
(	O
TEST_NFC	int
|	O
TEST_DISALLOWED	int
|	O
TEST_UNASSIGNED	int
|	O
TEST_2HYPHEN	int
|	O
TEST_HYPHEN_STARTEND	int
|	O
TEST_LEADING_COMBINING	int
|	O
TEST_CONTEXTJ_RULE	int
|	O
TEST_CONTEXTO_RULE	int
|	O
TEST_BIDI	int
,	O
u32	array(int)
,	O
u32len	long
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
{	O
free	(*(void))->(void)
(	O
u32	array(int)
)	O
;	O
return	O
rc	int
;	O
}	O
tmp	*(char)
[	O
0	int
]	O
=	O
'x'	O
;	O
tmp	*(char)
[	O
1	int
]	O
=	O
'n'	O
;	O
tmp	*(char)
[	O
2	int
]	O
=	O
'-'	O
;	O
tmp	*(char)
[	O
3	int
]	O
=	O
'-'	O
;	O
tmpl	long
=	O
IDN2_LABEL_MAX_LENGTH	int
-	O
4	int
;	O
rc	int
=	O
_idn2_punycode_encode_internal	(long,array(int),*(long),array(char))->(int)
(	O
u32len	long
,	O
u32	array(int)
,	O
&	O
tmpl	long
,	O
(	O
char	O
*	O
)	O
tmp	*(char)
+	O
4	int
)	O
;	O
free	(*(void))->(void)
(	O
u32	array(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
tmp	*(char)
[	O
4	int
+	O
tmpl	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
insertname	*(*(char))
)	O
{	O
uint8_t	char
*	O
m	*(char)
=	O
(	O
uint8_t	char
*	O
)	O
strdup	(*(char))->(*(char))
(	O
(	O
char	O
*	O
)	O
tmp	*(char)
)	O
;	O
if	O
(	O
!	O
m	*(char)
)	O
return	O
IDN2_MALLOC	int
;	O
*	O
insertname	*(*(char))
=	O
m	*(char)
;	O
}	O
}	O
return	O
IDN2_OK	int
;	O
}	O
int	O
idn2_register_ul	(*(char),*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
ulabel	*(char)
,	O
const	O
char	O
*	O
alabel	*(char)
,	O
char	O
*	O
*	O
insertname	*(*(char))
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
utf8ulabel	*(char)
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
ulabel	*(char)
)	O
{	O
const	O
char	O
*	O
encoding	*(char)
=	O
locale_charset	()->(*(char))
(	O
)	O
;	O
utf8ulabel	*(char)
=	O
u8_strconv_from_encoding	(*(char),*(char),enum(int,int,int))->(*(char))
(	O
ulabel	*(char)
,	O
encoding	*(char)
,	O
iconveh_error	int
)	O
;	O
if	O
(	O
utf8ulabel	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ICONV_FAIL	int
;	O
}	O
}	O
rc	int
=	O
idn2_register_u8	(*(char),*(char),*(*(char)),int)->(int)
(	O
utf8ulabel	*(char)
,	O
(	O
const	O
uint8_t	char
*	O
)	O
alabel	*(char)
,	O
(	O
uint8_t	char
*	O
*	O
)	O
insertname	*(*(char))
,	O
flags	int
|	O
IDN2_NFC_INPUT	int
)	O
;	O
free	(*(void))->(void)
(	O
utf8ulabel	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
