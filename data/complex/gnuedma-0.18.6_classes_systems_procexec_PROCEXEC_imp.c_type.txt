typedef	O
struct	O
{	O
EUint32	long
Status	long
;	O
EUint32	long
pid	long
;	O
EUint32	long
fdR	long
;	O
EUint32	long
fdW	long
;	O
}	O
DtPROCEXEC	struct(long,long,long,long)
;	O
EUint32	long
EDMAPROC	O
PROCEXECRunZ	(int,*(char))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
cmd1	*(char)
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
EChar	char
*	O
argv	array(*(char))
[	O
20	int
]	O
;	O
EChar	char
cmd	array(char)
[	O
256	int
]	O
;	O
EUint32	long
i	int
,	O
n	long
;	O
EPChar	*(char)
p	*(char)
,	O
p1	*(char)
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
cmd	array(char)
,	O
cmd1	*(char)
,	O
256	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Building exec parameter array..."	*(char)
)	O
;	O
n	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(int)
(	O
cmd	array(char)
)	O
;	O
i	int
++	O
)	O
if	O
(	O
cmd	array(char)
[	O
i	int
]	O
==	O
' '	O
)	O
n	long
++	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"  %d parameters located..."	*(char)
,	O
n	long
+	O
1	int
)	O
;	O
p	*(char)
=	O
cmd	array(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
p1	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
' '	O
)	O
;	O
*	O
p1	*(char)
=	O
0	int
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Parameter isolated : %s"	*(char)
,	O
p	*(char)
)	O
;	O
argv	array(*(char))
[	O
i	int
]	O
=	O
p	*(char)
;	O
p	*(char)
=	O
p1	*(char)
+	O
1	int
;	O
}	O
argv	array(*(char))
[	O
n	long
]	O
=	O
p	*(char)
;	O
argv	array(*(char))
[	O
n	long
+	O
1	int
]	O
=	O
0	int
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Parameter Isolated : %s"	*(char)
,	O
p	*(char)
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Parameters added to parameter array..."	*(char)
)	O
;	O
m	*(struct(long,long,long,long))
->	O
pid	long
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
m	*(struct(long,long,long,long))
->	O
pid	long
==	O
0	int
)	O
{	O
if	O
(	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	array(*(char))
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
argv	array(*(char))
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Could not exec %s\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
m	*(struct(long,long,long,long))
->	O
Status	long
=	O
RUNNING	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECRunPipedZ	(int,*(char))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
cmd1	*(char)
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
EChar	char
*	O
argv	array(*(char))
[	O
20	int
]	O
;	O
EChar	char
cmd	array(char)
[	O
256	int
]	O
;	O
EUint32	long
i	int
,	O
n	long
;	O
EPChar	*(char)
p	*(char)
,	O
p1	*(char)
;	O
int	O
fd	array(int)
[	O
2	int
]	O
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
strncpy	(*(char),*(char),int)->(*(char))
(	O
cmd	array(char)
,	O
cmd1	*(char)
,	O
256	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Building exec parameter array..."	*(char)
)	O
;	O
n	long
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
strlen	(*(char))->(int)
(	O
cmd	array(char)
)	O
;	O
i	int
++	O
)	O
if	O
(	O
cmd	array(char)
[	O
i	int
]	O
==	O
' '	O
)	O
n	long
++	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"  %d parameters located..."	*(char)
,	O
n	long
+	O
1	int
)	O
;	O
p	*(char)
=	O
cmd	array(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	long
;	O
i	int
++	O
)	O
{	O
p1	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
' '	O
)	O
;	O
*	O
p1	*(char)
=	O
0	int
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Parameter isolated : %s"	*(char)
,	O
p	*(char)
)	O
;	O
argv	array(*(char))
[	O
i	int
]	O
=	O
p	*(char)
;	O
p	*(char)
=	O
p1	*(char)
+	O
1	int
;	O
}	O
argv	array(*(char))
[	O
n	long
]	O
=	O
p	*(char)
;	O
argv	array(*(char))
[	O
n	long
+	O
1	int
]	O
=	O
0	int
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Parameter Isolated : %s"	*(char)
,	O
p	*(char)
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Parameters added to parameter array..."	*(char)
)	O
;	O
if	O
(	O
pipe	(array(int))->(int)
(	O
fd	array(int)
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Can't create pipe\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
m	*(struct(long,long,long,long))
->	O
fdR	long
=	O
fd	array(int)
[	O
0	int
]	O
;	O
m	*(struct(long,long,long,long))
->	O
fdW	long
=	O
fd	array(int)
[	O
1	int
]	O
;	O
m	*(struct(long,long,long,long))
->	O
pid	long
=	O
fork	()->(int)
(	O
)	O
;	O
if	O
(	O
m	*(struct(long,long,long,long))
->	O
pid	long
==	O
0	int
)	O
{	O
dup2	(int,int)->(int)
(	O
fd	array(int)
[	O
1	int
]	O
,	O
STDOUT_FILENO	int
)	O
;	O
close	(int)->(int)
(	O
fd	array(int)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
execvp	(*(char),array(*(char)))->(int)
(	O
argv	array(*(char))
[	O
0	int
]	O
,	O
(	O
char	O
*	O
*	O
)	O
argv	array(*(char))
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Could not exec %s\n"	*(char)
,	O
argv	array(*(char))
[	O
0	int
]	O
)	O
;	O
}	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
m	*(struct(long,long,long,long))
->	O
Status	long
=	O
PIPED_PROCESS	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECWait	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
pid_t	int
p	*(char)
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
wait	(*(int))->(int)
(	O
&	O
p	*(char)
)	O
;	O
return	O
p	*(char)
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECGetMsgsZsS32	(int,*(char),*(long))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
msg	*(char)
,	O
EUint32	long
*	O
n	long
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
ESint32	int
r	int
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Ready for Retrieve data"	*(char)
)	O
;	O
if	O
(	O
m	*(struct(long,long,long,long))
->	O
Status	long
==	O
PIPED_PROCESS	int
)	O
r	int
=	O
read	(int,*(void),int)->(int)
(	O
m	*(struct(long,long,long,long))
->	O
fdR	long
,	O
msg	*(char)
,	O
*	O
n	long
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"%s"	*(char)
,	O
"Data retrieved from pipe"	*(char)
)	O
;	O
*	O
n	long
=	O
r	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECKill	(int)->(long)
(	O
OBJID	int
IdObj	int
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
pid_t	int
s	int
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
kill	(int,int)->(int)
(	O
m	*(struct(long,long,long,long))
->	O
pid	long
,	O
9	int
)	O
;	O
waitpid	(int,*(int),int)->(int)
(	O
m	*(struct(long,long,long,long))
->	O
pid	long
,	O
&	O
s	int
,	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECRunPiped2Z	(int,*(char))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
cmd1	*(char)
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"Running PIPED Process Type II : '%s'"	*(char)
,	O
cmd1	*(char)
)	O
;	O
if	O
(	O
(	O
m	*(struct(long,long,long,long))
->	O
fdR	long
=	O
(	O
EUint32	long
)	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))
(	O
cmd1	*(char)
,	O
"r"	*(char)
)	O
)	O
<	O
0	int
)	O
{	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
"popen Fails... Cannot execute command '%s'"	*(char)
,	O
cmd1	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
edma_printf_obj	(int,*(char))->(long)
(	O
IdObj	int
,	O
" -- Stream located : %d"	*(char)
,	O
m	*(struct(long,long,long,long))
->	O
fdR	long
)	O
;	O
m	*(struct(long,long,long,long))
->	O
Status	long
=	O
PIPED_PROCESS2	int
;	O
return	O
0	int
;	O
}	O
EUint32	long
EDMAPROC	O
PROCEXECGetMsg2sZsS32	(int,*(char),*(long))->(long)
(	O
OBJID	int
IdObj	int
,	O
EPChar	*(char)
msg	*(char)
,	O
EUint32	long
*	O
n	long
)	O
{	O
DtPROCEXEC	struct(long,long,long,long)
*	O
m	*(struct(long,long,long,long))
;	O
EChar	char
*	O
r	int
;	O
m	*(struct(long,long,long,long))
=	O
(	O
DtPROCEXEC	struct(long,long,long,long)
*	O
)	O
edma_get_data_ref	(int)->(*(void))
(	O
IdObj	int
)	O
;	O
if	O
(	O
m	*(struct(long,long,long,long))
->	O
Status	long
==	O
PIPED_PROCESS2	int
)	O
r	int
=	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),int,int,long,short,char,array(char),*(void),long long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long long,*`,*`,*`,*`,int,int,array(char))),*(void),int,int,array(char))))->(*(char))
(	O
msg	*(char)
,	O
*	O
n	long
,	O
(	O
FILE	struct
*	O
)	O
m	*(struct(long,long,long,long))
->	O
fdR	long
)	O
;	O
if	O
(	O
r	int
==	O
NULL	O
)	O
*	O
n	long
=	O
0	int
;	O
else	O
*	O
n	long
=	O
strlen	(*(char))->(int)
(	O
msg	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
