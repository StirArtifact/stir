static	O
void	O
encode_raw	(*(char),*(char),long,*(char))->(void)
(	O
const	O
char	O
*	O
alphabet	*(char)
,	O
char	O
*	O
dst	*(char)
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
src	*(char)
)	O
{	O
const	O
uint8_t	char
*	O
in	*(char)
=	O
src	*(char)
+	O
length	long
;	O
char	O
*	O
out	*(char)
=	O
dst	*(char)
+	O
BASE64_ENCODE_RAW_LENGTH	O
(	O
length	long
)	O
;	O
unsigned	O
left_over	int
=	O
length	long
%	O
3	int
;	O
if	O
(	O
left_over	int
)	O
{	O
in	*(char)
-=	O
left_over	int
;	O
*	O
--	O
out	*(char)
=	O
'='	O
;	O
switch	O
(	O
left_over	int
)	O
{	O
case	O
1	int
:	O
*	O
--	O
out	*(char)
=	O
'='	O
;	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
in	*(char)
[	O
0	int
]	O
<<	O
4	int
)	O
)	O
;	O
break	O
;	O
case	O
2	int
:	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
in	*(char)
[	O
1	int
]	O
<<	O
2	int
)	O
)	O
;	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
(	O
in	*(char)
[	O
0	int
]	O
<<	O
4	int
)	O
|	O
(	O
in	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
)	O
)	O
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
in	*(char)
[	O
0	int
]	O
>>	O
2	int
)	O
)	O
;	O
}	O
while	O
(	O
in	*(char)
>	O
src	*(char)
)	O
{	O
in	*(char)
-=	O
3	int
;	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
in	*(char)
[	O
2	int
]	O
)	O
)	O
;	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
(	O
in	*(char)
[	O
1	int
]	O
<<	O
2	int
)	O
|	O
(	O
in	*(char)
[	O
2	int
]	O
>>	O
6	int
)	O
)	O
)	O
;	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
(	O
in	*(char)
[	O
0	int
]	O
<<	O
4	int
)	O
|	O
(	O
in	*(char)
[	O
1	int
]	O
>>	O
4	int
)	O
)	O
)	O
;	O
*	O
--	O
out	*(char)
=	O
ENCODE	O
(	O
alphabet	*(char)
,	O
(	O
in	*(char)
[	O
0	int
]	O
>>	O
2	int
)	O
)	O
;	O
}	O
assert	O
(	O
in	*(char)
==	O
src	*(char)
)	O
;	O
assert	O
(	O
out	*(char)
==	O
dst	*(char)
)	O
;	O
}	O
static	O
const	O
char	O
base64_encode_table	array(char)
[	O
64	int
]	O
=	O
"ABCDEFGHIJKLMNOPQRSTUVWXYZ"	*(char)
"abcdefghijklmnopqrstuvwxyz"	*(char)
"0123456789+/"	*(char)
;	O
void	O
base64_encode_raw	O
(	O
char	O
*	O
dst	*(char)
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
src	*(char)
)	O
{	O
encode_raw	(*(char),*(char),long,*(char))->(void)
(	O
base64_encode_table	array(char)
,	O
dst	*(char)
,	O
length	long
,	O
src	*(char)
)	O
;	O
}	O
void	O
base64_encode_group	O
(	O
char	O
*	O
dst	*(char)
,	O
uint32_t	int
group	int
)	O
{	O
*	O
dst	*(char)
++	O
=	O
ENCODE	O
(	O
base64_encode_table	array(char)
,	O
(	O
group	int
>>	O
18	int
)	O
)	O
;	O
*	O
dst	*(char)
++	O
=	O
ENCODE	O
(	O
base64_encode_table	array(char)
,	O
(	O
group	int
>>	O
12	int
)	O
)	O
;	O
*	O
dst	*(char)
++	O
=	O
ENCODE	O
(	O
base64_encode_table	array(char)
,	O
(	O
group	int
>>	O
6	int
)	O
)	O
;	O
*	O
dst	*(char)
++	O
=	O
ENCODE	O
(	O
base64_encode_table	array(char)
,	O
group	int
)	O
;	O
}	O
void	O
base64_encode_init	O
(	O
struct	O
base64_encode_ctx	struct(*(char),short,char)
*	O
ctx	*(void)
)	O
{	O
ctx	*(void)
->	O
word	short
=	O
ctx	*(void)
->	O
bits	char
=	O
0	int
;	O
ctx	*(void)
->	O
alphabet	*(char)
=	O
base64_encode_table	array(char)
;	O
}	O
size_t	long
base64_encode_single	O
(	O
struct	O
base64_encode_ctx	struct(*(char),short,char)
*	O
ctx	*(void)
,	O
char	O
*	O
dst	*(char)
,	O
uint8_t	char
src	*(char)
)	O
{	O
unsigned	O
done	int
=	O
0	int
;	O
unsigned	O
word	short
=	O
ctx	*(void)
->	O
word	short
<<	O
8	int
|	O
src	*(char)
;	O
unsigned	O
bits	char
=	O
ctx	*(void)
->	O
bits	char
+	O
8	int
;	O
while	O
(	O
bits	char
>=	O
6	int
)	O
{	O
bits	char
-=	O
6	int
;	O
dst	*(char)
[	O
done	int
++	O
]	O
=	O
ENCODE	O
(	O
ctx	*(void)
->	O
alphabet	*(char)
,	O
(	O
word	short
>>	O
bits	char
)	O
)	O
;	O
}	O
ctx	*(void)
->	O
bits	char
=	O
bits	char
;	O
ctx	*(void)
->	O
word	short
=	O
word	short
;	O
assert	O
(	O
done	int
<=	O
2	int
)	O
;	O
return	O
done	int
;	O
}	O
size_t	long
base64_encode_update	O
(	O
struct	O
base64_encode_ctx	struct(*(char),short,char)
*	O
ctx	*(void)
,	O
char	O
*	O
dst	*(char)
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
src	*(char)
)	O
{	O
size_t	long
done	int
=	O
0	int
;	O
size_t	long
left	long
=	O
length	long
;	O
unsigned	O
left_over	int
;	O
size_t	long
bulk	long
;	O
while	O
(	O
ctx	*(void)
->	O
bits	char
&&	O
left	long
)	O
{	O
left	long
--	O
;	O
done	int
+=	O
base64_encode_single	O
(	O
ctx	*(void)
,	O
dst	*(char)
+	O
done	int
,	O
*	O
src	*(char)
++	O
)	O
;	O
}	O
left_over	int
=	O
left	long
%	O
3	int
;	O
bulk	long
=	O
left	long
-	O
left_over	int
;	O
if	O
(	O
bulk	long
)	O
{	O
assert	O
(	O
!	O
(	O
bulk	long
%	O
3	int
)	O
)	O
;	O
encode_raw	(*(char),*(char),long,*(char))->(void)
(	O
ctx	*(void)
->	O
alphabet	*(char)
,	O
dst	*(char)
+	O
done	int
,	O
bulk	long
,	O
src	*(char)
)	O
;	O
done	int
+=	O
BASE64_ENCODE_RAW_LENGTH	O
(	O
bulk	long
)	O
;	O
src	*(char)
+=	O
bulk	long
;	O
left	long
=	O
left_over	int
;	O
}	O
while	O
(	O
left	long
)	O
{	O
left	long
--	O
;	O
done	int
+=	O
base64_encode_single	O
(	O
ctx	*(void)
,	O
dst	*(char)
+	O
done	int
,	O
*	O
src	*(char)
++	O
)	O
;	O
}	O
assert	O
(	O
done	int
<=	O
BASE64_ENCODE_LENGTH	O
(	O
length	long
)	O
)	O
;	O
return	O
done	int
;	O
}	O
size_t	long
base64_encode_final	O
(	O
struct	O
base64_encode_ctx	struct(*(char),short,char)
*	O
ctx	*(void)
,	O
char	O
*	O
dst	*(char)
)	O
{	O
unsigned	O
done	int
=	O
0	int
;	O
unsigned	O
bits	char
=	O
ctx	*(void)
->	O
bits	char
;	O
if	O
(	O
bits	char
)	O
{	O
dst	*(char)
[	O
done	int
++	O
]	O
=	O
ENCODE	O
(	O
ctx	*(void)
->	O
alphabet	*(char)
,	O
(	O
ctx	*(void)
->	O
word	short
<<	O
(	O
6	int
-	O
ctx	*(void)
->	O
bits	char
)	O
)	O
)	O
;	O
for	O
(	O
;	O
bits	char
<	O
6	int
;	O
bits	char
+=	O
2	int
)	O
dst	*(char)
[	O
done	int
++	O
]	O
=	O
'='	O
;	O
ctx	*(void)
->	O
bits	char
=	O
0	int
;	O
}	O
assert	O
(	O
done	int
<=	O
BASE64_ENCODE_FINAL_LENGTH	int
)	O
;	O
return	O
done	int
;	O
}	O
