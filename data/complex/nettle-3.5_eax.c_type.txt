static	O
void	O
omac_init	(*(union(array(char),array(long),array(long))),int)->(void)
(	O
union	O
nettle_block16	union(array(char),array(long),array(long))
*	O
state	*(int)
,	O
unsigned	O
t	int
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
state	*(int)
->	O
b	array(char)
,	O
0	int
,	O
EAX_BLOCK_SIZE	int
-	O
1	int
)	O
;	O
state	*(int)
->	O
b	array(char)
[	O
EAX_BLOCK_SIZE	int
-	O
1	int
]	O
=	O
t	int
;	O
}	O
static	O
void	O
block16_xor	(*(union(array(char),array(long),array(long))),*(union(array(char),array(long),array(long))))->(void)
(	O
union	O
nettle_block16	union(array(char),array(long),array(long))
*	O
dst	*(char)
,	O
const	O
union	O
nettle_block16	union(array(char),array(long),array(long))
*	O
src	*(char)
)	O
{	O
dst	*(char)
->	O
w	array(long)
[	O
0	int
]	O
^=	O
src	*(char)
->	O
w	array(long)
[	O
0	int
]	O
;	O
dst	*(char)
->	O
w	array(long)
[	O
1	int
]	O
^=	O
src	*(char)
->	O
w	array(long)
[	O
1	int
]	O
;	O
}	O
static	O
void	O
omac_update	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)),long,*(char))->(void)
(	O
union	O
nettle_block16	union(array(char),array(long),array(long))
*	O
state	*(int)
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
size_t	long
length	long
,	O
const	O
uint8_t	char
*	O
data	*(char)
)	O
{	O
for	O
(	O
;	O
length	long
>=	O
EAX_BLOCK_SIZE	int
;	O
length	long
-=	O
EAX_BLOCK_SIZE	int
,	O
data	*(char)
+=	O
EAX_BLOCK_SIZE	int
)	O
{	O
f	*((*(void),long,*(char),*(char))->(void))
(	O
cipher	*(void)
,	O
EAX_BLOCK_SIZE	int
,	O
state	*(int)
->	O
b	array(char)
,	O
state	*(int)
->	O
b	array(char)
)	O
;	O
memxor	O
(	O
state	*(int)
->	O
b	array(char)
,	O
data	*(char)
,	O
EAX_BLOCK_SIZE	int
)	O
;	O
}	O
if	O
(	O
length	long
>	O
0	int
)	O
{	O
f	*((*(void),long,*(char),*(char))->(void))
(	O
cipher	*(void)
,	O
EAX_BLOCK_SIZE	int
,	O
state	*(int)
->	O
b	array(char)
,	O
state	*(int)
->	O
b	array(char)
)	O
;	O
memxor	O
(	O
state	*(int)
->	O
b	array(char)
,	O
data	*(char)
,	O
length	long
)	O
;	O
state	*(int)
->	O
b	array(char)
[	O
length	long
]	O
^=	O
0x80	int
;	O
block16_xor	(*(union(array(char),array(long),array(long))),*(union(array(char),array(long),array(long))))->(void)
(	O
state	*(int)
,	O
&	O
key	*(char)
->	O
pad_partial	union(array(char),array(long),array(long))
)	O
;	O
}	O
}	O
static	O
void	O
omac_final	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)))->(void)
(	O
union	O
nettle_block16	union(array(char),array(long),array(long))
*	O
state	*(int)
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
)	O
{	O
block16_xor	(*(union(array(char),array(long),array(long))),*(union(array(char),array(long),array(long))))->(void)
(	O
state	*(int)
,	O
&	O
key	*(char)
->	O
pad_block	union(array(char),array(long),array(long))
)	O
;	O
f	*((*(void),long,*(char),*(char))->(void))
(	O
cipher	*(void)
,	O
EAX_BLOCK_SIZE	int
,	O
state	*(int)
->	O
b	array(char)
,	O
state	*(int)
->	O
b	array(char)
)	O
;	O
}	O
static	O
void	O
gf2_double	(*(char),*(char))->(void)
(	O
uint8_t	char
*	O
r	*(char)
,	O
const	O
uint8_t	char
*	O
a	*(void)
)	O
{	O
unsigned	O
high	int
=	O
-	O
(	O
a	*(void)
[	O
0	int
]	O
>>	O
7	int
)	O
;	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
EAX_BLOCK_SIZE	int
-	O
1	int
;	O
i	int
++	O
)	O
r	*(char)
[	O
i	int
]	O
=	O
(	O
a	*(void)
[	O
i	int
]	O
<<	O
1	int
)	O
+	O
(	O
a	*(void)
[	O
i	int
+	O
1	int
]	O
>>	O
7	int
)	O
;	O
r	*(char)
[	O
EAX_BLOCK_SIZE	int
-	O
1	int
]	O
=	O
(	O
a	*(void)
[	O
EAX_BLOCK_SIZE	int
-	O
1	int
]	O
<<	O
1	int
)	O
^	O
(	O
high	int
&	O
0x87	int
)	O
;	O
}	O
void	O
eax_set_key	O
(	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
)	O
{	O
static	O
const	O
union	O
nettle_block16	union(array(char),array(long),array(long))
zero_block	union(array(char),array(long),array(long))
;	O
f	*((*(void),long,*(char),*(char))->(void))
(	O
cipher	*(void)
,	O
EAX_BLOCK_SIZE	int
,	O
key	*(char)
->	O
pad_block	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
zero_block	union(array(char),array(long),array(long))
.	O
b	array(char)
)	O
;	O
gf2_double	(*(char),*(char))->(void)
(	O
key	*(char)
->	O
pad_block	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
key	*(char)
->	O
pad_block	union(array(char),array(long),array(long))
.	O
b	array(char)
)	O
;	O
gf2_double	(*(char),*(char))->(void)
(	O
key	*(char)
->	O
pad_partial	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
key	*(char)
->	O
pad_block	union(array(char),array(long),array(long))
.	O
b	array(char)
)	O
;	O
block16_xor	(*(union(array(char),array(long),array(long))),*(union(array(char),array(long),array(long))))->(void)
(	O
&	O
key	*(char)
->	O
pad_partial	union(array(char),array(long),array(long))
,	O
&	O
key	*(char)
->	O
pad_block	union(array(char),array(long),array(long))
)	O
;	O
}	O
void	O
eax_set_nonce	O
(	O
struct	O
eax_ctx	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
size_t	long
nonce_length	long
,	O
const	O
uint8_t	char
*	O
nonce	*(char)
)	O
{	O
omac_init	(*(union(array(char),array(long),array(long))),int)->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_nonce	union(array(char),array(long),array(long))
,	O
0	int
)	O
;	O
omac_update	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)),long,*(char))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_nonce	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
nonce_length	long
,	O
nonce	*(char)
)	O
;	O
omac_final	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_nonce	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
ctr	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_nonce	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
EAX_BLOCK_SIZE	int
)	O
;	O
omac_init	(*(union(array(char),array(long),array(long))),int)->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_data	union(array(char),array(long),array(long))
,	O
1	int
)	O
;	O
omac_init	(*(union(array(char),array(long),array(long))),int)->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_message	union(array(char),array(long),array(long))
,	O
2	int
)	O
;	O
}	O
void	O
eax_update	O
(	O
struct	O
eax_ctx	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
size_t	long
data_length	long
,	O
const	O
uint8_t	char
*	O
data	*(char)
)	O
{	O
omac_update	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)),long,*(char))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_data	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
data_length	long
,	O
data	*(char)
)	O
;	O
}	O
void	O
eax_encrypt	O
(	O
struct	O
eax_ctx	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	*(char)
,	O
const	O
uint8_t	char
*	O
src	*(char)
)	O
{	O
ctr_crypt	O
(	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
EAX_BLOCK_SIZE	int
,	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
ctr	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
length	long
,	O
dst	*(char)
,	O
src	*(char)
)	O
;	O
omac_update	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)),long,*(char))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_message	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
length	long
,	O
dst	*(char)
)	O
;	O
}	O
void	O
eax_decrypt	O
(	O
struct	O
eax_ctx	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
dst	*(char)
,	O
const	O
uint8_t	char
*	O
src	*(char)
)	O
{	O
omac_update	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)),long,*(char))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_message	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
length	long
,	O
src	*(char)
)	O
;	O
ctr_crypt	O
(	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
EAX_BLOCK_SIZE	int
,	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
ctr	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
length	long
,	O
dst	*(char)
,	O
src	*(char)
)	O
;	O
}	O
void	O
eax_digest	O
(	O
struct	O
eax_ctx	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
,	O
const	O
struct	O
eax_key	struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))
*	O
key	*(char)
,	O
const	O
void	O
*	O
cipher	*(void)
,	O
nettle_cipher_func	(*(void),long,*(char),*(char))->(void)
*	O
f	*((*(void),long,*(char),*(char))->(void))
,	O
size_t	long
length	long
,	O
uint8_t	char
*	O
digest	*(char)
)	O
{	O
assert	O
(	O
length	long
>	O
0	int
)	O
;	O
assert	O
(	O
length	long
<=	O
EAX_BLOCK_SIZE	int
)	O
;	O
omac_final	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_data	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
)	O
;	O
omac_final	(*(union(array(char),array(long),array(long))),*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)))),*(void),*((*(void),long,*(char),*(char))->(void)))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_message	union(array(char),array(long),array(long))
,	O
key	*(char)
,	O
cipher	*(void)
,	O
f	*((*(void),long,*(char),*(char))->(void))
)	O
;	O
block16_xor	(*(union(array(char),array(long),array(long))),*(union(array(char),array(long),array(long))))->(void)
(	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_nonce	union(array(char),array(long),array(long))
,	O
&	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_data	union(array(char),array(long),array(long))
)	O
;	O
memxor3	O
(	O
digest	*(char)
,	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_nonce	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
eax	*(struct(union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long)),union(array(char),array(long),array(long))))
->	O
omac_message	union(array(char),array(long),array(long))
.	O
b	array(char)
,	O
length	long
)	O
;	O
}	O
