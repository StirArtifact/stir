static	O
char	O
usage_text	array(char)
[	O
]	O
=	O
"usage: %s hostname [port=N] [trace=N] [tls=N] [from=STRING] [rcpt=STRING]\n"	*(char)
"                   [family=4|6] [domain=STRING] [user=STRING] [pass=STRING]\n"	*(char)
"                   [service=STRING] [realm=STRING] [host=STRING]\n"	*(char)
"                   [auth=method[,...]] [url=STRING] [input=FILE] [raw=N]\n"	*(char)
"                   [skiphdr=name[,...]]\n"	*(char)
;	O
static	O
void	O
usage	()->(void)
(	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
usage_text	array(char)
,	O
mu_program_name	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
int	O
send_rcpt_command	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
char	O
*	O
email	*(char)
=	O
item	*(void)
;	O
mu_smtp_t	*(struct)
smtp	*(struct)
=	O
data	*(void)
;	O
MU_ASSERT	O
(	O
mu_smtp_rcpt_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
email	*(char)
,	O
NULL	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
update_list	(*(*(struct)),*(char))->(void)
(	O
mu_list_t	*(struct)
*	O
plist	*(*(struct))
,	O
const	O
char	O
*	O
arg	*(char)
)	O
{	O
size_t	long
j	long
;	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
*	O
plist	*(*(struct))
;	O
if	O
(	O
!	O
list	*(struct)
)	O
{	O
MU_ASSERT	O
(	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
)	O
;	O
*	O
plist	*(*(struct))
=	O
list	*(struct)
;	O
}	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_delim	*(char)
=	O
","	*(char)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
arg	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_DEFFLAGS	O
|	O
MU_WRDSF_DELIM	O
)	O
)	O
{	O
mu_error	(*(char))->(int)
(	O
"mu_wordsplit: %s"	*(char)
,	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
;	O
j	long
++	O
)	O
MU_ASSERT	O
(	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordv	*(*(char))
[	O
j	long
]	O
)	O
)	O
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
=	O
0	int
;	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
}	O
static	O
int	O
headercmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
data	*(void)
)	O
{	O
return	O
mu_c_strcasecmp	(*(char),*(char))->(int)
(	O
item	*(void)
,	O
data	*(void)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
i	long
;	O
char	O
*	O
host	*(*(char))
=	O
NULL	O
;	O
char	O
*	O
infile	*(char)
=	O
NULL	O
;	O
char	O
*	O
port	int
=	O
NULL	O
;	O
int	O
tls	int
=	O
0	int
;	O
int	O
raw	*(char)
=	O
1	int
;	O
int	O
flags	int
=	O
0	int
;	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
mu_smtp_t	*(struct)
smtp	*(struct)
;	O
mu_stream_t	*(struct)
instr	*(struct)
;	O
char	O
*	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
NULL	O
;	O
mu_list_t	*(struct)
rcpt_list	*(struct)
=	O
NULL	O
;	O
mu_list_t	*(struct)
meth_list	*(struct)
=	O
NULL	O
;	O
mu_list_t	*(struct)
skiphdr_list	*(struct)
=	O
NULL	O
;	O
struct	O
mu_sockaddr	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char))),*(struct(short,array(char))),int,*(char))
*	O
sa	*(struct(short,array(char)))
;	O
struct	O
mu_sockaddr_hints	struct(int,int,int,int,short)
hints	*(struct(*(char),*(char)))
;	O
mu_set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
mu_stdstream_setup	(int)->(void)
(	O
MU_STDSTREAM_RESET_NONE	int
)	O
;	O
if	O
(	O
argc	long
<	O
2	int
)	O
usage	()->(void)
(	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	*(struct(*(char),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
hints	*(struct(*(char),*(char)))
)	O
)	O
;	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
=	O
MU_AH_DETECT_FAMILY	int
;	O
hints	*(struct(*(char),*(char)))
.	O
port	int
=	O
25	int
;	O
hints	*(struct(*(char),*(char)))
.	O
protocol	int
=	O
IPPROTO_TCP	int
;	O
hints	*(struct(*(char),*(char)))
.	O
socktype	int
=	O
SOCK_STREAM	int
;	O
MU_ASSERT	O
(	O
mu_smtp_create	(*(*(struct)))->(int)
(	O
&	O
smtp	*(struct)
)	O
)	O
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"port="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
port	int
=	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"family="	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
hints	*(struct(*(char),*(char)))
.	O
flags	int
&=	O
~	O
MU_AH_DETECT_FAMILY	int
;	O
switch	O
(	O
argv	*(*(char))
[	O
i	long
]	O
[	O
7	int
]	O
)	O
{	O
case	O
'4'	O
:	O
hints	*(struct(*(char),*(char)))
.	O
family	int
=	O
AF_INET	O
;	O
break	O
;	O
case	O
'6'	O
:	O
hints	*(struct(*(char),*(char)))
.	O
family	int
=	O
AF_INET6	O
;	O
break	O
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
"invalid family name: %s"	*(char)
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
7	int
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"trace="	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
arg	*(char)
=	O
argv	*(*(char))
[	O
i	long
]	O
+	O
6	int
;	O
if	O
(	O
mu_isdigit	O
(	O
arg	*(char)
[	O
0	int
]	O
)	O
)	O
mu_smtp_trace	(*(struct),int)->(int)
(	O
smtp	*(struct)
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
+	O
6	int
)	O
?	O
MU_SMTP_TRACE_SET	int
:	O
MU_SMTP_TRACE_CLR	int
)	O
;	O
else	O
{	O
mu_smtp_trace	(*(struct),int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"secure"	*(char)
)	O
==	O
0	int
)	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_SECURE	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"payload"	*(char)
)	O
==	O
0	int
)	O
mu_smtp_trace_mask	(*(struct),int,int)->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_TRACE_SET	int
,	O
MU_XSCRIPT_PAYLOAD	int
)	O
;	O
}	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"tls="	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
tls	int
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
+	O
4	int
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"domain="	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_DOMAIN	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
7	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"user="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_USERNAME	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"pass="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_PASSWORD	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"service="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_SERVICE	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
8	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"realm="	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_REALM	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
6	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"host="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_HOST	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"url="	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
MU_ASSERT	O
(	O
mu_smtp_set_param	(*(struct),int,*(char))->(int)
(	O
smtp	*(struct)
,	O
MU_SMTP_PARAM_URL	int
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
4	int
)	O
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"input="	*(char)
,	O
6	int
)	O
==	O
0	int
)	O
infile	*(char)
=	O
argv	*(*(char))
[	O
i	long
]	O
+	O
6	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"raw="	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
raw	*(char)
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
+	O
4	int
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"rcpt="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
!	O
rcpt_list	*(struct)
)	O
MU_ASSERT	O
(	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
rcpt_list	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_list_append	(*(struct),*(void))->(int)
(	O
rcpt_list	*(struct)
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
)	O
)	O
;	O
}	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"from="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"auth="	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
update_list	(*(*(struct)),*(char))->(void)
(	O
&	O
meth_list	*(struct)
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
5	int
)	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"skiphdr="	*(char)
,	O
8	int
)	O
==	O
0	int
)	O
{	O
update_list	(*(*(struct)),*(char))->(void)
(	O
&	O
skiphdr_list	*(struct)
,	O
argv	*(*(char))
[	O
i	long
]	O
+	O
8	int
)	O
;	O
raw	*(char)
=	O
0	int
;	O
}	O
else	O
if	O
(	O
host	*(*(char))
)	O
{	O
mu_error	(*(char))->(int)
(	O
"server name already given: %s, new name %s?"	*(char)
,	O
host	*(*(char))
,	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
else	O
host	*(*(char))
=	O
argv	*(*(char))
[	O
i	long
]	O
;	O
}	O
if	O
(	O
!	O
host	*(*(char))
)	O
usage	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
raw	*(char)
)	O
flags	int
=	O
MU_STREAM_SEEK	int
;	O
if	O
(	O
infile	*(char)
)	O
MU_ASSERT	O
(	O
mu_file_stream_create	(*(*(struct)),*(char),int)->(int)
(	O
&	O
instr	*(struct)
,	O
infile	*(char)
,	O
MU_STREAM_READ	int
|	O
flags	int
)	O
)	O
;	O
else	O
MU_ASSERT	O
(	O
mu_stdio_stream_create	(*(*(struct)),int,int)->(int)
(	O
&	O
instr	*(struct)
,	O
MU_STDIN_FD	int
,	O
flags	int
)	O
)	O
;	O
host	*(*(char))
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
MU_ASSERT	O
(	O
mu_sockaddr_from_node	(*(*(struct(*(struct`),*(struct`),*(struct`),int,*(char)))),*(char),*(char),*(struct(int,int,int,int,short)))->(int)
(	O
&	O
sa	*(struct(short,array(char)))
,	O
host	*(*(char))
,	O
port	int
,	O
&	O
hints	*(struct(*(char),*(char)))
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_tcp_stream_create_from_sa	(*(*(struct)),*(struct),*(struct),int)->(int)
(	O
&	O
stream	*(struct)
,	O
sa	*(struct(short,array(char)))
,	O
NULL	O
,	O
MU_STREAM_RDWR	O
)	O
)	O
;	O
mu_smtp_set_carrier	(*(struct),*(struct))->(int)
(	O
smtp	*(struct)
,	O
stream	*(struct)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
stream	*(struct)
)	O
;	O
if	O
(	O
!	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
=	O
getenv	(*(char))->(*(char))
(	O
"USER"	*(char)
)	O
;	O
if	O
(	O
!	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
)	O
{	O
mu_error	(*(char))->(int)
(	O
"cannot determine sender name"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
raw	*(char)
&&	O
!	O
rcpt_list	*(struct)
)	O
{	O
mu_error	(*(char))->(int)
(	O
"no recipients"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_smtp_open	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_ehlo	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
if	O
(	O
tls	int
&&	O
mu_smtp_capa_test	(*(struct),*(char),*(*(char)))->(int)
(	O
smtp	*(struct)
,	O
"STARTTLS"	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
{	O
MU_ASSERT	O
(	O
mu_smtp_starttls	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_ehlo	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
}	O
if	O
(	O
meth_list	*(struct)
)	O
{	O
int	O
status	int
;	O
MU_ASSERT	O
(	O
mu_smtp_add_auth_mech_list	(*(struct),*(struct))->(int)
(	O
smtp	*(struct)
,	O
meth_list	*(struct)
)	O
)	O
;	O
status	int
=	O
mu_smtp_auth	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
;	O
switch	O
(	O
status	int
)	O
{	O
case	O
0	int
:	O
MU_ASSERT	O
(	O
mu_smtp_ehlo	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
break	O
;	O
case	O
ENOSYS	int
:	O
case	O
MU_ERR_NOENT	O
:	O
break	O
;	O
default	O
:	O
mu_error	(*(char))->(int)
(	O
"authentication failed: %s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
status	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
}	O
MU_ASSERT	O
(	O
mu_smtp_mail_basic	(*(struct),*(char),*(char))->(int)
(	O
smtp	*(struct)
,	O
from	*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))))
,	O
NULL	O
)	O
)	O
;	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
rcpt_list	*(struct)
,	O
send_rcpt_command	(*(void),*(void))->(int)
,	O
smtp	*(struct)
)	O
;	O
if	O
(	O
raw	*(char)
)	O
{	O
MU_ASSERT	O
(	O
mu_smtp_send_stream	(*(struct),*(struct))->(int)
(	O
smtp	*(struct)
,	O
instr	*(struct)
)	O
)	O
;	O
}	O
else	O
{	O
mu_message_t	*(struct)
msg	*(struct)
;	O
mu_stream_t	*(struct)
ostr	*(struct)
,	O
bstr	*(struct)
;	O
mu_header_t	*(struct)
hdr	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
mu_body_t	*(struct)
body	*(struct)
;	O
if	O
(	O
skiphdr_list	*(struct)
)	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
skiphdr_list	*(struct)
,	O
headercmp	(*(void),*(void))->(int)
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_to_message	(*(struct),*(*(struct)))->(int)
(	O
instr	*(struct)
,	O
&	O
msg	*(struct)
)	O
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
instr	*(struct)
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_data	(*(struct),*(*(struct)))->(int)
(	O
smtp	*(struct)
,	O
&	O
ostr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_header_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
hdr	*(struct)
,	O
&	O
itr	*(struct)
)	O
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
;	O
void	O
*	O
value	*(void)
;	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
)	O
&	O
name	*(char)
,	O
&	O
value	*(void)
)	O
;	O
if	O
(	O
mu_list_locate	(*(struct),*(void),*(*(void)))->(int)
(	O
skiphdr_list	*(struct)
,	O
(	O
void	O
*	O
)	O
name	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
continue	O
;	O
mu_stream_printf	(*(struct),*(char))->(int)
(	O
ostr	*(struct)
,	O
"%s: %s\n"	*(char)
,	O
name	*(char)
,	O
(	O
char	O
*	O
)	O
value	*(void)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
ostr	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_message_get_body	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
body	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_body_get_streamref	(*(struct),*(*(struct)))->(int)
(	O
body	*(struct)
,	O
&	O
bstr	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
ostr	*(struct)
,	O
bstr	*(struct)
,	O
0	int
,	O
NULL	O
)	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
bstr	*(struct)
)	O
;	O
mu_stream_close	(*(struct))->(int)
(	O
ostr	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
ostr	*(struct)
)	O
;	O
}	O
MU_ASSERT	O
(	O
mu_smtp_dot	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
MU_ASSERT	O
(	O
mu_smtp_quit	(*(struct))->(int)
(	O
smtp	*(struct)
)	O
)	O
;	O
mu_smtp_destroy	(*(*(struct)))->(void)
(	O
&	O
smtp	*(struct)
)	O
;	O
mu_stream_close	(*(struct))->(int)
(	O
instr	*(struct)
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
instr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
