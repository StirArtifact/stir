static	O
int	O
get_argcv	(*(char),*(char),*(long),*(*(*(char))))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
delim	*(char)
,	O
size_t	long
*	O
pargc	*(long)
,	O
char	O
*	O
*	O
*	O
pargv	*(*(*(char)))
)	O
{	O
int	O
n	long
;	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
if	O
(	O
n	long
=	O
grad_argcv_get	(*(char),*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
str	*(char)
,	O
delim	*(char)
,	O
"#"	*(char)
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
)	O
{	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
return	O
n	long
;	O
}	O
*	O
pargc	*(long)
=	O
argc	int
;	O
*	O
pargv	*(*(*(char)))
=	O
argv	*(*(char))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
continuation_line_p	(*(char),*(char))->(int)
(	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
delim	*(char)
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
int	O
rc	int
=	O
get_argcv	(*(char),*(char),*(long),*(*(*(char))))->(int)
(	O
str	*(char)
,	O
delim	*(char)
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
==	O
0	int
&&	O
argc	int
>	O
0	int
&&	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
[	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
)	O
-	O
1	int
]	O
==	O
'\\'	O
;	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
grad_read_raddb_file	(*(char),int,*(char),*((*(void),int,*(*(char)),*(struct(*`,long)))->(int)),*(void))->(int)
(	O
char	O
*	O
filename	*(char)
,	O
int	O
vital	int
,	O
char	O
*	O
delim	*(char)
,	O
int	O
(	O
*	O
fun	*((*(void),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))))->(int))
)	O
(	O
)	O
,	O
void	O
*	O
closure	*(void)
)	O
{	O
int	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
grad_locus_t	struct(*(char),long)
loc	struct(*(char),long)
;	O
int	O
fd	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
*	O
buffer	*(char)
,	O
*	O
lineptr	*(char)
,	O
*	O
endp	*(*(char))
,	O
*	O
p	*(struct)
;	O
size_t	long
rdsize	long
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
filename	*(char)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't stat `%s'"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
fd	int
=	O
open	(*(char),int)->(int)
(	O
filename	*(char)
,	O
O_RDONLY	int
)	O
;	O
if	O
(	O
fd	int
==	O
-	O
1	int
)	O
{	O
if	O
(	O
vital	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file `%s'"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_NOTICE	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"can't open file `%s'"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
buffer	*(char)
=	O
grad_malloc	(long)->(*(void))
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
+	O
1	int
)	O
;	O
for	O
(	O
lineptr	*(char)
=	O
buffer	*(char)
,	O
rdsize	long
=	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
rdsize	long
;	O
)	O
{	O
ssize_t	long
s	*(*(char))
=	O
read	(int,*(void),long)->(long)
(	O
fd	int
,	O
lineptr	*(char)
,	O
rdsize	long
)	O
;	O
if	O
(	O
s	*(*(char))
<=	O
0	int
)	O
{	O
if	O
(	O
s	*(*(char))
==	O
-	O
1	int
)	O
{	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_ERR	int
|	O
GRAD_LOG_PERROR	int
,	O
_	O
(	O
"%s: read error"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
s	*(*(char))
==	O
0	int
)	O
grad_log	(int,*(char))->(void)
(	O
GRAD_LOG_WARN	int
,	O
_	O
(	O
"%s: short read"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
grad_free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
return	O
1	int
;	O
}	O
rdsize	long
-=	O
s	*(*(char))
;	O
lineptr	*(char)
+=	O
s	*(*(char))
;	O
}	O
*	O
lineptr	*(char)
=	O
0	int
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
if	O
(	O
!	O
delim	*(char)
)	O
delim	*(char)
=	O
""	*(char)
;	O
loc	struct(*(char),long)
.	O
file	*(char)
=	O
filename	*(char)
;	O
loc	struct(*(char),long)
.	O
line	long
=	O
0	int
;	O
lineptr	*(char)
=	O
buffer	*(char)
;	O
for	O
(	O
p	*(struct)
=	O
endp	*(*(char))
=	O
lineptr	*(char)
;	O
*	O
endp	*(*(char))
;	O
)	O
{	O
if	O
(	O
endp	*(*(char))
[	O
0	int
]	O
==	O
'\\'	O
&&	O
endp	*(*(char))
[	O
1	int
]	O
==	O
'\n'	O
)	O
{	O
endp	*(*(char))
[	O
1	int
]	O
=	O
0	int
;	O
if	O
(	O
continuation_line_p	(*(char),*(char))->(int)
(	O
lineptr	*(char)
,	O
delim	*(char)
)	O
)	O
{	O
endp	*(*(char))
+=	O
2	int
;	O
lineptr	*(char)
=	O
endp	*(*(char))
;	O
continue	O
;	O
}	O
else	O
endp	*(*(char))
[	O
1	int
]	O
=	O
'\n'	O
;	O
}	O
else	O
if	O
(	O
endp	*(*(char))
[	O
0	int
]	O
==	O
'\n'	O
)	O
lineptr	*(char)
=	O
endp	*(*(char))
;	O
*	O
p	*(struct)
++	O
=	O
*	O
endp	*(*(char))
++	O
;	O
}	O
*	O
p	*(struct)
=	O
0	int
;	O
lineptr	*(char)
=	O
buffer	*(char)
;	O
while	O
(	O
*	O
lineptr	*(char)
)	O
{	O
char	O
*	O
str	*(char)
;	O
for	O
(	O
endp	*(*(char))
=	O
lineptr	*(char)
;	O
*	O
endp	*(*(char))
&&	O
*	O
endp	*(*(char))
!=	O
'\n'	O
;	O
endp	*(*(char))
++	O
)	O
;	O
if	O
(	O
*	O
endp	*(*(char))
)	O
*	O
endp	*(*(char))
++	O
=	O
0	int
;	O
loc	struct(*(char),long)
.	O
line	long
++	O
;	O
str	*(char)
=	O
lineptr	*(char)
;	O
lineptr	*(char)
=	O
endp	*(*(char))
;	O
if	O
(	O
str	*(char)
[	O
0	int
]	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
get_argcv	(*(char),*(char),*(long),*(*(*(char))))->(int)
(	O
str	*(char)
,	O
delim	*(char)
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
==	O
0	int
&&	O
argc	int
)	O
fun	*((*(void),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))))->(int))
(	O
closure	*(void)
,	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
loc	struct(*(char),long)
)	O
;	O
if	O
(	O
argv	*(*(char))
)	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
}	O
grad_free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
