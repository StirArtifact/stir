int	O
player	int
;	O
XEvent	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
;	O
int	O
inv_radius	int
=	O
0	int
;	O
int	O
counter	int
=	O
0	int
;	O
int	O
drawing	int
=	O
1	int
;	O
int	O
_trace2	array(int)
[	O
]	O
=	O
{	O
30	int
,	O
40	int
,	O
60	int
,	O
40	int
,	O
30	int
,	O
50	int
,	O
60	int
,	O
30	int
,	O
20	int
,	O
30	int
,	O
20	int
,	O
20	int
,	O
10	int
,	O
40	int
,	O
20	int
,	O
50	int
,	O
30	int
,	O
20	int
,	O
30	int
,	O
40	int
,	O
30	int
,	O
50	int
,	O
60	int
,	O
30	int
,	O
20	int
,	O
30	int
,	O
20	int
,	O
20	int
,	O
30	int
,	O
40	int
,	O
20	int
,	O
50	int
}	O
;	O
int	O
_trace	array(int)
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
-	O
3	int
,	O
6	int
,	O
-	O
5	int
,	O
4	int
,	O
-	O
3	int
,	O
0	int
,	O
0	int
,	O
-	O
4	int
,	O
-	O
5	int
,	O
3	int
,	O
0	int
,	O
-	O
5	int
,	O
3	int
,	O
-	O
5	int
,	O
3	int
,	O
0	int
,	O
-	O
4	int
,	O
7	int
,	O
0	int
,	O
-	O
5	int
,	O
2	int
,	O
0	int
,	O
-	O
5	int
,	O
0	int
,	O
-	O
5	int
,	O
5	int
,	O
-	O
2	int
,	O
0	int
,	O
-	O
1	int
,	O
0	int
}	O
;	O
int	O
road_length	int
=	O
LENGTH	int
;	O
float	O
gros	float
=	O
1.4	int
;	O
int	O
End	int
=	O
0	int
;	O
extern	O
int	O
CompletionType	int
;	O
extern	O
int	O
mikmod	int
;	O
extern	O
World	struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int)
*	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
;	O
unsigned	O
int	O
touche	int
;	O
int	O
loop	(*(struct))->(int)
(	O
Display	struct
*	O
dpy	*(struct)
)	O
{	O
int	O
finish	int
=	O
0	int
;	O
unsigned	O
int	O
etat	int
;	O
int	O
num_dpy	int
=	O
-	O
1	int
;	O
int	O
i	int
;	O
int	O
refresh_ready	int
;	O
float	O
g	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NB_ADV	int
;	O
i	int
++	O
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
i	int
]	O
=	O
0	int
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Player : %d\n"	*(char)
,	O
player	int
)	O
;	O
if	O
(	O
DEBUG	int
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
fps	(int)->(void)
)	O
;	O
alarm	(int)->(int)
(	O
10	int
)	O
;	O
}	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
menu	(*(char),*(struct))->(void)
(	O
screen_buffer	*(char)
,	O
dpy	*(struct)
)	O
;	O
start_world	()->(void)
(	O
)	O
;	O
while	O
(	O
!	O
finish	int
)	O
{	O
if	O
(	O
refresh_ready	int
==	O
CAN_REFRESH	int
)	O
{	O
counter	int
++	O
;	O
refresh_ready	int
=	O
REFRESH_BUSY	int
;	O
inv_radius	int
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
trace	array(int)
[	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
player	int
]	O
.	O
ypos	int
>>	O
6	int
)	O
%	O
(	O
64	int
*	O
road_length	int
)	O
]	O
;	O
refresh	(*(char),*(char),int,int)->(void)
(	O
screen_buffer	*(char)
,	O
sky	*(char)
,	O
inv_radius	int
,	O
player	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NB_ADV	int
;	O
i	int
++	O
)	O
{	O
int	O
sens	int
=	O
0	int
;	O
if	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
yvit	int
>=	O
0	int
)	O
sens	int
=	O
1	int
;	O
else	O
if	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
yvit	int
<=	O
0	int
)	O
sens	int
=	O
-	O
1	int
;	O
g	int
=	O
(	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
ypos	int
-	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
player	int
]	O
.	O
ypos	int
+	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
player	int
]	O
.	O
yvit	int
>>	O
5	int
)	O
+	O
CAMERA	int
)	O
)	O
%	O
(	O
(	O
64	int
*	O
LENGTH	int
)	O
<<	O
6	int
)	O
;	O
g	int
=	O
(	O
g	int
/	O
HVISION	int
)	O
+	O
1	int
;	O
if	O
(	O
g	int
>	O
1.2	int
)	O
Draw_car	(*(char),int,int,int,float)->(int)
(	O
screen_buffer	*(char)
,	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
num_veh	int
,	O
(	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
xvit	int
>>	O
3	int
)	O
-	O
(	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
xpos	int
-	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
player	int
]	O
.	O
xpos	int
)	O
/	O
64	int
)	O
)	O
*	O
sens	int
,	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
i	int
]	O
.	O
xpos	int
,	O
g	int
)	O
;	O
}	O
if	O
(	O
dble	int
==	O
0	int
)	O
{	O
aff	(long)->(void)
(	O
win	long
)	O
;	O
}	O
else	O
aff2	(long)->(void)
(	O
win	long
)	O
;	O
}	O
if	O
(	O
!	O
mit_shm	int
)	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
while	O
(	O
XPending	(*(struct))->(int)
(	O
dpy	*(struct)
)	O
)	O
{	O
XNextEvent	(*(struct),*(union(int,struct(int,long,int,*(struct`),long),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,int,int),struct(int,long,int,*(struct`),long,int,int,int,int,int),struct(int,long,int,*(struct`),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,int,int),struct(int,long,int,*(struct`),long,int),struct(int,long,int,*(struct`),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,long),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long),struct(int,long,int,*(struct`),long,long,long,int,int,int),struct(int,long,int,*(struct`),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct`),long,long,int,int),struct(int,long,int,*(struct`),long,int,int),struct(int,long,int,*(struct`),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long,long,int),struct(int,long,int,*(struct`),long,long,long),struct(int,long,int,*(struct`),long,long,long,long,long,long),struct(int,long,int,*(struct`),long,long,long,long,long),struct(int,long,int,*(struct`),long,long,int,int),struct(int,long,int,*(struct`),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct`),long,int,int,int),struct(int,*(struct`),long,long,char,char,char),struct(int,long,int,*(struct`),long,array(char)),struct(int,long,int,*(struct`),int,int),struct(int,long,int,*(struct`),int,int,int,*(void)),array(long))))->(int)
(	O
dpy	*(struct)
,	O
&	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
)	O
;	O
if	O
(	O
mit_shm	int
)	O
{	O
if	O
(	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
.	O
type	*(char)
==	O
CompletionType	int
)	O
{	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
break	O
;	O
}	O
}	O
touche	int
=	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
.	O
xkey	struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int)
.	O
keycode	int
;	O
etat	int
=	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
.	O
xkey	struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int)
.	O
state	*(int)
;	O
if	O
(	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
.	O
xkey	struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int)
.	O
display	*(struct)
==	O
dpy	*(struct)
)	O
num_dpy	int
=	O
0	int
;	O
else	O
num_dpy	int
=	O
1	int
;	O
switch	O
(	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
.	O
xkey	struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int)
.	O
type	*(char)
)	O
{	O
case	O
KeyPress	int
:	O
if	O
(	O
touche	int
==	O
KEY_UP	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
|	O
UP	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_DOWN	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
|	O
DOWN	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_RIGHT	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
|	O
RIGHT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_LEFT	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
|	O
LEFT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_UP2	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
|	O
UP	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_DOWN2	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
|	O
DOWN	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_RIGHT2	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
|	O
RIGHT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_LEFT2	char
)	O
{	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
|	O
LEFT	int
;	O
}	O
if	O
(	O
touche	int
==	O
KEY_ESC	char
)	O
{	O
perror	(*(char))->(void)
(	O
"Esc : Menu"	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
KeyRelease	int
:	O
if	O
(	O
touche	int
==	O
KEY_UP	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_DOWN	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_RIGHT	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_LEFT	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
player	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_UP2	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
UP	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_DOWN2	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
DOWN	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_RIGHT2	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
RIGHT	int
)	O
;	O
if	O
(	O
touche	int
==	O
KEY_LEFT2	char
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
mask	array(int)
[	O
1	int
]	O
&	O
(	O
~	O
LEFT	int
)	O
;	O
break	O
;	O
if	O
(	O
touche	int
==	O
KEY_ESC	char
)	O
{	O
perror	(*(char))->(void)
(	O
"Esc"	*(char)
)	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
(	O
touche	int
==	O
KEY_QUIT	char
)	O
||	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
finish	int
)	O
)	O
{	O
finish	int
=	O
1	int
;	O
if	O
(	O
player	int
==	O
0	int
)	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
finish	int
=	O
1	int
;	O
}	O
}	O
}	O
printf	(*(char))->(int)
(	O
"Position = %d\n"	*(char)
,	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
position	short
)	O
;	O
if	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
finish	int
==	O
1	int
)	O
{	O
printf	(*(char))->(int)
(	O
"The server quit the game.\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"Everybody must quit !\n"	*(char)
)	O
;	O
}	O
stop_world	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
auto_run	()->(int)
(	O
void	O
)	O
{	O
int	O
refresh_ready	int
;	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
autopilot	int
=	O
1	int
;	O
start_world	()->(void)
(	O
)	O
;	O
if	O
(	O
DEBUG	int
)	O
{	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGALRM	int
,	O
fps	(int)->(void)
)	O
;	O
alarm	(int)->(int)
(	O
10	int
)	O
;	O
}	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
refresh_ready	int
==	O
CAN_REFRESH	int
)	O
{	O
refresh_ready	int
=	O
REFRESH_BUSY	int
;	O
counter	int
++	O
;	O
inv_radius	int
=	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
trace	array(int)
[	O
(	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
ypos	int
>>	O
6	int
)	O
%	O
(	O
64	int
*	O
road_length	int
)	O
]	O
;	O
refresh	(*(char),*(char),int,int)->(void)
(	O
screen_buffer	*(char)
,	O
sky	*(char)
,	O
inv_radius	int
,	O
0	int
)	O
;	O
Draw_car	(*(char),int,int,int,float)->(int)
(	O
screen_buffer	*(char)
,	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
num_veh	int
,	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
xvit	int
>>	O
3	int
,	O
world	*(struct(int,int,int,array(struct(int,int,int,int,int,int,int,int,int)),array(int),array(int),int,array(int),array(int),array(int),array(int),array(int),int))
->	O
Sorting	array(struct(int,int,int,int,int,int,int,int,int))
[	O
0	int
]	O
.	O
xpos	int
,	O
gros	float
)	O
;	O
fog	(int,int,int)->(void)
(	O
255	int
,	O
255	int
,	O
255	int
)	O
;	O
if	O
(	O
dble	int
==	O
0	int
)	O
aff	(long)->(void)
(	O
win	long
)	O
;	O
else	O
aff2	(long)->(void)
(	O
win	long
)	O
;	O
if	O
(	O
!	O
mit_shm	int
)	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
while	O
(	O
XPending	(*(struct))->(int)
(	O
display	*(struct)
)	O
)	O
{	O
XNextEvent	(*(struct),*(union(int,struct(int,long,int,*(struct`),long),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct`),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,int,int),struct(int,long,int,*(struct`),long,int,int,int,int,int),struct(int,long,int,*(struct`),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,int,int),struct(int,long,int,*(struct`),long,int),struct(int,long,int,*(struct`),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct`),long,long),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long),struct(int,long,int,*(struct`),long,long,long,int,int,int),struct(int,long,int,*(struct`),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct`),long,long,int,int),struct(int,long,int,*(struct`),long,int,int),struct(int,long,int,*(struct`),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long,int),struct(int,long,int,*(struct`),long,long,long,int),struct(int,long,int,*(struct`),long,long,long),struct(int,long,int,*(struct`),long,long,long,long,long,long),struct(int,long,int,*(struct`),long,long,long,long,long),struct(int,long,int,*(struct`),long,long,int,int),struct(int,long,int,*(struct`),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct`),long,int,int,int),struct(int,*(struct`),long,long,char,char,char),struct(int,long,int,*(struct`),long,array(char)),struct(int,long,int,*(struct`),int,int),struct(int,long,int,*(struct`),int,int,int,*(void)),array(long))))->(int)
(	O
display	*(struct)
,	O
&	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
)	O
;	O
if	O
(	O
mit_shm	int
)	O
{	O
if	O
(	O
XEv	union(int,struct(int,long,int,*(struct),long),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,char,int),struct(int,long,int,*(struct),long,long,long,long,int,int,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int,int,int,int,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long),struct(int,long,int,*(struct),long,long,long,int,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,int,int),struct(int,long,int,*(struct),long,long,int,int,int,int,int,long,int,long),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,int),struct(int,long,int,*(struct),long,long,long,int),struct(int,long,int,*(struct),long,long,long),struct(int,long,int,*(struct),long,long,long,long,long,long),struct(int,long,int,*(struct),long,long,long,long,long),struct(int,long,int,*(struct),long,long,int,int),struct(int,long,int,*(struct),long,long,int,union(array(char),array(short),array(long))),struct(int,long,int,*(struct),long,int,int,int),struct(int,*(struct),long,long,char,char,char),struct(int,long,int,*(struct),long,array(char)),struct(int,long,int,*(struct),int,int),struct(int,long,int,*(struct),int,int,int,*(void)),array(long))
.	O
type	*(char)
==	O
CompletionType	int
)	O
{	O
refresh_ready	int
=	O
CAN_REFRESH	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
}	O
stop_world	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
