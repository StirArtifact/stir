static	O
const	O
char	O
*	O
abbreviations_de	array(*(char))
[	O
]	O
=	O
{	O
"Dr"	*(char)
,	O
"bzw"	*(char)
,	O
"etc"	*(char)
,	O
"sog"	*(char)
,	O
"usw"	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
abbreviations_en	array(*(char))
[	O
]	O
=	O
{	O
"ch"	*(char)
,	O
"Ch"	*(char)
,	O
"ckts"	*(char)
,	O
"dB"	*(char)
,	O
"Dept"	*(char)
,	O
"dept"	*(char)
,	O
"Depts"	*(char)
,	O
"depts"	*(char)
,	O
"Dr"	*(char)
,	O
"Drs"	*(char)
,	O
"Eq"	*(char)
,	O
"eq"	*(char)
,	O
"etc"	*(char)
,	O
"et al"	*(char)
,	O
"Fig"	*(char)
,	O
"fig"	*(char)
,	O
"Figs"	*(char)
,	O
"figs"	*(char)
,	O
"ft"	*(char)
,	O
"0 in"	*(char)
,	O
"1 in"	*(char)
,	O
"2 in"	*(char)
,	O
"3 in"	*(char)
,	O
"4 in"	*(char)
,	O
"5 in"	*(char)
,	O
"6 in"	*(char)
,	O
"7 in"	*(char)
,	O
"8 in"	*(char)
,	O
"9 in"	*(char)
,	O
"Inc"	*(char)
,	O
"Jr"	*(char)
,	O
"jr"	*(char)
,	O
"mi"	*(char)
,	O
"Mr"	*(char)
,	O
"Mrs"	*(char)
,	O
"Ms"	*(char)
,	O
"No"	*(char)
,	O
"no"	*(char)
,	O
"Nos"	*(char)
,	O
"nos"	*(char)
,	O
"Ph"	*(char)
,	O
"Ref"	*(char)
,	O
"ref"	*(char)
,	O
"Refs"	*(char)
,	O
"refs"	*(char)
,	O
"St"	*(char)
,	O
"vs"	*(char)
,	O
"yr"	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
abbreviations_nl	array(*(char))
[	O
]	O
=	O
{	O
"as"	*(char)
,	O
"aub"	*(char)
,	O
"bijv"	*(char)
,	O
"bv"	*(char)
,	O
"ca"	*(char)
,	O
"dd"	*(char)
,	O
"dr"	*(char)
,	O
"drs"	*(char)
,	O
"ed"	*(char)
,	O
"jl"	*(char)
,	O
"maw"	*(char)
,	O
"muv"	*(char)
,	O
"oa"	*(char)
,	O
"tav"	*(char)
,	O
"tzt"	*(char)
,	O
"zg"	*(char)
,	O
"zgn"	*(char)
,	O
"zoz"	*(char)
,	O
"zsm"	*(char)
,	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
abbreviations_none	array(*(char))
[	O
]	O
=	O
{	O
(	O
const	O
char	O
*	O
)	O
0	int
}	O
;	O
static	O
const	O
char	O
*	O
*	O
abbreviations	*(*(char))
;	O
static	O
int	O
endingInAbbrev	(*(char),long,*(char))->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
length	long
,	O
const	O
char	O
*	O
lang	*(char)
)	O
{	O
const	O
char	O
*	O
*	O
abbrev	*(*(char))
=	O
abbreviations	*(*(char))
;	O
size_t	long
aLength	long
;	O
if	O
(	O
!	O
isalpha	(int)->(int)
(	O
s	*(char)
[	O
length	long
-	O
1	int
]	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
endingInPossesiveS	(*(char),long)->(int)
(	O
s	*(char)
,	O
length	long
)	O
)	O
return	O
0	int
;	O
while	O
(	O
*	O
abbrev	*(*(char))
!=	O
(	O
const	O
char	O
*	O
)	O
0	int
)	O
{	O
if	O
(	O
(	O
aLength	long
=	O
strlen	(*(char))->(long)
(	O
*	O
abbrev	*(*(char))
)	O
)	O
<	O
length	long
)	O
{	O
if	O
(	O
!	O
isalpha	(int)->(int)
(	O
s	*(char)
[	O
length	long
-	O
2	int
]	O
)	O
)	O
return	O
1	int
;	O
if	O
(	O
!	O
isalpha	(int)->(int)
(	O
s	*(char)
[	O
length	long
-	O
aLength	long
-	O
1	int
]	O
)	O
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
+	O
length	long
-	O
aLength	long
,	O
*	O
abbrev	*(*(char))
,	O
aLength	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
else	O
{	O
if	O
(	O
length	long
==	O
1	int
)	O
return	O
1	int
;	O
if	O
(	O
aLength	long
==	O
length	long
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
,	O
*	O
abbrev	*(*(char))
,	O
aLength	long
)	O
==	O
0	int
)	O
return	O
1	int
;	O
}	O
++	O
abbrev	*(*(char))
;	O
}	O
return	O
0	int
;	O
}	O
int	O
endingInPossesiveS	(*(char),long)->(int)
(	O
const	O
char	O
*	O
s	*(char)
,	O
size_t	long
length	long
)	O
{	O
return	O
(	O
abbreviations	*(*(char))
==	O
abbreviations_en	array(*(char))
&&	O
length	long
>=	O
3	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
s	*(char)
+	O
length	long
-	O
2	int
,	O
"\'s"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
;	O
}	O
void	O
sentence	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*((*(char),long,*(char),int)->(void)),*(char))->(void)
(	O
const	O
char	O
*	O
cmd	*(char)
,	O
FILE	struct
*	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
char	O
*	O
file	*(char)
,	O
void	O
(	O
*	O
process	*((*(char),long,*(char),int)->(void))
)	O
(	O
const	O
char	O
*	O
,	O
size_t	long
,	O
const	O
char	O
*	O
,	O
int	O
)	O
,	O
const	O
char	O
*	O
lang	*(char)
)	O
{	O
int	O
voc	int
,	O
oc	int
,	O
c	int
;	O
char	O
*	O
sent	*(char)
=	O
malloc	(long)->(*(void))
(	O
128	int
)	O
;	O
size_t	long
length	long
=	O
0	int
,	O
capacity	long
=	O
128	int
;	O
int	O
inSentence	int
=	O
0	int
;	O
int	O
inWhiteSpace	int
=	O
0	int
;	O
int	O
inParagraph	int
=	O
0	int
;	O
int	O
ellipsis	int
=	O
0	int
;	O
int	O
line	int
=	O
1	int
,	O
beginLine	int
=	O
1	int
;	O
int	O
err	int
;	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
hashLine	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
char	O
filebuf	array(char)
[	O
_POSIX_PATH_MAX	int
+	O
1	int
]	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
lang	*(char)
,	O
"en"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
abbreviations	*(*(char))
=	O
abbreviations_en	array(*(char))
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
lang	*(char)
,	O
"C"	*(char)
,	O
1	int
)	O
==	O
0	int
)	O
abbreviations	*(*(char))
=	O
abbreviations_en	array(*(char))
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
lang	*(char)
,	O
"de"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
abbreviations	*(*(char))
=	O
abbreviations_de	array(*(char))
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
lang	*(char)
,	O
"nl"	*(char)
,	O
2	int
)	O
==	O
0	int
)	O
abbreviations	*(*(char))
=	O
abbreviations_nl	array(*(char))
;	O
else	O
abbreviations	*(*(char))
=	O
abbreviations_none	array(*(char))
;	O
if	O
(	O
(	O
err	int
=	O
regcomp	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int)->(int)
(	O
&	O
hashLine	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
"^[ \t]*line[ \t]*\\([0-9][0-9]*\\)[ \t]*\"\\([^\"]*\\)\""	*(char)
,	O
0	int
)	O
)	O
)	O
{	O
char	O
buf	array(char)
[	O
256	int
]	O
;	O
size_t	long
len	long
=	O
regerror	(int,*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long)->(long)
(	O
err	int
,	O
&	O
hashLine	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
buf	array(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
-	O
1	int
)	O
;	O
buf	array(char)
[	O
len	long
]	O
=	O
'\0'	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: internal error, compiling a regular expression failed (%s).\n"	*(char)
)	O
,	O
cmd	*(char)
,	O
buf	array(char)
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
voc	int
=	O
'\n'	O
;	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
(	O
oc	int
=	O
c	int
)	O
!=	O
EOF	O
)	O
{	O
c	int
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
oc	int
==	O
'\n'	O
)	O
++	O
line	int
;	O
if	O
(	O
voc	int
==	O
'\n'	O
&&	O
oc	int
==	O
'#'	O
)	O
{	O
char	O
buf	array(char)
[	O
_POSIX_PATH_MAX	int
+	O
20	int
]	O
;	O
regmatch_t	struct(int,int)
found	array(struct(int,int))
[	O
3	int
]	O
;	O
buf	array(char)
[	O
0	int
]	O
=	O
c	int
;	O
buf	array(char)
[	O
1	int
]	O
=	O
'\0'	O
;	O
(	O
void	O
)	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	array(char)
+	O
1	int
,	O
sizeof	O
(	O
buf	array(char)
)	O
-	O
1	int
,	O
in	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
&	O
hashLine	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
buf	array(char)
,	O
3	int
,	O
found	array(struct(int,int))
,	O
0	int
)	O
==	O
0	int
)	O
{	O
size_t	long
len	long
;	O
line	int
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
buf	array(char)
+	O
found	array(struct(int,int))
[	O
1	int
]	O
.	O
rm_so	int
,	O
(	O
char	O
*	O
*	O
)	O
0	int
,	O
10	int
)	O
-	O
1	int
;	O
len	long
=	O
found	array(struct(int,int))
[	O
2	int
]	O
.	O
rm_eo	int
-	O
found	array(struct(int,int))
[	O
2	int
]	O
.	O
rm_so	int
;	O
if	O
(	O
len	long
>	O
_POSIX_PATH_MAX	int
)	O
len	long
=	O
_POSIX_PATH_MAX	int
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
filebuf	array(char)
,	O
buf	array(char)
+	O
found	array(struct(int,int))
[	O
2	int
]	O
.	O
rm_so	int
,	O
len	long
)	O
;	O
filebuf	array(char)
[	O
len	long
]	O
=	O
'\0'	O
;	O
file	*(char)
=	O
filebuf	array(char)
;	O
}	O
c	int
=	O
'\n'	O
;	O
continue	O
;	O
}	O
if	O
(	O
length	long
)	O
{	O
if	O
(	O
length	long
>=	O
(	O
capacity	long
-	O
1	int
)	O
&&	O
(	O
sent	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
sent	*(char)
,	O
capacity	long
*=	O
2	int
)	O
)	O
==	O
(	O
char	O
*	O
)	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: increasing sentence buffer failed: %s\n"	*(char)
)	O
,	O
cmd	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
}	O
if	O
(	O
isspace	(int)->(int)
(	O
oc	int
)	O
)	O
{	O
if	O
(	O
!	O
inWhiteSpace	int
)	O
{	O
sent	*(char)
[	O
length	long
++	O
]	O
=	O
' '	O
;	O
inWhiteSpace	int
=	O
1	int
;	O
}	O
}	O
else	O
{	O
sent	*(char)
[	O
length	long
++	O
]	O
=	O
oc	int
;	O
if	O
(	O
isalpha	(int)->(int)
(	O
oc	int
)	O
)	O
inSentence	int
=	O
1	int
;	O
if	O
(	O
(	O
length	long
==	O
3	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
sent	*(char)
+	O
length	long
-	O
3	int
,	O
"..."	*(char)
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
)	O
||	O
(	O
length	long
>=	O
4	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
sent	*(char)
+	O
length	long
-	O
4	int
,	O
" ..."	*(char)
,	O
4	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
)	O
)	O
{	O
inWhiteSpace	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
length	long
>=	O
4	int
&&	O
!	O
isspace	(int)->(int)
(	O
sent	*(char)
[	O
length	long
-	O
4	int
]	O
)	O
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
sent	*(char)
+	O
length	long
-	O
3	int
,	O
"..."	*(char)
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
)	O
{	O
char	O
foo	char
;	O
foo	char
=	O
sent	*(char)
[	O
length	long
-	O
3	int
]	O
;	O
sent	*(char)
[	O
length	long
-	O
3	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
inSentence	int
)	O
process	*((*(char),long,*(char),int)->(void))
(	O
sent	*(char)
,	O
length	long
-	O
3	int
,	O
file	*(char)
,	O
beginLine	int
)	O
;	O
sent	*(char)
[	O
length	long
-	O
3	int
]	O
=	O
foo	char
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
sent	*(char)
,	O
sent	*(char)
+	O
length	long
-	O
3	int
,	O
3	int
)	O
;	O
length	long
=	O
3	int
;	O
inParagraph	int
=	O
0	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
beginLine	int
=	O
line	int
;	O
inSentence	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
length	long
>=	O
4	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
sent	*(char)
+	O
length	long
-	O
4	int
,	O
"..."	*(char)
,	O
3	int
)	O
==	O
0	int
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	(int)->(int)
(	O
c	int
)	O
)	O
)	O
{	O
if	O
(	O
inWhiteSpace	int
)	O
--	O
length	long
;	O
sent	*(char)
[	O
length	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
inSentence	int
)	O
process	*((*(char),long,*(char),int)->(void))
(	O
sent	*(char)
,	O
length	long
,	O
file	*(char)
,	O
beginLine	int
)	O
;	O
length	long
=	O
0	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
inSentence	int
=	O
0	int
;	O
}	O
else	O
if	O
(	O
(	O
oc	int
==	O
'.'	O
||	O
oc	int
==	O
':'	O
||	O
oc	int
==	O
'!'	O
||	O
oc	int
==	O
'?'	O
)	O
&&	O
(	O
c	int
==	O
EOF	O
||	O
isspace	(int)->(int)
(	O
c	int
)	O
||	O
c	int
==	O
'"'	O
)	O
&&	O
(	O
!	O
isdigit	(int)->(int)
(	O
voc	int
)	O
||	O
oc	int
!=	O
'.'	O
||	O
!	O
isdigit	(int)->(int)
(	O
c	int
)	O
)	O
&&	O
(	O
oc	int
!=	O
'.'	O
||	O
!	O
endingInAbbrev	(*(char),long,*(char))->(int)
(	O
sent	*(char)
,	O
length	long
,	O
lang	*(char)
)	O
)	O
)	O
{	O
if	O
(	O
inWhiteSpace	int
)	O
--	O
length	long
;	O
sent	*(char)
[	O
length	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
inSentence	int
)	O
process	*((*(char),long,*(char),int)->(void))
(	O
sent	*(char)
,	O
length	long
,	O
file	*(char)
,	O
beginLine	int
)	O
;	O
length	long
=	O
0	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
inSentence	int
=	O
0	int
;	O
}	O
else	O
{	O
inWhiteSpace	int
=	O
0	int
;	O
}	O
}	O
}	O
else	O
if	O
(	O
isupper	(int)->(int)
(	O
oc	int
)	O
)	O
{	O
inParagraph	int
=	O
0	int
;	O
sent	*(char)
[	O
length	long
++	O
]	O
=	O
oc	int
;	O
inWhiteSpace	int
=	O
0	int
;	O
beginLine	int
=	O
line	int
;	O
inSentence	int
=	O
1	int
;	O
}	O
else	O
if	O
(	O
!	O
inParagraph	int
&&	O
oc	int
==	O
'\n'	O
&&	O
c	int
==	O
'\n'	O
)	O
{	O
process	*((*(char),long,*(char),int)->(void))
(	O
""	*(char)
,	O
0	int
,	O
file	*(char)
,	O
line	int
)	O
;	O
inParagraph	int
=	O
1	int
;	O
}	O
voc	int
=	O
oc	int
;	O
}	O
if	O
(	O
!	O
inParagraph	int
)	O
process	*((*(char),long,*(char),int)->(void))
(	O
""	*(char)
,	O
0	int
,	O
file	*(char)
,	O
line	int
)	O
;	O
regfree	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(void)
(	O
&	O
hashLine	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
;	O
}	O
