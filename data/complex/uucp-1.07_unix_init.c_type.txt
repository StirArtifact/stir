extern	O
char	O
*	O
getlogin	()->(*(char))
(	O
)	O
;	O
extern	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
)	O
;	O
extern	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
)	O
;	O
extern	O
char	O
*	O
getcwd	(*(char),long)->(*(char))
(	O
)	O
;	O
extern	O
long	O
sysconf	(int)->(long)
(	O
)	O
;	O
static	O
char	O
*	O
zSlogin	*(char)
;	O
const	O
char	O
*	O
zSspooldir	*(char)
;	O
const	O
char	O
*	O
zSlockdir	*(char)
;	O
const	O
char	O
*	O
zSlocalname	*(char)
;	O
char	O
*	O
zScwd	*(char)
;	O
size_t	long
cSysdep_max_name_len	long
=	O
255	int
;	O
void	O
usysdep_initialize	(*(void),int)->(void)
(	O
puuconf	*(void)
,	O
iflags	int
)	O
pointer	*(void)
puuconf	*(void)
;	O
int	O
iflags	int
;	O
{	O
int	O
iuuconf	int
;	O
char	O
*	O
z	*(char)
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
q	*(struct)
;	O
ulog_id	(int)->(void)
(	O
getpid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
(	O
iflags	int
&	O
INIT_NOCLOSE	O
)	O
==	O
0	int
)	O
{	O
int	O
cdescs	int
;	O
int	O
o	int
;	O
cdescs	int
=	O
getdtablesize	()->(int)
(	O
)	O
;	O
for	O
(	O
o	int
=	O
3	int
;	O
o	int
<	O
cdescs	int
;	O
o	int
++	O
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
o	int
)	O
;	O
}	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
0	int
,	O
F_GETFD	int
,	O
0	int
)	O
<	O
0	int
&&	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
"/dev/null"	*(char)
,	O
O_RDONLY	int
,	O
0	int
)	O
!=	O
0	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
1	int
,	O
F_GETFD	int
,	O
0	int
)	O
<	O
0	int
&&	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
"/dev/null"	*(char)
,	O
O_WRONLY	int
,	O
0	int
)	O
!=	O
1	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
if	O
(	O
fcntl	(int,int)->(int)
(	O
2	int
,	O
F_GETFD	int
,	O
0	int
)	O
<	O
0	int
&&	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
"/dev/null"	*(char)
,	O
O_WRONLY	int
,	O
0	int
)	O
!=	O
2	int
)	O
exit	(int)->(void)
(	O
EXIT_FAILURE	int
)	O
;	O
iuuconf	int
=	O
uuconf_spooldir	(*(void),*(*(char)))->(int)
(	O
puuconf	*(void)
,	O
&	O
zSspooldir	*(char)
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	(enum(int,int,int,int,int,int,int),*(void),int)->(void)
(	O
LOG_FATAL	int
,	O
puuconf	*(void)
,	O
iuuconf	int
)	O
;	O
iuuconf	int
=	O
uuconf_lockdir	(*(void),*(*(char)))->(int)
(	O
puuconf	*(void)
,	O
&	O
zSlockdir	*(char)
)	O
;	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	(enum(int,int,int,int,int,int,int),*(void),int)->(void)
(	O
LOG_FATAL	int
,	O
puuconf	*(void)
,	O
iuuconf	int
)	O
;	O
iuuconf	int
=	O
uuconf_localname	(*(void),*(*(char)))->(int)
(	O
puuconf	*(void)
,	O
&	O
zSlocalname	*(char)
)	O
;	O
if	O
(	O
iuuconf	int
==	O
UUCONF_NOT_FOUND	O
)	O
{	O
char	O
ab	array(char)
[	O
256	int
]	O
;	O
if	O
(	O
gethostname	(*(char),long)->(int)
(	O
ab	array(char)
,	O
sizeof	O
ab	array(char)
-	O
1	int
)	O
<	O
0	int
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_FATAL	int
,	O
"gethostname: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ab	array(char)
[	O
sizeof	O
ab	array(char)
-	O
1	int
]	O
=	O
'\0'	O
;	O
ab	array(char)
[	O
strcspn	(*(char),*(char))->(long)
(	O
ab	array(char)
,	O
"."	*(char)
)	O
]	O
=	O
'\0'	O
;	O
zSlocalname	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
ab	array(char)
)	O
;	O
}	O
else	O
if	O
(	O
iuuconf	int
!=	O
UUCONF_SUCCESS	O
)	O
ulog_uuconf	(enum(int,int,int,int,int,int,int),*(void),int)->(void)
(	O
LOG_FATAL	int
,	O
puuconf	*(void)
,	O
iuuconf	int
)	O
;	O
umask	(int)->(int)
(	O
0	int
)	O
;	O
z	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"LOGNAME"	*(char)
)	O
;	O
if	O
(	O
z	*(char)
==	O
NULL	O
)	O
z	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"USER"	*(char)
)	O
;	O
if	O
(	O
z	*(char)
==	O
NULL	O
)	O
z	*(char)
=	O
getlogin	()->(*(char))
(	O
)	O
;	O
if	O
(	O
z	*(char)
==	O
NULL	O
)	O
q	*(struct)
=	O
NULL	O
;	O
else	O
{	O
q	*(struct)
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
z	*(char)
)	O
;	O
if	O
(	O
q	*(struct)
!=	O
NULL	O
)	O
z	*(char)
=	O
q	*(struct)
->	O
pw_name	*(char)
;	O
}	O
if	O
(	O
q	*(struct)
==	O
NULL	O
||	O
q	*(struct)
->	O
pw_uid	int
!=	O
getuid	()->(int)
(	O
)	O
)	O
{	O
q	*(struct)
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
q	*(struct)
==	O
NULL	O
)	O
z	*(char)
=	O
NULL	O
;	O
else	O
z	*(char)
=	O
q	*(struct)
->	O
pw_name	*(char)
;	O
}	O
if	O
(	O
z	*(char)
!=	O
NULL	O
)	O
zSlogin	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
z	*(char)
)	O
;	O
if	O
(	O
(	O
iflags	int
&	O
INIT_SUID	O
)	O
!=	O
0	int
&&	O
geteuid	()->(int)
(	O
)	O
==	O
0	int
)	O
{	O
q	*(struct)
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
OWNER	*(char)
)	O
;	O
if	O
(	O
q	*(struct)
!=	O
NULL	O
)	O
setuid	(int)->(int)
(	O
q	*(struct)
->	O
pw_uid	int
)	O
;	O
}	O
if	O
(	O
(	O
iflags	int
&	O
INIT_GETCWD	O
)	O
!=	O
0	int
)	O
{	O
const	O
char	O
*	O
zenv	*(char)
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
senv	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
sdot	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
zenv	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"PWD"	*(char)
)	O
;	O
if	O
(	O
zenv	*(char)
!=	O
NULL	O
&&	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
(	O
char	O
*	O
)	O
zenv	*(char)
,	O
&	O
senv	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
(	O
char	O
*	O
)	O
"."	*(char)
,	O
&	O
sdot	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
&&	O
senv	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
==	O
sdot	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
&&	O
senv	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
==	O
sdot	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
)	O
zScwd	*(char)
=	O
zbufcpy	(*(char))->(*(char))
(	O
zenv	*(char)
)	O
;	O
else	O
{	O
{	O
size_t	long
c	long
;	O
c	long
=	O
128	int
;	O
while	O
(	O
TRUE	O
)	O
{	O
zScwd	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
c	long
)	O
;	O
if	O
(	O
getcwd	(*(char),long)->(*(char))
(	O
zScwd	*(char)
,	O
c	long
)	O
!=	O
NULL	O
)	O
break	O
;	O
xfree	(*(void))->(void)
(	O
(	O
pointer	*(void)
)	O
zScwd	*(char)
)	O
;	O
zScwd	*(char)
=	O
NULL	O
;	O
if	O
(	O
errno	O
!=	O
ERANGE	int
)	O
break	O
;	O
c	long
<<=	O
1	int
;	O
}	O
}	O
if	O
(	O
zScwd	*(char)
!=	O
NULL	O
)	O
zScwd	*(char)
=	O
(	O
char	O
*	O
)	O
xrealloc	(*(void),long)->(*(void))
(	O
(	O
pointer	*(void)
)	O
zScwd	*(char)
,	O
strlen	(*(char))->(long)
(	O
zScwd	*(char)
)	O
+	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
(	O
iflags	int
&	O
INIT_NOCHDIR	O
)	O
==	O
0	int
)	O
{	O
if	O
(	O
chdir	(*(char))->(int)
(	O
zSspooldir	*(char)
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
&&	O
mkdir	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
zSspooldir	*(char)
,	O
IDIRECTORY_MODE	O
)	O
<	O
0	int
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_FATAL	int
,	O
"mkdir (%s): %s"	*(char)
,	O
zSspooldir	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
chdir	(*(char))->(int)
(	O
zSspooldir	*(char)
)	O
<	O
0	int
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_FATAL	int
,	O
"chdir (%s): %s"	*(char)
,	O
zSspooldir	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
}	O
}	O
void	O
usysdep_exit	(int)->(void)
(	O
fsuccess	int
)	O
boolean	int
fsuccess	int
;	O
{	O
exit	(int)->(void)
(	O
fsuccess	int
?	O
EXIT_SUCCESS	int
:	O
EXIT_FAILURE	int
)	O
;	O
}	O
boolean	int
fsysdep_other_config	(*(char))->(int)
(	O
z	*(char)
)	O
const	O
char	O
*	O
z	*(char)
ATTRIBUTE_UNUSED	O
;	O
{	O
(	O
void	O
)	O
setuid	(int)->(int)
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
(	O
void	O
)	O
setgid	(int)->(int)
(	O
getgid	()->(int)
(	O
)	O
)	O
;	O
return	O
TRUE	O
;	O
}	O
const	O
char	O
*	O
zsysdep_localname	()->(*(char))
(	O
)	O
{	O
return	O
zSlocalname	*(char)
;	O
}	O
const	O
char	O
*	O
zsysdep_login_name	()->(*(char))
(	O
)	O
{	O
if	O
(	O
zSlogin	*(char)
==	O
NULL	O
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_FATAL	int
,	O
"Can't get login name"	*(char)
)	O
;	O
return	O
zSlogin	*(char)
;	O
}	O
