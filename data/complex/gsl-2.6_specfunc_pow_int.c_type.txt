int	O
gsl_sf_pow_int_e	(double,int,*(struct(double,double)))->(int)
(	O
double	O
x	double
,	O
int	O
n	int
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
double	O
value	double
=	O
1.0	int
;	O
int	O
count	int
=	O
0	int
;	O
if	O
(	O
n	int
<	O
0	int
)	O
{	O
n	int
=	O
-	O
n	int
;	O
if	O
(	O
x	double
==	O
0.0	int
)	O
{	O
double	O
u	double
=	O
1.0	int
/	O
x	double
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
n	int
%	O
2	int
)	O
?	O
u	double
:	O
(	O
u	double
*	O
u	double
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
GSL_POSINF	O
;	O
GSL_ERROR	O
(	O
"overflow"	*(char)
,	O
GSL_EOVRFLW	int
)	O
;	O
}	O
x	double
=	O
1.0	int
/	O
x	double
;	O
}	O
do	O
{	O
if	O
(	O
GSL_IS_ODD	O
(	O
n	int
)	O
)	O
value	double
*=	O
x	double
;	O
n	int
>>=	O
1	int
;	O
x	double
*=	O
x	double
;	O
++	O
count	int
;	O
}	O
while	O
(	O
n	int
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
value	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
(	O
count	int
+	O
1.0	int
)	O
*	O
fabs	(double)->(double)
(	O
value	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
double	O
gsl_sf_pow_int	(double,int)->(double)
(	O
const	O
double	O
x	double
,	O
const	O
int	O
n	int
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_pow_int_e	(double,int,*(struct(double,double)))->(int)
(	O
x	double
,	O
n	int
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
