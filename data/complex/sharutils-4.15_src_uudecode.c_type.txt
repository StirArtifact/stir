static	O
char	O
const	O
cright_years_z	array(char)
[	O
]	O
=	O
"1994-2015"	*(char)
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
)	O
;	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
read_stduu	(*(char),*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
const	O
char	O
*	O
inname	*(char)
,	O
const	O
char	O
*	O
outname	*(char)
)	O
;	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
read_base64	(*(char),*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
const	O
char	O
*	O
inname	*(char)
,	O
const	O
char	O
*	O
outname	*(char)
)	O
;	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
decode	(*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
const	O
char	O
*	O
in_name	*(char)
)	O
;	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
read_stduu	(*(char),*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
const	O
*	O
inname	*(char)
,	O
char	O
const	O
*	O
outname	*(char)
)	O
{	O
char	O
buf	array(char)
[	O
2	int
*	O
BUFSIZ	int
]	O
;	O
while	O
(	O
1	int
)	O
{	O
int	O
n	int
;	O
char	O
*	O
p	*(void)
=	O
buf	array(char)
;	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
(	O
char	O
*	O
)	O
buf	array(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
NULL	O
)	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: Short file"	*(char)
)	O
,	O
inname	*(char)
)	O
;	O
n	int
=	O
DEC	O
(	O
*	O
p	*(void)
)	O
;	O
if	O
(	O
n	int
<=	O
0	int
)	O
break	O
;	O
for	O
(	O
++	O
p	*(void)
;	O
n	int
>=	O
3	int
;	O
p	*(void)
+=	O
4	int
,	O
n	int
-=	O
3	int
)	O
{	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	*(void)
[	O
0	int
]	O
)	O
<<	O
2	int
|	O
DEC	O
(	O
p	*(void)
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
;	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	*(void)
[	O
1	int
]	O
)	O
<<	O
4	int
|	O
DEC	O
(	O
p	*(void)
[	O
2	int
]	O
)	O
>>	O
2	int
)	O
;	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	*(void)
[	O
2	int
]	O
)	O
<<	O
6	int
|	O
DEC	O
(	O
p	*(void)
[	O
3	int
]	O
)	O
)	O
;	O
}	O
switch	O
(	O
n	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
1	int
:	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	*(void)
[	O
0	int
]	O
)	O
<<	O
2	int
|	O
DEC	O
(	O
p	*(void)
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
;	O
break	O
;	O
case	O
2	int
:	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	*(void)
[	O
0	int
]	O
)	O
<<	O
2	int
|	O
DEC	O
(	O
p	*(void)
[	O
1	int
]	O
)	O
>>	O
4	int
)	O
;	O
TRY_PUTCHAR	O
(	O
DEC	O
(	O
p	*(void)
[	O
1	int
]	O
)	O
<<	O
4	int
|	O
DEC	O
(	O
p	*(void)
[	O
2	int
]	O
)	O
>>	O
2	int
)	O
;	O
break	O
;	O
}	O
}	O
do	O
{	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	array(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
NULL	O
)	O
break	O
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
!=	O
'e'	O
)	O
break	O
;	O
if	O
(	O
buf	array(char)
[	O
1	int
]	O
!=	O
'n'	O
)	O
break	O
;	O
if	O
(	O
buf	array(char)
[	O
2	int
]	O
!=	O
'd'	O
)	O
break	O
;	O
if	O
(	O
buf	array(char)
[	O
3	int
]	O
==	O
'\n'	O
)	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
if	O
(	O
buf	array(char)
[	O
3	int
]	O
!=	O
'\r'	O
)	O
break	O
;	O
if	O
(	O
buf	array(char)
[	O
4	int
]	O
==	O
'\n'	O
)	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
}	O
while	O
(	O
0	int
)	O
;	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: No `end' line"	*(char)
)	O
,	O
inname	*(char)
)	O
;	O
return	O
UUDECODE_EXIT_INVALID	int
;	O
}	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
read_base64	(*(char),*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
const	O
*	O
inname	*(char)
,	O
char	O
const	O
*	O
outname	*(char)
)	O
{	O
char	O
buf_in	array(char)
[	O
2	int
*	O
BUFSIZ	int
]	O
;	O
char	O
buf_out	array(char)
[	O
2	int
*	O
BUFSIZ	int
]	O
;	O
struct	O
base64_decode_context	struct(int,array(char))
ctx	*(struct(int,array(char)))
;	O
base64_decode_ctx_init	(*(struct(int,array(char))))->(void)
(	O
&	O
ctx	*(struct(int,array(char)))
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
size_t	long
outlen	long
=	O
sizeof	O
(	O
buf_out	array(char)
)	O
;	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf_in	array(char)
,	O
sizeof	O
(	O
buf_in	array(char)
)	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: Short file"	*(char)
)	O
,	O
inname	*(char)
)	O
;	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
buf_in	array(char)
,	O
"===="	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
base64_decode_ctx	(*(struct(int,array(char))),*(char),long,*(char),*(long))->(bool)
(	O
&	O
ctx	*(struct(int,array(char)))
,	O
buf_in	array(char)
,	O
strlen	(*(char))->(long)
(	O
buf_in	array(char)
)	O
,	O
buf_out	array(char)
,	O
&	O
outlen	long
)	O
)	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: invalid input"	*(char)
)	O
,	O
inname	*(char)
)	O
;	O
if	O
(	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf_out	array(char)
,	O
outlen	long
,	O
1	int
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
1	int
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UUDECODE_EXIT_NO_OUTPUT	int
,	O
"fwrite"	*(char)
,	O
outname	*(char)
)	O
;	O
}	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
}	O
static	O
char	O
const	O
*	O
get_env_homedir	()->(*(char))
(	O
void	O
)	O
{	O
char	O
const	O
*	O
res	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"HOME"	*(char)
)	O
;	O
if	O
(	O
res	*(char)
==	O
NULL	O
)	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"cannot expand $HOME"	*(char)
)	O
)	O
;	O
return	O
res	*(char)
;	O
}	O
static	O
char	O
*	O
expand_tilde	(*(char))->(*(char))
(	O
char	O
*	O
buf	array(char)
)	O
{	O
char	O
*	O
outname	*(char)
;	O
char	O
const	O
*	O
homedir	*(char)
;	O
if	O
(	O
buf	array(char)
[	O
1	int
]	O
==	O
'/'	O
)	O
{	O
homedir	*(char)
=	O
get_env_homedir	()->(*(char))
(	O
)	O
;	O
buf	array(char)
+=	O
2	int
;	O
}	O
else	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
pz	*(char)
=	O
buf	array(char)
+	O
1	int
;	O
while	O
(	O
*	O
pz	*(char)
!=	O
'/'	O
)	O
++	O
pz	*(char)
;	O
if	O
(	O
*	O
pz	*(char)
==	O
NUL	char
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: Illegal file name: %s"	*(char)
)	O
,	O
program_name	*(char)
,	O
buf	array(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
*	O
pz	*(char)
++	O
=	O
NUL	char
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
buf	array(char)
+	O
1	int
)	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
==	O
NULL	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"No user '%s'"	*(char)
)	O
,	O
buf	array(char)
+	O
1	int
)	O
;	O
return	O
NULL	O
;	O
}	O
homedir	*(char)
=	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
;	O
buf	array(char)
=	O
pz	*(char)
;	O
}	O
{	O
size_t	long
sz	long
=	O
strlen	(*(char))->(long)
(	O
homedir	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
buf	array(char)
)	O
+	O
2	int
;	O
outname	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
sz	long
)	O
;	O
if	O
(	O
outname	*(char)
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UUDECODE_EXIT_NO_MEM	int
,	O
"malloc"	*(char)
,	O
_	O
(	O
"output file name"	*(char)
)	O
)	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
outname	*(char)
,	O
"%s/%s"	*(char)
,	O
homedir	*(char)
,	O
buf	array(char)
)	O
;	O
return	O
outname	*(char)
;	O
}	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
reopen_output	(*(char),int)->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
const	O
*	O
outname	*(char)
,	O
int	O
mode	int
)	O
{	O
if	O
(	O
!	O
access	(*(char),int)->(int)
(	O
outname	*(char)
,	O
F_OK	int
)	O
)	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
attr	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
outname	*(char)
,	O
&	O
attr	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
-	O
1	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"cannot access %s"	*(char)
)	O
,	O
outname	*(char)
)	O
;	O
return	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
}	O
}	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
freopen	(*(char),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
outname	*(char)
,	O
FOPEN_WRITE_BINARY	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UUDECODE_EXIT_NO_OUTPUT	int
,	O
"freopen"	*(char)
,	O
outname	*(char)
)	O
;	O
}	O
if	O
(	O
UU_CHMOD	O
(	O
outname	*(char)
,	O
STDOUT_FILENO	int
,	O
mode	int
)	O
!=	O
0	int
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
_	O
(	O
"chmod of %s"	*(char)
)	O
,	O
outname	*(char)
)	O
;	O
if	O
(	O
!	O
HAVE_OPT	O
(	O
IGNORE_CHMOD	O
)	O
)	O
{	O
char	O
const	O
*	O
p	*(void)
=	O
getenv	(*(char))->(*(char))
(	O
"POSIXLY_CORRECT"	*(char)
)	O
;	O
if	O
(	O
p	*(void)
==	O
NULL	O
)	O
return	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
}	O
}	O
return	O
UUDECODE_EXIT_SUCCESS	int
;	O
}	O
static	O
void	O
decode_fname	(*(char))->(void)
(	O
char	O
*	O
buf	array(char)
)	O
{	O
size_t	long
sz	long
=	O
strlen	(*(char))->(long)
(	O
buf	array(char)
)	O
;	O
char	O
*	O
out	*(char)
=	O
malloc	(long)->(*(void))
(	O
2	int
*	O
sz	long
+	O
4	int
)	O
;	O
if	O
(	O
sz	long
==	O
0	int
)	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"output name is empty"	*(char)
)	O
)	O
;	O
{	O
char	O
*	O
tmp	*(char)
=	O
out	*(char)
+	O
sz	long
+	O
4	int
;	O
if	O
(	O
out	*(char)
==	O
NULL	O
)	O
fserr	(int,*(char),*(char))->(void)
(	O
UUDECODE_EXIT_NO_MEM	int
,	O
"malloc"	*(char)
,	O
_	O
(	O
"output file name"	*(char)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
out	*(char)
,	O
buf	array(char)
,	O
sz	long
)	O
;	O
out	*(char)
[	O
sz	long
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
base64_decode	O
(	O
out	*(char)
,	O
sz	long
,	O
tmp	*(char)
,	O
&	O
sz	long
)	O
)	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"invalid base64 encoded name: %s"	*(char)
)	O
,	O
buf	array(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
buf	array(char)
,	O
tmp	*(char)
,	O
sz	long
)	O
;	O
buf	array(char)
[	O
sz	long
]	O
=	O
'\0'	O
;	O
}	O
free	(*(void))->(void)
(	O
out	*(char)
)	O
;	O
}	O
static	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
decode	(*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
char	O
const	O
*	O
inname	*(char)
)	O
{	O
char	O
*	O
pz	*(char)
;	O
int	O
mode	int
;	O
char	O
buf	array(char)
[	O
2	int
*	O
BUFSIZ	int
]	O
=	O
{	O
NUL	char
}	O
;	O
char	O
*	O
outname	*(char)
;	O
bool	bool
allocated_outname	bool
=	O
false	int
;	O
bool	bool
encoded_fname	bool
=	O
false	int
;	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
rval	enum(int,int,int,int,int,int,int,int,int)
;	O
bool	bool
do_base64	bool
=	O
false	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	array(char)
,	O
sizeof	O
(	O
buf	array(char)
)	O
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
NULL	O
)	O
{	O
bad_beginning	O
:	O
die	(int,*(char))->(void)
(	O
UUDECODE_EXIT_INVALID	int
,	O
_	O
(	O
"%s: Invalid or missing 'begin' line\n"	*(char)
)	O
,	O
inname	*(char)
)	O
;	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	array(char)
,	O
"begin"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
scan	*(char)
=	O
buf	array(char)
+	O
5	int
;	O
if	O
(	O
*	O
scan	*(char)
==	O
'-'	O
)	O
{	O
static	O
char	O
const	O
base64	array(char)
[	O
]	O
=	O
"ase64"	*(char)
;	O
static	O
char	O
const	O
encoded	array(char)
[	O
]	O
=	O
"encoded"	*(char)
;	O
check_begin_option	O
:	O
if	O
(	O
*	O
++	O
scan	*(char)
==	O
'b'	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
scan	*(char)
+	O
1	int
,	O
base64	array(char)
,	O
sizeof	O
(	O
base64	array(char)
)	O
-	O
1	int
)	O
!=	O
0	int
)	O
goto	O
bad_beginning	O
;	O
if	O
(	O
do_base64	bool
)	O
goto	O
bad_beginning	O
;	O
do_base64	bool
=	O
true	int
;	O
scan	*(char)
+=	O
sizeof	O
(	O
base64	array(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
scan	*(char)
,	O
encoded	array(char)
,	O
sizeof	O
(	O
encoded	array(char)
)	O
-	O
1	int
)	O
!=	O
0	int
)	O
goto	O
bad_beginning	O
;	O
if	O
(	O
encoded_fname	bool
)	O
goto	O
bad_beginning	O
;	O
encoded_fname	bool
=	O
true	int
;	O
scan	*(char)
+=	O
sizeof	O
(	O
encoded	array(char)
)	O
-	O
1	int
;	O
}	O
switch	O
(	O
*	O
scan	*(char)
)	O
{	O
case	O
' '	O
:	O
break	O
;	O
case	O
'-'	O
:	O
goto	O
check_begin_option	O
;	O
default	O
:	O
goto	O
bad_beginning	O
;	O
}	O
}	O
if	O
(	O
sscanf	(*(char),*(char))->(int)
(	O
scan	*(char)
,	O
" %o %[^\n]"	*(char)
,	O
&	O
mode	int
,	O
buf	array(char)
)	O
==	O
2	int
)	O
break	O
;	O
goto	O
bad_beginning	O
;	O
}	O
}	O
if	O
(	O
HAVE_OPT	O
(	O
OUTPUT_FILE	O
)	O
)	O
outname	*(char)
=	O
(	O
char	O
*	O
)	O
OPT_ARG	O
(	O
OUTPUT_FILE	O
)	O
;	O
else	O
{	O
if	O
(	O
encoded_fname	bool
)	O
decode_fname	(*(char))->(void)
(	O
buf	array(char)
)	O
;	O
if	O
(	O
buf	array(char)
[	O
0	int
]	O
!=	O
'~'	O
)	O
outname	*(char)
=	O
buf	array(char)
;	O
else	O
{	O
outname	*(char)
=	O
expand_tilde	(*(char))->(*(char))
(	O
buf	array(char)
)	O
;	O
if	O
(	O
outname	*(char)
==	O
NULL	O
)	O
return	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
allocated_outname	bool
=	O
true	int
;	O
}	O
pz	*(char)
=	O
outname	*(char)
+	O
strlen	(*(char))->(long)
(	O
outname	*(char)
)	O
;	O
while	O
(	O
(	O
pz	*(char)
>	O
outname	*(char)
)	O
&&	O
isspace	(int)->(int)
(	O
(	O
int	O
)	O
pz	*(char)
[	O
-	O
1	int
]	O
)	O
)	O
pz	*(char)
--	O
;	O
*	O
pz	*(char)
=	O
NUL	char
;	O
}	O
if	O
(	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
outname	*(char)
,	O
"/dev/stdout"	*(char)
)	O
!=	O
0	int
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
outname	*(char)
,	O
"-"	*(char)
)	O
!=	O
0	int
)	O
)	O
{	O
rval	enum(int,int,int,int,int,int,int,int,int)
=	O
reopen_output	(*(char),int)->(enum(int,int,int,int,int,int,int,int,int))
(	O
outname	*(char)
,	O
mode	int
)	O
;	O
if	O
(	O
rval	enum(int,int,int,int,int,int,int,int,int)
!=	O
UUDECODE_EXIT_SUCCESS	int
)	O
goto	O
fail_return	O
;	O
}	O
if	O
(	O
do_base64	bool
)	O
rval	enum(int,int,int,int,int,int,int,int,int)
=	O
read_base64	(*(char),*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
inname	*(char)
,	O
outname	*(char)
)	O
;	O
else	O
rval	enum(int,int,int,int,int,int,int,int,int)
=	O
read_stduu	(*(char),*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
inname	*(char)
,	O
outname	*(char)
)	O
;	O
if	O
(	O
(	O
rval	enum(int,int,int,int,int,int,int,int,int)
==	O
UUDECODE_EXIT_SUCCESS	int
)	O
&&	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
||	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"%s: Write error"	*(char)
)	O
,	O
outname	*(char)
)	O
;	O
rval	enum(int,int,int,int,int,int,int,int,int)
=	O
UUDECODE_EXIT_NO_OUTPUT	int
;	O
}	O
fail_return	O
:	O
if	O
(	O
allocated_outname	bool
)	O
free	(*(void))->(void)
(	O
outname	*(char)
)	O
;	O
return	O
rval	enum(int,int,int,int,int,int,int,int,int)
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
const	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
uudecode_exit_code_t	enum(int,int,int,int,int,int,int,int,int)
exit_status	enum(int,int,int,int,int,int,int,int,int)
=	O
UUDECODE_EXIT_SUCCESS	int
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
{	O
int	O
ct	int
=	O
optionProcess	(*(struct(int,int,*(*(char)),int,int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(*(char)),*(char),*(char),*(char),*(struct(short,short,short,short,short,short,short,short,int,int,union`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(void),*(void),*((*`,int)->(void)),*(()->(void)),struct(short,short,short,short),int,int,*(char),*(char),*(union(*`,long,long,long,long,int,*`,int)),*(*(void)),*(char),*(char))),int,*(*(char)))->(int)
(	O
&	O
uudecodeOptions	struct(int,int,*(*(char)),int,int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(*(char)),*(char),*(char),*(char),*(struct(short,short,short,short,short,short,short,short,int,int,union(*(char),long,long,long,long,int,*(struct`),int),*(void),*(int),*(int),*((*`,*`)->(void)),*(char),*(char),*(char),*(char),*(char))),*(char),*(void),*(void),*((*(struct(int,int,*`,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,struct`,int,int,*`,*`,*`,*`,*`,*`)),int)->(void)),*(()->(void)),struct(short,short,short,short),int,int,*(char),*(char),*(union(*(char),long,long,long,long,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int)),*(*(void)),*(char),*(char))
,	O
argc	int
,	O
(	O
char	O
*	O
*	O
)	O
(	O
void	O
*	O
)	O
argv	*(*(char))
)	O
;	O
argc	int
-=	O
ct	int
;	O
argv	*(*(char))
+=	O
ct	int
;	O
}	O
switch	O
(	O
argc	int
)	O
{	O
case	O
0	int
:	O
exit_status	enum(int,int,int,int,int,int,int,int,int)
=	O
decode	(*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
_	O
(	O
"standard input"	*(char)
)	O
)	O
;	O
break	O
;	O
default	O
:	O
if	O
(	O
HAVE_OPT	O
(	O
OUTPUT_FILE	O
)	O
)	O
{	O
usage_message	(*(char))->(void)
(	O
_	O
(	O
"You cannot specify an output file when processing\nmultiple input files.\n"	*(char)
)	O
)	O
;	O
}	O
case	O
1	int
:	O
while	O
(	O
--	O
argc	int
>=	O
0	int
)	O
{	O
char	O
const	O
*	O
f	*(char)
=	O
*	O
(	O
argv	*(*(char))
++	O
)	O
;	O
if	O
(	O
freopen	(*(char),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
f	*(char)
,	O
"r"	*(char)
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
NULL	O
)	O
{	O
exit_status	enum(int,int,int,int,int,int,int,int,int)
|=	O
decode	(*(char))->(enum(int,int,int,int,int,int,int,int,int))
(	O
f	*(char)
)	O
;	O
}	O
else	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"%s"	*(char)
,	O
f	*(char)
)	O
;	O
exit_status	enum(int,int,int,int,int,int,int,int,int)
|=	O
UUDECODE_EXIT_NO_INPUT	int
;	O
}	O
}	O
}	O
exit	(int)->(void)
(	O
exit_status	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
}	O
