static	O
int	O
set_default_flags	(*(int))->(int)
(	O
int	O
*	O
flags	int
)	O
{	O
if	O
(	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_TRANSITIONAL	int
)	O
&&	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_NONTRANSITIONAL	int
)	O
)	O
return	O
IDN2_INVALID_FLAGS	int
;	O
if	O
(	O
(	O
(	O
*	O
flags	int
)	O
&	O
(	O
IDN2_TRANSITIONAL	int
|	O
IDN2_NONTRANSITIONAL	int
)	O
)	O
&&	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_NO_TR46	int
)	O
)	O
return	O
IDN2_INVALID_FLAGS	int
;	O
if	O
(	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_ALABEL_ROUNDTRIP	int
)	O
&&	O
(	O
(	O
*	O
flags	int
)	O
&	O
IDN2_NO_ALABEL_ROUNDTRIP	int
)	O
)	O
return	O
IDN2_INVALID_FLAGS	int
;	O
if	O
(	O
!	O
(	O
(	O
*	O
flags	int
)	O
&	O
(	O
IDN2_NO_TR46	int
|	O
IDN2_TRANSITIONAL	int
)	O
)	O
)	O
*	O
flags	int
|=	O
IDN2_NONTRANSITIONAL	int
;	O
return	O
IDN2_OK	int
;	O
}	O
static	O
int	O
label	*(int)
(	O
const	O
uint8_t	char
*	O
src	*(char)
,	O
size_t	long
srclen	long
,	O
uint8_t	char
*	O
dst	*(int)
,	O
size_t	long
*	O
dstlen	*(long)
,	O
int	O
flags	int
)	O
{	O
size_t	long
plen	long
;	O
uint32_t	int
*	O
p	*(int)
;	O
const	O
uint8_t	char
*	O
src_org	*(char)
=	O
NULL	O
;	O
uint8_t	char
*	O
src_allocated	*(char)
=	O
NULL	O
;	O
int	O
rc	int
,	O
check_roundtrip	int
=	O
0	int
;	O
size_t	long
tmpl	long
,	O
srclen_org	long
=	O
0	int
;	O
uint32_t	int
label_u32	array(int)
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
label32_len	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
if	O
(	O
_idn2_ascii_p	(*(char),long)->(bool)
(	O
src	*(char)
,	O
srclen	long
)	O
)	O
{	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_NO_ALABEL_ROUNDTRIP	int
)	O
&&	O
srclen	long
>=	O
4	int
&&	O
memcmp	(*(void),*(void),long)->(int)
(	O
src	*(char)
,	O
"xn--"	*(char)
,	O
4	int
)	O
==	O
0	int
)	O
{	O
rc	int
=	O
_idn2_punycode_decode_internal	(long,array(char),*(long),array(int))->(int)
(	O
srclen	long
-	O
4	int
,	O
(	O
char	O
*	O
)	O
src	*(char)
+	O
4	int
,	O
&	O
label32_len	long
,	O
label_u32	array(int)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
check_roundtrip	int
=	O
1	int
;	O
src_org	*(char)
=	O
src	*(char)
;	O
srclen_org	long
=	O
srclen	long
;	O
srclen	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
src	*(char)
=	O
src_allocated	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
label_u32	array(int)
,	O
label32_len	long
,	O
NULL	O
,	O
&	O
srclen	long
)	O
;	O
if	O
(	O
!	O
src	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
srclen	long
>	O
IDN2_LABEL_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_LABEL	int
;	O
if	O
(	O
srclen	long
>	O
*	O
dstlen	*(long)
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
dst	*(int)
,	O
src	*(char)
,	O
srclen	long
)	O
;	O
*	O
dstlen	*(long)
=	O
srclen	long
;	O
return	O
IDN2_OK	int
;	O
}	O
}	O
rc	int
=	O
_idn2_u8_to_u32_nfc	(*(char),long,*(*(int)),*(long),int)->(int)
(	O
src	*(char)
,	O
srclen	long
,	O
&	O
p	*(int)
,	O
&	O
plen	long
,	O
flags	int
&	O
IDN2_NFC_INPUT	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
goto	O
out	*(int)
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_TRANSITIONAL	int
)	O
)	O
{	O
rc	int
=	O
_idn2_label_test	(int,*(int),long)->(int)
(	O
TEST_NFC	int
|	O
TEST_2HYPHEN	int
|	O
TEST_LEADING_COMBINING	int
|	O
TEST_DISALLOWED	int
|	O
TEST_CONTEXTJ_RULE	int
|	O
TEST_CONTEXTO_WITH_RULE	int
|	O
TEST_UNASSIGNED	int
|	O
TEST_BIDI	int
|	O
(	O
(	O
flags	int
&	O
IDN2_NONTRANSITIONAL	int
)	O
?	O
TEST_NONTRANSITIONAL	int
:	O
0	int
)	O
|	O
(	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
?	O
0	int
:	O
TEST_ALLOW_STD3_DISALLOWED	int
)	O
,	O
p	*(int)
,	O
plen	long
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
{	O
free	(*(void))->(void)
(	O
p	*(int)
)	O
;	O
goto	O
out	*(int)
;	O
}	O
}	O
dst	*(int)
[	O
0	int
]	O
=	O
'x'	O
;	O
dst	*(int)
[	O
1	int
]	O
=	O
'n'	O
;	O
dst	*(int)
[	O
2	int
]	O
=	O
'-'	O
;	O
dst	*(int)
[	O
3	int
]	O
=	O
'-'	O
;	O
tmpl	long
=	O
*	O
dstlen	*(long)
-	O
4	int
;	O
rc	int
=	O
_idn2_punycode_encode_internal	(long,array(int),*(long),array(char))->(int)
(	O
plen	long
,	O
p	*(int)
,	O
&	O
tmpl	long
,	O
(	O
char	O
*	O
)	O
dst	*(int)
+	O
4	int
)	O
;	O
free	(*(void))->(void)
(	O
p	*(int)
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
goto	O
out	*(int)
;	O
*	O
dstlen	*(long)
=	O
4	int
+	O
tmpl	long
;	O
if	O
(	O
check_roundtrip	int
)	O
{	O
if	O
(	O
srclen_org	long
!=	O
*	O
dstlen	*(long)
||	O
c_strncasecmp	(*(char),*(char),long)->(int)
(	O
(	O
char	O
*	O
)	O
src_org	*(char)
,	O
(	O
char	O
*	O
)	O
dst	*(int)
,	O
srclen_org	long
)	O
)	O
{	O
rc	int
=	O
IDN2_ALABEL_ROUNDTRIP_FAILED	int
;	O
goto	O
out	*(int)
;	O
}	O
}	O
rc	int
=	O
IDN2_OK	int
;	O
out	*(int)
:	O
free	(*(void))->(void)
(	O
src_allocated	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
_tr46	(*(char),*(*(char)),int)->(int)
(	O
const	O
uint8_t	char
*	O
domain_u8	*(char)
,	O
uint8_t	char
*	O
*	O
out	*(int)
,	O
int	O
flags	int
)	O
{	O
size_t	long
len	long
,	O
it	long
;	O
uint32_t	int
*	O
domain_u32	*(int)
;	O
int	O
err	int
=	O
IDN2_OK	int
,	O
rc	int
;	O
int	O
transitional	int
=	O
0	int
;	O
int	O
test_flags	int
;	O
if	O
(	O
flags	int
&	O
IDN2_TRANSITIONAL	int
)	O
transitional	int
=	O
1	int
;	O
if	O
(	O
!	O
(	O
domain_u32	*(int)
=	O
u8_to_u32	(*(char),long,*(int),*(long))->(*(int))
(	O
domain_u8	*(char)
,	O
u8_strlen	(*(char))->(long)
(	O
domain_u8	*(char)
)	O
+	O
1	int
,	O
NULL	O
,	O
&	O
len	long
)	O
)	O
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
size_t	long
len2	long
=	O
0	int
;	O
for	O
(	O
it	long
=	O
0	int
;	O
it	long
<	O
len	long
-	O
1	int
;	O
it	long
++	O
)	O
{	O
IDNAMap	struct(int,short,int,int,int)
map	*(struct(int,short,int,int,int))
;	O
get_idna_map	(int,*(struct(int,short,int,int,int)))->(int)
(	O
domain_u32	*(int)
[	O
it	long
]	O
,	O
&	O
map	*(struct(int,short,int,int,int))
)	O
;	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DISALLOWED	int
)	O
)	O
{	O
if	O
(	O
domain_u32	*(int)
[	O
it	long
]	O
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
IDN2_DISALLOWED	int
;	O
}	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
map	*(struct(int,short,int,int,int))
.	O
nmappings	int
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_VALID	int
)	O
)	O
{	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_IGNORED	int
)	O
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DEVIATION	int
)	O
)	O
{	O
if	O
(	O
transitional	int
)	O
{	O
len2	long
+=	O
map	*(struct(int,short,int,int,int))
.	O
nmappings	int
;	O
}	O
else	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
{	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DISALLOWED_STD3_VALID	int
)	O
)	O
{	O
len2	long
++	O
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DISALLOWED_STD3_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
map	*(struct(int,short,int,int,int))
.	O
nmappings	int
;	O
}	O
}	O
}	O
if	O
(	O
len2	long
>=	O
IDN2_DOMAIN_MAX_LENGTH	int
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
}	O
uint32_t	int
*	O
tmp	*(int)
=	O
(	O
uint32_t	int
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
len2	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
if	O
(	O
!	O
tmp	*(int)
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
IDN2_MALLOC	int
;	O
}	O
len2	long
=	O
0	int
;	O
for	O
(	O
it	long
=	O
0	int
;	O
it	long
<	O
len	long
-	O
1	int
;	O
it	long
++	O
)	O
{	O
uint32_t	int
c	char
=	O
domain_u32	*(int)
[	O
it	long
]	O
;	O
IDNAMap	struct(int,short,int,int,int)
map	*(struct(int,short,int,int,int))
;	O
get_idna_map	(int,*(struct(int,short,int,int,int)))->(int)
(	O
c	char
,	O
&	O
map	*(struct(int,short,int,int,int))
)	O
;	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DISALLOWED	int
)	O
)	O
{	O
tmp	*(int)
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
get_map_data	(*(int),*(struct(int,short,int,int,int)))->(int)
(	O
tmp	*(int)
+	O
len2	long
,	O
&	O
map	*(struct(int,short,int,int,int))
)	O
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_VALID	int
)	O
)	O
{	O
tmp	*(int)
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_IGNORED	int
)	O
)	O
{	O
continue	O
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DEVIATION	int
)	O
)	O
{	O
if	O
(	O
transitional	int
)	O
{	O
len2	long
+=	O
get_map_data	(*(int),*(struct(int,short,int,int,int)))->(int)
(	O
tmp	*(int)
+	O
len2	long
,	O
&	O
map	*(struct(int,short,int,int,int))
)	O
;	O
}	O
else	O
tmp	*(int)
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
{	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DISALLOWED_STD3_VALID	int
)	O
)	O
{	O
tmp	*(int)
[	O
len2	long
++	O
]	O
=	O
c	char
;	O
}	O
else	O
if	O
(	O
map_is	(*(struct(int,short,int,int,int)),int)->(int)
(	O
&	O
map	*(struct(int,short,int,int,int))
,	O
TR46_FLG_DISALLOWED_STD3_MAPPED	int
)	O
)	O
{	O
len2	long
+=	O
get_map_data	(*(int),*(struct(int,short,int,int,int)))->(int)
(	O
tmp	*(int)
+	O
len2	long
,	O
&	O
map	*(struct(int,short,int,int,int))
)	O
;	O
}	O
}	O
}	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
tmp	*(int)
[	O
len2	long
]	O
=	O
0	int
;	O
domain_u32	*(int)
=	O
u32_normalize	(*(struct),*(int),long,*(int),*(long))->(*(int))
(	O
UNINORM_NFC	O
,	O
tmp	*(int)
,	O
len2	long
+	O
1	int
,	O
NULL	O
,	O
&	O
len	long
)	O
;	O
free	(*(void))->(void)
(	O
tmp	*(int)
)	O
;	O
tmp	*(int)
=	O
NULL	O
;	O
if	O
(	O
!	O
domain_u32	*(int)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
uint32_t	int
*	O
e	*(int)
,	O
*	O
s	*(char)
;	O
for	O
(	O
e	*(int)
=	O
s	*(char)
=	O
domain_u32	*(int)
;	O
*	O
e	*(int)
;	O
s	*(char)
=	O
e	*(int)
)	O
{	O
while	O
(	O
*	O
e	*(int)
&&	O
*	O
e	*(int)
!=	O
'.'	O
)	O
e	*(int)
++	O
;	O
if	O
(	O
e	*(int)
-	O
s	*(char)
>=	O
4	int
&&	O
s	*(char)
[	O
0	int
]	O
==	O
'x'	O
&&	O
s	*(char)
[	O
1	int
]	O
==	O
'n'	O
&&	O
s	*(char)
[	O
2	int
]	O
==	O
'-'	O
&&	O
s	*(char)
[	O
3	int
]	O
==	O
'-'	O
)	O
{	O
size_t	long
ace_len	long
;	O
uint32_t	int
name_u32	array(int)
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
name_len	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
uint8_t	char
*	O
ace	*(char)
;	O
ace	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
s	*(char)
+	O
4	int
,	O
e	*(int)
-	O
s	*(char)
-	O
4	int
,	O
NULL	O
,	O
&	O
ace_len	long
)	O
;	O
if	O
(	O
!	O
ace	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
_idn2_punycode_decode_internal	(long,array(char),*(long),array(int))->(int)
(	O
ace_len	long
,	O
(	O
char	O
*	O
)	O
ace	*(char)
,	O
&	O
name_len	long
,	O
name_u32	array(int)
)	O
;	O
free	(*(void))->(void)
(	O
ace	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
rc	int
;	O
}	O
test_flags	int
=	O
TR46_NONTRANSITIONAL_CHECK	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
test_flags	int
|=	O
TEST_ALLOW_STD3_DISALLOWED	int
;	O
if	O
(	O
(	O
rc	int
=	O
_idn2_label_test	(int,*(int),long)->(int)
(	O
test_flags	int
,	O
name_u32	array(int)
,	O
name_len	long
)	O
)	O
)	O
err	int
=	O
rc	int
;	O
}	O
else	O
{	O
test_flags	int
=	O
transitional	int
?	O
TR46_TRANSITIONAL_CHECK	O
:	O
TR46_NONTRANSITIONAL_CHECK	O
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_USE_STD3_ASCII_RULES	int
)	O
)	O
test_flags	int
|=	O
TEST_ALLOW_STD3_DISALLOWED	int
;	O
if	O
(	O
(	O
rc	int
=	O
_idn2_label_test	(int,*(int),long)->(int)
(	O
test_flags	int
,	O
s	*(char)
,	O
e	*(int)
-	O
s	*(char)
)	O
)	O
)	O
err	int
=	O
rc	int
;	O
}	O
if	O
(	O
*	O
e	*(int)
)	O
e	*(int)
++	O
;	O
}	O
if	O
(	O
err	int
==	O
IDN2_OK	int
&&	O
out	*(int)
)	O
{	O
uint8_t	char
*	O
_out	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
domain_u32	*(int)
,	O
len	long
,	O
NULL	O
,	O
&	O
len	long
)	O
;	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
if	O
(	O
!	O
_out	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
*	O
out	*(int)
=	O
_out	*(char)
;	O
}	O
else	O
free	(*(void))->(void)
(	O
domain_u32	*(int)
)	O
;	O
return	O
err	int
;	O
}	O
int	O
idn2_lookup_u8	(*(char),*(*(char)),int)->(int)
(	O
const	O
uint8_t	char
*	O
src	*(char)
,	O
uint8_t	char
*	O
*	O
lookupname	*(*(char))
,	O
int	O
flags	int
)	O
{	O
size_t	long
lookupnamelen	long
=	O
0	int
;	O
uint8_t	char
_lookupname	array(char)
[	O
IDN2_DOMAIN_MAX_LENGTH	int
+	O
1	int
]	O
;	O
uint8_t	char
_mapped	array(char)
[	O
IDN2_DOMAIN_MAX_LENGTH	int
+	O
1	int
]	O
;	O
int	O
rc	int
;	O
if	O
(	O
src	*(char)
==	O
NULL	O
)	O
{	O
if	O
(	O
lookupname	*(*(char))
)	O
*	O
lookupname	*(*(char))
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
rc	int
=	O
set_default_flags	(*(int))->(int)
(	O
&	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
(	O
flags	int
&	O
IDN2_NO_TR46	int
)	O
)	O
{	O
uint8_t	char
*	O
out	*(int)
;	O
size_t	long
outlen	*(long)
;	O
rc	int
=	O
_tr46	(*(char),*(*(char)),int)->(int)
(	O
src	*(char)
,	O
&	O
out	*(int)
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
outlen	*(long)
=	O
u8_strlen	(*(char))->(long)
(	O
out	*(int)
)	O
;	O
if	O
(	O
outlen	*(long)
>=	O
sizeof	O
(	O
_mapped	array(char)
)	O
)	O
{	O
free	(*(void))->(void)
(	O
out	*(int)
)	O
;	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
_mapped	array(char)
,	O
out	*(int)
,	O
outlen	*(long)
+	O
1	int
)	O
;	O
src	*(char)
=	O
_mapped	array(char)
;	O
free	(*(void))->(void)
(	O
out	*(int)
)	O
;	O
}	O
do	O
{	O
const	O
uint8_t	char
*	O
end	*(char)
=	O
(	O
uint8_t	char
*	O
)	O
strchrnul	(*(char),int)->(*(char))
(	O
(	O
const	O
char	O
*	O
)	O
src	*(char)
,	O
'.'	O
)	O
;	O
size_t	long
labellen	long
=	O
end	*(char)
-	O
src	*(char)
;	O
uint8_t	char
tmp	*(int)
[	O
IDN2_LABEL_MAX_LENGTH	int
]	O
;	O
size_t	long
tmplen	long
=	O
IDN2_LABEL_MAX_LENGTH	int
;	O
rc	int
=	O
label	*(int)
(	O
src	*(char)
,	O
labellen	long
,	O
tmp	*(int)
,	O
&	O
tmplen	long
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
!=	O
IDN2_OK	int
)	O
return	O
rc	int
;	O
if	O
(	O
lookupnamelen	long
+	O
tmplen	long
>	O
IDN2_DOMAIN_MAX_LENGTH	int
-	O
(	O
tmplen	long
==	O
0	int
&&	O
*	O
end	*(char)
==	O
'\0'	O
?	O
1	int
:	O
2	int
)	O
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
_lookupname	array(char)
+	O
lookupnamelen	long
,	O
tmp	*(int)
,	O
tmplen	long
)	O
;	O
lookupnamelen	long
+=	O
tmplen	long
;	O
if	O
(	O
*	O
end	*(char)
==	O
'.'	O
)	O
{	O
if	O
(	O
lookupnamelen	long
+	O
1	int
>	O
IDN2_DOMAIN_MAX_LENGTH	int
)	O
return	O
IDN2_TOO_BIG_DOMAIN	int
;	O
_lookupname	array(char)
[	O
lookupnamelen	long
]	O
=	O
'.'	O
;	O
lookupnamelen	long
++	O
;	O
}	O
_lookupname	array(char)
[	O
lookupnamelen	long
]	O
=	O
'\0'	O
;	O
src	*(char)
=	O
end	*(char)
;	O
}	O
while	O
(	O
*	O
src	*(char)
++	O
)	O
;	O
if	O
(	O
lookupname	*(*(char))
)	O
{	O
uint8_t	char
*	O
tmp	*(int)
=	O
(	O
uint8_t	char
*	O
)	O
malloc	(long)->(*(void))
(	O
lookupnamelen	long
+	O
1	int
)	O
;	O
if	O
(	O
tmp	*(int)
==	O
NULL	O
)	O
return	O
IDN2_MALLOC	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
tmp	*(int)
,	O
_lookupname	array(char)
,	O
lookupnamelen	long
+	O
1	int
)	O
;	O
*	O
lookupname	*(*(char))
=	O
tmp	*(int)
;	O
}	O
return	O
IDN2_OK	int
;	O
}	O
int	O
idn2_lookup_ul	(*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
src	*(char)
,	O
char	O
*	O
*	O
lookupname	*(*(char))
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
utf8src	*(char)
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
src	*(char)
)	O
{	O
const	O
char	O
*	O
encoding	*(char)
=	O
locale_charset	()->(*(char))
(	O
)	O
;	O
utf8src	*(char)
=	O
u8_strconv_from_encoding	(*(char),*(char),enum(int,int,int))->(*(char))
(	O
src	*(char)
,	O
encoding	*(char)
,	O
iconveh_error	int
)	O
;	O
if	O
(	O
!	O
utf8src	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ICONV_FAIL	int
;	O
}	O
}	O
rc	int
=	O
idn2_lookup_u8	(*(char),*(*(char)),int)->(int)
(	O
utf8src	*(char)
,	O
(	O
uint8_t	char
*	O
*	O
)	O
lookupname	*(*(char))
,	O
flags	int
|	O
IDN2_NFC_INPUT	int
)	O
;	O
free	(*(void))->(void)
(	O
utf8src	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_4i	(*(int),long,*(char),int)->(int)
(	O
const	O
uint32_t	int
*	O
input	*(int)
,	O
size_t	long
inlen	long
,	O
char	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
char	O
*	O
out	*(int)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	*(int)
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
0	int
;	O
return	O
IDN2_OK	int
;	O
}	O
rc	int
=	O
idn2_to_ascii_4i2	(*(int),long,*(*(char)),int)->(int)
(	O
input	*(int)
,	O
inlen	long
,	O
&	O
out	*(int)
,	O
flags	int
)	O
;	O
if	O
(	O
rc	int
==	O
IDN2_OK	int
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
out	*(int)
)	O
;	O
if	O
(	O
len	long
>	O
63	int
)	O
rc	int
=	O
IDN2_TOO_BIG_DOMAIN	int
;	O
else	O
if	O
(	O
output	*(char)
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
output	*(char)
,	O
out	*(int)
,	O
len	long
)	O
;	O
free	(*(void))->(void)
(	O
out	*(int)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_4i2	(*(int),long,*(*(char)),int)->(int)
(	O
const	O
uint32_t	int
*	O
input	*(int)
,	O
size_t	long
inlen	long
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
uint32_t	int
*	O
input_u32	*(int)
;	O
uint8_t	char
*	O
input_u8	*(char)
,	O
*	O
output_u8	*(char)
;	O
size_t	long
length	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	*(int)
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
input_u32	*(int)
=	O
(	O
uint32_t	int
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
inlen	long
+	O
1	int
)	O
*	O
sizeof	O
(	O
uint32_t	int
)	O
)	O
;	O
if	O
(	O
!	O
input_u32	*(int)
)	O
return	O
IDN2_MALLOC	int
;	O
u32_cpy	(*(int),*(int),long)->(*(int))
(	O
input_u32	*(int)
,	O
input	*(int)
,	O
inlen	long
)	O
;	O
input_u32	*(int)
[	O
inlen	long
]	O
=	O
0	int
;	O
input_u8	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
input_u32	*(int)
,	O
inlen	long
+	O
1	int
,	O
NULL	O
,	O
&	O
length	long
)	O
;	O
free	(*(void))->(void)
(	O
input_u32	*(int)
)	O
;	O
if	O
(	O
!	O
input_u8	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
idn2_lookup_u8	(*(char),*(*(char)),int)->(int)
(	O
input_u8	*(char)
,	O
&	O
output_u8	*(char)
,	O
flags	int
)	O
;	O
free	(*(void))->(void)
(	O
input_u8	*(char)
)	O
;	O
if	O
(	O
rc	int
==	O
IDN2_OK	int
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
(	O
char	O
*	O
)	O
output_u8	*(char)
;	O
else	O
free	(*(void))->(void)
(	O
output_u8	*(char)
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_4z	(*(int),*(*(char)),int)->(int)
(	O
const	O
uint32_t	int
*	O
input	*(int)
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
uint8_t	char
*	O
input_u8	*(char)
;	O
size_t	long
length	long
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
input	*(int)
)	O
{	O
if	O
(	O
output	*(char)
)	O
*	O
output	*(char)
=	O
NULL	O
;	O
return	O
IDN2_OK	int
;	O
}	O
input_u8	*(char)
=	O
u32_to_u8	(*(int),long,*(char),*(long))->(*(char))
(	O
input	*(int)
,	O
u32_strlen	(*(int))->(long)
(	O
input	*(int)
)	O
+	O
1	int
,	O
NULL	O
,	O
&	O
length	long
)	O
;	O
if	O
(	O
!	O
input_u8	*(char)
)	O
{	O
if	O
(	O
errno	O
==	O
ENOMEM	int
)	O
return	O
IDN2_MALLOC	int
;	O
return	O
IDN2_ENCODING_ERROR	int
;	O
}	O
rc	int
=	O
idn2_lookup_u8	(*(char),*(*(char)),int)->(int)
(	O
input_u8	*(char)
,	O
(	O
uint8_t	char
*	O
*	O
)	O
output	*(char)
,	O
flags	int
)	O
;	O
free	(*(void))->(void)
(	O
input_u8	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
idn2_to_ascii_8z	(*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
input	*(int)
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
return	O
idn2_lookup_u8	(*(char),*(*(char)),int)->(int)
(	O
(	O
const	O
uint8_t	char
*	O
)	O
input	*(int)
,	O
(	O
uint8_t	char
*	O
*	O
)	O
output	*(char)
,	O
flags	int
)	O
;	O
}	O
int	O
idn2_to_ascii_lz	(*(char),*(*(char)),int)->(int)
(	O
const	O
char	O
*	O
input	*(int)
,	O
char	O
*	O
*	O
output	*(char)
,	O
int	O
flags	int
)	O
{	O
return	O
idn2_lookup_ul	(*(char),*(*(char)),int)->(int)
(	O
input	*(int)
,	O
output	*(char)
,	O
flags	int
)	O
;	O
}	O
