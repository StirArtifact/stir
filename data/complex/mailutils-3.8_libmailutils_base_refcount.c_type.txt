struct	O
_mu_refcount	struct(int,*(struct(*(void),*(void),int,int)))
{	O
unsigned	O
int	O
ref	int
;	O
mu_monitor_t	*(struct(*(void),*(void),int,int))
lock	*(struct(*(void),*(void),int,int))
;	O
}	O
;	O
int	O
mu_refcount_create	(*(*(struct)))->(int)
(	O
mu_refcount_t	*(struct)
*	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
mu_refcount_t	*(struct)
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
;	O
if	O
(	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
*	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
;	O
if	O
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
!=	O
NULL	O
)	O
{	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
ref	int
=	O
1	int
;	O
status	int
=	O
mu_monitor_create	(*(*(struct(*(void),*(void),int,int))),int,*(void))->(int)
(	O
&	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
lock	*(struct(*(void),*(void),int,int))
,	O
0	int
,	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
*	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
=	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
;	O
}	O
}	O
else	O
{	O
status	int
=	O
ENOMEM	int
;	O
}	O
return	O
status	int
;	O
}	O
unsigned	O
mu_refcount_value	(*(struct))->(int)
(	O
mu_refcount_t	*(struct)
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
{	O
return	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
?	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
ref	int
:	O
0	int
;	O
}	O
void	O
mu_refcount_destroy	(*(*(struct)))->(void)
(	O
mu_refcount_t	*(struct)
*	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
)	O
{	O
if	O
(	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
&&	O
*	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
)	O
{	O
mu_refcount_t	*(struct)
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
=	O
*	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
;	O
mu_monitor_destroy	(*(*(struct(*(void),*(void),int,int))),*(void))->(void)
(	O
&	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
lock	*(struct(*(void),*(void),int,int))
,	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
;	O
free	(*(void))->(void)
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
;	O
*	O
prefcount	*(*(struct(int,*(struct(*`,*`,int,int)))))
=	O
NULL	O
;	O
}	O
}	O
unsigned	O
mu_refcount_inc	(*(struct))->(int)
(	O
mu_refcount_t	*(struct)
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
{	O
int	O
count	int
=	O
0	int
;	O
if	O
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
{	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
lock	*(struct(*(void),*(void),int,int))
)	O
;	O
count	int
=	O
++	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
ref	int
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
lock	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
return	O
count	int
;	O
}	O
unsigned	O
mu_refcount_dec	(*(struct))->(int)
(	O
mu_refcount_t	*(struct)
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
{	O
int	O
count	int
=	O
0	int
;	O
if	O
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
)	O
{	O
mu_monitor_wrlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
lock	*(struct(*(void),*(void),int,int))
)	O
;	O
if	O
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
ref	int
)	O
count	int
=	O
--	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
ref	int
;	O
mu_monitor_unlock	(*(struct(*(void),*(void),int,int)))->(int)
(	O
refcount	*(struct(int,*(struct(*(void),*(void),int,int))))
->	O
lock	*(struct(*(void),*(void),int,int))
)	O
;	O
}	O
return	O
count	int
;	O
}	O
