extern	O
char	O
*	O
*	O
environ	*(*(char))
;	O
static	O
char	O
*	O
*	O
last_environ	*(*(char))
;	O
static	O
int	O
__add_to_environ	(*(char),*(char),*(char),int)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
value	*(char)
,	O
const	O
char	O
*	O
combined	*(char)
,	O
int	O
replace	int
)	O
{	O
register	O
char	O
*	O
*	O
ep	*(*(char))
;	O
register	O
size_t	long
size	long
;	O
const	O
size_t	long
namelen	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
const	O
size_t	long
vallen	long
=	O
value	*(char)
!=	O
NULL	O
?	O
strlen	(*(char))->(long)
(	O
value	*(char)
)	O
+	O
1	int
:	O
0	int
;	O
LOCK	O
;	O
ep	*(*(char))
=	O
__environ	*(*(char))
;	O
size	long
=	O
0	int
;	O
if	O
(	O
ep	*(*(char))
!=	O
NULL	O
)	O
{	O
for	O
(	O
;	O
*	O
ep	*(*(char))
!=	O
NULL	O
;	O
++	O
ep	*(*(char))
)	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
*	O
ep	*(*(char))
,	O
name	*(char)
,	O
namelen	long
)	O
&&	O
(	O
*	O
ep	*(*(char))
)	O
[	O
namelen	long
]	O
==	O
'='	O
)	O
break	O
;	O
else	O
++	O
size	long
;	O
}	O
if	O
(	O
ep	*(*(char))
==	O
NULL	O
||	O
*	O
ep	*(*(char))
==	O
NULL	O
)	O
{	O
char	O
*	O
*	O
new_environ	*(*(char))
;	O
new_environ	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
realloc	(*(void),long)->(*(void))
(	O
last_environ	*(*(char))
,	O
(	O
size	long
+	O
2	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
if	O
(	O
new_environ	*(*(char))
==	O
NULL	O
)	O
{	O
UNLOCK	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
combined	*(char)
!=	O
NULL	O
)	O
new_environ	*(*(char))
[	O
size	long
]	O
=	O
(	O
char	O
*	O
)	O
combined	*(char)
;	O
else	O
{	O
{	O
new_environ	*(*(char))
[	O
size	long
]	O
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
namelen	long
+	O
1	int
+	O
vallen	long
)	O
;	O
if	O
(	O
new_environ	*(*(char))
[	O
size	long
]	O
==	O
NULL	O
)	O
{	O
__set_errno	O
(	O
ENOMEM	int
)	O
;	O
UNLOCK	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
new_environ	*(*(char))
[	O
size	long
]	O
,	O
name	*(char)
,	O
namelen	long
)	O
;	O
new_environ	*(*(char))
[	O
size	long
]	O
[	O
namelen	long
]	O
=	O
'='	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
new_environ	*(*(char))
[	O
size	long
]	O
[	O
namelen	long
+	O
1	int
]	O
,	O
value	*(char)
,	O
vallen	long
)	O
;	O
STORE_VALUE	O
(	O
new_environ	*(*(char))
[	O
size	long
]	O
)	O
;	O
}	O
}	O
if	O
(	O
__environ	*(*(char))
!=	O
last_environ	*(*(char))
)	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
(	O
char	O
*	O
)	O
new_environ	*(*(char))
,	O
(	O
char	O
*	O
)	O
__environ	*(*(char))
,	O
size	long
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
new_environ	*(*(char))
[	O
size	long
+	O
1	int
]	O
=	O
NULL	O
;	O
last_environ	*(*(char))
=	O
__environ	*(*(char))
=	O
new_environ	*(*(char))
;	O
}	O
else	O
if	O
(	O
replace	int
)	O
{	O
char	O
*	O
np	*(char)
;	O
if	O
(	O
combined	*(char)
!=	O
NULL	O
)	O
np	*(char)
=	O
(	O
char	O
*	O
)	O
combined	*(char)
;	O
else	O
{	O
{	O
np	*(char)
=	O
malloc	(long)->(*(void))
(	O
namelen	long
+	O
1	int
+	O
vallen	long
)	O
;	O
if	O
(	O
np	*(char)
==	O
NULL	O
)	O
{	O
UNLOCK	O
;	O
return	O
-	O
1	int
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
np	*(char)
,	O
name	*(char)
,	O
namelen	long
)	O
;	O
np	*(char)
[	O
namelen	long
]	O
=	O
'='	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
np	*(char)
[	O
namelen	long
+	O
1	int
]	O
,	O
value	*(char)
,	O
vallen	long
)	O
;	O
STORE_VALUE	O
(	O
np	*(char)
)	O
;	O
}	O
}	O
*	O
ep	*(*(char))
=	O
np	*(char)
;	O
}	O
UNLOCK	O
;	O
return	O
0	int
;	O
}	O
int	O
rpm_setenv	(*(char),*(char),int)->(int)
(	O
name	*(char)
,	O
value	*(char)
,	O
replace	int
)	O
const	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
value	*(char)
;	O
int	O
replace	int
;	O
{	O
return	O
__add_to_environ	(*(char),*(char),*(char),int)->(int)
(	O
name	*(char)
,	O
value	*(char)
,	O
NULL	O
,	O
replace	int
)	O
;	O
}	O
void	O
rpm_unsetenv	(*(char))->(void)
(	O
name	*(char)
)	O
const	O
char	O
*	O
name	*(char)
;	O
{	O
const	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
char	O
*	O
*	O
ep	*(*(char))
;	O
LOCK	O
;	O
ep	*(*(char))
=	O
__environ	*(*(char))
;	O
while	O
(	O
*	O
ep	*(*(char))
!=	O
NULL	O
)	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
*	O
ep	*(*(char))
,	O
name	*(char)
,	O
len	long
)	O
&&	O
(	O
*	O
ep	*(*(char))
)	O
[	O
len	long
]	O
==	O
'='	O
)	O
{	O
char	O
*	O
*	O
dp	*(*(char))
=	O
ep	*(*(char))
;	O
do	O
dp	*(*(char))
[	O
0	int
]	O
=	O
dp	*(*(char))
[	O
1	int
]	O
;	O
while	O
(	O
*	O
dp	*(*(char))
++	O
)	O
;	O
}	O
else	O
++	O
ep	*(*(char))
;	O
UNLOCK	O
;	O
}	O
int	O
rpm_clearenv	()->(int)
(	O
void	O
)	O
{	O
LOCK	O
;	O
if	O
(	O
__environ	*(*(char))
==	O
last_environ	*(*(char))
&&	O
__environ	*(*(char))
!=	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
__environ	*(*(char))
)	O
;	O
last_environ	*(*(char))
=	O
NULL	O
;	O
}	O
__environ	*(*(char))
=	O
NULL	O
;	O
UNLOCK	O
;	O
return	O
0	int
;	O
}	O
