struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
plexus	*(struct(*(char),*(struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void),long))
;	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
single	*(struct(*(char),*(struct(long,*(struct`),*(char),*(char),*(char),union(long,*`),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void),long))
;	O
void	O
oom	()->(void)
(	O
void	O
)	O
{	O
PFATAL	O
(	O
"out of memory"	*(char)
)	O
;	O
}	O
static	O
void	O
*	O
allocate	(long,bool)->(*(void))
(	O
size_t	long
size	long
,	O
bool	bool
clearp	bool
)	O
{	O
void	O
*	O
p	*(char)
=	O
(	O
clearp	bool
?	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
size	long
)	O
:	O
malloc	(long)->(*(void))
(	O
size	long
)	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
oom	()->(void)
(	O
)	O
;	O
return	O
p	*(char)
;	O
}	O
static	O
void	O
*	O
xmalloc	(long)->(*(void))
(	O
size_t	long
size	long
)	O
{	O
return	O
allocate	(long,bool)->(*(void))
(	O
size	long
,	O
false	int
)	O
;	O
}	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
make_space	(array(char))->(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)))
(	O
char	O
const	O
name	*(char)
[	O
]	O
)	O
{	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
=	O
TCALLOC	O
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
)	O
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
name	*(char)
=	O
name	*(char)
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
=	O
TCALLOC	O
(	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
)	O
;	O
obstack_alloc_failed_handler	*(()->(void))
=	O
oom	()->(void)
;	O
obstack_init	O
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
)	O
;	O
{	O
size_t	long
widest	long
=	O
sizeof	O
(	O
off_t	long
)	O
;	O
if	O
(	O
widest	long
<	O
sizeof	O
(	O
void	O
*	O
)	O
)	O
widest	long
=	O
sizeof	O
(	O
void	O
*	O
)	O
;	O
obstack_alignment_mask	O
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
)	O
=	O
widest	long
-	O
1	int
;	O
}	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
first	*(void)
=	O
obstack_next_free	O
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
)	O
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
count	long
=	O
0	int
;	O
return	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
;	O
}	O
void	O
*	O
alloc	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(char),long)->(*(void))
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
char	O
const	O
*	O
what	*(char)
USED_FOR_DEBUG	O
,	O
size_t	long
len	char
)	O
{	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
count	long
++	O
;	O
return	O
obstack_alloc	O
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
len	char
)	O
;	O
}	O
void	O
*	O
zlloc	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(char),long)->(*(void))
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
char	O
const	O
*	O
what	*(char)
,	O
size_t	long
len	char
)	O
{	O
return	O
memset	(*(void),int,long)->(*(void))
(	O
alloc	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(char),long)->(*(void))
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
what	*(char)
,	O
len	char
)	O
,	O
0	int
,	O
len	char
)	O
;	O
}	O
char	O
*	O
intern	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(char),long)->(*(char))
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
char	O
const	O
*	O
s	*(char)
,	O
size_t	long
len	char
)	O
{	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
count	long
++	O
;	O
return	O
obstack_copy0	O
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
s	*(char)
,	O
len	char
)	O
;	O
}	O
void	O
brush_off	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(void))->(void)
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
void	O
*	O
ptr	*(void)
)	O
{	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
count	long
--	O
;	O
obstack_free	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void))->(void)
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
ptr	*(void)
)	O
;	O
}	O
void	O
forget	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)))->(void)
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
)	O
{	O
obstack_free	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void))->(void)
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
first	*(void)
)	O
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
count	long
=	O
0	int
;	O
}	O
void	O
accf	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(char))->(void)
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
char	O
const	O
*	O
fmt	*(char)
,	O
...	O
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
args	*(*(char))
;	O
va_start	O
(	O
args	*(*(char))
,	O
fmt	*(char)
)	O
;	O
obstack_vprintf	(*(struct),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
fmt	*(char)
,	O
args	*(*(char))
)	O
;	O
va_end	O
(	O
args	*(*(char))
)	O
;	O
}	O
void	O
accumulate_byte	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),int)->(void)
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
int	O
c	int
)	O
{	O
obstack_1grow	O
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
c	int
)	O
;	O
}	O
void	O
accumulate_range	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(char),*(char))->(void)
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
char	O
const	O
*	O
beg	*(char)
,	O
char	O
const	O
*	O
end	*(char)
)	O
{	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
=	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
;	O
while	O
(	O
beg	*(char)
<	O
end	*(char)
)	O
obstack_1grow	O
(	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
*	O
beg	*(char)
++	O
)	O
;	O
}	O
char	O
*	O
finish_string	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),*(long))->(*(char))
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
size_t	long
*	O
result_len	*(long)
)	O
{	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
=	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
;	O
char	O
*	O
rv	*(char)
;	O
*	O
result_len	*(long)
=	O
obstack_object_size	O
(	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
)	O
;	O
obstack_1grow	O
(	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
'\0'	O
)	O
;	O
rv	*(char)
=	O
obstack_finish	O
(	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
)	O
;	O
return	O
rv	*(char)
;	O
}	O
void	O
*	O
pointer_array	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)),long)->(*(void))
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
,	O
size_t	long
count	long
)	O
{	O
struct	O
obstack	struct(long,*(struct(*(char),*(struct(*(char),*(struct`),array(char))),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct(*(char),*(struct`),array(char))))),*((*(void),*(struct(*(char),*(struct`),array(char))))->(void)),*(void),int,int,int)
*	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
=	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
;	O
while	O
(	O
count	long
--	O
)	O
obstack_ptr_grow	O
(	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
,	O
NULL	O
)	O
;	O
return	O
obstack_finish	O
(	O
o	*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int))
)	O
;	O
}	O
void	O
close_space	(*(struct(*(char),*(struct(long,*`,*`,*`,*`,union`,int,*`,*`,*`,int,int,int)),*(void),long)))->(void)
(	O
struct	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
*	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
)	O
{	O
obstack_free	(*(struct(long,*(struct(*`,*`,array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*`,long)->(*`)),*((*`,*`)->(void)),*(void),int,int,int)),*(void))->(void)
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
,	O
NULL	O
)	O
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
count	long
=	O
0	int
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
first	*(void)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
)	O
;	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
->	O
space	*(struct)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
divvy	struct(*(char),*(struct(long,*(struct(*(char),*(struct`),array(char))),*(char),*(char),*(char),union(long,*(void)),int,*((*(void),long)->(*(struct`))),*((*(void),*(struct`))->(void)),*(void),int,int,int)),*(void),long)
)	O
;	O
}	O
