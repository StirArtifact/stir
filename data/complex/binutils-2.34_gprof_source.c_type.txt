bfd_boolean	int
create_annotation_files	O
=	O
FALSE	O
;	O
Search_List	O
src_search_list	O
=	O
{	O
0	int
,	O
0	int
}	O
;	O
Source_File	O
*	O
first_src_file	O
=	O
0	int
;	O
Source_File	O
*	O
source_file_lookup_path	O
(	O
const	O
char	O
*	O
path	O
)	O
{	O
Source_File	O
*	O
sf	O
;	O
for	O
(	O
sf	O
=	O
first_src_file	O
;	O
sf	O
;	O
sf	O
=	O
sf	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
if	O
(	O
FILENAME_CMP	O
(	O
path	O
,	O
sf	O
->	O
name	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
sf	O
)	O
{	O
sf	O
=	O
(	O
Source_File	O
*	O
)	O
xmalloc	O
(	O
sizeof	O
(	O
*	O
sf	O
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
sf	O
,	O
0	int
,	O
sizeof	O
(	O
*	O
sf	O
)	O
)	O
;	O
sf	O
->	O
name	*(char)
=	O
xstrdup	O
(	O
path	O
)	O
;	O
sf	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
=	O
first_src_file	O
;	O
first_src_file	O
=	O
sf	O
;	O
}	O
return	O
sf	O
;	O
}	O
Source_File	O
*	O
source_file_lookup_name	O
(	O
const	O
char	O
*	O
filename	*(char)
)	O
{	O
const	O
char	O
*	O
fname	O
;	O
Source_File	O
*	O
sf	O
;	O
for	O
(	O
sf	O
=	O
first_src_file	O
;	O
sf	O
;	O
sf	O
=	O
sf	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
)	O
{	O
fname	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
sf	O
->	O
name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
fname	O
)	O
++	O
fname	O
;	O
else	O
fname	O
=	O
sf	O
->	O
name	*(char)
;	O
if	O
(	O
FILENAME_CMP	O
(	O
filename	*(char)
,	O
fname	O
)	O
==	O
0	int
)	O
break	O
;	O
}	O
return	O
sf	O
;	O
}	O
FILE	struct
*	O
annotate_source	O
(	O
Source_File	O
*	O
sf	O
,	O
unsigned	O
int	O
max_width	O
,	O
void	O
(	O
*	O
annote	O
)	O
(	O
char	O
*	O
,	O
unsigned	O
int	O
,	O
int	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
arg	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
)	O
{	O
static	O
bfd_boolean	int
first_file	O
=	O
TRUE	int
;	O
int	O
i	*(struct)
,	O
line_num	O
,	O
nread	O
;	O
bfd_boolean	int
new_line	O
;	O
char	O
buf	*(void)
[	O
8192	int
]	O
;	O
char	O
fname	O
[	O
PATH_MAX	O
]	O
;	O
char	O
*	O
annotation	O
,	O
*	O
name_only	O
;	O
FILE	struct
*	O
ifp	O
,	O
*	O
ofp	O
;	O
Search_List_Elem	O
*	O
sle	O
=	O
src_search_list	O
.	O
head	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
sf	O
->	O
name	*(char)
)	O
;	O
if	O
(	O
IS_ABSOLUTE_PATH	O
(	O
sf	O
->	O
name	*(char)
)	O
)	O
sle	O
=	O
0	int
;	O
name_only	O
=	O
0	int
;	O
while	O
(	O
TRUE	int
)	O
{	O
DBG	O
(	O
SRCDEBUG	O
,	O
printf	(*(char))->(int)
(	O
"[annotate_source]: looking for %s, trying %s\n"	*(char)
,	O
sf	O
->	O
name	*(char)
,	O
fname	O
)	O
)	O
;	O
ifp	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fname	O
,	O
FOPEN_RB	O
)	O
;	O
if	O
(	O
ifp	O
)	O
break	O
;	O
if	O
(	O
!	O
sle	O
&&	O
!	O
name_only	O
)	O
{	O
name_only	O
=	O
strrchr	(*(char),int)->(*(char))
(	O
sf	O
->	O
name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
name_only	O
)	O
{	O
++	O
name_only	O
;	O
sle	O
=	O
src_search_list	O
.	O
head	O
;	O
}	O
}	O
if	O
(	O
sle	O
)	O
{	O
strcpy	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
sle	O
->	O
path	O
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
"/"	*(char)
)	O
;	O
if	O
(	O
name_only	O
)	O
strcat	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
name_only	O
)	O
;	O
else	O
strcat	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
sf	O
->	O
name	*(char)
)	O
;	O
sle	O
=	O
sle	O
->	O
next	*(struct(*(struct(*(struct`),*(char),long)),*(char),long))
;	O
}	O
else	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	O
)	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"%s: could not locate `%s'\n"	*(char)
)	O
,	O
whoami	O
,	O
sf	O
->	O
name	*(char)
)	O
;	O
else	O
perror	(*(char))->(void)
(	O
sf	O
->	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
ofp	O
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
create_annotation_files	O
)	O
{	O
const	O
char	O
*	O
filename	*(char)
;	O
filename	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
sf	O
->	O
name	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
filename	*(char)
)	O
++	O
filename	*(char)
;	O
else	O
filename	*(char)
=	O
sf	O
->	O
name	*(char)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
filename	*(char)
)	O
;	O
strcat	(*(char),*(char))->(*(char))
(	O
fname	O
,	O
EXT_ANNO	O
)	O
;	O
ofp	O
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
fname	O
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
!	O
ofp	O
)	O
{	O
perror	(*(char))->(void)
(	O
fname	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
if	O
(	O
ofp	O
==	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
if	O
(	O
first_file	O
)	O
first_file	O
=	O
FALSE	O
;	O
else	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
'\n'	O
,	O
ofp	O
)	O
;	O
if	O
(	O
first_output	O
)	O
first_output	O
=	O
FALSE	O
;	O
else	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
"\f\n"	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	O
,	O
_	O
(	O
"*** File %s:\n"	*(char)
)	O
,	O
sf	O
->	O
name	*(char)
)	O
;	O
}	O
annotation	O
=	O
(	O
char	O
*	O
)	O
xmalloc	O
(	O
max_width	O
+	O
1	int
)	O
;	O
line_num	O
=	O
1	int
;	O
new_line	O
=	O
TRUE	int
;	O
while	O
(	O
(	O
nread	O
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(void)
,	O
1	int
,	O
sizeof	O
(	O
buf	*(void)
)	O
,	O
ifp	O
)	O
)	O
>	O
0	int
)	O
{	O
for	O
(	O
i	*(struct)
=	O
0	int
;	O
i	*(struct)
<	O
nread	O
;	O
++	O
i	*(struct)
)	O
{	O
if	O
(	O
new_line	O
)	O
{	O
(	O
*	O
annote	O
)	O
(	O
annotation	O
,	O
max_width	O
,	O
line_num	O
,	O
arg	*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*(struct`),*(struct`))->(*(struct`))),*((*(struct`),*(char))->(int)),*((long,int,int)->(*(void))),*(struct(int,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),long,*(char),*(char),int,int,*((*`,*`)->(*`)),*((*`,*`)->(int)),*((long,int,int)->(*`)),*(struct`),int)),int))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
annotation	O
,	O
ofp	O
)	O
;	O
++	O
line_num	O
;	O
}	O
new_line	O
=	O
(	O
buf	*(void)
[	O
i	*(struct)
]	O
==	O
'\n'	O
)	O
;	O
fputc	(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
buf	*(void)
[	O
i	*(struct)
]	O
,	O
ofp	O
)	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
annotation	O
)	O
;	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ifp	O
)	O
;	O
return	O
ofp	O
;	O
}	O
