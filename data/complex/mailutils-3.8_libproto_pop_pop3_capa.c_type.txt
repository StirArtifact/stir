static	O
int	O
capa_comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
value	*(void)
)	O
{	O
const	O
char	O
*	O
capa	*(struct)
=	O
item	*(void)
;	O
const	O
char	O
*	O
needle	*(char)
=	O
value	*(void)
;	O
for	O
(	O
;	O
*	O
needle	*(char)
;	O
capa	*(struct)
++	O
,	O
needle	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
*	O
capa	*(struct)
)	O
return	O
1	int
;	O
if	O
(	O
mu_tolower	O
(	O
*	O
capa	*(struct)
)	O
!=	O
mu_tolower	O
(	O
*	O
needle	*(char)
)	O
)	O
return	O
1	int
;	O
}	O
return	O
!	O
(	O
*	O
capa	*(struct)
==	O
0	int
||	O
mu_isspace	O
(	O
*	O
capa	*(struct)
)	O
)	O
;	O
}	O
int	O
mu_pop3_capa	(*(struct),int,*(*(struct)))->(int)
(	O
mu_pop3_t	*(struct)
pop3	*(*(struct))
,	O
int	O
reread	int
,	O
mu_iterator_t	*(struct)
*	O
piter	*(*(struct))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
pop3	*(*(struct))
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pop3	*(*(struct))
->	O
capa	*(struct)
)	O
{	O
if	O
(	O
!	O
reread	int
)	O
{	O
if	O
(	O
!	O
piter	*(*(struct))
)	O
return	O
0	int
;	O
return	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
pop3	*(*(struct))
->	O
capa	*(struct)
,	O
piter	*(*(struct))
)	O
;	O
}	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
pop3	*(*(struct))
->	O
capa	*(struct)
)	O
;	O
}	O
status	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
pop3	*(*(struct))
->	O
capa	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
pop3	*(*(struct))
->	O
capa	*(struct)
,	O
capa_comp	(*(void),*(void))->(int)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
pop3	*(*(struct))
->	O
capa	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
switch	O
(	O
pop3	*(*(struct))
->	O
state	*(int)
)	O
{	O
case	O
MU_POP3_NO_STATE	int
:	O
status	int
=	O
mu_pop3_writeline	(*(struct),*(char))->(int)
(	O
pop3	*(*(struct))
,	O
"CAPA\r\n"	*(char)
)	O
;	O
MU_POP3_CHECK_ERROR	O
(	O
pop3	*(*(struct))
,	O
status	int
)	O
;	O
MU_POP3_FCLR	O
(	O
pop3	*(*(struct))
,	O
MU_POP3_ACK	int
)	O
;	O
pop3	*(*(struct))
->	O
state	*(int)
=	O
MU_POP3_CAPA	int
;	O
case	O
MU_POP3_CAPA	int
:	O
status	int
=	O
mu_pop3_response	(*(struct),*(long))->(int)
(	O
pop3	*(*(struct))
,	O
NULL	O
)	O
;	O
MU_POP3_CHECK_EAGAIN	O
(	O
pop3	*(*(struct))
,	O
status	int
)	O
;	O
MU_POP3_CHECK_OK	O
(	O
pop3	*(*(struct))
)	O
;	O
pop3	*(*(struct))
->	O
state	*(int)
=	O
MU_POP3_CAPA_RX	int
;	O
case	O
MU_POP3_CAPA_RX	int
:	O
status	int
=	O
mu_pop3_read_list	(*(struct),*(struct))->(int)
(	O
pop3	*(*(struct))
,	O
pop3	*(*(struct))
->	O
capa	*(struct)
)	O
;	O
MU_POP3_CHECK_ERROR	O
(	O
pop3	*(*(struct))
,	O
status	int
)	O
;	O
if	O
(	O
piter	*(*(struct))
)	O
status	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
pop3	*(*(struct))
->	O
capa	*(struct)
,	O
piter	*(*(struct))
)	O
;	O
else	O
status	int
=	O
0	int
;	O
pop3	*(*(struct))
->	O
state	*(int)
=	O
MU_POP3_NO_STATE	int
;	O
break	O
;	O
case	O
MU_POP3_ERROR	int
:	O
status	int
=	O
ECANCELED	int
;	O
break	O
;	O
default	O
:	O
status	int
=	O
EINPROGRESS	int
;	O
}	O
return	O
status	int
;	O
}	O
