struct	O
moler_vanloan_optimal_suggestion	struct(int,int)
{	O
int	O
k	long
;	O
int	O
j	long
;	O
}	O
;	O
typedef	O
struct	O
moler_vanloan_optimal_suggestion	struct(int,int)
mvl_suggestion_t	struct(int,int)
;	O
static	O
mvl_suggestion_t	struct(int,int)
mvl_tab	array(array(struct(int,int)))
[	O
3	int
]	O
[	O
6	int
]	O
=	O
{	O
{	O
{	O
5	int
,	O
1	int
}	O
,	O
{	O
5	int
,	O
4	int
}	O
,	O
{	O
7	int
,	O
5	int
}	O
,	O
{	O
9	int
,	O
7	int
}	O
,	O
{	O
10	int
,	O
10	int
}	O
,	O
{	O
8	int
,	O
14	int
}	O
}	O
,	O
{	O
{	O
2	int
,	O
1	int
}	O
,	O
{	O
4	int
,	O
0	int
}	O
,	O
{	O
7	int
,	O
1	int
}	O
,	O
{	O
6	int
,	O
5	int
}	O
,	O
{	O
5	int
,	O
9	int
}	O
,	O
{	O
7	int
,	O
11	int
}	O
}	O
,	O
{	O
{	O
1	int
,	O
0	int
}	O
,	O
{	O
3	int
,	O
0	int
}	O
,	O
{	O
5	int
,	O
1	int
}	O
,	O
{	O
4	int
,	O
5	int
}	O
,	O
{	O
4	int
,	O
8	int
}	O
,	O
{	O
2	int
,	O
11	int
}	O
}	O
}	O
;	O
inline	O
static	O
double	O
sup_norm	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
double	O
min	double
,	O
max	double
;	O
gsl_matrix_minmax	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(void)
(	O
A	*(float)
,	O
&	O
min	double
,	O
&	O
max	double
)	O
;	O
return	O
GSL_MAX_DBL	(double,double)->(double)
(	O
fabs	(double)->(double)
(	O
min	double
)	O
,	O
fabs	(double)->(double)
(	O
max	double
)	O
)	O
;	O
}	O
static	O
mvl_suggestion_t	struct(int,int)
obtain_suggestion	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(struct(int,int))
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_mode_t	int
mode	int
)	O
{	O
const	O
unsigned	O
int	O
mode_prec	int
=	O
GSL_MODE_PREC	(int)->(int)
(	O
mode	int
)	O
;	O
const	O
double	O
norm_A	double
=	O
sup_norm	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
A	*(float)
)	O
;	O
if	O
(	O
norm_A	double
<	O
0.01	int
)	O
return	O
mvl_tab	array(array(struct(int,int)))
[	O
mode_prec	int
]	O
[	O
0	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
0.1	int
)	O
return	O
mvl_tab	array(array(struct(int,int)))
[	O
mode_prec	int
]	O
[	O
1	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
1.0	int
)	O
return	O
mvl_tab	array(array(struct(int,int)))
[	O
mode_prec	int
]	O
[	O
2	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
10.0	int
)	O
return	O
mvl_tab	array(array(struct(int,int)))
[	O
mode_prec	int
]	O
[	O
3	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
100.0	int
)	O
return	O
mvl_tab	array(array(struct(int,int)))
[	O
mode_prec	int
]	O
[	O
4	int
]	O
;	O
else	O
if	O
(	O
norm_A	double
<	O
1000.0	int
)	O
return	O
mvl_tab	array(array(struct(int,int)))
[	O
mode_prec	int
]	O
[	O
5	int
]	O
;	O
else	O
{	O
const	O
double	O
extra	double
=	O
log	(double)->(double)
(	O
1.01	int
*	O
norm_A	double
/	O
1000.0	int
)	O
/	O
M_LN2	int
;	O
const	O
int	O
extra_i	int
=	O
(	O
unsigned	O
int	O
)	O
ceil	(double)->(double)
(	O
extra	double
)	O
;	O
mvl_suggestion_t	struct(int,int)
s	*(float)
=	O
mvl_tab	array(array(struct(int,int)))
[	O
mode	int
]	O
[	O
5	int
]	O
;	O
s	*(float)
.	O
j	long
+=	O
extra_i	int
;	O
return	O
s	*(float)
;	O
}	O
}	O
static	O
void	O
matrix_exp_series	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(void)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
eB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
int	O
number_of_terms	int
)	O
{	O
int	O
count	int
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
temp	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_calloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
->	O
size1	long
,	O
B	*(float)
->	O
size2	long
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
eB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
B	*(float)
)	O
;	O
gsl_matrix_scale	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
eB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
/	O
number_of_terms	int
)	O
;	O
gsl_matrix_add_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
eB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
)	O
;	O
for	O
(	O
count	int
=	O
number_of_terms	int
-	O
1	int
;	O
count	int
>=	O
1	int
;	O
--	O
count	int
)	O
{	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
B	*(float)
,	O
eB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
temp	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_scale	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
temp	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
/	O
count	int
)	O
;	O
gsl_matrix_add_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
temp	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
eB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
temp	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
temp	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
int	O
gsl_linalg_exponential_ss	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_mode_t	int
mode	int
)	O
{	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"cannot exponentiate a non-square matrix"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
A	*(float)
->	O
size1	long
!=	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
A	*(float)
->	O
size2	long
!=	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"exponential of matrix must have same dimension as matrix"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
int	O
i	long
;	O
const	O
mvl_suggestion_t	struct(int,int)
sugg	struct(int,int)
=	O
obtain_suggestion	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(struct(int,int))
(	O
A	*(float)
,	O
mode	int
)	O
;	O
const	O
double	O
divisor	double
=	O
exp	(double)->(double)
(	O
M_LN2	int
*	O
sugg	struct(int,int)
.	O
j	long
)	O
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
->	O
size1	long
,	O
A	*(float)
->	O
size2	long
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
A	*(float)
)	O
;	O
gsl_matrix_scale	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
/	O
divisor	double
)	O
;	O
matrix_exp_series	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),int)->(void)
(	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
sugg	struct(int,int)
.	O
k	long
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
sugg	struct(int,int)
.	O
j	long
;	O
++	O
i	long
)	O
{	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
eA	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
reduced_A	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
