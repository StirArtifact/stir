static	O
const	O
char	O
*	O
AuthErrors	array(*(char))
[	O
]	O
=	O
{	O
"Auth success!"	*(char)
,	O
"Auth failed: Packet oversized!"	*(char)
,	O
"Auth failed: X-Cookie doesn't match!"	*(char)
,	O
"Auth failed: Wrong transmission protocol version!"	*(char)
,	O
"Auth failed: Device locked!"	*(char)
}	O
;	O
static	O
int	O
write_dword	(int,int)->(int)
(	O
int	O
handle	int
,	O
Dword	int
parm	int
)	O
{	O
Byte	char
val	int
[	O
4	int
]	O
;	O
dword2byte	(int,*(char))->(void)
(	O
parm	int
,	O
val	int
)	O
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
handle	int
,	O
val	int
,	O
4	int
)	O
<	O
4	int
)	O
return	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
uint32_t	int
authenticate_to_floppyd	(char,int,*(char),int)->(int)
(	O
char	O
fullauth	char
,	O
int	O
sock	int
,	O
char	O
*	O
display	*(char)
,	O
uint32_t	int
protoversion	int
)	O
{	O
size_t	long
filelen	long
=	O
0	int
;	O
Byte	char
buf	*(char)
[	O
16	int
]	O
;	O
const	O
char	O
*	O
command	*(*(char))
[	O
]	O
=	O
{	O
"xauth"	*(char)
,	O
"xauth"	*(char)
,	O
"extract"	*(char)
,	O
"-"	*(char)
,	O
0	int
,	O
0	int
}	O
;	O
char	O
*	O
xcookie	*(char)
=	O
NULL	O
;	O
Dword	int
errcode	int
;	O
uint32_t	int
bytesRead	int
;	O
uint32_t	int
cap	int
=	O
0	int
;	O
if	O
(	O
fullauth	char
)	O
{	O
command	*(*(char))
[	O
4	int
]	O
=	O
display	*(char)
;	O
filelen	long
=	O
strlen	(*(char))->(long)
(	O
display	*(char)
)	O
;	O
filelen	long
+=	O
100	int
;	O
xcookie	*(char)
=	O
(	O
char	O
*	O
)	O
safe_malloc	(long)->(*(void))
(	O
filelen	long
+	O
4	int
)	O
;	O
filelen	long
=	O
safePopenOut	(*(*(char)),*(char),long)->(long)
(	O
command	*(*(char))
,	O
xcookie	*(char)
+	O
4	int
,	O
filelen	long
)	O
;	O
if	O
(	O
filelen	long
<	O
1	int
)	O
return	O
AUTH_AUTHFAILED	int
;	O
}	O
dword2byte	(int,*(char))->(void)
(	O
4	int
,	O
buf	*(char)
)	O
;	O
dword2byte	(int,*(char))->(void)
(	O
protoversion	int
,	O
buf	*(char)
+	O
4	int
)	O
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
sock	int
,	O
buf	*(char)
,	O
8	int
)	O
<	O
8	int
)	O
return	O
AUTH_IO_ERROR	int
;	O
bytesRead	int
=	O
read_dword	(int)->(int)
(	O
sock	int
)	O
;	O
if	O
(	O
bytesRead	int
!=	O
4	int
&&	O
bytesRead	int
!=	O
12	int
)	O
{	O
return	O
AUTH_WRONGVERSION	int
;	O
}	O
errcode	int
=	O
read_dword	(int)->(int)
(	O
sock	int
)	O
;	O
if	O
(	O
errcode	int
!=	O
AUTH_SUCCESS	int
)	O
{	O
return	O
errcode	int
;	O
}	O
protoversion	int
=	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
;	O
if	O
(	O
bytesRead	int
>=	O
12	int
)	O
{	O
protoversion	int
=	O
read_dword	(int)->(int)
(	O
sock	int
)	O
;	O
cap	int
=	O
read_dword	(int)->(int)
(	O
sock	int
)	O
;	O
}	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Protocol Version=%d\n"	*(char)
,	O
protoversion	int
)	O
;	O
if	O
(	O
protoversion	int
>=	O
FLOPPYD_PROTOCOL_VERSION	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Capabilities:%s%s\n"	*(char)
,	O
(	O
cap	int
&	O
FLOPPYD_CAP_EXPLICIT_OPEN	int
)	O
?	O
" ExplicitOpen"	*(char)
:	O
""	*(char)
,	O
(	O
cap	int
&	O
FLOPPYD_CAP_LARGE_SEEK	int
)	O
?	O
" LargeFiles"	*(char)
:	O
""	*(char)
)	O
;	O
}	O
if	O
(	O
fullauth	char
)	O
{	O
dword2byte	(int,*(char))->(void)
(	O
filelen	long
,	O
(	O
Byte	char
*	O
)	O
xcookie	*(char)
)	O
;	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
sock	int
,	O
xcookie	*(char)
,	O
filelen	long
+	O
4	int
)	O
<	O
(	O
ssize_t	long
)	O
(	O
filelen	long
+	O
4	int
)	O
)	O
return	O
AUTH_IO_ERROR	int
;	O
if	O
(	O
read_dword	(int)->(int)
(	O
sock	int
)	O
!=	O
4	int
)	O
{	O
return	O
AUTH_PACKETOVERSIZE	int
;	O
}	O
errcode	int
=	O
read_dword	(int)->(int)
(	O
sock	int
)	O
;	O
}	O
return	O
errcode	int
;	O
}	O
static	O
int	O
get_host_and_port	(*(char),*(*(char)),*(*(char)),*(short))->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
*	O
hostname	*(*(char))
,	O
char	O
*	O
*	O
display	*(char)
,	O
uint16_t	short
*	O
port	*(short)
)	O
{	O
char	O
*	O
newname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
char	O
*	O
p	*(char)
;	O
char	O
*	O
p2	*(char)
;	O
p	*(char)
=	O
newname	*(char)
;	O
while	O
(	O
*	O
p	*(char)
!=	O
'/'	O
&&	O
*	O
p	*(char)
)	O
p	*(char)
++	O
;	O
p2	*(char)
=	O
p	*(char)
;	O
if	O
(	O
*	O
p	*(char)
)	O
p	*(char)
++	O
;	O
*	O
p2	*(char)
=	O
0	int
;	O
*	O
port	*(short)
=	O
atou16	(*(char))->(short)
(	O
p	*(char)
)	O
;	O
if	O
(	O
*	O
port	*(short)
==	O
0	int
)	O
{	O
*	O
port	*(short)
=	O
FLOPPYD_DEFAULT_PORT	int
;	O
}	O
*	O
display	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
newname	*(char)
)	O
;	O
p	*(char)
=	O
newname	*(char)
;	O
while	O
(	O
*	O
p	*(char)
!=	O
':'	O
&&	O
*	O
p	*(char)
)	O
p	*(char)
++	O
;	O
p2	*(char)
=	O
p	*(char)
;	O
if	O
(	O
*	O
p	*(char)
)	O
p	*(char)
++	O
;	O
*	O
p2	*(char)
=	O
0	int
;	O
*	O
port	*(short)
+=	O
atoi	(*(char))->(int)
(	O
p	*(char)
)	O
;	O
if	O
(	O
!	O
*	O
newname	*(char)
||	O
strcmp	(*(char),*(char))->(int)
(	O
newname	*(char)
,	O
"unix"	*(char)
)	O
==	O
0	int
)	O
{	O
free	(*(void))->(void)
(	O
newname	*(char)
)	O
;	O
newname	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
"localhost"	*(char)
)	O
;	O
}	O
*	O
hostname	*(*(char))
=	O
newname	*(char)
;	O
return	O
1	int
;	O
}	O
static	O
in_addr_t	int
getipaddress	(*(char))->(int)
(	O
char	O
*	O
ipaddr	*(char)
)	O
{	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
;	O
in_addr_t	int
ip	int
;	O
if	O
(	O
(	O
(	O
ip	int
=	O
inet_addr	(*(char))->(int)
(	O
ipaddr	*(char)
)	O
)	O
==	O
INADDR_NONE	O
)	O
&&	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
ipaddr	*(char)
,	O
"255.255.255.255"	*(char)
)	O
!=	O
0	int
)	O
)	O
{	O
if	O
(	O
(	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyname	(*(char))->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
ipaddr	*(char)
)	O
)	O
!=	O
NULL	O
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
&	O
ip	int
,	O
host	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_addr	O
,	O
sizeof	O
(	O
ip	int
)	O
)	O
;	O
}	O
endhostent	()->(void)
(	O
)	O
;	O
}	O
return	O
(	O
ip	int
)	O
;	O
}	O
static	O
int	O
connect_to_server	(int,short)->(int)
(	O
in_addr_t	int
ip	int
,	O
uint16_t	short
port	*(short)
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(short,short,struct(int),array(char))
;	O
int	O
sock	int
;	O
if	O
(	O
(	O
sock	int
=	O
socket	(int,int,int)->(int)
(	O
AF_INET	O
,	O
SOCK_STREAM	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_family	short
=	O
AF_INET	O
;	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_port	short
=	O
htons	(short)->(short)
(	O
port	*(short)
)	O
;	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
ip	int
;	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
sock	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
sizeof	O
(	O
addr	struct(short,short,struct(int),array(char))
)	O
)	O
<	O
0	int
)	O
{	O
return	O
(	O
-	O
1	int
)	O
;	O
}	O
{	O
int	O
on	int
=	O
1	int
;	O
setsockopt	(int,int,int,*(void),int)->(int)
(	O
STDIN_FILENO	int
,	O
SOL_SOCKET	int
,	O
SO_KEEPALIVE	int
,	O
(	O
char	O
*	O
)	O
&	O
on	int
,	O
sizeof	O
(	O
on	int
)	O
)	O
;	O
}	O
return	O
(	O
sock	int
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
char	O
*	O
hostname	*(*(char))
;	O
char	O
*	O
display	*(char)
;	O
char	O
*	O
name	*(char)
;	O
uint16_t	short
port	*(short)
;	O
int	O
sock	int
;	O
uint32_t	int
reply	int
;	O
int	O
rval	*(char)
;	O
uint32_t	int
protoversion	int
;	O
char	O
fullauth	char
=	O
0	int
;	O
Byte	char
opcode	char
=	O
OP_CLOSE	int
;	O
if	O
(	O
argc	int
<	O
2	int
)	O
{	O
puts	(*(char))->(int)
(	O
"Usage: floppyd_installtest [-f] Connect-String\n"	*(char)
"-f\tDo full X-Cookie-Authentication"	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
name	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
"-f"	*(char)
)	O
==	O
0	int
)	O
{	O
fullauth	char
=	O
1	int
;	O
name	*(char)
=	O
argv	*(*(char))
[	O
2	int
]	O
;	O
}	O
rval	*(char)
=	O
get_host_and_port	(*(char),*(*(char)),*(*(char)),*(short))->(int)
(	O
name	*(char)
,	O
&	O
hostname	*(*(char))
,	O
&	O
display	*(char)
,	O
&	O
port	*(short)
)	O
;	O
if	O
(	O
!	O
rval	*(char)
)	O
return	O
-	O
1	int
;	O
sock	int
=	O
connect_to_server	(int,short)->(int)
(	O
getipaddress	(*(char))->(int)
(	O
hostname	*(*(char))
)	O
,	O
port	*(short)
)	O
;	O
if	O
(	O
sock	int
==	O
-	O
1	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Can't connect to floppyd server on %s, port %i!\n"	*(char)
,	O
hostname	*(*(char))
,	O
port	*(short)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
protoversion	int
=	O
FLOPPYD_PROTOCOL_VERSION	int
;	O
while	O
(	O
1	int
)	O
{	O
reply	int
=	O
authenticate_to_floppyd	(char,int,*(char),int)->(int)
(	O
fullauth	char
,	O
sock	int
,	O
display	*(char)
,	O
protoversion	int
)	O
;	O
if	O
(	O
protoversion	int
==	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
)	O
break	O
;	O
if	O
(	O
reply	int
==	O
AUTH_WRONGVERSION	int
)	O
{	O
protoversion	int
=	O
FLOPPYD_PROTOCOL_VERSION_OLD	int
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
reply	int
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Connection to floppyd failed:\n"	*(char)
"%s\n"	*(char)
,	O
AuthErrors	array(*(char))
[	O
reply	int
]	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
free	(*(void))->(void)
(	O
hostname	*(*(char))
)	O
;	O
free	(*(void))->(void)
(	O
display	*(char)
)	O
;	O
if	O
(	O
write_dword	(int,int)->(int)
(	O
sock	int
,	O
1	int
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Short write to floppyd:\n"	*(char)
"%s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
sock	int
,	O
&	O
opcode	char
,	O
1	int
)	O
<	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Short write to floppyd:\n"	*(char)
"%s\n"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
}	O
close	*((*(void))->(int))
(	O
sock	int
)	O
;	O
return	O
0	int
;	O
}	O
