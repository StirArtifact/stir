extern	O
int	O
squeeze	int
;	O
extern	O
int	O
chopline	int
;	O
extern	O
int	O
hshift	int
;	O
extern	O
int	O
quit_if_one_screen	int
;	O
extern	O
int	O
sigs	int
;	O
extern	O
int	O
ignore_eoi	int
;	O
extern	O
int	O
status_col	int
;	O
extern	O
POSITION	long
start_attnpos	long
;	O
extern	O
POSITION	long
end_attnpos	long
;	O
extern	O
int	O
hilite_search	int
;	O
extern	O
int	O
size_linebuf	int
;	O
public	O
POSITION	long
forw_line	(long)->(long)
(	O
curr_pos	long
)	O
POSITION	long
curr_pos	long
;	O
{	O
POSITION	long
base_pos	long
;	O
POSITION	long
new_pos	long
;	O
int	O
c	int
;	O
int	O
blankline	int
;	O
int	O
endline	int
;	O
int	O
chopped	int
;	O
int	O
backchars	int
;	O
get_forw_line	O
:	O
if	O
(	O
curr_pos	long
==	O
NULL_POSITION	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
if	O
(	O
hilite_search	int
==	O
OPT_ONPLUS	int
||	O
is_filtering	()->(int)
(	O
)	O
||	O
status_col	int
)	O
{	O
prep_hilite	(long,long,int)->(void)
(	O
curr_pos	long
,	O
curr_pos	long
+	O
3	int
*	O
size_linebuf	int
,	O
ignore_eoi	int
?	O
1	int
:	O
-	O
1	int
)	O
;	O
curr_pos	long
=	O
next_unfiltered	(long)->(long)
(	O
curr_pos	long
)	O
;	O
}	O
if	O
(	O
ch_seek	(long)->(int)
(	O
curr_pos	long
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
base_pos	long
=	O
curr_pos	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
c	int
=	O
ch_back_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
(	O
void	O
)	O
ch_forw_get	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
--	O
base_pos	long
;	O
}	O
prewind	()->(void)
(	O
)	O
;	O
plinenum	(long)->(void)
(	O
base_pos	long
)	O
;	O
(	O
void	O
)	O
ch_seek	(long)->(int)
(	O
base_pos	long
)	O
;	O
new_pos	long
=	O
base_pos	long
;	O
while	O
(	O
new_pos	long
<	O
curr_pos	long
)	O
{	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
backchars	int
=	O
pappend	(char,long)->(int)
(	O
c	int
,	O
new_pos	long
)	O
;	O
new_pos	long
++	O
;	O
if	O
(	O
backchars	int
>	O
0	int
)	O
{	O
pshift_all	()->(void)
(	O
)	O
;	O
new_pos	long
-=	O
backchars	int
;	O
while	O
(	O
--	O
backchars	int
>=	O
0	int
)	O
(	O
void	O
)	O
ch_back_get	()->(int)
(	O
)	O
;	O
}	O
}	O
(	O
void	O
)	O
pflushmbc	()->(int)
(	O
)	O
;	O
pshift_all	()->(void)
(	O
)	O
;	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
blankline	int
=	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
;	O
chopped	int
=	O
FALSE	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
EOI	O
)	O
{	O
backchars	int
=	O
pflushmbc	()->(int)
(	O
)	O
;	O
new_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
if	O
(	O
backchars	int
>	O
0	int
&&	O
!	O
chopline	int
&&	O
hshift	int
==	O
0	int
)	O
{	O
new_pos	long
-=	O
backchars	int
+	O
1	int
;	O
endline	int
=	O
FALSE	int
;	O
}	O
else	O
endline	int
=	O
TRUE	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
!=	O
'\r'	O
)	O
blankline	int
=	O
0	int
;	O
backchars	int
=	O
pappend	(char,long)->(int)
(	O
c	int
,	O
ch_tell	()->(long)
(	O
)	O
-	O
1	int
)	O
;	O
if	O
(	O
backchars	int
>	O
0	int
)	O
{	O
if	O
(	O
chopline	int
||	O
hshift	int
>	O
0	int
)	O
{	O
do	O
{	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
}	O
while	O
(	O
c	int
!=	O
'\n'	O
&&	O
c	int
!=	O
EOI	O
)	O
;	O
new_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
endline	int
=	O
TRUE	int
;	O
quit_if_one_screen	int
=	O
FALSE	int
;	O
chopped	int
=	O
TRUE	int
;	O
}	O
else	O
{	O
new_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
-	O
backchars	int
;	O
endline	int
=	O
FALSE	int
;	O
}	O
break	O
;	O
}	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
}	O
pdone	(int,int,int)->(void)
(	O
endline	int
,	O
chopped	int
,	O
1	int
)	O
;	O
if	O
(	O
is_filtered	(long)->(int)
(	O
base_pos	long
)	O
)	O
{	O
curr_pos	long
=	O
new_pos	long
;	O
goto	O
get_forw_line	O
;	O
}	O
if	O
(	O
status_col	int
&&	O
is_hilited	(long,long,int,*(int))->(int)
(	O
base_pos	long
,	O
ch_tell	()->(long)
(	O
)	O
-	O
1	int
,	O
1	int
,	O
NULL	O
)	O
)	O
set_status_col	(char)->(void)
(	O
'*'	O
)	O
;	O
if	O
(	O
squeeze	int
&&	O
blankline	int
)	O
{	O
while	O
(	O
(	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
)	O
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
if	O
(	O
c	int
!=	O
EOI	O
)	O
(	O
void	O
)	O
ch_back_get	()->(int)
(	O
)	O
;	O
new_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
}	O
return	O
(	O
new_pos	long
)	O
;	O
}	O
public	O
POSITION	long
back_line	(long)->(long)
(	O
curr_pos	long
)	O
POSITION	long
curr_pos	long
;	O
{	O
POSITION	long
new_pos	long
,	O
begin_new_pos	long
,	O
base_pos	long
;	O
int	O
c	int
;	O
int	O
endline	int
;	O
int	O
chopped	int
;	O
int	O
backchars	int
;	O
get_back_line	O
:	O
if	O
(	O
curr_pos	long
==	O
NULL_POSITION	O
||	O
curr_pos	long
<=	O
ch_zero	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
if	O
(	O
hilite_search	int
==	O
OPT_ONPLUS	int
||	O
is_filtering	()->(int)
(	O
)	O
||	O
status_col	int
)	O
prep_hilite	(long,long,int)->(void)
(	O
(	O
curr_pos	long
<	O
3	int
*	O
size_linebuf	int
)	O
?	O
0	int
:	O
curr_pos	long
-	O
3	int
*	O
size_linebuf	int
,	O
curr_pos	long
,	O
-	O
1	int
)	O
;	O
if	O
(	O
ch_seek	(long)->(int)
(	O
curr_pos	long
-	O
1	int
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
if	O
(	O
squeeze	int
)	O
{	O
(	O
void	O
)	O
ch_forw_get	()->(int)
(	O
)	O
;	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
(	O
void	O
)	O
ch_back_get	()->(int)
(	O
)	O
;	O
(	O
void	O
)	O
ch_back_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
{	O
while	O
(	O
(	O
c	int
=	O
ch_back_get	()->(int)
(	O
)	O
)	O
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
if	O
(	O
c	int
==	O
EOI	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
(	O
void	O
)	O
ch_forw_get	()->(int)
(	O
)	O
;	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
c	int
=	O
ch_back_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
base_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
+	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
c	int
==	O
EOI	O
)	O
{	O
base_pos	long
=	O
ch_tell	()->(long)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
new_pos	long
=	O
base_pos	long
;	O
if	O
(	O
ch_seek	(long)->(int)
(	O
new_pos	long
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
endline	int
=	O
FALSE	int
;	O
prewind	()->(void)
(	O
)	O
;	O
plinenum	(long)->(void)
(	O
new_pos	long
)	O
;	O
loop	O
:	O
begin_new_pos	long
=	O
new_pos	long
;	O
(	O
void	O
)	O
ch_seek	(long)->(int)
(	O
new_pos	long
)	O
;	O
chopped	int
=	O
FALSE	int
;	O
do	O
{	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
||	O
ABORT_SIGS	O
(	O
)	O
)	O
{	O
null_line	()->(void)
(	O
)	O
;	O
return	O
(	O
NULL_POSITION	O
)	O
;	O
}	O
new_pos	long
++	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
{	O
backchars	int
=	O
pflushmbc	()->(int)
(	O
)	O
;	O
if	O
(	O
backchars	int
>	O
0	int
&&	O
!	O
chopline	int
&&	O
hshift	int
==	O
0	int
)	O
{	O
backchars	int
++	O
;	O
goto	O
shift	O
;	O
}	O
endline	int
=	O
TRUE	int
;	O
break	O
;	O
}	O
backchars	int
=	O
pappend	(char,long)->(int)
(	O
c	int
,	O
ch_tell	()->(long)
(	O
)	O
-	O
1	int
)	O
;	O
if	O
(	O
backchars	int
>	O
0	int
)	O
{	O
if	O
(	O
chopline	int
||	O
hshift	int
>	O
0	int
)	O
{	O
endline	int
=	O
TRUE	int
;	O
chopped	int
=	O
TRUE	int
;	O
quit_if_one_screen	int
=	O
FALSE	int
;	O
break	O
;	O
}	O
shift	O
:	O
pshift_all	()->(void)
(	O
)	O
;	O
while	O
(	O
backchars	int
--	O
>	O
0	int
)	O
{	O
(	O
void	O
)	O
ch_back_get	()->(int)
(	O
)	O
;	O
new_pos	long
--	O
;	O
}	O
goto	O
loop	O
;	O
}	O
}	O
while	O
(	O
new_pos	long
<	O
curr_pos	long
)	O
;	O
pdone	(int,int,int)->(void)
(	O
endline	int
,	O
chopped	int
,	O
0	int
)	O
;	O
if	O
(	O
is_filtered	(long)->(int)
(	O
base_pos	long
)	O
)	O
{	O
curr_pos	long
=	O
begin_new_pos	long
;	O
goto	O
get_back_line	O
;	O
}	O
if	O
(	O
status_col	int
&&	O
curr_pos	long
>	O
0	int
&&	O
is_hilited	(long,long,int,*(int))->(int)
(	O
base_pos	long
,	O
curr_pos	long
-	O
1	int
,	O
1	int
,	O
NULL	O
)	O
)	O
set_status_col	(char)->(void)
(	O
'*'	O
)	O
;	O
return	O
(	O
begin_new_pos	long
)	O
;	O
}	O
public	O
void	O
set_attnpos	(long)->(void)
(	O
pos	long
)	O
POSITION	long
pos	long
;	O
{	O
int	O
c	int
;	O
if	O
(	O
pos	long
!=	O
NULL_POSITION	O
)	O
{	O
if	O
(	O
ch_seek	(long)->(int)
(	O
pos	long
)	O
)	O
return	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
ch_forw_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
)	O
break	O
;	O
if	O
(	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
{	O
(	O
void	O
)	O
ch_back_get	()->(int)
(	O
)	O
;	O
break	O
;	O
}	O
pos	long
++	O
;	O
}	O
end_attnpos	long
=	O
pos	long
;	O
for	O
(	O
;	O
;	O
)	O
{	O
c	int
=	O
ch_back_get	()->(int)
(	O
)	O
;	O
if	O
(	O
c	int
==	O
EOI	O
||	O
c	int
==	O
'\n'	O
||	O
c	int
==	O
'\r'	O
)	O
break	O
;	O
pos	long
--	O
;	O
}	O
}	O
start_attnpos	long
=	O
pos	long
;	O
}	O
