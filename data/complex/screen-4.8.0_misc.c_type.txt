extern	O
struct	O
layer	struct(*(struct),int,int,int,int,int,*(struct(*((*(*`),*(int))->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*(struct`),int)->(int)),*((int,int)->(int)),*(()->(void)),*((*(void))->(void)))),*(void),*(struct(*(struct),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))),*(struct(*(struct),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))
*	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
;	O
extern	O
int	O
eff_uid	int
,	O
real_uid	int
;	O
extern	O
int	O
eff_gid	int
,	O
real_gid	int
;	O
extern	O
struct	O
mline	struct(*(char),*(char),*(char),*(char),*(char))
mline_old	struct(*(char),*(char),*(char),*(char),*(char))
;	O
extern	O
struct	O
mchar	struct(char,char,char,char,char,char)
mchar_blank	struct(char,char,char,char,char,char)
;	O
extern	O
unsigned	O
char	O
*	O
null	*(char)
,	O
*	O
blank	*(char)
;	O
char	O
*	O
SaveStr	(*(char))->(*(char))
(	O
str	*(char)
)	O
register	O
const	O
char	O
*	O
str	*(char)
;	O
{	O
register	O
char	O
*	O
cp	*(char)
;	O
if	O
(	O
(	O
cp	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"%s"	*(char)
,	O
strnomem	array(char)
)	O
;	O
else	O
strcpy	(*(char),*(char))->(*(char))
(	O
cp	*(char)
,	O
str	*(char)
)	O
;	O
return	O
cp	*(char)
;	O
}	O
char	O
*	O
SaveStrn	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
n	int
)	O
register	O
const	O
char	O
*	O
str	*(char)
;	O
int	O
n	int
;	O
{	O
register	O
char	O
*	O
cp	*(char)
;	O
if	O
(	O
(	O
cp	*(char)
=	O
malloc	(long)->(*(void))
(	O
n	int
+	O
1	int
)	O
)	O
==	O
NULL	O
)	O
Panic	(int,*(char))->(void)
(	O
0	int
,	O
"%s"	*(char)
,	O
strnomem	array(char)
)	O
;	O
else	O
{	O
bcopy	(*(void),*(void),long)->(void)
(	O
(	O
char	O
*	O
)	O
str	*(char)
,	O
cp	*(char)
,	O
n	int
)	O
;	O
cp	*(char)
[	O
n	int
]	O
=	O
0	int
;	O
}	O
return	O
cp	*(char)
;	O
}	O
char	O
*	O
InStr	(*(char),*(char))->(*(char))
(	O
str	*(char)
,	O
pat	*(char)
)	O
char	O
*	O
str	*(char)
;	O
const	O
char	O
*	O
pat	*(char)
;	O
{	O
int	O
npat	int
=	O
strlen	(*(char))->(long)
(	O
pat	*(char)
)	O
;	O
for	O
(	O
;	O
*	O
str	*(char)
;	O
str	*(char)
++	O
)	O
if	O
(	O
!	O
strncmp	(*(char),*(char),long)->(int)
(	O
str	*(char)
,	O
pat	*(char)
,	O
npat	int
)	O
)	O
return	O
str	*(char)
;	O
return	O
0	int
;	O
}	O
void	O
centerline	(*(char),int)->(void)
(	O
str	*(char)
,	O
y	int
)	O
char	O
*	O
str	*(char)
;	O
int	O
y	int
;	O
{	O
int	O
l	int
,	O
n	int
;	O
ASSERT	O
(	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
)	O
;	O
n	int
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
n	int
>	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
->	O
l_width	int
-	O
1	int
)	O
n	int
=	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
->	O
l_width	int
-	O
1	int
;	O
l	int
=	O
(	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
->	O
l_width	int
-	O
1	int
-	O
n	int
)	O
/	O
2	int
;	O
LPutStr	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))),*(char),int,*(struct(char,char,char,char,char,char)),int,int)->(void)
(	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
,	O
str	*(char)
,	O
n	int
,	O
&	O
mchar_blank	struct(char,char,char,char,char,char)
,	O
l	int
,	O
y	int
)	O
;	O
}	O
void	O
leftline	(*(char),int,*(struct(char,char,char,char,char,char)))->(void)
(	O
str	*(char)
,	O
y	int
,	O
rend	*(struct(char,char,char,char,char,char))
)	O
char	O
*	O
str	*(char)
;	O
int	O
y	int
;	O
struct	O
mchar	struct(char,char,char,char,char,char)
*	O
rend	*(struct(char,char,char,char,char,char))
;	O
{	O
int	O
l	int
,	O
n	int
;	O
struct	O
mchar	struct(char,char,char,char,char,char)
mchar_dol	struct(char,char,char,char,char,char)
;	O
mchar_dol	struct(char,char,char,char,char,char)
=	O
mchar_blank	struct(char,char,char,char,char,char)
;	O
mchar_dol	struct(char,char,char,char,char,char)
.	O
image	char
=	O
'$'	O
;	O
ASSERT	O
(	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
)	O
;	O
l	int
=	O
n	int
=	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
if	O
(	O
n	int
>	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
->	O
l_width	int
-	O
1	int
)	O
n	int
=	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
->	O
l_width	int
-	O
1	int
;	O
LPutStr	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))),*(char),int,*(struct(char,char,char,char,char,char)),int,int)->(void)
(	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
,	O
str	*(char)
,	O
n	int
,	O
rend	*(struct(char,char,char,char,char,char))
?	O
rend	*(struct(char,char,char,char,char,char))
:	O
&	O
mchar_blank	struct(char,char,char,char,char,char)
,	O
0	int
,	O
y	int
)	O
;	O
if	O
(	O
n	int
!=	O
l	int
)	O
LPutChar	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,int,int,*`,*`,*`,struct`,int,int,int,int,int,int,struct`)),int,int,int,int,int,*(struct(*`,*`,*`,*`,*`,*`,*`,*`)),*(void),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),*(struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`)),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int))),*(struct(char,char,char,char,char,char)),int,int)->(void)
(	O
flayer	*(struct(*(struct(*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),*(struct`),int,int,*(struct`),*(struct`),*(struct`),struct(*`,int,int,int,int,int,*`,*`,*`,*`,int,int,struct`,struct`),int,int,int,int,int,int,struct(*`,*`,*`,int,int,int,struct`,int,int,*`,*`))),int,int,int,int,int,*(struct(*((*`,*`)->(void)),*(()->(void)),*((int,int,int,int)->(void)),*((int,int,int,int)->(void)),*((int,int,int,*`,int)->(int)),*((int,int)->(int)),*(()->(void)),*((*`)->(void)))),*(void),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),*(struct(*(struct`),int,int,int,int,int,*(struct`),*(void),*(struct`),*(struct`),int,int,struct(array(char),int,int),struct(int,*`,*`,int,int,int))),int,int,struct(array(char),int,int),struct(int,*(int),*(int),int,int,int)))
,	O
&	O
mchar_dol	struct(char,char,char,char,char,char)
,	O
n	int
,	O
y	int
)	O
;	O
}	O
char	O
*	O
Filename	(*(char))->(*(char))
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
register	O
char	O
*	O
p	*(char)
=	O
s	*(char)
;	O
if	O
(	O
p	*(char)
)	O
while	O
(	O
*	O
p	*(char)
)	O
if	O
(	O
*	O
p	*(char)
++	O
==	O
'/'	O
)	O
s	*(char)
=	O
p	*(char)
;	O
return	O
s	*(char)
;	O
}	O
char	O
*	O
stripdev	(*(char))->(*(char))
(	O
nam	*(char)
)	O
char	O
*	O
nam	*(char)
;	O
{	O
if	O
(	O
nam	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
nam	*(char)
,	O
"/dev/"	*(char)
,	O
5	int
)	O
==	O
0	int
)	O
return	O
nam	*(char)
+	O
5	int
;	O
return	O
nam	*(char)
;	O
}	O
sigret_t	void
(	O
*	O
xsignal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
sig	int
,	O
func	*((int)->(void))
)	O
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
int	O
sig	int
;	O
sigret_t	void
(	O
*	O
func	*((int)->(void))
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
;	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
osa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
func	*((int)->(void))
;	O
(	O
void	O
)	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
(	O
sig	int
==	O
SIGCHLD	int
?	O
SA_RESTART	int
:	O
0	int
)	O
;	O
if	O
(	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
sig	int
,	O
&	O
sa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
&	O
osa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
)	O
)	O
return	O
(	O
sigret_t	void
(	O
*	O
)	O
__P	O
(	O
SIGPROTOARG	O
)	O
)	O
-	O
1	int
;	O
return	O
osa	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
;	O
}	O
void	O
xseteuid	(int)->(void)
(	O
euid	int
)	O
int	O
euid	int
;	O
{	O
int	O
oeuid	int
;	O
oeuid	int
=	O
geteuid	()->(int)
(	O
)	O
;	O
if	O
(	O
oeuid	int
==	O
euid	int
)	O
return	O
;	O
if	O
(	O
(	O
int	O
)	O
getuid	()->(int)
(	O
)	O
!=	O
euid	int
)	O
oeuid	int
=	O
getuid	()->(int)
(	O
)	O
;	O
if	O
(	O
setreuid	(int,int)->(int)
(	O
oeuid	int
,	O
euid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setreuid"	*(char)
)	O
;	O
}	O
void	O
xsetegid	(int)->(void)
(	O
egid	int
)	O
int	O
egid	int
;	O
{	O
int	O
oegid	int
;	O
oegid	int
=	O
getegid	()->(int)
(	O
)	O
;	O
if	O
(	O
oegid	int
==	O
egid	int
)	O
return	O
;	O
if	O
(	O
(	O
int	O
)	O
getgid	()->(int)
(	O
)	O
!=	O
egid	int
)	O
oegid	int
=	O
getgid	()->(int)
(	O
)	O
;	O
if	O
(	O
setregid	(int,int)->(int)
(	O
oegid	int
,	O
egid	int
)	O
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"setregid"	*(char)
)	O
;	O
}	O
void	O
bclear	(*(char),int)->(void)
(	O
p	*(char)
,	O
n	int
)	O
char	O
*	O
p	*(char)
;	O
int	O
n	int
;	O
{	O
bcopy	(*(void),*(void),long)->(void)
(	O
(	O
char	O
*	O
)	O
blank	*(char)
,	O
p	*(char)
,	O
n	int
)	O
;	O
}	O
void	O
Kill	(int,int)->(void)
(	O
pid	int
,	O
sig	int
)	O
int	O
pid	int
,	O
sig	int
;	O
{	O
if	O
(	O
pid	int
<	O
2	int
)	O
return	O
;	O
(	O
void	O
)	O
kill	(int,int)->(int)
(	O
pid	int
,	O
sig	int
)	O
;	O
}	O
void	O
closeallfiles	(int)->(void)
(	O
except	int
)	O
int	O
except	int
;	O
{	O
int	O
f	int
;	O
{	O
struct	O
pollfd	struct(int,short,short)
pfd	array(struct(int,short,short))
[	O
1024	int
]	O
;	O
int	O
maxfd	int
,	O
i	int
,	O
ret	int
,	O
z	int
;	O
i	int
=	O
3	int
;	O
maxfd	int
=	O
getdtablesize	()->(int)
(	O
)	O
;	O
while	O
(	O
i	int
<	O
maxfd	int
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
pfd	array(struct(int,short,short))
,	O
0	int
,	O
sizeof	O
(	O
pfd	array(struct(int,short,short))
)	O
)	O
;	O
z	int
=	O
0	int
;	O
for	O
(	O
f	int
=	O
i	int
;	O
f	int
<	O
maxfd	int
&&	O
f	int
<	O
i	int
+	O
1024	int
;	O
f	int
++	O
)	O
pfd	array(struct(int,short,short))
[	O
z	int
++	O
]	O
.	O
fd	int
=	O
f	int
;	O
ret	int
=	O
poll	(*(struct(int,short,short)),long,int)->(int)
(	O
pfd	array(struct(int,short,short))
,	O
f	int
-	O
i	int
,	O
0	int
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
Panic	(int,*(char))->(void)
(	O
errno	O
,	O
"poll"	*(char)
)	O
;	O
z	int
=	O
0	int
;	O
for	O
(	O
f	int
=	O
i	int
;	O
f	int
<	O
maxfd	int
&&	O
f	int
<	O
i	int
+	O
1024	int
;	O
f	int
++	O
)	O
if	O
(	O
!	O
(	O
pfd	array(struct(int,short,short))
[	O
z	int
++	O
]	O
.	O
revents	short
&	O
POLLNVAL	int
)	O
&&	O
f	int
!=	O
except	int
)	O
close	*((*(void))->(int))
(	O
f	int
)	O
;	O
i	int
=	O
f	int
;	O
}	O
}	O
}	O
static	O
int	O
UserSTAT	int
;	O
int	O
UserContext	()->(int)
(	O
)	O
{	O
xseteuid	(int)->(void)
(	O
real_uid	int
)	O
;	O
xsetegid	(int)->(void)
(	O
real_gid	int
)	O
;	O
return	O
1	int
;	O
}	O
void	O
UserReturn	(int)->(void)
(	O
val	array(int)
)	O
int	O
val	array(int)
;	O
{	O
xseteuid	(int)->(void)
(	O
eff_uid	int
)	O
;	O
xsetegid	(int)->(void)
(	O
eff_gid	int
)	O
;	O
UserSTAT	int
=	O
val	array(int)
;	O
}	O
int	O
UserStatus	()->(int)
(	O
)	O
{	O
return	O
UserSTAT	int
;	O
}	O
int	O
AddXChar	(*(char),int)->(int)
(	O
buf	*(char)
,	O
ch	int
)	O
char	O
*	O
buf	*(char)
;	O
int	O
ch	int
;	O
{	O
char	O
*	O
p	*(char)
=	O
buf	*(char)
;	O
if	O
(	O
ch	int
<	O
' '	O
||	O
ch	int
==	O
0x7f	int
)	O
{	O
*	O
p	*(char)
++	O
=	O
'^'	O
;	O
*	O
p	*(char)
++	O
=	O
ch	int
^	O
0x40	int
;	O
}	O
else	O
if	O
(	O
ch	int
>=	O
0x80	int
)	O
{	O
*	O
p	*(char)
++	O
=	O
'\\'	O
;	O
*	O
p	*(char)
++	O
=	O
(	O
ch	int
>>	O
6	int
&	O
7	int
)	O
+	O
'0'	O
;	O
*	O
p	*(char)
++	O
=	O
(	O
ch	int
>>	O
3	int
&	O
7	int
)	O
+	O
'0'	O
;	O
*	O
p	*(char)
++	O
=	O
(	O
ch	int
>>	O
0	int
&	O
7	int
)	O
+	O
'0'	O
;	O
}	O
else	O
*	O
p	*(char)
++	O
=	O
ch	int
;	O
return	O
p	*(char)
-	O
buf	*(char)
;	O
}	O
int	O
AddXChars	(*(char),int,*(char))->(int)
(	O
buf	*(char)
,	O
len	int
,	O
str	*(char)
)	O
char	O
*	O
buf	*(char)
,	O
*	O
str	*(char)
;	O
int	O
len	int
;	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
str	*(char)
==	O
0	int
)	O
{	O
*	O
buf	*(char)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
len	int
-=	O
4	int
;	O
for	O
(	O
p	*(char)
=	O
buf	*(char)
;	O
p	*(char)
<	O
buf	*(char)
+	O
len	int
&&	O
*	O
str	*(char)
;	O
str	*(char)
++	O
)	O
{	O
if	O
(	O
*	O
str	*(char)
==	O
' '	O
)	O
*	O
p	*(char)
++	O
=	O
*	O
str	*(char)
;	O
else	O
p	*(char)
+=	O
AddXChar	(*(char),int)->(int)
(	O
p	*(char)
,	O
*	O
str	*(char)
)	O
;	O
}	O
*	O
p	*(char)
=	O
0	int
;	O
return	O
p	*(char)
-	O
buf	*(char)
;	O
}	O
void	O
sleep1000	(int)->(void)
(	O
msec	int
)	O
int	O
msec	int
;	O
{	O
struct	O
timeval	struct(long,long)
t	struct(long,long)
;	O
t	struct(long,long)
.	O
tv_sec	long
=	O
(	O
long	O
)	O
(	O
msec	int
/	O
1000	int
)	O
;	O
t	struct(long,long)
.	O
tv_usec	long
=	O
(	O
long	O
)	O
(	O
(	O
msec	int
%	O
1000	int
)	O
*	O
1000	int
)	O
;	O
select	(int,*(struct(array(long))),*(struct(array(long))),*(struct(array(long))),*(struct(long,long)))->(int)
(	O
0	int
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
0	int
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
0	int
,	O
(	O
fd_set	struct(array(long))
*	O
)	O
0	int
,	O
&	O
t	struct(long,long)
)	O
;	O
}	O
void	O
xsetenv	(*(char),*(char))->(void)
(	O
var	*(char)
,	O
value	*(char)
)	O
char	O
*	O
var	*(char)
;	O
char	O
*	O
value	*(char)
;	O
{	O
setenv	(*(char),*(char),int)->(int)
(	O
var	*(char)
,	O
value	*(char)
,	O
1	int
)	O
;	O
}	O
int	O
_delay	(int,*((int)->(int)))->(int)
(	O
delay	int
,	O
outc	*((int)->(int))
)	O
register	O
int	O
delay	int
;	O
int	O
(	O
*	O
outc	*((int)->(int))
)	O
__P	O
(	O
(	O
int	O
)	O
)	O
;	O
{	O
int	O
pad	int
;	O
extern	O
short	O
ospeed	short
;	O
static	O
short	O
osp2pad	array(short)
[	O
]	O
=	O
{	O
0	int
,	O
2000	int
,	O
1333	int
,	O
909	int
,	O
743	int
,	O
666	int
,	O
500	int
,	O
333	int
,	O
166	int
,	O
83	int
,	O
55	int
,	O
41	int
,	O
20	int
,	O
10	int
,	O
5	int
,	O
2	int
,	O
1	int
,	O
1	int
}	O
;	O
if	O
(	O
ospeed	short
<=	O
0	int
||	O
ospeed	short
>=	O
(	O
int	O
)	O
(	O
sizeof	O
(	O
osp2pad	array(short)
)	O
/	O
sizeof	O
(	O
*	O
osp2pad	array(short)
)	O
)	O
)	O
return	O
0	int
;	O
pad	int
=	O
osp2pad	array(short)
[	O
ospeed	short
]	O
;	O
delay	int
=	O
(	O
delay	int
+	O
pad	int
/	O
2	int
)	O
/	O
pad	int
;	O
while	O
(	O
delay	int
--	O
>	O
0	int
)	O
(	O
*	O
outc	*((int)->(int))
)	O
(	O
0	int
)	O
;	O
return	O
0	int
;	O
}	O
