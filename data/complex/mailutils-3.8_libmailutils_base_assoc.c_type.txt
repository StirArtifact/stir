static	O
unsigned	O
int	O
hash_size	array(int)
[	O
]	O
=	O
{	O
37	int
,	O
101	int
,	O
229	int
,	O
487	int
,	O
1009	int
,	O
2039	int
,	O
4091	int
,	O
8191	int
,	O
16411	int
}	O
;	O
static	O
unsigned	O
int	O
max_rehash	int
=	O
sizeof	O
(	O
hash_size	array(int)
)	O
/	O
sizeof	O
(	O
hash_size	array(int)
[	O
0	int
]	O
)	O
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
{	O
char	O
*	O
name	*(char)
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
next	*((*(void))->(int))
,	O
*	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
int	O
mark	int
:	O
1	int
;	O
char	O
*	O
data	*(void)
;	O
}	O
;	O
struct	O
_mu_assoc	struct(int,int,*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char)))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*((*(void))->(void)),*(struct(*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))),*(void),int,*((*(*`),*(void))->(int)),*((*(struct`),*(void))->(int)),*((*(void))->(int)),*((*(void))->(int)),*((*(void),*(*`),*(*`))->(int)),*((*(void),*(void))->(int)),*((*(void))->(int)),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)),*((*(void))->(*(void))))))
{	O
int	O
flags	int
;	O
unsigned	O
int	O
hash_num	int
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
*	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
*	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
mu_deallocator_t	*((*(void))->(void))
free	(*(void))->(void)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
}	O
;	O
static	O
void	O
assoc_elem_unlink	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
int	O
idx	int
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
p	*(char)
;	O
p	*(char)
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
if	O
(	O
p	*(char)
)	O
p	*(char)
->	O
next	*((*(void))->(int))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
next	*((*(void))->(int))
;	O
else	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
next	*((*(void))->(int))
;	O
p	*(char)
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
next	*((*(void))->(int))
;	O
if	O
(	O
p	*(char)
)	O
p	*(char)
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
else	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
next	*((*(void))->(int))
=	O
NULL	O
;	O
}	O
static	O
void	O
assoc_elem_link	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
int	O
idx	int
)	O
{	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
next	*((*(void))->(int))
=	O
NULL	O
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
if	O
(	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
;	O
else	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
;	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
;	O
}	O
static	O
unsigned	O
hash	(*(char),long)->(int)
(	O
const	O
char	O
*	O
name	*(char)
,	O
unsigned	O
long	O
hash_num	int
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
*	O
name	*(char)
;	O
name	*(char)
++	O
)	O
{	O
i	int
<<=	O
1	int
;	O
i	int
^=	O
*	O
(	O
unsigned	O
char	O
*	O
)	O
name	*(char)
;	O
}	O
return	O
i	int
%	O
hash_size	array(int)
[	O
hash_num	int
]	O
;	O
}	O
;	O
static	O
int	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
*	O
install	*(int)
,	O
unsigned	O
*	O
slot	*(int)
)	O
;	O
static	O
int	O
assoc_rehash	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
*	O
old_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
*	O
new_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
;	O
unsigned	O
int	O
i	int
;	O
unsigned	O
int	O
hash_num	int
=	O
assoc	*(struct)
->	O
hash_num	int
+	O
1	int
;	O
if	O
(	O
hash_num	int
>=	O
max_rehash	int
)	O
return	O
MU_ERR_BUFSPACE	O
;	O
new_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
calloc	(long,long)->(*(void))
(	O
hash_size	array(int)
[	O
hash_num	int
]	O
,	O
sizeof	O
(	O
new_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
new_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
)	O
return	O
errno	O
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
new_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
;	O
if	O
(	O
old_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
)	O
{	O
assoc	*(struct)
->	O
hash_num	int
=	O
hash_num	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array(int)
[	O
hash_num	int
-	O
1	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
old_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
)	O
{	O
int	O
tmp	int
;	O
unsigned	O
slot	*(int)
;	O
int	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
old_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
->	O
name	*(char)
,	O
&	O
tmp	int
,	O
&	O
slot	*(int)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
slot	*(int)
]	O
=	O
old_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
;	O
}	O
}	O
free	(*(void))->(void)
(	O
old_tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
assoc_free_elem	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
unsigned	O
idx	int
)	O
{	O
if	O
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
)	O
{	O
assoc_elem_unlink	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
assoc	*(struct)
,	O
idx	int
)	O
;	O
if	O
(	O
assoc	*(struct)
->	O
free	(*(void))->(void)
)	O
assoc	*(struct)
->	O
free	(*(void))->(void)
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
data	*(void)
)	O
;	O
if	O
(	O
!	O
(	O
assoc	*(struct)
->	O
flags	int
&	O
MU_ASSOC_COPY_KEY	int
)	O
)	O
free	(*(void))->(void)
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
)	O
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
=	O
NULL	O
;	O
}	O
}	O
static	O
int	O
assoc_remove	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
unsigned	O
idx	int
)	O
{	O
unsigned	O
int	O
i	int
,	O
j	int
,	O
r	int
;	O
if	O
(	O
!	O
(	O
idx	int
<	O
hash_size	array(int)
[	O
assoc	*(struct)
->	O
hash_num	int
]	O
)	O
)	O
return	O
EINVAL	int
;	O
mu_iterator_delitem	(*(struct),*(void))->(void)
(	O
assoc	*(struct)
->	O
itr	*(struct)
,	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
)	O
;	O
assoc_free_elem	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
assoc	*(struct)
,	O
idx	int
)	O
;	O
for	O
(	O
i	int
=	O
idx	int
;	O
;	O
)	O
{	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
=	O
NULL	O
;	O
j	int
=	O
i	int
;	O
do	O
{	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
assoc	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
!	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
)	O
return	O
0	int
;	O
r	int
=	O
hash	(*(char),long)->(int)
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
->	O
name	*(char)
,	O
assoc	*(struct)
->	O
hash_num	int
)	O
;	O
}	O
while	O
(	O
(	O
j	int
<	O
r	int
&&	O
r	int
<=	O
i	int
)	O
||	O
(	O
i	int
<	O
j	int
&&	O
j	int
<	O
r	int
)	O
||	O
(	O
r	int
<=	O
i	int
&&	O
i	int
<	O
j	int
)	O
)	O
;	O
if	O
(	O
j	int
!=	O
i	int
)	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
j	int
]	O
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
int	O
*	O
install	*(int)
,	O
unsigned	O
*	O
slot	*(int)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
i	int
,	O
pos	int
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
if	O
(	O
!	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
)	O
{	O
if	O
(	O
install	*(int)
)	O
{	O
rc	int
=	O
assoc_rehash	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
assoc	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
}	O
else	O
return	O
MU_ERR_NOENT	O
;	O
}	O
pos	int
=	O
hash	(*(char),long)->(int)
(	O
name	*(char)
,	O
assoc	*(struct)
->	O
hash_num	int
)	O
;	O
for	O
(	O
i	int
=	O
pos	int
;	O
(	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
)	O
;	O
)	O
{	O
if	O
(	O
name_cmp	O
(	O
assoc	*(struct)
,	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
if	O
(	O
install	*(int)
)	O
*	O
install	*(int)
=	O
0	int
;	O
*	O
slot	*(int)
=	O
i	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
++	O
i	int
>=	O
hash_size	array(int)
[	O
assoc	*(struct)
->	O
hash_num	int
]	O
)	O
i	int
=	O
0	int
;	O
if	O
(	O
i	int
==	O
pos	int
)	O
break	O
;	O
}	O
if	O
(	O
!	O
install	*(int)
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
!	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
{	O
*	O
slot	*(int)
=	O
i	int
;	O
*	O
install	*(int)
=	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
(	O
rc	int
=	O
assoc_rehash	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))))->(int)
(	O
assoc	*(struct)
)	O
)	O
!=	O
0	int
)	O
return	O
rc	int
;	O
return	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
install	*(int)
,	O
slot	*(int)
)	O
;	O
}	O
int	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
mu_assoc_t	*(struct)
*	O
passoc	*(*(struct))
,	O
int	O
flags	int
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
assoc	*(struct)
)	O
)	O
;	O
if	O
(	O
!	O
assoc	*(struct)
)	O
return	O
ENOMEM	int
;	O
assoc	*(struct)
->	O
flags	int
=	O
flags	int
;	O
*	O
passoc	*(*(struct))
=	O
assoc	*(struct)
;	O
return	O
0	int
;	O
}	O
void	O
mu_assoc_clear	(*(struct))->(void)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
)	O
{	O
unsigned	O
i	int
,	O
hs	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
)	O
return	O
;	O
hs	int
=	O
hash_size	array(int)
[	O
assoc	*(struct)
->	O
hash_num	int
]	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hs	int
;	O
i	int
++	O
)	O
assoc_free_elem	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
assoc	*(struct)
,	O
i	int
)	O
;	O
}	O
void	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
mu_assoc_t	*(struct)
*	O
passoc	*(*(struct))
)	O
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
;	O
if	O
(	O
passoc	*(*(struct))
&&	O
(	O
assoc	*(struct)
=	O
*	O
passoc	*(*(struct))
)	O
!=	O
NULL	O
)	O
{	O
mu_assoc_clear	(*(struct))->(void)
(	O
assoc	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
)	O
;	O
free	(*(void))->(void)
(	O
assoc	*(struct)
)	O
;	O
*	O
passoc	*(*(struct))
=	O
NULL	O
;	O
}	O
}	O
int	O
mu_assoc_set_destroy_item	(*(struct),*((*(void))->(void)))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
mu_deallocator_t	*((*(void))->(void))
fn	*((*(void))->(void))
)	O
{	O
if	O
(	O
!	O
assoc	*(struct)
)	O
return	O
EINVAL	int
;	O
assoc	*(struct)
->	O
free	(*(void))->(void)
=	O
fn	*((*(void))->(void))
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_lookup	(*(struct),*(char),*(void))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
dataptr	*(void)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
dataptr	*(void)
)	O
*	O
(	O
void	O
*	O
*	O
)	O
dataptr	*(void)
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
data	*(void)
;	O
}	O
return	O
rc	int
;	O
}	O
void	O
*	O
mu_assoc_get	(*(struct),*(char))->(*(void))
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
NULL	O
;	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
data	*(void)
;	O
return	O
NULL	O
;	O
}	O
int	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
value	*(void)
)	O
{	O
int	O
rc	int
;	O
int	O
inst	int
;	O
unsigned	O
idx	int
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
&	O
inst	int
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
!	O
inst	int
)	O
return	O
MU_ERR_EXISTS	O
;	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
;	O
if	O
(	O
!	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
return	O
errno	O
;	O
if	O
(	O
assoc	*(struct)
->	O
flags	int
&	O
MU_ASSOC_COPY_KEY	int
)	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
name	*(char)
;	O
else	O
{	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
)	O
{	O
int	O
rc	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
=	O
value	*(void)
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
=	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
assoc_elem_link	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
assoc	*(struct)
,	O
idx	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_lookup_ref	(*(struct),*(char),*(void))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
dataptr	*(void)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
dataptr	*(void)
)	O
*	O
(	O
void	O
*	O
*	O
)	O
dataptr	*(void)
=	O
&	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
data	*(void)
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
mu_assoc_install_ref2	(*(struct),*(char),*(void),*(*(char)))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
ret_val	*(void)
,	O
const	O
char	O
*	O
*	O
ret_name	*(*(char))
)	O
{	O
int	O
rc	int
;	O
int	O
inst	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
&	O
inst	int
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
if	O
(	O
inst	int
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
;	O
if	O
(	O
!	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
return	O
errno	O
;	O
if	O
(	O
assoc	*(struct)
->	O
flags	int
&	O
MU_ASSOC_COPY_KEY	int
)	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
name	*(char)
;	O
else	O
{	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
if	O
(	O
!	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
)	O
{	O
int	O
rc	int
=	O
errno	O
;	O
free	(*(void))->(void)
(	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
=	O
NULL	O
;	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
=	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
assoc_elem_link	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(void)
(	O
assoc	*(struct)
,	O
idx	int
)	O
;	O
}	O
*	O
(	O
void	O
*	O
*	O
)	O
ret_val	*(void)
=	O
&	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
data	*(void)
;	O
if	O
(	O
ret_name	*(*(char))
)	O
*	O
ret_name	*(*(char))
=	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
idx	int
]	O
->	O
name	*(char)
;	O
return	O
inst	int
?	O
0	int
:	O
MU_ERR_EXISTS	O
;	O
}	O
int	O
mu_assoc_install_ref	(*(struct),*(char),*(void))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
void	O
*	O
pval	*(void)
)	O
{	O
return	O
mu_assoc_install_ref2	(*(struct),*(char),*(void),*(*(char)))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
pval	*(void)
,	O
NULL	O
)	O
;	O
}	O
int	O
mu_assoc_remove	(*(struct),*(char))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
int	O
rc	int
;	O
unsigned	O
idx	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
name	*(char)
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
assoc_find_slot	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),*(char),*(int),*(int))->(int)
(	O
assoc	*(struct)
,	O
name	*(char)
,	O
NULL	O
,	O
&	O
idx	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
assoc_remove	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
assoc	*(struct)
,	O
idx	int
)	O
;	O
}	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
{	O
mu_assoc_t	*(struct)
assoc	*(struct)
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
int	O
backwards	int
;	O
}	O
;	O
static	O
int	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
enum	O
mu_itrctl_req	enum(int,int,int,int,int,int,int,int,int,int)
req	enum(int,int,int,int,int,int,int,int,int,int)
,	O
void	O
*	O
arg	*(char)
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
itr	*(struct)
->	O
assoc	*(struct)
;	O
switch	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
mu_itrctl_tell	int
:	O
{	O
size_t	long
n	int
=	O
0	int
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
for	O
(	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
n	int
++	O
;	O
*	O
(	O
size_t	long
*	O
)	O
arg	*(char)
=	O
n	int
;	O
}	O
break	O
;	O
case	O
mu_itrctl_delete	int
:	O
case	O
mu_itrctl_delete_nd	int
:	O
if	O
(	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
{	O
unsigned	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
hash_size	array(int)
[	O
assoc	*(struct)
->	O
hash_num	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
==	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
{	O
if	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
==	O
mu_itrctl_delete_nd	int
)	O
assoc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
]	O
->	O
data	*(void)
=	O
NULL	O
;	O
assoc_remove	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
assoc	*(struct)
,	O
i	int
)	O
;	O
return	O
0	int
;	O
}	O
}	O
}	O
return	O
MU_ERR_NOENT	O
;	O
case	O
mu_itrctl_replace	int
:	O
case	O
mu_itrctl_replace_nd	int
:	O
if	O
(	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
==	O
NULL	O
)	O
return	O
MU_ERR_NOENT	O
;	O
if	O
(	O
req	enum(int,int,int,int,int,int,int,int,int,int)
==	O
mu_itrctl_replace	int
&&	O
assoc	*(struct)
->	O
free	(*(void))->(void)
)	O
assoc	*(struct)
->	O
free	(*(void))->(void)
(	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
)	O
;	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
mu_itrctl_qry_direction	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
else	O
*	O
(	O
int	O
*	O
)	O
arg	*(char)
=	O
itr	*(struct)
->	O
backwards	int
;	O
break	O
;	O
case	O
mu_itrctl_set_direction	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
else	O
itr	*(struct)
->	O
backwards	int
=	O
!	O
!	O
*	O
(	O
int	O
*	O
)	O
arg	*(char)
;	O
break	O
;	O
case	O
mu_itrctl_count	int
:	O
if	O
(	O
!	O
arg	*(char)
)	O
return	O
EINVAL	int
;	O
return	O
mu_assoc_count	(*(struct),*(long))->(int)
(	O
assoc	*(struct)
,	O
arg	*(char)
)	O
;	O
default	O
:	O
return	O
ENOSYS	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
first	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
itr	*(struct)
->	O
assoc	*(struct)
;	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
itr	*(struct)
->	O
backwards	int
?	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
:	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
next	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
itr	*(struct)
->	O
backwards	int
?	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
:	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
return	O
0	int
;	O
}	O
static	O
int	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
*	O
pret	*(long)
,	O
const	O
void	O
*	O
*	O
pkey	*(*(void))
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
if	O
(	O
!	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
return	O
EINVAL	int
;	O
*	O
pret	*(long)
=	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
;	O
if	O
(	O
pkey	*(*(void))
)	O
*	O
pkey	*(*(void))
=	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
finished_p	*((*(void))->(int))
(	O
void	O
*	O
owner	*(void)
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
return	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
==	O
NULL	O
;	O
}	O
static	O
int	O
destroy	*((*(struct),*(void))->(int))
(	O
mu_iterator_t	*(struct)
iterator	*(struct)
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
data	*(void)
;	O
mu_iterator_detach	(*(*(struct)),*(struct))->(int)
(	O
&	O
itr	*(struct)
->	O
assoc	*(struct)
->	O
itr	*(struct)
,	O
iterator	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
delitem	*((*(void),*(void))->(int))
(	O
void	O
*	O
owner	*(void)
,	O
void	O
*	O
item	*(void)
)	O
{	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
=	O
owner	*(void)
;	O
return	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
==	O
item	*(void)
?	O
MU_ITR_DELITEM_NEXT	int
:	O
MU_ITR_DELITEM_NOTHING	int
;	O
}	O
static	O
int	O
assoc_data_dup	(*(*(void)),*(void))->(int)
(	O
void	O
*	O
*	O
ptr	*(*(void))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
*	O
ptr	*(*(void))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
)	O
)	O
;	O
if	O
(	O
*	O
ptr	*(*(void))
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
ptr	*(*(void))
,	O
owner	*(void)
,	O
sizeof	O
(	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
)	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
mu_iterator_t	*(struct)
*	O
piterator	*(*(struct))
)	O
{	O
mu_iterator_t	*(struct)
iterator	*(struct)
;	O
int	O
status	int
;	O
struct	O
assoc_iterator	struct(*(struct(int,int,*(*(struct(*`,*`,*`,int,*`))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*((*(void))->(void)),*(struct(*(struct`),*(void),int,*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(int)),*((*`,enum(int,int,int,int,int,int,int,int,int,int),*`)->(int)),*((*`)->(*`)))))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int)
*	O
itr	*(struct)
;	O
if	O
(	O
!	O
assoc	*(struct)
)	O
return	O
EINVAL	int
;	O
itr	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
*	O
itr	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*(struct)
)	O
return	O
ENOMEM	int
;	O
itr	*(struct)
->	O
assoc	*(struct)
=	O
assoc	*(struct)
;	O
itr	*(struct)
->	O
elem	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
NULL	O
;	O
status	int
=	O
mu_iterator_create	(*(*(struct)),*(void))->(int)
(	O
&	O
iterator	*(struct)
,	O
itr	*(struct)
)	O
;	O
if	O
(	O
status	int
)	O
{	O
free	(*(void))->(void)
(	O
itr	*(struct)
)	O
;	O
return	O
status	int
;	O
}	O
mu_iterator_set_first	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
first	*((*(void))->(int))
)	O
;	O
mu_iterator_set_next	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
next	*((*(void))->(int))
)	O
;	O
mu_iterator_set_getitem	(*(struct),*((*(void),*(*(void)),*(*(void)))->(int)))->(int)
(	O
iterator	*(struct)
,	O
getitem	*((*(void),*(*(void)),*(*(void)))->(int))
)	O
;	O
mu_iterator_set_finished_p	(*(struct),*((*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
finished_p	*((*(void))->(int))
)	O
;	O
mu_iterator_set_delitem	(*(struct),*((*(void),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
delitem	*((*(void),*(void))->(int))
)	O
;	O
mu_iterator_set_destroy	(*(struct),*((*(struct),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
destroy	*((*(struct),*(void))->(int))
)	O
;	O
mu_iterator_set_dup	(*(struct),*((*(*(void)),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
assoc_data_dup	(*(*(void)),*(void))->(int)
)	O
;	O
mu_iterator_set_itrctl	(*(struct),*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)))->(int)
(	O
iterator	*(struct)
,	O
itrctl	*((*(void),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int))
)	O
;	O
mu_iterator_attach	(*(*(struct)),*(struct))->(int)
(	O
&	O
assoc	*(struct)
->	O
itr	*(struct)
,	O
iterator	*(struct)
)	O
;	O
*	O
piterator	*(*(struct))
=	O
iterator	*(struct)
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_count	(*(struct),*(long))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
size_t	long
*	O
pcount	*(long)
)	O
{	O
size_t	long
length	long
=	O
0	int
;	O
if	O
(	O
!	O
pcount	*(long)
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
assoc	*(struct)
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
for	O
(	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
)	O
length	long
++	O
;	O
}	O
*	O
pcount	*(long)
=	O
length	long
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_is_empty	(*(struct))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
)	O
{	O
return	O
assoc	*(struct)
==	O
NULL	O
||	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
==	O
NULL	O
;	O
}	O
int	O
mu_assoc_foreach	(*(struct),*((*(char),*(void),*(void))->(int)),*(void))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
mu_assoc_action_t	*((*(char),*(void),*(void))->(int))
action	*((*(char),*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
int	O
rc	int
;	O
if	O
(	O
!	O
assoc	*(struct)
||	O
!	O
action	*((*(char),*(void),*(void))->(int))
)	O
return	O
EINVAL	int
;	O
rc	int
=	O
mu_assoc_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
assoc	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
char	O
*	O
name	*(char)
;	O
void	O
*	O
value	*(void)
;	O
rc	int
=	O
mu_iterator_current_kv	(*(struct),*(*(void)),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
const	O
void	O
*	O
*	O
)	O
&	O
name	*(char)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
value	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
rc	int
=	O
action	*((*(char),*(void),*(void))->(int))
(	O
name	*(char)
,	O
value	*(void)
,	O
data	*(void)
)	O
;	O
if	O
(	O
rc	int
)	O
break	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
static	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
merge	(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
(	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
mu_assoc_comparator_t	*((*(char),*(void),*(char),*(void),*(void))->(int))
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
NULL	O
,	O
*	O
*	O
tailptr	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
&	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
*	O
tmp	int
;	O
while	O
(	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
&&	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
)	O
{	O
if	O
(	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
(	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
,	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
,	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
,	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
,	O
data	*(void)
)	O
<=	O
0	int
)	O
{	O
tmp	int
=	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
*	O
tailptr	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
tailptr	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
&	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
tmp	int
;	O
}	O
else	O
{	O
tmp	int
=	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
*	O
tailptr	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
tailptr	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
&	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
tmp	int
;	O
}	O
}	O
*	O
tailptr	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
=	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
?	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
:	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
return	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
}	O
static	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
merge_sort	(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),long,*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
(	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
list	*(struct)
,	O
size_t	long
length	long
,	O
mu_assoc_comparator_t	*((*(char),*(void),*(char),*(void),*(void))->(int))
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
*	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
size_t	long
left_len	long
,	O
right_len	long
,	O
i	int
;	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
if	O
(	O
length	long
==	O
1	int
)	O
return	O
list	*(struct)
;	O
if	O
(	O
length	long
==	O
2	int
)	O
{	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
list	*(struct)
->	O
next	*((*(void))->(int))
;	O
if	O
(	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
(	O
list	*(struct)
->	O
name	*(char)
,	O
list	*(struct)
->	O
data	*(void)
,	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
,	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
,	O
data	*(void)
)	O
>	O
0	int
)	O
{	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
=	O
list	*(struct)
;	O
list	*(struct)
->	O
next	*((*(void))->(int))
=	O
NULL	O
;	O
return	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
}	O
return	O
list	*(struct)
;	O
}	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
list	*(struct)
;	O
left_len	long
=	O
(	O
length	long
+	O
1	int
)	O
/	O
2	int
;	O
right_len	long
=	O
length	long
/	O
2	int
;	O
for	O
(	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
list	*(struct)
,	O
i	int
=	O
left_len	long
-	O
1	int
;	O
i	int
;	O
i	int
--	O
)	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
;	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
=	O
NULL	O
;	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
merge_sort	(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),long,*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
(	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
left_len	long
,	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
data	*(void)
)	O
;	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
merge_sort	(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),long,*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
(	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
right_len	long
,	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
data	*(void)
)	O
;	O
return	O
merge	(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
(	O
left	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
right	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
data	*(void)
)	O
;	O
}	O
int	O
mu_assoc_sort_r	(*(struct),*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(int)
(	O
mu_assoc_t	*(struct)
assoc	*(struct)
,	O
mu_assoc_comparator_t	*((*(char),*(void),*(char),*(void),*(void))->(int))
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
*	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
*	O
p	*(char)
;	O
size_t	long
length	long
;	O
if	O
(	O
!	O
assoc	*(struct)
)	O
return	O
EINVAL	int
;	O
if	O
(	O
!	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
)	O
return	O
0	int
;	O
mu_assoc_count	(*(struct),*(long))->(int)
(	O
assoc	*(struct)
,	O
&	O
length	long
)	O
;	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
merge_sort	(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))),long,*((*(char),*(void),*(char),*(void),*(void))->(int)),*(void))->(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
(	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
,	O
length	long
,	O
cmp	*((*(char),*(void),*(char),*(void),*(void))->(int))
,	O
data	*(void)
)	O
;	O
for	O
(	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
NULL	O
,	O
p	*(char)
=	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
p	*(char)
;	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
p	*(char)
,	O
p	*(char)
=	O
p	*(char)
->	O
next	*((*(void))->(int))
)	O
p	*(char)
->	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
assoc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
assoc	*(struct)
->	O
tail	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
prev	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_mark	(*(struct),*((*(char),*(void),*(void))->(int)),*(void))->(int)
(	O
mu_assoc_t	*(struct)
asc	*(struct)
,	O
int	O
(	O
*	O
cond	*((*(char),*(void),*(void))->(int))
)	O
(	O
char	O
const	O
*	O
,	O
void	O
*	O
,	O
void	O
*	O
)	O
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
_mu_assoc_elem	struct(*(char),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char))),int,*(char))
*	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
if	O
(	O
!	O
asc	*(struct)
)	O
return	O
EINVAL	int
;	O
for	O
(	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
asc	*(struct)
->	O
head	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
;	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
=	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
next	*((*(void))->(int))
)	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
mark	int
=	O
!	O
!	O
cond	*((*(char),*(void),*(void))->(int))
(	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
name	*(char)
,	O
elt	*(struct(*(char),*(struct(*(char),*(struct`),*(struct`),int,*(char))),*(struct(*(char),*(struct`),*(struct`),int,*(char))),int,*(char)))
->	O
data	*(void)
,	O
data	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_assoc_sweep	(*(struct))->(int)
(	O
mu_assoc_t	*(struct)
asc	*(struct)
)	O
{	O
unsigned	O
i	int
;	O
if	O
(	O
!	O
asc	*(struct)
)	O
return	O
EINVAL	int
;	O
for	O
(	O
i	int
=	O
hash_size	array(int)
[	O
asc	*(struct)
->	O
hash_num	int
]	O
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
asc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
-	O
1	int
]	O
&&	O
asc	*(struct)
->	O
tab	*(*(struct(*(char),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(char))))
[	O
i	int
-	O
1	int
]	O
->	O
mark	int
)	O
assoc_remove	(*(struct(int,int,*(*(struct`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*((*`)->(void)),*(struct(*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`)))),int)->(int)
(	O
asc	*(struct)
,	O
i	int
-	O
1	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
