jmp_buf	array(struct(array(long),int,struct(array(long))))
mainloop	array(struct(array(long),int,struct(array(long))))
;	O
sigset_t	struct(array(long))
mainsigset	struct(array(long))
;	O
volatile	O
int	O
pass	int
=	O
0	int
;	O
volatile	O
char	O
*	O
stack_lower_bound	*(char)
;	O
volatile	O
char	O
*	O
stack_upper_bound	*(char)
;	O
static	O
void	O
stackoverflow_handler_continuation	(*(void),*(void),*(void))->(void)
(	O
void	O
*	O
arg1	*(void)
,	O
void	O
*	O
arg2	*(void)
,	O
void	O
*	O
arg3	*(void)
)	O
{	O
int	O
arg	int
=	O
(	O
int	O
)	O
(	O
long	O
)	O
arg1	*(void)
;	O
longjmp	(array(struct(array(long),int,struct(array(long)))),int)->(void)
(	O
mainloop	array(struct(array(long),int,struct(array(long))))
,	O
arg	int
)	O
;	O
}	O
void	O
stackoverflow_handler	(int,*(struct(long,*(struct(long,*`,struct`,struct`,struct`,struct`,array(long long))),struct(*(void),int,long),struct(array(long long),*(struct`),array(long long)),struct(array(long)),struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int)),array(long long))))->(void)
(	O
int	O
emergency	int
,	O
stackoverflow_context_t	*(struct(long,*(struct(long,*(struct`),struct(*`,int,long),struct(array(long long),*`,array(long long)),struct(array(long)),struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int)),array(long long))),struct(*(void),int,long),struct(array(long long),*(struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int))),array(long long)),struct(array(long)),struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int)),array(long long)))
scp	*(struct(long,*(struct(long,*(struct`),struct(*`,int,long),struct(array(long long),*`,array(long long)),struct(array(long)),struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int)),array(long long))),struct(*(void),int,long),struct(array(long long),*(struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int))),array(long long)),struct(array(long)),struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int)),array(long long)))
)	O
{	O
char	O
dummy	char
;	O
volatile	O
char	O
*	O
addr	*(char)
=	O
&	O
dummy	char
;	O
if	O
(	O
!	O
(	O
addr	*(char)
>=	O
stack_lower_bound	*(char)
&&	O
addr	*(char)
<=	O
stack_upper_bound	*(char)
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
pass	int
++	O
;	O
printf	(*(char))->(int)
(	O
"Stack overflow %d caught.\n"	*(char)
,	O
pass	int
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_SETMASK	int
,	O
&	O
mainsigset	struct(array(long))
,	O
NULL	O
)	O
;	O
sigsegv_leave_handler	(*((*(void),*(void),*(void))->(void)),*(void),*(void),*(void))->(int)
(	O
stackoverflow_handler_continuation	(*(void),*(void),*(void))->(void)
,	O
(	O
void	O
*	O
)	O
(	O
long	O
)	O
(	O
emergency	int
?	O
-	O
1	int
:	O
pass	int
)	O
,	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
volatile	O
int	O
*	O
recurse_1	(int,*(int))->(*(int))
(	O
int	O
n	int
,	O
volatile	O
int	O
*	O
p	*(int)
)	O
{	O
if	O
(	O
n	int
<	O
INT_MAX	O
)	O
*	O
recurse_1	(int,*(int))->(*(int))
(	O
n	int
+	O
1	int
,	O
p	*(int)
)	O
+=	O
n	int
;	O
return	O
p	*(int)
;	O
}	O
int	O
recurse	(int)->(int)
(	O
volatile	O
int	O
n	int
)	O
{	O
return	O
*	O
recurse_1	(int,*(int))->(*(int))
(	O
n	int
,	O
&	O
n	int
)	O
;	O
}	O
int	O
main	()->(int)
(	O
)	O
{	O
sigset_t	struct(array(long))
emptyset	struct(array(long))
;	O
struct	O
rlimit	struct(long,long)
rl	struct(long,long)
;	O
rl	struct(long,long)
.	O
rlim_cur	long
=	O
rl	struct(long,long)
.	O
rlim_max	long
=	O
0x100000	int
;	O
setrlimit	(int,*(struct(long,long)))->(int)
(	O
RLIMIT_STACK	int
,	O
&	O
rl	struct(long,long)
)	O
;	O
prepare_alternate_stack	()->(void)
(	O
)	O
;	O
if	O
(	O
stackoverflow_install_handler	(*((int,*(struct(long,*`,struct`,struct`,struct`,struct`,array(long long))))->(void)),*(void),long)->(int)
(	O
&	O
stackoverflow_handler	(int,*(struct(long,*(struct(long,*`,struct`,struct`,struct`,struct`,array(long long))),struct(*(void),int,long),struct(array(long long),*(struct`),array(long long)),struct(array(long)),struct(short,short,short,short,long,long,int,int,array(struct(array(short),short,array(short))),array(struct(array(int))),array(int)),array(long long))))->(void)
,	O
mystack	*(char)
,	O
SIGSTKSZ	int
)	O
<	O
0	int
)	O
exit	(int)->(void)
(	O
2	int
)	O
;	O
stack_lower_bound	*(char)
=	O
mystack	*(char)
;	O
stack_upper_bound	*(char)
=	O
mystack	*(char)
+	O
SIGSTKSZ	int
-	O
1	int
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
emptyset	struct(array(long))
)	O
;	O
sigprocmask	(int,*(struct(array(long))),*(struct(array(long))))->(int)
(	O
SIG_BLOCK	int
,	O
&	O
emptyset	struct(array(long))
,	O
&	O
mainsigset	struct(array(long))
)	O
;	O
switch	O
(	O
setjmp	(array(struct(array(long),int,struct(array(long)))))->(int)
(	O
mainloop	array(struct(array(long),int,struct(array(long))))
)	O
)	O
{	O
case	O
-	O
1	int
:	O
printf	(*(char))->(int)
(	O
"emergency exit\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
0	int
:	O
case	O
1	int
:	O
printf	(*(char))->(int)
(	O
"Starting recursion pass %d.\n"	*(char)
,	O
pass	int
+	O
1	int
)	O
;	O
recurse	(int)->(int)
(	O
0	int
)	O
;	O
printf	(*(char))->(int)
(	O
"no endless recursion?!\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
case	O
2	int
:	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
check_alternate_stack_no_overflow	()->(void)
(	O
)	O
;	O
printf	(*(char))->(int)
(	O
"Test passed.\n"	*(char)
)	O
;	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
}	O
