struct	O
autodetect_alias	O
{	O
struct	O
autodetect_alias	O
*	O
next	O
;	O
const	O
char	O
*	O
name	*(char)
;	O
const	O
char	O
*	O
const	O
*	O
encodings_to_try	O
;	O
}	O
;	O
static	O
const	O
char	O
*	O
const	O
autodetect_utf8_try	array(*(char))
[	O
]	O
=	O
{	O
"UTF-8"	*(char)
,	O
"ISO-8859-1"	*(char)
,	O
NULL	O
}	O
;	O
static	O
const	O
char	O
*	O
const	O
autodetect_jp_try	array(*(char))
[	O
]	O
=	O
{	O
"ISO-2022-JP-2"	*(char)
,	O
"EUC-JP"	*(char)
,	O
"SHIFT_JIS"	*(char)
,	O
NULL	O
}	O
;	O
static	O
const	O
char	O
*	O
const	O
autodetect_kr_try	array(*(char))
[	O
]	O
=	O
{	O
"ISO-2022-KR"	*(char)
,	O
"EUC-KR"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
autodetect_alias	O
autodetect_predefined	int
[	O
]	O
=	O
{	O
{	O
&	O
autodetect_predefined	int
[	O
1	int
]	O
,	O
"autodetect_utf8"	*(char)
,	O
autodetect_utf8_try	array(*(char))
}	O
,	O
{	O
&	O
autodetect_predefined	int
[	O
2	int
]	O
,	O
"autodetect_jp"	*(char)
,	O
autodetect_jp_try	array(*(char))
}	O
,	O
{	O
NULL	O
,	O
"autodetect_kr"	*(char)
,	O
autodetect_kr_try	array(*(char))
}	O
}	O
;	O
static	O
struct	O
autodetect_alias	O
*	O
autodetect_list	*(struct)
=	O
&	O
autodetect_predefined	int
[	O
0	int
]	O
;	O
static	O
struct	O
autodetect_alias	O
*	O
*	O
autodetect_list_end	*(*(struct))
=	O
&	O
autodetect_predefined	int
[	O
SIZEOF	O
(	O
autodetect_predefined	int
)	O
-	O
1	int
]	O
.	O
next	O
;	O
int	O
uniconv_register_autodetect	O
(	O
const	O
char	O
*	O
name	*(char)
,	O
const	O
char	O
*	O
const	O
*	O
try_in_order	*(*(char))
)	O
{	O
size_t	O
namelen	O
;	O
size_t	O
listlen	O
;	O
size_t	O
memneed	O
;	O
size_t	O
i	O
;	O
char	O
*	O
memory	*(char)
;	O
struct	O
autodetect_alias	O
*	O
new_alias	*(struct)
;	O
char	O
*	O
new_name	*(char)
;	O
const	O
char	O
*	O
*	O
new_try_in_order	*(*(char))
;	O
if	O
(	O
try_in_order	*(*(char))
[	O
0	int
]	O
==	O
NULL	O
)	O
{	O
errno	O
=	O
EINVAL	O
;	O
return	O
-	O
1	int
;	O
}	O
namelen	O
=	O
strlen	O
(	O
name	*(char)
)	O
+	O
1	int
;	O
memneed	O
=	O
sizeof	O
(	O
struct	O
autodetect_alias	O
)	O
+	O
namelen	O
+	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
try_in_order	*(*(char))
[	O
i	O
]	O
!=	O
NULL	O
;	O
i	O
++	O
)	O
memneed	O
+=	O
sizeof	O
(	O
char	O
*	O
)	O
+	O
strlen	O
(	O
try_in_order	*(*(char))
[	O
i	O
]	O
)	O
+	O
1	int
;	O
listlen	O
=	O
i	O
;	O
memory	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	O
(	O
memneed	O
)	O
;	O
if	O
(	O
memory	*(char)
!=	O
NULL	O
)	O
{	O
new_alias	*(struct)
=	O
(	O
struct	O
autodetect_alias	O
*	O
)	O
memory	*(char)
;	O
memory	*(char)
+=	O
sizeof	O
(	O
struct	O
autodetect_alias	O
)	O
;	O
new_try_in_order	*(*(char))
=	O
(	O
const	O
char	O
*	O
*	O
)	O
memory	*(char)
;	O
memory	*(char)
+=	O
(	O
listlen	O
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
;	O
new_name	*(char)
=	O
(	O
char	O
*	O
)	O
memory	*(char)
;	O
memcpy	O
(	O
new_name	*(char)
,	O
name	*(char)
,	O
namelen	O
)	O
;	O
memory	*(char)
+=	O
namelen	O
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
listlen	O
;	O
i	O
++	O
)	O
{	O
size_t	O
len	O
=	O
strlen	O
(	O
try_in_order	*(*(char))
[	O
i	O
]	O
)	O
+	O
1	int
;	O
memcpy	O
(	O
memory	*(char)
,	O
try_in_order	*(*(char))
[	O
i	O
]	O
,	O
len	O
)	O
;	O
new_try_in_order	*(*(char))
[	O
i	O
]	O
=	O
(	O
const	O
char	O
*	O
)	O
memory	*(char)
;	O
memory	*(char)
+=	O
len	O
;	O
}	O
new_try_in_order	*(*(char))
[	O
i	O
]	O
=	O
NULL	O
;	O
new_alias	*(struct)
->	O
name	*(char)
=	O
new_name	*(char)
;	O
new_alias	*(struct)
->	O
encodings_to_try	O
=	O
new_try_in_order	*(*(char))
;	O
new_alias	*(struct)
->	O
next	O
=	O
NULL	O
;	O
*	O
autodetect_list_end	*(*(struct))
=	O
new_alias	*(struct)
;	O
autodetect_list_end	*(*(struct))
=	O
&	O
new_alias	*(struct)
->	O
next	O
;	O
return	O
0	int
;	O
}	O
else	O
{	O
errno	O
=	O
ENOMEM	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
static	O
int	O
mem_iconveha_notranslit	(*(char),int,*(char),*(char),enum,*(int),*(*(char)),*(int))->(int)
(	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	O
srclen	int
,	O
const	O
char	O
*	O
from_codeset	*(char)
,	O
const	O
char	O
*	O
to_codeset	*(char)
,	O
enum	O
iconv_ilseq_handler	O
handler	enum
,	O
size_t	O
*	O
offsets	*(int)
,	O
char	O
*	O
*	O
resultp	*(*(char))
,	O
size_t	O
*	O
lengthp	*(int)
)	O
{	O
int	O
retval	int
=	O
mem_iconveh	O
(	O
src	*(char)
,	O
srclen	int
,	O
from_codeset	*(char)
,	O
to_codeset	*(char)
,	O
handler	enum
,	O
offsets	*(int)
,	O
resultp	*(*(char))
,	O
lengthp	*(int)
)	O
;	O
if	O
(	O
retval	int
>=	O
0	int
||	O
errno	O
!=	O
EINVAL	O
)	O
return	O
retval	int
;	O
else	O
{	O
struct	O
autodetect_alias	O
*	O
alias	*(struct)
;	O
for	O
(	O
alias	*(struct)
=	O
autodetect_list	*(struct)
;	O
alias	*(struct)
!=	O
NULL	O
;	O
alias	*(struct)
=	O
alias	*(struct)
->	O
next	O
)	O
if	O
(	O
strcmp	O
(	O
from_codeset	*(char)
,	O
alias	*(struct)
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
const	O
*	O
encodings	*(*(char))
;	O
if	O
(	O
handler	enum
!=	O
iconveh_error	O
)	O
{	O
encodings	*(*(char))
=	O
alias	*(struct)
->	O
encodings_to_try	O
;	O
do	O
{	O
retval	int
=	O
mem_iconveha_notranslit	(*(char),int,*(char),*(char),enum,*(int),*(*(char)),*(int))->(int)
(	O
src	*(char)
,	O
srclen	int
,	O
*	O
encodings	*(*(char))
,	O
to_codeset	*(char)
,	O
iconveh_error	O
,	O
offsets	*(int)
,	O
resultp	*(*(char))
,	O
lengthp	*(int)
)	O
;	O
if	O
(	O
!	O
(	O
retval	int
<	O
0	int
&&	O
errno	O
==	O
EILSEQ	O
)	O
)	O
return	O
retval	int
;	O
encodings	*(*(char))
++	O
;	O
}	O
while	O
(	O
*	O
encodings	*(*(char))
!=	O
NULL	O
)	O
;	O
}	O
encodings	*(*(char))
=	O
alias	*(struct)
->	O
encodings_to_try	O
;	O
do	O
{	O
retval	int
=	O
mem_iconveha_notranslit	(*(char),int,*(char),*(char),enum,*(int),*(*(char)),*(int))->(int)
(	O
src	*(char)
,	O
srclen	int
,	O
*	O
encodings	*(*(char))
,	O
to_codeset	*(char)
,	O
handler	enum
,	O
offsets	*(int)
,	O
resultp	*(*(char))
,	O
lengthp	*(int)
)	O
;	O
if	O
(	O
!	O
(	O
retval	int
<	O
0	int
&&	O
errno	O
==	O
EILSEQ	O
)	O
)	O
return	O
retval	int
;	O
encodings	*(*(char))
++	O
;	O
}	O
while	O
(	O
*	O
encodings	*(*(char))
!=	O
NULL	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
errno	O
=	O
EINVAL	O
;	O
return	O
-	O
1	int
;	O
}	O
}	O
int	O
mem_iconveha	O
(	O
const	O
char	O
*	O
src	*(char)
,	O
size_t	O
srclen	int
,	O
const	O
char	O
*	O
from_codeset	*(char)
,	O
const	O
char	O
*	O
to_codeset	*(char)
,	O
bool	O
transliterate	int
,	O
enum	O
iconv_ilseq_handler	O
handler	enum
,	O
size_t	O
*	O
offsets	*(int)
,	O
char	O
*	O
*	O
resultp	*(*(char))
,	O
size_t	O
*	O
lengthp	*(int)
)	O
{	O
if	O
(	O
srclen	int
==	O
0	int
)	O
{	O
*	O
lengthp	*(int)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
return	O
mem_iconveha_notranslit	(*(char),int,*(char),*(char),enum,*(int),*(*(char)),*(int))->(int)
(	O
src	*(char)
,	O
srclen	int
,	O
from_codeset	*(char)
,	O
to_codeset	*(char)
,	O
handler	enum
,	O
offsets	*(int)
,	O
resultp	*(*(char))
,	O
lengthp	*(int)
)	O
;	O
}	O
static	O
char	O
*	O
str_iconveha_notranslit	(*(char),*(char),*(char),enum)->(*(char))
(	O
const	O
char	O
*	O
src	*(char)
,	O
const	O
char	O
*	O
from_codeset	*(char)
,	O
const	O
char	O
*	O
to_codeset	*(char)
,	O
enum	O
iconv_ilseq_handler	O
handler	enum
)	O
{	O
char	O
*	O
result	*(char)
=	O
str_iconveh	O
(	O
src	*(char)
,	O
from_codeset	*(char)
,	O
to_codeset	*(char)
,	O
handler	enum
)	O
;	O
if	O
(	O
result	*(char)
!=	O
NULL	O
||	O
errno	O
!=	O
EINVAL	O
)	O
return	O
result	*(char)
;	O
else	O
{	O
struct	O
autodetect_alias	O
*	O
alias	*(struct)
;	O
for	O
(	O
alias	*(struct)
=	O
autodetect_list	*(struct)
;	O
alias	*(struct)
!=	O
NULL	O
;	O
alias	*(struct)
=	O
alias	*(struct)
->	O
next	O
)	O
if	O
(	O
strcmp	O
(	O
from_codeset	*(char)
,	O
alias	*(struct)
->	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
const	O
char	O
*	O
const	O
*	O
encodings	*(*(char))
;	O
if	O
(	O
handler	enum
!=	O
iconveh_error	O
)	O
{	O
encodings	*(*(char))
=	O
alias	*(struct)
->	O
encodings_to_try	O
;	O
do	O
{	O
result	*(char)
=	O
str_iconveha_notranslit	(*(char),*(char),*(char),enum)->(*(char))
(	O
src	*(char)
,	O
*	O
encodings	*(*(char))
,	O
to_codeset	*(char)
,	O
iconveh_error	O
)	O
;	O
if	O
(	O
!	O
(	O
result	*(char)
==	O
NULL	O
&&	O
errno	O
==	O
EILSEQ	O
)	O
)	O
return	O
result	*(char)
;	O
encodings	*(*(char))
++	O
;	O
}	O
while	O
(	O
*	O
encodings	*(*(char))
!=	O
NULL	O
)	O
;	O
}	O
encodings	*(*(char))
=	O
alias	*(struct)
->	O
encodings_to_try	O
;	O
do	O
{	O
result	*(char)
=	O
str_iconveha_notranslit	(*(char),*(char),*(char),enum)->(*(char))
(	O
src	*(char)
,	O
*	O
encodings	*(*(char))
,	O
to_codeset	*(char)
,	O
handler	enum
)	O
;	O
if	O
(	O
!	O
(	O
result	*(char)
==	O
NULL	O
&&	O
errno	O
==	O
EILSEQ	O
)	O
)	O
return	O
result	*(char)
;	O
encodings	*(*(char))
++	O
;	O
}	O
while	O
(	O
*	O
encodings	*(*(char))
!=	O
NULL	O
)	O
;	O
return	O
NULL	O
;	O
}	O
errno	O
=	O
EINVAL	O
;	O
return	O
NULL	O
;	O
}	O
}	O
char	O
*	O
str_iconveha	O
(	O
const	O
char	O
*	O
src	*(char)
,	O
const	O
char	O
*	O
from_codeset	*(char)
,	O
const	O
char	O
*	O
to_codeset	*(char)
,	O
bool	O
transliterate	int
,	O
enum	O
iconv_ilseq_handler	O
handler	enum
)	O
{	O
if	O
(	O
*	O
src	*(char)
==	O
'\0'	O
||	O
c_strcasecmp	O
(	O
from_codeset	*(char)
,	O
to_codeset	*(char)
)	O
==	O
0	int
)	O
{	O
char	O
*	O
result	*(char)
=	O
strdup	O
(	O
src	*(char)
)	O
;	O
if	O
(	O
result	*(char)
==	O
NULL	O
)	O
errno	O
=	O
ENOMEM	O
;	O
return	O
result	*(char)
;	O
}	O
return	O
str_iconveha_notranslit	(*(char),*(char),*(char),enum)->(*(char))
(	O
src	*(char)
,	O
from_codeset	*(char)
,	O
to_codeset	*(char)
,	O
handler	enum
)	O
;	O
}	O
