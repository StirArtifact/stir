struct	O
_euler	struct(double,double)
{	O
double	O
yaw	double
;	O
double	O
pitch	double
;	O
}	O
;	O
struct	O
entry	struct(int,double,*(struct(int,double,*(struct(int,double,*(struct`))))))
{	O
int	O
id	int
;	O
double	O
d	long
;	O
struct	O
entry	struct(int,double,*(struct(int,double,*(struct(int,double,*(struct`))))))
*	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
}	O
;	O
static	O
struct	O
_euler	struct(double,double)
view	array(struct(double,double))
[	O
]	O
=	O
{	O
{	O
DEGtoRAD	O
(	O
90.0	int
)	O
,	O
DEGtoRAD	O
(	O
0.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
90.0	int
)	O
,	O
DEGtoRAD	O
(	O
0.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
45.0	int
)	O
}	O
,	O
{	O
DEGtoRAD	O
(	O
-	O
135.0	int
)	O
,	O
DEGtoRAD	O
(	O
-	O
45.0	int
)	O
}	O
,	O
}	O
;	O
static	O
char	O
*	O
aspect_name	array(*(char))
[	O
]	O
=	O
{	O
"left"	*(char)
,	O
"right"	*(char)
,	O
"front right bottom"	*(char)
,	O
"front right top"	*(char)
,	O
"front left bottom"	*(char)
,	O
"front left top"	*(char)
,	O
"aft right bottom"	*(char)
,	O
"aft right top"	*(char)
,	O
"aft left bottom"	*(char)
,	O
"aft left top"	*(char)
}	O
;	O
void	O
VComputePolygonOrdering	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))->(void)
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
)	O
{	O
register	O
int	O
i	int
,	O
j	int
,	O
k	int
,	O
inserted	int
;	O
register	O
double	O
d	long
,	O
dn	double
;	O
VMatrix	struct(array(array(double)))
mtx	struct(array(array(double)))
;	O
VPoint	struct(double,double,double)
pt1	struct(double,double,double)
,	O
pt2	struct(double,double,double)
;	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
struct	O
entry	struct(int,double,*(struct(int,double,*(struct(int,double,*(struct`))))))
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
VmaxVP	int
]	O
,	O
*	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
,	O
*	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
,	O
*	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
;	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
order	*(short)
=	O
(	O
unsigned	O
short	O
*	O
)	O
Vmalloc	(int)->(*(char))
(	O
sizeof	O
(	O
unsigned	O
short	O
)	O
*	O
NUM_ASPECTS	int
*	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
NUM_ASPECTS	int
;	O
++	O
i	int
)	O
{	O
VIdentMatrix	(*(struct(array(array(double)))))->(void)
(	O
&	O
mtx	struct(array(array(double)))
)	O
;	O
VRotate	(*(struct(array(array(double)))),int,double)->(*(struct(array(array(double)))))
(	O
&	O
mtx	struct(array(array(double)))
,	O
YRotation	int
,	O
-	O
view	array(struct(double,double))
[	O
i	int
]	O
.	O
pitch	double
)	O
;	O
VRotate	(*(struct(array(array(double)))),int,double)->(*(struct(array(array(double)))))
(	O
&	O
mtx	struct(array(array(double)))
,	O
ZRotation	int
,	O
view	array(struct(double,double))
[	O
i	int
]	O
.	O
yaw	double
)	O
;	O
pt1	struct(double,double,double)
.	O
x	double
=	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
extent	double
*	O
10.0	int
;	O
pt1	struct(double,double,double)
.	O
y	double
=	O
pt1	struct(double,double,double)
.	O
z	double
=	O
0.0	int
;	O
VTransform	(*(struct(double,double,double)),*(struct(array(array(double)))),*(struct(double,double,double)))->(void)
(	O
&	O
pt1	struct(double,double,double)
,	O
&	O
mtx	struct(array(array(double)))
,	O
&	O
pt2	struct(double,double,double)
)	O
;	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
=	O
(	O
struct	O
entry	struct(int,double,*(struct(int,double,*(struct(int,double,*(struct`))))))
*	O
)	O
NULL	O
;	O
for	O
(	O
j	int
=	O
0	int
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
polygon	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
;	O
j	int
<	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
;	O
++	O
j	int
)	O
{	O
dn	double
=	O
mag	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
vertex	*(struct(double,double,double))
[	O
0	int
]	O
.	O
x	double
-	O
pt2	struct(double,double,double)
.	O
x	double
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
vertex	*(struct(double,double,double))
[	O
0	int
]	O
.	O
y	double
-	O
pt2	struct(double,double,double)
.	O
y	double
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
vertex	*(struct(double,double,double))
[	O
0	int
]	O
.	O
z	double
-	O
pt2	struct(double,double,double)
.	O
z	double
)	O
;	O
for	O
(	O
k	int
=	O
1	int
;	O
k	int
<	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
numVtces	short
;	O
++	O
k	int
)	O
{	O
d	long
=	O
mag	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
vertex	*(struct(double,double,double))
[	O
k	int
]	O
.	O
x	double
-	O
pt2	struct(double,double,double)
.	O
x	double
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
vertex	*(struct(double,double,double))
[	O
k	int
]	O
.	O
y	double
-	O
pt2	struct(double,double,double)
.	O
y	double
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
j	int
]	O
->	O
vertex	*(struct(double,double,double))
[	O
k	int
]	O
.	O
z	double
-	O
pt2	struct(double,double,double)
.	O
z	double
)	O
;	O
if	O
(	O
d	long
>	O
dn	double
)	O
{	O
dn	double
=	O
d	long
;	O
}	O
}	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
id	int
=	O
j	int
;	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
d	long
=	O
dn	double
;	O
if	O
(	O
!	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
)	O
{	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
;	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
=	O
&	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
;	O
}	O
else	O
{	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
=	O
(	O
struct	O
entry	struct(int,double,*(struct(int,double,*(struct(int,double,*(struct`))))))
*	O
)	O
NULL	O
;	O
inserted	int
=	O
0	int
;	O
for	O
(	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
=	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
;	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
;	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
=	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
{	O
if	O
(	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
d	long
<	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
d	long
)	O
{	O
if	O
(	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
)	O
{	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
&	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
;	O
}	O
else	O
{	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
;	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
=	O
&	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
;	O
}	O
inserted	int
=	O
1	int
;	O
break	O
;	O
}	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
=	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
;	O
}	O
if	O
(	O
inserted	int
==	O
0	int
)	O
{	O
last_e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
&	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
;	O
ent	array(struct(int,double,*(struct(int,double,*(struct(int,double,*`))))))
[	O
j	int
]	O
.	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
=	O
(	O
struct	O
entry	struct(int,double,*(struct(int,double,*(struct(int,double,*(struct`))))))
*	O
)	O
NULL	O
;	O
}	O
}	O
}	O
k	int
=	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
*	O
i	int
;	O
for	O
(	O
j	int
=	O
0	int
,	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
=	O
head	*(struct(short,long,long,*(struct(short,long,*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`))),*(struct(short,long,long,*(struct`),*(struct`),*(struct`)))))
;	O
j	int
<	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
;	O
++	O
j	int
,	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
=	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
next	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
{	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
order	*(short)
[	O
k	int
+	O
j	int
]	O
=	O
e	*(struct(int,double,*(struct(int,double,*(struct`)))))
->	O
id	int
;	O
}	O
}	O
}	O
int	O
VObjectNeedsOrdering	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))))->(int)
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
)	O
{	O
VPolygon	struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),*(struct(*(char),short,short,*(struct(*`,short,short,*`)))),double)
*	O
*	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
;	O
VColor	struct(*(char),short,short,*(struct(*(char),short,short,*(struct(*`,short,short,*`)))))
*	O
c	*(struct(long,short,short,short,char,char))
;	O
int	O
i	int
;	O
if	O
(	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
order	*(short)
||	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
==	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
c	*(struct(long,short,short,short,char,char))
=	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
polygon	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
[	O
0	int
]	O
->	O
color	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
=	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
polygon	*(*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*`,short,short,*`)),*(struct(*`,short,short,*`)),double)))
;	O
i	int
<	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
numPolys	int
;	O
++	O
i	int
)	O
{	O
if	O
(	O
p	*(struct(short,short,short,struct(double,double,double),*(struct(double,double,double)),*(struct(*(char),short,short,*(struct`))),*(struct(*(char),short,short,*(struct`))),double))
[	O
i	int
]	O
->	O
backColor	*(struct(*(char),short,short,*(struct(*(char),short,short,*(struct`)))))
)	O
{	O
return	O
1	int
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
VComputeObjectAspect	(*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct`)),*(short))),*(struct(double,double,double)))->(int)
(	O
VObject	struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct(double,double,double),*(struct`),*(struct`),*(struct`),double))),*(short))
*	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
,	O
VPoint	struct(double,double,double)
*	O
loc	*(struct(double,double,double))
)	O
{	O
register	O
int	O
q	int
;	O
register	O
double	O
a	*(struct(double,double,double))
,	O
b	*(struct(double,double,double))
,	O
c	*(struct(long,short,short,short,char,char))
,	O
m	array(array(double))
;	O
m	array(array(double))
=	O
mag	O
(	O
loc	*(struct(double,double,double))
->	O
x	double
,	O
loc	*(struct(double,double,double))
->	O
y	double
,	O
loc	*(struct(double,double,double))
->	O
z	double
)	O
;	O
a	*(struct(double,double,double))
=	O
VDotProd	(*(struct(double,double,double)),*(struct(double,double,double)))->(double)
(	O
loc	*(struct(double,double,double))
,	O
&	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
xaxis	struct(double,double,double)
)	O
;	O
b	*(struct(double,double,double))
=	O
VDotProd	(*(struct(double,double,double)),*(struct(double,double,double)))->(double)
(	O
loc	*(struct(double,double,double))
,	O
&	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
yaxis	struct(double,double,double)
)	O
/	O
m	array(array(double))
;	O
c	*(struct(long,short,short,short,char,char))
=	O
VDotProd	(*(struct(double,double,double)),*(struct(double,double,double)))->(double)
(	O
loc	*(struct(double,double,double))
,	O
&	O
obj	*(struct(*(char),struct(double,double,double),struct(double,double,double),struct(double,double,double),struct(double,double,double),double,int,*(*(struct(short,short,short,struct`,*`,*`,*`,double))),*(short)))
->	O
zaxis	struct(double,double,double)
)	O
;	O
if	O
(	O
b	*(struct(double,double,double))
>	O
0.866	int
)	O
{	O
return	O
1	int
;	O
}	O
else	O
if	O
(	O
b	*(struct(double,double,double))
<	O
-	O
0.866	int
)	O
{	O
return	O
0	int
;	O
}	O
if	O
(	O
a	*(struct(double,double,double))
<	O
0.0	int
)	O
{	O
if	O
(	O
b	*(struct(double,double,double))
<	O
0.0	int
)	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
<	O
0.0	int
)	O
{	O
q	int
=	O
2	int
;	O
}	O
else	O
{	O
q	int
=	O
3	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
<	O
0.0	int
)	O
{	O
q	int
=	O
4	int
;	O
}	O
else	O
{	O
q	int
=	O
5	int
;	O
}	O
}	O
}	O
else	O
{	O
if	O
(	O
b	*(struct(double,double,double))
<	O
0.0	int
)	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
<	O
0.0	int
)	O
{	O
q	int
=	O
6	int
;	O
}	O
else	O
{	O
q	int
=	O
7	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
c	*(struct(long,short,short,short,char,char))
<	O
0.0	int
)	O
{	O
q	int
=	O
8	int
;	O
}	O
else	O
{	O
q	int
=	O
9	int
;	O
}	O
}	O
}	O
return	O
q	int
;	O
}	O
char	O
*	O
VGetAspectName	(int)->(*(char))
(	O
int	O
aspect	int
)	O
{	O
return	O
aspect_name	array(*(char))
[	O
aspect	int
]	O
;	O
}	O
