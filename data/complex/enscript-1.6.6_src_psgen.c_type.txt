typedef	O
enum	O
{	O
tNONE	int
,	O
tEOF	int
,	O
tSTRING	int
,	O
tFORMFEED	int
,	O
tNEWLINE	int
,	O
tCARRIAGE_RETURN	int
,	O
tWRAPPED_NEWLINE	int
,	O
tEPSF	int
,	O
tSETFILENAME	int
,	O
tSETPAGENUMBER	int
,	O
tNEWPAGE	int
,	O
tFONT	int
,	O
tCOLOR	int
,	O
tBGCOLOR	int
,	O
tSAVEX	int
,	O
tLOADX	int
,	O
tPS	int
}	O
TokenType	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
typedef	O
enum	O
{	O
ESC_COMMENT	int
,	O
ESC_EPSF	int
,	O
ESC_FONT	int
,	O
ESC_COLOR	int
,	O
ESC_BGCOLOR	int
,	O
ESC_NEWPAGE	int
,	O
ESC_SETFILENAME	int
,	O
ESC_SETPAGENUMBER	int
,	O
ESC_SHADE	int
,	O
ESC_BGGRAY	int
,	O
ESC_ESCAPE	int
,	O
ESC_SAVEX	int
,	O
ESC_LOADX	int
,	O
ESC_PS	int
}	O
SpecialEscape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
struct	O
gs_token_st	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
{	O
TokenType	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
type	int
;	O
unsigned	O
int	O
flags	int
;	O
double	O
new_x	double
;	O
double	O
new_y	double
;	O
int	O
new_col	int
;	O
union	O
{	O
int	O
i	int
;	O
char	O
*	O
str	*(char)
;	O
struct	O
{	O
double	O
x	double
;	O
double	O
y	double
;	O
double	O
w	int
;	O
double	O
h	int
;	O
double	O
xscale	double
;	O
double	O
yscale	double
;	O
int	O
llx	double
,	O
lly	double
,	O
urx	double
,	O
ury	double
;	O
char	O
filename	*(char)
[	O
PATH_MAX	int
]	O
;	O
char	O
*	O
skipbuf	*(char)
;	O
unsigned	O
int	O
skipbuf_len	int
;	O
unsigned	O
int	O
skipbuf_pos	int
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
pipe	(array(int))->(int)
;	O
}	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
;	O
Color	struct(float,float,float)
color	struct(float,float,float)
;	O
Color	struct(float,float,float)
bgcolor	struct(float,float,float)
;	O
struct	O
{	O
char	O
name	*(char)
[	O
PATH_MAX	int
]	O
;	O
FontPoint	struct(double,double)
size	long
;	O
InputEncoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
;	O
}	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
;	O
char	O
filename	*(char)
[	O
PATH_MAX	int
]	O
;	O
}	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
;	O
}	O
;	O
typedef	O
struct	O
gs_token_st	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
;	O
static	O
void	O
get_next_token	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),double,double,int,double,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
___P	O
(	O
(	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
double	O
linestart	double
,	O
double	O
linepos	double
,	O
unsigned	O
int	O
col	int
,	O
double	O
linew	double
,	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
)	O
;	O
static	O
void	O
dump_ps_page_header	(*(char),int)->(void)
___P	O
(	O
(	O
char	O
*	O
fname	*(char)
,	O
int	O
empty	int
)	O
)	O
;	O
static	O
void	O
dump_ps_page_trailer	()->(void)
(	O
)	O
;	O
static	O
void	O
dump_empty_page	()->(void)
(	O
)	O
;	O
static	O
int	O
recognize_eps_file	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(int)
___P	O
(	O
(	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
)	O
;	O
static	O
void	O
paste_epsf	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
___P	O
(	O
(	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
)	O
;	O
static	O
int	O
do_pass_through	(*(char),*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
___P	O
(	O
(	O
char	O
*	O
fname	*(char)
,	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
;	O
static	O
double	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
___P	O
(	O
(	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
int	O
units	int
,	O
int	O
horizontal	int
)	O
)	O
;	O
static	O
void	O
print_line_number	(double,double,double,double,int)->(void)
___P	O
(	O
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
space	double
,	O
double	O
margin	double
,	O
unsigned	O
int	O
linenum	int
)	O
)	O
;	O
static	O
void	O
divert	()->(void)
(	O
)	O
;	O
static	O
void	O
undivert	()->(void)
(	O
)	O
;	O
static	O
void	O
handle_two_side_options	()->(void)
(	O
)	O
;	O
unsigned	O
int	O
current_pagenum	int
=	O
0	int
;	O
unsigned	O
int	O
total_pages_in_file	int
;	O
unsigned	O
int	O
input_filenum	int
=	O
0	int
;	O
unsigned	O
int	O
current_file_linenum	int
;	O
int	O
first_pagenum_for_file	int
;	O
char	O
*	O
fname	*(char)
=	O
NULL	O
;	O
static	O
int	O
ps_header_dumped	int
=	O
0	int
;	O
static	O
FILE	struct
*	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
static	O
FILE	struct
*	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
static	O
int	O
do_print	int
=	O
1	int
;	O
static	O
int	O
user_fontp	int
=	O
0	int
;	O
static	O
char	O
user_font_name	array(char)
[	O
PATH_MAX	int
]	O
;	O
static	O
FontPoint	struct(double,double)
user_font_pt	struct(double,double)
;	O
static	O
InputEncoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
user_font_encoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
static	O
int	O
user_colorp	int
=	O
0	int
;	O
static	O
Color	struct(float,float,float)
user_color	struct(float,float,float)
;	O
static	O
int	O
user_bgcolorp	int
=	O
0	int
;	O
static	O
Color	struct(float,float,float)
user_bgcolor	struct(float,float,float)
;	O
static	O
unsigned	O
int	O
print_line_number_last	int
;	O
static	O
double	O
xstore	array(double)
[	O
256	int
]	O
;	O
void	O
dump_ps_header	()->(void)
(	O
)	O
{	O
char	O
*	O
cp	*(char)
,	O
*	O
cp2	*(char)
;	O
int	O
i	int
,	O
j	int
,	O
got	int
;	O
char	O
*	O
ps_version_string	*(char)
;	O
if	O
(	O
ps_header_dumped	int
)	O
return	O
;	O
ps_header_dumped	int
=	O
1	int
;	O
ps_version_string	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
VERSION	*(char)
)	O
;	O
cp	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
ps_version_string	*(char)
,	O
'.'	O
)	O
;	O
*	O
cp	*(char)
=	O
' '	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
output_first_line	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BoundingBox: %d %d %d %d\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
llx	double
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
lly	double
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
urx	double
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
ury	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Title: %s\n"	*(char)
,	O
title	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%For: %s\n"	*(char)
,	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
->	O
pw_gecos	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Creator: %s\n"	*(char)
,	O
PACKAGE_STRING	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%CreationDate: %s\n"	*(char)
,	O
date_string	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Orientation: %s\n"	*(char)
,	O
(	O
(	O
nup	int
>	O
1	int
)	O
&&	O
nup_landscape	int
)	O
||	O
(	O
(	O
nup	int
==	O
1	int
)	O
&&	O
landscape	int
)	O
?	O
"Landscape"	*(char)
:	O
"Portrait"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Pages: (atend)\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%DocumentMedia: %s %d %d 0 () ()\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
name	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
w	int
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%DocumentNeededResources: (atend)\n"	*(char)
)	O
)	O
;	O
if	O
(	O
count_key_value_set	(*(struct))->(int)
(	O
pagedevice	*(struct)
)	O
>	O
0	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%LanguageLevel: 2\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndComments\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginProlog\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginResource: procset Enscript-Prolog %s\n"	*(char)
,	O
ps_version_string	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
paste_file	(*(char),*(char))->(int)
(	O
"enscript"	*(char)
,	O
".pro"	*(char)
)	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"couldn't find prolog \"%s\": %s\n"	*(char)
)	O
,	O
"enscript.pro"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndResource\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginResource: procset Enscript-Encoding-%s %s\n"	*(char)
,	O
encoding_name	*(char)
,	O
ps_version_string	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
paste_file	(*(char),*(char))->(int)
(	O
encoding_name	*(char)
,	O
".enc"	*(char)
)	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"couldn't find encoding file \"%s.enc\": %s\n"	*(char)
)	O
,	O
encoding_name	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndResource\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndProlog\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginSetup\n"	*(char)
)	O
)	O
;	O
for	O
(	O
got	int
=	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
download_fonts	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
;	O
got	int
;	O
got	int
=	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
download_fonts	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
)	O
download_font	(*(char))->(void)
(	O
cp	*(char)
)	O
;	O
for	O
(	O
got	int
=	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
res_fonts	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
;	O
got	int
;	O
got	int
=	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
res_fonts	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%IncludeResource: font %s\n"	*(char)
,	O
cp	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/HFpt_w %g def\n"	*(char)
,	O
HFpt	struct(double,double)
.	O
w	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/HFpt_h %g def\n"	*(char)
,	O
HFpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s /HF-gs-font MF\n"	*(char)
,	O
HFname	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s /F-gs-font MF\n"	*(char)
,	O
Fname	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/F-gs-font %g %g SF\n"	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
if	O
(	O
underlay	*(char)
!=	O
NULL	O
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_str (%s) def\n"	*(char)
,	O
underlay	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_w_ptsize %g def\n"	*(char)
,	O
ul_ptsize	struct(double,double)
.	O
w	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_h_ptsize %g def\n"	*(char)
,	O
ul_ptsize	struct(double,double)
.	O
h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_gray %g def\n"	*(char)
,	O
ul_gray	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_x %g def\n"	*(char)
,	O
ul_x	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_y %g def\n"	*(char)
,	O
ul_y	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_angle %g def\n"	*(char)
,	O
ul_angle	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_style %d def\n"	*(char)
,	O
ul_style	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s /F-ul-font MF\n"	*(char)
,	O
ul_font	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ul_font /F-ul-font findfont [ul_w_ptsize 0 0 ul_h_ptsize 0 0] makefont def\n"	*(char)
)	O
)	O
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/#copies %d def\n"	*(char)
,	O
num_copies	int
)	O
)	O
;	O
if	O
(	O
page_prefeed	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"true page_prefeed\n"	*(char)
)	O
)	O
;	O
if	O
(	O
count_key_value_set	(*(struct))->(int)
(	O
statusdict	*(struct)
)	O
>	O
0	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%% Statustdict definitions:\nstatusdict begin\n  "	*(char)
)	O
)	O
;	O
i	int
=	O
2	int
;	O
for	O
(	O
got	int
=	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
statusdict	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
;	O
got	int
;	O
got	int
=	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
statusdict	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
)	O
{	O
j	int
=	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
cp2	*(char)
)	O
+	O
1	int
;	O
if	O
(	O
i	int
+	O
j	int
>	O
RESOURCE_LINE_WIDTH	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n  "	*(char)
)	O
)	O
;	O
i	int
=	O
2	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %s "	*(char)
,	O
cp2	*(char)
,	O
cp	*(char)
)	O
)	O
;	O
i	int
+=	O
j	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\nend\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
pslevel	int
>=	O
2	int
&&	O
(	O
count_key_value_set	(*(struct))->(int)
(	O
pagedevice	*(struct)
)	O
>	O
0	int
||	O
generate_PageSize	int
)	O
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%% Pagedevice definitions:\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"gs_languagelevel 1 gt {\n  <<\n    "	*(char)
)	O
)	O
;	O
i	int
=	O
4	int
;	O
for	O
(	O
got	int
=	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
pagedevice	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
;	O
got	int
;	O
got	int
=	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
pagedevice	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
)	O
{	O
j	int
=	O
strlen	(*(char))->(long)
(	O
cp2	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
+	O
2	int
;	O
if	O
(	O
i	int
+	O
j	int
>	O
RESOURCE_LINE_WIDTH	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n    "	*(char)
)	O
)	O
;	O
i	int
=	O
4	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s %s "	*(char)
,	O
cp	*(char)
,	O
cp2	*(char)
)	O
)	O
;	O
i	int
+=	O
j	int
;	O
}	O
if	O
(	O
generate_PageSize	int
)	O
{	O
if	O
(	O
i	int
+	O
21	int
>	O
RESOURCE_LINE_WIDTH	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n    "	*(char)
)	O
)	O
;	O
i	int
=	O
4	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/PageSize [%d %d] "	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
w	int
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
h	int
)	O
)	O
;	O
i	int
+=	O
21	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n  >> setpagedevice\n} if\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
header	enum(int,int,int)
!=	O
HDR_NONE	int
)	O
{	O
char	O
*	O
hdr	*(char)
;	O
if	O
(	O
header	enum(int,int,int)
==	O
HDR_SIMPLE	int
)	O
hdr	*(char)
=	O
"simple"	*(char)
;	O
else	O
hdr	*(char)
=	O
fancy_header_name	*(char)
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginResource: procset Enscript-Header-%s %s\n"	*(char)
,	O
hdr	*(char)
,	O
ps_version_string	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
paste_file	(*(char),*(char))->(int)
(	O
hdr	*(char)
,	O
".hdr"	*(char)
)	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"couldn't find header definition file \"%s.hdr\": %s\n"	*(char)
)	O
,	O
hdr	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndResource\n"	*(char)
)	O
)	O
;	O
}	O
d_output_w	int
=	O
d_page_w	int
;	O
d_output_h	int
=	O
d_page_h	int
-	O
d_header_h	int
-	O
d_footer_h	int
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_page_w %d def\n"	*(char)
,	O
d_page_w	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_page_h %d def\n"	*(char)
,	O
d_page_h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_header_x %d def\n"	*(char)
,	O
0	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_header_y %d def\n"	*(char)
,	O
d_output_h	int
+	O
d_footer_h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_header_w %d def\n"	*(char)
,	O
d_header_w	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_header_h %d def\n"	*(char)
,	O
d_header_h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_footer_x %d def\n"	*(char)
,	O
0	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_footer_y %d def\n"	*(char)
,	O
0	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_footer_w %d def\n"	*(char)
,	O
d_header_w	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_footer_h %d def\n"	*(char)
,	O
d_footer_h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_output_w %d def\n"	*(char)
,	O
d_output_w	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/d_output_h %d def\n"	*(char)
,	O
d_output_h	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/cols %d def\n"	*(char)
,	O
num_columns	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndSetup\n"	*(char)
)	O
)	O
;	O
}	O
void	O
dump_ps_trailer	()->(void)
(	O
)	O
{	O
int	O
i	int
,	O
j	int
,	O
got	int
;	O
char	O
*	O
cp	*(char)
;	O
void	O
*	O
value	*(void)
;	O
unsigned	O
int	O
nup_subpage	int
;	O
if	O
(	O
!	O
ps_header_dumped	int
)	O
return	O
;	O
nup_subpage	int
=	O
(	O
total_pages	int
-	O
1	int
)	O
%	O
nup	int
;	O
if	O
(	O
nup	int
>	O
1	int
&&	O
nup_subpage	int
+	O
1	int
!=	O
nup	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"_R\nS\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Trailer\n"	*(char)
)	O
)	O
;	O
if	O
(	O
page_prefeed	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"false page_prefeed\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Pages: %d\n"	*(char)
,	O
total_pages	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%DocumentNeededResources: font "	*(char)
)	O
)	O
;	O
i	int
=	O
32	int
;	O
for	O
(	O
got	int
=	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
res_fonts	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
&	O
value	*(void)
)	O
;	O
got	int
;	O
got	int
=	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
res_fonts	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
j	int
,	O
&	O
value	*(void)
)	O
)	O
{	O
if	O
(	O
i	int
+	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
+	O
1	int
>	O
RESOURCE_LINE_WIDTH	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%%%%+ font "	*(char)
)	O
)	O
;	O
i	int
=	O
9	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s "	*(char)
,	O
cp	*(char)
)	O
)	O
;	O
i	int
+=	O
strlen	(*(char))->(long)
(	O
cp	*(char)
)	O
+	O
1	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n%%%%EOF\n"	*(char)
)	O
)	O
;	O
}	O
void	O
process_file	(*(char),*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int)->(void)
(	O
char	O
*	O
fname_arg	*(char)
,	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
int	O
is_toc	int
)	O
{	O
int	O
col	int
;	O
double	O
x	double
,	O
y	double
;	O
double	O
lx	double
,	O
ly	double
;	O
double	O
linewidth	double
;	O
double	O
lineend	double
;	O
int	O
done	int
=	O
0	int
;	O
int	O
page_clear	int
=	O
1	int
;	O
unsigned	O
int	O
line_column	int
;	O
unsigned	O
int	O
current_linenum	int
;	O
double	O
linenumber_space	double
=	O
0	int
;	O
double	O
linenumber_margin	double
=	O
0	int
;	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
;	O
int	O
reuse_last_token	int
=	O
0	int
;	O
unsigned	O
int	O
current_slice	int
=	O
1	int
;	O
int	O
last_wrapped_line	int
=	O
-	O
1	int
;	O
int	O
last_spaced_file_linenum	int
=	O
-	O
1	int
;	O
int	O
save_current_pagenum	int
;	O
int	O
toc_pagenum	int
=	O
0	int
;	O
xfree	(*(void))->(void)
(	O
fname	*(char)
)	O
;	O
fname	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
fname_arg	*(char)
)	O
;	O
if	O
(	O
!	O
continuous_page_numbers	int
)	O
current_pagenum	int
=	O
0	int
;	O
total_pages_in_file	int
=	O
0	int
;	O
current_file_linenum	int
=	O
start_line_number	int
;	O
linenumber_space	double
=	O
CHAR_WIDTH	O
(	O
'0'	O
)	O
*	O
5	int
+	O
1.0	int
;	O
linenumber_margin	double
=	O
CHAR_WIDTH	O
(	O
':'	O
)	O
+	O
CHAR_WIDTH	O
(	O
'm'	O
)	O
;	O
input_filenum	int
++	O
;	O
print_line_number_last	int
=	O
(	O
unsigned	O
int	O
)	O
-	O
1	int
;	O
if	O
(	O
pass_through	int
||	O
output_language_pass_through	int
)	O
if	O
(	O
do_pass_through	(*(char),*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
fname	*(char)
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
return	O
;	O
dump_ps_header	()->(void)
(	O
)	O
;	O
while	O
(	O
(	O
total_pages	int
%	O
file_align	int
)	O
!=	O
0	int
)	O
{	O
total_pages	int
++	O
;	O
dump_empty_page	()->(void)
(	O
)	O
;	O
}	O
MESSAGE	O
(	O
1	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"processing file \"%s\"...\n"	*(char)
)	O
,	O
fname	*(char)
)	O
)	O
;	O
linewidth	double
=	O
d_output_w	int
/	O
num_columns	int
-	O
2	int
*	O
d_output_x_margin	int
-	O
line_indent	double
;	O
first_pagenum_for_file	int
=	O
total_pages	int
+	O
1	int
;	O
divert	()->(void)
(	O
)	O
;	O
while	O
(	O
!	O
done	int
)	O
{	O
page_clear	int
=	O
1	int
;	O
for	O
(	O
col	int
=	O
0	int
;	O
!	O
done	int
&&	O
col	int
<	O
num_columns	int
;	O
col	int
++	O
)	O
{	O
lx	double
=	O
x	double
=	O
col	int
*	O
d_output_w	int
/	O
(	O
float	O
)	O
num_columns	int
+	O
d_output_x_margin	int
+	O
line_indent	double
;	O
lineend	double
=	O
lx	double
+	O
linewidth	double
;	O
ly	double
=	O
y	double
=	O
d_footer_h	int
+	O
d_output_h	int
-	O
d_output_y_margin	int
-	O
LINESKIP	O
;	O
current_linenum	int
=	O
0	int
;	O
line_column	int
=	O
0	int
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
line_numbers	int
&&	O
line_column	int
==	O
0	int
&&	O
(	O
current_file_linenum	int
!=	O
last_spaced_file_linenum	int
)	O
)	O
{	O
x	double
+=	O
linenumber_space	double
+	O
linenumber_margin	double
;	O
last_spaced_file_linenum	int
=	O
current_file_linenum	int
;	O
}	O
if	O
(	O
!	O
reuse_last_token	int
)	O
get_next_token	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),double,double,int,double,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
lx	double
,	O
x	double
,	O
line_column	int
,	O
lineend	double
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
;	O
reuse_last_token	int
=	O
0	int
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
type	int
==	O
tEOF	int
)	O
{	O
done	int
=	O
1	int
;	O
goto	O
end_of_page	O
;	O
}	O
if	O
(	O
page_clear	int
)	O
{	O
PageRange	struct(*(struct(*(struct(*`,int,int,int,int)),int,int,int,int)),int,int,int,int)
*	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
;	O
current_pagenum	int
++	O
;	O
total_pages_in_file	int
++	O
;	O
if	O
(	O
page_ranges	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
==	O
NULL	O
)	O
do_print	int
=	O
1	int
;	O
else	O
{	O
do_print	int
=	O
0	int
;	O
for	O
(	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
=	O
page_ranges	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
;	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
;	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
=	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
)	O
{	O
if	O
(	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
odd	int
||	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
even	int
)	O
{	O
if	O
(	O
(	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
odd	int
&&	O
(	O
current_pagenum	int
%	O
2	int
)	O
==	O
1	int
)	O
||	O
(	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
even	int
&&	O
(	O
current_pagenum	int
%	O
2	int
)	O
==	O
0	int
)	O
)	O
{	O
do_print	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
start	int
<=	O
current_pagenum	int
&&	O
current_pagenum	int
<=	O
pr	*(struct(*(struct(*(struct`),int,int,int,int)),int,int,int,int))
->	O
end	int
)	O
{	O
do_print	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
}	O
if	O
(	O
do_print	int
)	O
total_pages	int
++	O
;	O
if	O
(	O
is_toc	int
)	O
{	O
save_current_pagenum	int
=	O
current_pagenum	int
;	O
toc_pagenum	int
--	O
;	O
current_pagenum	int
=	O
toc_pagenum	int
;	O
}	O
dump_ps_page_header	(*(char),int)->(void)
(	O
fname	*(char)
,	O
0	int
)	O
;	O
page_clear	int
=	O
0	int
;	O
if	O
(	O
is_toc	int
)	O
current_pagenum	int
=	O
save_current_pagenum	int
;	O
}	O
if	O
(	O
line_column	int
==	O
0	int
&&	O
line_highlight_gray	double
<	O
1.0	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g %g %g %g line_highlight\n"	*(char)
,	O
lx	double
,	O
(	O
y	double
-	O
baselineskip	double
+	O
(	O
font_bbox_lly	double
*	O
Fpt	struct(double,double)
.	O
h	int
/	O
UNITS_PER_POINT	int
)	O
)	O
,	O
linewidth	double
,	O
Fpt	struct(double,double)
.	O
h	int
+	O
baselineskip	double
,	O
line_highlight_gray	double
)	O
)	O
;	O
if	O
(	O
line_numbers	int
&&	O
line_column	int
==	O
0	int
&&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
type	int
!=	O
tFORMFEED	int
)	O
print_line_number	(double,double,double,double,int)->(void)
(	O
lx	double
,	O
y	double
,	O
linenumber_space	double
,	O
linenumber_margin	double
,	O
current_file_linenum	int
)	O
;	O
switch	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
type	int
)	O
{	O
case	O
tFORMFEED	int
:	O
switch	O
(	O
formfeed_type	enum(int,int,int)
)	O
{	O
case	O
FORMFEED_COLUMN	int
:	O
goto	O
end_of_column	O
;	O
break	O
;	O
case	O
FORMFEED_PAGE	int
:	O
goto	O
end_of_page	O
;	O
break	O
;	O
case	O
FORMFEED_HCOLUMN	int
:	O
{	O
int	O
current_row	int
;	O
current_row	int
=	O
(	O
ly	double
-	O
y	double
)	O
/	O
horizontal_column_height	double
;	O
y	double
=	O
ly	double
-	O
(	O
current_row	int
+	O
1	int
)	O
*	O
horizontal_column_height	double
;	O
if	O
(	O
y	double
<	O
d_footer_h	int
+	O
d_output_y_margin	int
)	O
goto	O
end_of_column	O
;	O
}	O
break	O
;	O
}	O
break	O
;	O
case	O
tSTRING	int
:	O
if	O
(	O
CORRECT_SLICE	O
(	O
)	O
)	O
{	O
if	O
(	O
bggray	double
<	O
1.0	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g %g %g %g (%s) bgs\n"	*(char)
,	O
x	double
,	O
y	double
,	O
Fpt	struct(double,double)
.	O
h	int
+	O
baselineskip	double
,	O
baselineskip	double
-	O
(	O
font_bbox_lly	double
*	O
Fpt	struct(double,double)
.	O
h	int
/	O
UNITS_PER_POINT	int
)	O
,	O
bggray	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
)	O
)	O
;	O
}	O
else	O
if	O
(	O
user_bgcolorp	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g %g %g %g %g %g (%s) bgcs\n"	*(char)
,	O
x	double
,	O
y	double
,	O
Fpt	struct(double,double)
.	O
h	int
+	O
baselineskip	double
,	O
baselineskip	double
-	O
(	O
font_bbox_lly	double
*	O
Fpt	struct(double,double)
.	O
h	int
/	O
UNITS_PER_POINT	int
)	O
,	O
user_bgcolor	struct(float,float,float)
.	O
r	float
,	O
user_bgcolor	struct(float,float,float)
.	O
g	float
,	O
user_bgcolor	struct(float,float,float)
.	O
b	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g M\n(%s) s\n"	*(char)
,	O
x	double
,	O
y	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
)	O
)	O
;	O
}	O
}	O
x	double
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
;	O
line_column	int
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_col	int
;	O
break	O
;	O
case	O
tCARRIAGE_RETURN	int
:	O
x	double
=	O
col	int
*	O
d_output_w	int
/	O
(	O
float	O
)	O
num_columns	int
+	O
d_output_x_margin	int
+	O
line_indent	double
;	O
line_column	int
=	O
0	int
;	O
break	O
;	O
case	O
tNEWLINE	int
:	O
case	O
tWRAPPED_NEWLINE	int
:	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
type	int
==	O
tNEWLINE	int
)	O
{	O
current_file_linenum	int
++	O
;	O
current_slice	int
=	O
1	int
;	O
y	double
-=	O
LINESKIP	O
;	O
}	O
else	O
{	O
current_slice	int
++	O
;	O
if	O
(	O
!	O
slicing	int
)	O
{	O
switch	O
(	O
mark_wrapped_lines_style	enum(int,int,int,int)
)	O
{	O
case	O
MWLS_NONE	int
:	O
break	O
;	O
case	O
MWLS_PLUS	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g M (+) s\n"	*(char)
,	O
x	double
,	O
y	double
)	O
)	O
;	O
break	O
;	O
default	O
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g %g %g %d wrapped_line_mark\n"	*(char)
,	O
x	double
,	O
y	double
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
,	O
mark_wrapped_lines_style	enum(int,int,int,int)
)	O
)	O
;	O
break	O
;	O
}	O
y	double
-=	O
LINESKIP	O
;	O
}	O
if	O
(	O
!	O
slicing	int
||	O
current_slice	int
>	O
slice	int
)	O
if	O
(	O
current_file_linenum	int
!=	O
last_wrapped_line	int
)	O
{	O
if	O
(	O
do_print	int
)	O
num_truncated_lines	int
++	O
;	O
last_wrapped_line	int
=	O
current_file_linenum	int
;	O
}	O
}	O
current_linenum	int
++	O
;	O
if	O
(	O
current_linenum	int
>=	O
lines_per_page	int
||	O
y	double
<	O
d_footer_h	int
+	O
d_output_y_margin	int
)	O
goto	O
end_of_column	O
;	O
x	double
=	O
col	int
*	O
d_output_w	int
/	O
(	O
float	O
)	O
num_columns	int
+	O
d_output_x_margin	int
+	O
line_indent	double
;	O
line_column	int
=	O
0	int
;	O
break	O
;	O
case	O
tEPSF	int
:	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_ABSOLUTE_Y	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_y	double
=	O
ly	double
;	O
else	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_y	double
=	O
y	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_y	double
+=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
y	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_ABSOLUTE_X	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
=	O
lx	double
;	O
else	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
=	O
x	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
+=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
x	double
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_CENTER	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
=	O
lx	double
+	O
(	O
linewidth	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
w	int
)	O
/	O
2	int
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_RIGHT	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
=	O
lx	double
+	O
(	O
linewidth	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
w	int
)	O
;	O
if	O
(	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_NO_CPOINT_UPDATE_Y	int
)	O
==	O
0	int
&&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_y	double
<	O
d_footer_h	int
+	O
d_output_y_margin	int
)	O
{	O
if	O
(	O
current_linenum	int
==	O
0	int
)	O
{	O
MESSAGE	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"EPS file \"%s\" is too large for page\n"	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
reuse_last_token	int
=	O
1	int
;	O
goto	O
end_of_column	O
;	O
}	O
}	O
if	O
(	O
CORRECT_SLICE	O
(	O
)	O
)	O
paste_epsf	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
(	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
;	O
if	O
(	O
!	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_NO_CPOINT_UPDATE_Y	int
)	O
)	O
y	double
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_y	double
;	O
if	O
(	O
!	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
flags	int
&	O
F_EPSF_NO_CPOINT_UPDATE_X	int
)	O
)	O
x	double
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
new_x	double
+	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
w	int
;	O
if	O
(	O
y	double
<	O
d_footer_h	int
+	O
d_output_y_margin	int
)	O
goto	O
end_of_column	O
;	O
break	O
;	O
case	O
tFONT	int
:	O
if	O
(	O
line_column	int
==	O
0	int
)	O
{	O
double	O
newh	double
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
newh	double
=	O
default_Fpt	struct(double,double)
.	O
h	int
;	O
else	O
newh	double
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
h	int
;	O
if	O
(	O
newh	double
!=	O
Fpt	struct(double,double)
.	O
h	int
)	O
{	O
y	double
-=	O
(	O
newh	double
-	O
Fpt	struct(double,double)
.	O
h	int
)	O
;	O
}	O
}	O
MESSAGE	O
(	O
2	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"^@font="	*(char)
)	O
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
[	O
0	int
]	O
==	O
'\0'	O
)	O
{	O
Fpt	struct(double,double)
.	O
w	int
=	O
default_Fpt	struct(double,double)
.	O
w	int
;	O
Fpt	struct(double,double)
.	O
h	int
=	O
default_Fpt	struct(double,double)
.	O
h	int
;	O
Fname	*(char)
=	O
default_Fname	*(char)
;	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
=	O
default_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/F-gs-font %g %g SF\n"	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
user_fontp	int
=	O
0	int
;	O
}	O
else	O
{	O
strhash_put	(*(struct),*(char),int,*(void),*(*(void)))->(int)
(	O
res_fonts	*(struct)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
strlen	(*(char))->(long)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
)	O
+	O
1	int
,	O
NULL	O
,	O
NULL	O
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
==	O
default_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s %g %g SUF\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
w	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
h	int
)	O
)	O
;	O
else	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
==	O
ENC_PS	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s %g %g SUF_PS\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
w	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
h	int
)	O
)	O
;	O
else	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"user font encoding can be only the system's default or `ps'"	*(char)
)	O
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
user_font_name	array(char)
,	O
0	int
,	O
sizeof	O
(	O
user_font_name	array(char)
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
user_font_name	array(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
sizeof	O
(	O
user_font_name	array(char)
)	O
-	O
1	int
)	O
;	O
user_font_pt	struct(double,double)
.	O
w	int
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
w	int
;	O
user_font_pt	struct(double,double)
.	O
h	int
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
.	O
h	int
;	O
user_font_encoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
;	O
user_fontp	int
=	O
1	int
;	O
Fpt	struct(double,double)
.	O
w	int
=	O
user_font_pt	struct(double,double)
.	O
w	int
;	O
Fpt	struct(double,double)
.	O
h	int
=	O
user_font_pt	struct(double,double)
.	O
h	int
;	O
Fname	*(char)
=	O
user_font_name	array(char)
;	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
=	O
user_font_encoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
MESSAGE	O
(	O
2	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %g/%gpt\n"	*(char)
,	O
Fname	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
read_font_info	()->(void)
(	O
)	O
;	O
if	O
(	O
y	double
<	O
d_footer_h	int
+	O
d_output_y_margin	int
)	O
goto	O
end_of_column	O
;	O
break	O
;	O
case	O
tCOLOR	int
:	O
MESSAGE	O
(	O
2	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"^@color{%f %f %f}\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
)	O
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
==	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
&&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
==	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
&&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
==	O
0.0	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"0 setgray\n"	*(char)
)	O
)	O
;	O
user_colorp	int
=	O
0	int
;	O
}	O
else	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g %g setrgbcolor\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
)	O
)	O
;	O
user_color	struct(float,float,float)
.	O
r	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
;	O
user_color	struct(float,float,float)
.	O
g	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
;	O
user_color	struct(float,float,float)
.	O
b	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
;	O
user_colorp	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
tBGCOLOR	int
:	O
MESSAGE	O
(	O
2	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"^@bgcolor{%f %f %f}\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
)	O
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
==	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
&&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
==	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
&&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
==	O
1.0	int
)	O
{	O
user_bgcolorp	int
=	O
0	int
;	O
}	O
else	O
{	O
user_bgcolor	struct(float,float,float)
.	O
r	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
;	O
user_bgcolor	struct(float,float,float)
.	O
g	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
;	O
user_bgcolor	struct(float,float,float)
.	O
b	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
;	O
user_bgcolorp	int
=	O
1	int
;	O
}	O
break	O
;	O
case	O
tSETFILENAME	int
:	O
xfree	(*(void))->(void)
(	O
fname	*(char)
)	O
;	O
fname	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
filename	*(char)
)	O
;	O
break	O
;	O
case	O
tSETPAGENUMBER	int
:	O
current_pagenum	int
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
-	O
1	int
;	O
break	O
;	O
case	O
tNEWPAGE	int
:	O
if	O
(	O
current_linenum	int
>=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
)	O
goto	O
end_of_page	O
;	O
break	O
;	O
case	O
tSAVEX	int
:	O
xstore	array(double)
[	O
(	O
unsigned	O
char	O
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
]	O
=	O
x	double
;	O
break	O
;	O
case	O
tLOADX	int
:	O
x	double
=	O
xstore	array(double)
[	O
(	O
unsigned	O
char	O
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
]	O
;	O
break	O
;	O
case	O
tPS	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g M\n%s\n"	*(char)
,	O
x	double
,	O
y	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
)	O
;	O
break	O
;	O
case	O
tNONE	int
:	O
default	O
:	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"process_file(): got illegal token %d"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
.	O
type	int
)	O
)	O
;	O
break	O
;	O
}	O
}	O
end_of_column	O
:	O
;	O
}	O
end_of_page	O
:	O
if	O
(	O
!	O
page_clear	int
)	O
dump_ps_page_trailer	()->(void)
(	O
)	O
;	O
}	O
do_print	int
=	O
1	int
;	O
undivert	()->(void)
(	O
)	O
;	O
if	O
(	O
toc	int
)	O
{	O
char	O
*	O
cp	*(char)
;	O
int	O
save_total_pages	int
=	O
total_pages	int
;	O
total_pages	int
=	O
first_pagenum_for_file	int
;	O
cp	*(char)
=	O
format_user_string	(*(char),*(char))->(*(char))
(	O
"TOC"	*(char)
,	O
toc_fmt_string	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
toc_fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
cp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
cp	*(char)
)	O
;	O
total_pages	int
=	O
save_total_pages	int
;	O
}	O
}	O
static	O
struct	O
{	O
char	O
*	O
name	*(char)
;	O
SpecialEscape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
}	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
]	O
=	O
{	O
{	O
"comment"	*(char)
,	O
ESC_COMMENT	int
}	O
,	O
{	O
"epsf"	*(char)
,	O
ESC_EPSF	int
}	O
,	O
{	O
"font"	*(char)
,	O
ESC_FONT	int
}	O
,	O
{	O
"color"	*(char)
,	O
ESC_COLOR	int
}	O
,	O
{	O
"bgcolor"	*(char)
,	O
ESC_BGCOLOR	int
}	O
,	O
{	O
"newpage"	*(char)
,	O
ESC_NEWPAGE	int
}	O
,	O
{	O
"ps"	*(char)
,	O
ESC_PS	int
}	O
,	O
{	O
"setfilename"	*(char)
,	O
ESC_SETFILENAME	int
}	O
,	O
{	O
"setpagenumber"	*(char)
,	O
ESC_SETPAGENUMBER	int
}	O
,	O
{	O
"shade"	*(char)
,	O
ESC_SHADE	int
}	O
,	O
{	O
"bggray"	*(char)
,	O
ESC_BGGRAY	int
}	O
,	O
{	O
"escape"	*(char)
,	O
ESC_ESCAPE	int
}	O
,	O
{	O
"savex"	*(char)
,	O
ESC_SAVEX	int
}	O
,	O
{	O
"loadx"	*(char)
,	O
ESC_LOADX	int
}	O
,	O
{	O
NULL	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
void	O
read_special_escape	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
(	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
{	O
char	O
escname	array(char)
[	O
256	int
]	O
;	O
char	O
buf	*(char)
[	O
4096	int
]	O
;	O
int	O
i	int
,	O
e	int
;	O
int	O
ch	char
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
(	O
escname	array(char)
)	O
-	O
1	int
&&	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
!	O
isalnum	(int)->(int)
(	O
ch	char
)	O
)	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
break	O
;	O
}	O
else	O
escname	array(char)
[	O
i	int
]	O
=	O
ch	char
;	O
}	O
escname	array(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
for	O
(	O
e	int
=	O
0	int
;	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
name	*(char)
;	O
e	int
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
escname	array(char)
,	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
name	*(char)
==	O
NULL	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"unknown special escape: %s"	*(char)
)	O
,	O
escname	array(char)
)	O
)	O
;	O
if	O
(	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
ESC_EPSF	int
)	O
{	O
int	O
i	int
;	O
int	O
pw	int
,	O
ph	int
;	O
double	O
scale	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
=	O
0	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
x	double
=	O
0.0	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
y	double
=	O
0.0	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
=	O
0.0	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
pipe	(array(int))->(int)
=	O
0	int
;	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
if	O
(	O
ch	char
==	O
'['	O
)	O
{	O
while	O
(	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
ch	char
!=	O
']'	O
)	O
{	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'c'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
&=	O
~	O
M_EPSF_JUSTIFICATION	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_CENTER	int
;	O
break	O
;	O
case	O
'n'	O
:	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'x'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_NO_CPOINT_UPDATE_X	int
;	O
break	O
;	O
case	O
'y'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_NO_CPOINT_UPDATE_Y	int
;	O
break	O
;	O
default	O
:	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_NO_CPOINT_UPDATE_X	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_NO_CPOINT_UPDATE_Y	int
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'r'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
&=	O
~	O
M_EPSF_JUSTIFICATION	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_RIGHT	int
;	O
break	O
;	O
case	O
's'	O
:	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'x'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_SCALE_X	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
xscale	double
=	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
0	int
,	O
1	int
)	O
;	O
break	O
;	O
case	O
'y'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_SCALE_Y	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
yscale	double
=	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
0	int
,	O
0	int
)	O
;	O
break	O
;	O
default	O
:	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_SCALE_X	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_SCALE_Y	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
xscale	double
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
yscale	double
=	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
0	int
,	O
1	int
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'x'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
x	double
=	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
1	int
,	O
1	int
)	O
;	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'a'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_ABSOLUTE_X	int
;	O
break	O
;	O
default	O
:	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'y'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
y	double
=	O
-	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
1	int
,	O
0	int
)	O
;	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'a'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
|=	O
F_EPSF_ABSOLUTE_Y	int
;	O
break	O
;	O
default	O
:	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
break	O
;	O
}	O
break	O
;	O
case	O
'h'	O
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
=	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
1	int
,	O
0	int
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
break	O
;	O
default	O
:	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"illegal option %c for ^@epsf escape"	*(char)
)	O
,	O
ch	char
)	O
)	O
;	O
}	O
}	O
if	O
(	O
ch	char
!=	O
']'	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"malformed ^@epsf escape: no ']' after options"	*(char)
)	O
)	O
)	O
;	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
}	O
if	O
(	O
ch	char
==	O
'{'	O
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
ch	char
!=	O
'}'	O
;	O
i	int
++	O
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
[	O
i	int
]	O
=	O
ch	char
;	O
if	O
(	O
i	int
+	O
1	int
>=	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"too long file name for ^@epsf escape:\n%.*s"	*(char)
)	O
,	O
i	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
ch	char
==	O
EOF	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"unexpected EOF while scanning ^@epsf escape"	*(char)
)	O
)	O
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tEPSF	int
;	O
}	O
else	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"malformed ^@epsf escape: no '{' found"	*(char)
)	O
)	O
)	O
;	O
if	O
(	O
!	O
recognize_eps_file	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNONE	int
;	O
else	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
y	double
+=	O
LINESKIP	O
-	O
1	int
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
!=	O
0.0	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
-=	O
1.0	int
;	O
pw	int
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
urx	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
llx	double
;	O
ph	int
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
ury	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
lly	double
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
==	O
0.0	int
)	O
scale	double
=	O
1.0	int
;	O
else	O
scale	double
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
/	O
ph	int
;	O
if	O
(	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
&	O
F_EPSF_SCALE_X	int
)	O
==	O
0	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
xscale	double
=	O
scale	double
;	O
if	O
(	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
flags	int
&	O
F_EPSF_SCALE_Y	int
)	O
==	O
0	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
yscale	double
=	O
scale	double
;	O
pw	int
*=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
xscale	double
;	O
ph	int
*=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
yscale	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
w	int
=	O
pw	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
h	int
=	O
ph	int
;	O
}	O
}	O
else	O
if	O
(	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
ESC_COMMENT	int
)	O
{	O
while	O
(	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
ch	char
!=	O
nl	int
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNONE	int
;	O
}	O
else	O
{	O
char	O
*	O
cp	*(char)
;	O
int	O
parenlevel	int
;	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
if	O
(	O
ch	char
!=	O
'{'	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"malformed %s escape: no '{' found"	*(char)
)	O
,	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
name	*(char)
)	O
)	O
;	O
parenlevel	int
=	O
0	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
(	O
parenlevel	int
>	O
0	int
||	O
ch	char
!=	O
'}'	O
)	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
ch	char
==	O
'{'	O
)	O
parenlevel	int
++	O
;	O
else	O
if	O
(	O
ch	char
==	O
'}'	O
)	O
parenlevel	int
--	O
;	O
buf	*(char)
[	O
i	int
]	O
=	O
ch	char
;	O
if	O
(	O
i	int
+	O
1	int
>=	O
sizeof	O
(	O
buf	*(char)
)	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"too long argument for %s escape:\n%.*s"	*(char)
)	O
,	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
name	*(char)
,	O
i	int
,	O
buf	*(char)
)	O
)	O
;	O
}	O
buf	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
switch	O
(	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
{	O
case	O
ESC_FONT	int
:	O
memset	(*(void),int,long)->(*(void))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
0	int
,	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
buf	*(char)
,	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
)	O
-	O
1	int
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
"default"	*(char)
)	O
==	O
0	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
else	O
{	O
if	O
(	O
!	O
parse_font_spec	(*(char),*(*(char)),*(struct(double,double)),*(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
&	O
cp	*(char)
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
size	long
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
)	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"malformed font spec for ^@font escape: %s"	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
)	O
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
0	int
,	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
,	O
cp	*(char)
,	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
font	*(struct(*(struct),double,int,array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char)))))),struct(*(char),*(char),*(char),*(char),double,double,double,double,*(char),*(char),*(char),long,long,*(char),long,enum(int,int),double,double,enum(int,int),double,double,double,double,*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`)),*(struct(double,*`))),array(struct(enum(int,int),double,double,double,double,double,enum(int,int))),long,*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct`))),long,*(struct(*(char),long,*(struct`))),long,*(struct(*(char),*(char),double,double)),long,*(struct(long,double,double,double,double))))
.	O
name	*(char)
)	O
-	O
1	int
)	O
;	O
xfree	(*(void))->(void)
(	O
cp	*(char)
)	O
;	O
}	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tFONT	int
;	O
break	O
;	O
case	O
ESC_COLOR	int
:	O
case	O
ESC_BGCOLOR	int
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"default"	*(char)
)	O
==	O
0	int
)	O
{	O
double	O
val	double
=	O
0	int
;	O
if	O
(	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
ESC_BGCOLOR	int
)	O
val	double
=	O
1	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
=	O
val	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
=	O
val	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
=	O
val	double
;	O
}	O
else	O
{	O
int	O
got	int
;	O
got	int
=	O
sscanf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%g %g %g"	*(char)
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
)	O
;	O
switch	O
(	O
got	int
)	O
{	O
case	O
0	int
:	O
case	O
2	int
:	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"malformed color spec for ^@%s escape: %s"	*(char)
)	O
,	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
ESC_COLOR	int
?	O
"color"	*(char)
:	O
"bgcolor"	*(char)
,	O
buf	*(char)
)	O
)	O
;	O
break	O
;	O
case	O
1	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
g	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
b	float
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
color	struct(float,float,float)
.	O
r	float
;	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
}	O
if	O
(	O
escapes	array(struct(*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
[	O
e	int
]	O
.	O
escape	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int)
==	O
ESC_COLOR	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tCOLOR	int
;	O
else	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tBGCOLOR	int
;	O
break	O
;	O
case	O
ESC_SHADE	int
:	O
line_highlight_gray	double
=	O
atof	(*(char))->(double)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
line_highlight_gray	double
<	O
0.0	int
||	O
line_highlight_gray	double
>	O
1.0	int
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"invalid value for ^@shade escape: %s"	*(char)
)	O
,	O
buf	*(char)
)	O
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNONE	int
;	O
break	O
;	O
case	O
ESC_BGGRAY	int
:	O
bggray	double
=	O
atof	(*(char))->(double)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
bggray	double
<	O
0.0	int
||	O
bggray	double
>	O
1.0	int
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"invalid value for ^@bggray escape: %s"	*(char)
)	O
,	O
buf	*(char)
)	O
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNONE	int
;	O
break	O
;	O
case	O
ESC_ESCAPE	int
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"default"	*(char)
)	O
==	O
0	int
)	O
escape_char	int
=	O
default_escape_char	int
;	O
else	O
escape_char	int
=	O
atoi	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNONE	int
;	O
break	O
;	O
case	O
ESC_SETFILENAME	int
:	O
memset	(*(void),int,long)->(*(void))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
filename	*(char)
,	O
0	int
,	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
filename	*(char)
)	O
)	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
filename	*(char)
,	O
buf	*(char)
,	O
sizeof	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
filename	*(char)
)	O
-	O
1	int
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tSETFILENAME	int
;	O
break	O
;	O
case	O
ESC_SETPAGENUMBER	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
=	O
atoi	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tSETPAGENUMBER	int
;	O
break	O
;	O
case	O
ESC_NEWPAGE	int
:	O
if	O
(	O
i	int
==	O
0	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
=	O
1	int
;	O
else	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
=	O
atoi	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNEWPAGE	int
;	O
break	O
;	O
case	O
ESC_SAVEX	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tSAVEX	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
=	O
atoi	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
break	O
;	O
case	O
ESC_LOADX	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tLOADX	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
i	int
=	O
atoi	(*(char))->(int)
(	O
buf	*(char)
)	O
;	O
break	O
;	O
case	O
ESC_PS	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
buf	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tPS	int
;	O
break	O
;	O
default	O
:	O
abort	()->(void)
(	O
)	O
;	O
break	O
;	O
}	O
}	O
}	O
static	O
void	O
get_next_token	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),double,double,int,double,*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
(	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
double	O
linestart	double
,	O
double	O
linepos	double
,	O
unsigned	O
int	O
col	int
,	O
double	O
linew	double
,	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
{	O
static	O
unsigned	O
char	O
*	O
buffer	*(struct(*(char),long,long))
=	O
NULL	O
;	O
static	O
unsigned	O
int	O
buflen	int
=	O
0	int
;	O
unsigned	O
int	O
bufpos	int
=	O
0	int
;	O
int	O
ch	char
=	O
0	int
;	O
int	O
done	int
=	O
0	int
;	O
int	O
i	int
;	O
static	O
int	O
pending_token	int
=	O
tNONE	int
;	O
unsigned	O
int	O
original_col	int
=	O
col	int
;	O
if	O
(	O
pending_token	int
!=	O
tNONE	int
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
pending_token	int
;	O
pending_token	int
=	O
tNONE	int
;	O
return	O
;	O
}	O
while	O
(	O
!	O
done	int
)	O
{	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
EOF	O
:	O
if	O
(	O
BUFFER_EMPTY	O
(	O
)	O
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tEOF	int
;	O
return	O
;	O
}	O
done	int
=	O
DONE_DONE	int
;	O
break	O
;	O
case	O
'\r'	O
:	O
case	O
'\n'	O
:	O
if	O
(	O
ch	char
==	O
nl	int
)	O
{	O
if	O
(	O
BUFFER_EMPTY	O
(	O
)	O
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNEWLINE	int
;	O
return	O
;	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_DONE	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
BUFFER_EMPTY	O
(	O
)	O
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tCARRIAGE_RETURN	int
;	O
return	O
;	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_DONE	int
;	O
}	O
}	O
break	O
;	O
case	O
'\t'	O
:	O
if	O
(	O
font_is_fixed	enum(int,int)
)	O
{	O
i	int
=	O
tabsize	int
-	O
(	O
col	int
%	O
tabsize	int
)	O
;	O
for	O
(	O
;	O
i	int
>	O
0	int
;	O
i	int
--	O
)	O
{	O
if	O
(	O
FITS_ON_LINE	O
(	O
' '	O
)	O
)	O
EMIT	O
(	O
' '	O
)	O
;	O
else	O
{	O
done	int
=	O
DONE_WRAP	int
;	O
break	O
;	O
}	O
}	O
}	O
else	O
{	O
double	O
grid	double
=	O
tabsize	int
*	O
CHAR_WIDTH	O
(	O
' '	O
)	O
;	O
col	int
++	O
;	O
linepos	double
=	O
(	O
(	O
(	O
int	O
)	O
(	O
(	O
linepos	double
-	O
linestart	double
)	O
/	O
grid	double
)	O
+	O
1	int
)	O
*	O
grid	double
+	O
linestart	double
)	O
;	O
if	O
(	O
linepos	double
>=	O
linew	double
)	O
done	int
=	O
DONE_WRAP	int
;	O
else	O
done	int
=	O
DONE_DONE	int
;	O
}	O
break	O
;	O
case	O
'\f'	O
:	O
if	O
(	O
BUFFER_EMPTY	O
(	O
)	O
)	O
{	O
if	O
(	O
interpret_formfeed	int
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tFORMFEED	int
;	O
else	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tNEWLINE	int
;	O
return	O
;	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_DONE	int
;	O
}	O
break	O
;	O
default	O
:	O
if	O
(	O
special_escapes	int
&&	O
ch	char
==	O
escape_char	int
)	O
{	O
if	O
(	O
BUFFER_EMPTY	O
(	O
)	O
)	O
{	O
read_special_escape	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
!=	O
tNONE	int
)	O
return	O
;	O
break	O
;	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_DONE	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
ch	char
==	O
bs	int
)	O
{	O
if	O
(	O
BUFFER_EMPTY	O
(	O
)	O
||	O
!	O
EXISTS	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
1	int
]	O
)	O
)	O
linepos	double
-=	O
CHAR_WIDTH	O
(	O
'm'	O
)	O
;	O
else	O
linepos	double
-=	O
CHAR_WIDTH	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
1	int
]	O
)	O
;	O
done	int
=	O
DONE_DONE	int
;	O
break	O
;	O
}	O
if	O
(	O
EXISTS	O
(	O
ch	char
)	O
)	O
{	O
if	O
(	O
FITS_ON_LINE	O
(	O
ch	char
)	O
)	O
{	O
if	O
(	O
ch	char
<	O
040	int
||	O
(	O
clean_7bit	int
&&	O
ch	char
>=	O
0200	int
)	O
)	O
{	O
char	O
buf	*(char)
[	O
10	int
]	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"\\%03o"	*(char)
,	O
ch	char
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
buf	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
APPEND_CHAR	O
(	O
buf	*(char)
[	O
i	int
]	O
)	O
;	O
linepos	double
+=	O
CHAR_WIDTH	O
(	O
ch	char
)	O
;	O
col	int
++	O
;	O
}	O
else	O
if	O
(	O
ch	char
==	O
'('	O
||	O
ch	char
==	O
')'	O
||	O
ch	char
==	O
'\\'	O
)	O
{	O
APPEND_CHAR	O
(	O
'\\'	O
)	O
;	O
EMIT	O
(	O
ch	char
)	O
;	O
}	O
else	O
EMIT	O
(	O
ch	char
)	O
;	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_WRAP	int
;	O
}	O
}	O
else	O
if	O
(	O
ISPRINT	O
(	O
ch	char
)	O
)	O
{	O
if	O
(	O
FITS_ON_LINE	O
(	O
'?'	O
)	O
)	O
{	O
EMIT	O
(	O
'?'	O
)	O
;	O
if	O
(	O
missing_chars	array(int)
[	O
ch	char
]	O
++	O
==	O
0	int
)	O
num_missing_chars	int
++	O
;	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_WRAP	int
;	O
}	O
}	O
else	O
{	O
char	O
buf	*(char)
[	O
20	int
]	O
;	O
double	O
len	long
=	O
0.0	int
;	O
if	O
(	O
non_printable_chars	array(int)
[	O
ch	char
]	O
++	O
==	O
0	int
)	O
num_non_printable_chars	int
++	O
;	O
switch	O
(	O
non_printable_format	enum(int,int,int,int)
)	O
{	O
case	O
NPF_SPACE	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
" "	*(char)
)	O
;	O
break	O
;	O
case	O
NPF_QUESTIONMARK	int
:	O
strcpy	(*(char),*(char))->(*(char))
(	O
buf	*(char)
,	O
"?"	*(char)
)	O
;	O
break	O
;	O
case	O
NPF_CARET	int
:	O
if	O
(	O
ch	char
<	O
0x20	int
)	O
{	O
buf	*(char)
[	O
0	int
]	O
=	O
'^'	O
;	O
buf	*(char)
[	O
1	int
]	O
=	O
'@'	O
+	O
ch	char
;	O
buf	*(char)
[	O
2	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
}	O
case	O
NPF_OCTAL	int
:	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"\\%03o"	*(char)
,	O
ch	char
)	O
;	O
break	O
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
buf	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
len	long
+=	O
CHAR_WIDTH	O
(	O
buf	*(char)
[	O
i	int
]	O
)	O
;	O
if	O
(	O
linepos	double
+	O
len	long
<	O
linew	double
||	O
col	int
==	O
0	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
buf	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
{	O
if	O
(	O
buf	*(char)
[	O
i	int
]	O
==	O
'\\'	O
)	O
APPEND_CHAR	O
(	O
'\\'	O
)	O
;	O
EMIT	O
(	O
buf	*(char)
[	O
i	int
]	O
)	O
;	O
}	O
}	O
else	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
done	int
=	O
DONE_WRAP	int
;	O
}	O
}	O
break	O
;	O
}	O
}	O
if	O
(	O
done	int
==	O
DONE_WRAP	int
)	O
{	O
ch	char
=	O
nl	int
;	O
if	O
(	O
line_end	enum(int,int,int)
==	O
LE_TRUNCATE	int
)	O
{	O
while	O
(	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
ch	char
!=	O
nl	int
)	O
;	O
}	O
else	O
if	O
(	O
!	O
BUFFER_EMPTY	O
(	O
)	O
&&	O
line_end	enum(int,int,int)
==	O
LE_WORD_WRAP	int
)	O
{	O
int	O
w	int
;	O
if	O
(	O
ISSPACE	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
1	int
]	O
)	O
)	O
{	O
while	O
(	O
(	O
w	int
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
ISSPACE	O
(	O
w	int
)	O
)	O
;	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
w	int
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
}	O
else	O
{	O
for	O
(	O
w	int
=	O
bufpos	int
-	O
1	int
;	O
w	int
>=	O
0	int
&&	O
!	O
ISSPACE	O
(	O
buffer	*(struct(*(char),long,long))
[	O
w	int
]	O
)	O
;	O
w	int
--	O
)	O
;	O
w	int
++	O
;	O
if	O
(	O
w	int
>	O
0	int
||	O
original_col	int
>	O
0	int
)	O
{	O
do	O
{	O
bufpos	int
--	O
;	O
if	O
(	O
bufpos	int
>	O
w	int
&&	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
==	O
'('	O
||	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
==	O
')'	O
||	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
==	O
'\\'	O
)	O
&&	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
1	int
]	O
==	O
'\\'	O
)	O
{	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
UNEMIT	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
)	O
;	O
bufpos	int
--	O
;	O
}	O
else	O
if	O
(	O
bufpos	int
-	O
2	int
>	O
w	int
&&	O
ISOCTAL	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
)	O
&&	O
ISOCTAL	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
1	int
]	O
)	O
&&	O
ISOCTAL	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
2	int
]	O
)	O
&&	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
3	int
]	O
==	O
'\\'	O
)	O
{	O
unsigned	O
int	O
ti	int
;	O
for	O
(	O
ti	int
=	O
w	int
;	O
ti	int
<	O
bufpos	int
-	O
3	int
;	O
ti	int
++	O
)	O
{	O
if	O
(	O
buffer	*(struct(*(char),long,long))
[	O
ti	int
]	O
==	O
'\\'	O
)	O
{	O
if	O
(	O
ISOCTAL	O
(	O
buffer	*(struct(*(char),long,long))
[	O
ti	int
+	O
1	int
]	O
)	O
)	O
{	O
unsigned	O
int	O
tti	int
;	O
for	O
(	O
tti	int
=	O
0	int
;	O
tti	int
<	O
3	int
&&	O
ISOCTAL	O
(	O
buffer	*(struct(*(char),long,long))
[	O
ti	int
+	O
1	int
]	O
)	O
;	O
tti	int
++	O
,	O
ti	int
++	O
)	O
;	O
}	O
else	O
ti	int
++	O
;	O
}	O
}	O
if	O
(	O
ti	int
==	O
bufpos	int
-	O
3	int
)	O
{	O
int	O
tch	int
;	O
tch	int
=	O
(	O
(	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
2	int
]	O
-	O
'0'	O
)	O
<<	O
6	int
)	O
+	O
(	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
-	O
1	int
]	O
-	O
'0'	O
)	O
<<	O
3	int
)	O
+	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
-	O
'0'	O
)	O
)	O
;	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
tch	int
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
UNEMIT	O
(	O
tch	int
)	O
;	O
bufpos	int
-=	O
3	int
;	O
}	O
else	O
goto	O
unemit_normal	O
;	O
}	O
else	O
{	O
unemit_normal	O
:	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
UNEMIT	O
(	O
buffer	*(struct(*(char),long,long))
[	O
bufpos	int
]	O
)	O
;	O
}	O
}	O
while	O
(	O
bufpos	int
>	O
w	int
)	O
;	O
}	O
}	O
}	O
if	O
(	O
ch	char
==	O
nl	int
)	O
{	O
if	O
(	O
line_end	enum(int,int,int)
==	O
LE_TRUNCATE	int
)	O
{	O
if	O
(	O
do_print	int
)	O
num_truncated_lines	int
++	O
;	O
pending_token	int
=	O
tNEWLINE	int
;	O
}	O
else	O
pending_token	int
=	O
tWRAPPED_NEWLINE	int
;	O
}	O
else	O
pending_token	int
=	O
tEOF	int
;	O
}	O
APPEND_CHAR	O
(	O
'\0'	O
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
type	int
=	O
tSTRING	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
str	*(char)
=	O
(	O
char	O
*	O
)	O
buffer	*(struct(*(char),long,long))
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
new_x	double
=	O
linepos	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
new_col	int
=	O
col	int
;	O
}	O
static	O
void	O
dump_ps_page_header	(*(char),int)->(void)
(	O
char	O
*	O
fname	*(char)
,	O
int	O
empty	int
)	O
{	O
char	O
*	O
dirc	*(char)
,	O
*	O
basec	*(char)
,	O
*	O
fdir	*(char)
,	O
*	O
ftail	*(char)
;	O
int	O
got	int
,	O
i	int
;	O
char	O
*	O
cp	*(char)
,	O
*	O
cp2	*(char)
;	O
char	O
*	O
cstr	*(char)
=	O
"%%"	*(char)
;	O
unsigned	O
int	O
nup_subpage	int
;	O
nup_subpage	int
=	O
(	O
total_pages	int
-	O
1	int
)	O
%	O
nup	int
;	O
dirc	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
basec	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
fdir	*(char)
=	O
dirname	(*(char))->(*(char))
(	O
dirc	*(char)
)	O
;	O
ftail	*(char)
=	O
basename	O
(	O
basec	*(char)
)	O
;	O
if	O
(	O
nup	int
>	O
1	int
)	O
{	O
cstr	*(char)
=	O
"%"	*(char)
;	O
if	O
(	O
nup_subpage	int
==	O
0	int
)	O
{	O
switch	O
(	O
page_label	enum(int,int)
)	O
{	O
case	O
LABEL_SHORT	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Page: (%d-%d) %d\n"	*(char)
,	O
current_pagenum	int
,	O
current_pagenum	int
+	O
nup	int
-	O
1	int
,	O
total_pages	int
/	O
nup	int
+	O
1	int
)	O
)	O
;	O
break	O
;	O
case	O
LABEL_LONG	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Page: (%s:%3d-%3d) %d\n"	*(char)
,	O
ftail	*(char)
,	O
current_pagenum	int
,	O
current_pagenum	int
+	O
nup	int
-	O
1	int
,	O
total_pages	int
/	O
nup	int
+	O
1	int
)	O
)	O
;	O
break	O
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginPageSetup\n_S\n"	*(char)
)	O
)	O
;	O
if	O
(	O
(	O
total_pages	int
/	O
nup	int
+	O
1	int
)	O
%	O
2	int
==	O
0	int
)	O
handle_two_side_options	()->(void)
(	O
)	O
;	O
if	O
(	O
landscape	int
)	O
{	O
if	O
(	O
nup_landscape	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"90 rotate\n%d %d translate\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
lly	double
,	O
-	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
urx	double
)	O
)	O
;	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d translate\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
llx	double
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
lly	double
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
nup_landscape	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"90 rotate\n%d %d translate\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
lly	double
,	O
-	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
llx	double
)	O
)	O
;	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d translate\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
llx	double
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
ury	double
)	O
)	O
;	O
}	O
}	O
}	O
switch	O
(	O
page_label	enum(int,int)
)	O
{	O
case	O
LABEL_SHORT	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%sPage: (%d) %d\n"	*(char)
,	O
cstr	*(char)
,	O
current_pagenum	int
,	O
total_pages	int
)	O
)	O
;	O
break	O
;	O
case	O
LABEL_LONG	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%sPage: (%s:%3d) %d\n"	*(char)
,	O
cstr	*(char)
,	O
ftail	*(char)
,	O
current_pagenum	int
,	O
total_pages	int
)	O
)	O
;	O
break	O
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%sBeginPageSetup\n_S\n"	*(char)
,	O
cstr	*(char)
)	O
)	O
;	O
if	O
(	O
nup	int
>	O
1	int
)	O
{	O
int	O
xm	int
,	O
ym	int
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%% N-up sub-page %d/%d\n"	*(char)
,	O
nup_subpage	int
+	O
1	int
,	O
nup	int
)	O
)	O
;	O
if	O
(	O
landscape	int
)	O
{	O
if	O
(	O
nup_columnwise	int
)	O
{	O
xm	int
=	O
nup_subpage	int
%	O
nup_columns	int
;	O
ym	int
=	O
nup_subpage	int
/	O
nup_columns	int
;	O
}	O
else	O
{	O
xm	int
=	O
nup_subpage	int
/	O
nup_rows	int
;	O
ym	int
=	O
nup_subpage	int
%	O
nup_rows	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d translate\n"	*(char)
,	O
xm	int
*	O
(	O
nup_width	int
+	O
nup_xpad	int
)	O
,	O
ym	int
*	O
(	O
nup_height	int
+	O
nup_ypad	int
)	O
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
nup_columnwise	int
)	O
{	O
xm	int
=	O
nup_subpage	int
/	O
nup_rows	int
;	O
ym	int
=	O
nup_subpage	int
%	O
nup_rows	int
;	O
}	O
else	O
{	O
xm	int
=	O
nup_subpage	int
%	O
nup_columns	int
;	O
ym	int
=	O
nup_subpage	int
/	O
nup_columns	int
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d translate\n"	*(char)
,	O
xm	int
*	O
(	O
nup_width	int
+	O
nup_xpad	int
)	O
,	O
-	O
(	O
(	O
int	O
)	O
(	O
ym	int
*	O
(	O
nup_height	int
+	O
nup_ypad	int
)	O
+	O
nup_height	int
)	O
)	O
)	O
)	O
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g dup scale\n"	*(char)
,	O
nup_scale	double
)	O
)	O
;	O
if	O
(	O
landscape	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"90 rotate\n%d %d translate\n"	*(char)
,	O
0	int
,	O
-	O
d_page_h	int
)	O
)	O
;	O
}	O
else	O
{	O
if	O
(	O
total_pages	int
%	O
2	int
==	O
0	int
)	O
handle_two_side_options	()->(void)
(	O
)	O
;	O
if	O
(	O
landscape	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"90 rotate\n%d %d translate\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
lly	double
,	O
-	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
urx	double
)	O
)	O
;	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d translate\n"	*(char)
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
llx	double
,	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
lly	double
)	O
)	O
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/pagenum %d def\n"	*(char)
,	O
current_pagenum	int
)	O
)	O
;	O
cp	*(char)
=	O
escape_string	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/fname (%s) def\n"	*(char)
,	O
cp	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
cp	*(char)
)	O
;	O
cp	*(char)
=	O
escape_string	(*(char))->(*(char))
(	O
fdir	*(char)
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/fdir (%s) def\n"	*(char)
,	O
cp	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
cp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
dirc	*(char)
)	O
;	O
cp	*(char)
=	O
escape_string	(*(char))->(*(char))
(	O
ftail	*(char)
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/ftail (%s) def\n"	*(char)
,	O
cp	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
cp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
basec	*(char)
)	O
;	O
if	O
(	O
user_fontp	int
)	O
{	O
if	O
(	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
==	O
default_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s %g %g SUF\n"	*(char)
,	O
Fname	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s %g %g SUF_PS\n"	*(char)
,	O
Fname	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
}	O
if	O
(	O
count_key_value_set	(*(struct))->(int)
(	O
user_strings	*(struct)
)	O
>	O
0	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%% User defined strings:\n"	*(char)
)	O
)	O
;	O
for	O
(	O
got	int
=	O
strhash_get_first	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
user_strings	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
i	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
;	O
got	int
;	O
got	int
=	O
strhash_get_next	(*(struct),*(*(char)),*(int),*(*(void)))->(int)
(	O
user_strings	*(struct)
,	O
&	O
cp	*(char)
,	O
&	O
i	int
,	O
(	O
void	O
*	O
*	O
)	O
&	O
cp2	*(char)
)	O
)	O
{	O
cp2	*(char)
=	O
format_user_string	(*(char),*(char))->(*(char))
(	O
"%Format"	*(char)
,	O
cp2	*(char)
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s (%s) def\n"	*(char)
,	O
cp	*(char)
,	O
cp2	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
cp2	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
page_header	*(char)
)	O
{	O
char	O
*	O
h_left	*(char)
;	O
char	O
*	O
h_center	*(char)
;	O
char	O
*	O
h_right	*(char)
=	O
NULL	O
;	O
h_left	*(char)
=	O
format_user_string	(*(char),*(char))->(*(char))
(	O
"page header"	*(char)
,	O
page_header	*(char)
)	O
;	O
h_center	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h_left	*(char)
,	O
'|'	O
)	O
;	O
if	O
(	O
h_center	*(char)
)	O
{	O
*	O
h_center	*(char)
=	O
'\0'	O
;	O
h_center	*(char)
++	O
;	O
h_right	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
h_center	*(char)
,	O
'|'	O
)	O
;	O
if	O
(	O
h_right	*(char)
)	O
{	O
*	O
h_right	*(char)
=	O
'\0'	O
;	O
h_right	*(char)
++	O
;	O
}	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_header_p true def\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_header_left_str (%s) def\n"	*(char)
,	O
h_left	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_header_center_str (%s) def\n"	*(char)
,	O
h_center	*(char)
?	O
h_center	*(char)
:	O
""	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_header_right_str (%s) def\n"	*(char)
,	O
h_right	*(char)
?	O
h_right	*(char)
:	O
""	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
h_left	*(char)
)	O
;	O
}	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_header_p false def\n"	*(char)
)	O
)	O
;	O
if	O
(	O
page_footer	*(char)
)	O
{	O
char	O
*	O
f_left	*(char)
;	O
char	O
*	O
f_center	*(char)
;	O
char	O
*	O
f_right	*(char)
=	O
NULL	O
;	O
f_left	*(char)
=	O
format_user_string	(*(char),*(char))->(*(char))
(	O
"page footer"	*(char)
,	O
page_footer	*(char)
)	O
;	O
f_center	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
f_left	*(char)
,	O
'|'	O
)	O
;	O
if	O
(	O
f_center	*(char)
)	O
{	O
*	O
f_center	*(char)
=	O
'\0'	O
;	O
f_center	*(char)
++	O
;	O
f_right	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
f_center	*(char)
,	O
'|'	O
)	O
;	O
if	O
(	O
f_right	*(char)
)	O
{	O
*	O
f_right	*(char)
=	O
'\0'	O
;	O
f_right	*(char)
++	O
;	O
}	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_footer_p true def\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_footer_left_str (%s) def\n"	*(char)
,	O
f_left	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_footer_center_str (%s) def\n"	*(char)
,	O
f_center	*(char)
?	O
f_center	*(char)
:	O
""	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_footer_right_str (%s) def\n"	*(char)
,	O
f_right	*(char)
?	O
f_right	*(char)
:	O
""	*(char)
)	O
)	O
;	O
xfree	(*(void))->(void)
(	O
f_left	*(char)
)	O
;	O
}	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/user_footer_p false def\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndPageSetup\n"	*(char)
)	O
)	O
;	O
if	O
(	O
!	O
empty	int
)	O
{	O
if	O
(	O
highlight_bars	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %f %d %f highlight_bars\n"	*(char)
,	O
highlight_bars	int
,	O
LINESKIP	O
,	O
d_output_y_margin	int
,	O
highlight_bar_gray	double
)	O
)	O
;	O
if	O
(	O
underlay	*(char)
!=	O
NULL	O
)	O
{	O
if	O
(	O
ul_position_p	int
||	O
ul_angle_p	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"user_underlay\n"	*(char)
)	O
)	O
;	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"underlay\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
num_columns	int
>	O
1	int
&&	O
(	O
header	enum(int,int,int)
==	O
HDR_FANCY	int
||	O
borders	int
)	O
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"column_lines\n"	*(char)
)	O
)	O
;	O
if	O
(	O
borders	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"column_borders\n"	*(char)
)	O
)	O
;	O
switch	O
(	O
header	enum(int,int,int)
)	O
{	O
case	O
HDR_NONE	int
:	O
break	O
;	O
case	O
HDR_SIMPLE	int
:	O
case	O
HDR_FANCY	int
:	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"do_header\n"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
user_colorp	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g %g setrgbcolor\n"	*(char)
,	O
user_color	struct(float,float,float)
.	O
r	float
,	O
user_color	struct(float,float,float)
.	O
g	float
,	O
user_color	struct(float,float,float)
.	O
b	float
)	O
)	O
;	O
}	O
static	O
void	O
dump_ps_page_trailer	()->(void)
(	O
)	O
{	O
unsigned	O
int	O
nup_subpage	int
=	O
(	O
total_pages	int
-	O
1	int
)	O
%	O
nup	int
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"_R\n"	*(char)
)	O
)	O
;	O
if	O
(	O
nup	int
>	O
1	int
)	O
{	O
if	O
(	O
nup_subpage	int
+	O
1	int
==	O
nup	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"_R\nS\n"	*(char)
)	O
)	O
;	O
}	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"S\n"	*(char)
)	O
)	O
;	O
}	O
static	O
void	O
dump_empty_page	()->(void)
(	O
)	O
{	O
if	O
(	O
nup	int
>	O
1	int
)	O
{	O
unsigned	O
int	O
nup_subpage	int
=	O
(	O
total_pages	int
-	O
1	int
)	O
%	O
nup	int
;	O
if	O
(	O
nup_subpage	int
==	O
0	int
)	O
{	O
dump_ps_page_header	(*(char),int)->(void)
(	O
""	*(char)
,	O
1	int
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"_R\n"	*(char)
)	O
)	O
;	O
}	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%Page: (-) %d\n"	*(char)
,	O
total_pages	int
)	O
)	O
;	O
if	O
(	O
nup_subpage	int
+	O
1	int
==	O
nup	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"_R\nS\n"	*(char)
)	O
)	O
;	O
}	O
else	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Page: (-) %d\nS\n"	*(char)
,	O
total_pages	int
)	O
)	O
;	O
}	O
static	O
int	O
recognize_eps_file	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(int)
(	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
{	O
int	O
i	int
;	O
char	O
buf	*(char)
[	O
4096	int
]	O
;	O
char	O
*	O
filename	*(char)
;	O
int	O
line	int
;	O
int	O
valid_epsf	int
;	O
float	O
llx	double
,	O
lly	double
,	O
urx	double
,	O
ury	double
;	O
MESSAGE	O
(	O
2	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"^@epsf=\"%s\"\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
)	O
;	O
i	int
=	O
strlen	(*(char))->(long)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
;	O
filename	*(char)
=	O
tilde_subst	(*(char))->(*(char))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"rb"	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
[	O
0	int
]	O
!=	O
'/'	O
)	O
{	O
FileLookupCtx	struct(*(char),*(char),*(struct(*(char),long,long)))
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
;	O
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
.	O
name	*(char)
=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
;	O
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
.	O
suffix	*(char)
=	O
""	*(char)
;	O
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
.	O
fullname	*(struct(*(char),long,long))
=	O
buffer_alloc	()->(*(struct(*(char),long,long)))
(	O
)	O
;	O
if	O
(	O
pathwalk	(*(char),*((*(char),*(void))->(int)),*(void))->(int)
(	O
libpath	*(char)
,	O
file_lookup	(*(char),*(void))->(int)
,	O
&	O
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
)	O
)	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
buffer_ptr	(*(struct(*(char),long,long)))->(*(char))
(	O
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
.	O
fullname	*(struct(*(char),long,long))
)	O
,	O
"rb"	*(char)
)	O
;	O
buffer_free	(*(struct(*(char),long,long)))->(void)
(	O
ctx	struct(*(char),*(char),*(struct(*(char),long,long)))
.	O
fullname	*(struct(*(char),long,long))
)	O
;	O
}	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
{	O
MESSAGE	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"couldn't open EPS file \"%s\": %s\n"	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
return	O
0	int
;	O
}	O
}	O
line	int
=	O
0	int
;	O
valid_epsf	int
=	O
0	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
=	O
NULL	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_len	int
=	O
0	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_pos	int
=	O
0	int
;	O
while	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
line	int
++	O
;	O
i	int
=	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
i	int
+	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_pos	int
>=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_len	int
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_len	int
+=	O
8192	int
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_len	int
)	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
+	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_pos	int
,	O
buf	*(char)
,	O
i	int
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_pos	int
+=	O
i	int
;	O
if	O
(	O
line	int
==	O
1	int
)	O
{	O
if	O
(	O
buf	*(char)
[	O
0	int
]	O
!=	O
'%'	O
||	O
buf	*(char)
[	O
1	int
]	O
!=	O
'!'	O
)	O
{	O
MESSAGE	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"EPS file \"%s\" does not start with \"%%!\" magic\n"	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
BB_DSC	*(char)
,	O
strlen	(*(char))->(long)
(	O
BB_DSC	*(char)
)	O
)	O
==	O
0	int
)	O
{	O
i	int
=	O
sscanf	(*(char),*(char))->(int)
(	O
buf	*(char)
+	O
strlen	(*(char))->(long)
(	O
BB_DSC	*(char)
)	O
,	O
"%f %f %f %f"	*(char)
,	O
&	O
llx	double
,	O
&	O
lly	double
,	O
&	O
urx	double
,	O
&	O
ury	double
)	O
;	O
if	O
(	O
i	int
!=	O
4	int
)	O
{	O
for	O
(	O
i	int
=	O
strlen	(*(char))->(long)
(	O
BB_DSC	*(char)
)	O
;	O
buf	*(char)
[	O
i	int
]	O
&&	O
(	O
buf	*(char)
[	O
i	int
]	O
==	O
' '	O
||	O
buf	*(char)
[	O
i	int
]	O
==	O
'\t'	O
)	O
;	O
i	int
++	O
)	O
;	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
+	O
i	int
,	O
BB_DSC_ATEND	*(char)
,	O
strlen	(*(char))->(long)
(	O
BB_DSC_ATEND	*(char)
)	O
)	O
!=	O
0	int
)	O
{	O
MESSAGE	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"EPS file \"%s\" contains malformed %%%%BoundingBox row:\n\"%.*s\"\n"	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
,	O
strlen	(*(char))->(long)
(	O
buf	*(char)
)	O
-	O
1	int
,	O
buf	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
}	O
else	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
llx	double
=	O
llx	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
lly	double
=	O
lly	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
urx	double
=	O
urx	double
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
ury	double
=	O
ury	double
;	O
valid_epsf	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
}	O
if	O
(	O
!	O
valid_epsf	int
)	O
{	O
MESSAGE	O
(	O
0	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"EPS file \"%s\" is not a valid EPS file\n"	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
)	O
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
pipe	(array(int))->(int)
)	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
xfree	(*(void))->(void)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
MESSAGE	O
(	O
2	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"BoundingBox: %d %d %d %d\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
llx	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
lly	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
urx	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
ury	double
)	O
)	O
;	O
return	O
1	int
;	O
}	O
static	O
void	O
paste_epsf	(*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*`,int,int,*`,int),struct(float,float,float),struct(float,float,float),struct(array(char),struct`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))))->(void)
(	O
Token	struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char)))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
)	O
{	O
char	O
buf	*(char)
[	O
4096	int
]	O
;	O
int	O
i	int
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"BeginEPSF\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g translate\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
new_x	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
new_y	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g scale\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
xscale	double
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
yscale	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d translate\n"	*(char)
,	O
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
llx	double
,	O
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
lly	double
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d %d %d %d Box clip newpath\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
llx	double
-	O
1	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
lly	double
-	O
1	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
urx	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
llx	double
+	O
2	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
ury	double
-	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
lly	double
+	O
2	int
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%BeginDocument: %s%s\n"	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
filename	*(char)
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
pipe	(array(int))->(int)
?	O
"|"	*(char)
:	O
""	*(char)
)	O
)	O
;	O
if	O
(	O
do_print	int
)	O
{	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
,	O
1	int
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf_pos	int
,	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
(	O
i	int
=	O
fread	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
1	int
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
0	int
)	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
buf	*(char)
,	O
1	int
,	O
i	int
,	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndDocument\nEndEPSF\n"	*(char)
)	O
)	O
;	O
if	O
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
pipe	(array(int))->(int)
)	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
else	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
xfree	(*(void))->(void)
(	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),int,double,double,int,union(int,*(char),struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct`),int),struct(float,float,float),struct(float,float,float),struct(array(char),struct(double,double),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)),array(char))))
->	O
u	union(*(char),*(char),double,long,*(struct),enum(int,int))
.	O
epsf	struct(double,double,double,double,double,double,int,int,int,int,array(char),*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)
.	O
skipbuf	*(char)
)	O
;	O
}	O
static	O
double	O
read_float	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)),int,int)->(double)
(	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
,	O
int	O
units	int
,	O
int	O
horizontal	int
)	O
{	O
char	O
buf	*(char)
[	O
256	int
]	O
;	O
int	O
i	int
,	O
ch	char
;	O
double	O
val	double
;	O
for	O
(	O
i	int
=	O
0	int
;	O
(	O
i	int
<	O
sizeof	O
(	O
buf	*(char)
)	O
-	O
1	int
&&	O
(	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
)	O
!=	O
EOF	O
&&	O
ISNUMBERDIGIT	O
(	O
ch	char
)	O
)	O
;	O
i	int
++	O
)	O
buf	*(char)
[	O
i	int
]	O
=	O
ch	char
;	O
buf	*(char)
[	O
i	int
]	O
=	O
'\0'	O
;	O
if	O
(	O
ch	char
!=	O
EOF	O
)	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
val	double
=	O
atof	(*(char))->(double)
(	O
buf	*(char)
)	O
;	O
if	O
(	O
units	int
)	O
{	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
switch	O
(	O
ch	char
)	O
{	O
case	O
'c'	O
:	O
val	double
*=	O
72	int
/	O
2.54	int
;	O
break	O
;	O
case	O
'p'	O
:	O
break	O
;	O
case	O
'i'	O
:	O
val	double
*=	O
72	int
;	O
break	O
;	O
default	O
:	O
is_ungetc	(int,*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
ch	char
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
case	O
'l'	O
:	O
if	O
(	O
horizontal	int
)	O
val	double
*=	O
CHAR_WIDTH	O
(	O
'm'	O
)	O
;	O
else	O
val	double
*=	O
LINESKIP	O
;	O
break	O
;	O
}	O
}	O
return	O
val	double
;	O
}	O
static	O
struct	O
{	O
char	O
*	O
magic	*(char)
;	O
unsigned	O
int	O
magiclen	int
;	O
char	O
*	O
name	*(char)
;	O
int	O
revert_delta	int
;	O
}	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"%!"	*(char)
,	O
2	int
,	O
"PostScript"	*(char)
,	O
-	O
2	int
}	O
,	O
{	O
"\004%!"	*(char)
,	O
3	int
,	O
"PostScript"	*(char)
,	O
-	O
2	int
}	O
,	O
{	O
"\033E"	*(char)
,	O
2	int
,	O
"PCL"	*(char)
,	O
-	O
2	int
}	O
,	O
{	O
"\033%"	*(char)
,	O
2	int
,	O
"PCL"	*(char)
,	O
-	O
2	int
}	O
,	O
{	O
NULL	O
,	O
0	int
,	O
NULL	O
,	O
0	int
}	O
,	O
}	O
;	O
static	O
int	O
do_pass_through	(*(char),*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
char	O
*	O
fname	*(char)
,	O
InputStream	struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int)
*	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
{	O
int	O
ch	char
;	O
unsigned	O
long	O
saved_pos	long
=	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
output_language_pass_through	int
)	O
MESSAGE	O
(	O
1	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"passing through all input files for output language `%s'\n"	*(char)
)	O
,	O
output_language	*(char)
)	O
)	O
;	O
else	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
magic	*(char)
;	O
i	int
++	O
)	O
{	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
magiclen	int
;	O
j	int
++	O
)	O
{	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
if	O
(	O
ch	char
==	O
EOF	O
||	O
ch	char
!=	O
(	O
unsigned	O
char	O
)	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
magic	*(char)
[	O
j	int
]	O
)	O
break	O
;	O
}	O
if	O
(	O
j	int
>=	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
magiclen	int
)	O
break	O
;	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
=	O
saved_pos	long
;	O
}	O
if	O
(	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
magic	*(char)
==	O
NULL	O
)	O
return	O
0	int
;	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
+=	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
revert_delta	int
;	O
if	O
(	O
ps_header_dumped	int
)	O
{	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%Page: (%s) -1\n_S\n%%%%BeginDocument: %s\n"	*(char)
,	O
fname	*(char)
,	O
fname	*(char)
)	O
)	O
;	O
}	O
MESSAGE	O
(	O
1	int
,	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"passing through %s file \"%s\"\n"	*(char)
)	O
,	O
pass_through_magics	array(struct(*(char),int,*(char),int))
[	O
i	int
]	O
.	O
name	*(char)
,	O
fname	*(char)
)	O
)	O
;	O
}	O
do	O
{	O
fwrite	(*(void),long,long,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
buf	*(char)
+	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
,	O
1	int
,	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
data_in_buf	int
-	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
,	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
=	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
data_in_buf	int
;	O
ch	char
=	O
is_getc	(*(struct(int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),array(char),int,int,int,*(char),int,int)))->(int)
(	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
)	O
;	O
is	*(struct(int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),array(char),int,int,int,*(char),int,int))
->	O
bufpos	int
=	O
0	int
;	O
}	O
while	O
(	O
ch	char
!=	O
EOF	O
)	O
;	O
if	O
(	O
!	O
output_language_pass_through	int
)	O
{	O
if	O
(	O
ps_header_dumped	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%%%%EndDocument\n_R\n"	*(char)
)	O
)	O
;	O
}	O
return	O
1	int
;	O
}	O
static	O
void	O
print_line_number	(double,double,double,double,int)->(void)
(	O
double	O
x	double
,	O
double	O
y	double
,	O
double	O
space	double
,	O
double	O
margin	double
,	O
unsigned	O
int	O
linenum	int
)	O
{	O
double	O
len	long
=	O
0.0	int
;	O
char	O
buf	*(char)
[	O
20	int
]	O
;	O
int	O
i	int
;	O
char	O
*	O
saved_Fname	*(char)
=	O
""	*(char)
;	O
FontPoint	struct(double,double)
saved_Fpt	struct(double,double)
;	O
InputEncoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
saved_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
saved_Fpt	struct(double,double)
.	O
w	int
=	O
0.0	int
;	O
saved_Fpt	struct(double,double)
.	O
h	int
=	O
0.0	int
;	O
if	O
(	O
linenum	int
==	O
print_line_number_last	int
)	O
return	O
;	O
print_line_number_last	int
=	O
linenum	int
;	O
if	O
(	O
user_fontp	int
)	O
{	O
saved_Fname	*(char)
=	O
Fname	*(char)
;	O
saved_Fpt	struct(double,double)
.	O
w	int
=	O
Fpt	struct(double,double)
.	O
w	int
;	O
saved_Fpt	struct(double,double)
.	O
h	int
=	O
Fpt	struct(double,double)
.	O
h	int
;	O
saved_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
=	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
;	O
Fname	*(char)
=	O
default_Fname	*(char)
;	O
Fpt	struct(double,double)
.	O
w	int
=	O
default_Fpt	struct(double,double)
.	O
w	int
;	O
Fpt	struct(double,double)
.	O
h	int
=	O
default_Fpt	struct(double,double)
.	O
h	int
;	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
=	O
default_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/F-gs-font %g %g SF\n"	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
read_font_info	()->(void)
(	O
)	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
buf	*(char)
,	O
"%d"	*(char)
,	O
linenum	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
buf	*(char)
[	O
i	int
]	O
;	O
i	int
++	O
)	O
len	long
+=	O
CHAR_WIDTH	O
(	O
buf	*(char)
[	O
i	int
]	O
)	O
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%g %g M (%s:) s\n"	*(char)
,	O
x	double
+	O
space	double
-	O
len	long
,	O
y	double
,	O
buf	*(char)
)	O
)	O
;	O
if	O
(	O
user_fontp	int
)	O
{	O
Fname	*(char)
=	O
saved_Fname	*(char)
;	O
Fpt	struct(double,double)
.	O
w	int
=	O
saved_Fpt	struct(double,double)
.	O
w	int
;	O
Fpt	struct(double,double)
.	O
h	int
=	O
saved_Fpt	struct(double,double)
.	O
h	int
;	O
encoding	array(*(struct(long,double,double,double,double,*(char),double,double,double,double,double,double,double,*(struct(*(char),*(char))))))
=	O
saved_Fencoding	enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)
;	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"/%s %g %g SUF\n"	*(char)
,	O
Fname	*(char)
,	O
Fpt	struct(double,double)
.	O
w	int
,	O
Fpt	struct(double,double)
.	O
h	int
)	O
)	O
;	O
read_font_info	()->(void)
(	O
)	O
;	O
}	O
}	O
static	O
char	O
divertfname	array(char)
[	O
512	int
]	O
;	O
static	O
void	O
divert	()->(void)
(	O
)	O
{	O
assert	O
(	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
;	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
tmpfile	()->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
)	O
;	O
if	O
(	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
==	O
NULL	O
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"couldn't create temporary divert file: %s"	*(char)
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
static	O
void	O
undivert	()->(void)
(	O
)	O
{	O
char	O
buf	*(char)
[	O
1024	int
]	O
;	O
int	O
doc_level	int
=	O
0	int
;	O
char	O
*	O
cp	*(char)
;	O
assert	O
(	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
!=	O
NULL	O
)	O
;	O
if	O
(	O
fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(int)
(	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
FATAL	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"couldn't rewind divert file: %s"	*(char)
)	O
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
;	O
while	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"%%BeginDocument"	*(char)
,	O
15	int
)	O
==	O
0	int
)	O
doc_level	int
++	O
;	O
else	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"%%EndDocument"	*(char)
,	O
13	int
)	O
==	O
0	int
)	O
doc_level	int
--	O
;	O
if	O
(	O
doc_level	int
==	O
0	int
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"% User defined strings"	*(char)
,	O
22	int
)	O
==	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
buf	*(char)
,	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
while	O
(	O
fgets	(*(char),int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(char))
(	O
buf	*(char)
,	O
sizeof	O
(	O
buf	*(char)
)	O
,	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
if	O
(	O
strncmp	(*(char),*(char),long)->(int)
(	O
buf	*(char)
,	O
"%%EndPageSetup"	*(char)
,	O
14	int
)	O
==	O
0	int
)	O
break	O
;	O
cp	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
buf	*(char)
,	O
'\001'	O
)	O
;	O
if	O
(	O
cp	*(char)
)	O
{	O
*	O
cp	*(char)
=	O
'\0'	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
buf	*(char)
,	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d"	*(char)
,	O
total_pages_in_file	int
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
cp	*(char)
+	O
1	int
,	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
else	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
buf	*(char)
,	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
}	O
}	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
buf	*(char)
,	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
divertfp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
NULL	O
;	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
ofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
static	O
void	O
handle_two_side_options	()->(void)
(	O
)	O
{	O
if	O
(	O
rotate_even_pages	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"180 rotate\n%d %d translate\n"	*(char)
,	O
-	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
w	int
,	O
-	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
h	int
)	O
)	O
;	O
if	O
(	O
swap_even_page_margins	int
)	O
OUTPUT	O
(	O
(	O
cofp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%d 0 translate\n"	*(char)
,	O
-	O
(	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
llx	double
-	O
(	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
w	int
-	O
media	*(struct(*(struct(*(struct`),*(char),int,int,int,int,int,int)),*(char),int,int,int,int,int,int))
->	O
urx	double
)	O
)	O
)	O
)	O
;	O
}	O
