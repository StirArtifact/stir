static	O
int	O
show_summary	int
;	O
static	O
int	O
be_quiet	int
;	O
static	O
int	O
show_query	int
;	O
static	O
int	O
align	int
=	O
0	int
;	O
static	O
int	O
select_attribute	int
;	O
static	O
struct	O
attr_tab	struct(*(char),int,long)
{	O
char	O
*	O
name	*(char)
;	O
int	O
code	int
;	O
size_t	long
len	long
;	O
}	O
attr_tab	struct(*(char),int,long)
[	O
]	O
=	O
{	O
{	O
"new"	*(char)
,	O
IS_NEW	int
,	O
0	int
}	O
,	O
{	O
"old"	*(char)
,	O
IS_OLD	int
,	O
0	int
}	O
,	O
{	O
"unread"	*(char)
,	O
IS_OLD	int
,	O
0	int
}	O
,	O
{	O
"read"	*(char)
,	O
IS_READ	int
,	O
0	int
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
void	O
prepare_attrs	()->(void)
(	O
void	O
)	O
{	O
struct	O
attr_tab	struct(*(char),int,long)
*	O
p	*(char)
,	O
*	O
q	*(char)
;	O
for	O
(	O
p	*(char)
=	O
attr_tab	struct(*(char),int,long)
;	O
p	*(char)
->	O
name	*(char)
;	O
p	*(char)
++	O
)	O
{	O
const	O
char	O
*	O
name	*(char)
=	O
p	*(char)
->	O
name	*(char)
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
name	*(char)
)	O
;	O
size_t	long
n	*(long)
=	O
1	int
;	O
for	O
(	O
q	*(char)
=	O
attr_tab	struct(*(char),int,long)
;	O
q	*(char)
->	O
name	*(char)
;	O
q	*(char)
++	O
)	O
{	O
if	O
(	O
p	*(char)
!=	O
q	*(char)
)	O
{	O
const	O
char	O
*	O
str	*(struct)
=	O
q	*(char)
->	O
name	*(char)
;	O
size_t	long
slen	long
=	O
strlen	(*(char))->(long)
(	O
str	*(struct)
)	O
;	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
,	O
str	*(struct)
,	O
n	*(long)
)	O
==	O
0	int
)	O
{	O
for	O
(	O
n	*(long)
++	O
;	O
memcmp	(*(void),*(void),long)->(int)
(	O
name	*(char)
,	O
str	*(struct)
,	O
n	*(long)
)	O
==	O
0	int
&&	O
n	*(long)
<	O
len	long
&&	O
n	*(long)
<	O
slen	long
;	O
n	*(long)
++	O
)	O
;	O
q	*(char)
->	O
len	long
=	O
n	*(long)
<	O
slen	long
?	O
n	*(long)
:	O
slen	long
;	O
}	O
}	O
}	O
p	*(char)
->	O
len	long
=	O
n	*(long)
<	O
len	long
?	O
n	*(long)
:	O
len	long
;	O
}	O
}	O
static	O
int	O
decode_attr	(*(char))->(int)
(	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
struct	O
attr_tab	struct(*(char),int,long)
*	O
p	*(char)
;	O
int	O
len	long
=	O
strlen	(*(char))->(long)
(	O
arg	*(char)
)	O
;	O
int	O
pretendents	int
=	O
0	int
;	O
for	O
(	O
p	*(char)
=	O
attr_tab	struct(*(char),int,long)
;	O
p	*(char)
->	O
name	*(char)
;	O
p	*(char)
++	O
)	O
{	O
const	O
char	O
*	O
str	*(struct)
=	O
p	*(char)
->	O
name	*(char)
;	O
if	O
(	O
str	*(struct)
[	O
0	int
]	O
==	O
arg	*(char)
[	O
0	int
]	O
)	O
{	O
if	O
(	O
len	long
<	O
p	*(char)
->	O
len	long
)	O
pretendents	int
++	O
;	O
else	O
if	O
(	O
len	long
>	O
strlen	(*(char))->(long)
(	O
str	*(struct)
)	O
)	O
continue	O
;	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
str	*(struct)
,	O
arg	*(char)
,	O
p	*(char)
->	O
len	long
)	O
==	O
0	int
)	O
return	O
p	*(char)
->	O
code	int
;	O
}	O
}	O
if	O
(	O
pretendents	int
)	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"%s: ambiguous abbreviation"	*(char)
)	O
,	O
arg	*(char)
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"%s: unknown attribute"	*(char)
)	O
,	O
arg	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
cli_show_field	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
show_field	*(char)
=	O
mu_strdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
align	int
=	O
0	int
;	O
}	O
static	O
void	O
cli_Quiet	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
be_quiet	int
+=	O
2	int
;	O
}	O
static	O
void	O
cli_query	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
be_quiet	int
++	O
;	O
show_query	int
=	O
1	int
;	O
}	O
static	O
void	O
cli_status	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
select_attribute	int
=	O
decode_attr	(*(char))->(int)
(	O
arg	*(char)
)	O
;	O
}	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
frm_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"debug"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"enable debugging output"	*(char)
)	O
,	O
mu_c_incr	int
,	O
&	O
frm_debug	int
}	O
,	O
{	O
"field"	*(char)
,	O
'f'	O
,	O
N_	O
(	O
"NAME"	*(char)
)	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"header field to display"	*(char)
)	O
,	O
mu_c_string	int
,	O
&	O
show_field	*(char)
,	O
cli_show_field	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"to"	*(char)
,	O
'l'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"include the To: information"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
show_to	int
}	O
,	O
{	O
"number"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"display message numbers"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
show_number	int
}	O
,	O
{	O
"Quiet"	*(char)
,	O
'Q'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"do not display headers"	*(char)
)	O
,	O
mu_c_int	int
,	O
&	O
be_quiet	int
,	O
cli_Quiet	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"query"	*(char)
,	O
'q'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print a message if the mailbox contains some unread mail"	*(char)
)	O
,	O
mu_c_int	int
,	O
&	O
be_quiet	int
,	O
cli_query	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"summary"	*(char)
,	O
'S'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print a summary of messages"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
show_summary	int
}	O
,	O
{	O
"status"	*(char)
,	O
's'	O
,	O
N_	O
(	O
"STATUS"	*(char)
)	O
,	O
0	int
,	O
N_	O
(	O
"select messages with the specific attribute:"	*(char)
" new, unread, old (same as unread) or read (or any unambiguous"	*(char)
" abbreviation of these)"	*(char)
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
cli_status	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"align"	*(char)
,	O
't'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"tidy mode: align subject lines"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
align	int
}	O
,	O
MU_OPTION_END	O
}	O
,	O
*	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
[	O
]	O
=	O
{	O
frm_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
NULL	O
}	O
;	O
static	O
struct	O
mu_cli_setup	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
=	O
{	O
options	array(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))))
,	O
NULL	O
,	O
N_	O
(	O
"GNU frm -- display From: lines."	*(char)
)	O
,	O
N_	O
(	O
"[URL ...]"	*(char)
)	O
,	O
}	O
;	O
static	O
char	O
*	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
[	O
]	O
=	O
{	O
"debug"	*(char)
,	O
"mailbox"	*(char)
,	O
"locking"	*(char)
,	O
NULL	O
}	O
;	O
static	O
struct	O
{	O
size_t	long
new	long
;	O
size_t	long
read	*((*(void),*(char),long)->(long))
;	O
size_t	long
unread	long
;	O
}	O
counter	struct(long,long,long)
;	O
static	O
int	O
selected	int
;	O
static	O
int	O
frm_select	(long,*(struct))->(int)
(	O
size_t	long
index	(*(char),int)->(*(char))
,	O
mu_message_t	*(struct)
msg	*(struct)
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
mu_attribute_t	*(struct)
attr	*(struct)
=	O
NULL	O
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
mu_attribute_is_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
counter	struct(long,long,long)
.	O
read	*((*(void),*(char),long)->(long))
++	O
;	O
else	O
if	O
(	O
mu_attribute_is_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
counter	struct(long,long,long)
.	O
unread	long
++	O
;	O
else	O
if	O
(	O
mu_attribute_is_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
counter	struct(long,long,long)
.	O
new	long
++	O
;	O
if	O
(	O
(	O
(	O
select_attribute	int
&	O
IS_READ	int
)	O
&&	O
(	O
!	O
mu_attribute_is_read	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
)	O
||	O
(	O
(	O
select_attribute	int
&	O
IS_NEW	int
)	O
&&	O
(	O
!	O
mu_attribute_is_recent	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
)	O
||	O
(	O
(	O
select_attribute	int
&	O
IS_OLD	int
)	O
&&	O
(	O
!	O
mu_attribute_is_seen	(*(struct))->(int)
(	O
attr	*(struct)
)	O
)	O
)	O
)	O
return	O
0	int
;	O
if	O
(	O
select_attribute	int
)	O
selected	int
++	O
;	O
return	O
!	O
be_quiet	int
;	O
}	O
int	O
frm	(*(char))->(int)
(	O
char	O
*	O
mailbox_name	*(char)
)	O
{	O
size_t	long
total	*(long)
;	O
int	O
status	int
;	O
selected	int
=	O
0	int
;	O
counter	struct(long,long,long)
.	O
new	long
=	O
counter	struct(long,long,long)
.	O
read	*((*(void),*(char),long)->(long))
=	O
counter	struct(long,long,long)
.	O
unread	long
=	O
0	int
;	O
frm_scan	(*(char),*((long,*(struct))->(int)),*(long))->(void)
(	O
mailbox_name	*(char)
,	O
frm_select	(long,*(struct))->(int)
,	O
&	O
total	*(long)
)	O
;	O
if	O
(	O
show_summary	int
)	O
{	O
if	O
(	O
total	*(long)
==	O
0	int
)	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"Folder contains no messages."	*(char)
)	O
)	O
;	O
else	O
{	O
char	O
*	O
delim	int
=	O
""	*(char)
;	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"Folder contains "	*(char)
)	O
)	O
;	O
if	O
(	O
counter	struct(long,long,long)
.	O
new	long
)	O
{	O
mu_printf	(*(char))->(int)
(	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%lu new message"	*(char)
,	O
"%lu new messages"	*(char)
,	O
counter	struct(long,long,long)
.	O
new	long
)	O
,	O
(	O
u_long	long
)	O
counter	struct(long,long,long)
.	O
new	long
)	O
;	O
delim	int
=	O
", "	*(char)
;	O
}	O
if	O
(	O
counter	struct(long,long,long)
.	O
unread	long
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
delim	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%lu unread message"	*(char)
,	O
"%lu unread messages"	*(char)
,	O
counter	struct(long,long,long)
.	O
unread	long
)	O
,	O
(	O
u_long	long
)	O
counter	struct(long,long,long)
.	O
unread	long
)	O
;	O
delim	int
=	O
", "	*(char)
;	O
}	O
if	O
(	O
counter	struct(long,long,long)
.	O
read	*((*(void),*(char),long)->(long))
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
delim	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%lu read message"	*(char)
,	O
"%lu read messages"	*(char)
,	O
counter	struct(long,long,long)
.	O
read	*((*(void),*(char),long)->(long))
)	O
,	O
(	O
u_long	long
)	O
counter	struct(long,long,long)
.	O
read	*((*(void),*(char),long)->(long))
)	O
;	O
}	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"."	*(char)
)	O
)	O
;	O
}	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
show_query	int
)	O
{	O
if	O
(	O
total	*(long)
>	O
0	int
)	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"There are messages in that folder.\n"	*(char)
)	O
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
_	O
(	O
"No messages in that folder!\n"	*(char)
)	O
)	O
;	O
}	O
if	O
(	O
selected	int
)	O
status	int
=	O
0	int
;	O
else	O
if	O
(	O
total	*(long)
>	O
0	int
)	O
status	int
=	O
1	int
;	O
else	O
status	int
=	O
2	int
;	O
return	O
status	int
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
status	int
=	O
0	int
;	O
size_t	long
s	*(char)
;	O
MU_APP_INIT_NLS	O
(	O
)	O
;	O
prepare_attrs	()->(void)
(	O
)	O
;	O
mu_register_all_mbox_formats	O
(	O
)	O
;	O
mu_auth_register_module	(*(struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(struct(*`,int,*`,long,*`,*`,*`)),*((enum(int,int),*`,*`,*`,*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
&	O
mu_auth_tls_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
)	O
;	O
mu_cli	(int,*(*(char)),*(struct(*(*(struct`)),*(struct(*`,int,*`,long,*`,*`,*`)),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*`)->(void)))),*(*(char)),*(void),*(int),*(*(*(char))))->(void)
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
cli	struct(*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*(char),*(char),*(*(char)),*(char),int,int,int,int,*((*(struct))->(void)))
,	O
capa	*(struct(*(char),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct`),*(char),*(*`),*(void),*(struct`))->(int)),*((*(void))->(void))))
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
if	O
(	O
align	int
&&	O
(	O
s	*(char)
=	O
util_getcols	()->(int)
(	O
)	O
)	O
)	O
init_output	(long)->(void)
(	O
s	*(char)
)	O
;	O
else	O
init_output	(long)->(void)
(	O
0	int
)	O
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
status	int
=	O
frm	(*(char))->(int)
(	O
NULL	O
)	O
;	O
else	O
if	O
(	O
argc	int
==	O
1	int
)	O
status	int
=	O
frm	(*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
else	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s:\n"	*(char)
,	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
status	int
=	O
frm	(*(char))->(int)
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
}	O
return	O
status	int
;	O
}	O
