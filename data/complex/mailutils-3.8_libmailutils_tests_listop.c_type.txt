static	O
int	O
interactive	int
;	O
void	O
lperror	(*(char),int)->(void)
(	O
char	O
*	O
text	*(char)
,	O
int	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s: %s"	*(char)
,	O
text	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
{	O
mu_list_t	*(struct)
lst	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
[	O
NITR	int
]	O
;	O
int	O
num	long
;	O
}	O
;	O
static	O
void	O
listop_invalidate_iterators	(*(struct(*(struct),array(*(struct)),int)))->(void)
(	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
)	O
{	O
int	O
i	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NITR	int
;	O
i	long
++	O
)	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
i	long
]	O
)	O
;	O
}	O
void	O
print_list	(*(struct))->(void)
(	O
mu_list_t	*(struct)
list	*(struct)
)	O
{	O
mu_iterator_t	*(struct)
itr	*(struct)
;	O
size_t	long
count	long
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
list	*(struct)
,	O
&	O
itr	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_list_get_iterator"	*(char)
,	O
rc	int
)	O
;	O
rc	int
=	O
mu_list_count	(*(struct),*(long))->(int)
(	O
list	*(struct)
,	O
&	O
count	long
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_current"	*(char)
,	O
rc	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"# items: %lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	long
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
char	O
*	O
text	*(char)
;	O
rc	int
=	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_current"	*(char)
,	O
rc	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
}	O
mu_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*(struct)
)	O
;	O
}	O
int	O
com_print	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
print_list	(*(struct))->(void)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_count	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
size_t	long
n	*(long)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_count	(*(struct),*(long))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
&	O
n	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_current"	*(char)
,	O
rc	int
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
n	*(long)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_next	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
int	O
skip	int
=	O
argc	long
==	O
2	int
?	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
0	int
)	O
:	O
1	int
;	O
if	O
(	O
skip	int
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"next arg?"	*(char)
)	O
;	O
}	O
else	O
{	O
while	O
(	O
skip	int
--	O
)	O
mu_iterator_next	(*(struct))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_delete	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
int	O
rc	int
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_remove	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
*	O
++	O
argv	*(*(char))
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_remove"	*(char)
,	O
*	O
argv	*(*(char))
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_add	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
int	O
rc	int
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_append"	*(char)
,	O
*	O
argv	*(*(char))
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_prep	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
int	O
rc	int
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_prepend	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_prepend"	*(char)
,	O
*	O
argv	*(*(char))
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
mu_list_t	*(struct)
read_list	(int,*(*(char)))->(*(struct))
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
mu_list_t	*(struct)
list	*(struct)
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_create"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
NULL	O
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
list	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
for	O
(	O
;	O
argc	long
;	O
argc	long
--	O
,	O
argv	*(*(char))
++	O
)	O
{	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
list	*(struct)
,	O
strdup	(*(char))->(*(char))
(	O
*	O
argv	*(*(char))
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_append"	*(char)
,	O
*	O
argv	*(*(char))
,	O
rc	int
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
break	O
;	O
}	O
}	O
return	O
list	*(struct)
;	O
}	O
int	O
com_ins	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
int	O
rc	int
;	O
char	O
*	O
item	*(void)
;	O
int	O
insert_before	int
=	O
0	int
;	O
if	O
(	O
mu_assoc_lookup	(*(struct),*(char),*(void))->(int)
(	O
options	*(struct)
,	O
"before"	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
insert_before	int
=	O
1	int
;	O
item	*(void)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
if	O
(	O
3	int
==	O
argc	long
)	O
rc	int
=	O
mu_list_insert	(*(struct),*(void),*(void),int)->(int)
(	O
list	*(struct)
,	O
item	*(void)
,	O
strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
,	O
insert_before	int
)	O
;	O
else	O
{	O
mu_list_t	*(struct)
tmp	*(struct)
=	O
read_list	(int,*(*(char)))->(*(struct))
(	O
argc	long
-	O
2	int
,	O
argv	*(*(char))
+	O
2	int
)	O
;	O
if	O
(	O
!	O
tmp	*(struct)
)	O
return	O
0	int
;	O
rc	int
=	O
mu_list_insert_list	(*(struct),*(void),*(struct),int)->(int)
(	O
list	*(struct)
,	O
item	*(void)
,	O
tmp	*(struct)
,	O
insert_before	int
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct)
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_list_insert"	*(char)
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_repl	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_replace	(*(struct),*(void),*(void))->(int)
(	O
list	*(struct)
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_replace"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ictl_tell	(*(struct),int)->(void)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
argc	long
)	O
{	O
size_t	long
pos	long
;	O
int	O
rc	int
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
"ictl tell?"	*(char)
)	O
;	O
return	O
;	O
}	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_tell	int
,	O
&	O
pos	long
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_ctl"	*(char)
,	O
rc	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
pos	long
)	O
;	O
}	O
void	O
ictl_del	(*(struct),int)->(void)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
argc	long
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
"ictl del?"	*(char)
)	O
;	O
return	O
;	O
}	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_delete	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_ctl"	*(char)
,	O
rc	int
)	O
;	O
}	O
int	O
ictl_repl	(*(struct),int,*(*(char)))->(int)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
!=	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"ictl repl item?"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_replace	int
,	O
strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_ctl"	*(char)
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
void	O
ictl_dir	(*(struct),int,*(*(char)))->(void)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
int	O
dir	*(char)
;	O
if	O
(	O
argc	long
>	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"ictl dir [backwards|forwards]?"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
argc	long
==	O
1	int
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"backwards"	*(char)
)	O
==	O
0	int
)	O
dir	*(char)
=	O
1	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
"forwards"	*(char)
)	O
==	O
0	int
)	O
dir	*(char)
=	O
0	int
;	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"ictl dir [backwards|forwards]?"	*(char)
)	O
;	O
return	O
;	O
}	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_set_direction	int
,	O
&	O
dir	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_ctl"	*(char)
,	O
rc	int
)	O
;	O
}	O
else	O
{	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_qry_direction	int
,	O
&	O
dir	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_ctl"	*(char)
,	O
rc	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
dir	*(char)
?	O
"backwards"	*(char)
:	O
"forwards"	*(char)
)	O
;	O
}	O
return	O
;	O
}	O
void	O
ictl_ins	(*(struct),int,*(*(char)))->(void)
(	O
mu_iterator_t	*(struct)
itr	*(struct)
,	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
if	O
(	O
argc	long
<	O
1	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"ictl ins item [item*]?"	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
argc	long
==	O
1	int
)	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_insert	int
,	O
strdup	(*(char))->(*(char))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
;	O
else	O
{	O
mu_list_t	*(struct)
tmp	*(struct)
=	O
read_list	(int,*(*(char)))->(*(struct))
(	O
argc	long
,	O
argv	*(*(char))
)	O
;	O
if	O
(	O
!	O
tmp	*(struct)
)	O
return	O
;	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_insert_list	int
,	O
tmp	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
tmp	*(struct)
)	O
;	O
}	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_iterator_ctl"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
;	O
}	O
int	O
com_ictl	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"tell"	*(char)
)	O
==	O
0	int
)	O
ictl_tell	(*(struct),int)->(void)
(	O
itr	*(struct)
,	O
argc	long
-	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"del"	*(char)
)	O
==	O
0	int
)	O
ictl_del	(*(struct),int)->(void)
(	O
itr	*(struct)
,	O
argc	long
-	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"repl"	*(char)
)	O
==	O
0	int
)	O
ictl_repl	(*(struct),int,*(*(char)))->(int)
(	O
itr	*(struct)
,	O
argc	long
-	O
2	int
,	O
argv	*(*(char))
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"ins"	*(char)
)	O
==	O
0	int
)	O
ictl_ins	(*(struct),int,*(*(char)))->(void)
(	O
itr	*(struct)
,	O
argc	long
-	O
2	int
,	O
argv	*(*(char))
+	O
2	int
)	O
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"dir"	*(char)
)	O
==	O
0	int
)	O
ictl_dir	(*(struct),int,*(*(char)))->(void)
(	O
itr	*(struct)
,	O
argc	long
-	O
2	int
,	O
argv	*(*(char))
+	O
2	int
)	O
;	O
else	O
mu_error	(*(char))->(int)
(	O
"unknown subcommand"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_iter	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
int	O
n	*(long)
;	O
n	*(long)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
NULL	O
,	O
0	int
)	O
;	O
if	O
(	O
n	*(long)
<	O
0	int
||	O
n	*(long)
>=	O
NITR	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"iter [0-3]?"	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
n	*(long)
]	O
)	O
{	O
int	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
&	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
n	*(long)
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_list_get_iterator"	*(char)
,	O
rc	int
)	O
;	O
mu_iterator_first	(*(struct))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
n	*(long)
]	O
)	O
;	O
}	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
=	O
n	*(long)
;	O
return	O
0	int
;	O
}	O
int	O
com_find	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
;	O
char	O
*	O
text	*(char)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
for	O
(	O
mu_iterator_first	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
!	O
mu_iterator_is_done	(*(struct))->(int)
(	O
itr	*(struct)
)	O
;	O
mu_iterator_next	(*(struct))->(int)
(	O
itr	*(struct)
)	O
)	O
{	O
char	O
*	O
item	*(void)
;	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
item	*(void)
)	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
item	*(void)
)	O
==	O
0	int
)	O
return	O
0	int
;	O
}	O
mu_error	(*(char))->(int)
(	O
"%s not in list"	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_cur	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_iterator_t	*(struct)
itr	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
;	O
char	O
*	O
text	*(char)
;	O
size_t	long
pos	long
;	O
int	O
rc	int
;	O
mu_printf	(*(char))->(int)
(	O
"%lu:"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
)	O
;	O
rc	int
=	O
mu_iterator_ctl	(*(struct),enum(int,int,int,int,int,int,int,int,int,int),*(void))->(int)
(	O
itr	*(struct)
,	O
mu_itrctl_tell	int
,	O
&	O
pos	long
)	O
;	O
if	O
(	O
rc	int
==	O
MU_ERR_NOENT	O
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_iterator_ctl"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_ctl"	*(char)
,	O
rc	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu:"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
pos	long
)	O
;	O
rc	int
=	O
mu_iterator_current	(*(struct),*(*(void)))->(int)
(	O
itr	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_iterator_current"	*(char)
,	O
rc	int
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_first	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_iterator_first	(*(struct))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
map_even	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
int	O
*	O
num	long
=	O
call_data	*(void)
,	O
n	*(long)
=	O
*	O
num	long
;	O
*	O
num	long
=	O
!	O
*	O
num	long
;	O
if	O
(	O
(	O
n	*(long)
%	O
2	int
)	O
==	O
0	int
)	O
{	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
itmv	*(*(void))
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
static	O
int	O
map_odd	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
int	O
*	O
num	long
=	O
call_data	*(void)
,	O
n	*(long)
=	O
*	O
num	long
;	O
*	O
num	long
=	O
!	O
*	O
num	long
;	O
if	O
(	O
n	*(long)
%	O
2	int
)	O
{	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
itmv	*(*(void))
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_SKIP	int
;	O
}	O
static	O
int	O
map_concat	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
char	O
*	O
delim	*(char)
=	O
call_data	*(void)
;	O
size_t	long
dlen	long
=	O
strlen	(*(char))->(long)
(	O
delim	*(char)
)	O
;	O
size_t	long
i	long
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
res	*(int)
,	O
*	O
p	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
itmc	long
;	O
i	long
++	O
)	O
len	long
+=	O
strlen	(*(char))->(long)
(	O
itmv	*(*(void))
[	O
i	long
]	O
)	O
;	O
len	long
+=	O
(	O
itmc	long
-	O
1	int
)	O
*	O
dlen	long
+	O
1	int
;	O
res	*(int)
=	O
malloc	(long)->(*(void))
(	O
len	long
)	O
;	O
if	O
(	O
!	O
res	*(int)
)	O
abort	()->(void)
(	O
)	O
;	O
p	*(char)
=	O
res	*(int)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
;	O
)	O
{	O
p	*(char)
=	O
mu_stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
itmv	*(*(void))
[	O
i	long
++	O
]	O
)	O
;	O
if	O
(	O
i	long
==	O
itmc	long
)	O
break	O
;	O
p	*(char)
=	O
mu_stpcpy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
delim	*(char)
)	O
;	O
}	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
res	*(int)
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
struct	O
trim_data	struct(long,long)
{	O
size_t	long
n	*(long)
;	O
size_t	long
lim	long
;	O
}	O
;	O
static	O
int	O
map_skip	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
trim_data	struct(long,long)
*	O
td	*(struct(long,long))
=	O
call_data	*(void)
;	O
if	O
(	O
td	*(struct(long,long))
->	O
n	*(long)
++	O
<	O
td	*(struct(long,long))
->	O
lim	long
)	O
return	O
MU_LIST_MAP_SKIP	int
;	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
itmv	*(*(void))
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
static	O
int	O
map_trim	(*(*(void)),long,*(void))->(int)
(	O
void	O
*	O
*	O
itmv	*(*(void))
,	O
size_t	long
itmc	long
,	O
void	O
*	O
call_data	*(void)
)	O
{	O
struct	O
trim_data	struct(long,long)
*	O
td	*(struct(long,long))
=	O
call_data	*(void)
;	O
if	O
(	O
td	*(struct(long,long))
->	O
n	*(long)
++	O
<	O
td	*(struct(long,long))
->	O
lim	long
)	O
{	O
itmv	*(*(void))
[	O
0	int
]	O
=	O
strdup	(*(char))->(*(char))
(	O
itmv	*(*(void))
[	O
0	int
]	O
)	O
;	O
return	O
MU_LIST_MAP_OK	int
;	O
}	O
return	O
MU_LIST_MAP_STOP	int
|	O
MU_LIST_MAP_SKIP	int
;	O
}	O
int	O
com_map	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
mu_list_t	*(struct)
result	*(struct)
;	O
int	O
rc	int
;	O
int	O
replace	int
=	O
0	int
;	O
if	O
(	O
mu_assoc_lookup	(*(struct),*(char),*(void))->(int)
(	O
options	*(struct)
,	O
"replace"	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
replace	int
=	O
1	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"even"	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
n	*(long)
=	O
0	int
;	O
rc	int
=	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
list	*(struct)
,	O
map_even	(*(*(void)),long,*(void))->(int)
,	O
&	O
n	*(long)
,	O
1	int
,	O
&	O
result	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"odd"	*(char)
)	O
==	O
0	int
)	O
{	O
int	O
n	*(long)
=	O
0	int
;	O
rc	int
=	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
list	*(struct)
,	O
map_odd	(*(*(void)),long,*(void))->(int)
,	O
&	O
n	*(long)
,	O
1	int
,	O
&	O
result	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"concat"	*(char)
)	O
==	O
0	int
)	O
{	O
size_t	long
num	long
;	O
char	O
*	O
delim	*(char)
=	O
""	*(char)
;	O
if	O
(	O
argc	long
<	O
3	int
||	O
argc	long
>	O
4	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"map concat NUM [DELIM]"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
num	long
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
;	O
if	O
(	O
argc	long
==	O
4	int
)	O
delim	*(char)
=	O
argv	*(*(char))
[	O
3	int
]	O
;	O
rc	int
=	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
list	*(struct)
,	O
map_concat	(*(*(void)),long,*(void))->(int)
,	O
delim	*(char)
,	O
num	long
,	O
&	O
result	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"skip"	*(char)
)	O
==	O
0	int
)	O
{	O
struct	O
trim_data	struct(long,long)
td	*(struct(long,long))
;	O
if	O
(	O
argc	long
<	O
3	int
||	O
argc	long
>	O
4	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"map skip NUM"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
td	*(struct(long,long))
.	O
n	*(long)
=	O
0	int
;	O
td	*(struct(long,long))
.	O
lim	long
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
;	O
rc	int
=	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
list	*(struct)
,	O
map_skip	(*(*(void)),long,*(void))->(int)
,	O
&	O
td	*(struct(long,long))
,	O
1	int
,	O
&	O
result	*(struct)
)	O
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"trim"	*(char)
)	O
==	O
0	int
)	O
{	O
struct	O
trim_data	struct(long,long)
td	*(struct(long,long))
;	O
if	O
(	O
argc	long
<	O
3	int
||	O
argc	long
>	O
4	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"map trim NUM"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
td	*(struct(long,long))
.	O
n	*(long)
=	O
0	int
;	O
td	*(struct(long,long))
.	O
lim	long
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
2	int
]	O
)	O
;	O
rc	int
=	O
mu_list_map	(*(struct),*((*(*(void)),long,*(void))->(int)),*(void),long,*(*(struct)))->(int)
(	O
list	*(struct)
,	O
map_trim	(*(*(void)),long,*(void))->(int)
,	O
&	O
td	*(struct(long,long))
,	O
1	int
,	O
&	O
result	*(struct)
)	O
;	O
}	O
else	O
{	O
mu_error	(*(char))->(int)
(	O
"unknown map name"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_map"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
result	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
if	O
(	O
replace	int
)	O
{	O
size_t	long
count	long
[	O
2	int
]	O
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
list	*(struct)
,	O
&	O
count	long
[	O
0	int
]	O
)	O
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
result	*(struct)
,	O
&	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu in, %lu out\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
0	int
]	O
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
=	O
result	*(struct)
;	O
listop_invalidate_iterators	(*(struct(*(struct),array(*(struct)),int)))->(void)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
)	O
;	O
}	O
else	O
{	O
print_list	(*(struct))->(void)
(	O
result	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
result	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
dup_string	(*(*(void)),*(void),*(void))->(int)
(	O
void	O
*	O
*	O
res	*(int)
,	O
void	O
*	O
itm	*(void)
,	O
void	O
*	O
closure	*(void)
)	O
{	O
*	O
res	*(int)
=	O
strdup	(*(char))->(*(char))
(	O
itm	*(void)
)	O
;	O
return	O
*	O
res	*(int)
?	O
0	int
:	O
ENOMEM	int
;	O
}	O
int	O
com_slice	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_t	*(struct)
list	*(struct)
=	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
;	O
mu_list_t	*(struct)
result	*(struct)
;	O
int	O
rc	int
,	O
i	long
;	O
int	O
replace	int
=	O
0	int
;	O
size_t	long
*	O
buf	*(char)
;	O
if	O
(	O
mu_assoc_lookup	(*(struct),*(char),*(void))->(int)
(	O
options	*(struct)
,	O
"replace"	*(char)
,	O
NULL	O
)	O
==	O
0	int
)	O
replace	int
=	O
1	int
;	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
buf	*(char)
=	O
calloc	(long,long)->(*(void))
(	O
argc	long
,	O
sizeof	O
(	O
buf	*(char)
[	O
0	int
]	O
)	O
)	O
;	O
if	O
(	O
!	O
buf	*(char)
)	O
abort	()->(void)
(	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
buf	*(char)
[	O
i	long
]	O
=	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
)	O
;	O
rc	int
=	O
mu_list_slice_dup	(*(*(struct)),*(struct),*(long),long,*((*(*(void)),*(void),*(void))->(int)),*(void))->(int)
(	O
&	O
result	*(struct)
,	O
list	*(struct)
,	O
buf	*(char)
,	O
argc	long
,	O
dup_string	(*(*(void)),*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_slice_dup"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
replace	int
)	O
{	O
size_t	long
count	long
[	O
2	int
]	O
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
list	*(struct)
,	O
&	O
count	long
[	O
0	int
]	O
)	O
;	O
mu_list_count	(*(struct),*(long))->(int)
(	O
result	*(struct)
,	O
&	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_printf	(*(char))->(int)
(	O
"%lu in, %lu out\n"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
0	int
]	O
,	O
(	O
unsigned	O
long	O
)	O
count	long
[	O
1	int
]	O
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
list	*(struct)
)	O
;	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
=	O
result	*(struct)
;	O
listop_invalidate_iterators	(*(struct(*(struct),array(*(struct)),int)))->(void)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
)	O
;	O
}	O
else	O
{	O
print_list	(*(struct))->(void)
(	O
result	*(struct)
)	O
;	O
mu_list_destroy	(*(*(struct)))->(void)
(	O
&	O
result	*(struct)
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_head	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
int	O
rc	int
;	O
char	O
*	O
text	*(char)
;	O
rc	int
=	O
mu_list_head	(*(struct),*(*(void)))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_head"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_tail	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
int	O
rc	int
;	O
const	O
char	O
*	O
text	*(char)
;	O
rc	int
=	O
mu_list_tail	(*(struct),*(*(void)))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_tail"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
fold_concat	(*(void),*(void),*(void),*(*(void)))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
,	O
void	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
,	O
void	O
*	O
*	O
ret	*(*(struct))
)	O
{	O
char	O
*	O
s	*(char)
;	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
item	*(void)
)	O
;	O
size_t	long
prevlen	long
=	O
0	int
;	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
)	O
prevlen	long
=	O
strlen	(*(char))->(long)
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
)	O
;	O
s	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(*(struct`),*(struct`),*(struct`),int,*(char))),*(struct(short,array(char))),int,*(char)))
,	O
len	long
+	O
prevlen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
abort	()->(void)
(	O
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
s	*(char)
+	O
prevlen	long
,	O
item	*(void)
)	O
;	O
*	O
ret	*(*(struct))
=	O
s	*(char)
;	O
return	O
0	int
;	O
}	O
int	O
com_fold	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
char	O
*	O
text	*(char)
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_fold	(*(struct),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void),*(void),*(void))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
fold_concat	(*(void),*(void),*(void),*(*(void)))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_fold"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
text	*(char)
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
text	*(char)
)	O
;	O
}	O
else	O
mu_printf	(*(char))->(int)
(	O
"NULL\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_rfold	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
char	O
*	O
text	*(char)
=	O
NULL	O
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_rfold	(*(struct),*((*(void),*(void),*(void),*(*(void)))->(int)),*(void),*(void),*(void))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
fold_concat	(*(void),*(void),*(void),*(*(void)))->(int)
,	O
NULL	O
,	O
NULL	O
,	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_fold"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
if	O
(	O
text	*(char)
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
text	*(char)
)	O
;	O
}	O
else	O
mu_printf	(*(char))->(int)
(	O
"NULL\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_sort	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
mu_list_sort	(*(struct),*((*(void),*(void))->(int)))->(void)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
NULL	O
)	O
;	O
listop_invalidate_iterators	(*(struct(*(struct),array(*(struct)),int)))->(void)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
com_push	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
int	O
rc	int
=	O
mu_list_push	(*(struct),*(void))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_push"	*(char)
,	O
*	O
argv	*(*(char))
,	O
rc	int
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
com_pop	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
char	O
*	O
text	*(char)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_list_pop	(*(struct),*(*(void)))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_pop"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
envinit	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
if	O
(	O
!	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
)	O
{	O
int	O
rc	int
=	O
mu_list_get_iterator	(*(struct),*(*(struct)))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
&	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_list_get_iterator"	*(char)
,	O
rc	int
)	O
;	O
mu_iterator_first	(*(struct))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
itr	*(struct)
[	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
num	long
]	O
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
get	(int,*(*(char)),*(struct),*(void))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
mu_assoc_t	*(struct)
options	*(struct)
,	O
void	O
*	O
env	*(struct)
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
*	O
cls	*(struct(*(struct),array(*(struct)),int))
=	O
env	*(struct)
;	O
char	O
*	O
p	*(char)
;	O
size_t	long
n	*(long)
;	O
errno	O
=	O
0	int
;	O
n	*(long)
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
&	O
p	*(char)
,	O
0	int
)	O
;	O
if	O
(	O
errno	O
||	O
*	O
p	*(char)
!=	O
0	int
)	O
return	O
MU_ERR_PARSE	O
;	O
else	O
{	O
char	O
*	O
text	*(char)
;	O
int	O
rc	int
=	O
mu_list_get	(*(struct),long,*(*(void)))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
->	O
lst	*(struct)
,	O
n	*(long)
,	O
(	O
void	O
*	O
*	O
)	O
&	O
text	*(char)
)	O
;	O
if	O
(	O
rc	int
)	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_list_get"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
,	O
rc	int
)	O
;	O
else	O
mu_printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
text	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
static	O
struct	O
mu_tesh_command	struct(*(char),*(char),*((int,*(*(char)),*(struct),*(void))->(int)),int,int,*(struct))
comtab	array(struct(*(char),*(char),*((int,*(*(char)),*(struct),*(void))->(int)),int,int,*(struct)))
[	O
]	O
=	O
{	O
{	O
"__ENVINIT__"	*(char)
,	O
""	*(char)
,	O
envinit	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"__NOCMD__"	*(char)
,	O
""	*(char)
,	O
get	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"print"	*(char)
,	O
""	*(char)
,	O
com_print	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"count"	*(char)
,	O
""	*(char)
,	O
com_count	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"next"	*(char)
,	O
"[COUNT]"	*(char)
,	O
com_next	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"del"	*(char)
,	O
"ITEM ..."	*(char)
,	O
com_delete	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"add"	*(char)
,	O
"ITEM ..."	*(char)
,	O
com_add	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"prep"	*(char)
,	O
"ITEM ..."	*(char)
,	O
com_prep	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"ins"	*(char)
,	O
"[-before] [-after] ITEM NEW_ITEM ..."	*(char)
,	O
com_ins	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"repl"	*(char)
,	O
"OLD_ITEM NEW_ITEM"	*(char)
,	O
com_repl	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"ictl"	*(char)
,	O
"tell|del|repl|ins|dir [ARG...]"	*(char)
,	O
com_ictl	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"iter"	*(char)
,	O
"NUM"	*(char)
,	O
com_iter	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"find"	*(char)
,	O
"ITEM"	*(char)
,	O
com_find	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"cur"	*(char)
,	O
""	*(char)
,	O
com_cur	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"map"	*(char)
,	O
"[-replace] NAME [ARG...]"	*(char)
,	O
com_map	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"slice"	*(char)
,	O
"[-replace] NUM ..."	*(char)
,	O
com_slice	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"first"	*(char)
,	O
""	*(char)
,	O
com_first	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"head"	*(char)
,	O
""	*(char)
,	O
com_head	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"tail"	*(char)
,	O
""	*(char)
,	O
com_tail	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"fold"	*(char)
,	O
""	*(char)
,	O
com_fold	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"rfold"	*(char)
,	O
""	*(char)
,	O
com_rfold	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"sort"	*(char)
,	O
""	*(char)
,	O
com_sort	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"push"	*(char)
,	O
"ITEM ..."	*(char)
,	O
com_push	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
"pop"	*(char)
,	O
""	*(char)
,	O
com_pop	(int,*(*(char)),*(struct),*(void))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
int	O
string_comp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
item	*(void)
,	O
const	O
void	O
*	O
value	*(void)
)	O
{	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
item	*(void)
,	O
value	*(void)
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
listop_closure	struct(*(struct),array(*(struct)),int)
cls	*(struct(*(struct),array(*(struct)),int))
;	O
int	O
rc	int
;	O
mu_tesh_init	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
interactive	int
=	O
isatty	(int)->(int)
(	O
0	int
)	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
cls	*(struct(*(struct),array(*(struct)),int))
,	O
0	int
,	O
sizeof	O
cls	*(struct(*(struct),array(*(struct)),int))
)	O
;	O
rc	int
=	O
mu_list_create	(*(*(struct)))->(int)
(	O
&	O
cls	*(struct(*(struct),array(*(struct)),int))
.	O
lst	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_list_create"	*(char)
,	O
rc	int
)	O
;	O
mu_list_set_comparator	(*(struct),*((*(void),*(void))->(int)))->(*((*(void),*(void))->(int)))
(	O
cls	*(struct(*(struct),array(*(struct)),int))
.	O
lst	*(struct)
,	O
string_comp	(*(void),*(void))->(int)
)	O
;	O
mu_list_set_destroy_item	(*(struct),*((*(void))->(void)))->(*((*(void))->(void)))
(	O
cls	*(struct(*(struct),array(*(struct)),int))
.	O
lst	*(struct)
,	O
mu_list_free_item	(*(void))->(void)
)	O
;	O
while	O
(	O
--	O
argc	long
)	O
{	O
rc	int
=	O
mu_list_append	(*(struct),*(void))->(int)
(	O
cls	*(struct(*(struct),array(*(struct)),int))
.	O
lst	*(struct)
,	O
strdup	(*(char))->(*(char))
(	O
*	O
++	O
argv	*(*(char))
)	O
)	O
;	O
if	O
(	O
rc	int
)	O
lperror	(*(char),int)->(void)
(	O
"mu_list_append"	*(char)
,	O
rc	int
)	O
;	O
}	O
mu_tesh_read_and_eval	(int,*(*(char)),*(struct(*(char),*(char),*((int,*`,*`,*`)->(int)),int,int,*(struct))),*(void))->(void)
(	O
argc	long
,	O
argv	*(*(char))
,	O
comtab	array(struct(*(char),*(char),*((int,*(*(char)),*(struct),*(void))->(int)),int,int,*(struct)))
,	O
&	O
cls	*(struct(*(struct),array(*(struct)),int))
)	O
;	O
return	O
0	int
;	O
}	O
