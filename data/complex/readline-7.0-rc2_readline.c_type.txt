extern	O
void	O
_rl_free_history_entry	(*(struct(*(char),*(char),*(void))))->(void)
PARAMS	O
(	O
(	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
)	O
)	O
;	O
extern	O
void	O
_rl_parse_colors	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
char	O
*	O
readline_internal	()->(*(char))
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
readline_initialize_everything	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
bind_arrow_keys_internal	(*(struct(char,*((int,int)->(int)))))->(void)
PARAMS	O
(	O
(	O
Keymap	*(struct(char,*((int,int)->(int))))
)	O
)	O
;	O
static	O
void	O
bind_arrow_keys	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
bind_bracketed_paste_prefix	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
readline_default_bindings	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
void	O
reset_default_bindings	()->(void)
PARAMS	O
(	O
(	O
void	O
)	O
)	O
;	O
static	O
int	O
_rl_subseq_result	(int,*(struct(char,*((int,int)->(int)))),int,int)->(int)
PARAMS	O
(	O
(	O
int	O
,	O
Keymap	*(struct(char,*((int,int)->(int))))
,	O
int	O
,	O
int	O
)	O
)	O
;	O
static	O
int	O
_rl_subseq_getchar	(int)->(int)
PARAMS	O
(	O
(	O
int	O
)	O
)	O
;	O
const	O
char	O
*	O
rl_library_version	*(char)
=	O
RL_LIBRARY_VERSION	int
;	O
int	O
rl_readline_version	int
=	O
RL_READLINE_VERSION	int
;	O
int	O
rl_gnu_readline_p	int
=	O
1	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
emacs_standard_keymap	array(struct(char,*((int,int)->(int))))
;	O
int	O
rl_editing_mode	int
=	O
emacs_mode	int
;	O
int	O
rl_insert_mode	int
=	O
RL_IM_DEFAULT	O
;	O
int	O
rl_dispatching	int
;	O
int	O
_rl_last_command_was_kill	int
=	O
0	int
;	O
int	O
rl_numeric_arg	int
=	O
1	int
;	O
int	O
rl_explicit_arg	int
=	O
0	int
;	O
int	O
rl_arg_sign	int
=	O
1	int
;	O
static	O
int	O
rl_initialized	int
;	O
unsigned	O
long	O
rl_readline_state	long
=	O
RL_STATE_NONE	int
;	O
int	O
rl_point	int
;	O
int	O
rl_mark	int
;	O
int	O
rl_end	int
;	O
int	O
rl_done	int
;	O
rl_command_func_t	(int,int)->(int)
*	O
rl_last_func	*((int,int)->(int))
=	O
(	O
rl_command_func_t	(int,int)->(int)
*	O
)	O
NULL	O
;	O
procenv_t	O
_rl_top_level	array(struct(array(long),int,struct(array(long))))
;	O
FILE	struct
*	O
_rl_in_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
*	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
FILE	struct
*	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
FILE	struct
*	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
(	O
FILE	struct
*	O
)	O
NULL	O
;	O
int	O
_rl_echoing_p	int
=	O
0	int
;	O
char	O
*	O
rl_prompt	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
rl_visible_prompt_length	int
=	O
0	int
;	O
int	O
rl_already_prompted	int
=	O
0	int
;	O
int	O
rl_key_sequence_length	int
=	O
0	int
;	O
rl_hook_func_t	()->(int)
*	O
rl_startup_hook	*(()->(int))
=	O
(	O
rl_hook_func_t	()->(int)
*	O
)	O
NULL	O
;	O
rl_hook_func_t	()->(int)
*	O
rl_pre_input_hook	*(()->(int))
=	O
(	O
rl_hook_func_t	()->(int)
*	O
)	O
NULL	O
;	O
static	O
char	O
*	O
the_line	*(char)
;	O
int	O
_rl_eof_char	int
=	O
CTRL	O
(	O
'D'	O
)	O
;	O
int	O
rl_pending_input	int
=	O
0	int
;	O
const	O
char	O
*	O
rl_terminal_name	*(char)
=	O
(	O
const	O
char	O
*	O
)	O
NULL	O
;	O
int	O
_rl_horizontal_scroll_mode	int
=	O
0	int
;	O
int	O
_rl_mark_modified_lines	int
=	O
0	int
;	O
int	O
_rl_bell_preference	int
=	O
AUDIBLE_BELL	int
;	O
char	O
*	O
_rl_comment_begin	*(char)
;	O
Keymap	*(struct(char,*((int,int)->(int))))
rl_executing_keymap	*(struct(char,*((int,int)->(int))))
;	O
Keymap	*(struct(char,*((int,int)->(int))))
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
;	O
int	O
rl_erase_empty_line	int
=	O
0	int
;	O
int	O
rl_num_chars_to_read	int
;	O
char	O
*	O
rl_line_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
NULL	O
;	O
int	O
rl_line_buffer_len	int
=	O
0	int
;	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
0	int
;	O
int	O
rl_executing_key	int
;	O
char	O
*	O
rl_executing_keyseq	*(char)
=	O
0	int
;	O
int	O
_rl_executing_keyseq_size	int
=	O
0	int
;	O
int	O
_rl_keyseq_timeout	int
=	O
500	int
;	O
unsigned	O
char	O
_rl_parsing_conditionalized_out	char
=	O
0	int
;	O
int	O
_rl_convert_meta_chars_to_ascii	int
=	O
1	int
;	O
int	O
_rl_output_meta_chars	int
=	O
0	int
;	O
int	O
_rl_bind_stty_chars	int
=	O
1	int
;	O
int	O
_rl_revert_all_at_newline	int
=	O
0	int
;	O
int	O
_rl_echo_control_chars	int
=	O
1	int
;	O
int	O
_rl_show_mode_in_prompt	int
=	O
0	int
;	O
int	O
_rl_enable_bracketed_paste	int
=	O
0	int
;	O
int	O
_rl_meta_flag	int
=	O
0	int
;	O
int	O
rl_set_prompt	(*(char))->(int)
(	O
prompt	*(char)
)	O
const	O
char	O
*	O
prompt	*(char)
;	O
{	O
FREE	O
(	O
rl_prompt	*(char)
)	O
;	O
rl_prompt	*(char)
=	O
prompt	*(char)
?	O
savestring	O
(	O
prompt	*(char)
)	O
:	O
(	O
char	O
*	O
)	O
NULL	O
;	O
rl_display_prompt	*(char)
=	O
rl_prompt	*(char)
?	O
rl_prompt	*(char)
:	O
""	*(char)
;	O
rl_visible_prompt_length	int
=	O
rl_expand_prompt	(*(char))->(int)
(	O
rl_prompt	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
char	O
*	O
readline	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
const	O
char	O
*	O
prompt	*(char)
;	O
{	O
char	O
*	O
value	*(char)
;	O
if	O
(	O
rl_pending_input	int
==	O
EOF	O
)	O
{	O
rl_clear_pending_input	()->(int)
(	O
)	O
;	O
return	O
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
}	O
rl_set_prompt	(*(char))->(int)
(	O
prompt	*(char)
)	O
;	O
rl_initialize	()->(int)
(	O
)	O
;	O
if	O
(	O
rl_prep_term_function	*((int)->(void))
)	O
(	O
*	O
rl_prep_term_function	*((int)->(void))
)	O
(	O
_rl_meta_flag	int
)	O
;	O
rl_set_signals	()->(int)
(	O
)	O
;	O
value	*(char)
=	O
readline_internal	()->(*(char))
(	O
)	O
;	O
if	O
(	O
rl_deprep_term_function	*(()->(void))
)	O
(	O
*	O
rl_deprep_term_function	*(()->(void))
)	O
(	O
)	O
;	O
rl_clear_signals	()->(int)
(	O
)	O
;	O
return	O
(	O
value	*(char)
)	O
;	O
}	O
STATIC_CALLBACK	O
void	O
readline_internal_setup	()->(void)
(	O
)	O
{	O
char	O
*	O
nprompt	*(char)
;	O
_rl_in_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
_rl_enable_meta	int
&	O
RL_ISSTATE	O
(	O
RL_STATE_TERMPREPPED	int
)	O
)	O
_rl_enable_meta_key	()->(void)
(	O
)	O
;	O
if	O
(	O
rl_startup_hook	*(()->(int))
)	O
(	O
*	O
rl_startup_hook	*(()->(int))
)	O
(	O
)	O
;	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
)	O
rl_vi_insertion_mode	(int,int)->(int)
(	O
1	int
,	O
'i'	O
)	O
;	O
if	O
(	O
_rl_echoing_p	int
==	O
0	int
&&	O
rl_redisplay_function	*(()->(void))
==	O
rl_redisplay	()->(void)
)	O
{	O
if	O
(	O
rl_prompt	*(char)
&&	O
rl_already_prompted	int
==	O
0	int
)	O
{	O
nprompt	*(char)
=	O
_rl_strip_prompt	(*(char))->(*(char))
(	O
rl_prompt	*(char)
)	O
;	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s"	*(char)
,	O
nprompt	*(char)
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
xfree	(*(void))->(void)
(	O
nprompt	*(char)
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
rl_prompt	*(char)
&&	O
rl_already_prompted	int
)	O
rl_on_new_line_with_prompt	()->(int)
(	O
)	O
;	O
else	O
rl_on_new_line	()->(int)
(	O
)	O
;	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
}	O
if	O
(	O
rl_pre_input_hook	*(()->(int))
)	O
(	O
*	O
rl_pre_input_hook	*(()->(int))
)	O
(	O
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
}	O
STATIC_CALLBACK	O
char	O
*	O
readline_internal_teardown	(int)->(*(char))
(	O
eof	int
)	O
int	O
eof	int
;	O
{	O
char	O
*	O
temp	*(char)
;	O
HIST_ENTRY	struct(*(char),*(char),*(void))
*	O
entry	*(struct(*(char),*(char),*(void)))
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
entry	*(struct(*(char),*(char),*(void)))
=	O
current_history	()->(*(struct(*(char),*(char),*(void))))
(	O
)	O
;	O
if	O
(	O
entry	*(struct(*(char),*(char),*(void)))
&&	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
{	O
temp	*(char)
=	O
savestring	O
(	O
the_line	*(char)
)	O
;	O
rl_revert_line	(int,int)->(int)
(	O
1	int
,	O
0	int
)	O
;	O
entry	*(struct(*(char),*(char),*(void)))
=	O
replace_history_entry	(int,*(char),*(void))->(*(struct(*(char),*(char),*(void))))
(	O
where_history	()->(int)
(	O
)	O
,	O
the_line	*(char)
,	O
(	O
histdata_t	*(void)
)	O
NULL	O
)	O
;	O
_rl_free_history_entry	(*(struct(*(char),*(char),*(void))))->(void)
(	O
entry	*(struct(*(char),*(char),*(void)))
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
the_line	*(char)
,	O
temp	*(char)
)	O
;	O
xfree	(*(void))->(void)
(	O
temp	*(char)
)	O
;	O
}	O
if	O
(	O
_rl_revert_all_at_newline	int
)	O
_rl_revert_all_lines	()->(void)
(	O
)	O
;	O
if	O
(	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
)	O
rl_free_undo_list	()->(void)
(	O
)	O
;	O
_rl_disable_meta_key	()->(void)
(	O
)	O
;	O
_rl_set_insert_mode	(int,int)->(void)
(	O
RL_IM_INSERT	int
,	O
0	int
)	O
;	O
return	O
(	O
eof	int
?	O
(	O
char	O
*	O
)	O
NULL	O
:	O
savestring	O
(	O
the_line	*(char)
)	O
)	O
;	O
}	O
void	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
{	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
&&	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
==	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
)	O
rl_vi_check	()->(int)
(	O
)	O
;	O
if	O
(	O
rl_num_chars_to_read	int
&&	O
rl_end	int
>=	O
rl_num_chars_to_read	int
)	O
{	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
rl_newline	(int,int)->(int)
(	O
1	int
,	O
'\n'	O
)	O
;	O
}	O
if	O
(	O
rl_done	int
==	O
0	int
)	O
{	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
}	O
if	O
(	O
rl_erase_empty_line	int
&&	O
rl_done	int
&&	O
rl_last_func	*((int,int)->(int))
==	O
rl_newline	(int,int)->(int)
&&	O
rl_point	int
==	O
0	int
&&	O
rl_end	int
==	O
0	int
)	O
_rl_erase_entire_line	()->(void)
(	O
)	O
;	O
}	O
STATIC_CALLBACK	O
int	O
readline_internal_char	()->(int)
(	O
)	O
{	O
static	O
int	O
lastc	int
,	O
eof_found	int
;	O
int	O
c	int
,	O
code	int
,	O
lk	int
;	O
lastc	int
=	O
EOF	O
;	O
lk	int
=	O
_rl_last_command_was_kill	int
;	O
code	int
=	O
sigsetjmp	O
(	O
_rl_top_level	array(struct(array(long),int,struct(array(long))))
,	O
0	int
)	O
;	O
if	O
(	O
code	int
)	O
{	O
(	O
*	O
rl_redisplay_function	*(()->(void))
)	O
(	O
)	O
;	O
_rl_want_redisplay	int
=	O
0	int
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
)	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
rl_pending_input	int
==	O
0	int
)	O
{	O
_rl_reset_argument	()->(void)
(	O
)	O
;	O
rl_executing_keyseq	*(char)
[	O
rl_key_sequence_length	int
=	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
RL_SETSTATE	O
(	O
RL_STATE_READCMD	int
)	O
;	O
c	int
=	O
rl_read_key	()->(int)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_READCMD	int
)	O
;	O
if	O
(	O
c	int
==	O
READERR	O
)	O
{	O
RL_SETSTATE	O
(	O
RL_STATE_DONE	int
)	O
;	O
return	O
(	O
rl_done	int
=	O
1	int
)	O
;	O
}	O
if	O
(	O
c	int
==	O
EOF	O
&&	O
rl_end	int
)	O
{	O
if	O
(	O
RL_SIG_RECEIVED	O
(	O
)	O
)	O
{	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
rl_signal_event_hook	*(()->(int))
)	O
(	O
*	O
rl_signal_event_hook	*(()->(int))
)	O
(	O
)	O
;	O
}	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_TERMPREPPED	int
)	O
)	O
{	O
if	O
(	O
lastc	int
==	O
_rl_eof_char	int
||	O
lastc	int
==	O
EOF	O
)	O
rl_end	int
=	O
0	int
;	O
else	O
c	int
=	O
_rl_eof_char	int
;	O
}	O
else	O
c	int
=	O
NEWLINE	char
;	O
}	O
if	O
(	O
(	O
(	O
c	int
==	O
_rl_eof_char	int
&&	O
lastc	int
!=	O
c	int
)	O
||	O
c	int
==	O
EOF	O
)	O
&&	O
rl_end	int
==	O
0	int
)	O
{	O
RL_SETSTATE	O
(	O
RL_STATE_DONE	int
)	O
;	O
return	O
(	O
rl_done	int
=	O
1	int
)	O
;	O
}	O
lastc	int
=	O
c	int
;	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
(	O
unsigned	O
char	O
)	O
c	int
,	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
rl_pending_input	int
==	O
0	int
&&	O
lk	int
==	O
_rl_last_command_was_kill	int
)	O
_rl_last_command_was_kill	int
=	O
0	int
;	O
_rl_internal_char_cleanup	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
readline_internal_charloop	()->(int)
(	O
)	O
{	O
int	O
eof	int
=	O
1	int
;	O
while	O
(	O
rl_done	int
==	O
0	int
)	O
eof	int
=	O
readline_internal_char	()->(int)
(	O
)	O
;	O
return	O
(	O
eof	int
)	O
;	O
}	O
static	O
char	O
*	O
readline_internal	()->(*(char))
(	O
)	O
{	O
int	O
eof	int
;	O
readline_internal_setup	()->(void)
(	O
)	O
;	O
eof	int
=	O
readline_internal_charloop	()->(int)
(	O
)	O
;	O
return	O
(	O
readline_internal_teardown	(int)->(*(char))
(	O
eof	int
)	O
)	O
;	O
}	O
void	O
_rl_init_line_state	()->(void)
(	O
)	O
{	O
rl_point	int
=	O
rl_end	int
=	O
rl_mark	int
=	O
0	int
;	O
the_line	*(char)
=	O
rl_line_buffer	*(char)
;	O
the_line	*(char)
[	O
0	int
]	O
=	O
0	int
;	O
}	O
void	O
_rl_set_the_line	()->(void)
(	O
)	O
{	O
the_line	*(char)
=	O
rl_line_buffer	*(char)
;	O
}	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
_rl_keyseq_cxt_alloc	()->(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))
(	O
)	O
{	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
(	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
)	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
(	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
)	O
)	O
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
=	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
subseq_arg	int
=	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
subseq_retval	int
=	O
0	int
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
okey	int
=	O
0	int
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
ocxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
childval	int
=	O
42	int
;	O
return	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
}	O
void	O
_rl_keyseq_cxt_dispose	(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))->(void)
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
{	O
xfree	(*(void))->(void)
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
;	O
}	O
void	O
_rl_keyseq_chain_dispose	()->(void)
(	O
)	O
{	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
while	O
(	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
{	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
ocxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
_rl_keyseq_cxt_dispose	(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))->(void)
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
;	O
}	O
}	O
static	O
int	O
_rl_subseq_getchar	(int)->(int)
(	O
key	int
)	O
int	O
key	int
;	O
{	O
int	O
k	int
;	O
if	O
(	O
key	int
==	O
ESC	O
)	O
RL_SETSTATE	O
(	O
RL_STATE_METANEXT	int
)	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
k	int
=	O
rl_read_key	()->(int)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MOREINPUT	int
)	O
;	O
if	O
(	O
key	int
==	O
ESC	O
)	O
RL_UNSETSTATE	O
(	O
RL_STATE_METANEXT	int
)	O
;	O
return	O
k	int
;	O
}	O
int	O
_rl_dispatch_callback	(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))->(int)
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
{	O
int	O
nkey	int
,	O
r	int
;	O
if	O
(	O
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
&	O
KSEQ_DISPATCHED	int
)	O
==	O
0	int
)	O
{	O
nkey	int
=	O
_rl_subseq_getchar	(int)->(int)
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
okey	int
)	O
;	O
if	O
(	O
nkey	int
<	O
0	int
)	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
_rl_dispatch_subseq	(int,*(struct(char,*((int,int)->(int)))),int)->(int)
(	O
nkey	int
,	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
dmap	*(struct(char,*((int,int)->(int))))
,	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
subseq_arg	int
)	O
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
|=	O
KSEQ_DISPATCHED	int
;	O
}	O
else	O
r	int
=	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
childval	int
;	O
if	O
(	O
r	int
!=	O
-	O
3	int
)	O
r	int
=	O
_rl_subseq_result	(int,*(struct(char,*((int,int)->(int)))),int,int)->(int)
(	O
r	int
,	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
oldmap	*(struct(char,*((int,int)->(int))))
,	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
okey	int
,	O
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
&	O
KSEQ_SUBSEQ	int
)	O
)	O
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
if	O
(	O
r	int
>=	O
0	int
||	O
(	O
r	int
==	O
-	O
1	int
&&	O
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
&	O
KSEQ_SUBSEQ	int
)	O
==	O
0	int
)	O
)	O
{	O
_rl_keyseq_chain_dispose	()->(void)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
return	O
r	int
;	O
}	O
if	O
(	O
r	int
!=	O
-	O
3	int
)	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
ocxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
if	O
(	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
childval	int
=	O
r	int
;	O
if	O
(	O
r	int
!=	O
-	O
3	int
)	O
_rl_keyseq_cxt_dispose	(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))->(void)
(	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
)	O
;	O
return	O
r	int
;	O
}	O
int	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
key	int
,	O
map	*(struct(char,*((int,int)->(int))))
)	O
register	O
int	O
key	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
{	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
return	O
_rl_dispatch_subseq	(int,*(struct(char,*((int,int)->(int)))),int)->(int)
(	O
key	int
,	O
map	*(struct(char,*((int,int)->(int))))
,	O
0	int
)	O
;	O
}	O
int	O
_rl_dispatch_subseq	(int,*(struct(char,*((int,int)->(int)))),int)->(int)
(	O
key	int
,	O
map	*(struct(char,*((int,int)->(int))))
,	O
got_subseq	int
)	O
register	O
int	O
key	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
int	O
got_subseq	int
;	O
{	O
int	O
r	int
,	O
newkey	int
;	O
char	O
*	O
macro	*(char)
;	O
rl_command_func_t	(int,int)->(int)
*	O
func	*((int,int)->(int))
;	O
_rl_keyseq_cxt	struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)),int)
*	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
if	O
(	O
META_CHAR	O
(	O
key	int
)	O
&&	O
_rl_convert_meta_chars_to_ascii	int
)	O
{	O
if	O
(	O
map	*(struct(char,*((int,int)->(int))))
[	O
ESC	O
]	O
.	O
type	enum(int,int,int,int)
==	O
ISKMAP	int
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
)	O
_rl_add_macro_char	(int)->(void)
(	O
ESC	O
)	O
;	O
RESIZE_KEYSEQ_BUFFER	O
(	O
)	O
;	O
rl_executing_keyseq	*(char)
[	O
rl_key_sequence_length	int
++	O
]	O
=	O
ESC	O
;	O
map	*(struct(char,*((int,int)->(int))))
=	O
FUNCTION_TO_KEYMAP	O
(	O
map	*(struct(char,*((int,int)->(int))))
,	O
ESC	O
)	O
;	O
key	int
=	O
UNMETA	O
(	O
key	int
)	O
;	O
return	O
(	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
key	int
,	O
map	*(struct(char,*((int,int)->(int))))
)	O
)	O
;	O
}	O
else	O
rl_ding	()->(int)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACRODEF	int
)	O
)	O
_rl_add_macro_char	(int)->(void)
(	O
key	int
)	O
;	O
r	int
=	O
0	int
;	O
switch	O
(	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
type	enum(int,int,int,int)
)	O
{	O
case	O
ISFUNC	int
:	O
func	*((int,int)->(int))
=	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
;	O
if	O
(	O
func	*((int,int)->(int))
)	O
{	O
if	O
(	O
func	*((int,int)->(int))
==	O
rl_do_lowercase_version	(int,int)->(int)
)	O
return	O
(	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
_rl_to_lower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
key	int
)	O
,	O
map	*(struct(char,*((int,int)->(int))))
)	O
)	O
;	O
rl_executing_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
rl_executing_key	int
=	O
key	int
;	O
RESIZE_KEYSEQ_BUFFER	O
(	O
)	O
;	O
rl_executing_keyseq	*(char)
[	O
rl_key_sequence_length	int
++	O
]	O
=	O
key	int
;	O
rl_executing_keyseq	*(char)
[	O
rl_key_sequence_length	int
]	O
=	O
'\0'	O
;	O
rl_dispatching	int
=	O
1	int
;	O
RL_SETSTATE	O
(	O
RL_STATE_DISPATCHING	int
)	O
;	O
r	int
=	O
(	O
*	O
func	*((int,int)->(int))
)	O
(	O
rl_numeric_arg	int
*	O
rl_arg_sign	int
,	O
key	int
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_DISPATCHING	int
)	O
;	O
rl_dispatching	int
=	O
0	int
;	O
if	O
(	O
rl_pending_input	int
==	O
0	int
&&	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
!=	O
rl_digit_argument	(int,int)->(int)
)	O
rl_last_func	*((int,int)->(int))
=	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
;	O
RL_CHECK_SIGNALS	O
(	O
)	O
;	O
}	O
else	O
if	O
(	O
map	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
)	O
_rl_prev_macro_key	()->(int)
(	O
)	O
;	O
else	O
_rl_unget_char	(int)->(int)
(	O
key	int
)	O
;	O
return	O
-	O
2	int
;	O
}	O
else	O
if	O
(	O
got_subseq	int
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
)	O
_rl_prev_macro_key	()->(int)
(	O
)	O
;	O
else	O
_rl_unget_char	(int)->(int)
(	O
key	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
RL_UNSETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
_rl_keyseq_chain_dispose	()->(void)
(	O
)	O
;	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
break	O
;	O
case	O
ISKMAP	int
:	O
if	O
(	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
!=	O
0	int
)	O
{	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
&&	O
key	int
==	O
ESC	O
&&	O
map	*(struct(char,*((int,int)->(int))))
==	O
vi_insertion_keymap	array(struct(char,*((int,int)->(int))))
&&	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
|	O
RL_STATE_MACROINPUT	int
)	O
==	O
0	int
)	O
&&	O
_rl_pushed_input_available	()->(int)
(	O
)	O
==	O
0	int
&&	O
_rl_input_queued	(int)->(int)
(	O
(	O
_rl_keyseq_timeout	int
>	O
0	int
)	O
?	O
_rl_keyseq_timeout	int
*	O
1000	int
:	O
0	int
)	O
==	O
0	int
)	O
return	O
(	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
ANYOTHERKEY	O
,	O
FUNCTION_TO_KEYMAP	O
(	O
map	*(struct(char,*((int,int)->(int))))
,	O
key	int
)	O
)	O
)	O
;	O
RESIZE_KEYSEQ_BUFFER	O
(	O
)	O
;	O
rl_executing_keyseq	*(char)
[	O
rl_key_sequence_length	int
++	O
]	O
=	O
key	int
;	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
=	O
FUNCTION_TO_KEYMAP	O
(	O
map	*(struct(char,*((int,int)->(int))))
,	O
key	int
)	O
;	O
if	O
(	O
_rl_vi_redoing	int
&&	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
&&	O
map	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
!=	O
0	int
)	O
return	O
(	O
_rl_subseq_result	(int,*(struct(char,*((int,int)->(int)))),int,int)->(int)
(	O
-	O
2	int
,	O
map	*(struct(char,*((int,int)->(int))))
,	O
key	int
,	O
got_subseq	int
)	O
)	O
;	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_CALLBACK	int
)	O
)	O
{	O
r	int
=	O
RL_ISSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
?	O
-	O
3	int
:	O
0	int
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
_rl_keyseq_cxt_alloc	()->(*(struct(int,int,int,int,*(struct(char,*`)),*(struct(char,*`)),*(struct(int,int,int,int,*`,*`,*`,int)),int)))
(	O
)	O
;	O
if	O
(	O
got_subseq	int
)	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
flags	int
|=	O
KSEQ_SUBSEQ	int
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
okey	int
=	O
key	int
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
oldmap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
dmap	*(struct(char,*((int,int)->(int))))
=	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
;	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
subseq_arg	int
=	O
got_subseq	int
||	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
->	O
dmap	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
;	O
RL_SETSTATE	O
(	O
RL_STATE_MULTIKEY	int
)	O
;	O
_rl_kscxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
=	O
cxt	*(struct(int,int,int,int,*(struct(char,*((int,int)->(int)))),*(struct(char,*((int,int)->(int)))),*(struct(int,int,int,int,*(struct`),*(struct`),*(struct`),int)),int))
;	O
return	O
r	int
;	O
}	O
if	O
(	O
_rl_keyseq_timeout	int
>	O
0	int
&&	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_INPUTPENDING	int
|	O
RL_STATE_MACROINPUT	int
)	O
==	O
0	int
)	O
&&	O
_rl_pushed_input_available	()->(int)
(	O
)	O
==	O
0	int
&&	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
&&	O
_rl_input_queued	(int)->(int)
(	O
_rl_keyseq_timeout	int
*	O
1000	int
)	O
==	O
0	int
)	O
return	O
(	O
_rl_subseq_result	(int,*(struct(char,*((int,int)->(int)))),int,int)->(int)
(	O
-	O
2	int
,	O
map	*(struct(char,*((int,int)->(int))))
,	O
key	int
,	O
got_subseq	int
)	O
)	O
;	O
newkey	int
=	O
_rl_subseq_getchar	(int)->(int)
(	O
key	int
)	O
;	O
if	O
(	O
newkey	int
<	O
0	int
)	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
r	int
=	O
_rl_dispatch_subseq	(int,*(struct(char,*((int,int)->(int)))),int)->(int)
(	O
newkey	int
,	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
,	O
got_subseq	int
||	O
map	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
)	O
;	O
return	O
_rl_subseq_result	(int,*(struct(char,*((int,int)->(int)))),int,int)->(int)
(	O
r	int
,	O
map	*(struct(char,*((int,int)->(int))))
,	O
key	int
,	O
got_subseq	int
)	O
;	O
}	O
else	O
{	O
_rl_abort_internal	()->(int)
(	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
break	O
;	O
case	O
ISMACR	int
:	O
if	O
(	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
!=	O
0	int
)	O
{	O
rl_executing_keyseq	*(char)
[	O
rl_key_sequence_length	int
]	O
=	O
'\0'	O
;	O
macro	*(char)
=	O
savestring	O
(	O
(	O
char	O
*	O
)	O
map	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
)	O
;	O
_rl_with_macro_input	(*(char))->(void)
(	O
macro	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
break	O
;	O
}	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
&&	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
==	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
&&	O
key	int
!=	O
ANYOTHERKEY	O
&&	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
==	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
&&	O
_rl_vi_textmod_command	(int)->(int)
(	O
key	int
)	O
)	O
_rl_vi_set_last	(int,int,int)->(void)
(	O
key	int
,	O
rl_numeric_arg	int
,	O
rl_arg_sign	int
)	O
;	O
return	O
(	O
r	int
)	O
;	O
}	O
static	O
int	O
_rl_subseq_result	(int,*(struct(char,*((int,int)->(int)))),int,int)->(int)
(	O
r	int
,	O
map	*(struct(char,*((int,int)->(int))))
,	O
key	int
,	O
got_subseq	int
)	O
int	O
r	int
;	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
int	O
key	int
,	O
got_subseq	int
;	O
{	O
Keymap	*(struct(char,*((int,int)->(int))))
m	*(struct(char,*((int,int)->(int))))
;	O
int	O
type	enum(int,int,int,int)
,	O
nt	int
;	O
rl_command_func_t	(int,int)->(int)
*	O
func	*((int,int)->(int))
,	O
*	O
nf	*((int,int)->(int))
;	O
if	O
(	O
r	int
==	O
-	O
2	int
)	O
{	O
m	*(struct(char,*((int,int)->(int))))
=	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
;	O
type	enum(int,int,int,int)
=	O
m	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
type	enum(int,int,int,int)
;	O
func	*((int,int)->(int))
=	O
m	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
;	O
if	O
(	O
type	enum(int,int,int,int)
==	O
ISFUNC	int
&&	O
func	*((int,int)->(int))
==	O
rl_do_lowercase_version	(int,int)->(int)
)	O
r	int
=	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
_rl_to_lower	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
key	int
)	O
,	O
map	*(struct(char,*((int,int)->(int))))
)	O
;	O
else	O
if	O
(	O
type	enum(int,int,int,int)
==	O
ISFUNC	int
)	O
{	O
nt	int
=	O
m	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
type	enum(int,int,int,int)
;	O
nf	*((int,int)->(int))
=	O
m	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
;	O
m	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
type	enum(int,int,int,int)
=	O
type	enum(int,int,int,int)
;	O
m	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
=	O
func	*((int,int)->(int))
;	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
r	int
=	O
_rl_dispatch_subseq	(int,*(struct(char,*((int,int)->(int)))),int)->(int)
(	O
key	int
,	O
m	*(struct(char,*((int,int)->(int))))
,	O
0	int
)	O
;	O
m	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
type	enum(int,int,int,int)
=	O
nt	int
;	O
m	*(struct(char,*((int,int)->(int))))
[	O
key	int
]	O
.	O
function	*((int,int)->(int))
=	O
nf	*((int,int)->(int))
;	O
}	O
else	O
r	int
=	O
_rl_dispatch	(int,*(struct(char,*((int,int)->(int)))))->(int)
(	O
ANYOTHERKEY	O
,	O
m	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
else	O
if	O
(	O
r	int
&&	O
map	*(struct(char,*((int,int)->(int))))
[	O
ANYOTHERKEY	O
]	O
.	O
function	*((int,int)->(int))
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
)	O
_rl_prev_macro_key	()->(int)
(	O
)	O
;	O
else	O
_rl_unget_char	(int)->(int)
(	O
key	int
)	O
;	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
return	O
-	O
2	int
;	O
}	O
else	O
if	O
(	O
r	int
&&	O
got_subseq	int
)	O
{	O
if	O
(	O
RL_ISSTATE	O
(	O
RL_STATE_MACROINPUT	int
)	O
)	O
_rl_prev_macro_key	()->(int)
(	O
)	O
;	O
else	O
_rl_unget_char	(int)->(int)
(	O
key	int
)	O
;	O
_rl_dispatching_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
return	O
-	O
1	int
;	O
}	O
return	O
r	int
;	O
}	O
int	O
rl_initialize	()->(int)
(	O
)	O
{	O
if	O
(	O
!	O
rl_initialized	int
)	O
{	O
RL_SETSTATE	O
(	O
RL_STATE_INITIALIZING	int
)	O
;	O
readline_initialize_everything	()->(void)
(	O
)	O
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_INITIALIZING	int
)	O
;	O
rl_initialized	int
++	O
;	O
RL_SETSTATE	O
(	O
RL_STATE_INITIALIZED	int
)	O
;	O
}	O
_rl_init_line_state	()->(void)
(	O
)	O
;	O
rl_done	int
=	O
0	int
;	O
RL_UNSETSTATE	O
(	O
RL_STATE_DONE	int
)	O
;	O
_rl_start_using_history	()->(void)
(	O
)	O
;	O
rl_reset_line_state	()->(int)
(	O
)	O
;	O
rl_last_func	*((int,int)->(int))
=	O
(	O
rl_command_func_t	(int,int)->(int)
*	O
)	O
NULL	O
;	O
_rl_parsing_conditionalized_out	char
=	O
0	int
;	O
if	O
(	O
rl_editing_mode	int
==	O
vi_mode	int
)	O
_rl_vi_initialize_line	()->(void)
(	O
)	O
;	O
_rl_set_insert_mode	(int,int)->(void)
(	O
RL_IM_DEFAULT	O
,	O
1	int
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
readline_initialize_everything	()->(void)
(	O
)	O
{	O
if	O
(	O
!	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
!	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
_rl_in_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
_rl_out_stream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
if	O
(	O
rl_line_buffer	*(char)
==	O
0	int
)	O
rl_line_buffer	*(char)
=	O
(	O
char	O
*	O
)	O
xmalloc	(long)->(*(void))
(	O
rl_line_buffer_len	int
=	O
DEFAULT_BUFFER_SIZE	int
)	O
;	O
if	O
(	O
rl_terminal_name	*(char)
==	O
0	int
)	O
rl_terminal_name	*(char)
=	O
sh_get_env_value	(*(char))->(*(char))
(	O
"TERM"	*(char)
)	O
;	O
_rl_init_terminal_io	(*(char))->(int)
(	O
rl_terminal_name	*(char)
)	O
;	O
readline_default_bindings	()->(void)
(	O
)	O
;	O
rl_initialize_funmap	()->(void)
(	O
)	O
;	O
_rl_init_eightbit	()->(int)
(	O
)	O
;	O
rl_read_init_file	(*(char))->(int)
(	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
if	O
(	O
_rl_horizontal_scroll_mode	int
&&	O
_rl_term_autowrap	int
)	O
{	O
_rl_screenwidth	int
--	O
;	O
_rl_screenchars	int
-=	O
_rl_screenheight	int
;	O
}	O
rl_set_keymap_from_edit_mode	()->(void)
(	O
)	O
;	O
bind_arrow_keys	()->(void)
(	O
)	O
;	O
bind_bracketed_paste_prefix	()->(void)
(	O
)	O
;	O
if	O
(	O
rl_completer_word_break_characters	*(char)
==	O
(	O
char	O
*	O
)	O
NULL	O
)	O
rl_completer_word_break_characters	*(char)
=	O
(	O
char	O
*	O
)	O
rl_basic_word_break_characters	*(char)
;	O
if	O
(	O
_rl_colored_stats	int
||	O
_rl_colored_completion_prefix	int
)	O
_rl_parse_colors	()->(void)
(	O
)	O
;	O
rl_executing_keyseq	*(char)
=	O
malloc	(long)->(*(void))
(	O
_rl_executing_keyseq_size	int
=	O
16	int
)	O
;	O
if	O
(	O
rl_executing_keyseq	*(char)
)	O
rl_executing_keyseq	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
}	O
static	O
void	O
readline_default_bindings	()->(void)
(	O
)	O
{	O
if	O
(	O
_rl_bind_stty_chars	int
)	O
rl_tty_set_default_bindings	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
static	O
void	O
reset_default_bindings	()->(void)
(	O
)	O
{	O
if	O
(	O
_rl_bind_stty_chars	int
)	O
{	O
rl_tty_unset_default_bindings	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
)	O
;	O
rl_tty_set_default_bindings	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
}	O
static	O
void	O
bind_arrow_keys_internal	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
map	*(struct(char,*((int,int)->(int))))
)	O
Keymap	*(struct(char,*((int,int)->(int))))
map	*(struct(char,*((int,int)->(int))))
;	O
{	O
Keymap	*(struct(char,*((int,int)->(int))))
xkeymap	*(struct(char,*((int,int)->(int))))
;	O
xkeymap	*(struct(char,*((int,int)->(int))))
=	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
map	*(struct(char,*((int,int)->(int))))
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033[A"	*(char)
,	O
rl_get_previous_history	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033[B"	*(char)
,	O
rl_get_next_history	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033[C"	*(char)
,	O
rl_forward_char	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033[D"	*(char)
,	O
rl_backward_char	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033[H"	*(char)
,	O
rl_beg_of_line	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033[F"	*(char)
,	O
rl_end_of_line	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033OA"	*(char)
,	O
rl_get_previous_history	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033OB"	*(char)
,	O
rl_get_next_history	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033OC"	*(char)
,	O
rl_forward_char	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033OD"	*(char)
,	O
rl_backward_char	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033OH"	*(char)
,	O
rl_beg_of_line	(int,int)->(int)
)	O
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
"\033OF"	*(char)
,	O
rl_end_of_line	(int,int)->(int)
)	O
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
xkeymap	*(struct(char,*((int,int)->(int))))
;	O
}	O
static	O
void	O
bind_arrow_keys	()->(void)
(	O
)	O
{	O
bind_arrow_keys_internal	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
emacs_standard_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
bind_arrow_keys_internal	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
if	O
(	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
[	O
ESC	O
]	O
.	O
type	enum(int,int,int,int)
==	O
ISKMAP	int
)	O
rl_bind_keyseq_in_map	(*(char),*((int,int)->(int)),*(struct(char,*((int,int)->(int)))))->(int)
(	O
"\033"	*(char)
,	O
(	O
rl_command_func_t	(int,int)->(int)
*	O
)	O
NULL	O
,	O
vi_movement_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
bind_arrow_keys_internal	(*(struct(char,*((int,int)->(int)))))->(void)
(	O
vi_insertion_keymap	array(struct(char,*((int,int)->(int))))
)	O
;	O
}	O
static	O
void	O
bind_bracketed_paste_prefix	()->(void)
(	O
)	O
{	O
Keymap	*(struct(char,*((int,int)->(int))))
xkeymap	*(struct(char,*((int,int)->(int))))
;	O
xkeymap	*(struct(char,*((int,int)->(int))))
=	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
emacs_standard_keymap	array(struct(char,*((int,int)->(int))))
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
BRACK_PASTE_PREF	*(char)
,	O
rl_bracketed_paste_begin	(int,int)->(int)
)	O
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
vi_insertion_keymap	array(struct(char,*((int,int)->(int))))
;	O
rl_bind_keyseq_if_unbound	(*(char),*((int,int)->(int)))->(int)
(	O
BRACK_PASTE_PREF	*(char)
,	O
rl_bracketed_paste_begin	(int,int)->(int)
)	O
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
xkeymap	*(struct(char,*((int,int)->(int))))
;	O
}	O
int	O
rl_save_state	(*(struct(int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(char),int,int,*(struct(char,*`)),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),int,int,*((*`,int)->(*`)),*((*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*(char),array(char))))->(int)
(	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
)	O
struct	O
readline_state	struct(int,int,int,int,*(char),*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*(char)))->(int)),*((*(char),int,int)->(*(*(char)))),*(char),array(char))
*	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
;	O
{	O
if	O
(	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
==	O
0	int
)	O
return	O
-	O
1	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
point	int
=	O
rl_point	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
end	int
=	O
rl_end	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
mark	int
=	O
rl_mark	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
buffer	*(char)
=	O
rl_line_buffer	*(char)
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
buflen	int
=	O
rl_line_buffer_len	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
prompt	*(char)
=	O
rl_prompt	*(char)
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
rlstate	int
=	O
rl_readline_state	long
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
done	int
=	O
rl_done	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
kmap	*(struct(char,*((int,int)->(int))))
=	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
lastfunc	*((int,int)->(int))
=	O
rl_last_func	*((int,int)->(int))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
insmode	int
=	O
rl_insert_mode	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
edmode	int
=	O
rl_editing_mode	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
kseq	*(char)
=	O
rl_executing_keyseq	*(char)
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
kseqlen	int
=	O
rl_key_sequence_length	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
inf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
outf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
pendingin	int
=	O
rl_pending_input	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
macro	*(char)
=	O
rl_executing_macro	*(char)
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
catchsigs	int
=	O
rl_catch_signals	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
catchsigwinch	int
=	O
rl_catch_sigwinch	int
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
entryfunc	*((*(char),int)->(*(char)))
=	O
rl_completion_entry_function	*((*(char),int)->(*(char)))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
menuentryfunc	*((*(char),int)->(*(char)))
=	O
rl_menu_completion_entry_function	*((*(char),int)->(*(char)))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
ignorefunc	*((*(*(char)))->(int))
=	O
rl_ignore_some_completions_function	*((*(*(char)))->(int))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
attemptfunc	*((*(char),int,int)->(*(*(char))))
=	O
rl_attempted_completion_function	*((*(char),int,int)->(*(*(char))))
;	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
wordbreakchars	*(char)
=	O
rl_completer_word_break_characters	*(char)
;	O
return	O
(	O
0	int
)	O
;	O
}	O
int	O
rl_restore_state	(*(struct(int,int,int,int,*(char),*(struct(*`,int,int,*`,enum(int,int,int,int))),*(char),int,int,*(struct(char,*`)),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(char),int,int,*((*`,int)->(*`)),*((*`,int)->(*`)),*((*`)->(int)),*((*`,int,int)->(*`)),*(char),array(char))))->(int)
(	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
)	O
struct	O
readline_state	struct(int,int,int,int,*(char),*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*(char)))->(int)),*((*(char),int,int)->(*(*(char)))),*(char),array(char))
*	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
;	O
{	O
if	O
(	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
==	O
0	int
)	O
return	O
-	O
1	int
;	O
rl_point	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
point	int
;	O
rl_end	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
end	int
;	O
rl_mark	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
mark	int
;	O
the_line	*(char)
=	O
rl_line_buffer	*(char)
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
buffer	*(char)
;	O
rl_line_buffer_len	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
buflen	int
;	O
rl_undo_list	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
ul	*(struct(*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),int,int,*(char),enum(int,int,int,int)))
;	O
rl_prompt	*(char)
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
prompt	*(char)
;	O
rl_readline_state	long
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
rlstate	int
;	O
rl_done	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
done	int
;	O
_rl_keymap	*(struct(char,*((int,int)->(int))))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
kmap	*(struct(char,*((int,int)->(int))))
;	O
rl_last_func	*((int,int)->(int))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
lastfunc	*((int,int)->(int))
;	O
rl_insert_mode	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
insmode	int
;	O
rl_editing_mode	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
edmode	int
;	O
rl_executing_keyseq	*(char)
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
kseq	*(char)
;	O
rl_key_sequence_length	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
kseqlen	int
;	O
rl_instream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
inf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
rl_outstream	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
outf	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
rl_pending_input	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
pendingin	int
;	O
rl_executing_macro	*(char)
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
macro	*(char)
;	O
rl_catch_signals	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
catchsigs	int
;	O
rl_catch_sigwinch	int
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
catchsigwinch	int
;	O
rl_completion_entry_function	*((*(char),int)->(*(char)))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
entryfunc	*((*(char),int)->(*(char)))
;	O
rl_menu_completion_entry_function	*((*(char),int)->(*(char)))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
menuentryfunc	*((*(char),int)->(*(char)))
;	O
rl_ignore_some_completions_function	*((*(*(char)))->(int))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
ignorefunc	*((*(*(char)))->(int))
;	O
rl_attempted_completion_function	*((*(char),int,int)->(*(*(char))))
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
attemptfunc	*((*(char),int,int)->(*(*(char))))
;	O
rl_completer_word_break_characters	*(char)
=	O
sp	*(struct(int,int,int,int,*(char),*(struct(*(struct`),int,int,*(char),enum(int,int,int,int))),*(char),int,int,*(struct(char,*((int,int)->(int)))),*((int,int)->(int)),int,int,*(char),int,int,*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(char),int,int,*((*(char),int)->(*(char))),*((*(char),int)->(*(char))),*((*(*`))->(int)),*((*(char),int,int)->(*(*`))),*(char),array(char)))
->	O
wordbreakchars	*(char)
;	O
return	O
(	O
0	int
)	O
;	O
}	O
