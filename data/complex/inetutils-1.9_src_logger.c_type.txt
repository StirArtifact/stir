static	O
char	O
*	O
tag	*(char)
=	O
NULL	O
;	O
static	O
int	O
logflags	int
=	O
0	int
;	O
static	O
int	O
pri	int
=	O
MAKE_PRI	O
(	O
LOG_USER	O
,	O
LOG_NOTICE	int
)	O
;	O
static	O
char	O
*	O
host	*(char)
=	O
PATH_LOG	O
;	O
static	O
char	O
*	O
source	*(char)
;	O
static	O
char	O
*	O
pidstr	*(char)
;	O
static	O
int	O
host_family	int
=	O
AF_UNSPEC	O
;	O
int	O
decode	(*(char),*(struct(*(char),int)),*(char))->(int)
(	O
char	O
*	O
name	*(char)
,	O
CODE	struct(*(char),int)
*	O
codetab	*(struct(*(char),int))
,	O
const	O
char	O
*	O
what	*(char)
)	O
{	O
CODE	struct(*(char),int)
*	O
cp	*(struct(*(char),int))
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
name	*(char)
)	O
)	O
{	O
char	O
*	O
p	*(void)
;	O
int	O
c	int
;	O
unsigned	O
long	O
n	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
name	*(char)
,	O
&	O
p	*(void)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
p	*(void)
||	O
(	O
c	int
=	O
n	long
)	O
!=	O
n	long
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s: invalid %s number"	*(char)
,	O
what	*(char)
,	O
name	*(char)
)	O
;	O
return	O
c	int
;	O
}	O
for	O
(	O
cp	*(struct(*(char),int))
=	O
codetab	*(struct(*(char),int))
;	O
cp	*(struct(*(char),int))
->	O
c_name	*(char)
;	O
cp	*(struct(*(char),int))
++	O
)	O
{	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
cp	*(struct(*(char),int))
->	O
c_name	*(char)
)	O
==	O
0	int
)	O
return	O
cp	*(struct(*(char),int))
->	O
c_val	int
;	O
}	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"unknown %s name: %s"	*(char)
,	O
what	*(char)
,	O
name	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
int	O
parse_level	(*(char))->(int)
(	O
char	O
*	O
str	*(char)
)	O
{	O
char	O
*	O
p	*(void)
;	O
int	O
fac	int
,	O
pri	int
=	O
0	int
;	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
str	*(char)
,	O
'.'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
*	O
p	*(void)
++	O
=	O
0	int
;	O
fac	int
=	O
decode	(*(char),*(struct(*(char),int)),*(char))->(int)
(	O
str	*(char)
,	O
facilitynames	array(struct(*(char),int))
,	O
"facility"	*(char)
)	O
;	O
if	O
(	O
p	*(void)
)	O
pri	int
=	O
decode	(*(char),*(struct(*(char),int)),*(char))->(int)
(	O
p	*(void)
,	O
prioritynames	array(struct(*(char),int))
,	O
"priority"	*(char)
)	O
;	O
return	O
MAKE_PRI	O
(	O
fac	int
,	O
pri	int
)	O
;	O
}	O
union	O
logger_sockaddr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int),struct(short,array(char)))
{	O
struct	O
sockaddr	struct(short,array(char))
sa	struct(short,array(char))
;	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
sinet	struct(short,short,struct(int),array(char))
;	O
struct	O
sockaddr_in6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
sinet6	struct(short,short,int,struct(union(array(char),array(short),array(int))),int)
;	O
struct	O
sockaddr_un	struct(short,array(char))
sunix	struct(short,array(char))
;	O
}	O
;	O
int	O
fd	int
;	O
static	O
void	O
open_socket	()->(void)
(	O
void	O
)	O
{	O
union	O
logger_sockaddr	union(struct(short,array(char)),struct(short,short,struct(int),array(char)),struct(short,short,int,struct(union(array(char),array(short),array(int))),int),struct(short,array(char)))
sockaddr	struct(short,array(char))
;	O
socklen_t	int
socklen	int
;	O
int	O
family	int
;	O
int	O
ret	int
;	O
if	O
(	O
host	*(char)
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
size_t	long
len	long
=	O
strlen	(*(char))->(long)
(	O
host	*(char)
)	O
;	O
if	O
(	O
len	long
>=	O
sizeof	O
sockaddr	struct(short,array(char))
.	O
sunix	struct(short,array(char))
.	O
sun_path	array(char)
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"UNIX socket name too long"	*(char)
)	O
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
sockaddr	struct(short,array(char))
.	O
sunix	struct(short,array(char))
.	O
sun_path	array(char)
,	O
host	*(char)
)	O
;	O
sockaddr	struct(short,array(char))
.	O
sunix	struct(short,array(char))
.	O
sun_family	short
=	O
AF_UNIX	O
;	O
family	int
=	O
PF_UNIX	O
;	O
socklen	int
=	O
sizeof	O
(	O
sockaddr	struct(short,array(char))
.	O
sunix	struct(short,array(char))
)	O
;	O
}	O
else	O
{	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
*	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
,	O
*	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
*	O
host	*(char)
==	O
'['	O
)	O
{	O
++	O
host	*(char)
;	O
p	*(void)
=	O
strchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
']'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
{	O
*	O
p	*(void)
++	O
=	O
'\0'	O
;	O
if	O
(	O
*	O
p	*(void)
==	O
':'	O
)	O
++	O
p	*(void)
;	O
else	O
p	*(void)
=	O
NULL	O
;	O
}	O
}	O
else	O
{	O
p	*(void)
=	O
strrchr	(*(char),int)->(*(char))
(	O
host	*(char)
,	O
':'	O
)	O
;	O
if	O
(	O
p	*(void)
)	O
*	O
p	*(void)
++	O
=	O
0	int
;	O
}	O
if	O
(	O
!	O
p	*(void)
)	O
p	*(void)
=	O
"syslog"	*(char)
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
)	O
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_socktype	int
=	O
SOCK_DGRAM	int
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_family	int
=	O
host_family	int
;	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_flags	int
=	O
AI_ADDRCONFIG	int
;	O
ret	int
=	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
host	*(char)
,	O
p	*(void)
,	O
&	O
hints	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
&	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
ret	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"%s:%s, %s"	*(char)
,	O
host	*(char)
,	O
p	*(void)
,	O
gai_strerror	(int)->(*(char))
(	O
ret	int
)	O
)	O
;	O
for	O
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_next	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
{	O
fd	int
=	O
socket	(int,int,int)->(int)
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_family	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_socktype	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_protocol	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
continue	O
;	O
if	O
(	O
source	*(char)
)	O
{	O
int	O
ret	int
;	O
struct	O
addrinfo	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`))))))
tips	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
*	O
a	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
tips	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
0	int
,	O
sizeof	O
(	O
tips	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
)	O
)	O
;	O
tips	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_family	int
=	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_family	int
;	O
tips	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
.	O
ai_flags	int
=	O
AI_NUMERICHOST	int
;	O
ret	int
=	O
getaddrinfo	(*(char),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))),*(*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))->(int)
(	O
source	*(char)
,	O
NULL	O
,	O
&	O
tips	struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))
,	O
&	O
a	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
ret	int
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
fd	int
,	O
a	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
a	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
)	O
{	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
a	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
a	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
}	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
fd	int
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addr	*(struct(short,array(char)))
,	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
->	O
ai_addrlen	int
)	O
)	O
{	O
close	(int)->(int)
(	O
fd	int
)	O
;	O
continue	O
;	O
}	O
break	O
;	O
}	O
if	O
(	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
freeaddrinfo	(*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*`,*`,*`)))))->(void)
(	O
res	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
)	O
;	O
if	O
(	O
ai	*(struct(int,int,int,int,int,*(struct(short,array(char))),*(char),*(struct(int,int,int,int,int,*(struct`),*(char),*(struct`)))))
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
EADDRNOTAVAIL	int
,	O
"%s:%s"	*(char)
,	O
host	*(char)
,	O
p	*(void)
)	O
;	O
return	O
;	O
socklen	int
=	O
sizeof	O
(	O
sockaddr	struct(short,array(char))
.	O
sinet	struct(short,short,struct(int),array(char))
)	O
;	O
}	O
fd	int
=	O
socket	(int,int,int)->(int)
(	O
family	int
,	O
SOCK_DGRAM	int
,	O
0	int
)	O
;	O
if	O
(	O
fd	int
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot create socket"	*(char)
)	O
;	O
if	O
(	O
family	int
==	O
PF_INET	int
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
s	long
;	O
s	long
.	O
sin_family	short
=	O
AF_INET	O
;	O
if	O
(	O
source	*(char)
)	O
{	O
if	O
(	O
inet_aton	(*(char),*(struct(int)))->(int)
(	O
source	*(char)
,	O
(	O
struct	O
in_addr	struct(int)
*	O
)	O
&	O
s	long
.	O
sin_addr	struct(int)
)	O
!=	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
0	int
,	O
"invalid source address"	*(char)
)	O
;	O
}	O
else	O
s	long
.	O
sin_addr	struct(int)
.	O
s_addr	int
=	O
INADDR_ANY	O
;	O
s	long
.	O
sin_port	short
=	O
0	int
;	O
if	O
(	O
bind	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
fd	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
s	long
,	O
sizeof	O
(	O
s	long
)	O
)	O
<	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot bind to source address"	*(char)
)	O
;	O
}	O
if	O
(	O
connect	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),int)->(int)
(	O
fd	int
,	O
&	O
sockaddr	struct(short,array(char))
.	O
sa	struct(short,array(char))
,	O
socklen	int
)	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot connect"	*(char)
)	O
;	O
}	O
static	O
void	O
send_to_syslog	(*(char))->(void)
(	O
const	O
char	O
*	O
msg	*(char)
)	O
{	O
char	O
*	O
pbuf	*(char)
;	O
time_t	long
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
size_t	long
len	long
;	O
ssize_t	long
rc	long
;	O
if	O
(	O
logflags	int
&	O
LOG_PID	int
)	O
rc	long
=	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
pbuf	*(char)
,	O
"<%d>%.15s %s[%s]: %s"	*(char)
,	O
pri	int
,	O
ctime	(*(long))->(*(char))
(	O
&	O
now	long
)	O
+	O
4	int
,	O
tag	*(char)
,	O
pidstr	*(char)
,	O
msg	*(char)
)	O
;	O
else	O
rc	long
=	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
pbuf	*(char)
,	O
"<%d>%.15s %s: %s"	*(char)
,	O
pri	int
,	O
ctime	(*(long))->(*(char))
(	O
&	O
now	long
)	O
+	O
4	int
,	O
tag	*(char)
,	O
msg	*(char)
)	O
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"cannot format message"	*(char)
)	O
;	O
len	long
=	O
strlen	(*(char))->(long)
(	O
pbuf	*(char)
)	O
;	O
if	O
(	O
logflags	int
&	O
LOG_PERROR	int
)	O
{	O
struct	O
iovec	struct(*(void),long)
iov	array(struct(*(void),long))
[	O
2	int
]	O
,	O
*	O
ioptr	*(struct(*(void),long))
;	O
size_t	long
msglen	long
=	O
strlen	(*(char))->(long)
(	O
msg	*(char)
)	O
;	O
ioptr	*(struct(*(void),long))
=	O
iov	array(struct(*(void),long))
;	O
ioptr	*(struct(*(void),long))
->	O
iov_base	*(void)
=	O
(	O
char	O
*	O
)	O
msg	*(char)
;	O
ioptr	*(struct(*(void),long))
->	O
iov_len	long
=	O
msglen	long
;	O
if	O
(	O
msg	*(char)
[	O
msglen	long
-	O
1	int
]	O
!=	O
'\n'	O
)	O
{	O
ioptr	*(struct(*(void),long))
++	O
;	O
ioptr	*(struct(*(void),long))
->	O
iov_base	*(void)
=	O
(	O
char	O
*	O
)	O
"\n"	*(char)
;	O
ioptr	*(struct(*(void),long))
->	O
iov_len	long
=	O
1	int
;	O
}	O
writev	(int,*(struct(*(void),long)),int)->(long)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
iov	array(struct(*(void),long))
,	O
ioptr	*(struct(*(void),long))
-	O
iov	array(struct(*(void),long))
+	O
1	int
)	O
;	O
}	O
rc	long
=	O
send	(int,*(void),long,int)->(long)
(	O
fd	int
,	O
pbuf	*(char)
,	O
len	long
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
pbuf	*(char)
)	O
;	O
if	O
(	O
rc	long
==	O
-	O
1	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"send failed"	*(char)
)	O
;	O
else	O
if	O
(	O
rc	long
!=	O
len	long
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
errno	O
,	O
"sent less bytes than expected (%lu vs. %lu)"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
rc	long
,	O
(	O
unsigned	O
long	O
)	O
len	long
)	O
;	O
}	O
const	O
char	O
args_doc	*(char)
[	O
]	O
=	O
"[MESSAGE]"	*(char)
;	O
const	O
char	O
doc	*(char)
[	O
]	O
=	O
"Send messages to syslog"	*(char)
;	O
static	O
struct	O
argp_option	struct(*(char),int,*(char),int,*(char),int)
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
[	O
]	O
=	O
{	O
{	O
"ipv4"	*(char)
,	O
'4'	O
,	O
NULL	O
,	O
0	int
,	O
"use IPv4 for logging to host"	*(char)
}	O
,	O
{	O
"ipv6"	*(char)
,	O
'6'	O
,	O
NULL	O
,	O
0	int
,	O
"use IPv6 with a host target"	*(char)
}	O
,	O
{	O
"host"	*(char)
,	O
'h'	O
,	O
"HOST"	*(char)
,	O
0	int
,	O
"log to host instead of the default "	*(char)
PATH_LOG	O
}	O
,	O
{	O
"source"	*(char)
,	O
'S'	O
,	O
"IP"	*(char)
,	O
0	int
,	O
"set source IP address"	*(char)
}	O
,	O
{	O
"id"	*(char)
,	O
'i'	O
,	O
"PID"	*(char)
,	O
OPTION_ARG_OPTIONAL	int
,	O
"log the process id with every line"	*(char)
}	O
,	O
{	O
"stderr"	*(char)
,	O
's'	O
,	O
NULL	O
,	O
0	int
,	O
"copy the message to stderr"	*(char)
}	O
,	O
{	O
"file"	*(char)
,	O
'f'	O
,	O
"FILE"	*(char)
,	O
0	int
,	O
"log the content of FILE"	*(char)
}	O
,	O
{	O
"priority"	*(char)
,	O
'p'	O
,	O
"PRI"	*(char)
,	O
0	int
,	O
"log with priority PRI"	*(char)
}	O
,	O
{	O
"tag"	*(char)
,	O
't'	O
,	O
"TAG"	*(char)
,	O
0	int
,	O
"prepend every line with TAG"	*(char)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
error_t	int
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
(	O
int	O
key	int
,	O
char	O
*	O
arg	*(char)
,	O
struct	O
argp_state	struct(*(struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct`))->(int)),*(char),*(char),*(struct(*(struct`),int,*(char),int)),*((int,*(char),*(void))->(*(char))),*(char))),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),*(void))
*	O
state	*(int)
)	O
{	O
switch	O
(	O
key	int
)	O
{	O
case	O
'4'	O
:	O
host_family	int
=	O
AF_INET	O
;	O
break	O
;	O
case	O
'6'	O
:	O
host_family	int
=	O
AF_INET6	O
;	O
break	O
;	O
case	O
'h'	O
:	O
host	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'S'	O
:	O
source	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'i'	O
:	O
logflags	int
|=	O
LOG_PID	int
;	O
if	O
(	O
arg	*(char)
)	O
pidstr	*(char)
=	O
arg	*(char)
;	O
else	O
{	O
char	O
buf	array(char)
[	O
INT_BUFSIZE_BOUND	O
(	O
uintmax_t	long
)	O
]	O
;	O
arg	*(char)
=	O
umaxtostr	(long,*(char))->(*(char))
(	O
getpid	()->(int)
(	O
)	O
,	O
buf	array(char)
)	O
;	O
pidstr	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
's'	O
:	O
logflags	int
|=	O
LOG_PERROR	int
;	O
break	O
;	O
case	O
'f'	O
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"-"	*(char)
)	O
&&	O
freopen	(*(char),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
arg	*(char)
,	O
"r"	*(char)
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
==	O
NULL	O
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_FAILURE	int
,	O
errno	O
,	O
"%s"	*(char)
,	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
'p'	O
:	O
pri	int
=	O
parse_level	(*(char))->(int)
(	O
arg	*(char)
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
tag	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
default	O
:	O
return	O
ARGP_ERR_UNKNOWN	O
;	O
}	O
return	O
0	int
;	O
}	O
static	O
struct	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
=	O
{	O
argp_options	array(struct(*(char),int,*(char),int,*(char),int))
,	O
parse_opt	(int,*(char),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),int,*(*(char)),int,int,int,int,*(void),*(*(void)),*(void),*(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void))))->(int)
,	O
args_doc	*(char)
,	O
doc	*(char)
}	O
;	O
const	O
char	O
*	O
program_authors	array(*(char))
[	O
]	O
=	O
{	O
"Sergey Poznyakoff"	*(char)
,	O
NULL	O
}	O
;	O
int	O
main	(int,array(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
argv	*(*(char))
[	O
]	O
)	O
{	O
int	O
index	(*(char),int)->(*(char))
;	O
char	O
*	O
buf	array(char)
=	O
NULL	O
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
iu_argp_init	O
(	O
"logger"	*(char)
,	O
program_authors	array(*(char))
)	O
;	O
argp_parse	(*(struct(*(struct(*`,int,*`,int,*`,int)),*((int,*`,*`)->(int)),*(char),*(char),*(struct(*`,int,*`,int)),*((int,*`,*`)->(*`)),*(char))),int,*(*(char)),int,*(int),*(void))->(int)
(	O
&	O
argp	struct(*(struct(*(char),int,*(char),int,*(char),int)),*((int,*(char),*(struct))->(int)),*(char),*(char),*(struct),*((int,*(char),*(void))->(*(char))),*(char))
,	O
argc	int
,	O
argv	*(*(char))
,	O
0	int
,	O
&	O
index	(*(char),int)->(*(char))
,	O
NULL	O
)	O
;	O
argc	int
-=	O
index	(*(char),int)->(*(char))
;	O
argv	*(*(char))
+=	O
index	(*(char),int)->(*(char))
;	O
if	O
(	O
!	O
tag	*(char)
)	O
{	O
tag	*(char)
=	O
getenv	(*(char))->(*(char))
(	O
"USER"	*(char)
)	O
;	O
if	O
(	O
!	O
tag	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwuid	(int)->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
getuid	()->(int)
(	O
)	O
)	O
;	O
if	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
tag	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
;	O
else	O
tag	*(char)
=	O
xstrdup	(*(char))->(*(char))
(	O
"none"	*(char)
)	O
;	O
}	O
}	O
open_socket	()->(void)
(	O
)	O
;	O
if	O
(	O
argc	int
>	O
0	int
)	O
{	O
int	O
i	int
;	O
size_t	long
len	long
=	O
0	int
;	O
char	O
*	O
p	*(void)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
len	long
+=	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
buf	array(char)
=	O
xmalloc	(long)->(*(void))
(	O
len	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
,	O
p	*(void)
=	O
buf	array(char)
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
len	long
=	O
strlen	(*(char))->(long)
(	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
p	*(void)
,	O
argv	*(*(char))
[	O
i	int
]	O
,	O
len	long
)	O
;	O
p	*(void)
+=	O
len	long
;	O
*	O
p	*(void)
++	O
=	O
' '	O
;	O
}	O
p	*(void)
[	O
-	O
1	int
]	O
=	O
0	int
;	O
send_to_syslog	(*(char))->(void)
(	O
buf	array(char)
)	O
;	O
}	O
else	O
{	O
size_t	long
size	long
=	O
0	int
;	O
while	O
(	O
getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
buf	array(char)
,	O
&	O
size	long
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
>	O
0	int
)	O
send_to_syslog	(*(char))->(void)
(	O
buf	array(char)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
buf	array(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_SUCCESS	int
)	O
;	O
}	O
