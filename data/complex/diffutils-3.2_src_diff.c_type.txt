struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
{	O
char	O
*	O
regexps	*(char)
;	O
size_t	long
len	long
;	O
size_t	long
size	long
;	O
bool	bool
multiple_regexps	bool
;	O
struct	O
re_pattern_buffer	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
*	O
buf	*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
;	O
}	O
;	O
static	O
int	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
(	O
struct	O
comparison	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`))))))
const	O
*	O
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
;	O
static	O
void	O
add_regexp	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))),*(char))->(void)
(	O
struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
*	O
,	O
char	O
const	O
*	O
)	O
;	O
static	O
void	O
summarize_regexp_list	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))))->(void)
(	O
struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
*	O
)	O
;	O
static	O
void	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
enum	O
output_style	enum(int,int,int,int,int,int,int,int,int)
)	O
;	O
static	O
void	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
char	O
const	O
*	O
*	O
,	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
;	O
static	O
void	O
try_help	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
,	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
static	O
void	O
check_stdout	()->(void)
(	O
void	O
)	O
;	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
;	O
static	O
bool	bool
recursive	bool
;	O
static	O
struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
function_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
;	O
static	O
struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
ignore_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
;	O
enum	O
{	O
binary	int
=	O
true	int
}	O
;	O
static	O
bool	bool
new_file	bool
;	O
static	O
bool	bool
unidirectional_new_file	bool
;	O
static	O
bool	bool
report_identical_files	bool
;	O
static	O
char	O
const	O
shortopts	array(char)
[	O
]	O
=	O
"0123456789abBcC:dD:eEfF:hHiI:lL:nNpPqrsS:tTuU:vwW:x:X:yZ"	*(char)
;	O
enum	O
{	O
BINARY_OPTION	int
=	O
CHAR_MAX	O
+	O
1	int
,	O
FROM_FILE_OPTION	int
,	O
HELP_OPTION	int
,	O
HORIZON_LINES_OPTION	int
,	O
IGNORE_FILE_NAME_CASE_OPTION	int
,	O
INHIBIT_HUNK_MERGE_OPTION	int
,	O
LEFT_COLUMN_OPTION	int
,	O
LINE_FORMAT_OPTION	int
,	O
NO_IGNORE_FILE_NAME_CASE_OPTION	int
,	O
NORMAL_OPTION	int
,	O
SDIFF_MERGE_ASSIST_OPTION	int
,	O
STRIP_TRAILING_CR_OPTION	int
,	O
SUPPRESS_BLANK_EMPTY_OPTION	int
,	O
SUPPRESS_COMMON_LINES_OPTION	int
,	O
TABSIZE_OPTION	int
,	O
TO_FILE_OPTION	int
,	O
UNCHANGED_LINE_FORMAT_OPTION	int
,	O
OLD_LINE_FORMAT_OPTION	int
,	O
NEW_LINE_FORMAT_OPTION	int
,	O
UNCHANGED_GROUP_FORMAT_OPTION	int
,	O
OLD_GROUP_FORMAT_OPTION	int
,	O
NEW_GROUP_FORMAT_OPTION	int
,	O
CHANGED_GROUP_FORMAT_OPTION	int
}	O
;	O
static	O
char	O
const	O
group_format_option	array(array(char))
[	O
]	O
[	O
sizeof	O
"--unchanged-group-format"	*(char)
]	O
=	O
{	O
"--unchanged-group-format"	*(char)
,	O
"--old-group-format"	*(char)
,	O
"--new-group-format"	*(char)
,	O
"--changed-group-format"	*(char)
}	O
;	O
static	O
char	O
const	O
line_format_option	array(array(char))
[	O
]	O
[	O
sizeof	O
"--unchanged-line-format"	*(char)
]	O
=	O
{	O
"--unchanged-line-format"	*(char)
,	O
"--old-line-format"	*(char)
,	O
"--new-line-format"	*(char)
}	O
;	O
static	O
struct	O
option	struct(*(char),int,*(int),int)
const	O
longopts	array(struct(*(char),int,*(int),int))
[	O
]	O
=	O
{	O
{	O
"binary"	*(char)
,	O
0	int
,	O
0	int
,	O
BINARY_OPTION	int
}	O
,	O
{	O
"brief"	*(char)
,	O
0	int
,	O
0	int
,	O
'q'	O
}	O
,	O
{	O
"changed-group-format"	*(char)
,	O
1	int
,	O
0	int
,	O
CHANGED_GROUP_FORMAT_OPTION	int
}	O
,	O
{	O
"context"	*(char)
,	O
2	int
,	O
0	int
,	O
'C'	O
}	O
,	O
{	O
"ed"	*(char)
,	O
0	int
,	O
0	int
,	O
'e'	O
}	O
,	O
{	O
"exclude"	*(char)
,	O
1	int
,	O
0	int
,	O
'x'	O
}	O
,	O
{	O
"exclude-from"	*(char)
,	O
1	int
,	O
0	int
,	O
'X'	O
}	O
,	O
{	O
"expand-tabs"	*(char)
,	O
0	int
,	O
0	int
,	O
't'	O
}	O
,	O
{	O
"forward-ed"	*(char)
,	O
0	int
,	O
0	int
,	O
'f'	O
}	O
,	O
{	O
"from-file"	*(char)
,	O
1	int
,	O
0	int
,	O
FROM_FILE_OPTION	int
}	O
,	O
{	O
"help"	*(char)
,	O
0	int
,	O
0	int
,	O
HELP_OPTION	int
}	O
,	O
{	O
"horizon-lines"	*(char)
,	O
1	int
,	O
0	int
,	O
HORIZON_LINES_OPTION	int
}	O
,	O
{	O
"ifdef"	*(char)
,	O
1	int
,	O
0	int
,	O
'D'	O
}	O
,	O
{	O
"ignore-all-space"	*(char)
,	O
0	int
,	O
0	int
,	O
'w'	O
}	O
,	O
{	O
"ignore-blank-lines"	*(char)
,	O
0	int
,	O
0	int
,	O
'B'	O
}	O
,	O
{	O
"ignore-case"	*(char)
,	O
0	int
,	O
0	int
,	O
'i'	O
}	O
,	O
{	O
"ignore-file-name-case"	*(char)
,	O
0	int
,	O
0	int
,	O
IGNORE_FILE_NAME_CASE_OPTION	int
}	O
,	O
{	O
"ignore-matching-lines"	*(char)
,	O
1	int
,	O
0	int
,	O
'I'	O
}	O
,	O
{	O
"ignore-space-change"	*(char)
,	O
0	int
,	O
0	int
,	O
'b'	O
}	O
,	O
{	O
"ignore-tab-expansion"	*(char)
,	O
0	int
,	O
0	int
,	O
'E'	O
}	O
,	O
{	O
"ignore-trailing-space"	*(char)
,	O
0	int
,	O
0	int
,	O
'Z'	O
}	O
,	O
{	O
"inhibit-hunk-merge"	*(char)
,	O
0	int
,	O
0	int
,	O
INHIBIT_HUNK_MERGE_OPTION	int
}	O
,	O
{	O
"initial-tab"	*(char)
,	O
0	int
,	O
0	int
,	O
'T'	O
}	O
,	O
{	O
"label"	*(char)
,	O
1	int
,	O
0	int
,	O
'L'	O
}	O
,	O
{	O
"left-column"	*(char)
,	O
0	int
,	O
0	int
,	O
LEFT_COLUMN_OPTION	int
}	O
,	O
{	O
"line-format"	*(char)
,	O
1	int
,	O
0	int
,	O
LINE_FORMAT_OPTION	int
}	O
,	O
{	O
"minimal"	*(char)
,	O
0	int
,	O
0	int
,	O
'd'	O
}	O
,	O
{	O
"new-file"	*(char)
,	O
0	int
,	O
0	int
,	O
'N'	O
}	O
,	O
{	O
"new-group-format"	*(char)
,	O
1	int
,	O
0	int
,	O
NEW_GROUP_FORMAT_OPTION	int
}	O
,	O
{	O
"new-line-format"	*(char)
,	O
1	int
,	O
0	int
,	O
NEW_LINE_FORMAT_OPTION	int
}	O
,	O
{	O
"no-ignore-file-name-case"	*(char)
,	O
0	int
,	O
0	int
,	O
NO_IGNORE_FILE_NAME_CASE_OPTION	int
}	O
,	O
{	O
"normal"	*(char)
,	O
0	int
,	O
0	int
,	O
NORMAL_OPTION	int
}	O
,	O
{	O
"old-group-format"	*(char)
,	O
1	int
,	O
0	int
,	O
OLD_GROUP_FORMAT_OPTION	int
}	O
,	O
{	O
"old-line-format"	*(char)
,	O
1	int
,	O
0	int
,	O
OLD_LINE_FORMAT_OPTION	int
}	O
,	O
{	O
"paginate"	*(char)
,	O
0	int
,	O
0	int
,	O
'l'	O
}	O
,	O
{	O
"rcs"	*(char)
,	O
0	int
,	O
0	int
,	O
'n'	O
}	O
,	O
{	O
"recursive"	*(char)
,	O
0	int
,	O
0	int
,	O
'r'	O
}	O
,	O
{	O
"report-identical-files"	*(char)
,	O
0	int
,	O
0	int
,	O
's'	O
}	O
,	O
{	O
"sdiff-merge-assist"	*(char)
,	O
0	int
,	O
0	int
,	O
SDIFF_MERGE_ASSIST_OPTION	int
}	O
,	O
{	O
"show-c-function"	*(char)
,	O
0	int
,	O
0	int
,	O
'p'	O
}	O
,	O
{	O
"show-function-line"	*(char)
,	O
1	int
,	O
0	int
,	O
'F'	O
}	O
,	O
{	O
"side-by-side"	*(char)
,	O
0	int
,	O
0	int
,	O
'y'	O
}	O
,	O
{	O
"speed-large-files"	*(char)
,	O
0	int
,	O
0	int
,	O
'H'	O
}	O
,	O
{	O
"starting-file"	*(char)
,	O
1	int
,	O
0	int
,	O
'S'	O
}	O
,	O
{	O
"strip-trailing-cr"	*(char)
,	O
0	int
,	O
0	int
,	O
STRIP_TRAILING_CR_OPTION	int
}	O
,	O
{	O
"suppress-blank-empty"	*(char)
,	O
0	int
,	O
0	int
,	O
SUPPRESS_BLANK_EMPTY_OPTION	int
}	O
,	O
{	O
"suppress-common-lines"	*(char)
,	O
0	int
,	O
0	int
,	O
SUPPRESS_COMMON_LINES_OPTION	int
}	O
,	O
{	O
"tabsize"	*(char)
,	O
1	int
,	O
0	int
,	O
TABSIZE_OPTION	int
}	O
,	O
{	O
"text"	*(char)
,	O
0	int
,	O
0	int
,	O
'a'	O
}	O
,	O
{	O
"to-file"	*(char)
,	O
1	int
,	O
0	int
,	O
TO_FILE_OPTION	int
}	O
,	O
{	O
"unchanged-group-format"	*(char)
,	O
1	int
,	O
0	int
,	O
UNCHANGED_GROUP_FORMAT_OPTION	int
}	O
,	O
{	O
"unchanged-line-format"	*(char)
,	O
1	int
,	O
0	int
,	O
UNCHANGED_LINE_FORMAT_OPTION	int
}	O
,	O
{	O
"unidirectional-new-file"	*(char)
,	O
0	int
,	O
0	int
,	O
'P'	O
}	O
,	O
{	O
"unified"	*(char)
,	O
2	int
,	O
0	int
,	O
'U'	O
}	O
,	O
{	O
"version"	*(char)
,	O
0	int
,	O
0	int
,	O
'v'	O
}	O
,	O
{	O
"width"	*(char)
,	O
1	int
,	O
0	int
,	O
'W'	O
}	O
,	O
{	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
}	O
}	O
;	O
static	O
char	O
*	O
option_list	(*(*(char)),int)->(*(char))
(	O
char	O
*	O
*	O
optionvec	*(*(char))
,	O
int	O
count	int
)	O
{	O
int	O
i	int
;	O
size_t	long
size	long
=	O
1	int
;	O
char	O
*	O
result	*(char)
;	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
)	O
size	long
+=	O
1	int
+	O
shell_quote_length	(*(char))->(long)
(	O
optionvec	*(*(char))
[	O
i	int
]	O
)	O
;	O
p	*(char)
=	O
result	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
size	long
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
count	int
;	O
i	int
++	O
)	O
{	O
*	O
p	*(char)
++	O
=	O
' '	O
;	O
p	*(char)
=	O
shell_quote_copy	(*(char),*(char))->(*(char))
(	O
p	*(char)
,	O
optionvec	*(*(char))
[	O
i	int
]	O
)	O
;	O
}	O
*	O
p	*(char)
=	O
'\0'	O
;	O
return	O
result	*(char)
;	O
}	O
static	O
int	O
exclude_options	()->(int)
(	O
void	O
)	O
{	O
return	O
EXCLUDE_WILDCARDS	O
|	O
(	O
ignore_file_name_case	bool
?	O
FNM_CASEFOLD	O
:	O
0	int
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
exit_status	int
=	O
EXIT_SUCCESS	int
;	O
int	O
c	int
;	O
int	O
i	int
;	O
int	O
prev	int
=	O
-	O
1	int
;	O
lin	long
ocontext	long
=	O
-	O
1	int
;	O
bool	bool
explicit_context	bool
=	O
false	int
;	O
size_t	long
width	long
=	O
0	int
;	O
bool	bool
show_c_function	bool
=	O
false	int
;	O
char	O
const	O
*	O
from_file	*(char)
=	O
NULL	O
;	O
char	O
const	O
*	O
to_file	*(char)
=	O
NULL	O
;	O
uintmax_t	long
numval	long
;	O
char	O
*	O
numend	*(char)
;	O
exit_failure	int
=	O
EXIT_TROUBLE	int
;	O
initialize_main	O
(	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
;	O
set_program_name	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	*(char)
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
c_stack_action	(*((int)->(void)))->(int)
(	O
0	int
)	O
;	O
function_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
.	O
buf	*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
&	O
function_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
ignore_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
.	O
buf	*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
=	O
&	O
ignore_regexp	struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
;	O
re_set_syntax	(long)->(long)
(	O
RE_SYNTAX_GREP	O
|	O
RE_NO_POSIX_BACKTRACKING	O
)	O
;	O
excluded	*(struct)
=	O
new_exclude	()->(*(struct))
(	O
)	O
;	O
while	O
(	O
(	O
c	int
=	O
getopt_long	(int,*(*(char)),*(char),*(struct(*(char),int,*(int),int)),*(int))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
shortopts	array(char)
,	O
longopts	array(struct(*(char),int,*(int),int))
,	O
NULL	O
)	O
)	O
!=	O
-	O
1	int
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
case	O
0	int
:	O
break	O
;	O
case	O
'0'	O
:	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
if	O
(	O
!	O
ISDIGIT	O
(	O
prev	int
)	O
)	O
ocontext	long
=	O
c	int
-	O
'0'	O
;	O
else	O
if	O
(	O
LIN_MAX	O
/	O
10	int
<	O
ocontext	long
||	O
(	O
(	O
ocontext	long
=	O
10	int
*	O
ocontext	long
+	O
c	int
-	O
'0'	O
)	O
<	O
0	int
)	O
)	O
ocontext	long
=	O
LIN_MAX	O
;	O
break	O
;	O
case	O
'a'	O
:	O
text	bool
=	O
true	int
;	O
break	O
;	O
case	O
'b'	O
:	O
if	O
(	O
ignore_white_space	enum(int,int,int,int,int,int)
<	O
IGNORE_SPACE_CHANGE	int
)	O
ignore_white_space	enum(int,int,int,int,int,int)
=	O
IGNORE_SPACE_CHANGE	int
;	O
break	O
;	O
case	O
'Z'	O
:	O
if	O
(	O
ignore_white_space	enum(int,int,int,int,int,int)
<	O
IGNORE_SPACE_CHANGE	int
)	O
ignore_white_space	enum(int,int,int,int,int,int)
|=	O
IGNORE_TRAILING_SPACE	int
;	O
break	O
;	O
case	O
'B'	O
:	O
ignore_blank_lines	bool
=	O
true	int
;	O
break	O
;	O
case	O
'C'	O
:	O
case	O
'U'	O
:	O
{	O
if	O
(	O
optarg	*(char)
)	O
{	O
numval	long
=	O
strtoumax	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
numend	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
numend	*(char)
)	O
try_help	(*(char),*(char))->(void)
(	O
"invalid context length `%s'"	*(char)
,	O
optarg	*(char)
)	O
;	O
if	O
(	O
LIN_MAX	O
<	O
numval	long
)	O
numval	long
=	O
LIN_MAX	O
;	O
}	O
else	O
numval	long
=	O
3	int
;	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
c	int
==	O
'U'	O
?	O
OUTPUT_UNIFIED	int
:	O
OUTPUT_CONTEXT	int
)	O
;	O
if	O
(	O
context	long
<	O
numval	long
)	O
context	long
=	O
numval	long
;	O
explicit_context	bool
=	O
true	int
;	O
}	O
break	O
;	O
case	O
'c'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_CONTEXT	int
)	O
;	O
if	O
(	O
context	long
<	O
3	int
)	O
context	long
=	O
3	int
;	O
break	O
;	O
case	O
'd'	O
:	O
minimal	bool
=	O
true	int
;	O
break	O
;	O
case	O
'D'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_IFDEF	int
)	O
;	O
{	O
static	O
char	O
const	O
C_ifdef_group_formats	array(char)
[	O
]	O
=	O
"%%=%c#ifndef %s\n%%<#endif /* ! %s */\n%c#ifdef %s\n%%>#endif /* %s */\n%c#ifndef %s\n%%<#else /* %s */\n%%>#endif /* %s */\n"	*(char)
;	O
char	O
*	O
b	struct(long,long)
=	O
xmalloc	(long)->(*(void))
(	O
sizeof	O
C_ifdef_group_formats	array(char)
+	O
7	int
*	O
strlen	(*(char))->(long)
(	O
optarg	*(char)
)	O
-	O
14	int
-	O
8	int
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
b	struct(long,long)
,	O
C_ifdef_group_formats	array(char)
,	O
0	int
,	O
optarg	*(char)
,	O
optarg	*(char)
,	O
0	int
,	O
optarg	*(char)
,	O
optarg	*(char)
,	O
0	int
,	O
optarg	*(char)
,	O
optarg	*(char)
,	O
optarg	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
group_format	array(*(char))
/	O
sizeof	O
group_format	array(*(char))
[	O
0	int
]	O
;	O
i	int
++	O
)	O
{	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
group_format	array(*(char))
[	O
i	int
]	O
,	O
b	struct(long,long)
,	O
"-D"	*(char)
)	O
;	O
b	struct(long,long)
+=	O
strlen	(*(char))->(long)
(	O
b	struct(long,long)
)	O
+	O
1	int
;	O
}	O
}	O
break	O
;	O
case	O
'e'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_ED	int
)	O
;	O
break	O
;	O
case	O
'E'	O
:	O
if	O
(	O
ignore_white_space	enum(int,int,int,int,int,int)
<	O
IGNORE_SPACE_CHANGE	int
)	O
ignore_white_space	enum(int,int,int,int,int,int)
|=	O
IGNORE_TAB_EXPANSION	int
;	O
break	O
;	O
case	O
'f'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_FORWARD_ED	int
)	O
;	O
break	O
;	O
case	O
'F'	O
:	O
add_regexp	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))),*(char))->(void)
(	O
&	O
function_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'h'	O
:	O
break	O
;	O
case	O
'H'	O
:	O
speed_large_files	bool
=	O
true	int
;	O
break	O
;	O
case	O
'i'	O
:	O
ignore_case	bool
=	O
true	int
;	O
break	O
;	O
case	O
'I'	O
:	O
add_regexp	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))),*(char))->(void)
(	O
&	O
ignore_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
,	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
!	O
pr_program	array(char)
[	O
0	int
]	O
)	O
try_help	(*(char),*(char))->(void)
(	O
"pagination not supported on this host"	*(char)
,	O
NULL	O
)	O
;	O
paginate	bool
=	O
true	int
;	O
signal	(int,*((int)->(void)))->(*((int)->(void)))
(	O
SIGCHLD	int
,	O
SIG_DFL	O
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
if	O
(	O
!	O
file_label	array(*(char))
[	O
0	int
]	O
)	O
file_label	array(*(char))
[	O
0	int
]	O
=	O
optarg	*(char)
;	O
else	O
if	O
(	O
!	O
file_label	array(*(char))
[	O
1	int
]	O
)	O
file_label	array(*(char))
[	O
1	int
]	O
=	O
optarg	*(char)
;	O
else	O
fatal	(*(char))->(void)
(	O
"too many file label options"	*(char)
)	O
;	O
break	O
;	O
case	O
'n'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_RCS	int
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
new_file	bool
=	O
true	int
;	O
break	O
;	O
case	O
'p'	O
:	O
show_c_function	bool
=	O
true	int
;	O
add_regexp	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))),*(char))->(void)
(	O
&	O
function_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
,	O
"^[[:alpha:]$_]"	*(char)
)	O
;	O
break	O
;	O
case	O
'P'	O
:	O
unidirectional_new_file	bool
=	O
true	int
;	O
break	O
;	O
case	O
'q'	O
:	O
brief	bool
=	O
true	int
;	O
break	O
;	O
case	O
'r'	O
:	O
recursive	bool
=	O
true	int
;	O
break	O
;	O
case	O
's'	O
:	O
report_identical_files	bool
=	O
true	int
;	O
break	O
;	O
case	O
'S'	O
:	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
starting_file	*(char)
,	O
optarg	*(char)
,	O
"-S"	*(char)
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
expand_tabs	bool
=	O
true	int
;	O
break	O
;	O
case	O
'T'	O
:	O
initial_tab	bool
=	O
true	int
;	O
break	O
;	O
case	O
'u'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_UNIFIED	int
)	O
;	O
if	O
(	O
context	long
<	O
3	int
)	O
context	long
=	O
3	int
;	O
break	O
;	O
case	O
'v'	O
:	O
version_etc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char),*(char),*(char))->(void)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
PROGRAM_NAME	*(char)
,	O
PACKAGE_NAME	*(char)
,	O
Version	*(char)
,	O
AUTHORS	O
,	O
(	O
char	O
*	O
)	O
NULL	O
)	O
;	O
check_stdout	()->(void)
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
'w'	O
:	O
ignore_white_space	enum(int,int,int,int,int,int)
=	O
IGNORE_ALL_SPACE	int
;	O
break	O
;	O
case	O
'x'	O
:	O
add_exclude	(*(struct),*(char),int)->(void)
(	O
excluded	*(struct)
,	O
optarg	*(char)
,	O
exclude_options	()->(int)
(	O
)	O
)	O
;	O
break	O
;	O
case	O
'X'	O
:	O
if	O
(	O
add_exclude_file	(*((*(struct),*(char),int)->(void)),*(struct),*(char),int,char)->(int)
(	O
add_exclude	(*(struct),*(char),int)->(void)
,	O
excluded	*(struct)
,	O
optarg	*(char)
,	O
exclude_options	()->(int)
(	O
)	O
,	O
'\n'	O
)	O
)	O
pfatal_with_name	(*(char))->(void)
(	O
optarg	*(char)
)	O
;	O
break	O
;	O
case	O
'y'	O
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_SDIFF	int
)	O
;	O
break	O
;	O
case	O
'W'	O
:	O
numval	long
=	O
strtoumax	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
numend	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
!	O
(	O
0	int
<	O
numval	long
&&	O
numval	long
<=	O
SIZE_MAX	O
)	O
||	O
*	O
numend	*(char)
)	O
try_help	(*(char),*(char))->(void)
(	O
"invalid width `%s'"	*(char)
,	O
optarg	*(char)
)	O
;	O
if	O
(	O
width	long
!=	O
numval	long
)	O
{	O
if	O
(	O
width	long
)	O
fatal	(*(char))->(void)
(	O
"conflicting width options"	*(char)
)	O
;	O
width	long
=	O
numval	long
;	O
}	O
break	O
;	O
case	O
BINARY_OPTION	int
:	O
break	O
;	O
case	O
FROM_FILE_OPTION	int
:	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
from_file	*(char)
,	O
optarg	*(char)
,	O
"--from-file"	*(char)
)	O
;	O
break	O
;	O
case	O
HELP_OPTION	int
:	O
usage	()->(void)
(	O
)	O
;	O
check_stdout	()->(void)
(	O
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
case	O
HORIZON_LINES_OPTION	int
:	O
numval	long
=	O
strtoumax	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
numend	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
numend	*(char)
)	O
try_help	(*(char),*(char))->(void)
(	O
"invalid horizon length `%s'"	*(char)
,	O
optarg	*(char)
)	O
;	O
horizon_lines	long
=	O
MAX	O
(	O
horizon_lines	long
,	O
MIN	O
(	O
numval	long
,	O
LIN_MAX	O
)	O
)	O
;	O
break	O
;	O
case	O
IGNORE_FILE_NAME_CASE_OPTION	int
:	O
ignore_file_name_case	bool
=	O
true	int
;	O
break	O
;	O
case	O
INHIBIT_HUNK_MERGE_OPTION	int
:	O
break	O
;	O
case	O
LEFT_COLUMN_OPTION	int
:	O
left_column	bool
=	O
true	int
;	O
break	O
;	O
case	O
LINE_FORMAT_OPTION	int
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_IFDEF	int
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
line_format	array(*(char))
/	O
sizeof	O
line_format	array(*(char))
[	O
0	int
]	O
;	O
i	int
++	O
)	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
line_format	array(*(char))
[	O
i	int
]	O
,	O
optarg	*(char)
,	O
"--line-format"	*(char)
)	O
;	O
break	O
;	O
case	O
NO_IGNORE_FILE_NAME_CASE_OPTION	int
:	O
ignore_file_name_case	bool
=	O
false	int
;	O
break	O
;	O
case	O
NORMAL_OPTION	int
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_NORMAL	int
)	O
;	O
break	O
;	O
case	O
SDIFF_MERGE_ASSIST_OPTION	int
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_SDIFF	int
)	O
;	O
sdiff_merge_assist	bool
=	O
true	int
;	O
break	O
;	O
case	O
STRIP_TRAILING_CR_OPTION	int
:	O
strip_trailing_cr	bool
=	O
true	int
;	O
break	O
;	O
case	O
SUPPRESS_BLANK_EMPTY_OPTION	int
:	O
suppress_blank_empty	bool
=	O
true	int
;	O
break	O
;	O
case	O
SUPPRESS_COMMON_LINES_OPTION	int
:	O
suppress_common_lines	bool
=	O
true	int
;	O
break	O
;	O
case	O
TABSIZE_OPTION	int
:	O
numval	long
=	O
strtoumax	(*(char),*(*(char)),int)->(long)
(	O
optarg	*(char)
,	O
&	O
numend	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
!	O
(	O
0	int
<	O
numval	long
&&	O
numval	long
<=	O
SIZE_MAX	O
)	O
||	O
*	O
numend	*(char)
)	O
try_help	(*(char),*(char))->(void)
(	O
"invalid tabsize `%s'"	*(char)
,	O
optarg	*(char)
)	O
;	O
if	O
(	O
tabsize	long
!=	O
numval	long
)	O
{	O
if	O
(	O
tabsize	long
)	O
fatal	(*(char))->(void)
(	O
"conflicting tabsize options"	*(char)
)	O
;	O
tabsize	long
=	O
numval	long
;	O
}	O
break	O
;	O
case	O
TO_FILE_OPTION	int
:	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
to_file	*(char)
,	O
optarg	*(char)
,	O
"--to-file"	*(char)
)	O
;	O
break	O
;	O
case	O
UNCHANGED_LINE_FORMAT_OPTION	int
:	O
case	O
OLD_LINE_FORMAT_OPTION	int
:	O
case	O
NEW_LINE_FORMAT_OPTION	int
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_IFDEF	int
)	O
;	O
c	int
-=	O
UNCHANGED_LINE_FORMAT_OPTION	int
;	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
line_format	array(*(char))
[	O
c	int
]	O
,	O
optarg	*(char)
,	O
line_format_option	array(array(char))
[	O
c	int
]	O
)	O
;	O
break	O
;	O
case	O
UNCHANGED_GROUP_FORMAT_OPTION	int
:	O
case	O
OLD_GROUP_FORMAT_OPTION	int
:	O
case	O
NEW_GROUP_FORMAT_OPTION	int
:	O
case	O
CHANGED_GROUP_FORMAT_OPTION	int
:	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_IFDEF	int
)	O
;	O
c	int
-=	O
UNCHANGED_GROUP_FORMAT_OPTION	int
;	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
&	O
group_format	array(*(char))
[	O
c	int
]	O
,	O
optarg	*(char)
,	O
group_format_option	array(array(char))
[	O
c	int
]	O
)	O
;	O
break	O
;	O
default	O
:	O
try_help	(*(char),*(char))->(void)
(	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
prev	int
=	O
c	int
;	O
}	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_UNSPECIFIED	int
)	O
{	O
if	O
(	O
show_c_function	bool
)	O
{	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_CONTEXT	int
)	O
;	O
if	O
(	O
ocontext	long
<	O
0	int
)	O
context	long
=	O
3	int
;	O
}	O
else	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
OUTPUT_NORMAL	int
)	O
;	O
}	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
!=	O
OUTPUT_CONTEXT	int
||	O
hard_locale	(int)->(bool)
(	O
LC_TIME	O
)	O
)	O
{	O
time_format	*(char)
=	O
"%Y-%m-%d %H:%M:%S.%N %z"	*(char)
;	O
}	O
else	O
{	O
time_format	*(char)
=	O
"%a %b %e %T %Y"	*(char)
;	O
}	O
if	O
(	O
0	int
<=	O
ocontext	long
&&	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_CONTEXT	int
||	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_UNIFIED	int
)	O
&&	O
(	O
context	long
<	O
ocontext	long
||	O
(	O
ocontext	long
<	O
context	long
&&	O
!	O
explicit_context	bool
)	O
)	O
)	O
context	long
=	O
ocontext	long
;	O
if	O
(	O
!	O
tabsize	long
)	O
tabsize	long
=	O
8	int
;	O
if	O
(	O
!	O
width	long
)	O
width	long
=	O
130	int
;	O
{	O
intmax_t	long
t	struct(long,long)
=	O
expand_tabs	bool
?	O
1	int
:	O
tabsize	long
;	O
intmax_t	long
w	long
=	O
width	long
;	O
intmax_t	long
off	long
=	O
(	O
w	long
+	O
t	struct(long,long)
+	O
GUTTER_WIDTH_MINIMUM	int
)	O
/	O
(	O
2	int
*	O
t	struct(long,long)
)	O
*	O
t	struct(long,long)
;	O
sdiff_half_width	long
=	O
MAX	O
(	O
0	int
,	O
MIN	O
(	O
off	long
-	O
GUTTER_WIDTH_MINIMUM	int
,	O
w	long
-	O
off	long
)	O
)	O
,	O
sdiff_column2_offset	long
=	O
sdiff_half_width	long
?	O
off	long
:	O
w	long
;	O
}	O
if	O
(	O
horizon_lines	long
<	O
context	long
)	O
horizon_lines	long
=	O
context	long
;	O
summarize_regexp_list	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))))->(void)
(	O
&	O
function_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
)	O
;	O
summarize_regexp_list	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))))->(void)
(	O
&	O
ignore_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
)	O
;	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_IFDEF	int
)	O
{	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
sizeof	O
line_format	array(*(char))
/	O
sizeof	O
line_format	array(*(char))
[	O
0	int
]	O
;	O
i	int
++	O
)	O
if	O
(	O
!	O
line_format	array(*(char))
[	O
i	int
]	O
)	O
line_format	array(*(char))
[	O
i	int
]	O
=	O
"%l\n"	*(char)
;	O
if	O
(	O
!	O
group_format	array(*(char))
[	O
OLD	int
]	O
)	O
group_format	array(*(char))
[	O
OLD	int
]	O
=	O
group_format	array(*(char))
[	O
CHANGED	int
]	O
?	O
group_format	array(*(char))
[	O
CHANGED	int
]	O
:	O
"%<"	*(char)
;	O
if	O
(	O
!	O
group_format	array(*(char))
[	O
NEW	int
]	O
)	O
group_format	array(*(char))
[	O
NEW	int
]	O
=	O
group_format	array(*(char))
[	O
CHANGED	int
]	O
?	O
group_format	array(*(char))
[	O
CHANGED	int
]	O
:	O
"%>"	*(char)
;	O
if	O
(	O
!	O
group_format	array(*(char))
[	O
UNCHANGED	int
]	O
)	O
group_format	array(*(char))
[	O
UNCHANGED	int
]	O
=	O
"%="	*(char)
;	O
if	O
(	O
!	O
group_format	array(*(char))
[	O
CHANGED	int
]	O
)	O
group_format	array(*(char))
[	O
CHANGED	int
]	O
=	O
concat	(*(char),*(char),*(char))->(*(char))
(	O
group_format	array(*(char))
[	O
OLD	int
]	O
,	O
group_format	array(*(char))
[	O
NEW	int
]	O
,	O
""	*(char)
)	O
;	O
}	O
no_diff_means_no_output	bool
=	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_IFDEF	int
?	O
(	O
!	O
*	O
group_format	array(*(char))
[	O
UNCHANGED	int
]	O
||	O
(	O
STREQ	O
(	O
group_format	array(*(char))
[	O
UNCHANGED	int
]	O
,	O
"%="	*(char)
)	O
&&	O
!	O
*	O
line_format	array(*(char))
[	O
UNCHANGED	int
]	O
)	O
)	O
:	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
!=	O
OUTPUT_SDIFF	int
)	O
|	O
suppress_common_lines	bool
)	O
;	O
files_can_be_treated_as_binary	bool
=	O
(	O
brief	bool
&	O
binary	int
&	O
~	O
(	O
ignore_blank_lines	bool
|	O
ignore_case	bool
|	O
strip_trailing_cr	bool
|	O
(	O
ignore_regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
.	O
regexps	*(char)
||	O
ignore_white_space	enum(int,int,int,int,int,int)
)	O
)	O
)	O
;	O
switch_string	*(char)
=	O
option_list	(*(*(char)),int)->(*(char))
(	O
argv	*(*(char))
+	O
1	int
,	O
optind	int
-	O
1	int
)	O
;	O
if	O
(	O
from_file	*(char)
)	O
{	O
if	O
(	O
to_file	*(char)
)	O
fatal	(*(char))->(void)
(	O
"--from-file and --to-file both specified"	*(char)
)	O
;	O
else	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
int	O
status	int
=	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
(	O
NULL	O
,	O
from_file	*(char)
,	O
argv	*(*(char))
[	O
optind	int
]	O
)	O
;	O
if	O
(	O
exit_status	int
<	O
status	int
)	O
exit_status	int
=	O
status	int
;	O
}	O
}	O
else	O
{	O
if	O
(	O
to_file	*(char)
)	O
for	O
(	O
;	O
optind	int
<	O
argc	int
;	O
optind	int
++	O
)	O
{	O
int	O
status	int
=	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
(	O
NULL	O
,	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
to_file	*(char)
)	O
;	O
if	O
(	O
exit_status	int
<	O
status	int
)	O
exit_status	int
=	O
status	int
;	O
}	O
else	O
{	O
if	O
(	O
argc	int
-	O
optind	int
!=	O
2	int
)	O
{	O
if	O
(	O
argc	int
-	O
optind	int
<	O
2	int
)	O
try_help	(*(char),*(char))->(void)
(	O
"missing operand after `%s'"	*(char)
,	O
argv	*(*(char))
[	O
argc	int
-	O
1	int
]	O
)	O
;	O
else	O
try_help	(*(char),*(char))->(void)
(	O
"extra operand `%s'"	*(char)
,	O
argv	*(*(char))
[	O
optind	int
+	O
2	int
]	O
)	O
;	O
}	O
exit_status	int
=	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
(	O
NULL	O
,	O
argv	*(*(char))
[	O
optind	int
]	O
,	O
argv	*(*(char))
[	O
optind	int
+	O
1	int
]	O
)	O
;	O
}	O
}	O
print_message_queue	()->(void)
(	O
)	O
;	O
check_stdout	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
exit_status	int
)	O
;	O
return	O
exit_status	int
;	O
}	O
static	O
void	O
add_regexp	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))),*(char))->(void)
(	O
struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
*	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
,	O
char	O
const	O
*	O
pattern	*(char)
)	O
{	O
size_t	long
patlen	long
=	O
strlen	(*(char))->(long)
(	O
pattern	*(char)
)	O
;	O
char	O
const	O
*	O
m	*(char)
=	O
re_compile_pattern	(*(char),long,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(*(char))
(	O
pattern	*(char)
,	O
patlen	long
,	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
buf	*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
;	O
if	O
(	O
m	*(char)
!=	O
0	int
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
"%s: %s"	*(char)
,	O
pattern	*(char)
,	O
m	*(char)
)	O
;	O
else	O
{	O
char	O
*	O
regexps	*(char)
=	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
regexps	*(char)
;	O
size_t	long
len	long
=	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
len	long
;	O
bool	bool
multiple_regexps	bool
=	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
multiple_regexps	bool
=	O
regexps	*(char)
!=	O
0	int
;	O
size_t	long
newlen	long
=	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
len	long
=	O
len	long
+	O
2	int
*	O
multiple_regexps	bool
+	O
patlen	long
;	O
size_t	long
size	long
=	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
size	long
;	O
if	O
(	O
size	long
<=	O
newlen	long
)	O
{	O
if	O
(	O
!	O
size	long
)	O
size	long
=	O
1	int
;	O
do	O
size	long
*=	O
2	int
;	O
while	O
(	O
size	long
<=	O
newlen	long
)	O
;	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
size	long
=	O
size	long
;	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
regexps	*(char)
=	O
regexps	*(char)
=	O
xrealloc	(*(void),long)->(*(void))
(	O
regexps	*(char)
,	O
size	long
)	O
;	O
}	O
if	O
(	O
multiple_regexps	bool
)	O
{	O
regexps	*(char)
[	O
len	long
++	O
]	O
=	O
'\\'	O
;	O
regexps	*(char)
[	O
len	long
++	O
]	O
=	O
'|'	O
;	O
}	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
regexps	*(char)
+	O
len	long
,	O
pattern	*(char)
,	O
patlen	long
+	O
1	int
)	O
;	O
}	O
}	O
static	O
void	O
summarize_regexp_list	(*(struct(*(char),long,long,bool,*(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int)))))->(void)
(	O
struct	O
regexp_list	struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))
*	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
)	O
{	O
if	O
(	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
regexps	*(char)
)	O
{	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
buf	*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
->	O
fastmap	*(char)
=	O
xmalloc	(long)->(*(void))
(	O
1	int
<<	O
CHAR_BIT	O
)	O
;	O
if	O
(	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
multiple_regexps	bool
)	O
{	O
char	O
const	O
*	O
m	*(char)
=	O
re_compile_pattern	(*(char),long,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(*(char))
(	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
regexps	*(char)
,	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
len	long
,	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
buf	*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))
)	O
;	O
if	O
(	O
m	*(char)
)	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
"%s: %s"	*(char)
,	O
reglist	*(struct(*(char),long,long,bool,*(struct(*(char),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int))))
->	O
regexps	*(char)
,	O
m	*(char)
)	O
;	O
}	O
}	O
}	O
static	O
void	O
try_help	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
reason_msgid	*(char)
,	O
char	O
const	O
*	O
operand	*(char)
)	O
{	O
if	O
(	O
reason_msgid	*(char)
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
reason_msgid	*(char)
)	O
,	O
operand	*(char)
)	O
;	O
error	(int,int,*(char))->(void)
(	O
EXIT_TROUBLE	int
,	O
0	int
,	O
_	O
(	O
"Try `%s --help' for more information."	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
check_stdout	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
fatal	(*(char))->(void)
(	O
"write failed"	*(char)
)	O
;	O
else	O
if	O
(	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
_	O
(	O
"standard output"	*(char)
)	O
)	O
;	O
}	O
static	O
char	O
const	O
*	O
const	O
option_help_msgid	array(*(char))
[	O
]	O
=	O
{	O
N_	O
(	O
"    --normal                  output a normal diff (the default)"	*(char)
)	O
,	O
N_	O
(	O
"-q, --brief                   report only when files differ"	*(char)
)	O
,	O
N_	O
(	O
"-s, --report-identical-files  report when two files are the same"	*(char)
)	O
,	O
N_	O
(	O
"-c, -C NUM, --context[=NUM]   output NUM (default 3) lines of copied context"	*(char)
)	O
,	O
N_	O
(	O
"-u, -U NUM, --unified[=NUM]   output NUM (default 3) lines of unified context"	*(char)
)	O
,	O
N_	O
(	O
"-e, --ed                      output an ed script"	*(char)
)	O
,	O
N_	O
(	O
"-n, --rcs                     output an RCS format diff"	*(char)
)	O
,	O
N_	O
(	O
"-y, --side-by-side            output in two columns"	*(char)
)	O
,	O
N_	O
(	O
"-W, --width=NUM               output at most NUM (default 130) print columns"	*(char)
)	O
,	O
N_	O
(	O
"    --left-column             output only the left column of common lines"	*(char)
)	O
,	O
N_	O
(	O
"    --suppress-common-lines   do not output common lines"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-p, --show-c-function         show which C function each change is in"	*(char)
)	O
,	O
N_	O
(	O
"-F, --show-function-line=RE   show the most recent line matching RE"	*(char)
)	O
,	O
N_	O
(	O
"    --label LABEL             use LABEL instead of file name\n"	*(char)
"                                (can be repeated)"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-t, --expand-tabs             expand tabs to spaces in output"	*(char)
)	O
,	O
N_	O
(	O
"-T, --initial-tab             make tabs line up by prepending a tab"	*(char)
)	O
,	O
N_	O
(	O
"    --tabsize=NUM             tab stops every NUM (default 8) print columns"	*(char)
)	O
,	O
N_	O
(	O
"    --suppress-blank-empty    suppress space or tab before empty output lines"	*(char)
)	O
,	O
N_	O
(	O
"-l, --paginate                pass output through `pr' to paginate it"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-r, --recursive                 recursively compare any subdirectories found"	*(char)
)	O
,	O
N_	O
(	O
"-N, --new-file                  treat absent files as empty"	*(char)
)	O
,	O
N_	O
(	O
"    --unidirectional-new-file   treat absent first files as empty"	*(char)
)	O
,	O
N_	O
(	O
"    --ignore-file-name-case     ignore case when comparing file names"	*(char)
)	O
,	O
N_	O
(	O
"    --no-ignore-file-name-case  consider case when comparing file names"	*(char)
)	O
,	O
N_	O
(	O
"-x, --exclude=PAT               exclude files that match PAT"	*(char)
)	O
,	O
N_	O
(	O
"-X, --exclude-from=FILE         exclude files that match any pattern in FILE"	*(char)
)	O
,	O
N_	O
(	O
"-S, --starting-file=FILE        start with FILE when comparing directories"	*(char)
)	O
,	O
N_	O
(	O
"    --from-file=FILE1           compare FILE1 to all operands;\n"	*(char)
"                                  FILE1 can be a directory"	*(char)
)	O
,	O
N_	O
(	O
"    --to-file=FILE2             compare all operands to FILE2;\n"	*(char)
"                                  FILE2 can be a directory"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-i, --ignore-case               ignore case differences in file contents"	*(char)
)	O
,	O
N_	O
(	O
"-E, --ignore-tab-expansion      ignore changes due to tab expansion"	*(char)
)	O
,	O
N_	O
(	O
"-Z, --ignore-trailing-space     ignore white space at line end"	*(char)
)	O
,	O
N_	O
(	O
"-b, --ignore-space-change       ignore changes in the amount of white space"	*(char)
)	O
,	O
N_	O
(	O
"-w, --ignore-all-space          ignore all white space"	*(char)
)	O
,	O
N_	O
(	O
"-B, --ignore-blank-lines        ignore changes whose lines are all blank"	*(char)
)	O
,	O
N_	O
(	O
"-I, --ignore-matching-lines=RE  ignore changes whose lines all match RE"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-a, --text                      treat all files as text"	*(char)
)	O
,	O
N_	O
(	O
"    --strip-trailing-cr         strip trailing carriage return on input"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-D, --ifdef=NAME                output merged file with `#ifdef NAME' diffs"	*(char)
)	O
,	O
N_	O
(	O
"    --GTYPE-group-format=GFMT   format GTYPE input groups with GFMT"	*(char)
)	O
,	O
N_	O
(	O
"    --line-format=LFMT          format all input lines with LFMT"	*(char)
)	O
,	O
N_	O
(	O
"    --LTYPE-line-format=LFMT    format LTYPE input lines with LFMT"	*(char)
)	O
,	O
N_	O
(	O
"  These format options provide fine-grained control over the output\n"	*(char)
"    of diff, generalizing -D/--ifdef."	*(char)
)	O
,	O
N_	O
(	O
"  LTYPE is `old', `new', or `unchanged'.  GTYPE is LTYPE or `changed'."	*(char)
)	O
,	O
N_	O
(	O
"  GFMT (only) may contain:\n    %<  lines from FILE1\n    %>  lines from FILE2\n    %=  lines common to FILE1 and FILE2\n    %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER\n      LETTERs are as follows for new group, lower case for old group:\n        F  first line number\n        L  last line number\n        N  number of lines = L-F+1\n        E  F-1\n        M  L+1\n    %(A=B?T:E)  if A equals B then T else E"	*(char)
)	O
,	O
N_	O
(	O
"  LFMT (only) may contain:\n    %L  contents of line\n    %l  contents of line, excluding any trailing newline\n    %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number"	*(char)
)	O
,	O
N_	O
(	O
"  Both GFMT and LFMT may contain:\n    %%  %\n    %c'C'  the single character C\n    %c'\\OOO'  the character with octal code OOO\n    C    the character C (other characters represent themselves)"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"-d, --minimal            try hard to find a smaller set of changes"	*(char)
)	O
,	O
N_	O
(	O
"    --horizon-lines=NUM  keep NUM lines of the common prefix and suffix"	*(char)
)	O
,	O
N_	O
(	O
"    --speed-large-files  assume large files and many scattered small changes"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"    --help               display this help and exit"	*(char)
)	O
,	O
N_	O
(	O
"-v, --version            output version information and exit"	*(char)
)	O
,	O
""	*(char)
,	O
N_	O
(	O
"FILES are `FILE1 FILE2' or `DIR1 DIR2' or `DIR FILE...' or `FILE... DIR'."	*(char)
)	O
,	O
N_	O
(	O
"If --from-file or --to-file is given, there are no restrictions on FILE(s)."	*(char)
)	O
,	O
N_	O
(	O
"If a FILE is `-', read standard input."	*(char)
)	O
,	O
N_	O
(	O
"Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."	*(char)
)	O
,	O
0	int
}	O
;	O
static	O
void	O
usage	()->(void)
(	O
void	O
)	O
{	O
char	O
const	O
*	O
const	O
*	O
p	*(char)
;	O
printf	(*(char))->(int)
(	O
_	O
(	O
"Usage: %s [OPTION]... FILES\n"	*(char)
)	O
,	O
program_name	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n\n"	*(char)
,	O
_	O
(	O
"Compare FILES line by line."	*(char)
)	O
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
_	O
(	O
"Mandatory arguments to long options are mandatory for short options too.\n"	*(char)
)	O
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
for	O
(	O
p	*(char)
=	O
option_help_msgid	array(*(char))
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
{	O
if	O
(	O
!	O
*	O
*	O
p	*(char)
)	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
else	O
{	O
char	O
const	O
*	O
msg	*(char)
=	O
_	O
(	O
*	O
p	*(char)
)	O
;	O
char	O
const	O
*	O
nl	*(char)
;	O
while	O
(	O
(	O
nl	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
msg	*(char)
,	O
'\n'	O
)	O
)	O
)	O
{	O
int	O
msglen	int
=	O
nl	*(char)
+	O
1	int
-	O
msg	*(char)
;	O
printf	(*(char))->(int)
(	O
"  %.*s"	*(char)
,	O
msglen	int
,	O
msg	*(char)
)	O
;	O
msg	*(char)
=	O
nl	*(char)
+	O
1	int
;	O
}	O
printf	(*(char))->(int)
(	O
"  %s\n"	*(char)
+	O
2	int
*	O
(	O
*	O
msg	*(char)
!=	O
' '	O
&&	O
*	O
msg	*(char)
!=	O
'-'	O
)	O
,	O
msg	*(char)
)	O
;	O
}	O
}	O
emit_bug_reporting_address	()->(void)
(	O
)	O
;	O
}	O
static	O
void	O
specify_value	(*(*(char)),*(char),*(char))->(void)
(	O
char	O
const	O
*	O
*	O
var	*(*(char))
,	O
char	O
const	O
*	O
value	*(char)
,	O
char	O
const	O
*	O
option	struct(*(char),int,*(int),int)
)	O
{	O
if	O
(	O
*	O
var	*(*(char))
&&	O
!	O
STREQ	O
(	O
*	O
var	*(*(char))
,	O
value	*(char)
)	O
)	O
{	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"conflicting %s option value `%s'"	*(char)
)	O
,	O
option	struct(*(char),int,*(int),int)
,	O
value	*(char)
)	O
;	O
try_help	(*(char),*(char))->(void)
(	O
NULL	O
,	O
NULL	O
)	O
;	O
}	O
*	O
var	*(*(char))
=	O
value	*(char)
;	O
}	O
static	O
void	O
specify_style	(enum(int,int,int,int,int,int,int,int,int))->(void)
(	O
enum	O
output_style	enum(int,int,int,int,int,int,int,int,int)
style	enum(int,int,int,int,int,int,int,int,int)
)	O
{	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
!=	O
style	enum(int,int,int,int,int,int,int,int,int)
)	O
{	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
!=	O
OUTPUT_UNSPECIFIED	int
)	O
try_help	(*(char),*(char))->(void)
(	O
"conflicting output style options"	*(char)
,	O
NULL	O
)	O
;	O
output_style	enum(int,int,int,int,int,int,int,int,int)
=	O
style	enum(int,int,int,int,int,int,int,int,int)
;	O
}	O
}	O
static	O
void	O
set_mtime_to_now	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(void)
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
)	O
{	O
gettime	(*(struct(long,long)))->(void)
(	O
&	O
STAT_TIMESPEC	O
(	O
st	*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)))
,	O
st_mtim	struct(long,long)
)	O
)	O
;	O
}	O
static	O
int	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
(	O
struct	O
comparison	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`))))))
const	O
*	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
,	O
char	O
const	O
*	O
name0	*(char)
,	O
char	O
const	O
*	O
name1	*(char)
)	O
{	O
struct	O
comparison	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`))))))
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
;	O
register	O
int	O
f	*(char)
;	O
int	O
status	int
=	O
EXIT_SUCCESS	int
;	O
bool	bool
same_files	bool
;	O
char	O
*	O
free0	*(char)
;	O
char	O
*	O
free1	*(char)
;	O
if	O
(	O
!	O
(	O
(	O
name0	*(char)
&&	O
name1	*(char)
)	O
||	O
(	O
unidirectional_new_file	bool
&&	O
name1	*(char)
)	O
||	O
new_file	bool
)	O
)	O
{	O
char	O
const	O
*	O
name	*(char)
=	O
name0	*(char)
?	O
name0	*(char)
:	O
name1	*(char)
;	O
char	O
const	O
*	O
dir	*(char)
=	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
!	O
name0	*(char)
]	O
.	O
name	*(char)
;	O
message	(*(char),*(char),*(char))->(void)
(	O
"Only in %s: %s\n"	*(char)
,	O
dir	*(char)
,	O
name	*(char)
)	O
;	O
return	O
EXIT_FAILURE	int
;	O
}	O
memset	(*(void),int,long)->(*(void))
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
,	O
0	int
,	O
sizeof	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
)	O
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
=	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
=	O
name0	*(char)
?	O
UNOPENED	O
:	O
NONEXISTENT	O
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
=	O
name1	*(char)
?	O
UNOPENED	O
:	O
NONEXISTENT	O
;	O
if	O
(	O
!	O
name0	*(char)
)	O
name0	*(char)
=	O
name1	*(char)
;	O
if	O
(	O
!	O
name1	*(char)
)	O
name1	*(char)
=	O
name0	*(char)
;	O
if	O
(	O
!	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
)	O
{	O
free0	*(char)
=	O
NULL	O
;	O
free1	*(char)
=	O
NULL	O
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
=	O
name0	*(char)
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
=	O
name1	*(char)
;	O
}	O
else	O
{	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
=	O
free0	*(char)
=	O
file_name_concat	(*(char),*(char),*(*(char)))->(*(char))
(	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
name0	*(char)
,	O
NULL	O
)	O
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
=	O
free1	*(char)
=	O
file_name_concat	(*(char),*(char),*(*(char)))->(*(char))
(	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
,	O
name1	*(char)
,	O
NULL	O
)	O
;	O
}	O
for	O
(	O
f	*(char)
=	O
0	int
;	O
f	*(char)
<	O
2	int
;	O
f	*(char)
++	O
)	O
{	O
if	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
!=	O
NONEXISTENT	O
)	O
{	O
if	O
(	O
f	*(char)
&&	O
file_name_cmp	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
name	*(char)
,	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
}	O
else	O
if	O
(	O
STREQ	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
name	*(char)
,	O
"-"	*(char)
)	O
)	O
{	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
=	O
STDIN_FILENO	int
;	O
if	O
(	O
O_BINARY	int
&&	O
binary	int
&&	O
!	O
isatty	(int)->(int)
(	O
STDIN_FILENO	int
)	O
)	O
xfreopen	(*(char),*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(void)
(	O
NULL	O
,	O
"rb"	*(char)
,	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
STDIN_FILENO	int
,	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
)	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
=	O
ERRNO_ENCODE	O
(	O
errno	O
)	O
;	O
else	O
{	O
if	O
(	O
S_ISREG	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
off_t	long
pos	long
=	O
lseek	(int,long,int)->(long)
(	O
STDIN_FILENO	int
,	O
0	int
,	O
SEEK_CUR	int
)	O
;	O
if	O
(	O
pos	long
<	O
0	int
)	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
=	O
ERRNO_ENCODE	O
(	O
errno	O
)	O
;	O
else	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
=	O
MAX	O
(	O
0	int
,	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
-	O
pos	long
)	O
;	O
}	O
set_mtime_to_now	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(void)
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
}	O
}	O
else	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
name	*(char)
,	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
)	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
=	O
ERRNO_ENCODE	O
(	O
errno	O
)	O
;	O
}	O
}	O
for	O
(	O
f	*(char)
=	O
0	int
;	O
f	*(char)
<	O
2	int
;	O
f	*(char)
++	O
)	O
if	O
(	O
(	O
new_file	bool
||	O
(	O
f	*(char)
==	O
0	int
&&	O
unidirectional_new_file	bool
)	O
)	O
&&	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
==	O
UNOPENED	O
?	O
(	O
S_ISREG	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
&&	O
!	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
(	O
S_IRWXU	O
|	O
S_IRWXG	O
|	O
S_IRWXO	O
)	O
)	O
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
==	O
0	int
)	O
:	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
==	O
ERRNO_ENCODE	O
(	O
ENOENT	int
)	O
&&	O
!	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
-	O
f	*(char)
]	O
.	O
desc	int
==	O
UNOPENED	O
)	O
)	O
)	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
=	O
NONEXISTENT	O
;	O
for	O
(	O
f	*(char)
=	O
0	int
;	O
f	*(char)
<	O
2	int
;	O
f	*(char)
++	O
)	O
if	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
==	O
NONEXISTENT	O
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
0	int
,	O
sizeof	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
-	O
f	*(char)
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
;	O
}	O
for	O
(	O
f	*(char)
=	O
0	int
;	O
f	*(char)
<	O
2	int
;	O
f	*(char)
++	O
)	O
{	O
int	O
e	int
=	O
ERRNO_DECODE	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
desc	int
)	O
;	O
if	O
(	O
0	int
<=	O
e	int
)	O
{	O
errno	O
=	O
e	int
;	O
perror_with_name	(*(char))->(void)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
f	*(char)
]	O
.	O
name	*(char)
)	O
;	O
status	int
=	O
EXIT_TROUBLE	int
;	O
}	O
}	O
if	O
(	O
status	int
==	O
EXIT_SUCCESS	int
&&	O
!	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
&&	O
DIR_P	O
(	O
0	int
)	O
!=	O
DIR_P	O
(	O
1	int
)	O
)	O
{	O
int	O
fnm_arg	int
=	O
DIR_P	O
(	O
0	int
)	O
;	O
int	O
dir_arg	int
=	O
1	int
-	O
fnm_arg	int
;	O
char	O
const	O
*	O
fnm	*(char)
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
fnm_arg	int
]	O
.	O
name	*(char)
;	O
char	O
const	O
*	O
dir	*(char)
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
dir_arg	int
]	O
.	O
name	*(char)
;	O
char	O
const	O
*	O
filename	*(char)
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
dir_arg	int
]	O
.	O
name	*(char)
=	O
free0	*(char)
=	O
find_dir_file_pathname	(*(char),*(char))->(*(char))
(	O
dir	*(char)
,	O
last_component	(*(char))->(*(char))
(	O
fnm	*(char)
)	O
)	O
;	O
if	O
(	O
STREQ	O
(	O
fnm	*(char)
,	O
"-"	*(char)
)	O
)	O
fatal	(*(char))->(void)
(	O
"cannot compare `-' to a directory"	*(char)
)	O
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
filename	*(char)
,	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
dir_arg	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
)	O
{	O
perror_with_name	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
status	int
=	O
EXIT_TROUBLE	int
;	O
}	O
}	O
if	O
(	O
status	int
!=	O
EXIT_SUCCESS	int
)	O
{	O
}	O
else	O
if	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
==	O
NONEXISTENT	O
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
==	O
NONEXISTENT	O
)	O
{	O
}	O
else	O
if	O
(	O
(	O
same_files	bool
=	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
!=	O
NONEXISTENT	O
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
!=	O
NONEXISTENT	O
&&	O
0	int
<	O
same_file	O
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
&&	O
same_file_attributes	O
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
)	O
&&	O
no_diff_means_no_output	bool
)	O
{	O
}	O
else	O
if	O
(	O
DIR_P	O
(	O
0	int
)	O
&	O
DIR_P	O
(	O
1	int
)	O
)	O
{	O
if	O
(	O
output_style	enum(int,int,int,int,int,int,int,int,int)
==	O
OUTPUT_IFDEF	int
)	O
fatal	(*(char))->(void)
(	O
"-D option not supported with directories"	*(char)
)	O
;	O
if	O
(	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
&&	O
!	O
recursive	bool
)	O
{	O
message	(*(char),*(char),*(char))->(void)
(	O
"Common subdirectories: %s and %s\n"	*(char)
,	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
)	O
;	O
}	O
else	O
status	int
=	O
diff_dirs	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*((*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)),*(char),*(char))->(int)))->(int)
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
,	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
)	O
;	O
}	O
else	O
if	O
(	O
(	O
DIR_P	O
(	O
0	int
)	O
|	O
DIR_P	O
(	O
1	int
)	O
)	O
||	O
(	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
&&	O
(	O
!	O
S_ISREG	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
||	O
!	O
S_ISREG	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
)	O
)	O
{	O
if	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
==	O
NONEXISTENT	O
||	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
==	O
NONEXISTENT	O
)	O
{	O
if	O
(	O
(	O
DIR_P	O
(	O
0	int
)	O
|	O
DIR_P	O
(	O
1	int
)	O
)	O
&&	O
recursive	bool
&&	O
(	O
new_file	bool
||	O
(	O
unidirectional_new_file	bool
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
==	O
NONEXISTENT	O
)	O
)	O
)	O
status	int
=	O
diff_dirs	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*((*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)),*(char),*(char))->(int)))->(int)
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
,	O
compare_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))),*(char),*(char))->(int)
)	O
;	O
else	O
{	O
char	O
const	O
*	O
dir	*(char)
;	O
assert	O
(	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
)	O
;	O
dir	*(char)
=	O
parent	*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct`)))))
->	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
==	O
NONEXISTENT	O
]	O
.	O
name	*(char)
;	O
message	(*(char),*(char),*(char))->(void)
(	O
"Only in %s: %s\n"	*(char)
,	O
dir	*(char)
,	O
name0	*(char)
)	O
;	O
status	int
=	O
EXIT_FAILURE	int
;	O
}	O
}	O
else	O
{	O
message5	(*(char),*(char),*(char),*(char),*(char))->(void)
(	O
"File %s is a %s while file %s is a %s\n"	*(char)
,	O
file_label	array(*(char))
[	O
0	int
]	O
?	O
file_label	array(*(char))
[	O
0	int
]	O
:	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
file_type	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(char))
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
,	O
file_label	array(*(char))
[	O
1	int
]	O
?	O
file_label	array(*(char))
[	O
1	int
]	O
:	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
,	O
file_type	(*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(char))
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
;	O
status	int
=	O
EXIT_FAILURE	int
;	O
}	O
}	O
else	O
if	O
(	O
files_can_be_treated_as_binary	bool
&&	O
S_ISREG	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
&&	O
S_ISREG	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
!=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
{	O
message	(*(char),*(char),*(char))->(void)
(	O
"Files %s and %s differ\n"	*(char)
,	O
file_label	array(*(char))
[	O
0	int
]	O
?	O
file_label	array(*(char))
[	O
0	int
]	O
:	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
file_label	array(*(char))
[	O
1	int
]	O
?	O
file_label	array(*(char))
[	O
1	int
]	O
:	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
)	O
;	O
status	int
=	O
EXIT_FAILURE	int
;	O
}	O
else	O
{	O
int	O
oflags	int
=	O
O_RDONLY	int
|	O
(	O
binary	int
?	O
O_BINARY	int
:	O
0	int
)	O
;	O
if	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
==	O
UNOPENED	O
)	O
if	O
(	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
=	O
open	(*(char),int)->(int)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
oflags	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
perror_with_name	(*(char))->(void)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
)	O
;	O
status	int
=	O
EXIT_TROUBLE	int
;	O
}	O
if	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
==	O
UNOPENED	O
)	O
{	O
if	O
(	O
same_files	bool
)	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
;	O
else	O
if	O
(	O
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
=	O
open	(*(char),int)->(int)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
,	O
oflags	int
,	O
0	int
)	O
)	O
<	O
0	int
)	O
{	O
perror_with_name	(*(char))->(void)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
)	O
;	O
status	int
=	O
EXIT_TROUBLE	int
;	O
}	O
}	O
if	O
(	O
status	int
==	O
EXIT_SUCCESS	int
)	O
status	int
=	O
diff_2_files	(*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))->(int)
(	O
&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
)	O
;	O
if	O
(	O
0	int
<=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
&&	O
close	(int)->(int)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
)	O
!=	O
0	int
)	O
{	O
perror_with_name	(*(char))->(void)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
)	O
;	O
status	int
=	O
EXIT_TROUBLE	int
;	O
}	O
if	O
(	O
0	int
<=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
&&	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
desc	int
!=	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
&&	O
close	(int)->(int)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
desc	int
)	O
!=	O
0	int
)	O
{	O
perror_with_name	(*(char))->(void)
(	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
)	O
;	O
status	int
=	O
EXIT_TROUBLE	int
;	O
}	O
}	O
if	O
(	O
status	int
==	O
EXIT_SUCCESS	int
)	O
{	O
if	O
(	O
report_identical_files	bool
&&	O
!	O
DIR_P	O
(	O
0	int
)	O
)	O
message	(*(char),*(char),*(char))->(void)
(	O
"Files %s and %s are identical\n"	*(char)
,	O
file_label	array(*(char))
[	O
0	int
]	O
?	O
file_label	array(*(char))
[	O
0	int
]	O
:	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
0	int
]	O
.	O
name	*(char)
,	O
file_label	array(*(char))
[	O
1	int
]	O
?	O
file_label	array(*(char))
[	O
1	int
]	O
:	O
cmp	struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*(struct(array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long)),*`)))))
.	O
file	array(struct(int,*(char),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(long),long,long,*(*(char)),long,long,long,long,*(char),long,*(char),*(long),*(long),*(long),long,*(char),bool,bool,long))
[	O
1	int
]	O
.	O
name	*(char)
)	O
;	O
}	O
else	O
{	O
if	O
(	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
pfatal_with_name	(*(char))->(void)
(	O
_	O
(	O
"standard output"	*(char)
)	O
)	O
;	O
}	O
free	(*(void))->(void)
(	O
free0	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
free1	*(char)
)	O
;	O
return	O
status	int
;	O
}	O
