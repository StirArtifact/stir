static	O
char	O
*	O
version	*(char)
=	O
"$Revision: 1.15 $"	*(char)
;	O
static	O
int	O
quote_all	int
=	O
0	int
;	O
static	O
char	O
openquote	char
=	O
'"'	O
;	O
static	O
char	O
closequote	char
=	O
'"'	O
;	O
static	O
char	O
*	O
meta_escape	*(char)
=	O
"\\"	*(char)
;	O
static	O
char	O
meta_escape_buf	array(char)
[	O
2	int
]	O
;	O
static	O
char	O
metachars	array(char)
[	O
64	int
]	O
=	O
""	*(char)
;	O
static	O
int	O
num_metachars	int
=	O
0	int
;	O
static	O
void	O
pr_usage	()->(void)
(	O
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"usage: lessecho [-ox] [-cx] [-pn] [-dn] [-mx] [-nn] [-ex] [-fn] [-a] file ...\n"	*(char)
)	O
;	O
}	O
static	O
void	O
pr_version	()->(void)
(	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
char	O
buf	*(char)
[	O
10	int
]	O
;	O
char	O
*	O
pbuf	*(char)
=	O
buf	*(char)
;	O
for	O
(	O
p	*(char)
=	O
version	*(char)
;	O
*	O
p	*(char)
!=	O
' '	O
;	O
p	*(char)
++	O
)	O
if	O
(	O
*	O
p	*(char)
==	O
'\0'	O
)	O
return	O
;	O
for	O
(	O
p	*(char)
++	O
;	O
*	O
p	*(char)
!=	O
'$'	O
&&	O
*	O
p	*(char)
!=	O
' '	O
&&	O
*	O
p	*(char)
!=	O
'\0'	O
;	O
p	*(char)
++	O
)	O
*	O
pbuf	*(char)
++	O
=	O
*	O
p	*(char)
;	O
*	O
pbuf	*(char)
=	O
'\0'	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
buf	*(char)
)	O
;	O
}	O
static	O
void	O
pr_error	(*(char))->(void)
(	O
s	*(char)
)	O
char	O
*	O
s	*(char)
;	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s\n"	*(char)
,	O
s	*(char)
)	O
;	O
exit	(int)->(void)
(	O
1	int
)	O
;	O
}	O
static	O
long	O
lstrtol	(*(char),int,*(*(char)))->(long)
(	O
s	*(char)
,	O
radix	int
,	O
pend	*(*(char))
)	O
char	O
*	O
s	*(char)
;	O
int	O
radix	int
;	O
char	O
*	O
*	O
pend	*(*(char))
;	O
{	O
int	O
v	int
;	O
int	O
neg	int
=	O
0	int
;	O
long	O
n	int
=	O
0	int
;	O
while	O
(	O
*	O
s	*(char)
==	O
' '	O
||	O
*	O
s	*(char)
==	O
'\t'	O
)	O
s	*(char)
++	O
;	O
if	O
(	O
*	O
s	*(char)
==	O
'-'	O
)	O
{	O
neg	int
=	O
1	int
;	O
s	*(char)
++	O
;	O
}	O
else	O
if	O
(	O
*	O
s	*(char)
==	O
'+'	O
)	O
{	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
radix	int
==	O
0	int
)	O
{	O
radix	int
=	O
10	int
;	O
if	O
(	O
*	O
s	*(char)
==	O
'0'	O
)	O
{	O
switch	O
(	O
*	O
++	O
s	*(char)
)	O
{	O
case	O
'x'	O
:	O
radix	int
=	O
16	int
;	O
s	*(char)
++	O
;	O
break	O
;	O
default	O
:	O
radix	int
=	O
8	int
;	O
break	O
;	O
}	O
}	O
}	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
*	O
s	*(char)
>=	O
'0'	O
&&	O
*	O
s	*(char)
<=	O
'9'	O
)	O
v	int
=	O
*	O
s	*(char)
-	O
'0'	O
;	O
else	O
if	O
(	O
*	O
s	*(char)
>=	O
'a'	O
&&	O
*	O
s	*(char)
<=	O
'f'	O
)	O
v	int
=	O
*	O
s	*(char)
-	O
'a'	O
+	O
10	int
;	O
else	O
if	O
(	O
*	O
s	*(char)
>=	O
'A'	O
&&	O
*	O
s	*(char)
<=	O
'F'	O
)	O
v	int
=	O
*	O
s	*(char)
-	O
'A'	O
+	O
10	int
;	O
else	O
break	O
;	O
if	O
(	O
v	int
>=	O
radix	int
)	O
break	O
;	O
n	int
=	O
n	int
*	O
radix	int
+	O
v	int
;	O
s	*(char)
++	O
;	O
}	O
if	O
(	O
pend	*(*(char))
!=	O
NULL	O
)	O
{	O
while	O
(	O
*	O
s	*(char)
==	O
' '	O
||	O
*	O
s	*(char)
==	O
'\t'	O
)	O
s	*(char)
++	O
;	O
*	O
pend	*(*(char))
=	O
s	*(char)
;	O
}	O
if	O
(	O
neg	int
)	O
return	O
(	O
-	O
n	int
)	O
;	O
return	O
(	O
n	int
)	O
;	O
}	O
int	O
main	(int,array(*(char)))->(int)
(	O
argc	int
,	O
argv	array(*(char))
)	O
int	O
argc	int
;	O
char	O
*	O
argv	array(*(char))
[	O
]	O
;	O
{	O
char	O
*	O
arg	*(char)
;	O
char	O
*	O
s	*(char)
;	O
int	O
no_more_options	int
;	O
no_more_options	int
=	O
0	int
;	O
while	O
(	O
--	O
argc	int
>	O
0	int
)	O
{	O
arg	*(char)
=	O
*	O
++	O
argv	array(*(char))
;	O
if	O
(	O
*	O
arg	*(char)
!=	O
'-'	O
||	O
no_more_options	int
)	O
break	O
;	O
switch	O
(	O
*	O
++	O
arg	*(char)
)	O
{	O
case	O
'a'	O
:	O
quote_all	int
=	O
1	int
;	O
break	O
;	O
case	O
'c'	O
:	O
closequote	char
=	O
*	O
++	O
arg	*(char)
;	O
break	O
;	O
case	O
'd'	O
:	O
closequote	char
=	O
lstrtol	(*(char),int,*(*(char)))->(long)
(	O
++	O
arg	*(char)
,	O
0	int
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
==	O
arg	*(char)
)	O
pr_error	(*(char))->(void)
(	O
"Missing number after -d"	*(char)
)	O
;	O
break	O
;	O
case	O
'e'	O
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
++	O
arg	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
meta_escape	*(char)
=	O
""	*(char)
;	O
else	O
meta_escape	*(char)
=	O
arg	*(char)
;	O
break	O
;	O
case	O
'f'	O
:	O
meta_escape_buf	array(char)
[	O
0	int
]	O
=	O
lstrtol	(*(char),int,*(*(char)))->(long)
(	O
++	O
arg	*(char)
,	O
0	int
,	O
&	O
s	*(char)
)	O
;	O
meta_escape	*(char)
=	O
meta_escape_buf	array(char)
;	O
if	O
(	O
s	*(char)
==	O
arg	*(char)
)	O
pr_error	(*(char))->(void)
(	O
"Missing number after -f"	*(char)
)	O
;	O
break	O
;	O
case	O
'o'	O
:	O
openquote	char
=	O
*	O
++	O
arg	*(char)
;	O
break	O
;	O
case	O
'p'	O
:	O
openquote	char
=	O
lstrtol	(*(char),int,*(*(char)))->(long)
(	O
++	O
arg	*(char)
,	O
0	int
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
==	O
arg	*(char)
)	O
pr_error	(*(char))->(void)
(	O
"Missing number after -p"	*(char)
)	O
;	O
break	O
;	O
case	O
'm'	O
:	O
metachars	array(char)
[	O
num_metachars	int
++	O
]	O
=	O
*	O
++	O
arg	*(char)
;	O
metachars	array(char)
[	O
num_metachars	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
metachars	array(char)
[	O
num_metachars	int
++	O
]	O
=	O
lstrtol	(*(char),int,*(*(char)))->(long)
(	O
++	O
arg	*(char)
,	O
0	int
,	O
&	O
s	*(char)
)	O
;	O
if	O
(	O
s	*(char)
==	O
arg	*(char)
)	O
pr_error	(*(char))->(void)
(	O
"Missing number after -n"	*(char)
)	O
;	O
metachars	array(char)
[	O
num_metachars	int
]	O
=	O
'\0'	O
;	O
break	O
;	O
case	O
'?'	O
:	O
pr_usage	()->(void)
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
case	O
'-'	O
:	O
if	O
(	O
*	O
++	O
arg	*(char)
==	O
'\0'	O
)	O
{	O
no_more_options	int
=	O
1	int
;	O
break	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"version"	*(char)
)	O
==	O
0	int
)	O
{	O
pr_version	()->(void)
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
arg	*(char)
,	O
"help"	*(char)
)	O
==	O
0	int
)	O
{	O
pr_usage	()->(void)
(	O
)	O
;	O
return	O
(	O
0	int
)	O
;	O
}	O
pr_error	(*(char))->(void)
(	O
"Invalid option after --"	*(char)
)	O
;	O
default	O
:	O
pr_error	(*(char))->(void)
(	O
"Invalid option letter"	*(char)
)	O
;	O
}	O
}	O
while	O
(	O
argc	int
--	O
>	O
0	int
)	O
{	O
int	O
has_meta	int
=	O
0	int
;	O
arg	*(char)
=	O
*	O
argv	array(*(char))
++	O
;	O
for	O
(	O
s	*(char)
=	O
arg	*(char)
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
metachars	array(char)
,	O
*	O
s	*(char)
)	O
!=	O
NULL	O
)	O
{	O
has_meta	int
=	O
1	int
;	O
break	O
;	O
}	O
}	O
if	O
(	O
quote_all	int
||	O
(	O
has_meta	int
&&	O
strlen	(*(char))->(long)
(	O
meta_escape	*(char)
)	O
==	O
0	int
)	O
)	O
printf	(*(char))->(int)
(	O
"%c%s%c"	*(char)
,	O
openquote	char
,	O
arg	*(char)
,	O
closequote	char
)	O
;	O
else	O
{	O
for	O
(	O
s	*(char)
=	O
arg	*(char)
;	O
*	O
s	*(char)
!=	O
'\0'	O
;	O
s	*(char)
++	O
)	O
{	O
if	O
(	O
strchr	(*(char),int)->(*(char))
(	O
metachars	array(char)
,	O
*	O
s	*(char)
)	O
!=	O
NULL	O
)	O
printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
meta_escape	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"%c"	*(char)
,	O
*	O
s	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
argc	int
>	O
0	int
)	O
printf	(*(char))->(int)
(	O
" "	*(char)
)	O
;	O
else	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
}	O
return	O
(	O
0	int
)	O
;	O
}	O
