int	O
__gmp_doprnt	(*(struct(*((*`,*`,array(struct(int,int,*(void),*(void))))->(int)),*((*`,*`,long)->(int)),*((*`,int,int)->(int)),*((*`)->(int)))),*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)
(	O
const	O
struct	O
doprnt_funs_t	struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int)))
*	O
funs	*(struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int))))
,	O
void	O
*	O
data	*(void)
,	O
const	O
char	O
*	O
orig_fmt	*(char)
,	O
va_list	array(struct(int,int,*(void),*(void)))
orig_ap	array(struct(int,int,*(void),*(void)))
)	O
{	O
va_list	array(struct(int,int,*(void),*(void)))
ap	*(long)
,	O
this_ap	array(struct(int,int,*(void),*(void)))
,	O
last_ap	array(struct(int,int,*(void),*(void)))
;	O
size_t	long
alloc_fmt_size	long
;	O
char	O
*	O
fmt	*(char)
,	O
*	O
alloc_fmt	*(char)
,	O
*	O
last_fmt	*(char)
,	O
*	O
this_fmt	*(char)
,	O
*	O
gmp_str	*(char)
;	O
int	O
retval	int
=	O
0	int
;	O
int	O
type	int
,	O
fchar	int
,	O
*	O
value	*(int)
,	O
seen_precision	int
;	O
struct	O
doprnt_params_t	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
;	O
TRACE	O
(	O
printf	(*(char))->(int)
(	O
"gmp_doprnt \"%s\"\n"	*(char)
,	O
orig_fmt	*(char)
)	O
)	O
;	O
va_copy	O
(	O
ap	*(long)
,	O
orig_ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
alloc_fmt_size	long
=	O
strlen	(*(char))->(long)
(	O
orig_fmt	*(char)
)	O
+	O
1	int
;	O
alloc_fmt	*(char)
=	O
__GMP_ALLOCATE_FUNC_TYPE	O
(	O
alloc_fmt_size	long
,	O
char	O
)	O
;	O
fmt	*(char)
=	O
alloc_fmt	*(char)
;	O
strcpy	(*(char),*(char))->(*(char))
(	O
fmt	*(char)
,	O
orig_fmt	*(char)
)	O
;	O
last_fmt	*(char)
=	O
fmt	*(char)
;	O
va_copy	O
(	O
last_ap	array(struct(int,int,*(void),*(void)))
,	O
ap	*(long)
)	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
TRACE	O
(	O
printf	(*(char))->(int)
(	O
"next: \"%s\"\n"	*(char)
,	O
fmt	*(char)
)	O
)	O
;	O
fmt	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
fmt	*(char)
,	O
'%'	O
)	O
;	O
if	O
(	O
fmt	*(char)
==	O
NULL	O
)	O
break	O
;	O
this_fmt	*(char)
=	O
fmt	*(char)
;	O
va_copy	O
(	O
this_ap	array(struct(int,int,*(void),*(void)))
,	O
ap	*(long)
)	O
;	O
fmt	*(char)
++	O
;	O
TRACE	O
(	O
printf	(*(char))->(int)
(	O
"considering\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  last: \"%s\"\n"	*(char)
,	O
last_fmt	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"  this: \"%s\"\n"	*(char)
,	O
this_fmt	*(char)
)	O
)	O
;	O
type	int
=	O
'\0'	O
;	O
value	*(int)
=	O
&	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
width	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
10	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
conv	int
=	O
0	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
expfmt	*(char)
=	O
"e%c%02ld"	*(char)
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
exptimes4	int
=	O
0	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
fill	char
=	O
' '	O
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
justify	int
=	O
DOPRNT_JUSTIFY_RIGHT	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
prec	int
=	O
6	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showbase	int
=	O
DOPRNT_SHOWBASE_NO	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showpoint	int
=	O
0	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showtrailing	int
=	O
1	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
sign	char
=	O
'\0'	O
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
width	int
=	O
0	int
;	O
seen_precision	int
=	O
0	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
fchar	int
=	O
*	O
fmt	*(char)
++	O
;	O
if	O
(	O
fchar	int
==	O
'\0'	O
)	O
break	O
;	O
switch	O
(	O
fchar	int
)	O
{	O
case	O
'a'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
16	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
expfmt	*(char)
=	O
"p%c%ld"	*(char)
;	O
goto	O
conv_a	O
;	O
case	O
'A'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
-	O
16	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
expfmt	*(char)
=	O
"P%c%ld"	*(char)
;	O
conv_a	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
conv	int
=	O
DOPRNT_CONV_SCIENTIFIC	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
exptimes4	int
=	O
1	int
;	O
if	O
(	O
!	O
seen_precision	int
)	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
prec	int
=	O
-	O
1	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showbase	int
=	O
DOPRNT_SHOWBASE_YES	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showtrailing	int
=	O
1	int
;	O
goto	O
floating_a	O
;	O
case	O
'c'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
int	O
)	O
;	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'd'	O
:	O
case	O
'i'	O
:	O
case	O
'u'	O
:	O
integer	O
:	O
TRACE	O
(	O
printf	(*(char))->(int)
(	O
"integer, base=%d\n"	*(char)
,	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
)	O
)	O
;	O
if	O
(	O
!	O
seen_precision	int
)	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
prec	int
=	O
-	O
1	int
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
'j'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
intmax_t	long
)	O
;	O
break	O
;	O
case	O
'l'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
long	O
)	O
;	O
break	O
;	O
case	O
'L'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
long	O
long	O
)	O
;	O
break	O
;	O
case	O
'N'	O
:	O
{	O
mp_ptr	*(long)
xp	*(long)
;	O
mp_size_t	long
xsize	long
,	O
abs_xsize	long
;	O
mpz_t	array(struct(int,int,*(long)))
z	array(struct(int,int,*(long)))
;	O
FLUSH	O
(	O
)	O
;	O
xp	*(long)
=	O
va_arg	O
(	O
ap	*(long)
,	O
mp_ptr	*(long)
)	O
;	O
PTR	O
(	O
z	array(struct(int,int,*(long)))
)	O
=	O
xp	*(long)
;	O
xsize	long
=	O
(	O
int	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
mp_size_t	long
)	O
;	O
abs_xsize	long
=	O
ABS	O
(	O
xsize	long
)	O
;	O
MPN_NORMALIZE	O
(	O
xp	*(long)
,	O
abs_xsize	long
)	O
;	O
SIZ	O
(	O
z	array(struct(int,int,*(long)))
)	O
=	O
(	O
xsize	long
>=	O
0	int
?	O
abs_xsize	long
:	O
-	O
abs_xsize	long
)	O
;	O
ASSERT_CODE	O
(	O
ALLOC	O
(	O
z	array(struct(int,int,*(long)))
)	O
=	O
abs_xsize	long
)	O
;	O
gmp_str	*(char)
=	O
mpz_get_str	O
(	O
NULL	O
,	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
,	O
z	array(struct(int,int,*(long)))
)	O
;	O
goto	O
gmp_integer	O
;	O
}	O
case	O
'q'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
quad_t	long
)	O
;	O
break	O
;	O
case	O
'Q'	O
:	O
FLUSH	O
(	O
)	O
;	O
gmp_str	*(char)
=	O
mpq_get_str	O
(	O
NULL	O
,	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
,	O
va_arg	O
(	O
ap	*(long)
,	O
mpq_srcptr	*(struct(struct(int,int,*(long)),struct(int,int,*(long))))
)	O
)	O
;	O
goto	O
gmp_integer	O
;	O
case	O
't'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
ptrdiff_t	long
)	O
;	O
break	O
;	O
case	O
'z'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
size_t	long
)	O
;	O
break	O
;	O
case	O
'Z'	O
:	O
{	O
int	O
ret	int
;	O
FLUSH	O
(	O
)	O
;	O
gmp_str	*(char)
=	O
mpz_get_str	O
(	O
NULL	O
,	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
,	O
va_arg	O
(	O
ap	*(long)
,	O
mpz_srcptr	*(struct(int,int,*(long)))
)	O
)	O
;	O
gmp_integer	O
:	O
ret	int
=	O
__gmp_doprnt_integer	(*(struct(*((*`,*`,array(struct(int,int,*(void),*(void))))->(int)),*((*`,*`,long)->(int)),*((*`,int,int)->(int)),*((*`)->(int)))),*(void),*(struct(int,int,*(char),int,char,int,int,int,int,int,char,int)),*(char))->(int)
(	O
funs	*(struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int))))
,	O
data	*(void)
,	O
&	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
,	O
gmp_str	*(char)
)	O
;	O
(	O
*	O
__gmp_free_func	*((*(void),long)->(void))
)	O
(	O
gmp_str	*(char)
,	O
strlen	(*(char))->(long)
(	O
gmp_str	*(char)
)	O
+	O
1	int
)	O
;	O
DOPRNT_ACCUMULATE	O
(	O
ret	int
)	O
;	O
va_copy	O
(	O
last_ap	array(struct(int,int,*(void),*(void)))
,	O
ap	*(long)
)	O
;	O
last_fmt	*(char)
=	O
fmt	*(char)
;	O
}	O
break	O
;	O
default	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
int	O
)	O
;	O
break	O
;	O
}	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'E'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
-	O
10	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
expfmt	*(char)
=	O
"E%c%02ld"	*(char)
;	O
case	O
'e'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
conv	int
=	O
DOPRNT_CONV_SCIENTIFIC	int
;	O
floating	O
:	O
if	O
(	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showbase	int
==	O
DOPRNT_SHOWBASE_NONZERO	int
)	O
{	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showpoint	int
=	O
1	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showtrailing	int
=	O
1	int
;	O
}	O
floating_a	O
:	O
switch	O
(	O
type	int
)	O
{	O
case	O
'F'	O
:	O
FLUSH	O
(	O
)	O
;	O
DOPRNT_ACCUMULATE	O
(	O
__gmp_doprnt_mpf	O
(	O
funs	*(struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int))))
,	O
data	*(void)
,	O
&	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
,	O
GMP_DECIMAL_POINT	O
,	O
va_arg	O
(	O
ap	*(long)
,	O
mpf_srcptr	*(struct(int,int,long,*(long)))
)	O
)	O
)	O
;	O
va_copy	O
(	O
last_ap	array(struct(int,int,*(void),*(void)))
,	O
ap	*(long)
)	O
;	O
last_fmt	*(char)
=	O
fmt	*(char)
;	O
break	O
;	O
case	O
'L'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
long	O
double	O
)	O
;	O
break	O
;	O
default	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
double	O
)	O
;	O
break	O
;	O
}	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'f'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
conv	int
=	O
DOPRNT_CONV_FIXED	int
;	O
goto	O
floating	O
;	O
case	O
'F'	O
:	O
case	O
'j'	O
:	O
case	O
'L'	O
:	O
case	O
'N'	O
:	O
case	O
'q'	O
:	O
case	O
'Q'	O
:	O
case	O
't'	O
:	O
case	O
'z'	O
:	O
case	O
'Z'	O
:	O
set_type	O
:	O
type	int
=	O
fchar	int
;	O
break	O
;	O
case	O
'G'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
-	O
10	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
expfmt	*(char)
=	O
"E%c%02ld"	*(char)
;	O
case	O
'g'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
conv	int
=	O
DOPRNT_CONV_GENERAL	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showtrailing	int
=	O
0	int
;	O
goto	O
floating	O
;	O
case	O
'h'	O
:	O
if	O
(	O
type	int
!=	O
'h'	O
)	O
goto	O
set_type	O
;	O
type	int
=	O
'H'	O
;	O
break	O
;	O
case	O
'l'	O
:	O
if	O
(	O
type	int
!=	O
'l'	O
)	O
goto	O
set_type	O
;	O
type	int
=	O
'L'	O
;	O
break	O
;	O
case	O
'm'	O
:	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'M'	O
:	O
fmt	*(char)
[	O
-	O
1	int
]	O
=	O
'l'	O
;	O
type	int
=	O
'l'	O
;	O
break	O
;	O
case	O
'n'	O
:	O
{	O
void	O
*	O
p	*(char)
;	O
FLUSH	O
(	O
)	O
;	O
p	*(char)
=	O
va_arg	O
(	O
ap	*(long)
,	O
void	O
*	O
)	O
;	O
switch	O
(	O
type	int
)	O
{	O
case	O
'\0'	O
:	O
*	O
(	O
int	O
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'F'	O
:	O
mpf_set_si	O
(	O
(	O
mpf_ptr	*(struct(int,int,long,*(long)))
)	O
p	*(char)
,	O
(	O
long	O
)	O
retval	int
)	O
;	O
break	O
;	O
case	O
'H'	O
:	O
*	O
(	O
char	O
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'h'	O
:	O
*	O
(	O
short	O
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'j'	O
:	O
*	O
(	O
intmax_t	long
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'l'	O
:	O
*	O
(	O
long	O
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'q'	O
:	O
ASSERT_ALWAYS	O
(	O
sizeof	O
(	O
quad_t	long
)	O
==	O
sizeof	O
(	O
long	O
long	O
)	O
)	O
;	O
case	O
'L'	O
:	O
*	O
(	O
long	O
long	O
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'N'	O
:	O
{	O
mp_size_t	long
n	long
;	O
n	long
=	O
va_arg	O
(	O
ap	*(long)
,	O
mp_size_t	long
)	O
;	O
n	long
=	O
ABS	O
(	O
n	long
)	O
;	O
if	O
(	O
n	long
!=	O
0	int
)	O
{	O
*	O
(	O
mp_ptr	*(long)
)	O
p	*(char)
=	O
retval	int
;	O
MPN_ZERO	O
(	O
(	O
mp_ptr	*(long)
)	O
p	*(char)
+	O
1	int
,	O
n	long
-	O
1	int
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'Q'	O
:	O
mpq_set_si	O
(	O
(	O
mpq_ptr	*(struct(struct(int,int,*(long)),struct(int,int,*(long))))
)	O
p	*(char)
,	O
(	O
long	O
)	O
retval	int
,	O
1L	int
)	O
;	O
break	O
;	O
case	O
't'	O
:	O
*	O
(	O
ptrdiff_t	long
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'z'	O
:	O
*	O
(	O
size_t	long
*	O
)	O
p	*(char)
=	O
retval	int
;	O
break	O
;	O
case	O
'Z'	O
:	O
mpz_set_si	O
(	O
(	O
mpz_ptr	*(struct(int,int,*(long)))
)	O
p	*(char)
,	O
(	O
long	O
)	O
retval	int
)	O
;	O
break	O
;	O
}	O
}	O
va_copy	O
(	O
last_ap	array(struct(int,int,*(void),*(void)))
,	O
ap	*(long)
)	O
;	O
last_fmt	*(char)
=	O
fmt	*(char)
;	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'o'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
8	int
;	O
goto	O
integer	O
;	O
case	O
'p'	O
:	O
case	O
's'	O
:	O
(	O
void	O
)	O
va_arg	O
(	O
ap	*(long)
,	O
const	O
void	O
*	O
)	O
;	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'x'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
16	int
;	O
goto	O
integer	O
;	O
case	O
'X'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
base	int
=	O
-	O
16	int
;	O
goto	O
integer	O
;	O
case	O
'%'	O
:	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
case	O
'#'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
showbase	int
=	O
DOPRNT_SHOWBASE_NONZERO	int
;	O
break	O
;	O
case	O
'\''	O
:	O
break	O
;	O
case	O
'+'	O
:	O
case	O
' '	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
sign	char
=	O
fchar	int
;	O
break	O
;	O
case	O
'-'	O
:	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
justify	int
=	O
DOPRNT_JUSTIFY_LEFT	int
;	O
break	O
;	O
case	O
'.'	O
:	O
seen_precision	int
=	O
1	int
;	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
prec	int
=	O
-	O
1	int
;	O
value	*(int)
=	O
&	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
prec	int
;	O
break	O
;	O
case	O
'*'	O
:	O
{	O
int	O
n	long
=	O
va_arg	O
(	O
ap	*(long)
,	O
int	O
)	O
;	O
if	O
(	O
value	*(int)
==	O
&	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
width	int
)	O
{	O
if	O
(	O
n	long
<	O
0	int
)	O
{	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
justify	int
=	O
DOPRNT_JUSTIFY_LEFT	int
;	O
n	long
=	O
-	O
n	long
;	O
}	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
width	int
=	O
n	long
;	O
}	O
else	O
{	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
prec	int
=	O
MAX	O
(	O
0	int
,	O
n	long
)	O
;	O
}	O
}	O
break	O
;	O
case	O
'0'	O
:	O
if	O
(	O
value	*(int)
==	O
&	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
width	int
)	O
{	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
fill	char
=	O
'0'	O
;	O
if	O
(	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
justify	int
==	O
DOPRNT_JUSTIFY_RIGHT	int
)	O
param	struct(int,int,*(char),int,char,int,int,int,int,int,char,int)
.	O
justify	int
=	O
DOPRNT_JUSTIFY_INTERNAL	int
;	O
}	O
else	O
{	O
*	O
value	*(int)
=	O
0	int
;	O
}	O
break	O
;	O
case	O
'1'	O
:	O
case	O
'2'	O
:	O
case	O
'3'	O
:	O
case	O
'4'	O
:	O
case	O
'5'	O
:	O
case	O
'6'	O
:	O
case	O
'7'	O
:	O
case	O
'8'	O
:	O
case	O
'9'	O
:	O
{	O
int	O
n	long
=	O
0	int
;	O
do	O
{	O
n	long
=	O
n	long
*	O
10	int
+	O
(	O
fchar	int
-	O
'0'	O
)	O
;	O
fchar	int
=	O
*	O
fmt	*(char)
++	O
;	O
}	O
while	O
(	O
isascii	(int)->(int)
(	O
fchar	int
)	O
&&	O
isdigit	(int)->(int)
(	O
fchar	int
)	O
)	O
;	O
fmt	*(char)
--	O
;	O
*	O
value	*(int)
=	O
n	long
;	O
}	O
break	O
;	O
default	O
:	O
ASSERT	O
(	O
0	int
)	O
;	O
goto	O
next	*(struct(*(struct(*(struct`),long)),long))
;	O
}	O
}	O
next	*(struct(*(struct(*(struct`),long)),long))
:	O
;	O
}	O
TRACE	O
(	O
printf	(*(char))->(int)
(	O
"remainder: \"%s\"\n"	*(char)
,	O
last_fmt	*(char)
)	O
)	O
;	O
if	O
(	O
*	O
last_fmt	*(char)
!=	O
'\0'	O
)	O
DOPRNT_FORMAT	O
(	O
last_fmt	*(char)
,	O
last_ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
if	O
(	O
funs	*(struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int))))
->	O
final	*((*(void))->(int))
!=	O
NULL	O
)	O
if	O
(	O
(	O
*	O
funs	*(struct(*((*(void),*(char),array(struct(int,int,*(void),*(void))))->(int)),*((*(void),*(char),long)->(int)),*((*(void),int,int)->(int)),*((*(void))->(int))))
->	O
final	*((*(void))->(int))
)	O
(	O
data	*(void)
)	O
==	O
-	O
1	int
)	O
goto	O
error	O
;	O
done	O
:	O
(	O
*	O
__gmp_free_func	*((*(void),long)->(void))
)	O
(	O
alloc_fmt	*(char)
,	O
alloc_fmt_size	long
)	O
;	O
return	O
retval	int
;	O
error	O
:	O
retval	int
=	O
-	O
1	int
;	O
goto	O
done	O
;	O
}	O
