static	O
int	O
loop_and_record	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
SWHEADER	struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char))))
*	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
char	O
*	O
object_keyword	*(char)
,	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
list	*(*(char))
,	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
vendor_list	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
revision_list	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
{	O
char	O
*	O
obj	*(char)
;	O
char	O
*	O
value	int
=	O
NULL	O
;	O
char	O
*	O
attrline	*(char)
=	O
NULL	O
;	O
int	O
count	int
=	O
0	int
;	O
int	O
retval	int
;	O
obj	*(char)
=	O
swheader_get_object_by_tag	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(char))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
object_keyword	*(char)
,	O
"*"	*(char)
)	O
;	O
while	O
(	O
obj	*(char)
)	O
{	O
attrline	*(char)
=	O
swheader_get_attribute	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(int))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_tag	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
attrline	*(char)
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"no tag found for %s\n"	*(char)
,	O
object_keyword	*(char)
)	O
;	O
retval	int
=	O
20	int
;	O
return	O
retval	int
;	O
}	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
attrline	*(char)
,	O
NULL	O
)	O
;	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
list	*(*(char))
,	O
value	int
)	O
;	O
attrline	*(char)
=	O
swheader_get_attribute	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(int))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_vendor_tag	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
attrline	*(char)
)	O
{	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
attrline	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
vendor_list	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
vendor_list	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
value	int
)	O
;	O
}	O
attrline	*(char)
=	O
swheader_get_attribute	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(int))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_revision	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
attrline	*(char)
)	O
{	O
retval	int
=	O
23	int
;	O
return	O
retval	int
;	O
}	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
attrline	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
revision_list	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
strar_add	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))->(int)
(	O
revision_list	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
value	int
)	O
;	O
swheader_get_next_object	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),int,int)->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
(	O
int	O
)	O
UCHAR_MAX	O
,	O
(	O
int	O
)	O
UCHAR_MAX	O
)	O
;	O
obj	*(char)
=	O
swheader_get_object_by_tag	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(char))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
object_keyword	*(char)
,	O
"*"	*(char)
)	O
;	O
count	int
++	O
;	O
}	O
return	O
count	int
;	O
}	O
static	O
int	O
determine_catalog_directories	(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))),int)->(int)
(	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
,	O
int	O
enforce_swinstall_policy	int
)	O
{	O
char	O
*	O
bundle_tag	*(char)
;	O
char	O
*	O
product_tag	*(char)
;	O
bundle_tag	*(char)
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
bundle_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
0	int
)	O
;	O
product_tag	*(char)
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
0	int
)	O
;	O
if	O
(	O
enforce_swinstall_policy	int
)	O
{	O
}	O
if	O
(	O
bundle_tag	*(char)
==	O
NULL	O
)	O
bundle_tag	*(char)
=	O
product_tag	*(char)
;	O
if	O
(	O
product_tag	*(char)
==	O
NULL	O
)	O
return	O
1	int
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
catalog_bundle_dir1M	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
bundle_tag	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
swi_distdata_create	()->(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))))
(	O
void	O
)	O
{	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
=	O
(	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
)	O
)	O
;	O
swi_distdata_initialize	(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
)	O
;	O
return	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
;	O
}	O
void	O
swi_distdata_initialize	(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))))->(void)
(	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
)	O
{	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
did_part1M	int
=	O
0	int
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
dist_tagM	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
dist_revisionM	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
catalog_bundle_dir1M	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
NULL	O
)	O
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
bundle_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_revisionsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
vendor_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
=	O
strar_open	()->(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))
(	O
)	O
;	O
}	O
int	O
swi_distdata_resolve	(*(struct(*(struct(int,int,enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int),int,long,int,*`,*`,*`,*`,*`,*`,int,int,int,*`,struct`,*`,*`)),*(struct(*`,int,int,*`,*`,*`,*`,*`,*`,*`,int,int,int,array(struct(*(char),*(char),int)),*`,*`,int,int,*`,*`,*`,*`,int,*`,int,int,*`,int,long,long,int,int,int,int,*`,*`,*`,int)),*(struct(int,int,int,array(char),int,int,int,*`,array(int),int,int,*`,*`,struct`,struct`,int,int,array(int),int,*`,*`,*`,*`)),*(struct(int,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,int)),*(struct(struct`,array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(void),*(char),*(char),int,array(char),*(struct`),*(struct`),int,*(struct`),int,int,int,int)),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),int,int,int))),*`,*`,int,*`,*`,*`,int,*`,*`,*`,int,int,int,*`,*`,*`,*`,int,*`,*`,*`,*`,*`,int)),int,int,array(char),*(struct(int,*`,*`,*`,*`,*`,*`,*`)),int,*(char),int,int,int,*(struct(*`,*`,*`,int,*`,*`,*`,*`,int,int,*`,int,*`,int,int,int,*`,int)),*(struct(int,int,*`,*`)),*(void),int,int,*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,int,int,int)),*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))),int)->(int)
(	O
SWI	struct(*(struct(int,int,enum(int,int,int,int,int,int,int,int,int,int),enum(int,int,int,int,int,int,int,int,int,int),int,long,int,*(struct(*`,int,int,*`,*`,*`,*`,*`,*`,*`,int,int,int,array(struct(*(char),*(char),int)),*`,*`,int,int,*`,*`,*`,*`,int,*`,int,int,*`,int,long,long,int,int,int,int,*`,*`,*`,int)),*(struct(*`)),*(struct(int,int,*`)),*(struct(int,*`,*`)),*(struct(int,int,int,int,*`)),*(struct(int,int,int,int,*`)),int,int,int,*(struct(char,*`,int,int,int,*`,*`,int,*`,int,int,int,*`,*`,int,*`,*`,*`)),struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(*(struct(int,int,int,array(char),int,int,int,*`,array(int),int,int,*`,*`,struct`,struct`,int,int,array(int),int,*`,*`,*`,*`)),int,int,*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`)),int,int,int,array(struct(*(char),*(char),int)),*(char),*(char),int,int,*(struct(*`,int,long,*`,*`,int)),*(struct(*`,int,long,*`,*`,int)),*((*`,*`,*`)->(int)),*(struct(*`,*`,int,int,int,char,int)),int,*(struct(*`,*`,int,int,int,char,int)),int,int,*(struct(*`,int,long,*`,*`,int)),int,long,long,int,int,int,int,*((*`,*`)->(int)),*(struct(int,int,*`)),*(struct(char,*`,int,int,int,*`,*`,int,*`,int,int,int,*`,*`,int,*`,*`,*`)),int)),*(struct(int,int,int,array(char),int,int,int,*(struct(short,long,long,long,long,long,long,long,long,long,long,long,long,long,*`,*`,*`,*`,char,char,char,char,int,int,*`,*`,long,long,long,long)),array(int),int,int,*(struct(int,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,int)),*(struct(char,*`,int,int,int,*`,*`,int,*`,int,int,int,*`,*`,int,*`,*`,*`)),struct(array(long)),struct(array(long)),int,int,array(int),int,*(char),*(char),*(char),*(union(struct`)))),*(struct(int,int,int,int,*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(char),*(char),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(int,int,*`,*`)),int,int,int)),*(struct(struct(char,char,int,*(char),long,long,int,*(struct`),*(struct`),int,char,*(char)),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(void),*(char),*(char),int,array(char),*(struct`),*(struct`),int,*(struct`),int,int,int,int)),array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),int,int,int))),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*`,int,int,long,int)),int,*(struct(struct`,*`,array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),*(void),*(char),*(char),int,array(char),*(struct(array(*(struct(struct(char,char,int,*(char),long,long,int,*(struct(*`,*`,array(*(void)),*`,int,struct`,*`)),*(struct(*`,*`,*`,int,*`,int,int,*`,*`,*`,int)),int,char,*(char)),int,int,*(struct(struct(char,char,int,*`,long,long,int,*`,*`,int,char,*`),*(char),int,*(char),int,int,int,int)),*(void),int))))),*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*`,int,int),*((*`,*`,int)->(*`)))),int,*(struct(*(*`),int,int,long,int)),int,int,int,int))),*`,*`,*`,int,int,int)),*(struct(struct`,*`,*`,*`,int,array(char),*`,*`,int,*`,int,int,int,int)),*(struct(struct`,*`,*`,*`,int,array(char),*`,*`,int,*`,int,int,int,int)),int,*(struct(int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),*(char),*(char),int,int,int,*(char),*(char),*(char),*(char),int,*(char),*(char),*(char),*(char),*(char),int)),int,int,array(char),*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))),int,*(char),int,int,int,*(struct(*(struct(int,int,int)),*(struct(*`,*`,int,int,int,char,int)),*(struct(*`,*`,int,int,int,char,int)),int,*(struct(int,int,*`,*`)),*(char),*(char),*(char),int,int,*(char),int,*(struct(*`,*`,int,int,int,char,int)),int,int,int,*(char),int)),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(void),int,int,*(struct(*(char),*(char),*(char),int,*(struct(*`,int,int,long,int)),int,int,*(struct(array(char),array(char),array(char),array(char),int,*`,*`)),*(struct(*`,*`,*`,*`,*`,char,char,char,char,int)),*(void),int)),int,int,int,int)
*	O
swi	*(void)
,	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
,	O
int	O
enforce_swinstall_policy	int
)	O
{	O
char	O
*	O
obj	*(char)
;	O
int	O
offset	int
;	O
SWHEADER	struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char))))
*	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
;	O
char	O
*	O
value	int
=	O
NULL	O
;	O
char	O
*	O
attrline	*(char)
=	O
NULL	O
;	O
int	O
retval	int
;	O
int	O
count	int
=	O
0	int
;	O
swi_distdata_initialize	(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
)	O
;	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
=	O
SWI_get_index_header	O
(	O
swi	*(void)
)	O
;	O
swheader_reset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(void)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
)	O
;	O
swheader_reset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(void)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
)	O
;	O
count	int
=	O
loop_and_record	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_bundle	*(char)
,	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
bundle_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
)	O
NULL	O
,	O
(	O
STRAR	struct(int,int,*(struct(*(*(char)),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int)))
*	O
)	O
NULL	O
)	O
;	O
swheader_reset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(void)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
)	O
;	O
count	int
=	O
loop_and_record	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(int)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_product	*(char)
,	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
vendor_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_revisionsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
if	O
(	O
count	int
==	O
0	int
)	O
{	O
retval	int
=	O
30	int
;	O
return	O
retval	int
;	O
}	O
swheader_reset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(void)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
)	O
;	O
obj	*(char)
=	O
swheader_get_object_by_tag	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(char))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_distribution	*(char)
,	O
"*"	*(char)
)	O
;	O
if	O
(	O
!	O
obj	*(char)
)	O
{	O
retval	int
=	O
40	int
;	O
return	O
retval	int
;	O
}	O
offset	int
=	O
swheader_get_current_offset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(int)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
)	O
;	O
attrline	*(char)
=	O
swheader_get_attribute	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))),*(char),*(int))->(*(char))
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
,	O
SW_A_tag	*(char)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
attrline	*(char)
)	O
{	O
value	int
=	O
strar_get	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),int)->(*(char))
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
,	O
0	int
)	O
;	O
}	O
else	O
{	O
value	int
=	O
swheaderline_get_value	(*(char),*(int))->(*(char))
(	O
attrline	*(char)
,	O
NULL	O
)	O
;	O
}	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
dist_tagM	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
value	int
)	O
;	O
swheader_reset	(*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*`,*`,int)->(*`)))))->(void)
(	O
INDEX	*(struct(*(char),*(void),array(*(void)),*(int),int,struct(*(int),int,int),*((*(void),*(int),int)->(*(char)))))
)	O
;	O
if	O
(	O
determine_catalog_directories	(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))),int)->(int)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
,	O
enforce_swinstall_policy	int
)	O
)	O
return	O
44	int
;	O
retval	int
=	O
0	int
;	O
return	O
retval	int
;	O
}	O
void	O
swi_distdata_delete	(*(struct(int,*(char),*(char),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(struct(int,int,*`,*`)),*(char))))->(void)
(	O
SWI_DISTDATA	struct(int,*(char),*(char),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))),*(char))
*	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
)	O
{	O
free	(*(void))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
dist_tagM	*(char)
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
bundle_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
product_revisionsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
strar_close	(*(struct(int,int,*(struct(*`,int,int,long,int)),*(struct(*`,*`,int,int,int,char,int)))))->(void)
(	O
part1	*(struct(int,*(char),*(char),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(struct(int,int,*(struct`),*(struct`))),*(char)))
->	O
vendor_tagsM	*(struct(int,int,*(struct(*(*`),int,int,long,int)),*(struct(*(char),*(char),int,int,int,char,int))))
)	O
;	O
}	O
