static	O
int	O
execute_csharp_using_mono	(*(char),*(*(char)),int,*(*(char)),int,bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(int)
(	O
const	O
char	O
*	O
assembly_path	*(char)
,	O
const	O
char	O
*	O
const	O
*	O
libdirs	*(*(char))
,	O
unsigned	O
int	O
libdirs_count	int
,	O
const	O
char	O
*	O
const	O
*	O
args	*(*(char))
,	O
unsigned	O
int	O
nargs	int
,	O
bool	bool
verbose	bool
,	O
bool	bool
quiet	bool
,	O
execute_fn	(*(char),*(char),*(*(char)),*(void))->(bool)
*	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
static	O
bool	bool
mono_tested	bool
;	O
static	O
bool	bool
mono_present	bool
;	O
if	O
(	O
!	O
mono_tested	bool
)	O
{	O
char	O
*	O
argv	*(*(char))
[	O
3	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"mono"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
"--version"	*(char)
;	O
argv	*(*(char))
[	O
2	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"mono"	*(char)
,	O
"mono"	*(char)
,	O
argv	*(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
mono_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
)	O
;	O
mono_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
mono_present	bool
)	O
{	O
char	O
*	O
old_monopath	*(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
bool	bool
err	bool
;	O
old_monopath	*(char)
=	O
set_monopath	(*(*(char)),int,bool,bool)->(*(char))
(	O
libdirs	*(*(char))
,	O
libdirs_count	int
,	O
false	int
,	O
verbose	bool
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"mono"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
assembly_path	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	*(*(char))
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	*(char)
=	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
"mono"	*(char)
,	O
"mono"	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
reset_monopath	(*(char))->(void)
(	O
old_monopath	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
return	O
err	bool
;	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
static	O
int	O
execute_csharp_using_sscli	(*(char),*(*(char)),int,*(*(char)),int,bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(int)
(	O
const	O
char	O
*	O
assembly_path	*(char)
,	O
const	O
char	O
*	O
const	O
*	O
libdirs	*(*(char))
,	O
unsigned	O
int	O
libdirs_count	int
,	O
const	O
char	O
*	O
const	O
*	O
args	*(*(char))
,	O
unsigned	O
int	O
nargs	int
,	O
bool	bool
verbose	bool
,	O
bool	bool
quiet	bool
,	O
execute_fn	(*(char),*(char),*(*(char)),*(void))->(bool)
*	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
static	O
bool	bool
clix_tested	bool
;	O
static	O
bool	bool
clix_present	bool
;	O
if	O
(	O
!	O
clix_tested	bool
)	O
{	O
char	O
*	O
argv	*(*(char))
[	O
2	int
]	O
;	O
int	O
exitstatus	int
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"clix"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
NULL	O
;	O
exitstatus	int
=	O
execute	(*(char),*(char),*(*(char)),bool,bool,bool,bool,bool,bool,*(int))->(int)
(	O
"clix"	*(char)
,	O
"clix"	*(char)
,	O
argv	*(*(char))
,	O
false	int
,	O
false	int
,	O
true	int
,	O
true	int
,	O
true	int
,	O
false	int
,	O
NULL	O
)	O
;	O
clix_present	bool
=	O
(	O
exitstatus	int
==	O
0	int
||	O
exitstatus	int
==	O
1	int
)	O
;	O
clix_tested	bool
=	O
true	int
;	O
}	O
if	O
(	O
clix_present	bool
)	O
{	O
char	O
*	O
old_clixpath	*(char)
;	O
char	O
*	O
*	O
argv	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
xmalloca	O
(	O
(	O
2	int
+	O
nargs	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
char	O
*	O
)	O
)	O
;	O
unsigned	O
int	O
i	int
;	O
bool	bool
err	bool
;	O
old_clixpath	*(char)
=	O
set_clixpath	(*(*(char)),int,bool,bool)->(*(char))
(	O
libdirs	*(*(char))
,	O
libdirs_count	int
,	O
false	int
,	O
verbose	bool
)	O
;	O
argv	*(*(char))
[	O
0	int
]	O
=	O
"clix"	*(char)
;	O
argv	*(*(char))
[	O
1	int
]	O
=	O
(	O
char	O
*	O
)	O
assembly_path	*(char)
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<=	O
nargs	int
;	O
i	int
++	O
)	O
argv	*(*(char))
[	O
2	int
+	O
i	int
]	O
=	O
(	O
char	O
*	O
)	O
args	*(*(char))
[	O
i	int
]	O
;	O
if	O
(	O
verbose	bool
)	O
{	O
char	O
*	O
command	*(char)
=	O
shell_quote_argv	(*(*(char)))->(*(char))
(	O
argv	*(*(char))
)	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
command	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
command	*(char)
)	O
;	O
}	O
err	bool
=	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
(	O
"clix"	*(char)
,	O
"clix"	*(char)
,	O
argv	*(*(char))
,	O
private_data	*(void)
)	O
;	O
reset_clixpath	(*(char))->(void)
(	O
old_clixpath	*(char)
)	O
;	O
freea	(*(void))->(void)
(	O
argv	*(*(char))
)	O
;	O
return	O
err	bool
;	O
}	O
else	O
return	O
-	O
1	int
;	O
}	O
bool	bool
execute_csharp_program	(*(char),*(*(char)),int,*(*(char)),bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(bool)
(	O
const	O
char	O
*	O
assembly_path	*(char)
,	O
const	O
char	O
*	O
const	O
*	O
libdirs	*(*(char))
,	O
unsigned	O
int	O
libdirs_count	int
,	O
const	O
char	O
*	O
const	O
*	O
args	*(*(char))
,	O
bool	bool
verbose	bool
,	O
bool	bool
quiet	bool
,	O
execute_fn	(*(char),*(char),*(*(char)),*(void))->(bool)
*	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
,	O
void	O
*	O
private_data	*(void)
)	O
{	O
unsigned	O
int	O
nargs	int
;	O
int	O
result	*(char)
;	O
{	O
const	O
char	O
*	O
const	O
*	O
arg	*(*(char))
;	O
for	O
(	O
nargs	int
=	O
0	int
,	O
arg	*(*(char))
=	O
args	*(*(char))
;	O
*	O
arg	*(*(char))
!=	O
NULL	O
;	O
nargs	int
++	O
,	O
arg	*(*(char))
++	O
)	O
;	O
}	O
result	*(char)
=	O
execute_csharp_using_mono	(*(char),*(*(char)),int,*(*(char)),int,bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(int)
(	O
assembly_path	*(char)
,	O
libdirs	*(*(char))
,	O
libdirs_count	int
,	O
args	*(*(char))
,	O
nargs	int
,	O
verbose	bool
,	O
quiet	bool
,	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
,	O
private_data	*(void)
)	O
;	O
if	O
(	O
result	*(char)
>=	O
0	int
)	O
return	O
(	O
bool	bool
)	O
result	*(char)
;	O
result	*(char)
=	O
execute_csharp_using_sscli	(*(char),*(*(char)),int,*(*(char)),int,bool,bool,*((*(char),*(char),*(*(char)),*(void))->(bool)),*(void))->(int)
(	O
assembly_path	*(char)
,	O
libdirs	*(*(char))
,	O
libdirs_count	int
,	O
args	*(*(char))
,	O
nargs	int
,	O
verbose	bool
,	O
quiet	bool
,	O
executer	*((*(char),*(char),*(*(char)),*(void))->(bool))
,	O
private_data	*(void)
)	O
;	O
if	O
(	O
result	*(char)
>=	O
0	int
)	O
return	O
(	O
bool	bool
)	O
result	*(char)
;	O
if	O
(	O
!	O
quiet	bool
)	O
error	(int,int,*(char))->(void)
(	O
0	int
,	O
0	int
,	O
_	O
(	O
"C# virtual machine not found, try installing mono"	*(char)
)	O
)	O
;	O
return	O
true	int
;	O
}	O
