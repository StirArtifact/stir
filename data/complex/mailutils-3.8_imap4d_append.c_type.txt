struct	O
_temp_envelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char))
{	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
;	O
struct	O
mu_timezone	struct(int,*(char))
tz	*(struct(int,*(char)))
;	O
char	O
*	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
}	O
;	O
static	O
int	O
_temp_envelope_date	(*(struct),*(char),long,*(long))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	*(long)
)	O
{	O
struct	O
_temp_envelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char))
*	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
int	O
rc	int
;	O
mu_stream_t	*(struct)
str	*(struct)
;	O
mu_stream_stat_buffer	array(long)
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
!	O
buf	*(char)
)	O
{	O
if	O
(	O
!	O
pnwrite	*(long)
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
rc	int
=	O
mu_nullstream_create	(*(*(struct)),int)->(int)
(	O
&	O
str	*(struct)
,	O
MU_STREAM_WRITE	int
)	O
;	O
}	O
else	O
rc	int
=	O
mu_fixed_memory_stream_create	(*(*(struct)),*(void),long,int)->(int)
(	O
&	O
str	*(struct)
,	O
buf	*(char)
,	O
len	long
,	O
MU_STREAM_WRITE	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_stream_set_stat	(*(struct),int,array(long))->(int)
(	O
str	*(struct)
,	O
MU_STREAM_STAT_MASK	O
(	O
MU_STREAM_STAT_OUT	int
)	O
,	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
;	O
rc	int
=	O
mu_c_streamftime	(*(struct),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))))->(int)
(	O
str	*(struct)
,	O
MU_DATETIME_FROM	*(char)
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
->	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
->	O
tz	*(struct(int,*(char)))
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_stream_flush	(*(struct))->(int)
(	O
str	*(struct)
)	O
;	O
if	O
(	O
pnwrite	*(long)
)	O
*	O
pnwrite	*(long)
=	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
[	O
MU_STREAM_STAT_OUT	int
]	O
;	O
rc	int
=	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
str	*(struct)
,	O
""	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
}	O
mu_stream_unref	(*(struct))->(void)
(	O
str	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_temp_envelope_sender	(*(struct),*(char),long,*(long))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
,	O
char	O
*	O
buf	*(char)
,	O
size_t	long
len	long
,	O
size_t	long
*	O
pnwrite	*(long)
)	O
{	O
struct	O
_temp_envelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char))
*	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
size_t	long
n	*(long)
=	O
mu_cpystr	(*(char),*(char),long)->(long)
(	O
buf	*(char)
,	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
->	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
len	long
)	O
;	O
if	O
(	O
pnwrite	*(long)
)	O
*	O
pnwrite	*(long)
=	O
n	*(long)
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_temp_envelope_destroy	(*(struct))->(int)
(	O
mu_envelope_t	*(struct)
envelope	*(struct)
)	O
{	O
struct	O
_temp_envelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char))
*	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
=	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
envelope	*(struct)
)	O
;	O
free	(*(void))->(void)
(	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
->	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
imap4d_append0	(*(struct),int,*(char),*(char),*(*(char)))->(int)
(	O
mu_mailbox_t	*(struct)
mbox	*(struct)
,	O
int	O
flags	int
,	O
char	O
*	O
date_time	*(char)
,	O
char	O
*	O
text	*(char)
,	O
char	O
*	O
*	O
err_text	*(char)
)	O
{	O
mu_stream_t	*(struct)
stream	*(struct)
;	O
int	O
rc	int
=	O
0	int
;	O
mu_message_t	*(struct)
msg	*(struct)
=	O
0	int
;	O
mu_envelope_t	*(struct)
env	*(struct)
=	O
NULL	O
;	O
size_t	long
size	*(long)
;	O
struct	O
_temp_envelope	struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char))
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
;	O
memset	(*(void),int,long)->(*(void))
(	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
,	O
0	int
,	O
sizeof	O
(	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
)	O
)	O
;	O
text	*(char)
=	O
mu_str_skip_class	(*(char),int)->(*(char))
(	O
text	*(char)
,	O
MU_CTYPE_BLANK	int
)	O
;	O
size	*(long)
=	O
strlen	(*(char))->(long)
(	O
text	*(char)
)	O
;	O
rc	int
=	O
quota_check	(long)->(int)
(	O
size	*(long)
)	O
;	O
if	O
(	O
rc	int
!=	O
RESP_OK	int
)	O
{	O
*	O
err_text	*(char)
=	O
rc	int
==	O
RESP_NO	int
?	O
"Mailbox quota exceeded"	*(char)
:	O
"Operation failed"	*(char)
;	O
return	O
1	int
;	O
}	O
if	O
(	O
date_time	*(char)
)	O
{	O
if	O
(	O
mu_scan_datetime	(*(char),*(char),*(struct(int,int,int,int,int,int,int,int,int,long,*(char))),*(struct(int,*(char))),*(*(char)))->(int)
(	O
date_time	*(char)
,	O
MU_DATETIME_INTERNALDATE	*(char)
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
.	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
.	O
tz	*(struct(int,*(char)))
,	O
NULL	O
)	O
)	O
{	O
*	O
err_text	*(char)
=	O
"Invalid date/time format"	*(char)
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_envelope_create	(*(*(struct)),*(void))->(int)
(	O
&	O
env	*(struct)
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
mu_envelope_set_date	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
env	*(struct)
,	O
_temp_envelope_date	(*(struct),*(char),long,*(long))->(int)
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
)	O
;	O
mu_envelope_set_sender	(*(struct),*((*(struct),*(char),long,*(long))->(int)),*(void))->(int)
(	O
env	*(struct)
,	O
_temp_envelope_sender	(*(struct),*(char),long,*(long))->(int)
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
)	O
;	O
mu_envelope_set_destroy	(*(struct),*((*(struct))->(int)),*(void))->(int)
(	O
env	*(struct)
,	O
_temp_envelope_destroy	(*(struct))->(int)
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
)	O
;	O
}	O
if	O
(	O
mu_static_memory_stream_create	(*(*(struct)),*(void),long)->(int)
(	O
&	O
stream	*(struct)
,	O
text	*(char)
,	O
size	*(long)
)	O
)	O
{	O
if	O
(	O
env	*(struct)
)	O
mu_envelope_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
env	*(struct)
,	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
env	*(struct)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
rc	int
=	O
mu_message_from_stream_with_envelope	(*(*(struct)),*(struct),*(struct))->(int)
(	O
&	O
msg	*(struct)
,	O
stream	*(struct)
,	O
env	*(struct)
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
stream	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
if	O
(	O
env	*(struct)
)	O
mu_envelope_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
env	*(struct)
,	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
env	*(struct)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
env	*(struct)
)	O
{	O
mu_header_t	*(struct)
hdr	*(struct)
=	O
NULL	O
;	O
char	O
*	O
val	array(int)
;	O
mu_message_get_header	(*(struct),*(*(struct)))->(int)
(	O
msg	*(struct)
,	O
&	O
hdr	*(struct)
)	O
;	O
if	O
(	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_ENV_SENDER	*(char)
,	O
&	O
val	array(int)
)	O
==	O
0	int
||	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_SENDER	*(char)
,	O
&	O
val	array(int)
)	O
==	O
0	int
||	O
mu_header_aget_value_unfold	O
(	O
hdr	*(struct)
,	O
MU_HEADER_FROM	*(char)
,	O
&	O
val	array(int)
)	O
==	O
0	int
)	O
{	O
mu_address_t	*(struct)
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
;	O
rc	int
=	O
mu_address_create	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))),*(char))->(int)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
val	array(int)
)	O
;	O
free	(*(void))->(void)
(	O
val	array(int)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
mu_address_aget_email	(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*`,*`,*`,*`,*`,*`,*`,*`)))),long,*(*(char)))->(int)
(	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
,	O
1	int
,	O
&	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
.	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
mu_address_destroy	(*(*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))->(void)
(	O
&	O
addr	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
;	O
}	O
}	O
if	O
(	O
!	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
.	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
)	O
tenv	*(struct(struct(int,int,int,int,int,int,int,int,int,long,*(char)),struct(int,*(char)),*(char)))
.	O
sender	*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct(*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`)))))
=	O
mu_strdup	(*(char))->(*(char))
(	O
"GNU-imap4d"	*(char)
)	O
;	O
}	O
imap4d_enter_critical	()->(void)
(	O
)	O
;	O
rc	int
=	O
mu_mailbox_append_message	(*(struct),*(struct))->(int)
(	O
mbox	*(struct)
,	O
msg	*(struct)
)	O
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
{	O
if	O
(	O
flags	int
)	O
{	O
size_t	long
num	long
=	O
0	int
;	O
mu_attribute_t	*(struct)
attr	*(struct)
=	O
NULL	O
;	O
mu_message_t	*(struct)
temp	*(struct)
;	O
mu_mailbox_messages_count	(*(struct),*(long))->(int)
(	O
mbox	*(struct)
,	O
&	O
num	long
)	O
;	O
mu_mailbox_get_message	(*(struct),long,*(*(struct)))->(int)
(	O
mbox	*(struct)
,	O
num	long
,	O
&	O
temp	*(struct)
)	O
;	O
mu_message_get_attribute	(*(struct),*(*(struct)))->(int)
(	O
temp	*(struct)
,	O
&	O
attr	*(struct)
)	O
;	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
flags	int
)	O
;	O
}	O
quota_update	(long)->(void)
(	O
size	*(long)
)	O
;	O
}	O
imap4d_leave_critical	()->(void)
(	O
)	O
;	O
mu_message_unref	(*(struct))->(void)
(	O
msg	*(struct)
)	O
;	O
if	O
(	O
env	*(struct)
)	O
mu_envelope_destroy	(*(*(struct)),*(void))->(void)
(	O
&	O
env	*(struct)
,	O
mu_envelope_get_owner	(*(struct))->(*(void))
(	O
env	*(struct)
)	O
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
imap4d_append	(*(struct(enum(int,int,int,int,int),*(struct(*`,*`,*`,*`)))),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)
(	O
struct	O
imap4d_session	struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char))))
*	O
session	*(struct(enum(int,int,int,int,int),*(struct(*(char),*(char),*(char),*(char)))))
,	O
struct	O
imap4d_command	struct(*(char),*((*(struct),*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),*(struct))->(int)),int,int,int,*(char))
*	O
command	*(char)
,	O
imap4d_tokbuf_t	*(struct)
tok	*(*(struct))
)	O
{	O
int	O
i	int
;	O
char	O
*	O
mboxname	*(char)
;	O
mu_record_t	*(struct)
record	*(struct)
;	O
int	O
flags	int
=	O
0	int
;	O
mu_mailbox_t	*(struct)
dest_mbox	*(struct)
=	O
NULL	O
;	O
int	O
status	int
;	O
int	O
argc	int
=	O
imap4d_tokbuf_argc	(*(struct))->(int)
(	O
tok	*(*(struct))
)	O
;	O
char	O
*	O
date_time	*(char)
;	O
char	O
*	O
msg_text	*(char)
;	O
char	O
*	O
err_text	*(char)
=	O
"[TRYCREATE] failed"	*(char)
;	O
if	O
(	O
argc	int
<	O
4	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Too few arguments"	*(char)
)	O
;	O
mboxname	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
IMAP4_ARG_1	int
)	O
;	O
if	O
(	O
!	O
mboxname	*(char)
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Too few arguments"	*(char)
)	O
;	O
i	int
=	O
IMAP4_ARG_2	int
;	O
if	O
(	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
i	int
)	O
[	O
0	int
]	O
==	O
'('	O
)	O
{	O
while	O
(	O
++	O
i	int
<	O
argc	int
)	O
{	O
char	O
*	O
arg	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
i	int
)	O
;	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
==	O
')'	O
)	O
break	O
;	O
if	O
(	O
mu_imap_flag_to_attribute	(*(char),*(int))->(int)
(	O
arg	*(char)
,	O
&	O
flags	int
)	O
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Unrecognized flag"	*(char)
)	O
;	O
}	O
if	O
(	O
i	int
==	O
argc	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Missing closing parenthesis"	*(char)
)	O
;	O
i	int
++	O
;	O
}	O
switch	O
(	O
argc	int
-	O
i	int
)	O
{	O
case	O
2	int
:	O
date_time	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
i	int
)	O
;	O
i	int
++	O
;	O
break	O
;	O
case	O
1	int
:	O
date_time	*(char)
=	O
NULL	O
;	O
break	O
;	O
default	O
:	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_BAD	int
,	O
"Too many arguments"	*(char)
)	O
;	O
}	O
msg_text	*(char)
=	O
imap4d_tokbuf_getarg	(*(struct),int)->(*(char))
(	O
tok	*(*(struct))
,	O
i	int
)	O
;	O
mboxname	*(char)
=	O
namespace_get_name	(*(char),*(*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int))))),*(int))->(*(char))
(	O
mboxname	*(char)
,	O
&	O
record	*(struct)
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
mboxname	*(char)
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_NO	int
,	O
"Couldn't open mailbox"	*(char)
)	O
;	O
status	int
=	O
mu_mailbox_create_from_record	(*(*(struct)),*(struct),*(char))->(int)
(	O
&	O
dest_mbox	*(struct)
,	O
record	*(struct)
,	O
mboxname	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
mu_mailbox_open	(*(struct),int)->(int)
(	O
dest_mbox	*(struct)
,	O
MU_STREAM_RDWR	O
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
{	O
status	int
=	O
imap4d_append0	(*(struct),int,*(char),*(char),*(*(char)))->(int)
(	O
dest_mbox	*(struct)
,	O
flags	int
,	O
date_time	*(char)
,	O
msg_text	*(char)
,	O
&	O
err_text	*(char)
)	O
;	O
mu_mailbox_close	(*(struct))->(int)
(	O
dest_mbox	*(struct)
)	O
;	O
}	O
mu_mailbox_destroy	(*(*(struct)))->(void)
(	O
&	O
dest_mbox	*(struct)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
mboxname	*(char)
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_OK	int
,	O
"Completed"	*(char)
)	O
;	O
return	O
io_completion_response	(*(struct(*(char),*((*`,*`,*`)->(int)),int,int,int,*(char))),int,*(char))->(int)
(	O
command	*(char)
,	O
RESP_NO	int
,	O
"%s"	*(char)
,	O
err_text	*(char)
)	O
;	O
}	O
