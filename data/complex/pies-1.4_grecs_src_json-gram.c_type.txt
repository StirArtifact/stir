struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_return_obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
extern	O
int	O
grecs_json_lex	()->(int)
(	O
void	O
)	O
;	O
static	O
int	O
grecs_json_error	(*(char))->(int)
(	O
char	O
const	O
*	O
s	*(char)
)	O
;	O
static	O
void	O
pairfree	(*(void))->(void)
(	O
void	O
*	O
ptr	*(void)
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
ptr	*(void)
;	O
grecs_free	(*(void))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
k	*(char)
)	O
;	O
json_value_free	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
free	(*(void))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
;	O
}	O
static	O
void	O
objfree	(*(void))->(void)
(	O
void	O
*	O
ptr	*(void)
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
o	*(struct)
=	O
ptr	*(void)
;	O
json_value_free	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
o	*(struct)
)	O
;	O
}	O
typedef	O
unsigned	O
char	O
grecs_json_type_uint8	char
;	O
typedef	O
signed	O
char	O
grecs_json_type_int8	char
;	O
typedef	O
unsigned	O
short	O
int	O
grecs_json_type_uint16	short
;	O
typedef	O
short	O
int	O
grecs_json_type_int16	short
;	O
union	O
grecs_json_alloc	union(short,union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`))))),struct(struct(*(char),int,int),struct(*(char),int,int)))
{	O
grecs_json_type_int16	short
grecs_json_ss_alloc	short
;	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
grecs_json_vs_alloc	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
;	O
YYLTYPE	O
grecs_json_ls_alloc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_translate	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
10	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
13	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
8	int
,	O
2	int
,	O
9	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
11	int
,	O
2	int
,	O
12	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
2	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
7	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_prhs	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
0	int
,	O
3	int
,	O
5	int
,	O
7	int
,	O
9	int
,	O
11	int
,	O
13	int
,	O
15	int
,	O
17	int
,	O
21	int
,	O
22	int
,	O
24	int
,	O
26	int
,	O
30	int
,	O
34	int
,	O
35	int
,	O
37	int
,	O
39	int
,	O
43	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_rhs	array(char)
[	O
]	O
=	O
{	O
15	int
,	O
0	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
3	int
,	O
-	O
1	int
,	O
4	int
,	O
-	O
1	int
,	O
5	int
,	O
-	O
1	int
,	O
6	int
,	O
-	O
1	int
,	O
17	int
,	O
-	O
1	int
,	O
20	int
,	O
-	O
1	int
,	O
8	int
,	O
18	int
,	O
9	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
19	int
,	O
-	O
1	int
,	O
16	int
,	O
-	O
1	int
,	O
19	int
,	O
10	int
,	O
16	int
,	O
-	O
1	int
,	O
11	int
,	O
21	int
,	O
12	int
,	O
-	O
1	int
,	O
-	O
1	int
,	O
22	int
,	O
-	O
1	int
,	O
23	int
,	O
-	O
1	int
,	O
22	int
,	O
10	int
,	O
23	int
,	O
-	O
1	int
,	O
4	int
,	O
13	int
,	O
16	int
,	O
-	O
1	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_rline	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
75	int
,	O
75	int
,	O
81	int
,	O
86	int
,	O
91	int
,	O
96	int
,	O
100	int
,	O
101	int
,	O
108	int
,	O
116	int
,	O
119	int
,	O
122	int
,	O
127	int
,	O
133	int
,	O
156	int
,	O
159	int
,	O
162	int
,	O
168	int
,	O
174	int
}	O
;	O
static	O
const	O
char	O
*	O
const	O
grecs_json_tname	array(*(char))
[	O
]	O
=	O
{	O
"$end"	*(char)
,	O
"error"	*(char)
,	O
"$undefined"	*(char)
,	O
"T_NUMBER"	*(char)
,	O
"T_STRING"	*(char)
,	O
"T_BOOL"	*(char)
,	O
"T_NULL"	*(char)
,	O
"T_ERR"	*(char)
,	O
"'['"	*(char)
,	O
"']'"	*(char)
,	O
"','"	*(char)
,	O
"'{'"	*(char)
,	O
"'}'"	*(char)
,	O
"':'"	*(char)
,	O
"$accept"	*(char)
,	O
"input"	*(char)
,	O
"object"	*(char)
,	O
"array"	*(char)
,	O
"objects"	*(char)
,	O
"objlist"	*(char)
,	O
"assoc"	*(char)
,	O
"pairs"	*(char)
,	O
"pairlist"	*(char)
,	O
"pair"	*(char)
,	O
YY_NULL	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_r1	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
14	int
,	O
15	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
16	int
,	O
17	int
,	O
18	int
,	O
18	int
,	O
19	int
,	O
19	int
,	O
20	int
,	O
21	int
,	O
21	int
,	O
22	int
,	O
22	int
,	O
23	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_r2	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
2	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
,	O
0	int
,	O
1	int
,	O
1	int
,	O
3	int
,	O
3	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_defact	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
10	int
,	O
15	int
,	O
0	int
,	O
2	int
,	O
7	int
,	O
8	int
,	O
12	int
,	O
0	int
,	O
11	int
,	O
0	int
,	O
0	int
,	O
16	int
,	O
17	int
,	O
1	int
,	O
9	int
,	O
0	int
,	O
0	int
,	O
14	int
,	O
0	int
,	O
13	int
,	O
19	int
,	O
18	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_defgoto	array(char)
[	O
]	O
=	O
{	O
-	O
1	int
,	O
7	int
,	O
8	int
,	O
9	int
,	O
12	int
,	O
13	int
,	O
10	int
,	O
15	int
,	O
16	int
,	O
17	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_pact	array(char)
[	O
]	O
=	O
{	O
-	O
2	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
2	int
,	O
1	int
,	O
7	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
1	int
,	O
0	int
,	O
4	int
,	O
2	int
,	O
3	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
2	int
,	O
-	O
2	int
,	O
-	O
13	int
,	O
1	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_pgoto	array(char)
[	O
]	O
=	O
{	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
5	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
13	int
,	O
-	O
12	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_table	array(char)
[	O
]	O
=	O
{	O
11	int
,	O
1	int
,	O
2	int
,	O
3	int
,	O
4	int
,	O
14	int
,	O
5	int
,	O
18	int
,	O
19	int
,	O
6	int
,	O
20	int
,	O
26	int
,	O
0	int
,	O
23	int
,	O
22	int
,	O
24	int
,	O
25	int
,	O
21	int
}	O
;	O
static	O
const	O
grecs_json_type_int8	char
grecs_json_check	array(char)
[	O
]	O
=	O
{	O
5	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
4	int
,	O
8	int
,	O
0	int
,	O
9	int
,	O
11	int
,	O
10	int
,	O
23	int
,	O
-	O
1	int
,	O
10	int
,	O
12	int
,	O
20	int
,	O
21	int
,	O
13	int
}	O
;	O
static	O
const	O
grecs_json_type_uint8	char
grecs_json_stos	array(char)
[	O
]	O
=	O
{	O
0	int
,	O
3	int
,	O
4	int
,	O
5	int
,	O
6	int
,	O
8	int
,	O
11	int
,	O
15	int
,	O
16	int
,	O
17	int
,	O
20	int
,	O
16	int
,	O
18	int
,	O
19	int
,	O
4	int
,	O
21	int
,	O
22	int
,	O
23	int
,	O
0	int
,	O
9	int
,	O
10	int
,	O
13	int
,	O
12	int
,	O
10	int
,	O
16	int
,	O
16	int
,	O
23	int
}	O
;	O
static	O
void	O
grecs_json__symbol_value_print	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
FILE	struct
*	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
grecs_json_type	int
,	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
const	O
*	O
const	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
YYLTYPE	O
const	O
*	O
const	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
{	O
FILE	struct
*	O
grecs_json_o	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
YYUSE	O
(	O
grecs_json_o	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
!	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
)	O
return	O
;	O
YYUSE	O
(	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
YYUSE	O
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
switch	O
(	O
grecs_json_type	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
static	O
void	O
grecs_json__symbol_print	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
FILE	struct
*	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
int	O
grecs_json_type	int
,	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
const	O
*	O
const	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
YYLTYPE	O
const	O
*	O
const	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
{	O
if	O
(	O
grecs_json_type	int
<	O
YYNTOKENS	int
)	O
YYFPRINTF	O
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"token %s ("	*(char)
,	O
grecs_json_tname	array(*(char))
[	O
grecs_json_type	int
]	O
)	O
;	O
else	O
YYFPRINTF	O
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"nterm %s ("	*(char)
,	O
grecs_json_tname	array(*(char))
[	O
grecs_json_type	int
]	O
)	O
;	O
YY_LOCATION_PRINT	O
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
*	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
YYFPRINTF	O
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
": "	*(char)
)	O
;	O
grecs_json__symbol_value_print	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
grecs_json_type	int
,	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
YYFPRINTF	O
(	O
grecs_json_output	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
")"	*(char)
)	O
;	O
}	O
static	O
void	O
grecs_json__stack_print	(*(short),*(short))->(void)
(	O
grecs_json_type_int16	short
*	O
grecs_json_bottom	*(short)
,	O
grecs_json_type_int16	short
*	O
grecs_json_top	*(short)
)	O
{	O
YYFPRINTF	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Stack now"	*(char)
)	O
;	O
for	O
(	O
;	O
grecs_json_bottom	*(short)
<=	O
grecs_json_top	*(short)
;	O
grecs_json_bottom	*(short)
++	O
)	O
{	O
int	O
grecs_json_bot	int
=	O
*	O
grecs_json_bottom	*(short)
;	O
YYFPRINTF	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
" %d"	*(char)
,	O
grecs_json_bot	int
)	O
;	O
}	O
YYFPRINTF	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
}	O
static	O
void	O
grecs_json__reduce_print	(*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))),int)->(void)
(	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
*	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
YYLTYPE	O
*	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
,	O
int	O
grecs_json_rule	int
)	O
{	O
int	O
grecs_json_nrhs	int
=	O
grecs_json_r2	array(char)
[	O
grecs_json_rule	int
]	O
;	O
int	O
grecs_json_i	int
;	O
unsigned	O
long	O
int	O
grecs_json_lno	long
=	O
grecs_json_rline	array(char)
[	O
grecs_json_rule	int
]	O
;	O
YYFPRINTF	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Reducing stack by rule %d (line %lu):\n"	*(char)
,	O
grecs_json_rule	int
-	O
1	int
,	O
grecs_json_lno	long
)	O
;	O
for	O
(	O
grecs_json_i	int
=	O
0	int
;	O
grecs_json_i	int
<	O
grecs_json_nrhs	int
;	O
grecs_json_i	int
++	O
)	O
{	O
YYFPRINTF	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"   $%d = "	*(char)
,	O
grecs_json_i	int
+	O
1	int
)	O
;	O
grecs_json__symbol_print	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
grecs_json_rhs	array(char)
[	O
grecs_json_prhs	array(char)
[	O
grecs_json_rule	int
]	O
+	O
grecs_json_i	int
]	O
,	O
&	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
grecs_json_i	int
+	O
1	int
)	O
-	O
(	O
grecs_json_nrhs	int
)	O
]	O
)	O
,	O
&	O
(	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
(	O
grecs_json_i	int
+	O
1	int
)	O
-	O
(	O
grecs_json_nrhs	int
)	O
]	O
)	O
)	O
;	O
YYFPRINTF	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"\n"	*(char)
)	O
;	O
}	O
}	O
int	O
grecs_json_debug	int
;	O
static	O
YYSIZE_T	O
grecs_json_tnamerr	(*(char),*(char))->(long)
(	O
char	O
*	O
grecs_json_res	*(char)
,	O
const	O
char	O
*	O
grecs_json_str	*(char)
)	O
{	O
if	O
(	O
*	O
grecs_json_str	*(char)
==	O
'"'	O
)	O
{	O
YYSIZE_T	O
grecs_json_n	long
=	O
0	int
;	O
char	O
const	O
*	O
grecs_json_p	*(char)
=	O
grecs_json_str	*(char)
;	O
for	O
(	O
;	O
;	O
)	O
switch	O
(	O
*	O
++	O
grecs_json_p	*(char)
)	O
{	O
case	O
'\''	O
:	O
case	O
','	O
:	O
goto	O
do_not_strip_quotes	O
;	O
case	O
'\\'	O
:	O
if	O
(	O
*	O
++	O
grecs_json_p	*(char)
!=	O
'\\'	O
)	O
goto	O
do_not_strip_quotes	O
;	O
default	O
:	O
if	O
(	O
grecs_json_res	*(char)
)	O
grecs_json_res	*(char)
[	O
grecs_json_n	long
]	O
=	O
*	O
grecs_json_p	*(char)
;	O
grecs_json_n	long
++	O
;	O
break	O
;	O
case	O
'"'	O
:	O
if	O
(	O
grecs_json_res	*(char)
)	O
grecs_json_res	*(char)
[	O
grecs_json_n	long
]	O
=	O
'\0'	O
;	O
return	O
grecs_json_n	long
;	O
}	O
do_not_strip_quotes	O
:	O
;	O
}	O
if	O
(	O
!	O
grecs_json_res	*(char)
)	O
return	O
grecs_json_strlen	O
(	O
grecs_json_str	*(char)
)	O
;	O
return	O
grecs_json_stpcpy	O
(	O
grecs_json_res	*(char)
,	O
grecs_json_str	*(char)
)	O
-	O
grecs_json_res	*(char)
;	O
}	O
static	O
int	O
grecs_json_syntax_error	(*(long),*(*(char)),*(short),int)->(int)
(	O
YYSIZE_T	O
*	O
grecs_json_msg_alloc	*(long)
,	O
char	O
*	O
*	O
grecs_json_msg	*(*(char))
,	O
grecs_json_type_int16	short
*	O
grecs_json_ssp	*(short)
,	O
int	O
grecs_json_token	int
)	O
{	O
YYSIZE_T	O
grecs_json_size0	long
=	O
grecs_json_tnamerr	(*(char),*(char))->(long)
(	O
YY_NULL	int
,	O
grecs_json_tname	array(*(char))
[	O
grecs_json_token	int
]	O
)	O
;	O
YYSIZE_T	O
grecs_json_size	long
=	O
grecs_json_size0	long
;	O
enum	O
{	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
=	O
5	int
}	O
;	O
const	O
char	O
*	O
grecs_json_format	*(char)
=	O
YY_NULL	int
;	O
char	O
const	O
*	O
grecs_json_arg	array(*(char))
[	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
]	O
;	O
int	O
grecs_json_count	int
=	O
0	int
;	O
if	O
(	O
grecs_json_token	int
!=	O
YYEMPTY	O
)	O
{	O
int	O
grecs_json_n	long
=	O
grecs_json_pact	array(char)
[	O
*	O
grecs_json_ssp	*(short)
]	O
;	O
grecs_json_arg	array(*(char))
[	O
grecs_json_count	int
++	O
]	O
=	O
grecs_json_tname	array(*(char))
[	O
grecs_json_token	int
]	O
;	O
if	O
(	O
!	O
grecs_json_pact_value_is_default	O
(	O
grecs_json_n	long
)	O
)	O
{	O
int	O
grecs_json_xbegin	int
=	O
grecs_json_n	long
<	O
0	int
?	O
-	O
grecs_json_n	long
:	O
0	int
;	O
int	O
grecs_json_checklim	int
=	O
YYLAST	int
-	O
grecs_json_n	long
+	O
1	int
;	O
int	O
grecs_json_xend	int
=	O
grecs_json_checklim	int
<	O
YYNTOKENS	int
?	O
grecs_json_checklim	int
:	O
YYNTOKENS	int
;	O
int	O
grecs_json_x	int
;	O
for	O
(	O
grecs_json_x	int
=	O
grecs_json_xbegin	int
;	O
grecs_json_x	int
<	O
grecs_json_xend	int
;	O
++	O
grecs_json_x	int
)	O
if	O
(	O
grecs_json_check	array(char)
[	O
grecs_json_x	int
+	O
grecs_json_n	long
]	O
==	O
grecs_json_x	int
&&	O
grecs_json_x	int
!=	O
YYTERROR	int
&&	O
!	O
grecs_json_table_value_is_error	O
(	O
grecs_json_table	array(char)
[	O
grecs_json_x	int
+	O
grecs_json_n	long
]	O
)	O
)	O
{	O
if	O
(	O
grecs_json_count	int
==	O
YYERROR_VERBOSE_ARGS_MAXIMUM	int
)	O
{	O
grecs_json_count	int
=	O
1	int
;	O
grecs_json_size	long
=	O
grecs_json_size0	long
;	O
break	O
;	O
}	O
grecs_json_arg	array(*(char))
[	O
grecs_json_count	int
++	O
]	O
=	O
grecs_json_tname	array(*(char))
[	O
grecs_json_x	int
]	O
;	O
{	O
YYSIZE_T	O
grecs_json_size1	long
=	O
grecs_json_size	long
+	O
grecs_json_tnamerr	(*(char),*(char))->(long)
(	O
YY_NULL	int
,	O
grecs_json_tname	array(*(char))
[	O
grecs_json_x	int
]	O
)	O
;	O
if	O
(	O
!	O
(	O
grecs_json_size	long
<=	O
grecs_json_size1	long
&&	O
grecs_json_size1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
grecs_json_size	long
=	O
grecs_json_size1	long
;	O
}	O
}	O
}	O
}	O
switch	O
(	O
grecs_json_count	int
)	O
{	O
YYCASE_	O
(	O
0	int
,	O
YY_	O
(	O
"syntax error"	*(char)
)	O
)	O
;	O
YYCASE_	O
(	O
1	int
,	O
YY_	O
(	O
"syntax error, unexpected %s"	*(char)
)	O
)	O
;	O
YYCASE_	O
(	O
2	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s"	*(char)
)	O
)	O
;	O
YYCASE_	O
(	O
3	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s"	*(char)
)	O
)	O
;	O
YYCASE_	O
(	O
4	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s"	*(char)
)	O
)	O
;	O
YYCASE_	O
(	O
5	int
,	O
YY_	O
(	O
"syntax error, unexpected %s, expecting %s or %s or %s or %s"	*(char)
)	O
)	O
;	O
}	O
{	O
YYSIZE_T	O
grecs_json_size1	long
=	O
grecs_json_size	long
+	O
grecs_json_strlen	O
(	O
grecs_json_format	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
grecs_json_size	long
<=	O
grecs_json_size1	long
&&	O
grecs_json_size1	long
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
return	O
2	int
;	O
grecs_json_size	long
=	O
grecs_json_size1	long
;	O
}	O
if	O
(	O
*	O
grecs_json_msg_alloc	*(long)
<	O
grecs_json_size	long
)	O
{	O
*	O
grecs_json_msg_alloc	*(long)
=	O
2	int
*	O
grecs_json_size	long
;	O
if	O
(	O
!	O
(	O
grecs_json_size	long
<=	O
*	O
grecs_json_msg_alloc	*(long)
&&	O
*	O
grecs_json_msg_alloc	*(long)
<=	O
YYSTACK_ALLOC_MAXIMUM	O
)	O
)	O
*	O
grecs_json_msg_alloc	*(long)
=	O
YYSTACK_ALLOC_MAXIMUM	O
;	O
return	O
1	int
;	O
}	O
{	O
char	O
*	O
grecs_json_p	*(char)
=	O
*	O
grecs_json_msg	*(*(char))
;	O
int	O
grecs_json_i	int
=	O
0	int
;	O
while	O
(	O
(	O
*	O
grecs_json_p	*(char)
=	O
*	O
grecs_json_format	*(char)
)	O
!=	O
'\0'	O
)	O
if	O
(	O
*	O
grecs_json_p	*(char)
==	O
'%'	O
&&	O
grecs_json_format	*(char)
[	O
1	int
]	O
==	O
's'	O
&&	O
grecs_json_i	int
<	O
grecs_json_count	int
)	O
{	O
grecs_json_p	*(char)
+=	O
grecs_json_tnamerr	(*(char),*(char))->(long)
(	O
grecs_json_p	*(char)
,	O
grecs_json_arg	array(*(char))
[	O
grecs_json_i	int
++	O
]	O
)	O
;	O
grecs_json_format	*(char)
+=	O
2	int
;	O
}	O
else	O
{	O
grecs_json_p	*(char)
++	O
;	O
grecs_json_format	*(char)
++	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
static	O
void	O
grecs_json_destruct	(*(char),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
const	O
char	O
*	O
grecs_json_msg	*(*(char))
,	O
int	O
grecs_json_type	int
,	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
*	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
YYLTYPE	O
*	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
{	O
YYUSE	O
(	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
)	O
;	O
YYUSE	O
(	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
if	O
(	O
!	O
grecs_json_msg	*(*(char))
)	O
grecs_json_msg	*(*(char))
=	O
"Deleting"	*(char)
;	O
YY_SYMBOL_PRINT	O
(	O
grecs_json_msg	*(*(char))
,	O
grecs_json_type	int
,	O
grecs_json_valuep	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
grecs_json_locationp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
switch	O
(	O
grecs_json_type	int
)	O
{	O
default	O
:	O
break	O
;	O
}	O
}	O
int	O
grecs_json_char	int
;	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
YY_INITIAL_VALUE	O
(	O
grecs_json_val_default	O
)	O
;	O
YYLTYPE	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
int	O
grecs_json_nerrs	int
;	O
int	O
grecs_json_parse	()->(int)
(	O
void	O
)	O
{	O
int	O
grecs_json_state	int
;	O
int	O
grecs_json_errstatus	int
;	O
grecs_json_type_int16	short
grecs_json_ssa	array(short)
[	O
YYINITDEPTH	int
]	O
;	O
grecs_json_type_int16	short
*	O
grecs_json_ss	*(short)
;	O
grecs_json_type_int16	short
*	O
grecs_json_ssp	*(short)
;	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
grecs_json_vsa	array(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`))))))
[	O
YYINITDEPTH	int
]	O
;	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
*	O
grecs_json_vs	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
;	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
*	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
;	O
YYLTYPE	O
grecs_json_lsa	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
YYINITDEPTH	int
]	O
;	O
YYLTYPE	O
*	O
grecs_json_ls	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
;	O
YYLTYPE	O
*	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
;	O
YYLTYPE	O
grecs_json_error_range	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
3	int
]	O
;	O
YYSIZE_T	O
grecs_json_stacksize	long
;	O
int	O
grecs_json_n	long
;	O
int	O
grecs_json_result	int
;	O
int	O
grecs_json_token	int
=	O
0	int
;	O
YYSTYPE	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))),*(struct))
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
;	O
YYLTYPE	O
grecs_json_loc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
char	O
grecs_json_msgbuf	array(char)
[	O
128	int
]	O
;	O
char	O
*	O
grecs_json_msg	*(*(char))
=	O
grecs_json_msgbuf	array(char)
;	O
YYSIZE_T	O
grecs_json_msg_alloc	*(long)
=	O
sizeof	O
grecs_json_msgbuf	array(char)
;	O
int	O
grecs_json_len	int
=	O
0	int
;	O
grecs_json_ssp	*(short)
=	O
grecs_json_ss	*(short)
=	O
grecs_json_ssa	array(short)
;	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
=	O
grecs_json_vs	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
=	O
grecs_json_vsa	array(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`))))))
;	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
grecs_json_ls	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
grecs_json_lsa	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
;	O
grecs_json_stacksize	long
=	O
YYINITDEPTH	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Starting parse\n"	*(char)
)	O
)	O
;	O
grecs_json_state	int
=	O
0	int
;	O
grecs_json_errstatus	int
=	O
0	int
;	O
grecs_json_nerrs	int
=	O
0	int
;	O
grecs_json_char	int
=	O
YYEMPTY	O
;	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
0	int
]	O
=	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
goto	O
grecs_json_setstate	O
;	O
grecs_json_newstate	O
:	O
grecs_json_ssp	*(short)
++	O
;	O
grecs_json_setstate	O
:	O
*	O
grecs_json_ssp	*(short)
=	O
grecs_json_state	int
;	O
if	O
(	O
grecs_json_ss	*(short)
+	O
grecs_json_stacksize	long
-	O
1	int
<=	O
grecs_json_ssp	*(short)
)	O
{	O
YYSIZE_T	O
grecs_json_size	long
=	O
grecs_json_ssp	*(short)
-	O
grecs_json_ss	*(short)
+	O
1	int
;	O
if	O
(	O
YYMAXDEPTH	int
<=	O
grecs_json_stacksize	long
)	O
goto	O
grecs_json_exhaustedlab	O
;	O
grecs_json_stacksize	long
*=	O
2	int
;	O
if	O
(	O
YYMAXDEPTH	int
<	O
grecs_json_stacksize	long
)	O
grecs_json_stacksize	long
=	O
YYMAXDEPTH	int
;	O
{	O
grecs_json_type_int16	short
*	O
grecs_json_ss1	*(short)
=	O
grecs_json_ss	*(short)
;	O
union	O
grecs_json_alloc	union(short,union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`))))),struct(struct(*(char),int,int),struct(*(char),int,int)))
*	O
grecs_json_ptr	*(union(short,union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`))),struct(struct(*(char),int,int),struct(*(char),int,int))))
=	O
(	O
union	O
grecs_json_alloc	union(short,union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`))))),struct(struct(*(char),int,int),struct(*(char),int,int)))
*	O
)	O
YYSTACK_ALLOC	O
(	O
YYSTACK_BYTES	O
(	O
grecs_json_stacksize	long
)	O
)	O
;	O
if	O
(	O
!	O
grecs_json_ptr	*(union(short,union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`))),struct(struct(*(char),int,int),struct(*(char),int,int))))
)	O
goto	O
grecs_json_exhaustedlab	O
;	O
YYSTACK_RELOCATE	O
(	O
grecs_json_ss_alloc	short
,	O
grecs_json_ss	*(short)
)	O
;	O
YYSTACK_RELOCATE	O
(	O
grecs_json_vs_alloc	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
,	O
grecs_json_vs	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
)	O
;	O
YYSTACK_RELOCATE	O
(	O
grecs_json_ls_alloc	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
grecs_json_ls	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
if	O
(	O
grecs_json_ss1	*(short)
!=	O
grecs_json_ssa	array(short)
)	O
YYSTACK_FREE	O
(	O
grecs_json_ss1	*(short)
)	O
;	O
}	O
grecs_json_ssp	*(short)
=	O
grecs_json_ss	*(short)
+	O
grecs_json_size	long
-	O
1	int
;	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
=	O
grecs_json_vs	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
+	O
grecs_json_size	long
-	O
1	int
;	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
grecs_json_ls	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
+	O
grecs_json_size	long
-	O
1	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Stack size increased to %lu\n"	*(char)
,	O
(	O
unsigned	O
long	O
int	O
)	O
grecs_json_stacksize	long
)	O
)	O
;	O
if	O
(	O
grecs_json_ss	*(short)
+	O
grecs_json_stacksize	long
-	O
1	int
<=	O
grecs_json_ssp	*(short)
)	O
YYABORT	O
;	O
}	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Entering state %d\n"	*(char)
,	O
grecs_json_state	int
)	O
)	O
;	O
if	O
(	O
grecs_json_state	int
==	O
YYFINAL	int
)	O
YYACCEPT	O
;	O
goto	O
grecs_json_backup	O
;	O
grecs_json_backup	O
:	O
grecs_json_n	long
=	O
grecs_json_pact	array(char)
[	O
grecs_json_state	int
]	O
;	O
if	O
(	O
grecs_json_pact_value_is_default	O
(	O
grecs_json_n	long
)	O
)	O
goto	O
grecs_json_default	O
;	O
if	O
(	O
grecs_json_char	int
==	O
YYEMPTY	O
)	O
{	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Reading a token: "	*(char)
)	O
)	O
;	O
grecs_json_char	int
=	O
YYLEX	O
;	O
}	O
if	O
(	O
grecs_json_char	int
<=	O
YYEOF	int
)	O
{	O
grecs_json_char	int
=	O
grecs_json_token	int
=	O
YYEOF	int
;	O
YYDPRINTF	O
(	O
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"Now at end of input.\n"	*(char)
)	O
)	O
;	O
}	O
else	O
{	O
grecs_json_token	int
=	O
YYTRANSLATE	O
(	O
grecs_json_char	int
)	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Next token is"	*(char)
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
,	O
&	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
}	O
grecs_json_n	long
+=	O
grecs_json_token	int
;	O
if	O
(	O
grecs_json_n	long
<	O
0	int
||	O
YYLAST	int
<	O
grecs_json_n	long
||	O
grecs_json_check	array(char)
[	O
grecs_json_n	long
]	O
!=	O
grecs_json_token	int
)	O
goto	O
grecs_json_default	O
;	O
grecs_json_n	long
=	O
grecs_json_table	array(char)
[	O
grecs_json_n	long
]	O
;	O
if	O
(	O
grecs_json_n	long
<=	O
0	int
)	O
{	O
if	O
(	O
grecs_json_table_value_is_error	O
(	O
grecs_json_n	long
)	O
)	O
goto	O
grecs_json_errlab	O
;	O
grecs_json_n	long
=	O
-	O
grecs_json_n	long
;	O
goto	O
grecs_json_reduce	O
;	O
}	O
if	O
(	O
grecs_json_errstatus	int
)	O
grecs_json_errstatus	int
--	O
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	*(char)
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
,	O
&	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
grecs_json_char	int
=	O
YYEMPTY	O
;	O
grecs_json_state	int
=	O
grecs_json_n	long
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
=	O
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
*	O
++	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
goto	O
grecs_json_newstate	O
;	O
grecs_json_default	O
:	O
grecs_json_n	long
=	O
grecs_json_defact	array(char)
[	O
grecs_json_state	int
]	O
;	O
if	O
(	O
grecs_json_n	long
==	O
0	int
)	O
goto	O
grecs_json_errlab	O
;	O
goto	O
grecs_json_reduce	O
;	O
grecs_json_reduce	O
:	O
grecs_json_len	int
=	O
grecs_json_r2	array(char)
[	O
grecs_json_n	long
]	O
;	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
=	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
1	int
-	O
grecs_json_len	int
]	O
;	O
YYLLOC_DEFAULT	O
(	O
grecs_json_loc	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
(	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
-	O
grecs_json_len	int
)	O
,	O
grecs_json_len	int
)	O
;	O
YY_REDUCE_PRINT	O
(	O
grecs_json_n	long
)	O
;	O
switch	O
(	O
grecs_json_n	long
)	O
{	O
case	O
2	int
:	O
{	O
json_return_obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
obj	*(struct)
)	O
;	O
}	O
break	O
;	O
case	O
3	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_number	int
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
n	long
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
n	long
)	O
;	O
}	O
break	O
;	O
case	O
4	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_string	int
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
s	*(char)
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
s	*(char)
)	O
;	O
}	O
break	O
;	O
case	O
5	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_bool	int
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
}	O
break	O
;	O
case	O
6	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_null	int
)	O
;	O
}	O
break	O
;	O
case	O
8	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_object	int
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
o	*(struct)
)	O
;	O
}	O
break	O
;	O
case	O
9	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
=	O
json_new_array	()->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
obj	*(struct)
)	O
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
break	O
;	O
case	O
10	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
12	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
,	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
obj	*(struct)
)	O
)	O
;	O
}	O
break	O
;	O
case	O
13	int
:	O
{	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
,	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
obj	*(struct)
)	O
)	O
;	O
}	O
break	O
;	O
case	O
14	int
:	O
{	O
struct	O
grecs_symtab	O
*	O
s	*(char)
;	O
s	*(char)
=	O
json_assoc_create	()->(*(struct))
(	O
)	O
;	O
if	O
(	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
)	O
{	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
;	O
int	O
install	*(int)
=	O
1	int
;	O
grecs_symtab_lookup_or_install	(*(struct),*(void),*(int))->(*(void))
(	O
s	*(char)
,	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
,	O
&	O
install	*(int)
)	O
;	O
if	O
(	O
install	*(int)
)	O
{	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
k	*(char)
=	O
NULL	O
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
NULL	O
;	O
}	O
}	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
2	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
)	O
;	O
}	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
o	*(struct)
)	O
=	O
s	*(char)
;	O
}	O
break	O
;	O
case	O
15	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
=	O
NULL	O
;	O
}	O
break	O
;	O
case	O
17	int
:	O
{	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
->	O
free_entry	*((*(void))->(void))
=	O
pairfree	(*(void))->(void)
;	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
,	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
1	int
)	O
]	O
.	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
)	O
;	O
}	O
break	O
;	O
case	O
18	int
:	O
{	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
,	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
)	O
;	O
}	O
break	O
;	O
case	O
19	int
:	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
grecs_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
)	O
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
k	*(char)
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
1	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
s	*(char)
)	O
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
(	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
[	O
(	O
3	int
)	O
-	O
(	O
3	int
)	O
]	O
.	O
obj	*(struct)
)	O
;	O
(	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
.	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
}	O
break	O
;	O
default	O
:	O
break	O
;	O
}	O
YY_SYMBOL_PRINT	O
(	O
"-> $$ ="	*(char)
,	O
grecs_json_r1	array(char)
[	O
grecs_json_n	long
]	O
,	O
&	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
,	O
&	O
grecs_json_loc	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
YYPOPSTACK	O
(	O
grecs_json_len	int
)	O
;	O
grecs_json_len	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	*(short)
,	O
grecs_json_ssp	*(short)
)	O
;	O
*	O
++	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
=	O
grecs_json_val	union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union`)))))
;	O
*	O
++	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
grecs_json_loc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
grecs_json_n	long
=	O
grecs_json_r1	array(char)
[	O
grecs_json_n	long
]	O
;	O
grecs_json_state	int
=	O
grecs_json_pgoto	array(char)
[	O
grecs_json_n	long
-	O
YYNTOKENS	int
]	O
+	O
*	O
grecs_json_ssp	*(short)
;	O
if	O
(	O
0	int
<=	O
grecs_json_state	int
&&	O
grecs_json_state	int
<=	O
YYLAST	int
&&	O
grecs_json_check	array(char)
[	O
grecs_json_state	int
]	O
==	O
*	O
grecs_json_ssp	*(short)
)	O
grecs_json_state	int
=	O
grecs_json_table	array(char)
[	O
grecs_json_state	int
]	O
;	O
else	O
grecs_json_state	int
=	O
grecs_json_defgoto	array(char)
[	O
grecs_json_n	long
-	O
YYNTOKENS	int
]	O
;	O
goto	O
grecs_json_newstate	O
;	O
grecs_json_errlab	O
:	O
grecs_json_token	int
=	O
grecs_json_char	int
==	O
YYEMPTY	O
?	O
YYEMPTY	O
:	O
YYTRANSLATE	O
(	O
grecs_json_char	int
)	O
;	O
if	O
(	O
!	O
grecs_json_errstatus	int
)	O
{	O
++	O
grecs_json_nerrs	int
;	O
{	O
char	O
const	O
*	O
grecs_json_msgp	*(char)
=	O
YY_	O
(	O
"syntax error"	*(char)
)	O
;	O
int	O
grecs_json_syntax_error_status	int
;	O
grecs_json_syntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
if	O
(	O
grecs_json_syntax_error_status	int
==	O
0	int
)	O
grecs_json_msgp	*(char)
=	O
grecs_json_msg	*(*(char))
;	O
else	O
if	O
(	O
grecs_json_syntax_error_status	int
==	O
1	int
)	O
{	O
if	O
(	O
grecs_json_msg	*(*(char))
!=	O
grecs_json_msgbuf	array(char)
)	O
YYSTACK_FREE	O
(	O
grecs_json_msg	*(*(char))
)	O
;	O
grecs_json_msg	*(*(char))
=	O
(	O
char	O
*	O
)	O
YYSTACK_ALLOC	O
(	O
grecs_json_msg_alloc	*(long)
)	O
;	O
if	O
(	O
!	O
grecs_json_msg	*(*(char))
)	O
{	O
grecs_json_msg	*(*(char))
=	O
grecs_json_msgbuf	array(char)
;	O
grecs_json_msg_alloc	*(long)
=	O
sizeof	O
grecs_json_msgbuf	array(char)
;	O
grecs_json_syntax_error_status	int
=	O
2	int
;	O
}	O
else	O
{	O
grecs_json_syntax_error_status	int
=	O
YYSYNTAX_ERROR	O
;	O
grecs_json_msgp	*(char)
=	O
grecs_json_msg	*(*(char))
;	O
}	O
}	O
grecs_json_error	(*(char))->(int)
(	O
grecs_json_msgp	*(char)
)	O
;	O
if	O
(	O
grecs_json_syntax_error_status	int
==	O
2	int
)	O
goto	O
grecs_json_exhaustedlab	O
;	O
}	O
}	O
grecs_json_error_range	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
1	int
]	O
=	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
if	O
(	O
grecs_json_errstatus	int
==	O
3	int
)	O
{	O
if	O
(	O
grecs_json_char	int
<=	O
YYEOF	int
)	O
{	O
if	O
(	O
grecs_json_char	int
==	O
YYEOF	int
)	O
YYABORT	O
;	O
}	O
else	O
{	O
grecs_json_destruct	(*(char),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
"Error: discarding"	*(char)
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
,	O
&	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
grecs_json_char	int
=	O
YYEMPTY	O
;	O
}	O
}	O
goto	O
grecs_json_errlab1	O
;	O
grecs_json_errorlab	O
:	O
if	O
(	O
0	int
)	O
goto	O
grecs_json_errorlab	O
;	O
grecs_json_error_range	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
1	int
]	O
=	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
1	int
-	O
grecs_json_len	int
]	O
;	O
YYPOPSTACK	O
(	O
grecs_json_len	int
)	O
;	O
grecs_json_len	int
=	O
0	int
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	*(short)
,	O
grecs_json_ssp	*(short)
)	O
;	O
grecs_json_state	int
=	O
*	O
grecs_json_ssp	*(short)
;	O
goto	O
grecs_json_errlab1	O
;	O
grecs_json_errlab1	O
:	O
grecs_json_errstatus	int
=	O
3	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
grecs_json_n	long
=	O
grecs_json_pact	array(char)
[	O
grecs_json_state	int
]	O
;	O
if	O
(	O
!	O
grecs_json_pact_value_is_default	O
(	O
grecs_json_n	long
)	O
)	O
{	O
grecs_json_n	long
+=	O
YYTERROR	int
;	O
if	O
(	O
0	int
<=	O
grecs_json_n	long
&&	O
grecs_json_n	long
<=	O
YYLAST	int
&&	O
grecs_json_check	array(char)
[	O
grecs_json_n	long
]	O
==	O
YYTERROR	int
)	O
{	O
grecs_json_n	long
=	O
grecs_json_table	array(char)
[	O
grecs_json_n	long
]	O
;	O
if	O
(	O
0	int
<	O
grecs_json_n	long
)	O
break	O
;	O
}	O
}	O
if	O
(	O
grecs_json_ssp	*(short)
==	O
grecs_json_ss	*(short)
)	O
YYABORT	O
;	O
grecs_json_error_range	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
1	int
]	O
=	O
*	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
;	O
grecs_json_destruct	(*(char),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
"Error: popping"	*(char)
,	O
grecs_json_stos	array(char)
[	O
grecs_json_state	int
]	O
,	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
grecs_json_state	int
=	O
*	O
grecs_json_ssp	*(short)
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	*(short)
,	O
grecs_json_ssp	*(short)
)	O
;	O
}	O
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	O
*	O
++	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
=	O
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
;	O
YY_IGNORE_MAYBE_UNINITIALIZED_END	O
grecs_json_error_range	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
[	O
2	int
]	O
=	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
YYLLOC_DEFAULT	O
(	O
grecs_json_loc	struct(struct(*(char),int,int),struct(*(char),int,int))
,	O
grecs_json_error_range	array(struct(struct(*(char),int,int),struct(*(char),int,int)))
,	O
2	int
)	O
;	O
*	O
++	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
=	O
grecs_json_loc	struct(struct(*(char),int,int),struct(*(char),int,int))
;	O
YY_SYMBOL_PRINT	O
(	O
"Shifting"	*(char)
,	O
grecs_json_stos	array(char)
[	O
grecs_json_n	long
]	O
,	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
grecs_json_state	int
=	O
grecs_json_n	long
;	O
goto	O
grecs_json_newstate	O
;	O
grecs_json_acceptlab	O
:	O
grecs_json_result	int
=	O
0	int
;	O
goto	O
grecs_json_return	O
;	O
grecs_json_abortlab	O
:	O
grecs_json_result	int
=	O
1	int
;	O
goto	O
grecs_json_return	O
;	O
grecs_json_exhaustedlab	O
:	O
grecs_json_error	(*(char))->(int)
(	O
YY_	O
(	O
"memory exhausted"	*(char)
)	O
)	O
;	O
grecs_json_result	int
=	O
2	int
;	O
grecs_json_return	O
:	O
if	O
(	O
grecs_json_char	int
!=	O
YYEMPTY	O
)	O
{	O
grecs_json_token	int
=	O
YYTRANSLATE	O
(	O
grecs_json_char	int
)	O
;	O
grecs_json_destruct	(*(char),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
"Cleanup: discarding lookahead"	*(char)
,	O
grecs_json_token	int
,	O
&	O
grecs_json_lval	union(int,double,*(char),*(struct),*(struct),*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct))
,	O
&	O
grecs_json_lloc	struct(struct(*(char),int,int),struct(*(char),int,int))
)	O
;	O
}	O
YYPOPSTACK	O
(	O
grecs_json_len	int
)	O
;	O
YY_STACK_PRINT	O
(	O
grecs_json_ss	*(short)
,	O
grecs_json_ssp	*(short)
)	O
;	O
while	O
(	O
grecs_json_ssp	*(short)
!=	O
grecs_json_ss	*(short)
)	O
{	O
grecs_json_destruct	(*(char),int,*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union`)),*(struct(*`,*`,long,*`,*`)),*(struct(*`,*`)))),*(struct(struct(*(char),int,int),struct(*(char),int,int))))->(void)
(	O
"Cleanup: popping"	*(char)
,	O
grecs_json_stos	array(char)
[	O
*	O
grecs_json_ssp	*(short)
]	O
,	O
grecs_json_vsp	*(union(int,double,*(char),*(struct),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`))),*(struct(*(struct`),*(struct`),long,*((*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*(struct`)))))
,	O
grecs_json_lsp	*(struct(struct(*(char),int,int),struct(*(char),int,int)))
)	O
;	O
YYPOPSTACK	O
(	O
1	int
)	O
;	O
}	O
if	O
(	O
grecs_json_ss	*(short)
!=	O
grecs_json_ssa	array(short)
)	O
YYSTACK_FREE	O
(	O
grecs_json_ss	*(short)
)	O
;	O
if	O
(	O
grecs_json_msg	*(*(char))
!=	O
grecs_json_msgbuf	array(char)
)	O
YYSTACK_FREE	O
(	O
grecs_json_msg	*(*(char))
)	O
;	O
return	O
YYID	O
(	O
grecs_json_result	int
)	O
;	O
}	O
static	O
int	O
grecs_json_error	(*(char))->(int)
(	O
char	O
const	O
*	O
s	*(char)
)	O
{	O
jsonlex_diag	(*(char))->(void)
(	O
s	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
int	O
type	int
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct)
=	O
grecs_zalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
obj	*(struct)
)	O
)	O
;	O
obj	*(struct)
->	O
type	int
=	O
type	int
;	O
return	O
obj	*(struct)
;	O
}	O
void	O
json_value_free	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct)
)	O
{	O
size_t	long
i	long
;	O
if	O
(	O
!	O
obj	*(struct)
)	O
return	O
;	O
switch	O
(	O
obj	*(struct)
->	O
type	int
)	O
{	O
case	O
json_null	int
:	O
case	O
json_bool	int
:	O
case	O
json_number	int
:	O
break	O
;	O
case	O
json_string	int
:	O
grecs_free	(*(void))->(void)
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
s	*(char)
)	O
;	O
break	O
;	O
case	O
json_arr	int
:	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
;	O
i	long
++	O
)	O
json_value_free	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
i	long
]	O
)	O
;	O
grecs_free	(*(void))->(void)
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
)	O
;	O
if	O
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
{	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
free_entry	*((*(void))->(void))
=	O
objfree	(*(void))->(void)
;	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
grecs_free	(*(void))->(void)
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
break	O
;	O
case	O
json_object	int
:	O
grecs_symtab_free	(*(struct))->(void)
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
obj	*(struct)
)	O
;	O
}	O
static	O
unsigned	O
json_st_hash	(*(void),long)->(int)
(	O
void	O
*	O
data	*(void)
,	O
unsigned	O
long	O
n_buckets	long
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
data	*(void)
;	O
return	O
grecs_hash_string	(*(char),long)->(int)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
k	*(char)
,	O
n_buckets	long
)	O
;	O
}	O
static	O
int	O
json_st_cmp	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
const	O
void	O
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
const	O
*	O
pa	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
=	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
const	O
*	O
pb	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
return	O
strcmp	(*(char),*(char))->(int)
(	O
pa	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
->	O
k	*(char)
,	O
pb	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
->	O
k	*(char)
)	O
;	O
}	O
static	O
int	O
json_st_copy	(*(void),*(void))->(int)
(	O
void	O
*	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
void	O
*	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
pa	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
=	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
pb	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
pa	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
,	O
pb	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
,	O
sizeof	O
(	O
*	O
pa	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
)	O
)	O
;	O
return	O
0	int
;	O
}	O
static	O
void	O
json_st_free	(*(void))->(void)
(	O
void	O
*	O
ptr	*(void)
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
ptr	*(void)
;	O
free	(*(void))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
k	*(char)
)	O
;	O
json_value_free	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
free	(*(void))->(void)
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
)	O
;	O
}	O
struct	O
grecs_symtab	O
*	O
json_assoc_create	()->(*(struct))
(	O
)	O
{	O
return	O
grecs_symtab_create	(long,*((*(void),long)->(int)),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((long)->(*(void))),*((*(void))->(void)))->(*(struct))
(	O
sizeof	O
(	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
)	O
,	O
json_st_hash	(*(void),long)->(int)
,	O
json_st_cmp	(*(void),*(void))->(int)
,	O
json_st_copy	(*(void),*(void))->(int)
,	O
NULL	O
,	O
json_st_free	(*(void))->(void)
)	O
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_parse_string	(*(char),long)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
char	O
const	O
*	O
input	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
size_t	long
len	long
)	O
{	O
jsonlex_setup	(*(char),long)->(void)
(	O
input	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
,	O
len	long
)	O
;	O
if	O
(	O
grecs_json_parse	()->(int)
(	O
)	O
)	O
{	O
return	O
NULL	O
;	O
}	O
jsonlex_cleanup	()->(void)
(	O
)	O
;	O
return	O
json_return_obj	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_value_lookup	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(char))->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct)
,	O
const	O
char	O
*	O
ident	*(char)
)	O
{	O
char	O
*	O
qbuf	*(char)
=	O
NULL	O
;	O
size_t	long
qlen	long
=	O
0	int
;	O
while	O
(	O
obj	*(struct)
&&	O
*	O
ident	*(char)
)	O
{	O
char	O
const	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
char	O
*	O
q	*(char)
;	O
size_t	long
l	long
;	O
for	O
(	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
=	O
ident	*(char)
;	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
++	O
)	O
{	O
if	O
(	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
==	O
'\\'	O
)	O
++	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
;	O
else	O
if	O
(	O
*	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
==	O
'.'	O
)	O
break	O
;	O
}	O
l	long
=	O
p	*(struct(*(struct(*(struct`),*(char),int,*(struct`))),*(char),int,*(struct)))
-	O
ident	*(char)
+	O
1	int
;	O
if	O
(	O
l	long
>	O
qlen	long
)	O
{	O
qlen	long
=	O
l	long
;	O
qbuf	*(char)
=	O
grecs_realloc	(*(void),long)->(*(void))
(	O
qbuf	*(char)
,	O
qlen	long
)	O
;	O
}	O
q	*(char)
=	O
qbuf	*(char)
;	O
while	O
(	O
*	O
ident	*(char)
)	O
{	O
if	O
(	O
*	O
ident	*(char)
==	O
'\\'	O
)	O
{	O
char	O
c	long
;	O
++	O
ident	*(char)
;	O
if	O
(	O
json_unescape	(char,*(char))->(int)
(	O
*	O
ident	*(char)
,	O
&	O
c	long
)	O
)	O
*	O
q	*(char)
++	O
=	O
*	O
ident	*(char)
++	O
;	O
else	O
*	O
q	*(char)
++	O
=	O
c	long
;	O
}	O
else	O
if	O
(	O
*	O
ident	*(char)
==	O
'.'	O
)	O
{	O
++	O
ident	*(char)
;	O
break	O
;	O
}	O
else	O
*	O
q	*(char)
++	O
=	O
*	O
ident	*(char)
++	O
;	O
}	O
*	O
q	*(char)
=	O
0	int
;	O
switch	O
(	O
obj	*(struct)
->	O
type	int
)	O
{	O
case	O
json_null	int
:	O
case	O
json_bool	int
:	O
case	O
json_number	int
:	O
case	O
json_string	int
:	O
obj	*(struct)
=	O
NULL	O
;	O
break	O
;	O
case	O
json_arr	int
:	O
l	long
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
qbuf	*(char)
,	O
&	O
q	*(char)
,	O
10	int
)	O
;	O
if	O
(	O
*	O
q	*(char)
!=	O
0	int
||	O
json_array_get	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long,*(*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))->(int)
(	O
obj	*(struct)
,	O
l	long
,	O
&	O
obj	*(struct)
)	O
)	O
obj	*(struct)
=	O
NULL	O
;	O
break	O
;	O
case	O
json_object	int
:	O
if	O
(	O
json_object_get	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(char),*(*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))->(int)
(	O
obj	*(struct)
,	O
qbuf	*(char)
,	O
&	O
obj	*(struct)
)	O
)	O
obj	*(struct)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
*	O
ident	*(char)
)	O
obj	*(struct)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
qbuf	*(char)
)	O
;	O
return	O
obj	*(struct)
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_new_string	(*(char))->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
char	O
const	O
*	O
str	*(char)
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_string	int
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
s	*(char)
=	O
grecs_strdup	(*(char))->(*(char))
(	O
str	*(char)
)	O
;	O
return	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_new_number	(double)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
double	O
n	long
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_number	int
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
n	long
=	O
n	long
;	O
return	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_new_bool	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
int	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_bool	int
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
b	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
return	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_new_null	()->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
void	O
)	O
{	O
return	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_null	int
)	O
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_new_object	()->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
void	O
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_object	int
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
=	O
json_assoc_create	()->(*(struct))
(	O
)	O
;	O
return	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
}	O
int	O
json_object_set	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(int)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
val	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
,	O
*	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
;	O
int	O
install	*(int)
;	O
if	O
(	O
obj	*(struct)
->	O
type	int
!=	O
json_object	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
.	O
k	*(char)
=	O
(	O
char	O
*	O
)	O
name	*(char)
;	O
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
NULL	O
;	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
=	O
grecs_symtab_lookup_or_install	(*(struct),*(void),*(int))->(*(void))
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
,	O
&	O
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
,	O
&	O
install	*(int)
)	O
;	O
if	O
(	O
install	*(int)
)	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
->	O
k	*(char)
=	O
grecs_strdup	(*(char))->(*(char))
(	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
->	O
k	*(char)
)	O
;	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
val	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
return	O
0	int
;	O
}	O
int	O
json_object_get	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(char),*(*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))->(int)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
obj	*(struct)
,	O
char	O
const	O
*	O
name	*(char)
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
*	O
retval	*(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
)	O
{	O
struct	O
json_pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct)))))
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
,	O
*	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
;	O
if	O
(	O
obj	*(struct)
->	O
type	int
!=	O
json_object	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
.	O
k	*(char)
=	O
(	O
char	O
*	O
)	O
name	*(char)
;	O
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
.	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
=	O
NULL	O
;	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
=	O
grecs_symtab_lookup_or_install	(*(struct),*(void),*(int))->(*(void))
(	O
obj	*(struct)
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
o	*(struct)
,	O
&	O
pair	struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
,	O
NULL	O
)	O
;	O
if	O
(	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
)	O
{	O
*	O
retval	*(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
=	O
ret	*(struct(*(char),*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
;	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
json_new_array	()->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
void	O
)	O
{	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
=	O
json_value_create	(int)->(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
(	O
json_arr	int
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
grecs_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
=	O
0	int
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
=	O
NULL	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
NULL	O
;	O
return	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
;	O
}	O
size_t	long
json_array_size	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(long)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
{	O
if	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
0	int
;	O
}	O
return	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
+	O
grecs_list_size	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(long)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
void	O
json_array_flatten	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
{	O
size_t	long
size	*(long)
,	O
i	long
;	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
size	*(long)
=	O
grecs_list_size	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(long)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
if	O
(	O
size	*(long)
==	O
0	int
)	O
return	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
=	O
grecs_realloc	(*(void),long)->(*(void))
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
,	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
+	O
size	*(long)
)	O
*	O
sizeof	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
0	int
]	O
)	O
)	O
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
i	long
=	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
,	O
i	long
++	O
)	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
i	long
]	O
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
oc	long
=	O
i	long
;	O
grecs_list_clear	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
}	O
int	O
json_array_insert	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long,*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(int)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
idx	long
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
{	O
size_t	long
size	*(long)
;	O
if	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
size	*(long)
=	O
json_array_size	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(long)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
;	O
if	O
(	O
idx	long
<	O
size	*(long)
)	O
{	O
json_array_flatten	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
idx	long
]	O
=	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
for	O
(	O
i	long
=	O
size	*(long)
;	O
i	long
<	O
idx	long
;	O
i	long
++	O
)	O
json_array_append	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(int)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
NULL	O
)	O
;	O
json_array_append	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(int)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
json_array_append	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(int)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
{	O
if	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
!	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ol	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
;	O
return	O
0	int
;	O
}	O
int	O
json_array_set	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long,*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(int)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
idx	long
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
)	O
{	O
if	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
idx	long
>=	O
json_array_size	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(long)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
-	O
1	int
;	O
}	O
json_array_flatten	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
;	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
idx	long
]	O
=	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
;	O
return	O
0	int
;	O
}	O
int	O
json_array_get	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))),long,*(*(struct(enum(int,int,int,int,int,int),union(int,double,*`,*`,*`)))))->(int)
(	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
,	O
size_t	long
idx	long
,	O
struct	O
json_value	struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*(*(struct`)),*(struct(*`,*`,long,*`,*`)))),*(struct)))
*	O
*	O
retval	*(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
)	O
{	O
if	O
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
type	int
!=	O
json_arr	int
)	O
{	O
errno	O
=	O
EINVAL	int
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
idx	long
>=	O
json_array_size	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(long)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
)	O
{	O
errno	O
=	O
ENOENT	int
;	O
return	O
-	O
1	int
;	O
}	O
json_array_flatten	(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))->(void)
(	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
)	O
;	O
*	O
retval	*(*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct`),*(struct`)))))
=	O
j	*(struct(enum(int,int,int,int,int,int),union(int,double,*(char),*(struct(long,*`,*`)),*(struct))))
->	O
v	*(*(struct(int,struct(struct(*`,int,int),struct(*`,int,int)))))
.	O
a	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
ov	*(*(struct))
[	O
idx	long
]	O
;	O
return	O
0	int
;	O
}	O
