static	O
volatile	O
int	O
_interrupted	int
;	O
static	O
RETSIGTYPE	void
sig_handler	(int)->(void)
(	O
int	O
signo	int
)	O
{	O
switch	O
(	O
signo	int
)	O
{	O
case	O
SIGINT	int
:	O
if	O
(	O
mailvar_is_true	(*(char))->(int)
(	O
mailvar_name_quit	*(char)
)	O
)	O
exit	(int)->(void)
(	O
0	int
)	O
;	O
_interrupted	int
++	O
;	O
break	O
;	O
case	O
SIGWINCH	int
:	O
util_do_command	(*(char))->(int)
(	O
"set screen=%d"	*(char)
,	O
util_getlines	()->(int)
(	O
)	O
)	O
;	O
util_do_command	(*(char))->(int)
(	O
"set columns=%d"	*(char)
,	O
util_getcols	()->(int)
(	O
)	O
)	O
;	O
page_invalidate	(int)->(void)
(	O
1	int
)	O
;	O
break	O
;	O
}	O
}	O
void	O
ml_clear_interrupt	()->(void)
(	O
void	O
)	O
{	O
_interrupted	int
=	O
0	int
;	O
}	O
int	O
ml_got_interrupt	()->(int)
(	O
void	O
)	O
{	O
int	O
rc	int
=	O
_interrupted	int
;	O
_interrupted	int
=	O
0	int
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
ml_getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
FILE	struct
*	O
stream	*(struct)
)	O
{	O
unsigned	O
char	O
c	char
;	O
while	O
(	O
1	int
)	O
{	O
if	O
(	O
read	*((*(void),*(char),long)->(long))
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stream	*(struct)
)	O
,	O
&	O
c	char
,	O
1	int
)	O
==	O
1	int
)	O
return	O
c	char
;	O
if	O
(	O
errno	O
==	O
EINTR	int
)	O
{	O
if	O
(	O
_interrupted	int
)	O
break	O
;	O
}	O
else	O
break	O
;	O
}	O
return	O
EOF	O
;	O
}	O
void	O
ml_readline_init	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
!	O
interactive	int
)	O
return	O
;	O
{	O
struct	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
act	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
;	O
act	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_handler	*((int)->(void))
=	O
sig_handler	(int)->(void)
;	O
sigemptyset	(*(struct(array(long))))->(int)
(	O
&	O
act	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_mask	struct(array(long))
)	O
;	O
act	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
.	O
sa_flags	int
=	O
0	int
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGINT	int
,	O
&	O
act	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
sigaction	struct(union(*((int)->(void)),*((int,*(struct(int,int,int,int,union`)),*(void))->(void))),struct(array(long)),int,*(()->(void)))
(	O
SIGWINCH	int
,	O
&	O
act	struct(union(*((int)->(void)),*((int,*(struct`),*(void))->(void))),struct(array(long)),int,*(()->(void)))
,	O
NULL	O
)	O
;	O
}	O
}	O
char	O
*	O
ml_readline_internal	()->(*(char))
(	O
void	O
)	O
{	O
char	O
*	O
buf	*(char)
=	O
NULL	O
;	O
size_t	long
size	long
=	O
0	int
,	O
n	*(long)
;	O
int	O
rc	int
;	O
rc	int
=	O
mu_stream_getline	(*(struct),*(*(char)),*(long),*(long))->(int)
(	O
mu_strin	*(struct)
,	O
&	O
buf	*(char)
,	O
&	O
size	long
,	O
&	O
n	*(long)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_stream_getline"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
_interrupted	int
)	O
{	O
free	(*(void))->(void)
(	O
buf	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
n	*(long)
==	O
0	int
)	O
return	O
NULL	O
;	O
mu_rtrim_cset	(*(char),*(char))->(long)
(	O
buf	*(char)
,	O
"\n"	*(char)
)	O
;	O
return	O
buf	*(char)
;	O
}	O
char	O
*	O
ml_readline	(*(char))->(*(char))
(	O
const	O
char	O
*	O
prompt	*(char)
)	O
{	O
if	O
(	O
interactive	int
)	O
return	O
readline	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
;	O
return	O
ml_readline_internal	()->(*(char))
(	O
)	O
;	O
}	O
char	O
*	O
ml_readline_with_intr	(*(char))->(*(char))
(	O
const	O
char	O
*	O
prompt	*(char)
)	O
{	O
char	O
*	O
str	*(struct)
=	O
ml_readline	(*(char))->(*(char))
(	O
prompt	*(char)
)	O
;	O
if	O
(	O
_interrupted	int
)	O
mu_printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
return	O
str	*(struct)
;	O
}	O
int	O
ml_reread	(*(char),*(*(char)))->(int)
(	O
const	O
char	O
*	O
prompt	*(char)
,	O
char	O
*	O
*	O
text	*(char)
)	O
{	O
int	O
ch	int
;	O
char	O
*	O
line	*(char)
;	O
int	O
line_size	int
;	O
int	O
pos	int
;	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
*	O
text	*(char)
)	O
{	O
line	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
*	O
text	*(char)
)	O
;	O
if	O
(	O
line	*(char)
)	O
{	O
pos	int
=	O
strlen	(*(char))->(long)
(	O
line	*(char)
)	O
;	O
line_size	int
=	O
pos	int
+	O
1	int
;	O
}	O
}	O
else	O
{	O
line_size	int
=	O
LINE_INC	int
;	O
line	*(char)
=	O
malloc	(long)->(*(void))
(	O
line_size	int
)	O
;	O
pos	int
=	O
0	int
;	O
}	O
if	O
(	O
!	O
line	*(char)
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Not enough memory to edit the line"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
line	*(char)
[	O
pos	int
]	O
=	O
0	int
;	O
if	O
(	O
prompt	*(char)
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
prompt	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fflush	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
for	O
(	O
p	*(char)
=	O
line	*(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
{	O
ioctl	(int,long)->(int)
(	O
0	int
,	O
TIOCSTI	int
,	O
p	*(char)
)	O
;	O
}	O
pos	int
=	O
0	int
;	O
while	O
(	O
(	O
ch	int
=	O
ml_getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
stdin	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
&&	O
ch	int
!=	O
'\n'	O
)	O
{	O
if	O
(	O
pos	int
>=	O
line_size	int
)	O
{	O
if	O
(	O
(	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
line	*(char)
,	O
line_size	int
+	O
LINE_INC	int
)	O
)	O
==	O
NULL	O
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"\n"	*(char)
,	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"Not enough memory to edit the line"	*(char)
)	O
)	O
;	O
break	O
;	O
}	O
else	O
{	O
line_size	int
+=	O
LINE_INC	int
;	O
line	*(char)
=	O
p	*(char)
;	O
}	O
}	O
line	*(char)
[	O
pos	int
++	O
]	O
=	O
ch	int
;	O
}	O
line	*(char)
[	O
pos	int
]	O
=	O
0	int
;	O
if	O
(	O
ml_got_interrupt	()->(int)
(	O
)	O
)	O
free	(*(void))->(void)
(	O
line	*(char)
)	O
;	O
else	O
{	O
if	O
(	O
*	O
text	*(char)
)	O
free	(*(void))->(void)
(	O
*	O
text	*(char)
)	O
;	O
*	O
text	*(char)
=	O
line	*(char)
;	O
}	O
return	O
0	int
;	O
}	O
char	O
*	O
readline	(*(char))->(*(char))
(	O
char	O
*	O
prompt	*(char)
)	O
{	O
if	O
(	O
prompt	*(char)
)	O
{	O
mu_printf	(*(char))->(int)
(	O
"%s"	*(char)
,	O
prompt	*(char)
)	O
;	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strout	*(struct)
)	O
;	O
}	O
return	O
ml_readline_internal	()->(*(char))
(	O
)	O
;	O
}	O
void	O
ml_set_completion_append_character	(int)->(void)
(	O
int	O
c	char
MU_ARG_UNUSED	O
)	O
{	O
}	O
void	O
ml_attempted_completion_over	()->(void)
(	O
void	O
)	O
{	O
}	O
