char	O
*	O
parseopt_program_doc	*(char)
=	O
"dump a GDBM database to a file"	*(char)
;	O
char	O
*	O
parseopt_program_args	*(char)
=	O
"DB_FILE [FILE]"	*(char)
;	O
struct	O
gdbm_option	struct(int,*(char),*(char),*(char),int)
optab	array(struct(int,*(char),*(char),*(char),int))
[	O
]	O
=	O
{	O
{	O
'H'	O
,	O
"format"	*(char)
,	O
"binary|ascii|0|1"	*(char)
,	O
N_	O
(	O
"select dump format"	*(char)
)	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
int	O
format	int
=	O
GDBM_DUMP_FMT_ASCII	int
;	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
GDBM_FILE	*(struct)
dbf	*(struct)
;	O
int	O
rc	int
,	O
opt	int
;	O
char	O
*	O
dbname	*(char)
,	O
*	O
filename	*(char)
;	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_ALL	O
,	O
""	*(char)
)	O
;	O
bindtextdomain	(*(char),*(char))->(*(char))
(	O
PACKAGE	*(char)
,	O
LOCALEDIR	O
)	O
;	O
textdomain	(*(char))->(*(char))
(	O
PACKAGE	*(char)
)	O
;	O
set_progname	(*(char))->(void)
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
opt	int
=	O
parseopt_first	(int,*(*(char)),*(struct(int,*(char),*(char),*(char),int)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
optab	array(struct(int,*(char),*(char),*(char),int))
)	O
;	O
opt	int
!=	O
EOF	O
;	O
opt	int
=	O
parseopt_next	()->(int)
(	O
)	O
)	O
{	O
switch	O
(	O
opt	int
)	O
{	O
case	O
'H'	O
:	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"binary"	*(char)
)	O
==	O
0	int
)	O
format	int
=	O
GDBM_DUMP_FMT_BINARY	int
;	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
optarg	*(char)
,	O
"ascii"	*(char)
)	O
==	O
0	int
)	O
format	int
=	O
GDBM_DUMP_FMT_ASCII	int
;	O
else	O
{	O
format	int
=	O
atoi	(*(char))->(int)
(	O
optarg	*(char)
)	O
;	O
switch	O
(	O
format	int
)	O
{	O
case	O
GDBM_DUMP_FMT_BINARY	int
:	O
case	O
GDBM_DUMP_FMT_ASCII	int
:	O
break	O
;	O
default	O
:	O
error	(*(char))->(void)
(	O
_	O
(	O
"unknown dump format"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
break	O
;	O
default	O
:	O
error	(*(char))->(void)
(	O
_	O
(	O
"unknown option"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
}	O
argc	int
-=	O
optind	int
;	O
argv	*(*(char))
+=	O
optind	int
;	O
if	O
(	O
argc	int
==	O
0	int
)	O
{	O
parseopt_print_help	()->(void)
(	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_OK	int
)	O
;	O
}	O
if	O
(	O
argc	int
>	O
2	int
)	O
{	O
error	(*(char))->(void)
(	O
_	O
(	O
"too many arguments; try `%s -h' for more info"	*(char)
)	O
,	O
progname	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_USAGE	int
)	O
;	O
}	O
dbname	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
argc	int
==	O
2	int
)	O
filename	*(char)
=	O
argv	*(*(char))
[	O
1	int
]	O
;	O
else	O
filename	*(char)
=	O
NULL	O
;	O
if	O
(	O
!	O
filename	*(char)
||	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
"-"	*(char)
)	O
==	O
0	int
)	O
{	O
filename	*(char)
=	O
"<stdout>"	*(char)
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
stdout	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
}	O
else	O
{	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"w"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
sys_perror	(int,*(char))->(void)
(	O
errno	O
,	O
_	O
(	O
"cannot open %s"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FATAL	int
)	O
;	O
}	O
}	O
dbf	*(struct)
=	O
gdbm_open	(*(char),int,int,int,*((*(char))->(void)))->(*(struct))
(	O
dbname	*(char)
,	O
0	int
,	O
GDBM_READER	int
,	O
0600	int
,	O
NULL	O
)	O
;	O
if	O
(	O
!	O
dbf	*(struct)
)	O
{	O
gdbm_perror	(*(char))->(void)
(	O
_	O
(	O
"gdbm_open failed"	*(char)
)	O
)	O
;	O
exit	(int)->(void)
(	O
EXIT_FATAL	int
)	O
;	O
}	O
rc	int
=	O
gdbm_dump_to_file	(*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),int)->(int)
(	O
dbf	*(struct)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
format	int
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
gdbm_perror	(*(char))->(void)
(	O
_	O
(	O
"dump error"	*(char)
)	O
,	O
filename	*(char)
)	O
;	O
}	O
gdbm_close	(*(struct))->(int)
(	O
dbf	*(struct)
)	O
;	O
exit	(int)->(void)
(	O
rc	int
==	O
GDBM_NO_ERROR	int
?	O
EXIT_OK	int
:	O
EXIT_FATAL	int
)	O
;	O
}	O
