const	O
char	O
lock_rcsid	array(char)
[	O
]	O
=	O
"$Id: lock.c,v 1.23 2002/03/05 19:10:42 ian Rel $"	*(char)
;	O
extern	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
)	O
;	O
boolean	int
fsdo_lock	(*(char),int,*(int))->(int)
(	O
zlock	*(char)
,	O
fspooldir	int
,	O
pferr	*(int)
)	O
const	O
char	O
*	O
zlock	*(char)
;	O
boolean	int
fspooldir	int
;	O
boolean	int
*	O
pferr	*(int)
;	O
{	O
char	O
*	O
zfree	*(char)
;	O
const	O
char	O
*	O
zpath	*(char)
,	O
*	O
zslash	*(char)
;	O
size_t	long
cslash	long
;	O
pid_t	int
ime	int
;	O
char	O
*	O
ztempfile	*(char)
;	O
char	O
abtempfile	array(char)
[	O
sizeof	O
"TMP12345678901234567890"	*(char)
]	O
;	O
int	O
o	int
;	O
char	O
ab	array(char)
[	O
12	int
]	O
;	O
int	O
cwrote	int
;	O
const	O
char	O
*	O
zerr	*(char)
;	O
boolean	int
fret	int
;	O
if	O
(	O
pferr	*(int)
!=	O
NULL	O
)	O
*	O
pferr	*(int)
=	O
TRUE	O
;	O
if	O
(	O
fspooldir	int
)	O
{	O
zfree	*(char)
=	O
NULL	O
;	O
zpath	*(char)
=	O
zlock	*(char)
;	O
}	O
else	O
{	O
zfree	*(char)
=	O
zsysdep_in_dir	(*(char),*(char))->(*(char))
(	O
zSlockdir	*(char)
,	O
zlock	*(char)
)	O
;	O
zpath	*(char)
=	O
zfree	*(char)
;	O
}	O
ime	int
=	O
getpid	()->(int)
(	O
)	O
;	O
zslash	*(char)
=	O
strrchr	(*(char),int)->(*(char))
(	O
zpath	*(char)
,	O
'/'	O
)	O
;	O
if	O
(	O
zslash	*(char)
==	O
NULL	O
)	O
cslash	long
=	O
0	int
;	O
else	O
cslash	long
=	O
zslash	*(char)
-	O
zpath	*(char)
+	O
1	int
;	O
sprintf	(*(char),*(char))->(int)
(	O
abtempfile	array(char)
,	O
"TMP%010lx"	*(char)
,	O
(	O
unsigned	O
long	O
)	O
ime	int
)	O
;	O
ztempfile	*(char)
=	O
zbufalc	(long)->(*(char))
(	O
cslash	long
+	O
sizeof	O
abtempfile	array(char)
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ztempfile	*(char)
,	O
zpath	*(char)
,	O
cslash	long
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
ztempfile	*(char)
+	O
cslash	long
,	O
abtempfile	array(char)
,	O
sizeof	O
abtempfile	array(char)
)	O
;	O
o	int
=	O
creat	(*(char),int)->(int)
(	O
ztempfile	*(char)
,	O
IPUBLIC_FILE_MODE	O
)	O
;	O
if	O
(	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
if	O
(	O
!	O
fsysdep_make_dirs	(*(char),int)->(int)
(	O
ztempfile	*(char)
,	O
FALSE	O
)	O
)	O
{	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
ubuffree	(*(char))->(void)
(	O
ztempfile	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
o	int
=	O
creat	(*(char),int)->(int)
(	O
ztempfile	*(char)
,	O
IPUBLIC_FILE_MODE	O
)	O
;	O
}	O
if	O
(	O
o	int
<	O
0	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"creat (%s): %s"	*(char)
,	O
ztempfile	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
ubuffree	(*(char))->(void)
(	O
ztempfile	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
ab	array(char)
,	O
"%10ld\n"	*(char)
,	O
(	O
long	O
)	O
ime	int
)	O
;	O
cwrote	int
=	O
write	(int,*(void),long)->(long)
(	O
o	int
,	O
ab	array(char)
,	O
strlen	(*(char))->(long)
(	O
ab	array(char)
)	O
)	O
;	O
zerr	*(char)
=	O
NULL	O
;	O
if	O
(	O
cwrote	int
<	O
0	int
)	O
zerr	*(char)
=	O
"write"	*(char)
;	O
if	O
(	O
close	(int)->(int)
(	O
o	int
)	O
<	O
0	int
)	O
zerr	*(char)
=	O
"close"	*(char)
;	O
if	O
(	O
zerr	*(char)
!=	O
NULL	O
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"%s (%s): %s"	*(char)
,	O
zerr	*(char)
,	O
ztempfile	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
(	O
void	O
)	O
remove	(*(char))->(int)
(	O
ztempfile	*(char)
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
ubuffree	(*(char))->(void)
(	O
ztempfile	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
fret	int
=	O
TRUE	O
;	O
if	O
(	O
pferr	*(int)
!=	O
NULL	O
)	O
*	O
pferr	*(int)
=	O
FALSE	O
;	O
o	int
=	O
-	O
1	int
;	O
zerr	*(char)
=	O
NULL	O
;	O
while	O
(	O
link	(*(char),*(char))->(int)
(	O
ztempfile	*(char)
,	O
zpath	*(char)
)	O
!=	O
0	int
)	O
{	O
int	O
cgot	int
;	O
pid_t	int
ipid	int
;	O
boolean	int
freadonly	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
abtime	array(char)
[	O
sizeof	O
"1991-12-31 12:00:00"	*(char)
]	O
;	O
fret	int
=	O
FALSE	O
;	O
if	O
(	O
errno	O
!=	O
EEXIST	int
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"link (%s, %s): %s"	*(char)
,	O
ztempfile	*(char)
,	O
zpath	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
pferr	*(int)
!=	O
NULL	O
)	O
*	O
pferr	*(int)
=	O
TRUE	O
;	O
break	O
;	O
}	O
freadonly	int
=	O
FALSE	O
;	O
o	int
=	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
zpath	*(char)
,	O
O_RDWR	int
|	O
O_NOCTTY	int
,	O
0	int
)	O
;	O
if	O
(	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
EACCES	int
)	O
{	O
freadonly	int
=	O
TRUE	O
;	O
o	int
=	O
open	(*(char),int)->(int)
(	O
(	O
char	O
*	O
)	O
zpath	*(char)
,	O
O_RDONLY	int
,	O
0	int
)	O
;	O
}	O
if	O
(	O
o	int
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
==	O
ENOENT	int
)	O
{	O
fret	int
=	O
TRUE	O
;	O
continue	O
;	O
}	O
zerr	*(char)
=	O
"open"	*(char)
;	O
break	O
;	O
}	O
}	O
cgot	int
=	O
read	(int,*(void),long)->(long)
(	O
o	int
,	O
ab	array(char)
,	O
sizeof	O
ab	array(char)
-	O
1	int
)	O
;	O
if	O
(	O
cgot	int
<	O
0	int
)	O
{	O
zerr	*(char)
=	O
"read"	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
cgot	int
==	O
4	int
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"Lock file %s may be V2 format; check LOCKFILES in policy.h"	*(char)
,	O
zpath	*(char)
)	O
;	O
ab	array(char)
[	O
cgot	int
]	O
=	O
'\0'	O
;	O
ipid	int
=	O
(	O
pid_t	int
)	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
ab	array(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
ipid	int
==	O
ime	int
)	O
{	O
{	O
fret	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
if	O
(	O
cgot	int
>	O
0	int
)	O
{	O
if	O
(	O
kill	(int,int)->(int)
(	O
ipid	int
,	O
0	int
)	O
==	O
0	int
||	O
errno	O
==	O
EPERM	int
)	O
break	O
;	O
}	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
o	int
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
strcpy	(*(char),*(char))->(*(char))
(	O
abtime	array(char)
,	O
"unknown"	*(char)
)	O
;	O
else	O
{	O
time_t	long
itm	long
;	O
struct	O
tm	struct(int,int,int,int,int,int,int,int,int,long,*(char))
*	O
q	*(struct)
;	O
itm	long
=	O
(	O
time_t	long
)	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
;	O
q	*(struct)
=	O
localtime	(*(long))->(*(struct(int,int,int,int,int,int,int,int,int,long,*(char))))
(	O
&	O
itm	long
)	O
;	O
sprintf	(*(char),*(char))->(int)
(	O
abtime	array(char)
,	O
"%04d-%02d-%02d %02d:%02d:%02d"	*(char)
,	O
q	*(struct)
->	O
tm_year	int
+	O
1900	int
,	O
q	*(struct)
->	O
tm_mon	int
+	O
1	int
,	O
q	*(struct)
->	O
tm_mday	int
,	O
q	*(struct)
->	O
tm_hour	int
,	O
q	*(struct)
->	O
tm_min	int
,	O
q	*(struct)
->	O
tm_sec	int
)	O
;	O
}	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"Stale lock %s held by process %ld created %s"	*(char)
,	O
zpath	*(char)
,	O
(	O
long	O
)	O
ipid	int
,	O
abtime	array(char)
)	O
;	O
if	O
(	O
freadonly	int
)	O
{	O
(	O
void	O
)	O
close	(int)->(int)
(	O
o	int
)	O
;	O
o	int
=	O
-	O
1	int
;	O
if	O
(	O
remove	(*(char))->(int)
(	O
zpath	*(char)
)	O
!=	O
0	int
)	O
{	O
zerr	*(char)
=	O
"remove"	*(char)
;	O
break	O
;	O
}	O
fret	int
=	O
TRUE	O
;	O
continue	O
;	O
}	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
o	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
{	O
zerr	*(char)
=	O
"lseek"	*(char)
;	O
break	O
;	O
}	O
sprintf	(*(char),*(char))->(int)
(	O
ab	array(char)
,	O
"%10ld\n"	*(char)
,	O
(	O
long	O
)	O
ime	int
)	O
;	O
cwrote	int
=	O
write	(int,*(void),long)->(long)
(	O
o	int
,	O
ab	array(char)
,	O
strlen	(*(char))->(long)
(	O
ab	array(char)
)	O
)	O
;	O
if	O
(	O
cwrote	int
<	O
0	int
)	O
{	O
zerr	*(char)
=	O
"write"	*(char)
;	O
break	O
;	O
}	O
(	O
void	O
)	O
sleep	(int)->(int)
(	O
5	int
)	O
;	O
if	O
(	O
lseek	(int,long,int)->(long)
(	O
o	int
,	O
(	O
off_t	long
)	O
0	int
,	O
SEEK_SET	int
)	O
!=	O
0	int
)	O
{	O
zerr	*(char)
=	O
"lseek"	*(char)
;	O
break	O
;	O
}	O
cgot	int
=	O
read	(int,*(void),long)->(long)
(	O
o	int
,	O
ab	array(char)
,	O
sizeof	O
ab	array(char)
-	O
1	int
)	O
;	O
if	O
(	O
cgot	int
<	O
0	int
)	O
{	O
zerr	*(char)
=	O
"read"	*(char)
;	O
break	O
;	O
}	O
ab	array(char)
[	O
cgot	int
]	O
=	O
'\0'	O
;	O
ipid	int
=	O
(	O
pid_t	int
)	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
ab	array(char)
,	O
(	O
char	O
*	O
*	O
)	O
NULL	O
,	O
10	int
)	O
;	O
if	O
(	O
ipid	int
==	O
ime	int
)	O
{	O
{	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
sfile	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
sdescriptor	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
(	O
(	O
char	O
*	O
)	O
zpath	*(char)
,	O
&	O
sfile	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
{	O
if	O
(	O
errno	O
!=	O
ENOENT	int
)	O
{	O
zerr	*(char)
=	O
"stat"	*(char)
;	O
break	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
o	int
,	O
&	O
sdescriptor	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
<	O
0	int
)	O
{	O
zerr	*(char)
=	O
"fstat"	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
sfile	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
==	O
sdescriptor	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_ino	long
&&	O
sfile	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
==	O
sdescriptor	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_dev	long
)	O
{	O
if	O
(	O
close	(int)->(int)
(	O
o	int
)	O
<	O
0	int
)	O
{	O
zerr	*(char)
=	O
"close"	*(char)
;	O
break	O
;	O
}	O
o	int
=	O
-	O
1	int
;	O
fret	int
=	O
TRUE	O
;	O
break	O
;	O
}	O
}	O
}	O
}	O
(	O
void	O
)	O
close	(int)->(int)
(	O
o	int
)	O
;	O
o	int
=	O
-	O
1	int
;	O
fret	int
=	O
TRUE	O
;	O
}	O
if	O
(	O
zerr	*(char)
!=	O
NULL	O
)	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"%s (%s): %s"	*(char)
,	O
zerr	*(char)
,	O
zpath	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
if	O
(	O
pferr	*(int)
!=	O
NULL	O
)	O
*	O
pferr	*(int)
=	O
TRUE	O
;	O
}	O
if	O
(	O
o	int
>=	O
0	int
)	O
(	O
void	O
)	O
close	(int)->(int)
(	O
o	int
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
if	O
(	O
remove	(*(char))->(int)
(	O
ztempfile	*(char)
)	O
!=	O
0	int
)	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"remove (%s): %s"	*(char)
,	O
ztempfile	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
ztempfile	*(char)
)	O
;	O
return	O
fret	int
;	O
}	O
boolean	int
fsdo_unlock	(*(char),int)->(int)
(	O
zlock	*(char)
,	O
fspooldir	int
)	O
const	O
char	O
*	O
zlock	*(char)
;	O
boolean	int
fspooldir	int
;	O
{	O
char	O
*	O
zfree	*(char)
;	O
const	O
char	O
*	O
zpath	*(char)
;	O
if	O
(	O
fspooldir	int
)	O
{	O
zfree	*(char)
=	O
NULL	O
;	O
zpath	*(char)
=	O
zlock	*(char)
;	O
}	O
else	O
{	O
zfree	*(char)
=	O
zsysdep_in_dir	(*(char),*(char))->(*(char))
(	O
zSlockdir	*(char)
,	O
zlock	*(char)
)	O
;	O
zpath	*(char)
=	O
zfree	*(char)
;	O
}	O
if	O
(	O
remove	(*(char))->(int)
(	O
zpath	*(char)
)	O
==	O
0	int
||	O
errno	O
==	O
ENOENT	int
)	O
{	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
return	O
TRUE	O
;	O
}	O
else	O
{	O
ulog	(enum(int,int,int,int,int,int,int),*(char))->(void)
(	O
LOG_ERROR	int
,	O
"remove (%s): %s"	*(char)
,	O
zpath	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
ubuffree	(*(char))->(void)
(	O
zfree	*(char)
)	O
;	O
return	O
FALSE	O
;	O
}	O
}	O
