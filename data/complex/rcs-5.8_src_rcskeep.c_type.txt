static	O
char	O
*	O
sorry	(bool,*(char))->(*(char))
(	O
bool	bool
savep	bool
,	O
char	O
const	O
*	O
msg	*(char)
)	O
{	O
if	O
(	O
savep	bool
)	O
{	O
char	O
*	O
partial	*(char)
;	O
size_t	long
len	char
;	O
partial	*(char)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
partial	*(char)
)	O
;	O
}	O
if	O
(	O
msg	*(char)
)	O
MERR	O
(	O
"%s"	*(char)
,	O
msg	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
static	O
char	O
*	O
badly_terminated	(bool)->(*(char))
(	O
bool	bool
savep	bool
)	O
{	O
return	O
sorry	(bool,*(char))->(*(char))
(	O
savep	bool
,	O
"badly terminated keyword value"	*(char)
)	O
;	O
}	O
static	O
char	O
*	O
get0val	(int,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
int	O
c	int
,	O
register	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
fp	*(struct)
,	O
bool	bool
savep	bool
,	O
bool	bool
optional	bool
)	O
{	O
char	O
*	O
val	array(int)
=	O
NULL	O
;	O
size_t	long
len	char
;	O
register	O
bool	bool
got1	bool
;	O
got1	bool
=	O
false	int
;	O
for	O
(	O
;	O
;	O
)	O
{	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
got1	bool
=	O
true	int
;	O
if	O
(	O
savep	bool
)	O
accumulate_byte	(*(struct(*(char),*(struct),*(void),long)),int)->(void)
(	O
SINGLE	O
,	O
c	int
)	O
;	O
break	O
;	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
if	O
(	O
savep	bool
)	O
{	O
val	array(int)
=	O
finish_string	(*(struct(*(char),*(struct),*(void),long)),*(long))->(*(char))
(	O
SINGLE	O
,	O
&	O
len	char
)	O
;	O
if	O
(	O
!	O
got1	bool
)	O
{	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
val	array(int)
)	O
;	O
val	array(int)
=	O
NULL	O
;	O
}	O
}	O
if	O
(	O
got1	bool
&&	O
!	O
val	array(int)
)	O
val	array(int)
=	O
"non-NULL"	*(char)
;	O
return	O
val	array(int)
;	O
case	O
KDELIM	char
:	O
if	O
(	O
!	O
got1	bool
&&	O
optional	bool
)	O
{	O
if	O
(	O
val	array(int)
)	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
val	array(int)
)	O
;	O
return	O
NULL	O
;	O
}	O
case	O
'\n'	O
:	O
case	O
'\0'	O
:	O
return	O
badly_terminated	(bool)->(*(char))
(	O
savep	bool
)	O
;	O
}	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
return	O
badly_terminated	(bool)->(*(char))
(	O
savep	bool
)	O
)	O
;	O
}	O
}	O
static	O
char	O
*	O
keepid	(int,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(*(char))
(	O
int	O
c	int
,	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
fp	*(struct)
)	O
{	O
char	O
*	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
;	O
if	O
(	O
!	O
c	int
)	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
return	O
sorry	(bool,*(char))->(*(char))
(	O
true	int
,	O
NULL	O
)	O
)	O
;	O
if	O
(	O
!	O
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
=	O
get0val	(int,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
c	int
,	O
fp	*(struct)
,	O
true	int
,	O
false	int
)	O
)	O
)	O
return	O
NULL	O
;	O
checksid	(*(char))->(void)
(	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
)	O
;	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
{	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
)	O
;	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
=	O
NULL	O
;	O
}	O
return	O
maybe	struct(*((*(struct(*((*`)->(*`)),bool,struct(*`,long),*(struct`),struct(*`,long),*(struct`),int)))->(*(struct))),bool,struct(*(char),long),*(struct),struct(*(char),long),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),int)
;	O
}	O
static	O
char	O
*	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
register	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
fp	*(struct)
,	O
bool	bool
savep	bool
,	O
bool	bool
optional	bool
)	O
{	O
int	O
c	int
;	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
return	O
badly_terminated	(bool)->(*(char))
(	O
savep	bool
)	O
)	O
;	O
return	O
get0val	(int,*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
c	int
,	O
fp	*(struct)
,	O
savep	bool
,	O
optional	bool
)	O
;	O
}	O
static	O
int	O
keepdate	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(int)
(	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
fp	*(struct)
)	O
{	O
char	O
*	O
d	*(char)
,	O
*	O
t	*(char)
;	O
int	O
c	int
;	O
c	int
=	O
0	int
;	O
if	O
(	O
(	O
d	*(char)
=	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
true	int
,	O
false	int
)	O
)	O
)	O
{	O
if	O
(	O
!	O
(	O
t	*(char)
=	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
true	int
,	O
false	int
)	O
)	O
)	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
d	*(char)
)	O
;	O
else	O
{	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
c	int
=	O
0	int
)	O
;	O
if	O
(	O
!	O
c	int
)	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
t	*(char)
)	O
;	O
else	O
{	O
char	O
buf	*(char)
[	O
64	int
]	O
;	O
size_t	long
len	char
;	O
len	char
=	O
snprintf	(*(char),long,*(char))->(int)
(	O
buf	*(char)
,	O
64	int
,	O
"%s%s %s%s"	*(char)
,	O
(	O
isdigit	(int)->(int)
(	O
d	*(char)
[	O
0	int
]	O
)	O
&&	O
isdigit	(int)->(int)
(	O
d	*(char)
[	O
1	int
]	O
)	O
&&	O
!	O
isdigit	(int)->(int)
(	O
d	*(char)
[	O
2	int
]	O
)	O
?	O
"19"	*(char)
:	O
""	*(char)
)	O
,	O
d	*(char)
,	O
t	*(char)
,	O
(	O
!	O
strchr	(*(char),int)->(*(char))
(	O
t	*(char)
,	O
'-'	O
)	O
&&	O
!	O
strchr	(*(char),int)->(*(char))
(	O
t	*(char)
,	O
'+'	O
)	O
?	O
"+0000"	*(char)
:	O
""	*(char)
)	O
)	O
;	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
t	*(char)
)	O
;	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
d	*(char)
)	O
;	O
PREV	O
(	O
date	*(char)
)	O
=	O
intern	(*(struct(*(char),*(struct),*(void),long)),*(char),long)->(*(char))
(	O
SINGLE	O
,	O
buf	*(char)
,	O
len	char
)	O
;	O
}	O
}	O
}	O
return	O
c	int
;	O
}	O
static	O
char	O
const	O
*	O
keeprev	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(*(char))
(	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
fp	*(struct)
)	O
{	O
char	O
*	O
s	*(char)
=	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
true	int
,	O
false	int
)	O
;	O
if	O
(	O
s	*(char)
)	O
{	O
register	O
char	O
const	O
*	O
sp	*(char)
;	O
register	O
int	O
dotcount	int
=	O
0	int
;	O
for	O
(	O
sp	*(char)
=	O
s	*(char)
;	O
;	O
sp	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
sp	*(char)
)	O
{	O
case	O
0	int
:	O
if	O
(	O
dotcount	int
&	O
1	int
)	O
goto	O
done	bool
;	O
else	O
break	O
;	O
case	O
'.'	O
:	O
dotcount	int
++	O
;	O
continue	O
;	O
default	O
:	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
sp	*(char)
)	O
)	O
continue	O
;	O
break	O
;	O
}	O
break	O
;	O
}	O
MERR	O
(	O
"%s is not a %s"	*(char)
,	O
s	*(char)
,	O
ks_revno	array(char)
)	O
;	O
brush_off	(*(struct(*(char),*(struct),*(void),long)),*(void))->(void)
(	O
SINGLE	O
,	O
s	*(char)
)	O
;	O
s	*(char)
=	O
NULL	O
;	O
}	O
done	bool
:	O
return	O
PREV	O
(	O
rev	*(char)
)	O
=	O
s	*(char)
;	O
}	O
bool	bool
getoldkeys	(*(struct))->(bool)
(	O
register	O
struct	O
fro	struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct`),long)))->(void)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),long)
*	O
fp	*(struct)
)	O
{	O
int	O
c	int
;	O
char	O
keyword	array(char)
[	O
keylength	int
+	O
1	int
]	O
;	O
register	O
char	O
*	O
tp	*(char)
;	O
bool	bool
needs_closing	bool
;	O
struct	O
pool_found	struct(int,*(struct(char,array(char))))
match	struct(int,*(struct(char,array(char))))
;	O
char	O
const	O
*	O
mani_filename	*(char)
=	O
MANI	O
(	O
filename	*(char)
)	O
;	O
if	O
(	O
PREV	O
(	O
valid	bool
)	O
)	O
return	O
true	int
;	O
needs_closing	bool
=	O
false	int
;	O
if	O
(	O
!	O
fp	*(struct)
)	O
{	O
if	O
(	O
!	O
(	O
fp	*(struct)
=	O
fro_open	(*(char),*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))
(	O
mani_filename	*(char)
,	O
FOPEN_R_WORK	*(char)
,	O
NULL	O
)	O
)	O
)	O
{	O
syserror_errno	O
(	O
mani_filename	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
needs_closing	bool
=	O
true	int
;	O
}	O
c	int
=	O
'\0'	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
if	O
(	O
c	int
==	O
KDELIM	char
)	O
{	O
do	O
{	O
tp	*(char)
=	O
keyword	array(char)
;	O
for	O
(	O
;	O
;	O
)	O
{	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
goto	O
ok	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
default	O
:	O
if	O
(	O
keyword	array(char)
+	O
keylength	int
<=	O
tp	*(char)
)	O
break	O
;	O
*	O
tp	*(char)
++	O
=	O
c	int
;	O
continue	O
;	O
case	O
'\n'	O
:	O
case	O
KDELIM	char
:	O
case	O
VDELIM	char
:	O
break	O
;	O
}	O
break	O
;	O
}	O
}	O
while	O
(	O
c	int
==	O
KDELIM	char
)	O
;	O
if	O
(	O
c	int
!=	O
VDELIM	char
)	O
continue	O
;	O
*	O
tp	*(char)
=	O
c	int
;	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
goto	O
ok	O
)	O
;	O
switch	O
(	O
c	int
)	O
{	O
case	O
' '	O
:	O
case	O
'\t'	O
:	O
break	O
;	O
default	O
:	O
continue	O
;	O
}	O
recognize_keyword	(*(char),*(struct(int,*(struct(char,array(char))))))->(bool)
(	O
keyword	array(char)
,	O
&	O
match	struct(int,*(struct(char,array(char))))
)	O
;	O
switch	O
(	O
match	struct(int,*(struct(char,array(char))))
.	O
i	int
)	O
{	O
case	O
Author	int
:	O
if	O
(	O
!	O
KEEPID	O
(	O
'\0'	O
,	O
author	*(char)
)	O
)	O
goto	O
badness	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
case	O
Date	int
:	O
if	O
(	O
!	O
(	O
c	int
=	O
keepdate	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(int)
(	O
fp	*(struct)
)	O
)	O
)	O
goto	O
badness	O
;	O
break	O
;	O
case	O
Header	int
:	O
case	O
Id	int
:	O
if	O
(	O
!	O
(	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
false	int
,	O
false	int
)	O
&&	O
keeprev	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(*(char))
(	O
fp	*(struct)
)	O
&&	O
(	O
c	int
=	O
keepdate	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(int)
(	O
fp	*(struct)
)	O
)	O
&&	O
KEEPID	O
(	O
c	int
,	O
author	*(char)
)	O
&&	O
KEEPID	O
(	O
'\0'	O
,	O
state	*(char)
)	O
)	O
)	O
goto	O
badness	O
;	O
if	O
(	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
false	int
,	O
true	int
)	O
&&	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
false	int
,	O
true	int
)	O
)	O
c	int
=	O
0	int
;	O
else	O
if	O
(	O
FLOW	O
(	O
erroneousp	bool
)	O
)	O
goto	O
badness	O
;	O
else	O
c	int
=	O
KDELIM	char
;	O
break	O
;	O
case	O
Locker	int
:	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
false	int
,	O
false	int
)	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
case	O
Log	int
:	O
case	O
RCSfile	int
:	O
case	O
Source	int
:	O
if	O
(	O
!	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
false	int
,	O
false	int
)	O
)	O
goto	O
badness	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
case	O
Name	int
:	O
if	O
(	O
(	O
PREV	O
(	O
name	*(char)
)	O
=	O
getval	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)),bool,bool)->(*(char))
(	O
fp	*(struct)
,	O
true	int
,	O
false	int
)	O
)	O
&&	O
*	O
PREV	O
(	O
name	*(char)
)	O
)	O
checkssym	(*(char))->(void)
(	O
PREV	O
(	O
name	*(char)
)	O
)	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
case	O
Revision	int
:	O
if	O
(	O
!	O
keeprev	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(*(char))
(	O
fp	*(struct)
)	O
)	O
goto	O
badness	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
case	O
State	int
:	O
if	O
(	O
!	O
KEEPID	O
(	O
'\0'	O
,	O
state	*(char)
)	O
)	O
goto	O
badness	O
;	O
c	int
=	O
0	int
;	O
break	O
;	O
default	O
:	O
continue	O
;	O
}	O
if	O
(	O
!	O
c	int
)	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
c	int
=	O
0	int
)	O
;	O
if	O
(	O
c	int
!=	O
KDELIM	char
)	O
{	O
MERR	O
(	O
"closing %c missing on keyword"	*(char)
,	O
KDELIM	char
)	O
;	O
goto	O
badness	O
;	O
}	O
if	O
(	O
PREV	O
(	O
name	*(char)
)	O
&&	O
PREV	O
(	O
author	*(char)
)	O
&&	O
PREV	O
(	O
date	*(char)
)	O
&&	O
PREV	O
(	O
rev	*(char)
)	O
&&	O
PREV	O
(	O
state	*(char)
)	O
)	O
break	O
;	O
}	O
GETCHAR_OR	O
(	O
c	int
,	O
fp	*(struct)
,	O
goto	O
ok	O
)	O
;	O
}	O
ok	O
:	O
if	O
(	O
needs_closing	bool
)	O
fro_close	(*(struct(int,long,enum(int,int,int),*(char),*(char),*(char),*((*`)->(void)),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),long)))->(void)
(	O
fp	*(struct)
)	O
;	O
else	O
fro_bob	O
(	O
fp	*(struct)
)	O
;	O
PRUNE	O
(	O
name	*(char)
)	O
;	O
PRUNE	O
(	O
author	*(char)
)	O
;	O
PRUNE	O
(	O
date	*(char)
)	O
;	O
PRUNE	O
(	O
rev	*(char)
)	O
;	O
PRUNE	O
(	O
state	*(char)
)	O
;	O
PREV	O
(	O
valid	bool
)	O
=	O
true	int
;	O
return	O
true	int
;	O
badness	O
:	O
return	O
false	int
;	O
}	O
