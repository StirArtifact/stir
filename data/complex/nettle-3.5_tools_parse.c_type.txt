void	O
sexp_compound_token_init	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
struct	O
sexp_compound_token	struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
)	O
{	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
0	int
;	O
nettle_buffer_init	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
display	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
nettle_buffer_init	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
}	O
void	O
sexp_compound_token_clear	(*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
struct	O
sexp_compound_token	struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
)	O
{	O
nettle_buffer_clear	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
display	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
nettle_buffer_clear	(*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
}	O
void	O
sexp_parse_init	(*(struct(*(struct),enum(int,int,int),int,int)),*(struct),enum(int,int,int))->(void)
(	O
struct	O
sexp_parser	struct(*(struct),enum(int,int,int),int,int)
*	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
struct	O
sexp_input	struct(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char))),enum(int,int,int),char,*(struct(*(char),int,int,int,*((*(void))->(void)),*((long)->(long)),*((*(void),*(char),long,*(char))->(long)),*((*(void),*(char))->(long)),*((*(void))->(void)),*((long)->(long)),*((*(void),*(long),*(char),long,*(char))->(int)),*((*(void))->(int)))),union(struct(*(char),short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))
*	O
input	*(struct)
,	O
enum	O
sexp_mode	enum(int,int,int)
mode	enum(int,int,int)
)	O
{	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
input	*(struct)
=	O
input	*(struct)
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
mode	enum(int,int,int)
=	O
mode	enum(int,int,int)
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
=	O
1	int
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
=	O
0	int
;	O
}	O
static	O
void	O
sexp_check_token	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),enum(int,int,int,int,int,int,int,int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
struct	O
sexp_parser	struct(*(struct),enum(int,int,int),int,int)
*	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
enum	O
sexp_token	enum(int,int,int,int,int,int,int,int,int,int)
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
,	O
struct	O
nettle_buffer	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
*	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
{	O
sexp_get_token	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int),char,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),union(struct(*`,short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
input	*(struct)
,	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
?	O
SEXP_CANONICAL	int
:	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
mode	enum(int,int,int)
,	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
if	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
input	*(struct)
->	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
!=	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
)	O
die	(*(char))->(void)
(	O
"Syntax error.\n"	*(char)
)	O
;	O
}	O
void	O
sexp_parse	(*(struct(*(struct),enum(int,int,int),int,int)),*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long))))->(void)
(	O
struct	O
sexp_parser	struct(*(struct),enum(int,int,int),int,int)
*	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
struct	O
sexp_compound_token	struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long),struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long))
*	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
sexp_get_token	(*(struct(*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),enum(int,int,int),char,*(struct(*`,int,int,int,*`,*`,*`,*`,*`,*`,*`,*`)),union(struct(*`,short,char,char),struct(char,char)),char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
input	*(struct)
,	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
?	O
SEXP_CANONICAL	int
:	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
mode	enum(int,int,int)
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
switch	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
input	*(struct)
->	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
)	O
{	O
case	O
SEXP_LIST_END	int
:	O
if	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
==	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
)	O
die	(*(char))->(void)
(	O
"Unmatched end of list in transport encoded data.\n"	*(char)
)	O
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
--	O
;	O
if	O
(	O
!	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
)	O
die	(*(char))->(void)
(	O
"Unmatched end of list.\n"	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
SEXP_LIST_END	int
;	O
check_transport_end	O
:	O
if	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
==	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
)	O
{	O
sexp_check_token	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),enum(int,int,int,int,int,int,int,int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
SEXP_CODING_END	int
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
assert	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
)	O
;	O
assert	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
==	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
)	O
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
--	O
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
=	O
0	int
;	O
}	O
return	O
;	O
case	O
SEXP_EOF	int
:	O
if	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
>	O
1	int
)	O
die	(*(char))->(void)
(	O
"Unexpected end of file.\n"	*(char)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
SEXP_EOF	int
;	O
return	O
;	O
case	O
SEXP_LIST_START	int
:	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
++	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
SEXP_LIST_START	int
;	O
return	O
;	O
case	O
SEXP_DISPLAY_START	int
:	O
sexp_check_token	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),enum(int,int,int,int,int,int,int,int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
SEXP_STRING	int
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
display	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
sexp_check_token	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),enum(int,int,int,int,int,int,int,int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
SEXP_DISPLAY_END	int
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
display	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
sexp_check_token	(*(struct(*(struct(*`,enum(int,int,int),char,*`,union`,char,enum(int,int,int,int,int,int,int,int,int,int))),enum(int,int,int),int,int)),enum(int,int,int,int,int,int,int,int,int,int),*(struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))->(void)
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
,	O
SEXP_STRING	int
,	O
&	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
string	struct(*(char),long,*(void),*((*(void),*(void),long)->(*(void))),long)
)	O
;	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
SEXP_DISPLAY	int
;	O
goto	O
check_transport_end	O
;	O
case	O
SEXP_STRING	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
SEXP_STRING	int
;	O
goto	O
check_transport_end	O
;	O
case	O
SEXP_COMMENT	int
:	O
token	*(struct(enum(int,int,int,int,int,int,int,int,int,int),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long),struct(*(char),long,*(void),*((*`,*`,long)->(*`)),long)))
->	O
type	enum(int,int,int,int,int,int,int,int,int,int)
=	O
SEXP_COMMENT	int
;	O
return	O
;	O
case	O
SEXP_TRANSPORT_START	int
:	O
if	O
(	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
mode	enum(int,int,int)
==	O
SEXP_CANONICAL	int
)	O
die	(*(char))->(void)
(	O
"Base64 not allowed in canonical mode.\n"	*(char)
)	O
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
++	O
;	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
transport	int
=	O
parser	*(struct(*(struct),enum(int,int,int),int,int))
->	O
level	int
;	O
continue	O
;	O
case	O
SEXP_CODING_END	int
:	O
die	(*(char))->(void)
(	O
"Unexpected end of transport encoding.\n"	*(char)
)	O
;	O
case	O
SEXP_DISPLAY_END	int
:	O
die	(*(char))->(void)
(	O
"Unexpected end of display tag.\n"	*(char)
)	O
;	O
case	O
SEXP_DISPLAY	int
:	O
abort	()->(void)
(	O
)	O
;	O
}	O
}	O
}	O
