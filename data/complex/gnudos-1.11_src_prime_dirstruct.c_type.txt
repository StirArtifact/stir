void	O
freeDirStruct	(*(struct(*(char),int,char,char)))->(void)
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
dir	*(char)
)	O
{	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
;	O
if	O
(	O
dir	*(char)
->	O
name	*(char)
)	O
free	(*(void))->(void)
(	O
dir	*(char)
->	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
dir	*(char)
)	O
;	O
}	O
void	O
freeDirStructs	(int,int)->(void)
(	O
int	O
start	int
,	O
int	O
end	int
)	O
{	O
for	O
(	O
int	O
j	int
=	O
start	int
;	O
j	int
<	O
end	int
;	O
j	int
++	O
)	O
{	O
freeDirStruct	(*(struct(*(char),int,char,char)))->(void)
(	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
)	O
;	O
dirs	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
=	O
NULL	O
;	O
}	O
}	O
void	O
freeFileStructs	(int,int)->(void)
(	O
int	O
start	int
,	O
int	O
end	int
)	O
{	O
for	O
(	O
int	O
j	int
=	O
start	int
;	O
j	int
<	O
end	int
;	O
j	int
++	O
)	O
{	O
freeDirStruct	(*(struct(*(char),int,char,char)))->(void)
(	O
files	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
)	O
;	O
files	array(*(struct(*(char),int,char,char)))
[	O
j	int
]	O
=	O
NULL	O
;	O
}	O
}	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
allocDirStruct	()->(*(struct(*(char),int,char,char)))
(	O
)	O
{	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
dir	*(char)
=	O
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
)	O
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
NULL	O
;	O
dir	*(char)
->	O
name	*(char)
=	O
NULL	O
;	O
dir	*(char)
->	O
namelen	int
=	O
0	int
;	O
dir	*(char)
->	O
star	char
=	O
' '	O
;	O
dir	*(char)
->	O
type	char
=	O
'd'	O
;	O
return	O
dir	*(char)
;	O
}	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
allocDirStructB	(int)->(*(struct(*(char),int,char,char)))
(	O
int	O
bytes	int
)	O
{	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
dir	*(char)
=	O
allocDirStruct	()->(*(struct(*(char),int,char,char)))
(	O
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
NULL	O
;	O
dir	*(char)
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
bytes	int
)	O
;	O
if	O
(	O
!	O
dir	*(char)
->	O
name	*(char)
)	O
return	O
NULL	O
;	O
return	O
dir	*(char)
;	O
}	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
allocFileStruct	()->(*(struct(*(char),int,char,char)))
(	O
)	O
{	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
file	*(struct(*(char),int,char,char))
=	O
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
dirstruct	struct(*(char),int,char,char)
)	O
)	O
;	O
if	O
(	O
!	O
file	*(struct(*(char),int,char,char))
)	O
return	O
NULL	O
;	O
file	*(struct(*(char),int,char,char))
->	O
name	*(char)
=	O
NULL	O
;	O
file	*(struct(*(char),int,char,char))
->	O
star	char
=	O
' '	O
;	O
file	*(struct(*(char),int,char,char))
->	O
type	char
=	O
'r'	O
;	O
return	O
file	*(struct(*(char),int,char,char))
;	O
}	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
allocFileStructB	(int)->(*(struct(*(char),int,char,char)))
(	O
int	O
bytes	int
)	O
{	O
struct	O
dirstruct	struct(*(char),int,char,char)
*	O
dir	*(char)
=	O
allocFileStruct	()->(*(struct(*(char),int,char,char)))
(	O
)	O
;	O
if	O
(	O
!	O
dir	*(char)
)	O
return	O
NULL	O
;	O
dir	*(char)
->	O
name	*(char)
=	O
(	O
char	O
*	O
)	O
malloc	(long)->(*(void))
(	O
bytes	int
)	O
;	O
if	O
(	O
!	O
dir	*(char)
->	O
name	*(char)
)	O
return	O
NULL	O
;	O
return	O
dir	*(char)
;	O
}	O
