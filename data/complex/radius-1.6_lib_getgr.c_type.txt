LOCK_DECLARE	O
(	O
lock	O
)	O
static	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
store_group	(*(struct(*(char),*(char),int,*(*(char)))))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grp	*(struct(*(char),*(char),int,*(*(char))))
)	O
{	O
int	O
len	int
;	O
int	O
i	int
,	O
grcnt	int
;	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
result	*(struct(*(char),*(char),int,*(*(char))))
;	O
char	O
*	O
buffer	*(char)
;	O
if	O
(	O
!	O
grp	*(struct(*(char),*(char),int,*(*(char))))
)	O
return	O
NULL	O
;	O
for	O
(	O
grcnt	int
=	O
0	int
;	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
[	O
grcnt	int
]	O
;	O
grcnt	int
++	O
)	O
;	O
len	int
=	O
sizeof	O
(	O
result	*(struct(*(char),*(char),int,*(*(char))))
[	O
0	int
]	O
)	O
+	O
strlen	(*(char))->(long)
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_name	*(char)
)	O
+	O
1	int
+	O
strlen	(*(char))->(long)
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_passwd	*(char)
)	O
+	O
1	int
+	O
(	O
grcnt	int
+	O
1	int
)	O
*	O
sizeof	O
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
[	O
0	int
]	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
grcnt	int
;	O
i	int
++	O
)	O
len	int
+=	O
strlen	(*(char))->(long)
(	O
grp	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
[	O
i	int
]	O
)	O
+	O
1	int
;	O
result	*(struct(*(char),*(char),int,*(*(char))))
=	O
grad_emalloc	(long)->(*(void))
(	O
len	int
)	O
;	O
*	O
result	*(struct(*(char),*(char),int,*(*(char))))
=	O
*	O
grp	*(struct(*(char),*(char),int,*(*(char))))
;	O
result	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
(	O
result	*(struct(*(char),*(char),int,*(*(char))))
+	O
1	int
)	O
;	O
buffer	*(char)
=	O
(	O
char	O
*	O
)	O
(	O
result	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
+	O
grcnt	int
+	O
1	int
)	O
;	O
COPY	O
(	O
gr_name	*(char)
)	O
;	O
COPY	O
(	O
gr_passwd	*(char)
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
grcnt	int
;	O
i	int
++	O
)	O
COPY	O
(	O
gr_mem	*(*(char))
[	O
i	int
]	O
)	O
;	O
result	*(struct(*(char),*(char),int,*(*(char))))
->	O
gr_mem	*(*(char))
[	O
i	int
]	O
=	O
NULL	O
;	O
return	O
result	*(struct(*(char),*(char),int,*(*(char))))
;	O
}	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grad_getgrnam	(*(char))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
group	struct(*(char),*(char),int,*(*(char)))
*	O
grp	*(struct(*(char),*(char),int,*(*(char))))
;	O
LOCK_SET	O
(	O
lock	O
)	O
;	O
grp	*(struct(*(char),*(char),int,*(*(char))))
=	O
store_group	(*(struct(*(char),*(char),int,*(*(char)))))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
getgrnam	(*(char))->(*(struct(*(char),*(char),int,*(*(char)))))
(	O
name	*(char)
)	O
)	O
;	O
LOCK_RELEASE	O
(	O
lock	O
)	O
;	O
return	O
grp	*(struct(*(char),*(char),int,*(*(char))))
;	O
}	O
