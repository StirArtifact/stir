int	O
osip_content_disposition_parse	(*(struct(*(char),struct(int,*(struct`)))),*(char))->(int)
(	O
osip_content_disposition_t	struct(*(char),struct(int,*(struct(*(struct`),*(void)))))
*	O
cd	*(struct(*(char),struct(int,*(struct(*`,*`)))))
,	O
const	O
char	O
*	O
hvalue	*(char)
)	O
{	O
const	O
char	O
*	O
cd_params	*(char)
;	O
int	O
i	int
;	O
cd_params	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
hvalue	*(char)
,	O
';'	O
)	O
;	O
if	O
(	O
cd_params	*(char)
!=	O
NULL	O
)	O
{	O
i	int
=	O
__osip_generic_param_parseall	(*(struct(int,*(struct(*`,*`)))),*(char))->(int)
(	O
&	O
cd	*(struct(*(char),struct(int,*(struct(*`,*`)))))
->	O
gen_params	struct(int,*(struct(*(struct(*`,*`)),*(void))))
,	O
cd_params	*(char)
)	O
;	O
if	O
(	O
i	int
!=	O
0	int
)	O
return	O
i	int
;	O
}	O
else	O
cd_params	*(char)
=	O
hvalue	*(char)
+	O
strlen	(*(char))->(long)
(	O
hvalue	*(char)
)	O
;	O
if	O
(	O
cd_params	*(char)
-	O
hvalue	*(char)
+	O
1	int
<	O
2	int
)	O
return	O
OSIP_SYNTAXERROR	O
;	O
cd	*(struct(*(char),struct(int,*(struct(*`,*`)))))
->	O
element	*(void)
=	O
(	O
char	O
*	O
)	O
osip_malloc	O
(	O
cd_params	*(char)
-	O
hvalue	*(char)
+	O
1	int
)	O
;	O
if	O
(	O
cd	*(struct(*(char),struct(int,*(struct(*`,*`)))))
->	O
element	*(void)
==	O
NULL	O
)	O
return	O
OSIP_NOMEM	O
;	O
osip_clrncpy	(*(char),*(char),long)->(*(char))
(	O
cd	*(struct(*(char),struct(int,*(struct(*`,*`)))))
->	O
element	*(void)
,	O
hvalue	*(char)
,	O
cd_params	*(char)
-	O
hvalue	*(char)
)	O
;	O
return	O
OSIP_SUCCESS	int
;	O
}	O
