struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
void	O
*	O
data	*(void)
;	O
}	O
;	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
{	O
size_t	long
count	int
;	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
*	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
struct	O
grad_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(void))),*(struct(*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(void))),*(void))),int)
*	O
itr	*((*(void),*(void))->(int))
;	O
}	O
;	O
struct	O
grad_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(void))),*(struct(*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(void))),*(void))),int)
{	O
struct	O
grad_iterator	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int)),*(struct(long,*(struct(*(struct`),*(void))),*(struct(*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(struct`),int)))),*(struct(*(struct(*(struct`),*(void))),*(void))),int)
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
grad_list_t	struct
*	O
list	*(*(struct))
;	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
int	O
advanced	int
;	O
}	O
;	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
grad_list_create	()->(*(struct))
(	O
)	O
{	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
p	*(struct)
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
p	*(struct)
)	O
)	O
;	O
p	*(struct)
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
p	*(struct)
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
p	*(struct)
->	O
itr	*((*(void),*(void))->(int))
=	O
NULL	O
;	O
return	O
p	*(struct)
;	O
}	O
void	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
*	O
plist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
list_iterator_t	*((*(void),*(void))->(int))
user_free	*((*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
p	*(struct)
;	O
if	O
(	O
!	O
*	O
plist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
return	O
;	O
p	*(struct)
=	O
(	O
*	O
plist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
while	O
(	O
p	*(struct)
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
if	O
(	O
user_free	*((*(void),*(void))->(int))
)	O
user_free	*((*(void),*(void))->(int))
(	O
p	*(struct)
->	O
data	*(void)
,	O
data	*(void)
)	O
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
p	*(struct)
=	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
}	O
grad_free	(*(void))->(void)
(	O
*	O
plist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
;	O
*	O
plist	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
}	O
void	O
*	O
grad_iterator_current	(*(struct))->(*(void))
(	O
grad_iterator_t	struct
*	O
ip	*(struct)
)	O
{	O
if	O
(	O
!	O
ip	*(struct)
)	O
return	O
NULL	O
;	O
return	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
?	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
static	O
void	O
grad_iterator_attach	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)),*(struct(long,*(struct(*`,*`)),*(struct(*`,*`)),*(struct(*`,*`,*`,int)))))->(void)
(	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
,	O
grad_list_t	struct
*	O
list	*(*(struct))
)	O
{	O
itr	*((*(void),*(void))->(int))
->	O
list	*(*(struct))
=	O
list	*(*(struct))
;	O
itr	*((*(void),*(void))->(int))
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
itr	*((*(void),*(void))->(int))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
list	*(*(struct))
->	O
itr	*((*(void),*(void))->(int))
;	O
itr	*((*(void),*(void))->(int))
->	O
advanced	int
=	O
0	int
;	O
list	*(*(struct))
->	O
itr	*((*(void),*(void))->(int))
=	O
itr	*((*(void),*(void))->(int))
;	O
}	O
static	O
grad_iterator_t	struct
*	O
grad_iterator_detach	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)))->(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)))
(	O
grad_iterator_t	struct
*	O
iter	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
)	O
{	O
grad_iterator_t	struct
*	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
;	O
for	O
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
iter	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
->	O
list	*(*(struct))
->	O
itr	*((*(void),*(void))->(int))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
=	O
NULL	O
;	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
if	O
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
iter	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
)	O
break	O
;	O
if	O
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
if	O
(	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
)	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
else	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
list	*(*(struct))
->	O
itr	*((*(void),*(void))->(int))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
}	O
return	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
}	O
grad_iterator_t	struct
*	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
grad_list_t	struct
*	O
list	*(*(struct))
)	O
{	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
NULL	O
;	O
itr	*((*(void),*(void))->(int))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
itr	*((*(void),*(void))->(int))
)	O
)	O
;	O
grad_iterator_attach	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)),*(struct(long,*(struct(*`,*`)),*(struct(*`,*`)),*(struct(*`,*`,*`,int)))))->(void)
(	O
itr	*((*(void),*(void))->(int))
,	O
list	*(*(struct))
)	O
;	O
return	O
itr	*((*(void),*(void))->(int))
;	O
}	O
void	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
grad_iterator_t	struct
*	O
*	O
ip	*(struct)
)	O
{	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
ip	*(struct)
||	O
!	O
*	O
ip	*(struct)
)	O
return	O
;	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_detach	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)))->(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)))
(	O
*	O
ip	*(struct)
)	O
;	O
if	O
(	O
itr	*((*(void),*(void))->(int))
)	O
grad_free	(*(void))->(void)
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
*	O
ip	*(struct)
=	O
NULL	O
;	O
}	O
void	O
*	O
grad_iterator_first	(*(struct))->(*(void))
(	O
grad_iterator_t	struct
*	O
ip	*(struct)
)	O
{	O
if	O
(	O
!	O
ip	*(struct)
)	O
return	O
NULL	O
;	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ip	*(struct)
->	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
ip	*(struct)
->	O
advanced	int
=	O
0	int
;	O
return	O
grad_iterator_current	(*(struct))->(*(void))
(	O
ip	*(struct)
)	O
;	O
}	O
void	O
*	O
grad_iterator_next	(*(struct))->(*(void))
(	O
grad_iterator_t	struct
*	O
ip	*(struct)
)	O
{	O
if	O
(	O
!	O
ip	*(struct)
||	O
!	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
ip	*(struct)
->	O
advanced	int
)	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
ip	*(struct)
->	O
advanced	int
=	O
0	int
;	O
return	O
grad_iterator_current	(*(struct))->(*(void))
(	O
ip	*(struct)
)	O
;	O
}	O
static	O
void	O
_iterator_advance	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)),*(struct(*(struct(*`,*`)),*(void))))->(void)
(	O
grad_iterator_t	struct
*	O
ip	*(struct)
,	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
e	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
for	O
(	O
;	O
ip	*(struct)
;	O
ip	*(struct)
=	O
ip	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
if	O
(	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
==	O
e	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
ip	*(struct)
->	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
e	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
ip	*(struct)
->	O
advanced	int
++	O
;	O
}	O
}	O
}	O
void	O
*	O
grad_list_item	(*(struct),long)->(*(void))
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
size_t	long
n	long
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
p	*(struct)
;	O
if	O
(	O
!	O
list	*(*(struct))
||	O
n	long
>=	O
list	*(*(struct))
->	O
count	int
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(struct)
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
n	long
>	O
0	int
&&	O
p	*(struct)
;	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
n	long
--	O
)	O
;	O
return	O
p	*(struct)
->	O
data	*(void)
;	O
}	O
size_t	long
grad_list_count	(*(struct))->(long)
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
)	O
{	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
0	int
;	O
return	O
list	*(*(struct))
->	O
count	int
;	O
}	O
void	O
grad_list_append	(*(struct),*(void))->(void)
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
)	O
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
NULL	O
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
if	O
(	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
else	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
list	*(*(struct))
->	O
count	int
++	O
;	O
}	O
void	O
grad_list_prepend	(*(struct),*(void))->(void)
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
void	O
*	O
data	*(void)
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
)	O
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
list	*(*(struct))
->	O
count	int
++	O
;	O
}	O
static	O
int	O
cmp_ptr	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
a	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
,	O
const	O
void	O
*	O
b	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
{	O
return	O
a	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
!=	O
b	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
}	O
void	O
*	O
grad_list_remove	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
list_comp_t	*((*(void),*(void))->(int))
cmp	*((*(void),*(void))->(int))
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
p	*(struct)
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
cmp	*((*(void),*(void))->(int))
)	O
cmp	*((*(void),*(void))->(int))
=	O
cmp_ptr	(*(void),*(void))->(int)
;	O
for	O
(	O
p	*(struct)
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
=	O
NULL	O
;	O
p	*(struct)
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
=	O
p	*(struct)
,	O
p	*(struct)
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
if	O
(	O
cmp	*((*(void),*(void))->(int))
(	O
p	*(struct)
->	O
data	*(void)
,	O
data	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
p	*(struct)
)	O
return	O
0	int
;	O
_iterator_advance	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)),*(struct(*(struct(*`,*`)),*(void))))->(void)
(	O
list	*(*(struct))
->	O
itr	*((*(void),*(void))->(int))
,	O
p	*(struct)
)	O
;	O
if	O
(	O
p	*(struct)
==	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
if	O
(	O
!	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
NULL	O
;	O
}	O
else	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
p	*(struct)
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
;	O
if	O
(	O
p	*(struct)
==	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
list	*(*(struct))
->	O
tail	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
;	O
grad_free	(*(void))->(void)
(	O
p	*(struct)
)	O
;	O
list	*(*(struct))
->	O
count	int
--	O
;	O
return	O
data	*(void)
;	O
}	O
void	O
grad_list_iterate	(*(struct),*((*(void),*(void))->(int)),*(void))->(void)
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
list_iterator_t	*((*(void),*(void))->(int))
func	*((*(void),*(void))->(int))
,	O
void	O
*	O
data	*(void)
)	O
{	O
grad_iterator_t	struct
itr	*((*(void),*(void))->(int))
;	O
void	O
*	O
p	*(struct)
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
;	O
grad_iterator_attach	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)),*(struct(long,*(struct(*`,*`)),*(struct(*`,*`)),*(struct(*`,*`,*`,int)))))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
,	O
list	*(*(struct))
)	O
;	O
for	O
(	O
p	*(struct)
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
)	O
{	O
if	O
(	O
func	*((*(void),*(void))->(int))
(	O
p	*(struct)
,	O
data	*(void)
)	O
)	O
break	O
;	O
}	O
grad_iterator_detach	(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)))->(*(struct(*(struct(*`,*`,*`,int)),*(struct(long,*`,*`,*`)),*(struct(*`,*`)),int)))
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
}	O
void	O
*	O
grad_list_locate	(*(struct),*(void),*((*(void),*(void))->(int)))->(*(void))
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
list_comp_t	*((*(void),*(void))->(int))
cmp	*((*(void),*(void))->(int))
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
NULL	O
;	O
if	O
(	O
!	O
cmp	*((*(void),*(void))->(int))
)	O
cmp	*((*(void),*(void))->(int))
=	O
cmp_ptr	(*(void),*(void))->(int)
;	O
for	O
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
if	O
(	O
cmp	*((*(void),*(void))->(int))
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
,	O
data	*(void)
)	O
==	O
0	int
)	O
break	O
;	O
return	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
?	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
:	O
NULL	O
;	O
}	O
int	O
grad_list_insert_sorted	(*(struct),*(void),*((*(void),*(void))->(int)))->(int)
(	O
struct	O
grad_list	struct(long,*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(void))),*(void))),*(struct))
*	O
list	*(*(struct))
,	O
void	O
*	O
data	*(void)
,	O
list_comp_t	*((*(void),*(void))->(int))
cmp	*((*(void),*(void))->(int))
)	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
*	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
;	O
if	O
(	O
!	O
list	*(*(struct))
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
cmp	*((*(void),*(void))->(int))
)	O
return	O
-	O
1	int
;	O
for	O
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
list	*(*(struct))
->	O
head	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
=	O
NULL	O
;	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
,	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
)	O
if	O
(	O
cmp	*((*(void),*(void))->(int))
(	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
,	O
data	*(void)
)	O
>	O
0	int
)	O
break	O
;	O
if	O
(	O
!	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
)	O
{	O
grad_list_prepend	(*(struct),*(void))->(void)
(	O
list	*(*(struct))
,	O
data	*(void)
)	O
;	O
}	O
else	O
if	O
(	O
!	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
{	O
grad_list_append	(*(struct),*(void))->(void)
(	O
list	*(*(struct))
,	O
data	*(void)
)	O
;	O
}	O
else	O
{	O
struct	O
grad_list_entry	struct(*(struct(*(struct(*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
)	O
)	O
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
data	*(void)
=	O
data	*(void)
;	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
cur	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
list	*(*(struct))
->	O
count	int
++	O
;	O
prev	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int)),*(struct(long,*(struct`),*(struct`),*(struct`))),*(struct(*(struct`),*(void))),int))
->	O
next	*(struct(*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct(long,*(char)))))
=	O
ep	*(struct(*(struct(*(struct`),*(void))),*(void)))
;	O
}	O
return	O
0	int
;	O
}	O
