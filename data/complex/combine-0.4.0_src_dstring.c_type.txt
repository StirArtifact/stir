DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrcat	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
,	O
append	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
append	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
char	O
*	O
string_pointer	*(char)
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
append	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrmakeown	(*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
if	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
string_pointer	*(char)
=	O
malloc	(long)->(*(void))
(	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
else	O
string_pointer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
+	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
if	O
(	O
string_pointer	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
string_pointer	*(char)
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
+	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
+	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
return	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrncat	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))),long)->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
,	O
append	*(struct(long,enum(int,int,int),*(char)))
,	O
len	long
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
append	*(struct(long,enum(int,int,int),*(char)))
;	O
size_t	long
len	long
;	O
{	O
char	O
*	O
string_pointer	*(char)
;	O
size_t	long
move_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
append	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
move_length	long
=	O
min	O
(	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
len	long
)	O
;	O
if	O
(	O
move_length	long
==	O
0	int
)	O
return	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrmakeown	(*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
if	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
string_pointer	*(char)
=	O
malloc	(long)->(*(void))
(	O
move_length	long
)	O
;	O
else	O
string_pointer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
+	O
move_length	long
)	O
;	O
if	O
(	O
string_pointer	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
string_pointer	*(char)
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
+	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
append	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
move_length	long
)	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
+	O
move_length	long
;	O
return	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
DSTR_SIZE_TYPE	O
dstrchr	(*(struct(long,enum(int,int,int),*(char))),int)->(long)
(	O
string	*(char)
,	O
c	int
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
unsigned	O
int	O
c	int
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
c	int
>	O
255	int
)	O
return	O
DSTR_EINVALID	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
string	*(char)
->	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
string	*(char)
->	O
string	*(char)
[	O
i	long
]	O
==	O
c	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
DSTR_SIZE_TYPE	O
dstrrchr	(*(struct(long,enum(int,int,int),*(char))),int)->(long)
(	O
string	*(char)
,	O
c	int
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
unsigned	O
int	O
c	int
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
c	int
>	O
255	int
)	O
return	O
DSTR_EINVALID	O
;	O
for	O
(	O
i	long
=	O
string	*(char)
->	O
length	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
string	*(char)
->	O
string	*(char)
[	O
i	long
]	O
==	O
c	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
dstrcmp	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(int)
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string1	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string2	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
min	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
i	long
++	O
)	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
!=	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
)	O
return	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
-	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
;	O
return	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
-	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
}	O
int	O
dstrncmp	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))),long)->(int)
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
,	O
len	long
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string1	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string2	*(struct(long,enum(int,int,int),*(char)))
;	O
size_t	long
len	long
;	O
{	O
DSTR_SIZE_TYPE	O
i	long
;	O
DSTR_SIZE_TYPE	O
upper_common_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
upper_common_length	long
=	O
min	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
if	O
(	O
len	long
<	O
upper_common_length	long
)	O
upper_common_length	long
=	O
len	long
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
upper_common_length	long
;	O
i	long
++	O
)	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
!=	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
)	O
return	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
-	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
;	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
>=	O
len	long
&&	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
>=	O
len	long
)	O
return	O
0	int
;	O
return	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
-	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
}	O
int	O
dstrcasecmp	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(int)
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string1	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string2	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
int	O
return_value	int
;	O
DSTR_SIZE_TYPE	O
upper_common_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
upper_common_length	long
=	O
min	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
return_value	int
=	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
upper_common_length	long
)	O
;	O
if	O
(	O
return_value	int
==	O
0	int
)	O
return_value	int
=	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
-	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
return	O
return_value	int
;	O
}	O
int	O
dstrncasecmp	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))),long)->(int)
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
,	O
len	long
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string1	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string2	*(struct(long,enum(int,int,int),*(char)))
;	O
size_t	long
len	long
;	O
{	O
int	O
return_value	int
;	O
DSTR_SIZE_TYPE	O
upper_common_length	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
len	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
else	O
return	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
1	int
;	O
upper_common_length	long
=	O
min	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
if	O
(	O
len	long
<	O
upper_common_length	long
)	O
upper_common_length	long
=	O
len	long
;	O
return_value	int
=	O
strncasecmp	(*(char),*(char),long)->(int)
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
upper_common_length	long
)	O
;	O
if	O
(	O
return_value	int
==	O
0	int
)	O
{	O
if	O
(	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
>=	O
len	long
&&	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
>=	O
len	long
)	O
return_value	int
=	O
0	int
;	O
else	O
return_value	int
=	O
string1	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
-	O
string2	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
}	O
return	O
return_value	int
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrcpy	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
,	O
source	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
source	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
char	O
*	O
string_pointer	*(char)
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
source	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrmakeown	(*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
if	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
!=	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
)	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
NULL	O
;	O
}	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
0	int
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
=	O
DStr_not_own	int
;	O
}	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
string_pointer	*(char)
=	O
malloc	(long)->(*(void))
(	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
else	O
string_pointer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
if	O
(	O
string_pointer	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
string_pointer	*(char)
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
return	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrncpy	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))),long)->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
,	O
source	*(struct(long,enum(int,int,int),*(char)))
,	O
len	long
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
source	*(struct(long,enum(int,int,int),*(char)))
;	O
size_t	long
len	long
;	O
{	O
char	O
*	O
string_pointer	*(char)
;	O
if	O
(	O
DSTR_INVALID	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
source	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
len	long
=	O
min	O
(	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
len	long
)	O
;	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
==	O
DStr_not_own	int
)	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrmakeown	(*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
if	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
}	O
if	O
(	O
len	long
==	O
0	int
)	O
{	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
!=	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
)	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
NULL	O
;	O
}	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
0	int
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
=	O
DStr_not_own	int
;	O
}	O
if	O
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
string_pointer	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
)	O
;	O
else	O
string_pointer	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
len	long
)	O
;	O
if	O
(	O
string_pointer	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
string_pointer	*(char)
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
source	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
len	long
)	O
;	O
target	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
len	long
;	O
return	O
target	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrerror	(int)->(*(struct(long,enum(int,int,int),*(char))))
(	O
errcode	int
)	O
int	O
errcode	int
;	O
{	O
return	O
dstrdupstr	(*(char))->(*(struct(long,enum(int,int,int),*(char))))
(	O
strerror	(int)->(*(char))
(	O
errcode	int
)	O
)	O
;	O
}	O
size_t	long
dstrlen	(*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
{	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
return	O
string	*(char)
->	O
length	long
;	O
}	O
DSTR_SIZE_TYPE	O
dstrpbrk	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
charset	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
char	O
charlist	array(char)
[	O
256	int
]	O
;	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
string	*(char)
->	O
length	long
+	O
1	int
;	O
if	O
(	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
return	O
string	*(char)
->	O
length	long
+	O
1	int
;	O
bzero	(*(void),long)->(void)
(	O
charlist	array(char)
,	O
256	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
i	long
++	O
)	O
charlist	array(char)
[	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
]	O
=	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
string	*(char)
->	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
charlist	array(char)
[	O
string	*(char)
->	O
string	*(char)
[	O
i	long
]	O
]	O
!=	O
0	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
string	*(char)
->	O
length	long
+	O
1	int
;	O
}	O
DSTR_SIZE_TYPE	O
dstrrpbrk	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
charset	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
char	O
charlist	array(char)
[	O
256	int
]	O
;	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
bzero	(*(void),long)->(void)
(	O
charlist	array(char)
,	O
256	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
i	long
++	O
)	O
charlist	array(char)
[	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
]	O
=	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
string	*(char)
->	O
length	long
-	O
1	int
;	O
i	long
>=	O
0	int
;	O
i	long
--	O
)	O
if	O
(	O
charlist	array(char)
[	O
string	*(char)
->	O
string	*(char)
[	O
i	long
]	O
]	O
!=	O
0	int
)	O
return	O
i	long
+	O
1	int
;	O
return	O
0	int
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrsep	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
charset	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
return_value	int
;	O
char	O
*	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
NULL	O
;	O
return_value	int
=	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
dstrpbrk	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
-	O
1	int
;	O
return_value	int
->	O
own_string	enum(int,int,int)
=	O
DStr_own	int
;	O
return_value	int
->	O
string	*(char)
=	O
malloc	(long)->(*(void))
(	O
return_value	int
->	O
length	long
)	O
;	O
if	O
(	O
return_value	int
->	O
string	*(char)
==	O
NULL	O
)	O
{	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
return_value	int
->	O
string	*(char)
,	O
string	*(char)
->	O
string	*(char)
,	O
return_value	int
->	O
length	long
)	O
;	O
string	*(char)
->	O
length	long
=	O
string	*(char)
->	O
length	long
-	O
return_value	int
->	O
length	long
-	O
1	int
;	O
if	O
(	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
{	O
if	O
(	O
string	*(char)
->	O
own_string	enum(int,int,int)
==	O
DStr_own	int
)	O
free	(*(void))->(void)
(	O
string	*(char)
->	O
string	*(char)
)	O
;	O
string	*(char)
->	O
string	*(char)
=	O
NULL	O
;	O
string	*(char)
->	O
own_string	enum(int,int,int)
=	O
DStr_not_own	int
;	O
}	O
else	O
{	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
=	O
malloc	(long)->(*(void))
(	O
string	*(char)
->	O
length	long
)	O
;	O
if	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
{	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
,	O
string	*(char)
->	O
string	*(char)
+	O
return_value	int
->	O
length	long
+	O
1	int
,	O
string	*(char)
->	O
length	long
)	O
;	O
if	O
(	O
string	*(char)
->	O
own_string	enum(int,int,int)
==	O
DStr_own	int
)	O
free	(*(void))->(void)
(	O
string	*(char)
->	O
string	*(char)
)	O
;	O
string	*(char)
->	O
string	*(char)
=	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
string	*(char)
->	O
own_string	enum(int,int,int)
=	O
DStr_own	int
;	O
}	O
return	O
return_value	int
;	O
}	O
size_t	long
dstrspn	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
charset	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
char	O
charlist	array(char)
[	O
256	int
]	O
;	O
DSTR_SIZE_TYPE	O
i	long
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
bzero	(*(void),long)->(void)
(	O
charlist	array(char)
,	O
256	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
i	long
++	O
)	O
charlist	array(char)
[	O
charset	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
[	O
i	long
]	O
]	O
=	O
-	O
1	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
string	*(char)
->	O
length	long
;	O
i	long
++	O
)	O
if	O
(	O
charlist	array(char)
[	O
string	*(char)
->	O
string	*(char)
[	O
i	long
]	O
]	O
==	O
0	int
)	O
return	O
i	long
;	O
return	O
string	*(char)
->	O
length	long
;	O
}	O
size_t	long
dstrcspn	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
charset	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
return	O
dstrpbrk	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
charset	*(struct(long,enum(int,int,int),*(char)))
)	O
-	O
1	int
;	O
}	O
DSTR_SIZE_TYPE	O
dstrstr	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
string	*(char)
,	O
substring	*(struct(long,enum(int,int,int),*(char)))
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
substring	*(struct(long,enum(int,int,int),*(char)))
;	O
{	O
unsigned	O
char	O
*	O
curr_string_pos	*(char)
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
substring	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
string	*(char)
->	O
length	long
<	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
||	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
==	O
0	int
)	O
return	O
2	int
;	O
curr_string_pos	*(char)
=	O
string	*(char)
->	O
string	*(char)
;	O
while	O
(	O
curr_string_pos	*(char)
+	O
(	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
-	O
1	int
<	O
string	*(char)
->	O
string	*(char)
+	O
string	*(char)
->	O
length	long
)	O
{	O
unsigned	O
char	O
*	O
curr_substring_pos	*(char)
;	O
curr_substring_pos	*(char)
=	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
;	O
while	O
(	O
*	O
curr_substring_pos	*(char)
==	O
*	O
curr_string_pos	*(char)
&&	O
curr_substring_pos	*(char)
<	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
+	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
{	O
curr_substring_pos	*(char)
++	O
;	O
curr_string_pos	*(char)
++	O
;	O
}	O
if	O
(	O
(	O
curr_substring_pos	*(char)
-	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
)	O
==	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
return	O
(	O
curr_string_pos	*(char)
-	O
string	*(char)
->	O
string	*(char)
)	O
-	O
(	O
curr_substring_pos	*(char)
-	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
)	O
+	O
1	int
;	O
else	O
curr_string_pos	*(char)
=	O
curr_string_pos	*(char)
-	O
(	O
curr_substring_pos	*(char)
-	O
substring	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
)	O
;	O
curr_string_pos	*(char)
++	O
;	O
}	O
return	O
0	int
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrdup	(*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
string	*(char)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
return_value	int
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
NULL	O
;	O
return_value	int
=	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
string	*(char)
->	O
length	long
;	O
if	O
(	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
{	O
return_value	int
->	O
string	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
return_value	int
->	O
own_string	enum(int,int,int)
=	O
DStr_own	int
;	O
return_value	int
->	O
string	*(char)
=	O
malloc	(long)->(*(void))
(	O
return_value	int
->	O
length	long
)	O
;	O
if	O
(	O
return_value	int
->	O
string	*(char)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
return_value	int
->	O
string	*(char)
,	O
string	*(char)
->	O
string	*(char)
,	O
return_value	int
->	O
length	long
)	O
;	O
}	O
return	O
return_value	int
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrdupstr	(*(char))->(*(struct(long,enum(int,int,int),*(char))))
(	O
cstring	*(char)
)	O
char	O
*	O
cstring	*(char)
;	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
return_value	int
;	O
return_value	int
=	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
strlen	(*(char))->(long)
(	O
cstring	*(char)
)	O
;	O
if	O
(	O
return_value	int
->	O
length	long
==	O
0	int
)	O
{	O
return_value	int
->	O
string	*(char)
=	O
NULL	O
;	O
}	O
else	O
{	O
return_value	int
->	O
own_string	enum(int,int,int)
=	O
DStr_own	int
;	O
return_value	int
->	O
string	*(char)
=	O
malloc	(long)->(*(void))
(	O
return_value	int
->	O
length	long
)	O
;	O
if	O
(	O
return_value	int
->	O
string	*(char)
==	O
NULL	O
)	O
{	O
free	(*(void))->(void)
(	O
return_value	int
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
return_value	int
->	O
string	*(char)
,	O
cstring	*(char)
,	O
return_value	int
->	O
length	long
)	O
;	O
}	O
return	O
return_value	int
;	O
}	O
char	O
*	O
strdupdstr	(*(struct(long,enum(int,int,int),*(char))))->(*(char))
(	O
string	*(char)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
{	O
char	O
*	O
return_value	int
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
NULL	O
;	O
return_value	int
=	O
malloc	(long)->(*(void))
(	O
string	*(char)
->	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
strncpy	(*(char),*(char),long)->(*(char))
(	O
return_value	int
,	O
string	*(char)
->	O
string	*(char)
,	O
string	*(char)
->	O
length	long
)	O
;	O
return_value	int
[	O
string	*(char)
->	O
length	long
]	O
=	O
'\0'	O
;	O
return	O
return_value	int
;	O
}	O
int	O
dstrmapstr	(*(struct(long,enum(int,int,int),*(char))),*(char),enum(int,int,int))->(int)
(	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
,	O
cstring	*(char)
,	O
own_string	enum(int,int,int)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
;	O
char	O
*	O
cstring	*(char)
;	O
DStr_codes	enum(int,int,int)
own_string	enum(int,int,int)
;	O
{	O
if	O
(	O
DSTR_INVALID	O
(	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
EXIT_FAILURE	int
;	O
if	O
(	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
==	O
DStr_own	int
)	O
free	(*(void))->(void)
(	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
)	O
;	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
strlen	(*(char))->(long)
(	O
cstring	*(char)
)	O
;	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
=	O
own_string	enum(int,int,int)
;	O
descriptor	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
cstring	*(char)
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
return_value	int
;	O
return_value	int
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
)	O
)	O
;	O
if	O
(	O
return_value	int
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_value	int
->	O
length	long
=	O
0	int
;	O
return_value	int
->	O
own_string	enum(int,int,int)
=	O
DStr_not_own	int
;	O
return_value	int
->	O
string	*(char)
=	O
NULL	O
;	O
return	O
return_value	int
;	O
}	O
void	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
string	*(char)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
{	O
if	O
(	O
string	*(char)
==	O
NULL	O
)	O
return	O
;	O
if	O
(	O
string	*(char)
->	O
own_string	enum(int,int,int)
==	O
DStr_own	int
&&	O
string	*(char)
->	O
string	*(char)
!=	O
NULL	O
)	O
free	(*(void))->(void)
(	O
string	*(char)
->	O
string	*(char)
)	O
;	O
string	*(char)
->	O
string	*(char)
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
string	*(char)
)	O
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrmakeown	(*(struct(long,enum(int,int,int),*(char))))->(*(struct(long,enum(int,int,int),*(char))))
(	O
string	*(char)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
{	O
char	O
*	O
new_string	*(char)
;	O
if	O
(	O
string	*(char)
->	O
length	long
!=	O
0	int
)	O
{	O
new_string	*(char)
=	O
malloc	(long)->(*(void))
(	O
string	*(char)
->	O
length	long
)	O
;	O
if	O
(	O
new_string	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
new_string	*(char)
,	O
string	*(char)
->	O
string	*(char)
,	O
string	*(char)
->	O
length	long
)	O
;	O
string	*(char)
->	O
string	*(char)
=	O
new_string	*(char)
;	O
}	O
else	O
if	O
(	O
string	*(char)
->	O
string	*(char)
!=	O
NULL	O
)	O
{	O
new_string	*(char)
=	O
malloc	(long)->(*(void))
(	O
1	int
)	O
;	O
if	O
(	O
new_string	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new_string	*(char)
[	O
0	int
]	O
=	O
'\0'	O
;	O
string	*(char)
->	O
string	*(char)
=	O
new_string	*(char)
;	O
}	O
string	*(char)
->	O
own_string	enum(int,int,int)
=	O
DStr_own	int
;	O
return	O
string	*(char)
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrsubstr	(*(struct(long,enum(int,int,int),*(char))),long,long,long,enum(int,int,int))->(*(struct(long,enum(int,int,int),*(char))))
(	O
string	*(char)
,	O
start	long
,	O
end	long
,	O
length	long
,	O
own_string	enum(int,int,int)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
size_t	long
start	long
;	O
size_t	long
end	long
;	O
size_t	long
length	long
;	O
DStr_codes	enum(int,int,int)
own_string	enum(int,int,int)
;	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
(	O
end	long
==	O
0	int
&&	O
length	long
==	O
0	int
)	O
||	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
{	O
return_val	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
;	O
if	O
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
NULL	O
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
0	int
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
=	O
DStr_not_own	int
;	O
return	O
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
if	O
(	O
length	long
==	O
0	int
)	O
length	long
=	O
end	long
-	O
start	long
+	O
1	int
;	O
else	O
if	O
(	O
end	long
==	O
0	int
)	O
end	long
=	O
start	long
+	O
length	long
-	O
1	int
;	O
else	O
if	O
(	O
start	long
==	O
0	int
)	O
start	long
=	O
end	long
-	O
length	long
+	O
1	int
;	O
if	O
(	O
end	long
<	O
start	long
||	O
start	long
+	O
length	long
-	O
1	int
!=	O
end	long
)	O
return	O
NULL	O
;	O
if	O
(	O
end	long
>	O
string	*(char)
->	O
length	long
)	O
return	O
NULL	O
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
;	O
if	O
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
=	O
own_string	enum(int,int,int)
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
=	O
length	long
;	O
if	O
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
own_string	enum(int,int,int)
==	O
DStr_own	int
)	O
{	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
malloc	(long)->(*(void))
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
if	O
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
==	O
NULL	O
)	O
{	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
return	O
NULL	O
;	O
}	O
memmove	(*(void),*(void),long)->(*(void))
(	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
,	O
string	*(char)
->	O
string	*(char)
+	O
(	O
start	long
-	O
1	int
)	O
,	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
)	O
;	O
}	O
else	O
{	O
return_val	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
=	O
(	O
string	*(char)
->	O
string	*(char)
+	O
(	O
start	long
-	O
1	int
)	O
)	O
;	O
}	O
return	O
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
dstrextend	(*(struct(long,enum(int,int,int),*(char))),long,int)->(*(struct(long,enum(int,int,int),*(char))))
(	O
string	*(char)
,	O
len	long
,	O
c	int
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
size_t	long
len	long
;	O
int	O
c	int
;	O
{	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
NULL	O
;	O
if	O
(	O
string	*(char)
->	O
length	long
==	O
0	int
)	O
string	*(char)
->	O
string	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
)	O
;	O
else	O
string	*(char)
->	O
string	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
string	*(char)
->	O
string	*(char)
,	O
string	*(char)
->	O
length	long
+	O
len	long
)	O
;	O
if	O
(	O
string	*(char)
->	O
string	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
memset	(*(void),int,long)->(*(void))
(	O
string	*(char)
->	O
string	*(char)
+	O
string	*(char)
->	O
length	long
,	O
c	int
,	O
len	long
)	O
;	O
string	*(char)
->	O
length	long
+=	O
len	long
;	O
return	O
string	*(char)
;	O
}	O
int	O
dstrsplit	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))),*(*(*(struct(long,enum(int,int,int),*`)))),*(int))->(int)
(	O
string	*(char)
,	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
,	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
,	O
return_length	*(int)
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
*	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
;	O
int	O
*	O
return_length	*(int)
;	O
{	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
;	O
int	O
next_pos	int
;	O
if	O
(	O
DSTR_INVALID	O
(	O
string	*(char)
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
if	O
(	O
DSTR_INVALID	O
(	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
)	O
)	O
return	O
DSTR_EINVALID	O
;	O
*	O
return_length	*(int)
=	O
0	int
;	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
)	O
;	O
if	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
=	O
dstrsubstr	(*(struct(long,enum(int,int,int),*(char))),long,long,long,enum(int,int,int))->(*(struct(long,enum(int,int,int),*(char))))
(	O
string	*(char)
,	O
1	int
,	O
0	int
,	O
string	*(char)
->	O
length	long
,	O
DStr_not_own	int
)	O
;	O
next_pos	int
=	O
dstrstr	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
,	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
while	O
(	O
next_pos	int
>	O
0	int
)	O
{	O
(	O
*	O
return_length	*(int)
)	O
++	O
;	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
=	O
realloc	(*(void),long)->(*(void))
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
,	O
(	O
*	O
return_length	*(int)
)	O
*	O
sizeof	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
)	O
;	O
if	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
[	O
*	O
return_length	*(int)
-	O
1	int
]	O
=	O
dstrsubstr	(*(struct(long,enum(int,int,int),*(char))),long,long,long,enum(int,int,int))->(*(struct(long,enum(int,int,int),*(char))))
(	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
,	O
1	int
,	O
next_pos	int
-	O
1	int
,	O
0	int
,	O
DStr_not_own	int
)	O
;	O
if	O
(	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
[	O
*	O
return_length	*(int)
-	O
1	int
]	O
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
->	O
string	*(char)
+=	O
(	O
next_pos	int
-	O
1	int
)	O
+	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
-=	O
(	O
next_pos	int
-	O
1	int
)	O
+	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
;	O
next_pos	int
=	O
dstrstr	(*(struct(long,enum(int,int,int),*(char))),*(struct(long,enum(int,int,int),*(char))))->(long)
(	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
,	O
delimiter	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
}	O
(	O
*	O
return_length	*(int)
)	O
++	O
;	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
=	O
realloc	(*(void),long)->(*(void))
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
,	O
(	O
*	O
return_length	*(int)
)	O
*	O
sizeof	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
)	O
;	O
if	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
if	O
(	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
>	O
0	int
)	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
[	O
*	O
return_length	*(int)
-	O
1	int
]	O
=	O
dstrsubstr	(*(struct(long,enum(int,int,int),*(char))),long,long,long,enum(int,int,int))->(*(struct(long,enum(int,int,int),*(char))))
(	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
,	O
1	int
,	O
0	int
,	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
->	O
length	long
,	O
DStr_not_own	int
)	O
;	O
else	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
[	O
*	O
return_length	*(int)
-	O
1	int
]	O
=	O
dstrdupstr	(*(char))->(*(struct(long,enum(int,int,int),*(char))))
(	O
""	*(char)
)	O
;	O
if	O
(	O
(	O
*	O
return_array	*(*(*(struct(long,enum(int,int,int),*(char)))))
)	O
[	O
*	O
return_length	*(int)
-	O
1	int
]	O
==	O
NULL	O
)	O
return	O
DSTR_EMEMORY	O
;	O
dstrfree	(*(struct(long,enum(int,int,int),*(char))))->(void)
(	O
remaining_string	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
return	O
EXIT_SUCCESS	int
;	O
}	O
BIGNUMBER	long
dstrtonum	(*(struct(long,enum(int,int,int),*(char))),*(*(struct(long,enum(int,int,int),*(char)))),int)->(long)
(	O
string	*(char)
,	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
,	O
base	int
)	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
string	*(char)
;	O
DStr_string_descriptor	struct(long,enum(int,int,int),*(char))
*	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
;	O
int	O
base	int
;	O
{	O
BIGNUMBER	long
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
char	O
*	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
;	O
char	O
*	O
temp_remainder	*(char)
;	O
if	O
(	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
!=	O
NULL	O
)	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
=	O
string	*(char)
;	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
=	O
malloc	(long)->(*(void))
(	O
string	*(char)
->	O
length	long
+	O
1	int
)	O
;	O
if	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
NULL	O
)	O
return	O
0	int
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
,	O
string	*(char)
->	O
string	*(char)
,	O
string	*(char)
->	O
length	long
)	O
;	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
[	O
string	*(char)
->	O
length	long
]	O
=	O
'\0'	O
;	O
return_val	*(struct(long,enum(int,int,int),*(char)))
=	O
STRTOBIGNUMBER	O
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
,	O
&	O
temp_remainder	*(char)
,	O
base	int
)	O
;	O
if	O
(	O
*	O
temp_remainder	*(char)
==	O
'\0'	O
)	O
{	O
if	O
(	O
temp_remainder	*(char)
-	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
==	O
string	*(char)
->	O
length	long
)	O
{	O
if	O
(	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
!=	O
NULL	O
)	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
=	O
NULL	O
;	O
free	(*(void))->(void)
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
return	O
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
}	O
if	O
(	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
!=	O
NULL	O
)	O
{	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
=	O
dstrnew	()->(*(struct(long,enum(int,int,int),*(char))))
(	O
)	O
;	O
if	O
(	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
==	O
NULL	O
)	O
{	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
=	O
string	*(char)
;	O
free	(*(void))->(void)
(	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
return	O
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
(	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
)	O
->	O
length	long
=	O
string	*(char)
->	O
length	long
-	O
(	O
temp_remainder	*(char)
-	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
(	O
*	O
remainder	*(*(struct(long,enum(int,int,int),*(char))))
)	O
->	O
string	*(char)
=	O
string	*(char)
->	O
string	*(char)
+	O
(	O
temp_remainder	*(char)
-	O
temp_string	*(struct(long,enum(int,int,int),*(char)))
)	O
;	O
}	O
return	O
return_val	*(struct(long,enum(int,int,int),*(char)))
;	O
}	O
