struct	O
wget_hsts_db_st	struct(*(char),*(struct),*(struct),long)
{	O
const	O
char	O
*	O
fname	*(char)
;	O
wget_hashmap	struct
*	O
entries	*(struct)
;	O
wget_thread_mutex	*(struct)
mutex	*(*(struct))
;	O
int64_t	long
load_time	long
;	O
}	O
;	O
typedef	O
struct	O
{	O
const	O
char	O
*	O
host	*(char)
;	O
int64_t	long
expires	long
;	O
int64_t	long
created	long
;	O
int64_t	long
maxage	long
;	O
uint16_t	short
port	short
;	O
bool	bool
include_subdomains	int
:	O
1	int
;	O
}	O
hsts_entry	struct(*(char),long,long,long,short,bool)
;	O
static	O
const	O
wget_hsts_db_vtable	struct(*((*(struct),*(char),short)->(int)),*((*(struct),*(char))->(*(struct))),*((*(struct))->(void)),*((*(*(struct`)))->(void)),*((*(struct),*(char),short,long,int)->(void)),*((*(struct))->(int)),*((*(struct))->(int)))
*	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
;	O
void	O
wget_hsts_set_plugin	(*(struct(*((*`,*`,short)->(int)),*((*`,*`)->(*`)),*((*`)->(void)),*((*`)->(void)),*((*`,*`,short,long,int)->(void)),*((*`)->(int)),*((*`)->(int)))))->(void)
(	O
const	O
wget_hsts_db_vtable	struct(*((*(struct),*(char),short)->(int)),*((*(struct),*(char))->(*(struct))),*((*(struct))->(void)),*((*(*(struct`)))->(void)),*((*(struct),*(char),short,long,int)->(void)),*((*(struct))->(int)),*((*(struct))->(int)))
*	O
vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
{	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
=	O
vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
;	O
}	O
__attribute__	O
(	O
(	O
no_sanitize	O
(	O
"integer"	*(char)
)	O
)	O
)	O
WGET_GCC_PURE	O
static	O
unsigned	O
int	O
hash_hsts	(*(struct(*(char),long,long,long,short,bool)))->(int)
(	O
const	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
)	O
{	O
unsigned	O
int	O
hash	*((*(void))->(int))
=	O
hsts	bool
->	O
port	short
;	O
const	O
unsigned	O
char	O
*	O
p	*(char)
;	O
for	O
(	O
p	*(char)
=	O
(	O
unsigned	O
char	O
*	O
)	O
hsts	bool
->	O
host	*(char)
;	O
*	O
p	*(char)
;	O
p	*(char)
++	O
)	O
hash	*((*(void))->(int))
=	O
hash	*((*(void))->(int))
*	O
101	int
+	O
*	O
p	*(char)
;	O
return	O
hash	*((*(void))->(int))
;	O
}	O
WGET_GCC_NONNULL_ALL	O
WGET_GCC_PURE	O
static	O
int	O
compare_hsts	(*(struct(*(char),long,long,long,short,bool)),*(struct(*(char),long,long,long,short,bool)))->(int)
(	O
const	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
h1	*(struct(*(char),long,long,long,short,bool))
,	O
const	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
h2	*(struct(*(char),long,long,long,short,bool))
)	O
{	O
int	O
n	long
;	O
if	O
(	O
(	O
n	long
=	O
strcmp	(*(char),*(char))->(int)
(	O
h1	*(struct(*(char),long,long,long,short,bool))
->	O
host	*(char)
,	O
h2	*(struct(*(char),long,long,long,short,bool))
->	O
host	*(char)
)	O
)	O
)	O
return	O
n	long
;	O
return	O
h1	*(struct(*(char),long,long,long,short,bool))
->	O
port	short
<	O
h2	*(struct(*(char),long,long,long,short,bool))
->	O
port	short
?	O
-	O
1	int
:	O
(	O
h1	*(struct(*(char),long,long,long,short,bool))
->	O
port	short
>	O
h2	*(struct(*(char),long,long,long,short,bool))
->	O
port	short
?	O
1	int
:	O
0	int
)	O
;	O
}	O
static	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
init_hsts	(*(struct(*(char),long,long,long,short,bool)))->(*(struct(*(char),long,long,long,short,bool)))
(	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
)	O
{	O
if	O
(	O
!	O
hsts	bool
)	O
{	O
if	O
(	O
!	O
(	O
hsts	bool
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
hsts_entry	struct(*(char),long,long,long,short,bool)
)	O
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
hsts	bool
,	O
0	int
,	O
sizeof	O
(	O
*	O
hsts	bool
)	O
)	O
;	O
hsts	bool
->	O
created	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
return	O
hsts	bool
;	O
}	O
static	O
void	O
deinit_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
)	O
{	O
if	O
(	O
hsts	bool
)	O
{	O
xfree	O
(	O
hsts	bool
->	O
host	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
free_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
)	O
{	O
if	O
(	O
hsts	bool
)	O
{	O
deinit_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts	bool
)	O
;	O
xfree	O
(	O
hsts	bool
)	O
;	O
}	O
}	O
static	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
new_hsts	(*(char),short,long,int)->(*(struct(*(char),long,long,long,short,bool)))
(	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
,	O
time_t	long
maxage	long
,	O
int	O
include_subdomains	int
)	O
{	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
=	O
init_hsts	(*(struct(*(char),long,long,long,short,bool)))->(*(struct(*(char),long,long,long,short,bool)))
(	O
NULL	O
)	O
;	O
hsts	bool
->	O
host	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
host	*(char)
)	O
;	O
hsts	bool
->	O
port	short
=	O
port	short
?	O
port	short
:	O
443	int
;	O
hsts	bool
->	O
include_subdomains	int
=	O
!	O
!	O
include_subdomains	int
;	O
if	O
(	O
maxage	long
<=	O
0	int
||	O
maxage	long
>=	O
INT64_MAX	O
/	O
2	int
||	O
hsts	bool
->	O
created	long
<	O
0	int
||	O
hsts	bool
->	O
created	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
{	O
hsts	bool
->	O
maxage	long
=	O
0	int
;	O
hsts	bool
->	O
expires	long
=	O
0	int
;	O
}	O
else	O
{	O
hsts	bool
->	O
maxage	long
=	O
maxage	long
;	O
hsts	bool
->	O
expires	long
=	O
hsts	bool
->	O
created	long
+	O
maxage	long
;	O
}	O
return	O
hsts	bool
;	O
}	O
int	O
wget_hsts_host_match	(*(struct),*(char),short)->(int)
(	O
const	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
)	O
{	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
return	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
host_match	*((*(struct),*(char),short)->(int))
(	O
hsts_db	*(char)
,	O
host	*(char)
,	O
port	short
)	O
;	O
if	O
(	O
!	O
hsts_db	*(char)
)	O
return	O
0	int
;	O
hsts_entry	struct(*(char),long,long,long,short,bool)
hsts	bool
,	O
*	O
hstsp	*(struct(*(char),long,long,long,short,bool))
;	O
const	O
char	O
*	O
p	*(char)
;	O
int64_t	long
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
hsts	bool
.	O
port	short
=	O
(	O
port	short
==	O
80	int
?	O
443	int
:	O
port	short
)	O
;	O
hsts	bool
.	O
host	*(char)
=	O
host	*(char)
;	O
if	O
(	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
&	O
hsts	bool
,	O
&	O
hstsp	*(struct(*(char),long,long,long,short,bool))
)	O
&&	O
hstsp	*(struct(*(char),long,long,long,short,bool))
->	O
expires	long
>=	O
now	long
)	O
return	O
1	int
;	O
for	O
(	O
p	*(char)
=	O
host	*(char)
;	O
(	O
p	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
p	*(char)
,	O
'.'	O
)	O
)	O
;	O
)	O
{	O
hsts	bool
.	O
host	*(char)
=	O
++	O
p	*(char)
;	O
if	O
(	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
&	O
hsts	bool
,	O
&	O
hstsp	*(struct(*(char),long,long,long,short,bool))
)	O
&&	O
hstsp	*(struct(*(char),long,long,long,short,bool))
->	O
include_subdomains	int
&&	O
hstsp	*(struct(*(char),long,long,long,short,bool))
->	O
expires	long
>=	O
now	long
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
void	O
wget_hsts_db_deinit	(*(struct))->(void)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
)	O
{	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
{	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
deinit	*((*(struct))->(void))
(	O
hsts_db	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
hsts_db	*(char)
)	O
{	O
xfree	O
(	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
;	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hsts_db	*(char)
->	O
mutex	*(*(struct))
)	O
;	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
hsts_db	*(char)
->	O
entries	*(struct)
)	O
;	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hsts_db	*(char)
->	O
mutex	*(*(struct))
)	O
;	O
wget_thread_mutex_destroy	(*(*(struct)))->(int)
(	O
&	O
hsts_db	*(char)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
}	O
void	O
wget_hsts_db_free	(*(*(struct)))->(void)
(	O
wget_hsts_db	struct
*	O
*	O
hsts_db	*(char)
)	O
{	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
{	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
free	(*(void))->(void)
(	O
hsts_db	*(char)
)	O
;	O
return	O
;	O
}	O
if	O
(	O
hsts_db	*(char)
&&	O
*	O
hsts_db	*(char)
)	O
{	O
wget_hsts_db_deinit	(*(struct))->(void)
(	O
*	O
hsts_db	*(char)
)	O
;	O
xfree	O
(	O
*	O
hsts_db	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
hsts_db_add_entry	(*(struct(*(char),*(struct),*(struct),long)),*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
,	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
)	O
{	O
wget_thread_mutex_lock	(*(struct))->(void)
(	O
hsts_db	*(char)
->	O
mutex	*(*(struct))
)	O
;	O
if	O
(	O
hsts	bool
->	O
maxage	long
==	O
0	int
)	O
{	O
if	O
(	O
wget_hashmap_remove	(*(struct),*(void))->(int)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
hsts	bool
)	O
)	O
debug_printf	O
(	O
"removed HSTS %s:%hu\n"	*(char)
,	O
hsts	bool
->	O
host	*(char)
,	O
hsts	bool
->	O
port	short
)	O
;	O
free_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts	bool
)	O
;	O
hsts	bool
=	O
NULL	O
;	O
}	O
else	O
{	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
old	*(struct(*(char),long,long,long,short,bool))
;	O
if	O
(	O
wget_hashmap_get	(*(struct),*(void),*(*(void)))->(int)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
hsts	bool
,	O
&	O
old	*(struct(*(char),long,long,long,short,bool))
)	O
)	O
{	O
if	O
(	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
created	long
<	O
hsts	bool
->	O
created	long
||	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
maxage	long
!=	O
hsts	bool
->	O
maxage	long
||	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
include_subdomains	int
!=	O
hsts	bool
->	O
include_subdomains	int
)	O
{	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
created	long
=	O
hsts	bool
->	O
created	long
;	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
expires	long
=	O
hsts	bool
->	O
expires	long
;	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
maxage	long
=	O
hsts	bool
->	O
maxage	long
;	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
include_subdomains	int
=	O
hsts	bool
->	O
include_subdomains	int
;	O
debug_printf	O
(	O
"update HSTS %s:%hu (maxage=%lld, includeSubDomains=%d)\n"	*(char)
,	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
host	*(char)
,	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
port	short
,	O
(	O
long	O
long	O
)	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
maxage	long
,	O
old	*(struct(*(char),long,long,long,short,bool))
->	O
include_subdomains	int
)	O
;	O
}	O
free_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts	bool
)	O
;	O
hsts	bool
=	O
NULL	O
;	O
}	O
else	O
{	O
wget_hashmap_put	(*(struct),*(void),*(void))->(int)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
hsts	bool
,	O
hsts	bool
)	O
;	O
}	O
}	O
wget_thread_mutex_unlock	(*(struct))->(void)
(	O
hsts_db	*(char)
->	O
mutex	*(*(struct))
)	O
;	O
}	O
void	O
wget_hsts_db_add	(*(struct),*(char),short,long,int)->(void)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
,	O
const	O
char	O
*	O
host	*(char)
,	O
uint16_t	short
port	short
,	O
time_t	long
maxage	long
,	O
int	O
include_subdomains	int
)	O
{	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
{	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
add	*((*(struct),*(char),short,long,int)->(void))
(	O
hsts_db	*(char)
,	O
host	*(char)
,	O
port	short
,	O
maxage	long
,	O
include_subdomains	int
)	O
;	O
return	O
;	O
}	O
if	O
(	O
hsts_db	*(char)
)	O
{	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
=	O
new_hsts	(*(char),short,long,int)->(*(struct(*(char),long,long,long,short,bool)))
(	O
host	*(char)
,	O
port	short
,	O
maxage	long
,	O
include_subdomains	int
)	O
;	O
hsts_db_add_entry	(*(struct(*(char),*(struct),*(struct),long)),*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts_db	*(char)
,	O
hsts	bool
)	O
;	O
}	O
}	O
static	O
int	O
hsts_db_load	(*(struct(*(char),*(struct),*(struct),long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
,	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
hsts_entry	struct(*(char),long,long,long,short,bool)
hsts	bool
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
char	O
*	O
buf	*(char)
=	O
NULL	O
,	O
*	O
linep	*(char)
,	O
*	O
p	*(char)
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
ssize_t	long
buflen	long
;	O
int64_t	long
now	long
=	O
time	struct(long,long)
(	O
NULL	O
)	O
;	O
int	O
ok	int
;	O
if	O
(	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fileno	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
)	O
{	O
if	O
(	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
!=	O
hsts_db	*(char)
->	O
load_time	long
)	O
hsts_db	*(char)
->	O
load_time	long
=	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mtime	O
;	O
else	O
return	O
0	int
;	O
}	O
while	O
(	O
(	O
buflen	long
=	O
wget_getline	(*(*(char)),*(long),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(long)
(	O
&	O
buf	*(char)
,	O
&	O
bufsize	long
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
>=	O
0	int
)	O
{	O
linep	*(char)
=	O
buf	*(char)
;	O
while	O
(	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
)	O
linep	*(char)
++	O
;	O
if	O
(	O
!	O
*	O
linep	*(char)
)	O
continue	O
;	O
if	O
(	O
*	O
linep	*(char)
==	O
'#'	O
)	O
continue	O
;	O
while	O
(	O
buflen	long
>	O
0	int
&&	O
(	O
buf	*(char)
[	O
buflen	long
]	O
==	O
'\n'	O
||	O
buf	*(char)
[	O
buflen	long
]	O
==	O
'\r'	O
)	O
)	O
buf	*(char)
[	O
--	O
buflen	long
]	O
=	O
0	int
;	O
init_hsts	(*(struct(*(char),long,long,long,short,bool)))->(*(struct(*(char),long,long,long,short,bool)))
(	O
&	O
hsts	bool
)	O
;	O
ok	int
=	O
0	int
;	O
if	O
(	O
*	O
linep	*(char)
)	O
{	O
for	O
(	O
p	*(char)
=	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
hsts	bool
.	O
host	*(char)
=	O
wget_strmemdup	(*(void),long)->(*(char))
(	O
p	*(char)
,	O
linep	*(char)
-	O
p	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
linep	*(char)
)	O
{	O
for	O
(	O
p	*(char)
=	O
++	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
hsts	bool
.	O
port	short
=	O
(	O
uint16_t	short
)	O
atoi	(*(char))->(int)
(	O
p	*(char)
)	O
;	O
if	O
(	O
hsts	bool
.	O
port	short
==	O
0	int
)	O
hsts	bool
.	O
port	short
=	O
443	int
;	O
}	O
if	O
(	O
*	O
linep	*(char)
)	O
{	O
for	O
(	O
p	*(char)
=	O
++	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
hsts	bool
.	O
include_subdomains	int
=	O
atoi	(*(char))->(int)
(	O
p	*(char)
)	O
?	O
1	int
:	O
0	int
;	O
}	O
if	O
(	O
*	O
linep	*(char)
)	O
{	O
for	O
(	O
p	*(char)
=	O
++	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
hsts	bool
.	O
created	long
=	O
atoll	(*(char))->(long long)
(	O
p	*(char)
)	O
;	O
if	O
(	O
hsts	bool
.	O
created	long
<	O
0	int
||	O
hsts	bool
.	O
created	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
hsts	bool
.	O
created	long
=	O
0	int
;	O
}	O
if	O
(	O
*	O
linep	*(char)
)	O
{	O
for	O
(	O
p	*(char)
=	O
++	O
linep	*(char)
;	O
*	O
linep	*(char)
&&	O
!	O
isspace	(int)->(int)
(	O
*	O
linep	*(char)
)	O
;	O
)	O
linep	*(char)
++	O
;	O
hsts	bool
.	O
maxage	long
=	O
atoll	(*(char))->(long long)
(	O
p	*(char)
)	O
;	O
if	O
(	O
hsts	bool
.	O
maxage	long
<	O
0	int
||	O
hsts	bool
.	O
maxage	long
>=	O
INT64_MAX	O
/	O
2	int
)	O
hsts	bool
.	O
maxage	long
=	O
0	int
;	O
hsts	bool
.	O
expires	long
=	O
hsts	bool
.	O
maxage	long
?	O
hsts	bool
.	O
created	long
+	O
hsts	bool
.	O
maxage	long
:	O
0	int
;	O
if	O
(	O
hsts	bool
.	O
expires	long
<	O
now	long
)	O
{	O
deinit_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
&	O
hsts	bool
)	O
;	O
continue	O
;	O
}	O
ok	int
=	O
1	int
;	O
}	O
if	O
(	O
ok	int
)	O
{	O
hsts_db_add_entry	(*(struct(*(char),*(struct),*(struct),long)),*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
hsts_db	*(char)
,	O
wget_memdup	(*(void),long)->(*(void))
(	O
&	O
hsts	bool
,	O
sizeof	O
(	O
hsts	bool
)	O
)	O
)	O
;	O
}	O
else	O
{	O
deinit_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
(	O
&	O
hsts	bool
)	O
;	O
error_printf	O
(	O
_	O
(	O
"Failed to parse HSTS line: '%s'\n"	*(char)
)	O
,	O
buf	*(char)
)	O
;	O
}	O
}	O
xfree	O
(	O
buf	*(char)
)	O
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
{	O
hsts_db	*(char)
->	O
load_time	long
=	O
0	int
;	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_hsts_db_load	(*(struct))->(int)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
)	O
{	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
return	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
load	*((*(struct))->(int))
(	O
hsts_db	*(char)
)	O
;	O
if	O
(	O
!	O
hsts_db	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
hsts_db	*(char)
->	O
fname	*(char)
||	O
!	O
*	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
return	O
0	int
;	O
if	O
(	O
wget_update_file	(*(char),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*(void))->(int)
(	O
hsts_db	*(char)
->	O
fname	*(char)
,	O
(	O
wget_update_load_fn	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
*	O
)	O
hsts_db_load	(*(struct(*(char),*(struct),*(struct),long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
,	O
NULL	O
,	O
hsts_db	*(char)
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to read HSTS data\n"	*(char)
)	O
)	O
;	O
return	O
-	O
1	int
;	O
}	O
else	O
{	O
debug_printf	O
(	O
"Fetched HSTS data from '%s'\n"	*(char)
,	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
}	O
WGET_GCC_NONNULL_ALL	O
static	O
int	O
hsts_save	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(char),long,long,long,short,bool)))->(int)
(	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
const	O
hsts_entry	struct(*(char),long,long,long,short,bool)
*	O
hsts	bool
)	O
{	O
wget_fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(long)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"%s %hu %d %lld %lld\n"	*(char)
,	O
hsts	bool
->	O
host	*(char)
,	O
hsts	bool
->	O
port	short
,	O
hsts	bool
->	O
include_subdomains	int
,	O
(	O
long	O
long	O
)	O
hsts	bool
->	O
created	long
,	O
(	O
long	O
long	O
)	O
hsts	bool
->	O
maxage	long
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
hsts_db_save	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
void	O
*	O
hsts_db	*(char)
,	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
wget_hashmap	struct
*	O
entries	*(struct)
=	O
(	O
(	O
wget_hsts_db	struct
*	O
)	O
hsts_db	*(char)
)	O
->	O
entries	*(struct)
;	O
if	O
(	O
wget_hashmap_size	(*(struct))->(int)
(	O
entries	*(struct)
)	O
>	O
0	int
)	O
{	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"#HSTS 1.0 file\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"#Generated by Wget2 "	*(char)
PACKAGE_VERSION	*(char)
". Edit at your own risk.\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
fputs	(*(char),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
"# <hostname> <port> <incl. subdomains> <created> <max-age>\n"	*(char)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
wget_hashmap_browse	(*(struct),*((*(void),*(void),*(void))->(int)),*(void))->(int)
(	O
entries	*(struct)
,	O
(	O
wget_hashmap_browse_fn	(*(void),*(void),*(void))->(int)
*	O
)	O
hsts_save	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(struct(*(char),long,long,long,short,bool)))->(int)
,	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
return	O
-	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
int	O
wget_hsts_db_save	(*(struct))->(int)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
)	O
{	O
int	O
size	*(long)
;	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
return	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
save	*((*(struct))->(int))
(	O
hsts_db	*(char)
)	O
;	O
if	O
(	O
!	O
hsts_db	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
!	O
hsts_db	*(char)
->	O
fname	*(char)
||	O
!	O
*	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
return	O
-	O
1	int
;	O
if	O
(	O
wget_update_file	(*(char),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*((*(void),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))))->(int)),*(void))->(int)
(	O
hsts_db	*(char)
->	O
fname	*(char)
,	O
(	O
wget_update_load_fn	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
*	O
)	O
hsts_db_load	(*(struct(*(char),*(struct),*(struct),long)),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
,	O
hsts_db_save	(*(void),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
,	O
hsts_db	*(char)
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"Failed to write HSTS file '%s'\n"	*(char)
)	O
,	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
;	O
return	O
-	O
1	int
;	O
}	O
if	O
(	O
(	O
size	*(long)
=	O
wget_hashmap_size	(*(struct))->(int)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
)	O
)	O
)	O
debug_printf	O
(	O
"Saved %d HSTS entr%s into '%s'\n"	*(char)
,	O
size	*(long)
,	O
size	*(long)
!=	O
1	int
?	O
"ies"	*(char)
:	O
"y"	*(char)
,	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
;	O
else	O
debug_printf	O
(	O
"No HSTS entries to save. Table is empty.\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
wget_hsts_db	struct
*	O
wget_hsts_db_init	(*(struct),*(char))->(*(struct))
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
if	O
(	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
)	O
return	O
plugin_vtable	*(struct(*((*(struct`),*(char),short)->(int)),*((*(struct`),*(char))->(*(struct`))),*((*(struct`))->(void)),*((*(*`))->(void)),*((*(struct`),*(char),short,long,int)->(void)),*((*(struct`))->(int)),*((*(struct`))->(int))))
->	O
init	*((*(struct),*(char))->(*(struct)))
(	O
hsts_db	*(char)
,	O
fname	*(char)
)	O
;	O
if	O
(	O
fname	*(char)
)	O
{	O
if	O
(	O
!	O
(	O
fname	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
)	O
)	O
return	O
NULL	O
;	O
}	O
wget_hashmap	struct
*	O
entries	*(struct)
=	O
wget_hashmap_create	(int,*((*(void))->(int)),*((*(void),*(void))->(int)))->(*(struct))
(	O
16	int
,	O
(	O
wget_hashmap_hash_fn	(*(void))->(int)
*	O
)	O
hash_hsts	(*(struct(*(char),long,long,long,short,bool)))->(int)
,	O
(	O
wget_hashmap_compare_fn	(*(void),*(void))->(int)
*	O
)	O
compare_hsts	(*(struct(*(char),long,long,long,short,bool)),*(struct(*(char),long,long,long,short,bool)))->(int)
)	O
;	O
if	O
(	O
!	O
entries	*(struct)
)	O
{	O
xfree	O
(	O
fname	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
!	O
hsts_db	*(char)
)	O
{	O
if	O
(	O
!	O
(	O
hsts_db	*(char)
=	O
wget_calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
struct	O
wget_hsts_db_st	struct(*(char),*(struct),*(struct),long)
)	O
)	O
)	O
)	O
{	O
wget_hashmap_free	(*(*(struct)))->(void)
(	O
&	O
entries	*(struct)
)	O
;	O
xfree	O
(	O
fname	*(char)
)	O
;	O
return	O
NULL	O
;	O
}	O
}	O
else	O
memset	(*(void),int,long)->(*(void))
(	O
hsts_db	*(char)
,	O
0	int
,	O
sizeof	O
(	O
*	O
hsts_db	*(char)
)	O
)	O
;	O
hsts_db	*(char)
->	O
fname	*(char)
=	O
fname	*(char)
;	O
hsts_db	*(char)
->	O
entries	*(struct)
=	O
entries	*(struct)
;	O
wget_hashmap_set_key_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
(	O
wget_hashmap_key_destructor	(*(void))->(void)
*	O
)	O
free_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
)	O
;	O
wget_hashmap_set_value_destructor	(*(struct),*((*(void))->(void)))->(void)
(	O
hsts_db	*(char)
->	O
entries	*(struct)
,	O
(	O
wget_hashmap_value_destructor	(*(void))->(void)
*	O
)	O
free_hsts	(*(struct(*(char),long,long,long,short,bool)))->(void)
)	O
;	O
wget_thread_mutex_init	(*(*(struct)))->(int)
(	O
&	O
hsts_db	*(char)
->	O
mutex	*(*(struct))
)	O
;	O
return	O
hsts_db	*(char)
;	O
}	O
void	O
wget_hsts_db_set_fname	(*(struct),*(char))->(void)
(	O
wget_hsts_db	struct
*	O
hsts_db	*(char)
,	O
const	O
char	O
*	O
fname	*(char)
)	O
{	O
xfree	O
(	O
hsts_db	*(char)
->	O
fname	*(char)
)	O
;	O
hsts_db	*(char)
->	O
fname	*(char)
=	O
wget_strdup	(*(char))->(*(char))
(	O
fname	*(char)
)	O
;	O
}	O
