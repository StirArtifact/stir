const	O
char	O
*	O
idn2_strerror	(int)->(*(char))
(	O
int	O
rc	int
)	O
{	O
bindtextdomain	O
(	O
PACKAGE	O
,	O
LOCALEDIR	O
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
IDN2_OK	int
:	O
return	O
_	O
(	O
"success"	*(char)
)	O
;	O
case	O
IDN2_MALLOC	int
:	O
return	O
_	O
(	O
"out of memory"	*(char)
)	O
;	O
case	O
IDN2_NO_CODESET	int
:	O
return	O
_	O
(	O
"could not determine locale encoding format"	*(char)
)	O
;	O
case	O
IDN2_ICONV_FAIL	int
:	O
return	O
_	O
(	O
"could not convert string to UTF-8"	*(char)
)	O
;	O
case	O
IDN2_ENCODING_ERROR	int
:	O
return	O
_	O
(	O
"string encoding error"	*(char)
)	O
;	O
case	O
IDN2_NFC	int
:	O
return	O
_	O
(	O
"string could not be NFC normalized"	*(char)
)	O
;	O
case	O
IDN2_PUNYCODE_BAD_INPUT	int
:	O
return	O
_	O
(	O
"string contains invalid punycode data"	*(char)
)	O
;	O
case	O
IDN2_PUNYCODE_BIG_OUTPUT	int
:	O
return	O
_	O
(	O
"punycode encoded data will be too large"	*(char)
)	O
;	O
case	O
IDN2_PUNYCODE_OVERFLOW	int
:	O
return	O
_	O
(	O
"punycode conversion resulted in overflow"	*(char)
)	O
;	O
case	O
IDN2_TOO_BIG_DOMAIN	int
:	O
return	O
_	O
(	O
"domain name longer than 255 characters"	*(char)
)	O
;	O
case	O
IDN2_TOO_BIG_LABEL	int
:	O
return	O
_	O
(	O
"domain label longer than 63 characters"	*(char)
)	O
;	O
case	O
IDN2_INVALID_ALABEL	int
:	O
return	O
_	O
(	O
"input A-label is not valid"	*(char)
)	O
;	O
case	O
IDN2_UALABEL_MISMATCH	int
:	O
return	O
_	O
(	O
"input A-label and U-label does not match"	*(char)
)	O
;	O
case	O
IDN2_NOT_NFC	int
:	O
return	O
_	O
(	O
"string is not in Unicode NFC format"	*(char)
)	O
;	O
case	O
IDN2_2HYPHEN	int
:	O
return	O
_	O
(	O
"string contains forbidden two hyphens pattern"	*(char)
)	O
;	O
case	O
IDN2_HYPHEN_STARTEND	int
:	O
return	O
_	O
(	O
"string start/ends with forbidden hyphen"	*(char)
)	O
;	O
case	O
IDN2_LEADING_COMBINING	int
:	O
return	O
_	O
(	O
"string contains a forbidden leading combining character"	*(char)
)	O
;	O
case	O
IDN2_DISALLOWED	int
:	O
return	O
_	O
(	O
"string contains a disallowed character"	*(char)
)	O
;	O
case	O
IDN2_CONTEXTJ	int
:	O
return	O
_	O
(	O
"string contains a forbidden context-j character"	*(char)
)	O
;	O
case	O
IDN2_CONTEXTJ_NO_RULE	int
:	O
return	O
_	O
(	O
"string contains a context-j character with null rule"	*(char)
)	O
;	O
case	O
IDN2_CONTEXTO	int
:	O
return	O
_	O
(	O
"string contains a forbidden context-o character"	*(char)
)	O
;	O
case	O
IDN2_CONTEXTO_NO_RULE	int
:	O
return	O
_	O
(	O
"string contains a context-o character with null rule"	*(char)
)	O
;	O
case	O
IDN2_UNASSIGNED	int
:	O
return	O
_	O
(	O
"string contains unassigned code point"	*(char)
)	O
;	O
case	O
IDN2_BIDI	int
:	O
return	O
_	O
(	O
"string has forbidden bi-directional properties"	*(char)
)	O
;	O
case	O
IDN2_DOT_IN_LABEL	int
:	O
return	O
_	O
(	O
"domain label has forbidden dot (TR46)"	*(char)
)	O
;	O
case	O
IDN2_INVALID_TRANSITIONAL	int
:	O
return	O
_	O
(	O
"domain label has character forbidden in transitional mode (TR46)"	*(char)
)	O
;	O
case	O
IDN2_INVALID_NONTRANSITIONAL	int
:	O
return	O
_	O
(	O
"domain label has character forbidden in non-transitional mode (TR46)"	*(char)
)	O
;	O
case	O
IDN2_ALABEL_ROUNDTRIP_FAILED	int
:	O
return	O
_	O
(	O
"Alabel roundtrip failed"	*(char)
)	O
;	O
default	O
:	O
return	O
_	O
(	O
"Unknown error"	*(char)
)	O
;	O
}	O
}	O
const	O
char	O
*	O
idn2_strerror_name	(int)->(*(char))
(	O
int	O
rc	int
)	O
{	O
switch	O
(	O
rc	int
)	O
{	O
case	O
IDN2_OK	int
:	O
return	O
ERR2STR	O
(	O
IDN2_OK	int
)	O
;	O
case	O
IDN2_MALLOC	int
:	O
return	O
ERR2STR	O
(	O
IDN2_MALLOC	int
)	O
;	O
case	O
IDN2_NO_CODESET	int
:	O
return	O
ERR2STR	O
(	O
IDN2_NO_NODESET	O
)	O
;	O
case	O
IDN2_ICONV_FAIL	int
:	O
return	O
ERR2STR	O
(	O
IDN2_ICONV_FAIL	int
)	O
;	O
case	O
IDN2_ENCODING_ERROR	int
:	O
return	O
ERR2STR	O
(	O
IDN2_ENCODING_ERROR	int
)	O
;	O
case	O
IDN2_NFC	int
:	O
return	O
ERR2STR	O
(	O
IDN2_NFC	int
)	O
;	O
case	O
IDN2_PUNYCODE_BAD_INPUT	int
:	O
return	O
ERR2STR	O
(	O
IDN2_PUNYCODE_BAD_INPUT	int
)	O
;	O
case	O
IDN2_PUNYCODE_BIG_OUTPUT	int
:	O
return	O
ERR2STR	O
(	O
IDN2_PUNYCODE_BIG_OUTPUT	int
)	O
;	O
case	O
IDN2_PUNYCODE_OVERFLOW	int
:	O
return	O
ERR2STR	O
(	O
IDN2_PUNYCODE_OVERFLOW	int
)	O
;	O
case	O
IDN2_TOO_BIG_DOMAIN	int
:	O
return	O
ERR2STR	O
(	O
IDN2_TOO_BIG_DOMAIN	int
)	O
;	O
case	O
IDN2_TOO_BIG_LABEL	int
:	O
return	O
ERR2STR	O
(	O
IDN2_TOO_BIG_LABEL	int
)	O
;	O
case	O
IDN2_INVALID_ALABEL	int
:	O
return	O
ERR2STR	O
(	O
IDN2_INVALID_ALABEL	int
)	O
;	O
case	O
IDN2_UALABEL_MISMATCH	int
:	O
return	O
ERR2STR	O
(	O
IDN2_UALABEL_MISMATCH	int
)	O
;	O
case	O
IDN2_INVALID_FLAGS	int
:	O
return	O
ERR2STR	O
(	O
IDN2_INVALID_FLAGS	int
)	O
;	O
case	O
IDN2_NOT_NFC	int
:	O
return	O
ERR2STR	O
(	O
IDN2_NOT_NFC	int
)	O
;	O
case	O
IDN2_2HYPHEN	int
:	O
return	O
ERR2STR	O
(	O
IDN2_2HYPHEN	int
)	O
;	O
case	O
IDN2_HYPHEN_STARTEND	int
:	O
return	O
ERR2STR	O
(	O
IDN2_HYPHEN_STARTEND	int
)	O
;	O
case	O
IDN2_LEADING_COMBINING	int
:	O
return	O
ERR2STR	O
(	O
IDN2_LEADING_COMBINING	int
)	O
;	O
case	O
IDN2_DISALLOWED	int
:	O
return	O
ERR2STR	O
(	O
IDN2_DISALLOWED	int
)	O
;	O
case	O
IDN2_CONTEXTJ	int
:	O
return	O
ERR2STR	O
(	O
IDN2_CONTEXTJ	int
)	O
;	O
case	O
IDN2_CONTEXTJ_NO_RULE	int
:	O
return	O
ERR2STR	O
(	O
IDN2_CONTEXTJ_NO_RULE	int
)	O
;	O
case	O
IDN2_CONTEXTO	int
:	O
return	O
ERR2STR	O
(	O
IDN2_CONTEXTO	int
)	O
;	O
case	O
IDN2_CONTEXTO_NO_RULE	int
:	O
return	O
ERR2STR	O
(	O
IDN2_CONTEXTO_NO_RULE	int
)	O
;	O
case	O
IDN2_UNASSIGNED	int
:	O
return	O
ERR2STR	O
(	O
IDN2_UNASSIGNED	int
)	O
;	O
case	O
IDN2_BIDI	int
:	O
return	O
ERR2STR	O
(	O
IDN2_BIDI	int
)	O
;	O
case	O
IDN2_DOT_IN_LABEL	int
:	O
return	O
ERR2STR	O
(	O
IDN2_DOT_IN_LABEL	int
)	O
;	O
case	O
IDN2_INVALID_TRANSITIONAL	int
:	O
return	O
ERR2STR	O
(	O
IDN2_INVALID_TRANSITIONAL	int
)	O
;	O
case	O
IDN2_INVALID_NONTRANSITIONAL	int
:	O
return	O
ERR2STR	O
(	O
IDN2_INVALID_NONTRANSITIONAL	int
)	O
;	O
case	O
IDN2_ALABEL_ROUNDTRIP_FAILED	int
:	O
return	O
ERR2STR	O
(	O
IDN2_ALABEL_ROUNDTRIP_FAILED	int
)	O
;	O
default	O
:	O
return	O
"IDN2_UNKNOWN"	*(char)
;	O
}	O
}	O
