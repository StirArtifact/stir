static	O
grad_list_t	struct
*	O
realms	*(struct)
;	O
struct	O
_parse_data	struct(*(()->(int)),array(int),*(struct(*(char),long)))
{	O
int	O
(	O
*	O
fun	*((*(void),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))))->(int))
)	O
(	O
)	O
;	O
int	O
ports	array(int)
[	O
GRAD_PORT_MAX	int
]	O
;	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
;	O
}	O
;	O
static	O
int	O
_parse_server	(int,*(*(char)),*(struct(*(()->(int)),array(int),*(struct(*`,long)))),*(int),*(struct(*(char),int,array(int),*(char),long)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
struct	O
_parse_data	struct(*(()->(int)),array(int),*(struct(*(char),long)))
*	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
,	O
int	O
*	O
np	*(int)
,	O
grad_server_t	struct
*	O
srv	*(struct(*(char),int,array(int),*(char),long))
)	O
{	O
memset	(*(void),int,long)->(*(void))
(	O
srv	*(struct(*(char),int,array(int),*(char),long))
,	O
0	int
,	O
sizeof	O
(	O
*	O
srv	*(struct(*(char),int,array(int),*(char),long))
)	O
)	O
;	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
name	*(char)
=	O
argv	*(*(char))
[	O
*	O
np	*(int)
]	O
;	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
addr	int
=	O
grad_ip_gethostaddr	(*(char))->(int)
(	O
argv	*(*(char))
[	O
(	O
*	O
np	*(int)
)	O
++	O
]	O
)	O
;	O
if	O
(	O
*	O
np	*(int)
+	O
1	int
<	O
argc	int
&&	O
argv	*(*(char))
[	O
*	O
np	*(int)
]	O
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
char	O
*	O
p	*(struct)
;	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
port	array(int)
[	O
GRAD_PORT_AUTH	int
]	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
++	O
*	O
np	*(int)
]	O
,	O
&	O
p	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
*	O
np	*(int)
+	O
2	int
<	O
argc	int
&&	O
argv	*(*(char))
[	O
*	O
np	*(int)
+	O
1	int
]	O
[	O
0	int
]	O
==	O
':'	O
)	O
{	O
++	O
*	O
np	*(int)
;	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
port	array(int)
[	O
GRAD_PORT_ACCT	int
]	O
=	O
strtoul	(*(char),*(*(char)),int)->(long)
(	O
argv	*(*(char))
[	O
++	O
*	O
np	*(int)
]	O
,	O
&	O
p	*(struct)
,	O
0	int
)	O
;	O
}	O
else	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
port	array(int)
[	O
GRAD_PORT_ACCT	int
]	O
=	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
port	array(int)
[	O
GRAD_PORT_AUTH	int
]	O
+	O
1	int
;	O
++	O
*	O
np	*(int)
;	O
}	O
else	O
{	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
port	array(int)
[	O
GRAD_PORT_AUTH	int
]	O
=	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
ports	array(int)
[	O
GRAD_PORT_AUTH	int
]	O
;	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
port	array(int)
[	O
GRAD_PORT_ACCT	int
]	O
=	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
ports	array(int)
[	O
GRAD_PORT_ACCT	int
]	O
;	O
}	O
if	O
(	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
fun	*((*(void),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))))->(int))
&&	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
fun	*((*(void),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))))->(int))
(	O
srv	*(struct(*(char),int,array(int),*(char),long))
)	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
loc	struct(*(char),long)
,	O
_	O
(	O
"can't find secret for %s"	*(char)
)	O
,	O
srv	*(struct(*(char),int,array(int),*(char),long))
->	O
name	*(char)
)	O
;	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
static	O
int	O
_parse_server_list	(*(struct(int,int,int,long,*(struct))),*(char),*(struct(*(()->(int)),array(int),*(struct(*`,long)))))->(int)
(	O
grad_server_queue_t	struct(int,int,int,long,*(struct))
*	O
qp	*(struct(int,int,int,long,*(struct)))
,	O
char	O
*	O
str	*(char)
,	O
struct	O
_parse_data	struct(*(()->(int)),array(int),*(struct(*(char),long)))
*	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
)	O
{	O
int	O
i	int
,	O
argc	int
;	O
char	O
*	O
*	O
argv	*(*(char))
;	O
if	O
(	O
grad_argcv_get	(*(char),*(char),*(char),*(int),*(*(*(char))))->(int)
(	O
str	*(char)
,	O
",:"	*(char)
,	O
NULL	O
,	O
&	O
argc	int
,	O
&	O
argv	*(*(char))
)	O
)	O
return	O
1	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
argc	int
;	O
i	int
++	O
)	O
{	O
grad_server_t	struct
srv	*(struct(*(char),int,array(int),*(char),long))
;	O
if	O
(	O
_parse_server	(int,*(*(char)),*(struct(*(()->(int)),array(int),*(struct(*`,long)))),*(int),*(struct(*(char),int,array(int),*(char),long)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
,	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
,	O
&	O
i	int
,	O
&	O
srv	*(struct(*(char),int,array(int),*(char),long))
)	O
==	O
0	int
)	O
grad_client_append_server	(*(struct(int,int,int,long,*(struct))),*(struct(*(char),int,array(int),*(char),long)))->(void)
(	O
qp	*(struct(int,int,int,long,*(struct)))
,	O
grad_client_alloc_server	(*(struct(*(char),int,array(int),*(char),long)))->(*(struct(*(char),int,array(int),*(char),long)))
(	O
&	O
srv	*(struct(*(char),int,array(int),*(char),long))
)	O
)	O
;	O
if	O
(	O
i	int
<	O
argc	int
&&	O
argv	*(*(char))
[	O
i	int
]	O
[	O
0	int
]	O
!=	O
','	O
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
loc	struct(*(char),long)
,	O
_	O
(	O
"expected , but found %s"	*(char)
)	O
,	O
argv	*(*(char))
[	O
i	int
]	O
)	O
;	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
return	O
1	int
;	O
}	O
}	O
grad_argcv_free	(int,*(*(char)))->(int)
(	O
argc	int
,	O
argv	*(*(char))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
read_realms_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
(	O
void	O
*	O
closure	*(void)
,	O
int	O
fc	int
,	O
char	O
*	O
*	O
fv	*(*(char))
,	O
grad_locus_t	struct(*(char),long)
*	O
loc	struct(*(char),long)
)	O
{	O
struct	O
_parse_data	struct(*(()->(int)),array(int),*(struct(*(char),long)))
*	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
=	O
closure	*(void)
;	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
;	O
int	O
i	int
;	O
if	O
(	O
fc	int
<	O
2	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_ERR	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"too few fields (%d)"	*(char)
)	O
,	O
fc	int
)	O
;	O
return	O
-	O
1	int
;	O
}	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
->	O
loc	struct(*(char),long)
=	O
loc	struct(*(char),long)
;	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
=	O
grad_emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
)	O
)	O
;	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
=	O
NULL	O
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
fv	*(*(char))
[	O
1	int
]	O
,	O
"LOCAL"	*(char)
)	O
==	O
0	int
)	O
{	O
i	int
=	O
2	int
;	O
}	O
else	O
{	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
=	O
grad_client_create_queue	(int,int,long)->(*(struct(int,int,int,long,*(struct))))
(	O
0	int
,	O
0	int
,	O
0	int
)	O
;	O
i	int
=	O
0	int
;	O
do	O
{	O
if	O
(	O
_parse_server_list	(*(struct(int,int,int,long,*(struct))),*(char),*(struct(*(()->(int)),array(int),*(struct(*`,long)))))->(int)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
,	O
fv	*(*(char))
[	O
++	O
i	int
]	O
,	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
)	O
)	O
{	O
grad_client_clear_server_list	(*(struct(int,int,int,long,*(struct))))->(void)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
)	O
;	O
break	O
;	O
}	O
}	O
while	O
(	O
fv	*(*(char))
[	O
i	int
]	O
[	O
strlen	(*(char))->(long)
(	O
fv	*(*(char))
[	O
i	int
]	O
)	O
-	O
1	int
]	O
==	O
','	O
)	O
;	O
i	int
++	O
;	O
if	O
(	O
grad_list_count	(*(struct))->(long)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
->	O
servers	*(struct)
)	O
==	O
0	int
)	O
{	O
grad_log_loc	(int,*(struct(*(char),long)),*(char))->(void)
(	O
GRAD_LOG_NOTICE	int
,	O
loc	struct(*(char),long)
,	O
_	O
(	O
"discarding entry"	*(char)
)	O
)	O
;	O
grad_client_destroy_queue	(*(struct(int,int,int,long,*(struct))))->(void)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
)	O
;	O
grad_free	(*(void))->(void)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
}	O
GRAD_STRING_COPY	O
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
realm	array(char)
,	O
fv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
i	int
<	O
fc	int
)	O
{	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
args	*(struct)
=	O
grad_envar_parse_argcv	(int,*(*(char)))->(*(struct))
(	O
fc	int
-	O
i	int
,	O
&	O
fv	*(*(char))
[	O
i	int
]	O
)	O
;	O
if	O
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
)	O
{	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
->	O
timeout	int
=	O
grad_envar_lookup_int	(*(struct),*(char),int)->(int)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
args	*(struct)
,	O
"timeout"	*(char)
,	O
1	int
)	O
;	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
->	O
retries	int
=	O
grad_envar_lookup_int	(*(struct),*(char),int)->(int)
(	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
args	*(struct)
,	O
"retries"	*(char)
,	O
1	int
)	O
;	O
}	O
}	O
if	O
(	O
!	O
realms	*(struct)
)	O
realms	*(struct)
=	O
grad_list_create	()->(*(struct))
(	O
)	O
;	O
grad_list_prepend	(*(struct),*(void))->(void)
(	O
realms	*(struct)
,	O
rp	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
_realm_mem_free	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
ARG_UNUSED	O
)	O
{	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
=	O
item	*(void)
;	O
grad_client_destroy_queue	(*(struct(int,int,int,long,*(struct))))->(void)
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
queue	*(struct(int,int,int,long,*(struct)))
)	O
;	O
grad_envar_free_list	(*(*(struct)))->(void)
(	O
&	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
args	*(struct)
)	O
;	O
grad_free	(*(void))->(void)
(	O
item	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
grad_read_realms	(*(char),int,int,*(()->(int)))->(int)
(	O
char	O
*	O
file	*(char)
,	O
int	O
auth_port	int
,	O
int	O
acct_port	int
,	O
int	O
(	O
*	O
set_secret	*(()->(int))
)	O
(	O
)	O
)	O
{	O
struct	O
_parse_data	struct(*(()->(int)),array(int),*(struct(*(char),long)))
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
;	O
grad_list_destroy	(*(*(struct)),*((*(void),*(void))->(int)),*(void))->(void)
(	O
&	O
realms	*(struct)
,	O
_realm_mem_free	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
realms	*(struct)
=	O
NULL	O
;	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
.	O
fun	*((*(void),*(struct(*(struct`),*(char),int,int,enum(int,int,int),int,enum(int,int,int,int,int,int,int),union(int,struct`))))->(int))
=	O
set_secret	*(()->(int))
;	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
.	O
ports	array(int)
[	O
GRAD_PORT_AUTH	int
]	O
=	O
auth_port	int
;	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
.	O
ports	array(int)
[	O
GRAD_PORT_ACCT	int
]	O
=	O
acct_port	int
;	O
return	O
grad_read_raddb_file	(*(char),int,*(char),*((*(void),int,*(*(char)),*(struct(*`,long)))->(int)),*(void))->(int)
(	O
file	*(char)
,	O
1	int
,	O
NULL	O
,	O
read_realms_entry	(*(void),int,*(*(char)),*(struct(*(char),long)))->(int)
,	O
&	O
pd	*(struct(*(()->(int)),array(int),*(struct(*(char),long))))
)	O
;	O
}	O
static	O
int	O
realm_match_name_p	(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),*(char))->(int)
(	O
const	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
realm	array(char)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
return	O
(	O
grad_envar_lookup_int	(*(struct),*(char),int)->(int)
(	O
realm	array(char)
->	O
args	*(struct)
,	O
"ignorecase"	*(char)
,	O
0	int
)	O
?	O
grad_c_strcasecmp	(*(char),*(char))->(int)
:	O
strcmp	(*(char),*(char))->(int)
)	O
(	O
realm	array(char)
->	O
realm	array(char)
,	O
name	*(char)
)	O
==	O
0	int
;	O
}	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
grad_realm_lookup_name	(*(char))->(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))))
(	O
char	O
*	O
realm	array(char)
)	O
{	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
p	*(struct)
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
realms	*(struct)
)	O
;	O
if	O
(	O
!	O
itr	*((*(void),*(void))->(int))
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(struct)
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
if	O
(	O
realm_match_name_p	(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),*(char))->(int)
(	O
p	*(struct)
,	O
realm	array(char)
)	O
)	O
break	O
;	O
if	O
(	O
!	O
p	*(struct)
&&	O
strcmp	(*(char),*(char))->(int)
(	O
realm	array(char)
,	O
"NOREALM"	*(char)
)	O
)	O
{	O
for	O
(	O
p	*(struct)
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
p	*(struct)
->	O
realm	array(char)
,	O
"DEFAULT"	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
}	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
p	*(struct)
;	O
}	O
int	O
grad_realm_verify_ip	(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int)->(int)
(	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
realm	array(char)
,	O
grad_uint32_t	int
ip	*(struct)
)	O
{	O
grad_server_t	struct
*	O
serv	*(struct(*(char),int,array(int),*(char),long))
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
realm	array(char)
->	O
queue	*(struct(int,int,int,long,*(struct)))
||	O
(	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
realm	array(char)
->	O
queue	*(struct(int,int,int,long,*(struct)))
->	O
servers	*(struct)
)	O
)	O
==	O
NULL	O
)	O
return	O
0	int
;	O
for	O
(	O
serv	*(struct(*(char),int,array(int),*(char),long))
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
serv	*(struct(*(char),int,array(int),*(char),long))
;	O
serv	*(struct(*(char),int,array(int),*(char),long))
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
if	O
(	O
serv	*(struct(*(char),int,array(int),*(char),long))
->	O
addr	int
==	O
ip	*(struct)
)	O
break	O
;	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
serv	*(struct(*(char),int,array(int),*(char),long))
!=	O
NULL	O
;	O
}	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
grad_realm_lookup_ip	(int)->(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))))
(	O
grad_uint32_t	int
ip	*(struct)
)	O
{	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
p	*(struct)
;	O
grad_iterator_t	struct
*	O
itr	*((*(void),*(void))->(int))
;	O
if	O
(	O
!	O
(	O
itr	*((*(void),*(void))->(int))
=	O
grad_iterator_create	(*(struct))->(*(struct))
(	O
realms	*(struct)
)	O
)	O
)	O
return	O
NULL	O
;	O
for	O
(	O
p	*(struct)
=	O
grad_iterator_first	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
;	O
p	*(struct)
;	O
p	*(struct)
=	O
grad_iterator_next	(*(struct))->(*(void))
(	O
itr	*((*(void),*(void))->(int))
)	O
)	O
if	O
(	O
grad_realm_verify_ip	(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))),int)->(int)
(	O
p	*(struct)
,	O
ip	*(struct)
)	O
)	O
break	O
;	O
grad_iterator_destroy	(*(*(struct)))->(void)
(	O
&	O
itr	*((*(void),*(void))->(int))
)	O
;	O
return	O
p	*(struct)
;	O
}	O
int	O
grad_realm_strip_p	(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))))->(int)
(	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
{	O
return	O
grad_envar_lookup_int	(*(struct),*(char),int)->(int)
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
args	*(struct)
,	O
"strip"	*(char)
,	O
1	int
)	O
;	O
}	O
size_t	long
grad_realm_get_quota	(*(struct(array(char),*(struct),*(struct(int,int,int,long,*`)))))->(long)
(	O
grad_realm_t	struct(array(char),*(struct),*(struct(int,int,int,long,*(struct))))
*	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
)	O
{	O
return	O
grad_envar_lookup_int	(*(struct),*(char),int)->(int)
(	O
r	*(struct(array(char),*(struct),*(struct(int,int,int,long,*(struct`)))))
->	O
args	*(struct)
,	O
"quota"	*(char)
,	O
0	int
)	O
;	O
}	O
