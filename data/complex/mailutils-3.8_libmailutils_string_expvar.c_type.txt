static	O
int	O
exp_getvar	(*(*(char)),*(char),long,*(void))->(int)
(	O
char	O
*	O
*	O
ret	*(*(struct))
,	O
const	O
char	O
*	O
vptr	*(char)
,	O
size_t	long
vlen	long
,	O
void	O
*	O
data	*(void)
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
varname	*(char)
,	O
*	O
s	*(char)
=	O
NULL	O
;	O
mu_assoc_t	*(struct)
assoc	*(struct)
=	O
data	*(void)
;	O
if	O
(	O
mu_assoc_is_empty	(*(struct))->(int)
(	O
assoc	*(struct)
)	O
)	O
return	O
MU_WRDSE_UNDEF	O
;	O
varname	*(char)
=	O
malloc	(long)->(*(void))
(	O
vlen	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
varname	*(char)
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
varname	*(char)
,	O
vptr	*(char)
,	O
vlen	long
)	O
;	O
varname	*(char)
[	O
vlen	long
]	O
=	O
0	int
;	O
rc	int
=	O
mu_assoc_lookup	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
varname	*(char)
,	O
&	O
s	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
varname	*(char)
)	O
;	O
switch	O
(	O
rc	int
)	O
{	O
case	O
0	int
:	O
rc	int
=	O
MU_WRDSE_OK	O
;	O
break	O
;	O
case	O
MU_ERR_NOENT	O
:	O
rc	int
=	O
MU_WRDSE_UNDEF	O
;	O
break	O
;	O
case	O
MU_ERR_BUFSPACE	O
:	O
case	O
ENOMEM	int
:	O
rc	int
=	O
MU_WRDSE_NOSPACE	O
;	O
break	O
;	O
default	O
:	O
s	*(char)
=	O
(	O
char	O
*	O
)	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
;	O
rc	int
=	O
MU_WRDSE_USERERR	O
;	O
}	O
if	O
(	O
s	*(char)
)	O
{	O
s	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
*	O
ret	*(*(struct))
=	O
s	*(char)
;	O
}	O
else	O
rc	int
=	O
MU_WRDSE_UNDEF	O
;	O
return	O
rc	int
;	O
}	O
static	O
int	O
exp_localpart	(int,*(*(char)),*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
*	O
result	*(*(char))
)	O
{	O
size_t	long
len	long
=	O
strcspn	(*(char),*(char))->(long)
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
"@"	*(char)
)	O
;	O
char	O
*	O
s	*(char)
;	O
s	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
s	*(char)
,	O
argv	*(*(char))
[	O
1	int
]	O
,	O
len	long
)	O
;	O
s	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
*	O
result	*(*(char))
=	O
s	*(char)
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
exp_domainpart	(int,*(*(char)),*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
*	O
result	*(*(char))
)	O
{	O
char	O
*	O
s	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
argv	*(*(char))
[	O
1	int
]	O
,	O
'@'	O
)	O
;	O
if	O
(	O
s	*(char)
)	O
s	*(char)
++	O
;	O
else	O
s	*(char)
=	O
""	*(char)
;	O
s	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
s	*(char)
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
*	O
result	*(*(char))
=	O
s	*(char)
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
static	O
int	O
exp_shell	(*(*(char)),*(char),long,*(void))->(int)
(	O
char	O
*	O
*	O
ret	*(*(struct))
,	O
char	O
const	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
void	O
*	O
closure	*(void)
)	O
{	O
FILE	struct
*	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
char	O
*	O
cmd	*(char)
;	O
int	O
c	int
,	O
lastc	int
;	O
char	O
*	O
buffer	*(char)
=	O
NULL	O
;	O
size_t	long
bufsize	long
=	O
0	int
;	O
size_t	long
buflen	long
=	O
0	int
;	O
cmd	*(char)
=	O
malloc	(long)->(*(void))
(	O
len	long
+	O
1	int
)	O
;	O
if	O
(	O
!	O
cmd	*(char)
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
cmd	*(char)
,	O
str	*(char)
,	O
len	long
)	O
;	O
cmd	*(char)
[	O
len	long
]	O
=	O
0	int
;	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
popen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
cmd	*(char)
,	O
"r"	*(char)
)	O
;	O
if	O
(	O
!	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
ret	*(*(struct))
=	O
NULL	O
;	O
if	O
(	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
ret	*(*(struct))
,	O
"can't run %s: %s"	*(char)
,	O
cmd	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
else	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
while	O
(	O
(	O
c	int
=	O
fgetc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
)	O
{	O
lastc	int
=	O
c	int
;	O
if	O
(	O
c	int
==	O
'\n'	O
)	O
c	int
=	O
' '	O
;	O
if	O
(	O
buflen	long
==	O
bufsize	long
)	O
{	O
char	O
*	O
p	*(char)
;	O
if	O
(	O
bufsize	long
==	O
0	int
)	O
bufsize	long
=	O
80	int
;	O
else	O
bufsize	long
*=	O
2	int
;	O
p	*(char)
=	O
realloc	(*(void),long)->(*(void))
(	O
buffer	*(char)
,	O
bufsize	long
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
cmd	*(char)
)	O
;	O
return	O
MU_WRDSE_NOSPACE	O
;	O
}	O
buffer	*(char)
=	O
p	*(char)
;	O
}	O
buffer	*(char)
[	O
buflen	long
++	O
]	O
=	O
c	int
;	O
}	O
if	O
(	O
buffer	*(char)
)	O
{	O
if	O
(	O
lastc	int
==	O
'\n'	O
)	O
--	O
buflen	long
;	O
buffer	*(char)
[	O
buflen	long
]	O
=	O
0	int
;	O
}	O
pclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
fp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
free	(*(void))->(void)
(	O
cmd	*(char)
)	O
;	O
*	O
ret	*(*(struct))
=	O
buffer	*(char)
;	O
return	O
MU_WRDSE_OK	O
;	O
}	O
struct	O
exp_command	struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int)))
{	O
char	O
*	O
name	*(char)
;	O
int	O
minarg	int
;	O
int	O
maxarg	int
;	O
int	O
(	O
*	O
exp	*((int,*(*(char)),*(*(char)))->(int))
)	O
(	O
int	O
argc	int
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
char	O
*	O
*	O
ret	*(*(struct))
)	O
;	O
}	O
;	O
static	O
struct	O
exp_command	struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int)))
exp_command_tab	array(struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int))))
[	O
]	O
=	O
{	O
{	O
"localpart"	*(char)
,	O
2	int
,	O
2	int
,	O
exp_localpart	(int,*(*(char)),*(*(char)))->(int)
}	O
,	O
{	O
"domainpart"	*(char)
,	O
2	int
,	O
2	int
,	O
exp_domainpart	(int,*(*(char)),*(*(char)))->(int)
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
exp_command	struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int)))
*	O
findcom	(*(char))->(*(struct(*(char),int,int,*((int,*`,*`)->(int)))))
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
struct	O
exp_command	struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int)))
*	O
cp	*(struct(*(char),int,int,*((int,*(*`),*(*`))->(int))))
;	O
for	O
(	O
cp	*(struct(*(char),int,int,*((int,*(*`),*(*`))->(int))))
=	O
exp_command_tab	array(struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int))))
;	O
cp	*(struct(*(char),int,int,*((int,*(*`),*(*`))->(int))))
->	O
name	*(char)
;	O
cp	*(struct(*(char),int,int,*((int,*(*`),*(*`))->(int))))
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
cp	*(struct(*(char),int,int,*((int,*(*`),*(*`))->(int))))
->	O
name	*(char)
)	O
==	O
0	int
)	O
return	O
cp	*(struct(*(char),int,int,*((int,*(*`),*(*`))->(int))))
;	O
return	O
NULL	O
;	O
}	O
static	O
int	O
checkargc	(*(struct(*(char),int,int,*((int,*`,*`)->(int)))),int)->(int)
(	O
struct	O
exp_command	struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int)))
*	O
cmd	*(char)
,	O
int	O
argc	int
)	O
{	O
if	O
(	O
cmd	*(char)
->	O
minarg	int
&&	O
argc	int
<	O
cmd	*(char)
->	O
minarg	int
)	O
return	O
1	int
;	O
else	O
if	O
(	O
cmd	*(char)
->	O
maxarg	int
&&	O
argc	int
>	O
cmd	*(char)
->	O
maxarg	int
)	O
return	O
1	int
;	O
return	O
0	int
;	O
}	O
static	O
int	O
exp_runcmd	(*(*(char)),*(char),long,*(*(char)),*(void))->(int)
(	O
char	O
*	O
*	O
ret	*(*(struct))
,	O
const	O
char	O
*	O
str	*(char)
,	O
size_t	long
len	long
,	O
char	O
*	O
*	O
argv	*(*(char))
,	O
void	O
*	O
closure	*(void)
)	O
{	O
int	O
argc	int
;	O
struct	O
exp_command	struct(*(char),int,int,*((int,*(*(char)),*(*(char)))->(int)))
*	O
cmd	*(char)
;	O
char	O
*	O
result	*(*(char))
=	O
NULL	O
;	O
int	O
rc	int
;	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
0	int
]	O
,	O
SHELL_CMD	*(char)
)	O
==	O
0	int
)	O
{	O
len	long
-=	O
sizeof	O
SHELL_CMD	*(char)
-	O
1	int
;	O
str	*(char)
+=	O
sizeof	O
SHELL_CMD	*(char)
-	O
1	int
;	O
while	O
(	O
len	long
>	O
0	int
&&	O
mu_isspace	O
(	O
*	O
str	*(char)
)	O
)	O
{	O
len	long
--	O
;	O
str	*(char)
++	O
;	O
}	O
if	O
(	O
len	long
==	O
0	int
)	O
{	O
if	O
(	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
ret	*(*(struct))
,	O
_	O
(	O
"%s: bad number of arguments"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
return	O
exp_shell	(*(*(char)),*(char),long,*(void))->(int)
(	O
ret	*(*(struct))
,	O
str	*(char)
,	O
len	long
,	O
closure	*(void)
)	O
;	O
}	O
cmd	*(char)
=	O
findcom	(*(char))->(*(struct(*(char),int,int,*((int,*`,*`)->(int)))))
(	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
if	O
(	O
!	O
cmd	*(char)
)	O
{	O
if	O
(	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
ret	*(*(struct))
,	O
_	O
(	O
"%s: unknown function"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
for	O
(	O
argc	int
=	O
0	int
;	O
argv	*(*(char))
[	O
argc	int
]	O
;	O
argc	int
++	O
)	O
;	O
if	O
(	O
checkargc	(*(struct(*(char),int,int,*((int,*`,*`)->(int)))),int)->(int)
(	O
cmd	*(char)
,	O
argc	int
)	O
)	O
{	O
if	O
(	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
ret	*(*(struct))
,	O
_	O
(	O
"%s: bad number of arguments"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
rc	int
=	O
cmd	*(char)
->	O
exp	*((int,*(*(char)),*(*(char)))->(int))
(	O
argc	int
,	O
argv	*(*(char))
,	O
&	O
result	*(*(char))
)	O
;	O
if	O
(	O
rc	int
==	O
MU_WRDSE_USERERR	O
&&	O
result	*(*(char))
==	O
NULL	O
)	O
{	O
if	O
(	O
mu_asprintf	(*(*(char)),*(char))->(int)
(	O
ret	*(*(struct))
,	O
_	O
(	O
"%s: command expansion error"	*(char)
)	O
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
)	O
return	O
MU_WRDSE_NOSPACE	O
;	O
return	O
MU_WRDSE_USERERR	O
;	O
}	O
if	O
(	O
rc	int
==	O
MU_WRDSE_OK	O
||	O
rc	int
==	O
MU_WRDSE_USERERR	O
)	O
*	O
ret	*(*(struct))
=	O
result	*(*(char))
;	O
return	O
rc	int
;	O
}	O
int	O
mu_str_expand	(*(*(char)),*(char),*(struct))->(int)
(	O
char	O
*	O
*	O
output	*(*(char))
,	O
char	O
const	O
*	O
input	*(char)
,	O
mu_assoc_t	*(struct)
assoc	*(struct)
)	O
{	O
struct	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
;	O
int	O
rc	int
=	O
0	int
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_getvar	*((*(*(char)),*(char),long,*(void))->(int))
=	O
exp_getvar	(*(*(char)),*(char),long,*(void))->(int)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_command	*((*(*(char)),*(char),long,*(*(char)),*(void))->(int))
=	O
exp_runcmd	(*(*(char)),*(char),long,*(*(char)),*(void))->(int)
;	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_closure	*(void)
=	O
assoc	*(struct)
;	O
if	O
(	O
mu_wordsplit	struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct(long,*(*`),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*`),*(*`),long,long,*(*`),long,*(*`),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct`),*(struct`),array(char),int)))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*(char)),*(char),long,*(void))->(int)),*(void),*((*(*(char)),*(char),long,*(*(char)),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)
(	O
input	*(char)
,	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
MU_WRDSF_NOSPLIT	O
|	O
MU_WRDSF_GETVAR	O
|	O
MU_WRDSF_CLOSURE	O
)	O
)	O
{	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_errno	int
==	O
MU_WRDSE_NOSPACE	O
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
char	O
*	O
p	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
mu_wordsplit_strerror	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(*(char))
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
)	O
;	O
if	O
(	O
!	O
p	*(char)
)	O
rc	int
=	O
ENOMEM	int
;	O
else	O
{	O
*	O
output	*(*(char))
=	O
p	*(char)
;	O
rc	int
=	O
MU_ERR_FAILURE	O
;	O
}	O
}	O
}	O
else	O
if	O
(	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
.	O
ws_wordc	long
==	O
0	int
)	O
{	O
*	O
output	*(*(char))
=	O
strdup	(*(char))->(*(char))
(	O
""	*(char)
)	O
;	O
if	O
(	O
!	O
*	O
output	*(*(char))
)	O
rc	int
=	O
ENOMEM	int
;	O
}	O
else	O
{	O
size_t	long
wordc	*(long)
;	O
char	O
*	O
*	O
wordv	*(*(*(char)))
;	O
mu_wordsplit_get_words	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)),*(long),*(*(*(char))))->(int)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
,	O
&	O
wordc	*(long)
,	O
&	O
wordv	*(*(*(char)))
)	O
;	O
*	O
output	*(*(char))
=	O
wordv	*(*(*(char)))
[	O
0	int
]	O
;	O
}	O
mu_wordsplit_free	(*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*`)->(void)),*((*`)->(void)),*((*`)->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*`,*`,long,*`)->(int)),*(void),*((*`,*`,long,*`,*`)->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int)))->(void)
(	O
&	O
ws	*(struct(long,*(*(char)),long,long,int,int,long,long,*(char),*(char),array(*(char)),*((*(struct`))->(void)),*((*(char))->(void)),*((*(char))->(void)),*(*(char)),*(*(char)),long,long,*(*(char)),long,*(*(char)),long,long,*((*(*`),*(char),long,*(void))->(int)),*(void),*((*(*`),*(char),long,*(*`),*(void))->(int)),*(char),long,long,int,*(char),*(char),*(struct),*(struct),array(char),int))
)	O
;	O
return	O
rc	int
;	O
}	O
int	O
mu_str_vexpand	(*(*(char)),*(char))->(int)
(	O
char	O
*	O
*	O
output	*(*(char))
,	O
char	O
const	O
*	O
input	*(char)
,	O
...	O
)	O
{	O
int	O
rc	int
;	O
mu_assoc_t	*(struct)
assoc	*(struct)
;	O
char	O
*	O
p	*(char)
[	O
2	int
]	O
;	O
int	O
i	int
;	O
va_list	array(struct(int,int,*(void),*(void)))
ap	array(struct(int,int,*(void),*(void)))
;	O
rc	int
=	O
mu_assoc_create	(*(*(struct)),int)->(int)
(	O
&	O
assoc	*(struct)
,	O
0	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
va_start	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
input	*(char)
)	O
;	O
i	int
=	O
0	int
;	O
while	O
(	O
(	O
p	*(char)
[	O
i	int
]	O
=	O
va_arg	O
(	O
ap	array(struct(int,int,*(void),*(void)))
,	O
char	O
*	O
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
i	int
==	O
1	int
)	O
{	O
rc	int
=	O
mu_assoc_install	(*(struct),*(char),*(void))->(int)
(	O
assoc	*(struct)
,	O
p	*(char)
[	O
0	int
]	O
,	O
p	*(char)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
assoc	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
}	O
i	int
=	O
(	O
i	int
+	O
1	int
)	O
%	O
2	int
;	O
}	O
va_end	O
(	O
ap	array(struct(int,int,*(void),*(void)))
)	O
;	O
rc	int
=	O
mu_str_expand	(*(*(char)),*(char),*(struct))->(int)
(	O
output	*(*(char))
,	O
input	*(char)
,	O
assoc	*(struct)
)	O
;	O
mu_assoc_destroy	(*(*(struct)))->(void)
(	O
&	O
assoc	*(struct)
)	O
;	O
return	O
rc	int
;	O
}	O
