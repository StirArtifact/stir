struct	O
Request	struct(*(struct),int)
{	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
;	O
int	O
timerfd	int
;	O
}	O
;	O
static	O
int	O
epfd	int
;	O
static	O
struct	O
epoll_event	struct(int,union(*(void),int,int,long))
evt	struct(int,union(*(void),int,int,long))
;	O
static	O
int	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
const	O
char	O
*	O
url	*(char)
,	O
const	O
char	O
*	O
method	*(char)
,	O
const	O
char	O
*	O
version	*(char)
,	O
const	O
char	O
*	O
upload_data	*(char)
,	O
size_t	long
*	O
upload_data_size	*(long)
,	O
void	O
*	O
*	O
ptr	*(void)
)	O
{	O
struct	O
MHD_Response	O
*	O
response	*(struct)
;	O
int	O
ret	int
;	O
struct	O
Request	struct(*(struct),int)
*	O
req	*(struct(*(struct),int))
;	O
struct	O
itimerspec	struct(struct(long,long),struct(long,long))
ts	struct(struct(long,long),struct(long,long))
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
url	*(char)
;	O
(	O
void	O
)	O
method	*(char)
;	O
(	O
void	O
)	O
version	*(char)
;	O
(	O
void	O
)	O
upload_data	*(char)
;	O
(	O
void	O
)	O
upload_data_size	*(long)
;	O
req	*(struct(*(struct),int))
=	O
*	O
ptr	*(void)
;	O
if	O
(	O
NULL	O
==	O
req	*(struct(*(struct),int))
)	O
{	O
req	*(struct(*(struct),int))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
Request	struct(*(struct),int)
)	O
)	O
;	O
if	O
(	O
NULL	O
==	O
req	*(struct(*(struct),int))
)	O
return	O
MHD_NO	int
;	O
req	*(struct(*(struct),int))
->	O
connection	*(struct)
=	O
connection	*(struct)
;	O
req	*(struct(*(struct),int))
->	O
timerfd	int
=	O
-	O
1	int
;	O
*	O
ptr	*(void)
=	O
req	*(struct(*(struct),int))
;	O
return	O
MHD_YES	int
;	O
}	O
if	O
(	O
-	O
1	int
!=	O
req	*(struct(*(struct),int))
->	O
timerfd	int
)	O
{	O
response	*(struct)
=	O
MHD_create_response_from_buffer	(long,*(void),enum(int,int,int))->(*(struct))
(	O
strlen	(*(char))->(long)
(	O
url	*(char)
)	O
,	O
(	O
void	O
*	O
)	O
url	*(char)
,	O
MHD_RESPMEM_MUST_COPY	int
)	O
;	O
if	O
(	O
NULL	O
==	O
response	*(struct)
)	O
return	O
MHD_NO	int
;	O
ret	int
=	O
MHD_queue_response	(*(struct),int,*(struct))->(int)
(	O
connection	*(struct)
,	O
MHD_HTTP_OK	int
,	O
response	*(struct)
)	O
;	O
MHD_destroy_response	(*(struct))->(void)
(	O
response	*(struct)
)	O
;	O
return	O
ret	int
;	O
}	O
req	*(struct(*(struct),int))
->	O
timerfd	int
=	O
timerfd_create	(int,int)->(int)
(	O
CLOCK_MONOTONIC	int
,	O
TFD_NONBLOCK	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
req	*(struct(*(struct),int))
->	O
timerfd	int
)	O
{	O
printf	(*(char))->(int)
(	O
"timerfd_create: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
evt	struct(int,union(*(void),int,int,long))
.	O
events	int
=	O
EPOLLIN	int
;	O
evt	struct(int,union(*(void),int,int,long))
.	O
data	*(char)
.	O
ptr	*(void)
=	O
req	*(struct(*(struct),int))
;	O
if	O
(	O
-	O
1	int
==	O
epoll_ctl	(int,int,int,*(struct(int,union(*(void),int,int,long))))->(int)
(	O
epfd	int
,	O
EPOLL_CTL_ADD	int
,	O
req	*(struct(*(struct),int))
->	O
timerfd	int
,	O
&	O
evt	struct(int,union(*(void),int,int,long))
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"epoll_ctl: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
ts	struct(struct(long,long),struct(long,long))
.	O
it_value	struct(long,long)
.	O
tv_sec	long
=	O
1	int
;	O
ts	struct(struct(long,long),struct(long,long))
.	O
it_value	struct(long,long)
.	O
tv_nsec	long
=	O
0	int
;	O
ts	struct(struct(long,long),struct(long,long))
.	O
it_interval	struct(long,long)
.	O
tv_sec	long
=	O
0	int
;	O
ts	struct(struct(long,long),struct(long,long))
.	O
it_interval	struct(long,long)
.	O
tv_nsec	long
=	O
0	int
;	O
if	O
(	O
-	O
1	int
==	O
timerfd_settime	(int,int,*(struct(struct(long,long),struct(long,long))),*(struct(struct(long,long),struct(long,long))))->(int)
(	O
req	*(struct(*(struct),int))
->	O
timerfd	int
,	O
0	int
,	O
&	O
ts	struct(struct(long,long),struct(long,long))
,	O
NULL	O
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"timerfd_settime: %s"	*(char)
,	O
strerror	(int)->(*(char))
(	O
errno	O
)	O
)	O
;	O
return	O
MHD_NO	int
;	O
}	O
MHD_suspend_connection	(*(struct))->(void)
(	O
connection	*(struct)
)	O
;	O
return	O
MHD_YES	int
;	O
}	O
static	O
void	O
connection_done	(*(void),*(struct),*(*(void)),enum(int,int,int,int,int,int))->(void)
(	O
void	O
*	O
cls	*(void)
,	O
struct	O
MHD_Connection	O
*	O
connection	*(struct)
,	O
void	O
*	O
*	O
con_cls	*(*(void))
,	O
enum	O
MHD_RequestTerminationCode	enum(int,int,int,int,int,int)
toe	enum(int,int,int,int,int,int)
)	O
{	O
struct	O
Request	struct(*(struct),int)
*	O
req	*(struct(*(struct),int))
=	O
*	O
con_cls	*(*(void))
;	O
(	O
void	O
)	O
cls	*(void)
;	O
(	O
void	O
)	O
connection	*(struct)
;	O
(	O
void	O
)	O
toe	enum(int,int,int,int,int,int)
;	O
if	O
(	O
-	O
1	int
!=	O
req	*(struct(*(struct),int))
->	O
timerfd	int
)	O
if	O
(	O
0	int
!=	O
close	*((*(void))->(int))
(	O
req	*(struct(*(struct),int))
->	O
timerfd	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
free	(*(void))->(void)
(	O
req	*(struct(*(struct),int))
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	int
,	O
char	O
*	O
const	O
*	O
argv	*(*(char))
)	O
{	O
struct	O
MHD_Daemon	O
*	O
d	*(struct)
;	O
const	O
union	O
MHD_DaemonInfo	union(long,long,int,short,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))
*	O
info	*(union(long,long,int,short,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
;	O
int	O
current_event_count	int
;	O
struct	O
epoll_event	struct(int,union(*(void),int,int,long))
events_list	array(struct(int,union(*(void),int,int,long)))
[	O
1	int
]	O
;	O
struct	O
Request	struct(*(struct),int)
*	O
req	*(struct(*(struct),int))
;	O
uint64_t	long
timer_expirations	long
;	O
if	O
(	O
argc	int
!=	O
2	int
)	O
{	O
printf	(*(char))->(int)
(	O
"%s PORT\n"	*(char)
,	O
argv	*(*(char))
[	O
0	int
]	O
)	O
;	O
return	O
1	int
;	O
}	O
d	*(struct)
=	O
MHD_start_daemon	(int,short,*((*(void),*(struct(short,array(char))),int)->(int)),*(void),*((*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)),*(void))->(*(struct))
(	O
MHD_USE_EPOLL	int
|	O
MHD_ALLOW_SUSPEND_RESUME	int
,	O
atoi	(*(char))->(int)
(	O
argv	*(*(char))
[	O
1	int
]	O
)	O
,	O
NULL	O
,	O
NULL	O
,	O
&	O
ahc_echo	(*(void),*(struct),*(char),*(char),*(char),*(char),*(long),*(*(void)))->(int)
,	O
NULL	O
,	O
MHD_OPTION_NOTIFY_COMPLETED	int
,	O
&	O
connection_done	(*(void),*(struct),*(*(void)),enum(int,int,int,int,int,int))->(void)
,	O
NULL	O
,	O
MHD_OPTION_END	int
)	O
;	O
if	O
(	O
d	*(struct)
==	O
NULL	O
)	O
return	O
1	int
;	O
info	*(union(long,long,int,short,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
=	O
MHD_get_daemon_info	(*(struct),enum(int,int,int,int,int,int,int,int))->(*(union(long,long,int,short,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))))
(	O
d	*(struct)
,	O
MHD_DAEMON_INFO_EPOLL_FD	int
)	O
;	O
if	O
(	O
info	*(union(long,long,int,short,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
==	O
NULL	O
)	O
return	O
1	int
;	O
epfd	int
=	O
epoll_create1	(int)->(int)
(	O
EPOLL_CLOEXEC	int
)	O
;	O
if	O
(	O
-	O
1	int
==	O
epfd	int
)	O
return	O
1	int
;	O
evt	struct(int,union(*(void),int,int,long))
.	O
events	int
=	O
EPOLLIN	int
;	O
evt	struct(int,union(*(void),int,int,long))
.	O
data	*(char)
.	O
ptr	*(void)
=	O
NULL	O
;	O
if	O
(	O
-	O
1	int
==	O
epoll_ctl	(int,int,int,*(struct(int,union(*(void),int,int,long))))->(int)
(	O
epfd	int
,	O
EPOLL_CTL_ADD	int
,	O
info	*(union(long,long,int,short,int,int,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)))
->	O
epoll_fd	int
,	O
&	O
evt	struct(int,union(*(void),int,int,long))
)	O
)	O
return	O
1	int
;	O
while	O
(	O
1	int
)	O
{	O
int	O
timeout	*(long long)
;	O
MHD_UNSIGNED_LONG_LONG	O
to	long long
;	O
if	O
(	O
MHD_YES	int
!=	O
MHD_get_timeout	(*(struct),*(long long))->(int)
(	O
d	*(struct)
,	O
&	O
to	long long
)	O
)	O
timeout	*(long long)
=	O
TIMEOUT_INFINITE	O
;	O
else	O
timeout	*(long long)
=	O
(	O
to	long long
<	O
INT_MAX	O
-	O
1	int
)	O
?	O
(	O
int	O
)	O
to	long long
:	O
(	O
INT_MAX	O
-	O
1	int
)	O
;	O
current_event_count	int
=	O
epoll_wait	(int,*(struct(int,union(*(void),int,int,long))),int,int)->(int)
(	O
epfd	int
,	O
events_list	array(struct(int,union(*(void),int,int,long)))
,	O
1	int
,	O
timeout	*(long long)
)	O
;	O
if	O
(	O
1	int
==	O
current_event_count	int
)	O
{	O
if	O
(	O
events_list	array(struct(int,union(*(void),int,int,long)))
[	O
0	int
]	O
.	O
data	*(char)
.	O
ptr	*(void)
)	O
{	O
req	*(struct(*(struct),int))
=	O
events_list	array(struct(int,union(*(void),int,int,long)))
[	O
0	int
]	O
.	O
data	*(char)
.	O
ptr	*(void)
;	O
if	O
(	O
-	O
1	int
==	O
read	*((*(void),*(char),long)->(long))
(	O
req	*(struct(*(struct),int))
->	O
timerfd	int
,	O
&	O
timer_expirations	long
,	O
sizeof	O
(	O
timer_expirations	long
)	O
)	O
)	O
{	O
return	O
1	int
;	O
}	O
MHD_resume_connection	(*(struct))->(void)
(	O
req	*(struct(*(struct),int))
->	O
connection	*(struct)
)	O
;	O
}	O
}	O
else	O
if	O
(	O
0	int
==	O
current_event_count	int
)	O
{	O
}	O
else	O
{	O
return	O
1	int
;	O
}	O
if	O
(	O
!	O
MHD_run	(*(struct))->(int)
(	O
d	*(struct)
)	O
)	O
return	O
1	int
;	O
}	O
return	O
0	int
;	O
}	O
