void	O
(	O
*	O
error_hook	*(()->(void))
)	O
(	O
void	O
)	O
;	O
void	O
pax_decode_mode	(int,*(char))->(void)
(	O
mode_t	int
mode	int
,	O
char	O
*	O
string	*(char)
)	O
{	O
*	O
string	*(char)
++	O
=	O
mode	int
&	O
S_IRUSR	O
?	O
'r'	O
:	O
'-'	O
;	O
*	O
string	*(char)
++	O
=	O
mode	int
&	O
S_IWUSR	O
?	O
'w'	O
:	O
'-'	O
;	O
*	O
string	*(char)
++	O
=	O
(	O
mode	int
&	O
S_ISUID	O
?	O
(	O
mode	int
&	O
S_IXUSR	O
?	O
's'	O
:	O
'S'	O
)	O
:	O
(	O
mode	int
&	O
S_IXUSR	O
?	O
'x'	O
:	O
'-'	O
)	O
)	O
;	O
*	O
string	*(char)
++	O
=	O
mode	int
&	O
S_IRGRP	O
?	O
'r'	O
:	O
'-'	O
;	O
*	O
string	*(char)
++	O
=	O
mode	int
&	O
S_IWGRP	O
?	O
'w'	O
:	O
'-'	O
;	O
*	O
string	*(char)
++	O
=	O
(	O
mode	int
&	O
S_ISGID	O
?	O
(	O
mode	int
&	O
S_IXGRP	O
?	O
's'	O
:	O
'S'	O
)	O
:	O
(	O
mode	int
&	O
S_IXGRP	O
?	O
'x'	O
:	O
'-'	O
)	O
)	O
;	O
*	O
string	*(char)
++	O
=	O
mode	int
&	O
S_IROTH	O
?	O
'r'	O
:	O
'-'	O
;	O
*	O
string	*(char)
++	O
=	O
mode	int
&	O
S_IWOTH	O
?	O
'w'	O
:	O
'-'	O
;	O
*	O
string	*(char)
++	O
=	O
(	O
mode	int
&	O
S_ISVTX	O
?	O
(	O
mode	int
&	O
S_IXOTH	O
?	O
't'	O
:	O
'T'	O
)	O
:	O
(	O
mode	int
&	O
S_IXOTH	O
?	O
'x'	O
:	O
'-'	O
)	O
)	O
;	O
*	O
string	*(char)
=	O
'\0'	O
;	O
}	O
void	O
call_arg_error	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
call	*(char)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
call	*(char)
)	O
)	O
;	O
}	O
void	O
call_arg_fatal	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
call	*(char)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
FATAL_ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
call	*(char)
)	O
)	O
;	O
}	O
void	O
call_arg_warn	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
call	*(char)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
WARN	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Warning: Cannot %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
call	*(char)
)	O
)	O
;	O
}	O
void	O
chmod_error_details	(*(char),int)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
mode_t	int
mode	int
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
char	O
buf	array(char)
[	O
10	int
]	O
;	O
pax_decode_mode	(int,*(char))->(void)
(	O
mode	int
,	O
buf	array(char)
)	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot change mode to %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
buf	array(char)
)	O
)	O
;	O
}	O
void	O
chown_error_details	(*(char),int,int)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
uid_t	int
uid	int
,	O
gid_t	int
gid	int
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot change ownership to uid %lu, gid %lu"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
uid	int
,	O
(	O
unsigned	O
long	O
)	O
gid	int
)	O
)	O
;	O
}	O
void	O
close_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"close"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
close_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"close"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
exec_fatal	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_fatal	(*(char),*(char))->(void)
(	O
"exec"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
link_error	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
target	*(char)
,	O
char	O
const	O
*	O
source	*(char)
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot hard link to %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
source	*(char)
)	O
,	O
quote_n	(int,*(char))->(*(char))
(	O
1	int
,	O
target	*(char)
)	O
)	O
)	O
;	O
}	O
void	O
mkdir_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"mkdir"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
mkfifo_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"mkfifo"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
mknod_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"mknod"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
open_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"open"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
open_fatal	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_fatal	(*(char),*(char))->(void)
(	O
"open"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
open_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"open"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
read_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"read"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
read_error_details	(*(char),long,long)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
off_t	long
offset	long
,	O
size_t	long
size	*(long)
)	O
{	O
char	O
buf	array(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
e	int
=	O
errno	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%s: Read error at byte %s, while reading %lu byte"	*(char)
,	O
"%s: Read error at byte %s, while reading %lu bytes"	*(char)
,	O
size	*(long)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
STRINGIFY_BIGINT	O
(	O
offset	long
,	O
buf	array(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
size	*(long)
)	O
)	O
;	O
}	O
void	O
read_warn_details	(*(char),long,long)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
off_t	long
offset	long
,	O
size_t	long
size	*(long)
)	O
{	O
char	O
buf	array(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
e	int
=	O
errno	O
;	O
WARN	O
(	O
(	O
0	int
,	O
e	int
,	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%s: Warning: Read error at byte %s, while reading %lu byte"	*(char)
,	O
"%s: Warning: Read error at byte %s, while reading %lu bytes"	*(char)
,	O
size	*(long)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
STRINGIFY_BIGINT	O
(	O
offset	long
,	O
buf	array(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
size	*(long)
)	O
)	O
;	O
}	O
void	O
read_fatal	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_fatal	(*(char),*(char))->(void)
(	O
"read"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
read_fatal_details	(*(char),long,long)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
off_t	long
offset	long
,	O
size_t	long
size	*(long)
)	O
{	O
char	O
buf	array(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
e	int
=	O
errno	O
;	O
FATAL_ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%s: Read error at byte %s, while reading %lu byte"	*(char)
,	O
"%s: Read error at byte %s, while reading %lu bytes"	*(char)
,	O
size	*(long)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
STRINGIFY_BIGINT	O
(	O
offset	long
,	O
buf	array(char)
)	O
,	O
(	O
unsigned	O
long	O
)	O
size	*(long)
)	O
)	O
;	O
}	O
void	O
readlink_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"readlink"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
readlink_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"readlink"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
rmdir_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"rmdir"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
savedir_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"savedir"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
savedir_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"savedir"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
seek_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"seek"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
seek_error_details	(*(char),long)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
off_t	long
offset	long
)	O
{	O
char	O
buf	array(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
e	int
=	O
errno	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot seek to %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
STRINGIFY_BIGINT	O
(	O
offset	long
,	O
buf	array(char)
)	O
)	O
)	O
;	O
}	O
void	O
seek_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"seek"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
seek_warn_details	(*(char),long)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
off_t	long
offset	long
)	O
{	O
char	O
buf	array(char)
[	O
UINTMAX_STRSIZE_BOUND	O
]	O
;	O
int	O
e	int
=	O
errno	O
;	O
WARN	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Warning: Cannot seek to %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
STRINGIFY_BIGINT	O
(	O
offset	long
,	O
buf	array(char)
)	O
)	O
)	O
;	O
}	O
void	O
symlink_error	(*(char),*(char))->(void)
(	O
char	O
const	O
*	O
contents	*(char)
,	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
int	O
e	int
=	O
errno	O
;	O
ERROR	O
(	O
(	O
0	int
,	O
e	int
,	O
_	O
(	O
"%s: Cannot create symlink to %s"	*(char)
)	O
,	O
quotearg_colon	(*(char))->(*(char))
(	O
name	*(char)
)	O
,	O
quote_n	(int,*(char))->(*(char))
(	O
1	int
,	O
contents	*(char)
)	O
)	O
)	O
;	O
}	O
void	O
stat_fatal	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_fatal	(*(char),*(char))->(void)
(	O
"stat"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
stat_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"stat"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
stat_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"stat"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
truncate_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"truncate"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
truncate_warn	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_warn	(*(char),*(char))->(void)
(	O
"truncate"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
unlink_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"unlink"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
utime_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"utime"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
waitpid_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"waitpid"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
write_error	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_error	(*(char),*(char))->(void)
(	O
"write"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
void	O
write_error_details	(*(char),long,long)->(void)
(	O
char	O
const	O
*	O
name	*(char)
,	O
size_t	long
status	int
,	O
size_t	long
size	*(long)
)	O
{	O
if	O
(	O
status	int
==	O
0	int
)	O
write_error	(*(char))->(void)
(	O
name	*(char)
)	O
;	O
else	O
ERROR	O
(	O
(	O
0	int
,	O
0	int
,	O
ngettext	(*(char),*(char),long)->(*(char))
(	O
"%s: Wrote only %lu of %lu byte"	*(char)
,	O
"%s: Wrote only %lu of %lu bytes"	*(char)
,	O
size	*(long)
)	O
,	O
name	*(char)
,	O
(	O
unsigned	O
long	O
int	O
)	O
status	int
,	O
(	O
unsigned	O
long	O
int	O
)	O
size	*(long)
)	O
)	O
;	O
}	O
void	O
chdir_fatal	(*(char))->(void)
(	O
char	O
const	O
*	O
name	*(char)
)	O
{	O
call_arg_fatal	(*(char),*(char))->(void)
(	O
"chdir"	*(char)
,	O
name	*(char)
)	O
;	O
}	O
