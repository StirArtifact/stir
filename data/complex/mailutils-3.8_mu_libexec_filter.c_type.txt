char	O
filter_docstring	array(char)
[	O
]	O
=	O
N_	O
(	O
"apply a chain of filters to the input"	*(char)
)	O
;	O
static	O
char	O
filter_args_doc	array(char)
[	O
]	O
=	O
N_	O
(	O
"[~]NAME [ARGS] [+ [~]NAME [ARGS]...]"	*(char)
)	O
;	O
static	O
int	O
filter_mode	int
=	O
MU_FILTER_ENCODE	int
;	O
static	O
int	O
newline_option	int
=	O
0	int
;	O
static	O
int	O
list_option	int
;	O
static	O
void	O
set_encode_mode	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
filter_mode	int
=	O
MU_FILTER_ENCODE	int
;	O
}	O
static	O
void	O
set_decode_mode	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
(	O
struct	O
mu_parseopt	struct(int,*(*(char)),long,*(*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char)))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),*((*(struct(int,*(*`),long,*(*`),int,*(char),*(void),int,*(char),*(char),*(*`),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct`),*(char),int,*(char),int,int,int,long,*(long))),*(struct))->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))
*	O
po	*(struct(int,*(*(char)),long,*(*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`))),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char)))
,	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
*	O
opt	*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char)))
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
filter_mode	int
=	O
MU_FILTER_DECODE	int
;	O
}	O
static	O
struct	O
mu_option	struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)),*(char))
filter_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
[	O
]	O
=	O
{	O
{	O
"encode"	*(char)
,	O
'e'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"encode the input (default)"	*(char)
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_encode_mode	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"decode"	*(char)
,	O
'd'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"decode the input"	*(char)
)	O
,	O
mu_c_string	int
,	O
NULL	O
,	O
set_decode_mode	(*(struct(int,*(*(char)),long,*(*(struct`)),int,*(char),*(void),int,*(char),*(char),*(*(char)),*(char),*(char),*(char),*(char),*(char),*((*`,*`)->(void)),*((*`,*`)->(void)),*((*`,*`)->(void)),int,int,*(struct),*(char),int,*(char),int,int,int,long,*(long))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char))->(void)
}	O
,	O
{	O
"newline"	*(char)
,	O
'n'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"print additional newline"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
newline_option	int
}	O
,	O
{	O
"list"	*(char)
,	O
'L'	O
,	O
NULL	O
,	O
MU_OPTION_DEFAULT	int
,	O
N_	O
(	O
"list supported filters"	*(char)
)	O
,	O
mu_c_bool	int
,	O
&	O
list_option	int
}	O
,	O
MU_OPTION_END	O
}	O
;	O
static	O
int	O
filter_printer	(*(void),*(void))->(int)
(	O
void	O
*	O
item	*(void)
,	O
void	O
*	O
data	*(void)
)	O
{	O
mu_filter_record_t	*(struct)
rec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
=	O
item	*(void)
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
rec	*(struct(*(char),*((*(*`),int,int,*(*`))->(int)),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int))),*((*(void),enum(int,int,int,int,int),*(struct`))->(enum(int,int,int,int,int)))))
->	O
name	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
static	O
int	O
list_filters	()->(int)
(	O
void	O
)	O
{	O
mu_list_t	*(struct)
list	*(struct)
;	O
int	O
rc	int
=	O
mu_filter_get_list	(*(*(struct)))->(int)
(	O
&	O
list	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_diag_funcall	(int,*(char),*(char),int)->(void)
(	O
MU_DIAG_ERROR	O
,	O
"mu_filter_get_list"	*(char)
,	O
NULL	O
,	O
rc	int
)	O
;	O
return	O
1	int
;	O
}	O
return	O
mu_list_foreach	(*(struct),*((*(void),*(void))->(int)),*(void))->(int)
(	O
list	*(struct)
,	O
filter_printer	(*(void),*(void))->(int)
,	O
NULL	O
)	O
;	O
}	O
static	O
int	O
negate_filter_mode	(int)->(int)
(	O
int	O
mode	int
)	O
{	O
if	O
(	O
mode	int
==	O
MU_FILTER_DECODE	int
)	O
return	O
MU_FILTER_ENCODE	int
;	O
else	O
if	O
(	O
mode	int
==	O
MU_FILTER_ENCODE	int
)	O
return	O
MU_FILTER_DECODE	int
;	O
abort	()->(void)
(	O
)	O
;	O
}	O
int	O
main	(int,*(*(char)))->(int)
(	O
int	O
argc	long
,	O
char	O
*	O
*	O
argv	*(*(char))
)	O
{	O
int	O
rc	int
;	O
mu_stream_t	*(struct)
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
prev_stream	*(struct)
;	O
const	O
char	O
*	O
fltname	*(char)
;	O
int	O
mode	int
;	O
mu_action_getopt	(*(int),*(*(*(char))),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(char),*(char))->(void)
(	O
&	O
argc	long
,	O
&	O
argv	*(*(char))
,	O
filter_options	array(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct(int,*`,long,*`,int,*`,*`,int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,*`,*`,int,*`,int,int,int,long,*`)),*(struct(*`,int,*`,int,*`,enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*`,*`,*`)),*(char))->(void)),*(char)))
,	O
filter_docstring	array(char)
,	O
filter_args_doc	array(char)
)	O
;	O
if	O
(	O
list_option	int
)	O
{	O
if	O
(	O
argc	long
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"excess arguments"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
return	O
list_filters	()->(int)
(	O
)	O
;	O
}	O
if	O
(	O
argc	long
==	O
0	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"what filter do you want?"	*(char)
)	O
)	O
;	O
return	O
1	int
;	O
}	O
prev_stream	*(struct)
=	O
mu_strin	*(struct)
;	O
mu_stream_ref	(*(struct))->(void)
(	O
mu_strin	*(struct)
)	O
;	O
do	O
{	O
int	O
i	long
;	O
fltname	*(char)
=	O
argv	*(*(char))
[	O
0	int
]	O
;	O
if	O
(	O
fltname	*(char)
[	O
0	int
]	O
==	O
'~'	O
)	O
{	O
mode	int
=	O
negate_filter_mode	(int)->(int)
(	O
filter_mode	int
)	O
;	O
fltname	*(char)
++	O
;	O
}	O
else	O
mode	int
=	O
filter_mode	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
argc	long
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
argv	*(*(char))
[	O
i	long
]	O
,	O
"+"	*(char)
)	O
==	O
0	int
)	O
break	O
;	O
rc	int
=	O
mu_filter_create_args	(*(*(struct)),*(struct),*(char),int,*(*(char)),int,int)->(int)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
prev_stream	*(struct)
,	O
fltname	*(char)
,	O
i	long
,	O
(	O
const	O
char	O
*	O
*	O
)	O
argv	*(*(char))
,	O
mode	int
,	O
MU_STREAM_READ	int
)	O
;	O
mu_stream_unref	(*(struct))->(void)
(	O
prev_stream	*(struct)
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
_	O
(	O
"cannot open filter stream: %s"	*(char)
)	O
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
prev_stream	*(struct)
=	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
;	O
argc	long
-=	O
i	long
;	O
argv	*(*(char))
+=	O
i	long
;	O
if	O
(	O
argc	long
)	O
{	O
argc	long
--	O
;	O
argv	*(*(char))
++	O
;	O
}	O
}	O
while	O
(	O
argc	long
)	O
;	O
rc	int
=	O
mu_stream_copy	(*(struct),*(struct),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
,	O
0	int
,	O
NULL	O
)	O
;	O
if	O
(	O
rc	int
)	O
{	O
mu_error	(*(char))->(int)
(	O
"%s"	*(char)
,	O
mu_strerror	(int)->(*(char))
(	O
rc	int
)	O
)	O
;	O
return	O
1	int
;	O
}	O
if	O
(	O
newline_option	int
)	O
mu_stream_write	(*(struct),*(void),long,*(long))->(int)
(	O
mu_strout	*(struct)
,	O
"\n"	*(char)
,	O
1	int
,	O
NULL	O
)	O
;	O
mu_stream_destroy	(*(*(struct)))->(void)
(	O
&	O
flt	*((*(struct(int,*(char),int,int,int,*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*((*`)->(int)),*(void),*((*`,*`,int)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,*`,int)->(int)))),*(void))->(int))
)	O
;	O
mu_stream_flush	(*(struct))->(int)
(	O
mu_strout	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
