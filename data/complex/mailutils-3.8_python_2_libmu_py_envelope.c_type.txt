static	O
PyObject	O
*	O
_repr	(*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
)	O
{	O
char	O
buf	*(char)
[	O
80	int
]	O
;	O
sprintf	O
(	O
buf	*(char)
,	O
"<"	*(char)
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME	*(char)
" instance at %p>"	*(char)
,	O
self	*(int)
)	O
;	O
return	O
PyString_FromString	()->(int)
(	O
buf	*(char)
)	O
;	O
}	O
static	O
PyTypeObject	O
PyEnvelopeType	int
=	O
{	O
PyObject_HEAD_INIT	()->(int)
(	O
NULL	O
)	O
0	int
,	O
PY_MODULE	*(char)
"."	*(char)
PY_CSNAME	*(char)
,	O
sizeof	O
(	O
PyEnvelope	O
)	O
,	O
0	int
,	O
(	O
destructor	O
)	O
_py_dealloc	(*(int))->(void)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
_repr	(*(int))->(*(int))
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
_repr	(*(int))->(*(int))
,	O
0	int
,	O
0	int
,	O
0	int
,	O
Py_TPFLAGS_DEFAULT	O
,	O
""	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
}	O
;	O
PyEnvelope	O
*	O
PyEnvelope_NEW	()->(*(int))
(	O
)	O
{	O
return	O
(	O
PyEnvelope	O
*	O
)	O
PyObject_NEW	O
(	O
PyEnvelope	O
,	O
&	O
PyEnvelopeType	int
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_create	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_envelope_create	()->(int)
(	O
&	O
py_env	O
->	O
env	O
,	O
NULL	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
PyInt_FromLong	()->(int)
(	O
status	int
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_destroy	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
mu_envelope_destroy	()->(int)
(	O
&	O
py_env	O
->	O
env	O
,	O
NULL	O
)	O
;	O
return	O
_ro	(*(int))->(*(int))
(	O
Py_None	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_get_sender	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
const	O
char	O
*	O
sender	*(char)
=	O
NULL	O
;	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_envelope_sget_sender	()->(int)
(	O
py_env	O
->	O
env	O
,	O
&	O
sender	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyString_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
sender	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyObject	O
*	O
api_envelope_get_date	(*(int),*(int))->(*(int))
(	O
PyObject	O
*	O
self	*(int)
,	O
PyObject	O
*	O
args	*(int)
)	O
{	O
int	O
status	int
;	O
const	O
char	O
*	O
date	*(char)
=	O
NULL	O
;	O
PyEnvelope	O
*	O
py_env	O
;	O
if	O
(	O
!	O
PyArg_ParseTuple	()->(int)
(	O
args	*(int)
,	O
"O!"	*(char)
,	O
&	O
PyEnvelopeType	int
,	O
&	O
py_env	O
)	O
)	O
return	O
NULL	O
;	O
status	int
=	O
mu_envelope_sget_date	()->(int)
(	O
py_env	O
->	O
env	O
,	O
&	O
date	*(char)
)	O
;	O
return	O
status_object	(int,*(int))->(*(int))
(	O
status	int
,	O
PyString_FromString	()->(int)
(	O
mu_prstr	()->(int)
(	O
date	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
PyMethodDef	O
methods	*(int)
[	O
]	O
=	O
{	O
{	O
"create"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_envelope_create	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"destroy"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_envelope_destroy	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
""	*(char)
}	O
,	O
{	O
"get_sender"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_envelope_get_sender	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Get the address that this message was reportedly received from."	*(char)
}	O
,	O
{	O
"get_date"	*(char)
,	O
(	O
PyCFunction	O
)	O
api_envelope_get_date	(*(int),*(int))->(*(int))
,	O
METH_VARARGS	O
,	O
"Get the date that the message was delivered to the mailbox."	*(char)
}	O
,	O
{	O
NULL	O
,	O
NULL	O
,	O
0	int
,	O
NULL	O
}	O
}	O
;	O
int	O
mu_py_init_envelope	()->(int)
(	O
)	O
{	O
PyEnvelopeType	int
.	O
tp_new	O
=	O
PyType_GenericNew	O
;	O
return	O
PyType_Ready	()->(int)
(	O
&	O
PyEnvelopeType	int
)	O
;	O
}	O
void	O
_mu_py_attach_envelope	()->(void)
(	O
void	O
)	O
{	O
PyObject	O
*	O
m	O
;	O
if	O
(	O
(	O
m	O
=	O
_mu_py_attach_module	(*(char),*(int))->(*(int))
(	O
PY_MODULE	*(char)
,	O
methods	*(int)
)	O
)	O
)	O
{	O
Py_INCREF	()->(int)
(	O
&	O
PyEnvelopeType	int
)	O
;	O
PyModule_AddObject	()->(int)
(	O
m	O
,	O
PY_CSNAME	*(char)
,	O
(	O
PyObject	O
*	O
)	O
&	O
PyEnvelopeType	int
)	O
;	O
}	O
}	O
