char	O
*	O
trim2	(*(char),int)->(*(char))
(	O
const	O
char	O
*	O
s	*(char)
,	O
int	O
how	int
)	O
{	O
char	O
*	O
d	*(char)
;	O
d	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
s	*(char)
)	O
;	O
if	O
(	O
!	O
d	*(char)
)	O
xalloc_die	()->(void)
(	O
)	O
;	O
if	O
(	O
MB_CUR_MAX	O
>	O
1	int
)	O
{	O
mbi_iterator_t	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
;	O
if	O
(	O
how	int
!=	O
TRIM_TRAILING	int
)	O
{	O
mbi_init	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
,	O
d	*(char)
,	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
)	O
;	O
for	O
(	O
;	O
mbi_avail	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
&&	O
mb_isspace	O
(	O
mbi_cur	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
;	O
mbi_advance	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
d	*(char)
,	O
mbi_cur_ptr	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
,	O
strlen	(*(char))->(long)
(	O
mbi_cur_ptr	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
+	O
1	int
)	O
;	O
}	O
if	O
(	O
how	int
!=	O
TRIM_LEADING	int
)	O
{	O
unsigned	O
int	O
state	*(int)
=	O
0	int
;	O
char	O
*	O
r	*(char)
IF_LINT	O
(	O
=	O
NULL	O
)	O
;	O
mbi_init	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
,	O
d	*(char)
,	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
)	O
;	O
for	O
(	O
;	O
mbi_avail	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
;	O
mbi_advance	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
{	O
if	O
(	O
state	*(int)
==	O
0	int
&&	O
mb_isspace	O
(	O
mbi_cur	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
state	*(int)
==	O
0	int
&&	O
!	O
mb_isspace	O
(	O
mbi_cur	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
)	O
{	O
state	*(int)
=	O
1	int
;	O
continue	O
;	O
}	O
if	O
(	O
state	*(int)
==	O
1	int
&&	O
!	O
mb_isspace	O
(	O
mbi_cur	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
)	O
continue	O
;	O
if	O
(	O
state	*(int)
==	O
1	int
&&	O
mb_isspace	O
(	O
mbi_cur	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
)	O
{	O
state	*(int)
=	O
2	int
;	O
r	*(char)
=	O
(	O
char	O
*	O
)	O
mbi_cur_ptr	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
;	O
}	O
else	O
if	O
(	O
state	*(int)
==	O
2	int
&&	O
mb_isspace	O
(	O
mbi_cur	O
(	O
i	struct(*(char),bool,struct(int,union(int,array(char))),bool,struct(*(char),long,bool,int,array(char)))
)	O
)	O
)	O
{	O
}	O
else	O
{	O
state	*(int)
=	O
1	int
;	O
}	O
}	O
if	O
(	O
state	*(int)
==	O
2	int
)	O
*	O
r	*(char)
=	O
'\0'	O
;	O
}	O
}	O
else	O
{	O
char	O
*	O
p	*(void)
;	O
if	O
(	O
how	int
!=	O
TRIM_TRAILING	int
)	O
{	O
for	O
(	O
p	*(void)
=	O
d	*(char)
;	O
*	O
p	*(void)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(void)
)	O
;	O
p	*(void)
++	O
)	O
;	O
memmove	(*(void),*(void),long)->(*(void))
(	O
d	*(char)
,	O
p	*(void)
,	O
strlen	(*(char))->(long)
(	O
p	*(void)
)	O
+	O
1	int
)	O
;	O
}	O
if	O
(	O
how	int
!=	O
TRIM_LEADING	int
)	O
{	O
for	O
(	O
p	*(void)
=	O
d	*(char)
+	O
strlen	(*(char))->(long)
(	O
d	*(char)
)	O
-	O
1	int
;	O
p	*(void)
>=	O
d	*(char)
&&	O
isspace	(int)->(int)
(	O
(	O
unsigned	O
char	O
)	O
*	O
p	*(void)
)	O
;	O
p	*(void)
--	O
)	O
*	O
p	*(void)
=	O
'\0'	O
;	O
}	O
}	O
return	O
d	*(char)
;	O
}	O
