double	O
conit	O
,	O
crate	O
,	O
el	O
[	O
13	int
]	O
,	O
elco	*(double)
[	O
156	int
]	O
,	O
hold	O
,	O
rmax	O
,	O
tesco	*(double)
[	O
36	int
]	O
,	O
ccmax	O
,	O
el0	O
,	O
h	O
,	O
hmin	O
,	O
hmxi	O
,	O
hu	O
,	O
rc	O
,	O
tn	O
,	O
uround	O
;	O
double	O
con0	O
,	O
conmin	O
,	O
ccmxj	O
,	O
psmall	O
,	O
rbig	O
,	O
seth	O
;	O
long	O
iplost	O
,	O
iesp	O
,	O
istatc	O
,	O
iys	O
,	O
iba	O
,	O
ibian	O
,	O
ibjan	O
,	O
ibjgp	O
,	O
ipian	O
,	O
ipjan	O
,	O
ipjgp	O
,	O
ipigp	O
,	O
ipr	O
,	O
ipc	O
,	O
ipic	O
,	O
ipisp	O
,	O
iprsp	O
,	O
ipa	O
,	O
lenyh	O
,	O
lenyhm	O
,	O
lenwk	O
,	O
lreq	O
,	O
lrat	O
,	O
lrest	O
,	O
lwmin	O
,	O
moss	O
,	O
msbj	O
,	O
nslj	O
,	O
ngp	O
,	O
nlu	O
,	O
nnz	O
,	O
nsp	*(long)
,	O
nzl	O
,	O
nzu	O
;	O
long	O
illin	O
,	O
init	O
,	O
lyh	O
,	O
lewt	O
,	O
lacor	O
,	O
lsavf	O
,	O
lwm	O
,	O
liwm	O
,	O
mxstep	O
,	O
mxhnil	O
,	O
nhnil	O
,	O
ntrep	O
,	O
nslast	O
,	O
nyh	O
,	O
ialth	O
,	O
ipup	O
,	O
lmax	*(long)
,	O
meo	O
,	O
nqnyh	O
,	O
nslp	O
,	O
icf	O
,	O
ierpj	O
,	O
iersl	O
,	O
jcur	O
,	O
jstart	O
,	O
kflag	O
,	O
l	*(long)
,	O
meth	*(long)
,	O
miter	O
,	O
maxord	O
,	O
maxcor	O
,	O
msbp	O
,	O
mxncf	O
,	O
n	*(long)
,	O
nq	O
,	O
nst	O
,	O
nfe	O
,	O
nje	O
,	O
nqu	O
;	O
double	O
d_sign	(*(double),*(double))->(double)
(	O
double	O
*	O
pa1	*(double)
,	O
double	O
*	O
pa2	*(double)
)	O
{	O
double	O
a3	O
;	O
a3	O
=	O
(	O
*	O
pa1	*(double)
>=	O
0	int
)	O
?	O
*	O
pa1	*(double)
:	O
-	O
*	O
pa1	*(double)
;	O
if	O
(	O
*	O
pa2	*(double)
>=	O
0	int
)	O
return	O
a3	O
;	O
return	O
-	O
a3	O
;	O
}	O
int	O
lsodes_	(*(long),*(double),*(double),*(double),*(long),*(double),*(double),*(long),*(long),*(long),*(double),*(long),*(long),*(long),*(long))->(int)
(	O
long	O
*	O
neq	*(long)
,	O
double	O
*	O
y	*(double)
,	O
double	O
*	O
t	*(double)
,	O
double	O
*	O
tout	O
,	O
long	O
*	O
itol	long
,	O
double	O
*	O
rtol	O
,	O
double	O
*	O
atol	(*(char))->(long)
,	O
long	O
*	O
itask	long
,	O
long	O
*	O
istate	O
,	O
long	O
*	O
iopt	long
,	O
double	O
*	O
rwork	*(double)
,	O
long	O
*	O
lrw	long
,	O
long	O
*	O
iwork	*(long)
,	O
long	O
*	O
liw	long
,	O
long	O
*	O
mf	O
)	O
{	O
static	O
long	O
mord	O
[	O
2	int
]	O
=	O
{	O
12	int
,	O
5	int
}	O
;	O
static	O
long	O
mxstp0	O
=	O
500	int
;	O
static	O
long	O
mxhnl0	O
=	O
10	int
;	O
long	O
i__1	O
,	O
i__2	O
;	O
double	O
d__1	O
,	O
d__2	O
;	O
long	O
irem	O
,	O
imax	O
,	O
imul	O
,	O
ipgo	O
,	O
lyhd	O
;	O
long	O
lyhn	O
;	O
double	O
ewti	O
,	O
hmax	O
,	O
size	O
;	O
long	O
ihit	O
=	O
1	int
;	O
long	O
i	O
,	O
j	O
,	O
iflag	O
,	O
leniw	O
,	O
imxer	O
,	O
lenrw	O
,	O
i1	O
,	O
i2	O
,	O
lrtem	O
,	O
lwtem	O
,	O
ncolm	O
;	O
double	O
atoli	O
,	O
h0	O
,	O
rtoli	O
,	O
tcrit	O
=	O
0	int
,	O
tdist	O
,	O
tnext	O
,	O
tolsf	O
,	O
w0	O
;	O
double	O
rh	O
;	O
long	O
ipflag	O
;	O
double	O
tp	O
;	O
long	O
lf0	O
,	O
lenyht	O
,	O
mf1	O
;	O
double	O
big	O
;	O
long	O
lia	O
,	O
lja	O
,	O
kgo	O
;	O
double	O
ayi	O
,	O
hmx	O
,	O
tol	O
,	O
sum	O
;	O
long	O
lenrat	O
;	O
lenrat	O
=	O
sizeof	O
(	O
double	O
)	O
/	O
sizeof	O
(	O
long	O
)	O
;	O
if	O
(	O
lenrat	O
<	O
1	int
)	O
lenrat	O
=	O
1	int
;	O
--	O
iwork	*(long)
;	O
--	O
rwork	*(double)
;	O
--	O
atol	(*(char))->(long)
;	O
--	O
rtol	O
;	O
--	O
y	*(double)
;	O
--	O
neq	*(long)
;	O
if	O
(	O
*	O
istate	O
<	O
1	int
||	O
*	O
istate	O
>	O
3	int
)	O
goto	O
L601	O
;	O
if	O
(	O
*	O
itask	long
<	O
1	int
||	O
*	O
itask	long
>	O
5	int
)	O
goto	O
L602	O
;	O
if	O
(	O
*	O
istate	O
==	O
1	int
)	O
goto	O
L10	O
;	O
if	O
(	O
init	O
==	O
0	int
)	O
goto	O
L603	O
;	O
if	O
(	O
*	O
istate	O
==	O
2	int
)	O
goto	O
L200	O
;	O
goto	O
L20	O
;	O
L10	O
:	O
init	O
=	O
0	int
;	O
if	O
(	O
*	O
tout	O
==	O
*	O
t	*(double)
)	O
goto	O
L430	O
;	O
L20	O
:	O
ntrep	O
=	O
0	int
;	O
if	O
(	O
neq	*(long)
[	O
1	int
]	O
<=	O
0	int
)	O
goto	O
L604	O
;	O
if	O
(	O
*	O
istate	O
==	O
1	int
)	O
goto	O
L25	O
;	O
if	O
(	O
neq	*(long)
[	O
1	int
]	O
>	O
n	*(long)
)	O
goto	O
L605	O
;	O
L25	O
:	O
n	*(long)
=	O
neq	*(long)
[	O
1	int
]	O
;	O
if	O
(	O
*	O
itol	long
<	O
1	int
||	O
*	O
itol	long
>	O
4	int
)	O
goto	O
L606	O
;	O
if	O
(	O
*	O
iopt	long
<	O
0	int
||	O
*	O
iopt	long
>	O
1	int
)	O
goto	O
L607	O
;	O
moss	O
=	O
*	O
mf	O
/	O
100	int
;	O
mf1	O
=	O
*	O
mf	O
-	O
moss	O
*	O
100	int
;	O
meth	*(long)
=	O
mf1	O
/	O
10	int
;	O
miter	O
=	O
mf1	O
-	O
meth	*(long)
*	O
10	int
;	O
if	O
(	O
moss	O
<	O
0	int
||	O
moss	O
>	O
2	int
)	O
goto	O
L608	O
;	O
if	O
(	O
meth	*(long)
<	O
1	int
||	O
meth	*(long)
>	O
2	int
)	O
goto	O
L608	O
;	O
if	O
(	O
miter	O
<	O
0	int
||	O
miter	O
>	O
3	int
)	O
goto	O
L608	O
;	O
if	O
(	O
miter	O
==	O
0	int
||	O
miter	O
==	O
3	int
)	O
moss	O
=	O
0	int
;	O
if	O
(	O
*	O
iopt	long
==	O
1	int
)	O
goto	O
L40	O
;	O
maxord	O
=	O
mord	O
[	O
meth	*(long)
-	O
1	int
]	O
;	O
mxstep	O
=	O
mxstp0	O
;	O
mxhnil	O
=	O
mxhnl0	O
;	O
if	O
(	O
*	O
istate	O
==	O
1	int
)	O
h0	O
=	O
0.0	int
;	O
hmxi	O
=	O
0.0	int
;	O
hmin	O
=	O
0.0	int
;	O
seth	O
=	O
0.0	int
;	O
goto	O
L60	O
;	O
L40	O
:	O
maxord	O
=	O
iwork	*(long)
[	O
5	int
]	O
;	O
if	O
(	O
maxord	O
<	O
0	int
)	O
goto	O
L611	O
;	O
if	O
(	O
maxord	O
==	O
0	int
)	O
maxord	O
=	O
100	int
;	O
maxord	O
=	O
mymin	O
(	O
maxord	O
,	O
mord	O
[	O
meth	*(long)
-	O
1	int
]	O
)	O
;	O
mxstep	O
=	O
iwork	*(long)
[	O
6	int
]	O
;	O
if	O
(	O
mxstep	O
<	O
0	int
)	O
goto	O
L612	O
;	O
if	O
(	O
mxstep	O
==	O
0	int
)	O
mxstep	O
=	O
mxstp0	O
;	O
mxhnil	O
=	O
iwork	*(long)
[	O
7	int
]	O
;	O
if	O
(	O
mxhnil	O
<	O
0	int
)	O
goto	O
L613	O
;	O
if	O
(	O
mxhnil	O
==	O
0	int
)	O
mxhnil	O
=	O
mxhnl0	O
;	O
if	O
(	O
*	O
istate	O
!=	O
1	int
)	O
goto	O
L50	O
;	O
h0	O
=	O
rwork	*(double)
[	O
5	int
]	O
;	O
if	O
(	O
(	O
*	O
tout	O
-	O
*	O
t	*(double)
)	O
*	O
h0	O
<	O
0.	int
)	O
goto	O
L614	O
;	O
L50	O
:	O
hmax	O
=	O
rwork	*(double)
[	O
6	int
]	O
;	O
if	O
(	O
hmax	O
<	O
0.	int
)	O
goto	O
L615	O
;	O
hmxi	O
=	O
0.	int
;	O
if	O
(	O
hmax	O
>	O
0.	int
)	O
hmxi	O
=	O
1.0	int
/	O
hmax	O
;	O
hmin	O
=	O
rwork	*(double)
[	O
7	int
]	O
;	O
if	O
(	O
hmin	O
<	O
0.	int
)	O
goto	O
L616	O
;	O
seth	O
=	O
rwork	*(double)
[	O
8	int
]	O
;	O
if	O
(	O
seth	O
<	O
0.	int
)	O
goto	O
L609	O
;	O
L60	O
:	O
rtoli	O
=	O
rtol	O
[	O
1	int
]	O
;	O
atoli	O
=	O
atol	(*(char))->(long)
[	O
1	int
]	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
if	O
(	O
*	O
itol	long
>=	O
3	int
)	O
rtoli	O
=	O
rtol	O
[	O
i	O
]	O
;	O
if	O
(	O
*	O
itol	long
==	O
2	int
||	O
*	O
itol	long
==	O
4	int
)	O
atoli	O
=	O
atol	(*(char))->(long)
[	O
i	O
]	O
;	O
if	O
(	O
rtoli	O
<	O
0.	int
)	O
goto	O
L619	O
;	O
if	O
(	O
atoli	O
<	O
0.	int
)	O
goto	O
L620	O
;	O
}	O
lrat	O
=	O
lenrat	O
;	O
if	O
(	O
*	O
istate	O
==	O
1	int
)	O
nyh	O
=	O
n	*(long)
;	O
lwmin	O
=	O
0	int
;	O
if	O
(	O
miter	O
==	O
1	int
)	O
lwmin	O
=	O
(	O
n	*(long)
<<	O
2	int
)	O
+	O
n	*(long)
*	O
10	int
/	O
(	O
double	O
)	O
lrat	O
;	O
if	O
(	O
miter	O
==	O
2	int
)	O
lwmin	O
=	O
(	O
n	*(long)
<<	O
2	int
)	O
+	O
n	*(long)
*	O
11	int
/	O
(	O
double	O
)	O
lrat	O
;	O
if	O
(	O
miter	O
==	O
3	int
)	O
lwmin	O
=	O
n	*(long)
+	O
2	int
;	O
lenyh	O
=	O
(	O
maxord	O
+	O
1	int
)	O
*	O
nyh	O
;	O
lrest	O
=	O
lenyh	O
+	O
n	*(long)
*	O
3	int
;	O
lenrw	O
=	O
lwmin	O
+	O
20	int
+	O
lrest	O
;	O
iwork	*(long)
[	O
17	int
]	O
=	O
lenrw	O
;	O
leniw	O
=	O
30	int
;	O
if	O
(	O
moss	O
==	O
0	int
&&	O
miter	O
!=	O
0	int
&&	O
miter	O
!=	O
3	int
)	O
leniw	O
=	O
leniw	O
+	O
n	*(long)
+	O
1	int
;	O
iwork	*(long)
[	O
18	int
]	O
=	O
leniw	O
;	O
if	O
(	O
lenrw	O
>	O
*	O
lrw	long
)	O
goto	O
L617	O
;	O
if	O
(	O
leniw	O
>	O
*	O
liw	long
)	O
goto	O
L618	O
;	O
lia	O
=	O
31	int
;	O
if	O
(	O
moss	O
==	O
0	int
&&	O
miter	O
!=	O
0	int
&&	O
miter	O
!=	O
3	int
)	O
leniw	O
=	O
leniw	O
+	O
iwork	*(long)
[	O
lia	O
+	O
n	*(long)
]	O
-	O
1	int
;	O
iwork	*(long)
[	O
18	int
]	O
=	O
leniw	O
;	O
if	O
(	O
leniw	O
>	O
*	O
liw	long
)	O
goto	O
L618	O
;	O
lja	O
=	O
lia	O
+	O
n	*(long)
+	O
1	int
;	O
lia	O
=	O
mymin	O
(	O
lia	O
,	O
*	O
liw	long
)	O
;	O
lja	O
=	O
mymin	O
(	O
lja	O
,	O
*	O
liw	long
)	O
;	O
lwm	O
=	O
21	int
;	O
if	O
(	O
*	O
istate	O
==	O
1	int
)	O
nq	O
=	O
1	int
;	O
i__1	O
=	O
nq	O
+	O
1	int
;	O
i__2	O
=	O
maxord	O
+	O
2	int
;	O
ncolm	O
=	O
mymin	O
(	O
i__1	O
,	O
i__2	O
)	O
;	O
lenyhm	O
=	O
ncolm	O
*	O
nyh	O
;	O
lenyht	O
=	O
lenyh	O
;	O
if	O
(	O
miter	O
==	O
1	int
||	O
miter	O
==	O
2	int
)	O
lenyht	O
=	O
lenyhm	O
;	O
imul	O
=	O
2	int
;	O
if	O
(	O
*	O
istate	O
==	O
3	int
)	O
imul	O
=	O
moss	O
;	O
if	O
(	O
moss	O
==	O
2	int
)	O
imul	O
=	O
3	int
;	O
lrtem	O
=	O
lenyht	O
+	O
imul	O
*	O
n	*(long)
;	O
lwtem	O
=	O
lwmin	O
;	O
if	O
(	O
miter	O
==	O
1	int
||	O
miter	O
==	O
2	int
)	O
lwtem	O
=	O
*	O
lrw	long
-	O
20	int
-	O
lrtem	O
;	O
lenwk	O
=	O
lwtem	O
;	O
lyhn	O
=	O
lwm	O
+	O
lwtem	O
;	O
lsavf	O
=	O
lyhn	O
+	O
lenyht	O
;	O
lewt	O
=	O
lsavf	O
+	O
n	*(long)
;	O
lacor	O
=	O
lewt	O
+	O
n	*(long)
;	O
istatc	O
=	O
*	O
istate	O
;	O
if	O
(	O
*	O
istate	O
==	O
1	int
)	O
goto	O
L100	O
;	O
lyhd	O
=	O
lyh	O
-	O
lyhn	O
;	O
imax	O
=	O
lyhn	O
-	O
1	int
+	O
lenyhm	O
;	O
if	O
(	O
lyhd	O
<	O
0	int
)	O
goto	O
L70	O
;	O
else	O
if	O
(	O
lyhd	O
==	O
0	int
)	O
goto	O
L80	O
;	O
else	O
goto	O
L74	O
;	O
L70	O
:	O
i__1	O
=	O
imax	O
;	O
for	O
(	O
i	O
=	O
lyhn	O
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
j	O
=	O
imax	O
+	O
lyhn	O
-	O
i	O
;	O
rwork	*(double)
[	O
j	O
]	O
=	O
rwork	*(double)
[	O
j	O
+	O
lyhd	O
]	O
;	O
}	O
goto	O
L80	O
;	O
L74	O
:	O
i__1	O
=	O
imax	O
;	O
for	O
(	O
i	O
=	O
lyhn	O
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
rwork	*(double)
[	O
i	O
]	O
=	O
rwork	*(double)
[	O
i	O
+	O
lyhd	O
]	O
;	O
L80	O
:	O
lyh	O
=	O
lyhn	O
;	O
iwork	*(long)
[	O
22	int
]	O
=	O
lyh	O
;	O
if	O
(	O
miter	O
==	O
0	int
||	O
miter	O
==	O
3	int
)	O
goto	O
L92	O
;	O
if	O
(	O
moss	O
!=	O
2	int
)	O
goto	O
L85	O
;	O
ewset_	(*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
&	O
n	*(long)
,	O
itol	long
,	O
&	O
rtol	O
[	O
1	int
]	O
,	O
&	O
atol	(*(char))->(long)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
)	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
if	O
(	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
<=	O
0.	int
)	O
goto	O
L621	O
;	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
=	O
1.	int
/	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
;	O
}	O
L85	O
:	O
lsavf	O
=	O
mymin	O
(	O
lsavf	O
,	O
*	O
lrw	long
)	O
;	O
lewt	O
=	O
mymin	O
(	O
lewt	O
,	O
*	O
lrw	long
)	O
;	O
lacor	O
=	O
mymin	O
(	O
lacor	O
,	O
*	O
lrw	long
)	O
;	O
iprep_	(*(long),*(double),*(double),*(long),*(long),*(long))->(int)
(	O
&	O
neq	*(long)
[	O
1	int
]	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
1	int
]	O
,	O
&	O
iwork	*(long)
[	O
lia	O
]	O
,	O
&	O
iwork	*(long)
[	O
lja	O
]	O
,	O
&	O
ipflag	O
)	O
;	O
lenrw	O
=	O
lwm	O
-	O
1	int
+	O
lenwk	O
+	O
lrest	O
;	O
iwork	*(long)
[	O
17	int
]	O
=	O
lenrw	O
;	O
if	O
(	O
ipflag	O
!=	O
-	O
1	int
)	O
iwork	*(long)
[	O
23	int
]	O
=	O
ipian	O
;	O
if	O
(	O
ipflag	O
!=	O
-	O
1	int
)	O
iwork	*(long)
[	O
24	int
]	O
=	O
ipjan	O
;	O
ipgo	O
=	O
-	O
ipflag	O
+	O
1	int
;	O
switch	O
(	O
ipgo	O
)	O
{	O
case	O
1	int
:	O
goto	O
L90	O
;	O
case	O
2	int
:	O
goto	O
L628	O
;	O
case	O
3	int
:	O
goto	O
L629	O
;	O
case	O
4	int
:	O
goto	O
L630	O
;	O
case	O
5	int
:	O
goto	O
L631	O
;	O
case	O
6	int
:	O
goto	O
L632	O
;	O
case	O
7	int
:	O
goto	O
L633	O
;	O
}	O
L90	O
:	O
iwork	*(long)
[	O
22	int
]	O
=	O
lyh	O
;	O
if	O
(	O
lenrw	O
>	O
*	O
lrw	long
)	O
goto	O
L617	O
;	O
L92	O
:	O
jstart	O
=	O
-	O
1	int
;	O
if	O
(	O
n	*(long)
==	O
nyh	O
)	O
goto	O
L200	O
;	O
i1	O
=	O
lyh	O
+	O
l	*(long)
*	O
nyh	O
;	O
i2	O
=	O
lyh	O
+	O
(	O
maxord	O
+	O
1	int
)	O
*	O
nyh	O
-	O
1	int
;	O
if	O
(	O
i1	O
>	O
i2	O
)	O
goto	O
L200	O
;	O
i__1	O
=	O
i2	O
;	O
for	O
(	O
i	O
=	O
i1	O
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
rwork	*(double)
[	O
i	O
]	O
=	O
0.0	int
;	O
goto	O
L200	O
;	O
L100	O
:	O
lyh	O
=	O
lyhn	O
;	O
iwork	*(long)
[	O
22	int
]	O
=	O
lyh	O
;	O
tn	O
=	O
*	O
t	*(double)
;	O
nst	O
=	O
0	int
;	O
h	O
=	O
1.0	int
;	O
nnz	O
=	O
0	int
;	O
ngp	O
=	O
0	int
;	O
nzl	O
=	O
0	int
;	O
nzu	O
=	O
0	int
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
rwork	*(double)
[	O
i	O
+	O
lyh	O
-	O
1	int
]	O
=	O
y	*(double)
[	O
i	O
]	O
;	O
lf0	O
=	O
lyh	O
+	O
nyh	O
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
lf0	O
]	O
,	O
t	*(double)
)	O
;	O
nfe	O
=	O
1	int
;	O
ewset_	(*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
&	O
n	*(long)
,	O
itol	long
,	O
&	O
rtol	O
[	O
1	int
]	O
,	O
&	O
atol	(*(char))->(long)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
)	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
if	O
(	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
<=	O
0.	int
)	O
goto	O
L621	O
;	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
=	O
1.	int
/	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
;	O
}	O
if	O
(	O
miter	O
==	O
0	int
||	O
miter	O
==	O
3	int
)	O
goto	O
L120	O
;	O
lacor	O
=	O
mymin	O
(	O
lacor	O
,	O
*	O
lrw	long
)	O
;	O
iprep_	(*(long),*(double),*(double),*(long),*(long),*(long))->(int)
(	O
&	O
neq	*(long)
[	O
1	int
]	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
1	int
]	O
,	O
&	O
iwork	*(long)
[	O
lia	O
]	O
,	O
&	O
iwork	*(long)
[	O
lja	O
]	O
,	O
&	O
ipflag	O
)	O
;	O
lenrw	O
=	O
lwm	O
-	O
1	int
+	O
lenwk	O
+	O
lrest	O
;	O
iwork	*(long)
[	O
17	int
]	O
=	O
lenrw	O
;	O
if	O
(	O
ipflag	O
!=	O
-	O
1	int
)	O
iwork	*(long)
[	O
23	int
]	O
=	O
ipian	O
;	O
if	O
(	O
ipflag	O
!=	O
-	O
1	int
)	O
iwork	*(long)
[	O
24	int
]	O
=	O
ipjan	O
;	O
ipgo	O
=	O
-	O
ipflag	O
+	O
1	int
;	O
switch	O
(	O
ipgo	O
)	O
{	O
case	O
1	int
:	O
goto	O
L115	O
;	O
case	O
2	int
:	O
goto	O
L628	O
;	O
case	O
3	int
:	O
goto	O
L629	O
;	O
case	O
4	int
:	O
goto	O
L630	O
;	O
case	O
5	int
:	O
goto	O
L631	O
;	O
case	O
6	int
:	O
goto	O
L632	O
;	O
case	O
7	int
:	O
goto	O
L633	O
;	O
}	O
L115	O
:	O
iwork	*(long)
[	O
22	int
]	O
=	O
lyh	O
;	O
if	O
(	O
lenrw	O
>	O
*	O
lrw	long
)	O
goto	O
L617	O
;	O
L120	O
:	O
if	O
(	O
*	O
itask	long
!=	O
4	int
&&	O
*	O
itask	long
!=	O
5	int
)	O
goto	O
L125	O
;	O
tcrit	O
=	O
rwork	*(double)
[	O
1	int
]	O
;	O
if	O
(	O
(	O
tcrit	O
-	O
*	O
tout	O
)	O
*	O
(	O
*	O
tout	O
-	O
*	O
t	*(double)
)	O
<	O
0.	int
)	O
goto	O
L625	O
;	O
if	O
(	O
h0	O
!=	O
0.	int
&&	O
(	O
*	O
t	*(double)
+	O
h0	O
-	O
tcrit	O
)	O
*	O
h0	O
>	O
0.0	int
)	O
h0	O
=	O
tcrit	O
-	O
*	O
t	*(double)
;	O
L125	O
:	O
uround	O
=	O
DBL_EPSILON	O
;	O
jstart	O
=	O
0	int
;	O
if	O
(	O
miter	O
!=	O
0	int
)	O
rwork	*(double)
[	O
lwm	O
]	O
=	O
sqrt	(double)->(double)
(	O
(	O
double	O
)	O
uround	O
)	O
;	O
msbj	O
=	O
50	int
;	O
nslj	O
=	O
0	int
;	O
ccmxj	O
=	O
0.2	int
;	O
psmall	O
=	O
uround	O
*	O
1e3	int
;	O
rbig	O
=	O
0.01	int
/	O
psmall	O
;	O
nhnil	O
=	O
0	int
;	O
nje	O
=	O
0	int
;	O
nlu	O
=	O
0	int
;	O
nslast	O
=	O
0	int
;	O
hu	O
=	O
0.0	int
;	O
nqu	O
=	O
0	int
;	O
ccmax	O
=	O
0.3	int
;	O
maxcor	O
=	O
3	int
;	O
msbp	O
=	O
20	int
;	O
mxncf	O
=	O
10	int
;	O
lf0	O
=	O
lyh	O
+	O
nyh	O
;	O
if	O
(	O
h0	O
!=	O
0.	int
)	O
goto	O
L180	O
;	O
tdist	O
=	O
fabs	(double)->(double)
(	O
*	O
tout	O
-	O
*	O
t	*(double)
)	O
;	O
w0	O
=	O
mymax	O
(	O
fabs	(double)->(double)
(	O
*	O
t	*(double)
)	O
,	O
fabs	(double)->(double)
(	O
*	O
tout	O
)	O
)	O
;	O
if	O
(	O
tdist	O
<	O
uround	O
*	O
2.0	int
*	O
w0	O
)	O
goto	O
L622	O
;	O
tol	O
=	O
rtol	O
[	O
1	int
]	O
;	O
if	O
(	O
*	O
itol	long
<=	O
2	int
)	O
goto	O
L140	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
d__1	O
=	O
tol	O
,	O
d__2	O
=	O
rtol	O
[	O
i	O
]	O
;	O
tol	O
=	O
mymax	O
(	O
d__1	O
,	O
d__2	O
)	O
;	O
}	O
L140	O
:	O
if	O
(	O
tol	O
>	O
0.	int
)	O
goto	O
L160	O
;	O
atoli	O
=	O
atol	(*(char))->(long)
[	O
1	int
]	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
if	O
(	O
*	O
itol	long
==	O
2	int
||	O
*	O
itol	long
==	O
4	int
)	O
atoli	O
=	O
atol	(*(char))->(long)
[	O
i	O
]	O
;	O
ayi	O
=	O
fabs	(double)->(double)
(	O
y	*(double)
[	O
i	O
]	O
)	O
;	O
if	O
(	O
ayi	O
!=	O
0.0	int
)	O
{	O
d__1	O
=	O
tol	O
,	O
d__2	O
=	O
atoli	O
/	O
ayi	O
;	O
tol	O
=	O
mymax	O
(	O
d__1	O
,	O
d__2	O
)	O
;	O
}	O
}	O
L160	O
:	O
d__1	O
=	O
tol	O
;	O
d__2	O
=	O
uround	O
*	O
100.	int
;	O
tol	O
=	O
mymax	O
(	O
d__1	O
,	O
d__2	O
)	O
;	O
tol	O
=	O
mymin	O
(	O
tol	O
,	O
0.001	int
)	O
;	O
sum	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
rwork	*(double)
[	O
lf0	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
)	O
;	O
d__1	O
=	O
sum	O
;	O
sum	O
=	O
1.0	int
/	O
(	O
tol	O
*	O
w0	O
*	O
w0	O
)	O
+	O
tol	O
*	O
(	O
d__1	O
*	O
d__1	O
)	O
;	O
h0	O
=	O
1.0	int
/	O
sqrt	(double)->(double)
(	O
(	O
double	O
)	O
sum	O
)	O
;	O
h0	O
=	O
mymin	O
(	O
h0	O
,	O
tdist	O
)	O
;	O
d__1	O
=	O
*	O
tout	O
-	O
*	O
t	*(double)
;	O
h0	O
=	O
d_sign	(*(double),*(double))->(double)
(	O
&	O
h0	O
,	O
&	O
d__1	O
)	O
;	O
L180	O
:	O
rh	O
=	O
fabs	(double)->(double)
(	O
h0	O
)	O
*	O
hmxi	O
;	O
if	O
(	O
rh	O
>	O
1.0	int
)	O
h0	O
/=	O
rh	O
;	O
h	O
=	O
h0	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
rwork	*(double)
[	O
i	O
+	O
lf0	O
-	O
1	int
]	O
=	O
h0	O
*	O
rwork	*(double)
[	O
i	O
+	O
lf0	O
-	O
1	int
]	O
;	O
goto	O
L270	O
;	O
L200	O
:	O
nslast	O
=	O
nst	O
;	O
switch	O
(	O
*	O
itask	long
)	O
{	O
case	O
1	int
:	O
goto	O
L210	O
;	O
case	O
2	int
:	O
goto	O
L250	O
;	O
case	O
3	int
:	O
goto	O
L220	O
;	O
case	O
4	int
:	O
goto	O
L230	O
;	O
case	O
5	int
:	O
goto	O
L240	O
;	O
}	O
L210	O
:	O
if	O
(	O
(	O
tn	O
-	O
*	O
tout	O
)	O
*	O
h	O
<	O
0.0	int
)	O
goto	O
L250	O
;	O
intdy_	(*(double),long,*(double),*(long),*(double),*(long))->(int)
(	O
tout	O
,	O
0	int
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
nyh	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
iflag	O
)	O
;	O
if	O
(	O
iflag	O
!=	O
0	int
)	O
goto	O
L627	O
;	O
*	O
t	*(double)
=	O
*	O
tout	O
;	O
goto	O
L420	O
;	O
L220	O
:	O
tp	O
=	O
tn	O
-	O
hu	O
*	O
(	O
uround	O
*	O
100.0	int
+	O
1.	int
)	O
;	O
if	O
(	O
(	O
tp	O
-	O
*	O
tout	O
)	O
*	O
h	O
>	O
0.0	int
)	O
goto	O
L623	O
;	O
if	O
(	O
(	O
tn	O
-	O
*	O
tout	O
)	O
*	O
h	O
<	O
0.0	int
)	O
goto	O
L250	O
;	O
goto	O
L400	O
;	O
L230	O
:	O
tcrit	O
=	O
rwork	*(double)
[	O
1	int
]	O
;	O
if	O
(	O
(	O
tn	O
-	O
tcrit	O
)	O
*	O
h	O
>	O
0.0	int
)	O
goto	O
L624	O
;	O
if	O
(	O
(	O
tcrit	O
-	O
*	O
tout	O
)	O
*	O
h	O
<	O
0.0	int
)	O
goto	O
L625	O
;	O
if	O
(	O
(	O
tn	O
-	O
*	O
tout	O
)	O
*	O
h	O
<	O
0.0	int
)	O
goto	O
L245	O
;	O
intdy_	(*(double),long,*(double),*(long),*(double),*(long))->(int)
(	O
tout	O
,	O
0	int
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
nyh	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
iflag	O
)	O
;	O
if	O
(	O
iflag	O
!=	O
0	int
)	O
goto	O
L627	O
;	O
*	O
t	*(double)
=	O
*	O
tout	O
;	O
goto	O
L420	O
;	O
L240	O
:	O
tcrit	O
=	O
rwork	*(double)
[	O
1	int
]	O
;	O
if	O
(	O
(	O
tn	O
-	O
tcrit	O
)	O
*	O
h	O
>	O
0.0	int
)	O
goto	O
L624	O
;	O
L245	O
:	O
hmx	O
=	O
fabs	(double)->(double)
(	O
tn	O
)	O
+	O
fabs	(double)->(double)
(	O
h	O
)	O
;	O
ihit	O
=	O
fabs	(double)->(double)
(	O
tn	O
-	O
tcrit	O
)	O
<=	O
uround	O
*	O
100.0	int
*	O
hmx	O
;	O
if	O
(	O
ihit	O
)	O
goto	O
L400	O
;	O
tnext	O
=	O
tn	O
+	O
h	O
*	O
(	O
uround	O
*	O
4.0	int
+	O
1.0	int
)	O
;	O
if	O
(	O
(	O
tnext	O
-	O
tcrit	O
)	O
*	O
h	O
<=	O
0.0	int
)	O
goto	O
L250	O
;	O
h	O
=	O
(	O
tcrit	O
-	O
tn	O
)	O
*	O
(	O
1.0	int
-	O
uround	O
*	O
4.0	int
)	O
;	O
if	O
(	O
*	O
istate	O
==	O
2	int
)	O
jstart	O
=	O
-	O
2	int
;	O
L250	O
:	O
if	O
(	O
nst	O
-	O
nslast	O
>=	O
mxstep	O
)	O
goto	O
L500	O
;	O
ewset_	(*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
&	O
n	*(long)
,	O
itol	long
,	O
&	O
rtol	O
[	O
1	int
]	O
,	O
&	O
atol	(*(char))->(long)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
)	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
if	O
(	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
<=	O
0.	int
)	O
goto	O
L510	O
;	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
=	O
1.	int
/	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
;	O
}	O
L270	O
:	O
tolsf	O
=	O
uround	O
*	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
)	O
;	O
if	O
(	O
tolsf	O
<=	O
1.	int
)	O
goto	O
L280	O
;	O
tolsf	O
*=	O
2.	int
;	O
if	O
(	O
nst	O
==	O
0	int
)	O
goto	O
L626	O
;	O
goto	O
L520	O
;	O
L280	O
:	O
if	O
(	O
tn	O
+	O
h	O
!=	O
tn	O
)	O
goto	O
L290	O
;	O
++	O
nhnil	O
;	O
if	O
(	O
nhnil	O
>	O
mxhnil	O
)	O
goto	O
L290	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- warning..internal t (=r1) and h (=r2) are"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         such that in the machine, t + h = t on the next step  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         (h = step size). solver will continue anyway"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	O
,	O
h	O
)	O
;	O
if	O
(	O
nhnil	O
<	O
mxhnil	O
)	O
goto	O
L290	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- above warning has been issued i1 times.  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         it will not be issued again for this problem"	*(char)
,	O
0	int
,	O
1	int
,	O
mxhnil	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
L290	O
:	O
if	O
(	O
bDelays	O
)	O
StoreDelayed	O
(	O
tn	O
)	O
;	O
DoStep_by_Step	O
(	O
)	O
;	O
stode_	(*(long),*(double),*(double),*(long),*(double),*(double),*(double),*(double),*(double),*(long))->(int)
(	O
&	O
neq	*(long)
[	O
0	int
]	O
,	O
&	O
y	*(double)
[	O
0	int
]	O
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
nyh	O
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
,	O
&	O
rwork	*(double)
[	O
lsavf	O
]	O
,	O
&	O
rwork	*(double)
[	O
lacor	O
]	O
,	O
&	O
rwork	*(double)
[	O
lwm	O
]	O
,	O
(	O
long	O
*	O
)	O
&	O
rwork	*(double)
[	O
lwm	O
]	O
)	O
;	O
kgo	O
=	O
1	int
-	O
kflag	O
;	O
switch	O
(	O
kgo	O
)	O
{	O
case	O
1	int
:	O
goto	O
L300	O
;	O
case	O
2	int
:	O
goto	O
L530	O
;	O
case	O
3	int
:	O
goto	O
L540	O
;	O
case	O
4	int
:	O
goto	O
L550	O
;	O
}	O
L300	O
:	O
init	O
=	O
1	int
;	O
switch	O
(	O
*	O
itask	long
)	O
{	O
case	O
1	int
:	O
goto	O
L310	O
;	O
case	O
2	int
:	O
goto	O
L400	O
;	O
case	O
3	int
:	O
goto	O
L330	O
;	O
case	O
4	int
:	O
goto	O
L340	O
;	O
case	O
5	int
:	O
goto	O
L350	O
;	O
}	O
L310	O
:	O
if	O
(	O
(	O
tn	O
-	O
*	O
tout	O
)	O
*	O
h	O
<	O
0.0	int
)	O
goto	O
L250	O
;	O
intdy_	(*(double),long,*(double),*(long),*(double),*(long))->(int)
(	O
tout	O
,	O
0	int
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
nyh	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
iflag	O
)	O
;	O
*	O
t	*(double)
=	O
*	O
tout	O
;	O
goto	O
L420	O
;	O
L330	O
:	O
if	O
(	O
(	O
tn	O
-	O
*	O
tout	O
)	O
*	O
h	O
>=	O
0.0	int
)	O
goto	O
L400	O
;	O
goto	O
L250	O
;	O
L340	O
:	O
if	O
(	O
(	O
tn	O
-	O
*	O
tout	O
)	O
*	O
h	O
<	O
0.0	int
)	O
goto	O
L345	O
;	O
intdy_	(*(double),long,*(double),*(long),*(double),*(long))->(int)
(	O
tout	O
,	O
0	int
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
nyh	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
iflag	O
)	O
;	O
*	O
t	*(double)
=	O
*	O
tout	O
;	O
goto	O
L420	O
;	O
L345	O
:	O
hmx	O
=	O
fabs	(double)->(double)
(	O
tn	O
)	O
+	O
fabs	(double)->(double)
(	O
h	O
)	O
;	O
ihit	O
=	O
fabs	(double)->(double)
(	O
tn	O
-	O
tcrit	O
)	O
<=	O
uround	O
*	O
100.0	int
*	O
hmx	O
;	O
if	O
(	O
ihit	O
)	O
goto	O
L400	O
;	O
tnext	O
=	O
tn	O
+	O
h	O
*	O
(	O
uround	O
*	O
4.0	int
+	O
1.0	int
)	O
;	O
if	O
(	O
(	O
tnext	O
-	O
tcrit	O
)	O
*	O
h	O
<=	O
0.0	int
)	O
goto	O
L250	O
;	O
h	O
=	O
(	O
tcrit	O
-	O
tn	O
)	O
*	O
(	O
1.0	int
-	O
uround	O
*	O
4.0	int
)	O
;	O
jstart	O
=	O
-	O
2	int
;	O
goto	O
L250	O
;	O
L350	O
:	O
hmx	O
=	O
fabs	(double)->(double)
(	O
tn	O
)	O
+	O
fabs	(double)->(double)
(	O
h	O
)	O
;	O
ihit	O
=	O
fabs	(double)->(double)
(	O
tn	O
-	O
tcrit	O
)	O
<=	O
uround	O
*	O
100.0	int
*	O
hmx	O
;	O
L400	O
:	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
rwork	*(double)
[	O
i	O
+	O
lyh	O
-	O
1	int
]	O
;	O
*	O
t	*(double)
=	O
tn	O
;	O
if	O
(	O
*	O
itask	long
!=	O
4	int
&&	O
*	O
itask	long
!=	O
5	int
)	O
goto	O
L420	O
;	O
if	O
(	O
ihit	O
)	O
*	O
t	*(double)
=	O
tcrit	O
;	O
L420	O
:	O
*	O
istate	O
=	O
2	int
;	O
illin	O
=	O
0	int
;	O
rwork	*(double)
[	O
11	int
]	O
=	O
hu	O
;	O
rwork	*(double)
[	O
12	int
]	O
=	O
h	O
;	O
rwork	*(double)
[	O
13	int
]	O
=	O
tn	O
;	O
iwork	*(long)
[	O
11	int
]	O
=	O
nst	O
;	O
iwork	*(long)
[	O
12	int
]	O
=	O
nfe	O
;	O
iwork	*(long)
[	O
13	int
]	O
=	O
nje	O
;	O
iwork	*(long)
[	O
14	int
]	O
=	O
nqu	O
;	O
iwork	*(long)
[	O
15	int
]	O
=	O
nq	O
;	O
iwork	*(long)
[	O
19	int
]	O
=	O
nnz	O
;	O
iwork	*(long)
[	O
20	int
]	O
=	O
ngp	O
;	O
iwork	*(long)
[	O
21	int
]	O
=	O
nlu	O
;	O
iwork	*(long)
[	O
25	int
]	O
=	O
nzl	O
;	O
iwork	*(long)
[	O
26	int
]	O
=	O
nzu	O
;	O
return	O
0	int
;	O
L430	O
:	O
++	O
ntrep	O
;	O
if	O
(	O
ntrep	O
<	O
5	int
)	O
return	O
0	int
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- repeated calls with istate = 1 and tout = t (=r1)  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
*	O
t	*(double)
,	O
0.0	int
)	O
;	O
goto	O
L800	O
;	O
L500	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at current t (=r1), mxstep (=i1) steps   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         taken on this call before reaching tout     "	*(char)
,	O
0	int
,	O
1	int
,	O
mxstep	O
,	O
0	int
,	O
1	int
,	O
tn	O
,	O
0.0	int
)	O
;	O
*	O
istate	O
=	O
-	O
1	int
;	O
goto	O
L580	O
;	O
L510	O
:	O
ewti	O
=	O
rwork	*(double)
[	O
lewt	O
+	O
i	O
-	O
1	int
]	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at t (=r1), ewt(i1) has become r2 .le. 0."	*(char)
,	O
0	int
,	O
1	int
,	O
i	O
,	O
0	int
,	O
2	int
,	O
tn	O
,	O
ewti	O
)	O
;	O
*	O
istate	O
=	O
-	O
6	int
;	O
goto	O
L580	O
;	O
L520	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at t (=r1), too much accuracy requested  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         for precision of machine..  see tolsf (=r2) "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	O
,	O
tolsf	O
)	O
;	O
rwork	*(double)
[	O
14	int
]	O
=	O
tolsf	O
;	O
*	O
istate	O
=	O
-	O
2	int
;	O
goto	O
L580	O
;	O
L530	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at t(=r1) and step size h(=r2), the error"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         test failed repeatedly or with abs(h) = hmin"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	O
,	O
h	O
)	O
;	O
*	O
istate	O
=	O
-	O
4	int
;	O
goto	O
L560	O
;	O
L540	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at t (=r1) and step size h (=r2), the    "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         corrector convergence failed repeatedly     "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         or with abs(h) = hmin   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	O
,	O
h	O
)	O
;	O
*	O
istate	O
=	O
-	O
5	int
;	O
goto	O
L560	O
;	O
L550	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at t (=r1) and step size h (=r2), a fatal"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         error flag was returned by cdrv (by way of  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         subroutine prjs or slss)"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tn	O
,	O
h	O
)	O
;	O
*	O
istate	O
=	O
-	O
7	int
;	O
goto	O
L580	O
;	O
L560	O
:	O
big	O
=	O
0.	int
;	O
imxer	O
=	O
1	int
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
size	O
=	O
fabs	(double)->(double)
(	O
rwork	*(double)
[	O
i	O
+	O
lacor	O
-	O
1	int
]	O
*	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
)	O
;	O
if	O
(	O
big	O
>=	O
size	O
)	O
goto	O
L570	O
;	O
big	O
=	O
size	O
;	O
imxer	O
=	O
i	O
;	O
L570	O
:	O
;	O
}	O
iwork	*(long)
[	O
16	int
]	O
=	O
imxer	O
;	O
L580	O
:	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
rwork	*(double)
[	O
i	O
+	O
lyh	O
-	O
1	int
]	O
;	O
*	O
t	*(double)
=	O
tn	O
;	O
illin	O
=	O
0	int
;	O
rwork	*(double)
[	O
11	int
]	O
=	O
hu	O
;	O
rwork	*(double)
[	O
12	int
]	O
=	O
h	O
;	O
rwork	*(double)
[	O
13	int
]	O
=	O
tn	O
;	O
iwork	*(long)
[	O
11	int
]	O
=	O
nst	O
;	O
iwork	*(long)
[	O
12	int
]	O
=	O
nfe	O
;	O
iwork	*(long)
[	O
13	int
]	O
=	O
nje	O
;	O
iwork	*(long)
[	O
14	int
]	O
=	O
nqu	O
;	O
iwork	*(long)
[	O
15	int
]	O
=	O
nq	O
;	O
iwork	*(long)
[	O
19	int
]	O
=	O
nnz	O
;	O
iwork	*(long)
[	O
20	int
]	O
=	O
ngp	O
;	O
iwork	*(long)
[	O
21	int
]	O
=	O
nlu	O
;	O
iwork	*(long)
[	O
25	int
]	O
=	O
nzl	O
;	O
iwork	*(long)
[	O
26	int
]	O
=	O
nzu	O
;	O
return	O
0	int
;	O
L601	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- istate (=i1) illegal "	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
istate	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L602	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- itask (=i1) illegal  "	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
itask	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L603	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- istate .gt. 1 but lsodes not initialized "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L604	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- neq (=i1) .lt. 1     "	*(char)
,	O
0	int
,	O
1	int
,	O
neq	*(long)
[	O
1	int
]	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L605	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- istate = 3 and neq increased (i1 to i2)  "	*(char)
,	O
0	int
,	O
2	int
,	O
n	*(long)
,	O
neq	*(long)
[	O
1	int
]	O
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L606	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- itol (=i1) illegal   "	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
itol	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L607	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- iopt (=i1) illegal   "	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
iopt	long
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L608	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- mf (=i1) illegal     "	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
mf	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L609	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- seth (=r1) .lt. 0.0  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
seth	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L611	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- maxord (=i1) .lt. 0  "	*(char)
,	O
0	int
,	O
1	int
,	O
maxord	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L612	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- mxstep (=i1) .lt. 0  "	*(char)
,	O
0	int
,	O
1	int
,	O
mxstep	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L613	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- mxhnil (=i1) .lt. 0  "	*(char)
,	O
0	int
,	O
1	int
,	O
mxhnil	O
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L614	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- tout (=r1) behind t (=r2)      "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
*	O
tout	O
,	O
*	O
t	*(double)
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         integration direction is given by h0 (=r1)  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
h0	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L615	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- hmax (=r1) .lt. 0.0  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
hmax	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L616	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- hmin (=r1) .lt. 0.0  "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
hmin	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L617	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- rwork length is insufficient to proceed. "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	*(char)
,	O
0	int
,	O
2	int
,	O
lenrw	O
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L618	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- iwork length is insufficient to proceed. "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         length needed is .ge. leniw (=i1), exceeds liw (=i2)"	*(char)
,	O
0	int
,	O
2	int
,	O
leniw	O
,	O
*	O
liw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L619	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- rtol(i1) is r1 .lt. 0.0        "	*(char)
,	O
0	int
,	O
1	int
,	O
i	O
,	O
0	int
,	O
1	int
,	O
rtoli	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L620	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- atol(i1) is r1 .lt. 0.0        "	*(char)
,	O
0	int
,	O
1	int
,	O
i	O
,	O
0	int
,	O
1	int
,	O
atoli	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L621	O
:	O
ewti	O
=	O
rwork	*(double)
[	O
lewt	O
+	O
i	O
-	O
1	int
]	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- ewt(i1) is r1 .le. 0.0         "	*(char)
,	O
0	int
,	O
1	int
,	O
i	O
,	O
0	int
,	O
1	int
,	O
ewti	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L622	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- tout (=r1) too close to t(=r2) to start integration"	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
*	O
tout	O
,	O
*	O
t	*(double)
)	O
;	O
goto	O
L700	O
;	O
L623	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- itask = i1 and tout (=r1) behind tcur - hu (= r2)  "	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
itask	long
,	O
0	int
,	O
2	int
,	O
*	O
tout	O
,	O
tp	O
)	O
;	O
goto	O
L700	O
;	O
L624	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- itask = 4 or 5 and tcrit (=r1) behind tcur (=r2)   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tcrit	O
,	O
tn	O
)	O
;	O
goto	O
L700	O
;	O
L625	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- itask = 4 or 5 and tcrit (=r1) behind tout (=r2)   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tcrit	O
,	O
*	O
tout	O
)	O
;	O
goto	O
L700	O
;	O
L626	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- at start of problem, too much accuracy   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         requested for precision of machine..  see tolsf (=r1) "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
tolsf	O
,	O
0.0	int
)	O
;	O
rwork	*(double)
[	O
14	int
]	O
=	O
tolsf	O
;	O
goto	O
L700	O
;	O
L627	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- trouble from intdy. itask = i1, tout = r1"	*(char)
,	O
0	int
,	O
1	int
,	O
*	O
itask	long
,	O
0	int
,	O
1	int
,	O
*	O
tout	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L628	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- rwork length insufficient (for subroutine prep).   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	*(char)
,	O
0	int
,	O
2	int
,	O
lenrw	O
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L629	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- rwork length insufficient (for subroutine jgroup). "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	*(char)
,	O
0	int
,	O
2	int
,	O
lenrw	O
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L630	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- rwork length insufficient (for subroutine odrv).   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	*(char)
,	O
0	int
,	O
2	int
,	O
lenrw	O
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L631	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- error from odrv in yale sparse matrix package      "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
imul	O
=	O
(	O
iys	O
-	O
1	int
)	O
/	O
n	*(long)
;	O
irem	O
=	O
iys	O
-	O
imul	O
*	O
n	*(long)
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         at t (=r1), odrv returned error flag = i1*neq + i2.   "	*(char)
,	O
0	int
,	O
2	int
,	O
imul	O
,	O
irem	O
,	O
1	int
,	O
tn	O
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L632	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- rwork length insufficient (for subroutine cdrv).   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         length needed is .ge. lenrw (=i1), exceeds lrw (=i2)"	*(char)
,	O
0	int
,	O
2	int
,	O
lenrw	O
,	O
*	O
lrw	long
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
goto	O
L700	O
;	O
L633	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- error from cdrv in yale sparse matrix package      "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
imul	O
=	O
(	O
iys	O
-	O
1	int
)	O
/	O
n	*(long)
;	O
irem	O
=	O
iys	O
-	O
imul	O
*	O
n	*(long)
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         at t (=r1), cdrv returned error flag = i1*neq + i2.   "	*(char)
,	O
0	int
,	O
2	int
,	O
imul	O
,	O
irem	O
,	O
1	int
,	O
tn	O
,	O
0.0	int
)	O
;	O
if	O
(	O
imul	O
==	O
2	int
)	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         duplicate entry in sparsity structure descriptors   "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
if	O
(	O
imul	O
==	O
3	int
||	O
imul	O
==	O
6	int
)	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"         insufficient storage for nsfc (called by cdrv)      "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
L700	O
:	O
if	O
(	O
illin	O
==	O
5	int
)	O
goto	O
L710	O
;	O
++	O
illin	O
;	O
*	O
istate	O
=	O
-	O
3	int
;	O
return	O
0	int
;	O
L710	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- repeated occurrences of illegal input    "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
L800	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"lsodes-- run aborted.. apparent infinite loop     "	*(char)
,	O
2	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
slss_	(*(double),*(long),*(double),*(double))->(int)
(	O
double	O
*	O
wk	*(double)
,	O
long	O
*	O
iwk	*(long)
,	O
double	O
*	O
x	*(double)
,	O
double	O
*	O
tem	*(double)
)	O
{	O
long	O
i__1	O
;	O
long	O
i	O
;	O
double	O
r	*(long)
,	O
di	O
,	O
hl0	O
,	O
phl0	O
;	O
--	O
tem	*(double)
;	O
--	O
x	*(double)
;	O
--	O
iwk	*(long)
;	O
--	O
wk	*(double)
;	O
iersl	O
=	O
0	int
;	O
switch	O
(	O
miter	O
)	O
{	O
case	O
1	int
:	O
goto	O
L100	O
;	O
case	O
2	int
:	O
goto	O
L100	O
;	O
case	O
3	int
:	O
goto	O
L300	O
;	O
}	O
L100	O
:	O
cdrv_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(double),*(long),long,*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipr	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipc	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipic	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipian	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjan	O
]	O
,	O
&	O
wk	*(double)
[	O
ipa	O
]	O
,	O
&	O
x	*(double)
[	O
1	int
]	O
,	O
&	O
x	*(double)
[	O
1	int
]	O
,	O
&	O
nsp	*(long)
,	O
&	O
iwk	*(long)
[	O
ipisp	O
]	O
,	O
&	O
wk	*(double)
[	O
iprsp	O
]	O
,	O
&	O
iesp	O
,	O
4	int
,	O
&	O
iersl	O
)	O
;	O
if	O
(	O
iersl	O
!=	O
0	int
)	O
iersl	O
=	O
-	O
1	int
;	O
return	O
0	int
;	O
L300	O
:	O
phl0	O
=	O
wk	*(double)
[	O
2	int
]	O
;	O
hl0	O
=	O
h	O
*	O
el0	O
;	O
wk	*(double)
[	O
2	int
]	O
=	O
hl0	O
;	O
if	O
(	O
hl0	O
==	O
phl0	O
)	O
goto	O
L330	O
;	O
r	*(long)
=	O
hl0	O
/	O
phl0	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
di	O
=	O
1.0	int
-	O
r	*(long)
*	O
(	O
1.0	int
-	O
1.0	int
/	O
wk	*(double)
[	O
i	O
+	O
2	int
]	O
)	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
di	O
)	O
==	O
0.	int
)	O
goto	O
L390	O
;	O
wk	*(double)
[	O
i	O
+	O
2	int
]	O
=	O
1.0	int
/	O
di	O
;	O
}	O
L330	O
:	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
x	*(double)
[	O
i	O
]	O
=	O
wk	*(double)
[	O
i	O
+	O
2	int
]	O
*	O
x	*(double)
[	O
i	O
]	O
;	O
return	O
0	int
;	O
L390	O
:	O
iersl	O
=	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
prjs_	(*(long),*(double),*(double),*(long),*(double),*(double),*(double),*(double),*(long))->(int)
(	O
long	O
*	O
neq	*(long)
,	O
double	O
*	O
y	*(double)
,	O
double	O
*	O
yh	*(double)
,	O
long	O
*	O
nyh	O
,	O
double	O
*	O
ewt	*(double)
,	O
double	O
*	O
ftem	*(double)
,	O
double	O
*	O
savf	*(double)
,	O
double	O
*	O
wk	*(double)
,	O
long	O
*	O
iwk	*(long)
)	O
{	O
long	O
yh_dim1	O
,	O
yh_offset	O
,	O
i__1	O
,	O
i__2	O
,	O
i__3	O
;	O
double	O
d__1	O
,	O
d__2	O
,	O
d__3	O
;	O
long	O
jmin	O
,	O
jmax	O
,	O
imul	O
,	O
kmax	O
,	O
kmin	O
;	O
double	O
rcon	O
;	O
double	O
srur	O
;	O
long	O
i	O
,	O
j	O
,	O
k	*(long)
;	O
double	O
r	*(long)
,	O
rcont	O
;	O
double	O
r0	O
,	O
di	O
;	O
long	O
jj	O
,	O
ng	O
;	O
double	O
hl0	O
,	O
fac	O
,	O
con	O
,	O
pij	O
;	O
long	O
jok	O
;	O
--	O
iwk	*(long)
;	O
--	O
wk	*(double)
;	O
--	O
savf	*(double)
;	O
--	O
ftem	*(double)
;	O
--	O
ewt	*(double)
;	O
yh_dim1	O
=	O
*	O
nyh	O
;	O
yh_offset	O
=	O
yh_dim1	O
+	O
1	int
;	O
yh	*(double)
-=	O
yh_offset	O
;	O
--	O
y	*(double)
;	O
--	O
neq	*(long)
;	O
hl0	O
=	O
h	O
*	O
el0	O
;	O
con	O
=	O
-	O
hl0	O
;	O
if	O
(	O
miter	O
==	O
3	int
)	O
{	O
jcur	O
=	O
1	int
;	O
++	O
nje	O
;	O
wk	*(double)
[	O
2	int
]	O
=	O
hl0	O
;	O
ierpj	O
=	O
0	int
;	O
r	*(long)
=	O
el0	O
*	O
0.1	int
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
+=	O
r	*(long)
*	O
(	O
h	O
*	O
savf	*(double)
[	O
i	O
]	O
-	O
yh	*(double)
[	O
i	O
+	O
(	O
yh_dim1	O
<<	O
1	int
)	O
]	O
)	O
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
wk	*(double)
[	O
3	int
]	O
,	O
&	O
tn	O
)	O
;	O
++	O
nfe	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
{	O
r0	O
=	O
h	O
*	O
savf	*(double)
[	O
i	O
]	O
-	O
yh	*(double)
[	O
i	O
+	O
(	O
yh_dim1	O
<<	O
1	int
)	O
]	O
;	O
di	O
=	O
r0	O
*	O
0.1	int
-	O
h	O
*	O
(	O
wk	*(double)
[	O
i	O
+	O
2	int
]	O
-	O
savf	*(double)
[	O
i	O
]	O
)	O
;	O
wk	*(double)
[	O
i	O
+	O
2	int
]	O
=	O
1.0	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
r0	O
)	O
>=	O
(	O
uround	O
/	O
ewt	*(double)
[	O
i	O
]	O
)	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
di	O
)	O
==	O
0.0	int
)	O
{	O
ierpj	O
=	O
2	int
;	O
return	O
0	int
;	O
}	O
wk	*(double)
[	O
i	O
+	O
2	int
]	O
=	O
r0	O
*	O
0.1	int
/	O
di	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
jok	O
=	O
1	int
;	O
if	O
(	O
nst	O
==	O
0	int
||	O
nst	O
>=	O
nslj	O
+	O
msbj	O
)	O
jok	O
=	O
0	int
;	O
if	O
(	O
(	O
icf	O
==	O
1	int
)	O
&&	O
(	O
fabs	(double)->(double)
(	O
rc	O
-	O
1	int
)	O
<	O
ccmxj	O
)	O
)	O
jok	O
=	O
0	int
;	O
if	O
(	O
icf	O
==	O
2	int
)	O
jok	O
=	O
0	int
;	O
if	O
(	O
jok	O
==	O
1	int
)	O
goto	O
L250	O
;	O
L20	O
:	O
jcur	O
=	O
1	int
;	O
++	O
nje	O
;	O
nslj	O
=	O
nst	O
;	O
iplost	O
=	O
0	int
;	O
conmin	O
=	O
fabs	(double)->(double)
(	O
con	O
)	O
;	O
switch	O
(	O
miter	O
)	O
{	O
case	O
1	int
:	O
goto	O
L100	O
;	O
case	O
2	int
:	O
goto	O
L200	O
;	O
}	O
L100	O
:	O
kmin	O
=	O
iwk	*(long)
[	O
ipian	O
]	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
i__1	O
;	O
++	O
j	O
)	O
{	O
kmax	O
=	O
iwk	*(long)
[	O
ipian	O
+	O
j	O
]	O
-	O
1	int
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
ftem	*(double)
[	O
i	O
]	O
=	O
0.0	int
;	O
CalcJacob	(*(double),array(double),long,array(double))->(void)
(	O
&	O
tn	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
j	O
,	O
&	O
ftem	*(double)
[	O
1	int
]	O
)	O
;	O
i__2	O
=	O
kmax	O
;	O
for	O
(	O
k	*(long)
=	O
kmin	O
;	O
k	*(long)
<=	O
i__2	O
;	O
++	O
k	*(long)
)	O
{	O
i	O
=	O
iwk	*(long)
[	O
ibjan	O
+	O
k	*(long)
]	O
;	O
wk	*(double)
[	O
iba	O
+	O
k	*(long)
]	O
=	O
ftem	*(double)
[	O
i	O
]	O
*	O
con	O
;	O
if	O
(	O
i	O
==	O
j	O
)	O
wk	*(double)
[	O
iba	O
+	O
k	*(long)
]	O
+=	O
1.0	int
;	O
}	O
kmin	O
=	O
kmax	O
+	O
1	int
;	O
}	O
goto	O
L290	O
;	O
L200	O
:	O
fac	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
;	O
r0	O
=	O
fabs	(double)->(double)
(	O
h	O
)	O
*	O
1e3	int
*	O
uround	O
*	O
(	O
double	O
)	O
n	*(long)
*	O
fac	O
;	O
if	O
(	O
r0	O
==	O
0.	int
)	O
r0	O
=	O
1.0	int
;	O
srur	O
=	O
wk	*(double)
[	O
1	int
]	O
;	O
jmin	O
=	O
iwk	*(long)
[	O
ipigp	O
]	O
;	O
i__1	O
=	O
ngp	O
;	O
for	O
(	O
ng	O
=	O
1	int
;	O
ng	O
<=	O
i__1	O
;	O
++	O
ng	O
)	O
{	O
jmax	O
=	O
iwk	*(long)
[	O
ipigp	O
+	O
ng	O
]	O
-	O
1	int
;	O
i__2	O
=	O
jmax	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
i__2	O
;	O
++	O
j	O
)	O
{	O
jj	O
=	O
iwk	*(long)
[	O
ibjgp	O
+	O
j	O
]	O
;	O
d__2	O
=	O
srur	O
*	O
fabs	(double)->(double)
(	O
y	*(double)
[	O
jj	O
]	O
)	O
,	O
d__3	O
=	O
r0	O
/	O
ewt	*(double)
[	O
jj	O
]	O
;	O
r	*(long)
=	O
mymax	O
(	O
d__2	O
,	O
d__3	O
)	O
;	O
y	*(double)
[	O
jj	O
]	O
+=	O
r	*(long)
;	O
}	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
ftem	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
i__2	O
=	O
jmax	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
i__2	O
;	O
++	O
j	O
)	O
{	O
jj	O
=	O
iwk	*(long)
[	O
ibjgp	O
+	O
j	O
]	O
;	O
y	*(double)
[	O
jj	O
]	O
=	O
yh	*(double)
[	O
jj	O
+	O
yh_dim1	O
]	O
;	O
d__2	O
=	O
srur	O
*	O
fabs	(double)->(double)
(	O
y	*(double)
[	O
jj	O
]	O
)	O
,	O
d__3	O
=	O
r0	O
/	O
ewt	*(double)
[	O
jj	O
]	O
;	O
r	*(long)
=	O
mymax	O
(	O
d__2	O
,	O
d__3	O
)	O
;	O
fac	O
=	O
-	O
hl0	O
/	O
r	*(long)
;	O
kmin	O
=	O
iwk	*(long)
[	O
ibian	O
+	O
jj	O
]	O
;	O
kmax	O
=	O
iwk	*(long)
[	O
ibian	O
+	O
jj	O
+	O
1	int
]	O
-	O
1	int
;	O
i__3	O
=	O
kmax	O
;	O
for	O
(	O
k	*(long)
=	O
kmin	O
;	O
k	*(long)
<=	O
i__3	O
;	O
++	O
k	*(long)
)	O
{	O
i	O
=	O
iwk	*(long)
[	O
ibjan	O
+	O
k	*(long)
]	O
;	O
wk	*(double)
[	O
iba	O
+	O
k	*(long)
]	O
=	O
(	O
ftem	*(double)
[	O
i	O
]	O
-	O
savf	*(double)
[	O
i	O
]	O
)	O
*	O
fac	O
;	O
if	O
(	O
i	O
==	O
jj	O
)	O
wk	*(double)
[	O
iba	O
+	O
k	*(long)
]	O
+=	O
1.0	int
;	O
}	O
}	O
jmin	O
=	O
jmax	O
+	O
1	int
;	O
}	O
nfe	O
+=	O
ngp	O
;	O
goto	O
L290	O
;	O
L250	O
:	O
jcur	O
=	O
0	int
;	O
rcon	O
=	O
con	O
/	O
con0	O
;	O
rcont	O
=	O
fabs	(double)->(double)
(	O
con	O
)	O
/	O
conmin	O
;	O
if	O
(	O
rcont	O
>	O
rbig	O
&&	O
iplost	O
==	O
1	int
)	O
goto	O
L20	O
;	O
kmin	O
=	O
iwk	*(long)
[	O
ipian	O
]	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
i__1	O
;	O
++	O
j	O
)	O
{	O
kmax	O
=	O
iwk	*(long)
[	O
ipian	O
+	O
j	O
]	O
-	O
1	int
;	O
i__2	O
=	O
kmax	O
;	O
for	O
(	O
k	*(long)
=	O
kmin	O
;	O
k	*(long)
<=	O
i__2	O
;	O
++	O
k	*(long)
)	O
{	O
i	O
=	O
iwk	*(long)
[	O
ibjan	O
+	O
k	*(long)
]	O
;	O
pij	O
=	O
wk	*(double)
[	O
iba	O
+	O
k	*(long)
]	O
;	O
if	O
(	O
i	O
!=	O
j	O
)	O
goto	O
L260	O
;	O
pij	O
+=	O
-	O
1.	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
pij	O
)	O
>=	O
psmall	O
)	O
goto	O
L260	O
;	O
iplost	O
=	O
1	int
;	O
d__1	O
=	O
fabs	(double)->(double)
(	O
con0	O
)	O
;	O
conmin	O
=	O
mymin	O
(	O
d__1	O
,	O
conmin	O
)	O
;	O
L260	O
:	O
pij	O
*=	O
rcon	O
;	O
if	O
(	O
i	O
==	O
j	O
)	O
pij	O
+=	O
1.0	int
;	O
wk	*(double)
[	O
iba	O
+	O
k	*(long)
]	O
=	O
pij	O
;	O
}	O
kmin	O
=	O
kmax	O
+	O
1	int
;	O
}	O
L290	O
:	O
++	O
nlu	O
;	O
con0	O
=	O
con	O
;	O
ierpj	O
=	O
0	int
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
ftem	*(double)
[	O
i	O
]	O
=	O
0.0	int
;	O
cdrv_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(double),*(long),long,*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipr	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipc	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipic	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipian	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjan	O
]	O
,	O
&	O
wk	*(double)
[	O
ipa	O
]	O
,	O
&	O
ftem	*(double)
[	O
1	int
]	O
,	O
&	O
ftem	*(double)
[	O
1	int
]	O
,	O
&	O
nsp	*(long)
,	O
&	O
iwk	*(long)
[	O
ipisp	O
]	O
,	O
&	O
wk	*(double)
[	O
iprsp	O
]	O
,	O
&	O
iesp	O
,	O
2	int
,	O
&	O
iys	O
)	O
;	O
if	O
(	O
iys	O
==	O
0	int
)	O
return	O
0	int
;	O
imul	O
=	O
(	O
iys	O
-	O
1	int
)	O
/	O
n	*(long)
;	O
ierpj	O
=	O
-	O
2	int
;	O
if	O
(	O
imul	O
==	O
8	int
)	O
ierpj	O
=	O
1	int
;	O
if	O
(	O
imul	O
==	O
10	int
)	O
ierpj	O
=	O
-	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
stode_	(*(long),*(double),*(double),*(long),*(double),*(double),*(double),*(double),*(double),*(long))->(int)
(	O
long	O
*	O
neq	*(long)
,	O
double	O
*	O
y	*(double)
,	O
double	O
*	O
yh	*(double)
,	O
long	O
*	O
nyh	O
,	O
double	O
*	O
yh1	O
,	O
double	O
*	O
ewt	*(double)
,	O
double	O
*	O
savf	*(double)
,	O
double	O
*	O
acor	O
,	O
double	O
*	O
wm	O
,	O
long	O
*	O
iwm	O
)	O
{	O
long	O
yh_dim1	O
,	O
yh_offset	O
,	O
i__1	O
,	O
i__2	O
;	O
double	O
d__1	O
,	O
d__2	O
,	O
d__3	O
;	O
double	O
dcon	O
,	O
delp	O
,	O
rhdn	O
,	O
exdn	O
;	O
long	O
iret	O
;	O
double	O
told	O
,	O
rhsm	O
;	O
long	O
newq	O
;	O
double	O
exsm	O
,	O
rhup	O
,	O
exup	O
;	O
long	O
i	O
,	O
j	O
,	O
m	O
;	O
double	O
r	*(long)
;	O
long	O
i1	O
,	O
iredo	O
=	O
0	int
;	O
long	O
jb	O
;	O
double	O
del	O
,	O
ddn	O
,	O
rh	O
=	O
0.0	int
;	O
long	O
ncf	O
;	O
double	O
dup	O
,	O
dsm	O
=	O
0.0	int
;	O
--	O
iwm	O
;	O
--	O
wm	O
;	O
--	O
acor	O
;	O
--	O
savf	*(double)
;	O
--	O
ewt	*(double)
;	O
--	O
yh1	O
;	O
yh_dim1	O
=	O
*	O
nyh	O
;	O
yh_offset	O
=	O
yh_dim1	O
+	O
1	int
;	O
yh	*(double)
-=	O
yh_offset	O
;	O
kflag	O
=	O
0	int
;	O
told	O
=	O
tn	O
;	O
ncf	O
=	O
0	int
;	O
ierpj	O
=	O
0	int
;	O
iersl	O
=	O
0	int
;	O
jcur	O
=	O
0	int
;	O
icf	O
=	O
0	int
;	O
delp	O
=	O
0.	int
;	O
if	O
(	O
jstart	O
>	O
0	int
)	O
goto	O
L200	O
;	O
if	O
(	O
jstart	O
==	O
-	O
1	int
)	O
goto	O
L100	O
;	O
if	O
(	O
jstart	O
==	O
-	O
2	int
)	O
goto	O
L160	O
;	O
lmax	*(long)
=	O
maxord	O
+	O
1	int
;	O
nq	O
=	O
1	int
;	O
l	*(long)
=	O
2	int
;	O
ialth	O
=	O
2	int
;	O
rmax	O
=	O
1e4	int
;	O
rc	O
=	O
0.	int
;	O
el0	O
=	O
1.	int
;	O
crate	O
=	O
.7	int
;	O
hold	O
=	O
h	O
;	O
meo	O
=	O
meth	*(long)
;	O
nslp	O
=	O
0	int
;	O
ipup	O
=	O
miter	O
;	O
iret	O
=	O
3	int
;	O
goto	O
L140	O
;	O
L100	O
:	O
ipup	O
=	O
miter	O
;	O
lmax	*(long)
=	O
maxord	O
+	O
1	int
;	O
if	O
(	O
ialth	O
==	O
1	int
)	O
ialth	O
=	O
2	int
;	O
if	O
(	O
meth	*(long)
==	O
meo	O
)	O
goto	O
L110	O
;	O
cfode_	(*(long),*(double),*(double))->(int)
(	O
&	O
meth	*(long)
,	O
elco	*(double)
,	O
tesco	*(double)
)	O
;	O
meo	O
=	O
meth	*(long)
;	O
if	O
(	O
nq	O
>	O
maxord	O
)	O
goto	O
L120	O
;	O
ialth	O
=	O
l	*(long)
;	O
iret	O
=	O
1	int
;	O
goto	O
L150	O
;	O
L110	O
:	O
if	O
(	O
nq	O
<=	O
maxord	O
)	O
goto	O
L160	O
;	O
L120	O
:	O
nq	O
=	O
maxord	O
;	O
l	*(long)
=	O
lmax	*(long)
;	O
i__1	O
=	O
l	*(long)
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
i__1	O
;	O
++	O
i	O
)	O
el	O
[	O
i	O
]	O
=	O
elco	*(double)
[	O
i	O
+	O
nq	O
*	O
13	int
-	O
13	int
]	O
;	O
nqnyh	O
=	O
nq	O
*	O
*	O
nyh	O
;	O
rc	O
=	O
rc	O
*	O
el	O
[	O
0	int
]	O
/	O
el0	O
;	O
el0	O
=	O
el	O
[	O
0	int
]	O
;	O
conit	O
=	O
0.5	int
/	O
(	O
double	O
)	O
(	O
nq	O
+	O
2	int
)	O
;	O
ddn	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
/	O
tesco	*(double)
[	O
l	*(long)
*	O
3	int
-	O
3	int
]	O
;	O
exdn	O
=	O
1.0	int
/	O
(	O
double	O
)	O
l	*(long)
;	O
rhdn	O
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
ddn	O
,	O
exdn	O
)	O
*	O
1.3	int
+	O
1.3e-6	int
)	O
;	O
rh	O
=	O
mymin	O
(	O
rhdn	O
,	O
1.0	int
)	O
;	O
iredo	O
=	O
3	int
;	O
if	O
(	O
h	O
==	O
hold	O
)	O
goto	O
L170	O
;	O
d__3	O
=	O
fabs	(double)->(double)
(	O
h	O
/	O
hold	O
)	O
;	O
rh	O
=	O
mymin	O
(	O
rh	O
,	O
d__3	O
)	O
;	O
h	O
=	O
hold	O
;	O
goto	O
L175	O
;	O
L140	O
:	O
cfode_	(*(long),*(double),*(double))->(int)
(	O
&	O
meth	*(long)
,	O
elco	*(double)
,	O
tesco	*(double)
)	O
;	O
L150	O
:	O
i__1	O
=	O
l	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
el	O
[	O
i	O
-	O
1	int
]	O
=	O
elco	*(double)
[	O
i	O
+	O
nq	O
*	O
13	int
-	O
14	int
]	O
;	O
nqnyh	O
=	O
nq	O
*	O
*	O
nyh	O
;	O
rc	O
=	O
rc	O
*	O
el	O
[	O
0	int
]	O
/	O
el0	O
;	O
el0	O
=	O
el	O
[	O
0	int
]	O
;	O
conit	O
=	O
0.5	int
/	O
(	O
double	O
)	O
(	O
nq	O
+	O
2	int
)	O
;	O
switch	O
(	O
iret	O
)	O
{	O
case	O
1	int
:	O
goto	O
L160	O
;	O
case	O
2	int
:	O
goto	O
L170	O
;	O
case	O
3	int
:	O
goto	O
L200	O
;	O
}	O
L160	O
:	O
if	O
(	O
h	O
==	O
hold	O
)	O
goto	O
L200	O
;	O
rh	O
=	O
h	O
/	O
hold	O
;	O
h	O
=	O
hold	O
;	O
iredo	O
=	O
3	int
;	O
goto	O
L175	O
;	O
L170	O
:	O
d__2	O
=	O
hmin	O
/	O
fabs	(double)->(double)
(	O
h	O
)	O
;	O
rh	O
=	O
mymax	O
(	O
rh	O
,	O
d__2	O
)	O
;	O
L175	O
:	O
rh	O
=	O
mymin	O
(	O
rh	O
,	O
rmax	O
)	O
;	O
d__2	O
=	O
fabs	(double)->(double)
(	O
h	O
)	O
*	O
hmxi	O
*	O
rh	O
;	O
rh	O
/=	O
mymax	O
(	O
1.0	int
,	O
d__2	O
)	O
;	O
r	*(long)
=	O
1.0	int
;	O
i__1	O
=	O
l	*(long)
;	O
for	O
(	O
j	O
=	O
2	int
;	O
j	O
<=	O
i__1	O
;	O
++	O
j	O
)	O
{	O
r	*(long)
*=	O
rh	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
yh	*(double)
[	O
i	O
+	O
j	O
*	O
yh_dim1	O
]	O
*=	O
r	*(long)
;	O
}	O
h	O
*=	O
rh	O
;	O
rc	O
*=	O
rh	O
;	O
ialth	O
=	O
l	*(long)
;	O
if	O
(	O
iredo	O
==	O
0	int
)	O
goto	O
L690	O
;	O
L200	O
:	O
if	O
(	O
fabs	(double)->(double)
(	O
rc	O
-	O
1	int
)	O
>	O
ccmax	O
)	O
ipup	O
=	O
miter	O
;	O
if	O
(	O
nst	O
>=	O
nslp	O
+	O
msbp	O
)	O
ipup	O
=	O
miter	O
;	O
tn	O
+=	O
h	O
;	O
i1	O
=	O
nqnyh	O
+	O
1	int
;	O
i__2	O
=	O
nq	O
;	O
for	O
(	O
jb	O
=	O
1	int
;	O
jb	O
<=	O
i__2	O
;	O
++	O
jb	O
)	O
{	O
i1	O
-=	O
*	O
nyh	O
;	O
i__1	O
=	O
nqnyh	O
;	O
for	O
(	O
i	O
=	O
i1	O
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
yh1	O
[	O
i	O
]	O
+=	O
yh1	O
[	O
i	O
+	O
*	O
nyh	O
]	O
;	O
}	O
L220	O
:	O
m	O
=	O
0	int
;	O
i__2	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
yh	*(double)
[	O
i	O
+	O
yh_dim1	O
]	O
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
++	O
nfe	O
;	O
if	O
(	O
ipup	O
<=	O
0	int
)	O
goto	O
L250	O
;	O
prjs_	(*(long),*(double),*(double),*(long),*(double),*(double),*(double),*(double),*(long))->(int)
(	O
&	O
neq	*(long)
[	O
1	int
]	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
yh	*(double)
[	O
yh_offset	O
]	O
,	O
nyh	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
,	O
&	O
acor	O
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
wm	O
[	O
1	int
]	O
,	O
&	O
iwm	O
[	O
1	int
]	O
)	O
;	O
ipup	O
=	O
0	int
;	O
rc	O
=	O
1.0	int
;	O
nslp	O
=	O
nst	O
;	O
crate	O
=	O
0.7	int
;	O
if	O
(	O
ierpj	O
!=	O
0	int
)	O
goto	O
L430	O
;	O
L250	O
:	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
acor	O
[	O
i	O
]	O
=	O
0.	int
;	O
L270	O
:	O
if	O
(	O
miter	O
!=	O
0	int
)	O
goto	O
L350	O
;	O
i__2	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
{	O
savf	*(double)
[	O
i	O
]	O
=	O
h	O
*	O
savf	*(double)
[	O
i	O
]	O
-	O
yh	*(double)
[	O
i	O
+	O
(	O
yh_dim1	O
<<	O
1	int
)	O
]	O
;	O
y	*(double)
[	O
i	O
]	O
=	O
savf	*(double)
[	O
i	O
]	O
-	O
acor	O
[	O
i	O
]	O
;	O
}	O
del	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
{	O
y	*(double)
[	O
i	O
]	O
=	O
yh	*(double)
[	O
i	O
+	O
yh_dim1	O
]	O
+	O
el	O
[	O
0	int
]	O
*	O
savf	*(double)
[	O
i	O
]	O
;	O
acor	O
[	O
i	O
]	O
=	O
savf	*(double)
[	O
i	O
]	O
;	O
}	O
goto	O
L400	O
;	O
L350	O
:	O
i__2	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
h	O
*	O
savf	*(double)
[	O
i	O
]	O
-	O
(	O
yh	*(double)
[	O
i	O
+	O
(	O
yh_dim1	O
<<	O
1	int
)	O
]	O
+	O
acor	O
[	O
i	O
]	O
)	O
;	O
slss_	(*(double),*(long),*(double),*(double))->(int)
(	O
&	O
wm	O
[	O
1	int
]	O
,	O
&	O
iwm	O
[	O
1	int
]	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
)	O
;	O
if	O
(	O
iersl	O
<	O
0	int
)	O
goto	O
L430	O
;	O
if	O
(	O
iersl	O
>	O
0	int
)	O
goto	O
L410	O
;	O
del	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
;	O
i__2	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
{	O
acor	O
[	O
i	O
]	O
+=	O
y	*(double)
[	O
i	O
]	O
;	O
y	*(double)
[	O
i	O
]	O
=	O
yh	*(double)
[	O
i	O
+	O
yh_dim1	O
]	O
+	O
el	O
[	O
0	int
]	O
*	O
acor	O
[	O
i	O
]	O
;	O
}	O
L400	O
:	O
if	O
(	O
m	O
!=	O
0	int
)	O
{	O
d__1	O
=	O
crate	O
*	O
0.2	int
;	O
d__2	O
=	O
del	O
/	O
delp	O
;	O
crate	O
=	O
mymax	O
(	O
d__1	O
,	O
d__2	O
)	O
;	O
}	O
d__2	O
=	O
crate	O
*	O
1.5	int
;	O
dcon	O
=	O
del	O
*	O
mymin	O
(	O
1.0	int
,	O
d__2	O
)	O
/	O
(	O
tesco	*(double)
[	O
nq	O
*	O
3	int
-	O
2	int
]	O
*	O
conit	O
)	O
;	O
if	O
(	O
dcon	O
<=	O
1.	int
)	O
goto	O
L450	O
;	O
++	O
m	O
;	O
if	O
(	O
m	O
==	O
maxcor	O
)	O
goto	O
L410	O
;	O
if	O
(	O
m	O
>=	O
2	int
&&	O
del	O
>	O
delp	O
*	O
2.0	int
)	O
goto	O
L410	O
;	O
delp	O
=	O
del	O
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
++	O
nfe	O
;	O
goto	O
L270	O
;	O
L410	O
:	O
if	O
(	O
miter	O
==	O
0	int
||	O
jcur	O
==	O
1	int
)	O
goto	O
L430	O
;	O
icf	O
=	O
1	int
;	O
ipup	O
=	O
miter	O
;	O
goto	O
L220	O
;	O
L430	O
:	O
icf	O
=	O
2	int
;	O
++	O
ncf	O
;	O
rmax	O
=	O
2.0	int
;	O
tn	O
=	O
told	O
;	O
i1	O
=	O
nqnyh	O
+	O
1	int
;	O
for	O
(	O
jb	O
=	O
1	int
;	O
jb	O
<=	O
nq	O
;	O
++	O
jb	O
)	O
{	O
i1	O
-=	O
*	O
nyh	O
;	O
for	O
(	O
i	O
=	O
i1	O
;	O
i	O
<=	O
nqnyh	O
;	O
++	O
i	O
)	O
yh1	O
[	O
i	O
]	O
-=	O
yh1	O
[	O
i	O
+	O
*	O
nyh	O
]	O
;	O
}	O
if	O
(	O
ierpj	O
<	O
0	int
||	O
iersl	O
<	O
0	int
)	O
goto	O
L680	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
h	O
)	O
<=	O
hmin	O
*	O
1.00001	int
)	O
goto	O
L670	O
;	O
if	O
(	O
ncf	O
==	O
mxncf	O
)	O
goto	O
L670	O
;	O
rh	O
=	O
0.25	int
;	O
ipup	O
=	O
miter	O
;	O
iredo	O
=	O
1	int
;	O
goto	O
L170	O
;	O
L450	O
:	O
jcur	O
=	O
0	int
;	O
if	O
(	O
m	O
==	O
0	int
)	O
dsm	O
=	O
del	O
/	O
tesco	*(double)
[	O
nq	O
*	O
3	int
-	O
2	int
]	O
;	O
if	O
(	O
m	O
>	O
0	int
)	O
dsm	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
acor	O
[	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
/	O
tesco	*(double)
[	O
nq	O
*	O
3	int
-	O
2	int
]	O
;	O
if	O
(	O
dsm	O
>	O
1.0	int
)	O
goto	O
L500	O
;	O
kflag	O
=	O
0	int
;	O
iredo	O
=	O
0	int
;	O
++	O
nst	O
;	O
hu	O
=	O
h	O
;	O
nqu	O
=	O
nq	O
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
l	*(long)
;	O
++	O
j	O
)	O
{	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
yh	*(double)
[	O
i	O
+	O
j	O
*	O
yh_dim1	O
]	O
+=	O
el	O
[	O
j	O
-	O
1	int
]	O
*	O
acor	O
[	O
i	O
]	O
;	O
}	O
--	O
ialth	O
;	O
if	O
(	O
ialth	O
==	O
0	int
)	O
goto	O
L520	O
;	O
if	O
(	O
ialth	O
>	O
1	int
)	O
goto	O
L700	O
;	O
if	O
(	O
l	*(long)
==	O
lmax	*(long)
)	O
goto	O
L700	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
yh	*(double)
[	O
i	O
+	O
lmax	*(long)
*	O
yh_dim1	O
]	O
=	O
acor	O
[	O
i	O
]	O
;	O
goto	O
L700	O
;	O
L500	O
:	O
--	O
kflag	O
;	O
tn	O
=	O
told	O
;	O
i1	O
=	O
nqnyh	O
+	O
1	int
;	O
i__1	O
=	O
nq	O
;	O
for	O
(	O
jb	O
=	O
1	int
;	O
jb	O
<=	O
i__1	O
;	O
++	O
jb	O
)	O
{	O
i1	O
-=	O
*	O
nyh	O
;	O
i__2	O
=	O
nqnyh	O
;	O
for	O
(	O
i	O
=	O
i1	O
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
yh1	O
[	O
i	O
]	O
-=	O
yh1	O
[	O
i	O
+	O
*	O
nyh	O
]	O
;	O
}	O
rmax	O
=	O
2.0	int
;	O
if	O
(	O
fabs	(double)->(double)
(	O
h	O
)	O
<=	O
hmin	O
*	O
1.00001	int
)	O
goto	O
L660	O
;	O
if	O
(	O
kflag	O
<=	O
-	O
3	int
)	O
goto	O
L640	O
;	O
iredo	O
=	O
2	int
;	O
rhup	O
=	O
0.0	int
;	O
goto	O
L540	O
;	O
L520	O
:	O
rhup	O
=	O
0.0	int
;	O
if	O
(	O
l	*(long)
==	O
lmax	*(long)
)	O
goto	O
L540	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
savf	*(double)
[	O
i	O
]	O
=	O
acor	O
[	O
i	O
]	O
-	O
yh	*(double)
[	O
i	O
+	O
lmax	*(long)
*	O
yh_dim1	O
]	O
;	O
dup	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
/	O
tesco	*(double)
[	O
nq	O
*	O
3	int
-	O
1	int
]	O
;	O
exup	O
=	O
1.0	int
/	O
(	O
double	O
)	O
(	O
l	*(long)
+	O
1	int
)	O
;	O
rhup	O
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
dup	O
,	O
exup	O
)	O
*	O
1.4	int
+	O
1.4e-6	int
)	O
;	O
L540	O
:	O
exsm	O
=	O
1.0	int
/	O
(	O
double	O
)	O
l	*(long)
;	O
rhsm	O
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
dsm	O
,	O
exsm	O
)	O
*	O
1.2	int
+	O
1.2e-6	int
)	O
;	O
rhdn	O
=	O
0.0	int
;	O
if	O
(	O
nq	O
==	O
1	int
)	O
goto	O
L560	O
;	O
ddn	O
=	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
&	O
n	*(long)
,	O
&	O
yh	*(double)
[	O
l	*(long)
*	O
yh_dim1	O
+	O
1	int
]	O
,	O
&	O
ewt	*(double)
[	O
1	int
]	O
)	O
/	O
tesco	*(double)
[	O
nq	O
*	O
3	int
-	O
3	int
]	O
;	O
exdn	O
=	O
1.0	int
/	O
(	O
double	O
)	O
nq	O
;	O
rhdn	O
=	O
1.0	int
/	O
(	O
pow	(double,double)->(double)
(	O
ddn	O
,	O
exdn	O
)	O
*	O
1.3	int
+	O
1.3e-6	int
)	O
;	O
L560	O
:	O
if	O
(	O
rhsm	O
>=	O
rhup	O
)	O
goto	O
L570	O
;	O
if	O
(	O
rhup	O
>	O
rhdn	O
)	O
goto	O
L590	O
;	O
goto	O
L580	O
;	O
L570	O
:	O
if	O
(	O
rhsm	O
<	O
rhdn	O
)	O
goto	O
L580	O
;	O
newq	O
=	O
nq	O
;	O
rh	O
=	O
rhsm	O
;	O
goto	O
L620	O
;	O
L580	O
:	O
newq	O
=	O
nq	O
-	O
1	int
;	O
rh	O
=	O
rhdn	O
;	O
if	O
(	O
kflag	O
<	O
0	int
&&	O
rh	O
>	O
1.0	int
)	O
rh	O
=	O
1.0	int
;	O
goto	O
L620	O
;	O
L590	O
:	O
newq	O
=	O
l	*(long)
;	O
rh	O
=	O
rhup	O
;	O
if	O
(	O
rh	O
<	O
1.1	int
)	O
goto	O
L610	O
;	O
r	*(long)
=	O
el	O
[	O
l	*(long)
-	O
1	int
]	O
/	O
(	O
double	O
)	O
l	*(long)
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
yh	*(double)
[	O
i	O
+	O
(	O
newq	O
+	O
1	int
)	O
*	O
yh_dim1	O
]	O
=	O
acor	O
[	O
i	O
]	O
*	O
r	*(long)
;	O
goto	O
L630	O
;	O
L610	O
:	O
ialth	O
=	O
3	int
;	O
goto	O
L700	O
;	O
L620	O
:	O
if	O
(	O
kflag	O
==	O
0	int
&&	O
rh	O
<	O
1.1	int
)	O
goto	O
L610	O
;	O
if	O
(	O
kflag	O
<=	O
-	O
2	int
)	O
rh	O
=	O
mymin	O
(	O
rh	O
,	O
0.2	int
)	O
;	O
if	O
(	O
newq	O
==	O
nq	O
)	O
goto	O
L170	O
;	O
L630	O
:	O
nq	O
=	O
newq	O
;	O
l	*(long)
=	O
nq	O
+	O
1	int
;	O
iret	O
=	O
2	int
;	O
goto	O
L150	O
;	O
L640	O
:	O
if	O
(	O
kflag	O
==	O
-	O
10	int
)	O
goto	O
L660	O
;	O
d__1	O
=	O
hmin	O
/	O
fabs	(double)->(double)
(	O
h	O
)	O
;	O
rh	O
=	O
mymax	O
(	O
d__1	O
,	O
0.1	int
)	O
;	O
h	O
*=	O
rh	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
yh	*(double)
[	O
i	O
+	O
yh_dim1	O
]	O
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
++	O
nfe	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
yh	*(double)
[	O
i	O
+	O
(	O
yh_dim1	O
<<	O
1	int
)	O
]	O
=	O
h	O
*	O
savf	*(double)
[	O
i	O
]	O
;	O
ipup	O
=	O
miter	O
;	O
ialth	O
=	O
5	int
;	O
if	O
(	O
nq	O
==	O
1	int
)	O
goto	O
L200	O
;	O
nq	O
=	O
1	int
;	O
l	*(long)
=	O
2	int
;	O
iret	O
=	O
3	int
;	O
goto	O
L150	O
;	O
L660	O
:	O
kflag	O
=	O
-	O
1	int
;	O
goto	O
L720	O
;	O
L670	O
:	O
kflag	O
=	O
-	O
2	int
;	O
goto	O
L720	O
;	O
L680	O
:	O
kflag	O
=	O
-	O
3	int
;	O
goto	O
L720	O
;	O
L690	O
:	O
rmax	O
=	O
10.0	int
;	O
L700	O
:	O
r	*(long)
=	O
1.0	int
/	O
tesco	*(double)
[	O
nqu	O
*	O
3	int
-	O
2	int
]	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
acor	O
[	O
i	O
]	O
*=	O
r	*(long)
;	O
L720	O
:	O
hold	O
=	O
h	O
;	O
jstart	O
=	O
1	int
;	O
return	O
0	int
;	O
}	O
double	O
vnorm_	(*(long),*(double),*(double))->(double)
(	O
long	O
*	O
n	*(long)
,	O
double	O
*	O
v	*(long)
,	O
double	O
*	O
w	*(double)
)	O
{	O
register	O
double	O
d__1	O
;	O
register	O
long	O
i	O
;	O
register	O
double	O
sum	O
;	O
sum	O
=	O
0.0	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
*	O
n	*(long)
;	O
++	O
i	O
)	O
{	O
d__1	O
=	O
v	*(long)
[	O
i	O
]	O
*	O
w	*(double)
[	O
i	O
]	O
;	O
sum	O
+=	O
d__1	O
*	O
d__1	O
;	O
}	O
return	O
sqrt	(double)->(double)
(	O
sum	O
/	O
(	O
double	O
)	O
(	O
*	O
n	*(long)
)	O
)	O
;	O
}	O
int	O
cfode_	(*(long),*(double),*(double))->(int)
(	O
long	O
*	O
meth	*(long)
,	O
double	O
*	O
elco	*(double)
,	O
double	O
*	O
tesco	*(double)
)	O
{	O
double	O
ragq	O
,	O
pint	O
,	O
xpin	O
,	O
fnqm1	O
;	O
long	O
i	O
;	O
double	O
agamq	O
,	O
rqfac	O
,	O
tsign	O
,	O
rq1fac	O
;	O
long	O
ib	O
;	O
double	O
pc	O
[	O
12	int
]	O
;	O
long	O
nq	O
;	O
double	O
fnq	O
;	O
long	O
nqm1	O
,	O
nqp1	O
;	O
tesco	*(double)
-=	O
4	int
;	O
elco	*(double)
-=	O
14	int
;	O
switch	O
(	O
*	O
meth	*(long)
)	O
{	O
case	O
1	int
:	O
goto	O
L100	O
;	O
case	O
2	int
:	O
goto	O
L200	O
;	O
}	O
L100	O
:	O
elco	*(double)
[	O
14	int
]	O
=	O
1.	int
;	O
elco	*(double)
[	O
15	int
]	O
=	O
1.	int
;	O
tesco	*(double)
[	O
4	int
]	O
=	O
0.	int
;	O
tesco	*(double)
[	O
5	int
]	O
=	O
2.	int
;	O
tesco	*(double)
[	O
7	int
]	O
=	O
1.	int
;	O
tesco	*(double)
[	O
39	int
]	O
=	O
0.	int
;	O
pc	O
[	O
0	int
]	O
=	O
1.	int
;	O
rqfac	O
=	O
1.	int
;	O
for	O
(	O
nq	O
=	O
2	int
;	O
nq	O
<=	O
12	int
;	O
++	O
nq	O
)	O
{	O
rq1fac	O
=	O
rqfac	O
;	O
rqfac	O
/=	O
(	O
double	O
)	O
nq	O
;	O
nqm1	O
=	O
nq	O
-	O
1	int
;	O
fnqm1	O
=	O
(	O
double	O
)	O
nqm1	O
;	O
nqp1	O
=	O
nq	O
+	O
1	int
;	O
pc	O
[	O
nq	O
-	O
1	int
]	O
=	O
0.	int
;	O
for	O
(	O
ib	O
=	O
1	int
;	O
ib	O
<=	O
nqm1	O
;	O
++	O
ib	O
)	O
{	O
i	O
=	O
nqp1	O
-	O
ib	O
;	O
pc	O
[	O
i	O
-	O
1	int
]	O
=	O
pc	O
[	O
i	O
-	O
2	int
]	O
+	O
fnqm1	O
*	O
pc	O
[	O
i	O
-	O
1	int
]	O
;	O
}	O
pc	O
[	O
0	int
]	O
=	O
fnqm1	O
*	O
pc	O
[	O
0	int
]	O
;	O
pint	O
=	O
pc	O
[	O
0	int
]	O
;	O
xpin	O
=	O
pc	O
[	O
0	int
]	O
/	O
2.	int
;	O
tsign	O
=	O
1.	int
;	O
for	O
(	O
i	O
=	O
2	int
;	O
i	O
<=	O
nq	O
;	O
++	O
i	O
)	O
{	O
tsign	O
=	O
-	O
tsign	O
;	O
pint	O
+=	O
tsign	O
*	O
pc	O
[	O
i	O
-	O
1	int
]	O
/	O
(	O
double	O
)	O
i	O
;	O
xpin	O
+=	O
tsign	O
*	O
pc	O
[	O
i	O
-	O
1	int
]	O
/	O
(	O
double	O
)	O
(	O
i	O
+	O
1	int
)	O
;	O
}	O
elco	*(double)
[	O
nq	O
*	O
13	int
+	O
1	int
]	O
=	O
pint	O
*	O
rq1fac	O
;	O
elco	*(double)
[	O
nq	O
*	O
13	int
+	O
2	int
]	O
=	O
1.	int
;	O
for	O
(	O
i	O
=	O
2	int
;	O
i	O
<=	O
nq	O
;	O
++	O
i	O
)	O
elco	*(double)
[	O
i	O
+	O
1	int
+	O
nq	O
*	O
13	int
]	O
=	O
rq1fac	O
*	O
pc	O
[	O
i	O
-	O
1	int
]	O
/	O
(	O
double	O
)	O
i	O
;	O
agamq	O
=	O
rqfac	O
*	O
xpin	O
;	O
ragq	O
=	O
1.0	int
/	O
agamq	O
;	O
tesco	*(double)
[	O
nq	O
*	O
3	int
+	O
2	int
]	O
=	O
ragq	O
;	O
if	O
(	O
nq	O
<	O
12	int
)	O
tesco	*(double)
[	O
nqp1	O
*	O
3	int
+	O
1	int
]	O
=	O
ragq	O
*	O
rqfac	O
/	O
(	O
double	O
)	O
nqp1	O
;	O
tesco	*(double)
[	O
nqm1	O
*	O
3	int
+	O
3	int
]	O
=	O
ragq	O
;	O
}	O
return	O
0	int
;	O
L200	O
:	O
pc	O
[	O
0	int
]	O
=	O
1.	int
;	O
rq1fac	O
=	O
1.	int
;	O
for	O
(	O
nq	O
=	O
1	int
;	O
nq	O
<=	O
5	int
;	O
++	O
nq	O
)	O
{	O
fnq	O
=	O
(	O
double	O
)	O
nq	O
;	O
nqp1	O
=	O
nq	O
+	O
1	int
;	O
pc	O
[	O
nqp1	O
-	O
1	int
]	O
=	O
0.	int
;	O
for	O
(	O
ib	O
=	O
1	int
;	O
ib	O
<=	O
nq	O
;	O
++	O
ib	O
)	O
{	O
i	O
=	O
nq	O
+	O
2	int
-	O
ib	O
;	O
pc	O
[	O
i	O
-	O
1	int
]	O
=	O
pc	O
[	O
i	O
-	O
2	int
]	O
+	O
fnq	O
*	O
pc	O
[	O
i	O
-	O
1	int
]	O
;	O
}	O
pc	O
[	O
0	int
]	O
=	O
fnq	O
*	O
pc	O
[	O
0	int
]	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
nqp1	O
;	O
++	O
i	O
)	O
elco	*(double)
[	O
i	O
+	O
nq	O
*	O
13	int
]	O
=	O
pc	O
[	O
i	O
-	O
1	int
]	O
/	O
pc	O
[	O
1	int
]	O
;	O
elco	*(double)
[	O
nq	O
*	O
13	int
+	O
2	int
]	O
=	O
1.	int
;	O
tesco	*(double)
[	O
nq	O
*	O
3	int
+	O
1	int
]	O
=	O
rq1fac	O
;	O
tesco	*(double)
[	O
nq	O
*	O
3	int
+	O
2	int
]	O
=	O
(	O
double	O
)	O
nqp1	O
/	O
elco	*(double)
[	O
nq	O
*	O
13	int
+	O
1	int
]	O
;	O
tesco	*(double)
[	O
nq	O
*	O
3	int
+	O
3	int
]	O
=	O
(	O
double	O
)	O
(	O
nq	O
+	O
2	int
)	O
/	O
elco	*(double)
[	O
nq	O
*	O
13	int
+	O
1	int
]	O
;	O
rq1fac	O
/=	O
fnq	O
;	O
}	O
return	O
0	int
;	O
}	O
int	O
intdy_	(*(double),long,*(double),*(long),*(double),*(long))->(int)
(	O
double	O
*	O
t	*(double)
,	O
long	O
k	*(long)
,	O
double	O
*	O
yh	*(double)
,	O
long	O
*	O
nyh	O
,	O
double	O
*	O
dky	O
,	O
long	O
*	O
iflag	O
)	O
{	O
long	O
yh_dim1	O
,	O
yh_offset	O
,	O
i__1	O
;	O
double	O
c	*(long)
;	O
long	O
i	O
,	O
j	O
;	O
double	O
r	*(long)
,	O
s	O
;	O
long	O
ic	*(long)
,	O
jb	O
,	O
jj	O
;	O
double	O
tp	O
;	O
long	O
jb2	O
,	O
jj1	O
,	O
jp1	O
;	O
--	O
dky	O
;	O
yh_dim1	O
=	O
*	O
nyh	O
;	O
yh_offset	O
=	O
yh_dim1	O
+	O
1	int
;	O
yh	*(double)
-=	O
yh_offset	O
;	O
*	O
iflag	O
=	O
0	int
;	O
if	O
(	O
k	*(long)
<	O
0	int
||	O
k	*(long)
>	O
nq	O
)	O
goto	O
L80	O
;	O
tp	O
=	O
tn	O
-	O
hu	O
-	O
uround	O
*	O
100.	int
*	O
(	O
tn	O
+	O
hu	O
)	O
;	O
if	O
(	O
(	O
*	O
t	*(double)
-	O
tp	O
)	O
*	O
(	O
*	O
t	*(double)
-	O
tn	O
)	O
>	O
0.	int
)	O
goto	O
L90	O
;	O
s	O
=	O
(	O
*	O
t	*(double)
-	O
tn	O
)	O
/	O
h	O
;	O
ic	*(long)
=	O
1	int
;	O
if	O
(	O
k	*(long)
==	O
0	int
)	O
{	O
goto	O
L15	O
;	O
}	O
jj1	O
=	O
l	*(long)
-	O
k	*(long)
;	O
i__1	O
=	O
nq	O
;	O
for	O
(	O
jj	O
=	O
jj1	O
;	O
jj	O
<=	O
i__1	O
;	O
++	O
jj	O
)	O
{	O
ic	*(long)
*=	O
jj	O
;	O
}	O
L15	O
:	O
c	*(long)
=	O
(	O
double	O
)	O
ic	*(long)
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
dky	O
[	O
i	O
]	O
=	O
c	*(long)
*	O
yh	*(double)
[	O
i	O
+	O
l	*(long)
*	O
yh_dim1	O
]	O
;	O
if	O
(	O
k	*(long)
==	O
nq	O
)	O
goto	O
L55	O
;	O
jb2	O
=	O
nq	O
-	O
k	*(long)
;	O
for	O
(	O
jb	O
=	O
1	int
;	O
jb	O
<=	O
jb2	O
;	O
++	O
jb	O
)	O
{	O
j	O
=	O
nq	O
-	O
jb	O
;	O
jp1	O
=	O
j	O
+	O
1	int
;	O
ic	*(long)
=	O
1	int
;	O
if	O
(	O
k	*(long)
!=	O
0	int
)	O
{	O
jj1	O
=	O
jp1	O
-	O
k	*(long)
;	O
for	O
(	O
jj	O
=	O
jj1	O
;	O
jj	O
<=	O
j	O
;	O
++	O
jj	O
)	O
ic	*(long)
*=	O
jj	O
;	O
}	O
c	*(long)
=	O
(	O
double	O
)	O
ic	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
dky	O
[	O
i	O
]	O
=	O
c	*(long)
*	O
yh	*(double)
[	O
i	O
+	O
jp1	O
*	O
yh_dim1	O
]	O
+	O
s	O
*	O
dky	O
[	O
i	O
]	O
;	O
}	O
if	O
(	O
k	*(long)
==	O
0	int
)	O
return	O
0	int
;	O
L55	O
:	O
r	*(long)
=	O
pow	(double,double)->(double)
(	O
h	O
,	O
(	O
double	O
)	O
-	O
k	*(long)
)	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
dky	O
[	O
i	O
]	O
=	O
r	*(long)
*	O
dky	O
[	O
i	O
]	O
;	O
return	O
0	int
;	O
L80	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"intdy--  k (=i1) illegal    "	*(char)
,	O
0	int
,	O
1	int
,	O
k	*(long)
,	O
0	int
,	O
0	int
,	O
0.0	int
,	O
0.0	int
)	O
;	O
*	O
iflag	O
=	O
-	O
1	int
;	O
return	O
0	int
;	O
L90	O
:	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"intdy--  t (=r1) illegal    "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
1	int
,	O
*	O
t	*(double)
,	O
0.0	int
)	O
;	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
"      t not in interval tcur - hu (= r1) to tcur (=r2)      "	*(char)
,	O
0	int
,	O
0	int
,	O
0	int
,	O
0	int
,	O
2	int
,	O
tp	O
,	O
tn	O
)	O
;	O
*	O
iflag	O
=	O
-	O
2	int
;	O
return	O
0	int
;	O
}	O
int	O
xerrwv	(*(char),long,long,long,long,long,double,double)->(int)
(	O
char	O
*	O
msg	O
,	O
long	O
level	O
,	O
long	O
ni	O
,	O
long	O
i1	O
,	O
long	O
i2	O
,	O
long	O
nr	O
,	O
double	O
r1	O
,	O
double	O
r2	O
)	O
{	O
long	O
mesflg	O
=	O
1	int
;	O
if	O
(	O
mesflg	O
==	O
0	int
)	O
goto	O
L100	O
;	O
printf	(*(char))->(int)
(	O
"%s\n"	*(char)
,	O
msg	O
)	O
;	O
if	O
(	O
ni	O
==	O
1	int
)	O
printf	(*(char))->(int)
(	O
" in above message, i1=%10ld\n"	*(char)
,	O
i1	O
)	O
;	O
if	O
(	O
ni	O
==	O
2	int
)	O
printf	(*(char))->(int)
(	O
" in above message, i1=%10ld, i2=%10ld\n"	*(char)
,	O
i1	O
,	O
i2	O
)	O
;	O
if	O
(	O
nr	O
==	O
1	int
)	O
printf	(*(char))->(int)
(	O
" in above message, r1=%21.13f\n"	*(char)
,	O
r1	O
)	O
;	O
if	O
(	O
nr	O
==	O
2	int
)	O
printf	(*(char))->(int)
(	O
" in above message, r1=%21.13f, r2=%21.13f\n"	*(char)
,	O
r1	O
,	O
r2	O
)	O
;	O
L100	O
:	O
if	O
(	O
level	O
!=	O
2	int
)	O
return	O
0	int
;	O
abort	()->(void)
(	O
)	O
;	O
return	O
0	int
;	O
}	O
int	O
iprep_	(*(long),*(double),*(double),*(long),*(long),*(long))->(int)
(	O
long	O
*	O
neq	*(long)
,	O
double	O
*	O
y	*(double)
,	O
double	O
*	O
rwork	*(double)
,	O
long	O
*	O
ia	*(long)
,	O
long	O
*	O
ja	*(long)
,	O
long	O
*	O
ipflag	O
)	O
{	O
long	O
i__1	O
;	O
long	O
imax	O
,	O
lyhd	O
,	O
lyhn	O
;	O
long	O
i	O
,	O
lewtn	O
;	O
--	O
ja	*(long)
;	O
--	O
ia	*(long)
;	O
--	O
rwork	*(double)
;	O
--	O
y	*(double)
;	O
--	O
neq	*(long)
;	O
*	O
ipflag	O
=	O
0	int
;	O
prep_	(*(long),*(double),*(double),*(double),*(double),*(double),*(long),*(long),*(double),*(long),*(long))->(int)
(	O
&	O
neq	*(long)
[	O
1	int
]	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
lyh	O
]	O
,	O
&	O
rwork	*(double)
[	O
lsavf	O
]	O
,	O
&	O
rwork	*(double)
[	O
lewt	O
]	O
,	O
&	O
rwork	*(double)
[	O
lacor	O
]	O
,	O
&	O
ia	*(long)
[	O
1	int
]	O
,	O
&	O
ja	*(long)
[	O
1	int
]	O
,	O
&	O
rwork	*(double)
[	O
lwm	O
]	O
,	O
(	O
long	O
*	O
)	O
&	O
rwork	*(double)
[	O
lwm	O
]	O
,	O
ipflag	O
)	O
;	O
lenwk	O
=	O
mymax	O
(	O
lreq	O
,	O
lwmin	O
)	O
;	O
if	O
(	O
*	O
ipflag	O
<	O
0	int
)	O
{	O
return	O
0	int
;	O
}	O
lyhn	O
=	O
lwm	O
+	O
lenwk	O
;	O
if	O
(	O
lyhn	O
>	O
lyh	O
)	O
{	O
return	O
0	int
;	O
}	O
lyhd	O
=	O
lyh	O
-	O
lyhn	O
;	O
if	O
(	O
lyhd	O
==	O
0	int
)	O
{	O
goto	O
L20	O
;	O
}	O
imax	O
=	O
lyhn	O
-	O
1	int
+	O
lenyhm	O
;	O
i__1	O
=	O
imax	O
;	O
for	O
(	O
i	O
=	O
lyhn	O
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
rwork	*(double)
[	O
i	O
]	O
=	O
rwork	*(double)
[	O
i	O
+	O
lyhd	O
]	O
;	O
}	O
lyh	O
=	O
lyhn	O
;	O
L20	O
:	O
lsavf	O
=	O
lyh	O
+	O
lenyh	O
;	O
lewtn	O
=	O
lsavf	O
+	O
n	*(long)
;	O
lacor	O
=	O
lewtn	O
+	O
n	*(long)
;	O
if	O
(	O
istatc	O
==	O
3	int
)	O
{	O
goto	O
L40	O
;	O
}	O
if	O
(	O
lewtn	O
>	O
lewt	O
)	O
{	O
return	O
0	int
;	O
}	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
rwork	*(double)
[	O
i	O
+	O
lewtn	O
-	O
1	int
]	O
=	O
rwork	*(double)
[	O
i	O
+	O
lewt	O
-	O
1	int
]	O
;	O
}	O
L40	O
:	O
lewt	O
=	O
lewtn	O
;	O
return	O
0	int
;	O
}	O
int	O
prep_	(*(long),*(double),*(double),*(double),*(double),*(double),*(long),*(long),*(double),*(long),*(long))->(int)
(	O
long	O
*	O
neq	*(long)
,	O
double	O
*	O
y	*(double)
,	O
double	O
*	O
yh	*(double)
,	O
double	O
*	O
savf	*(double)
,	O
double	O
*	O
ewt	*(double)
,	O
double	O
*	O
ftem	*(double)
,	O
long	O
*	O
ia	*(long)
,	O
long	O
*	O
ja	*(long)
,	O
double	O
*	O
wk	*(double)
,	O
long	O
*	O
iwk	*(long)
,	O
long	O
*	O
ipper	*(long)
)	O
{	O
long	O
i__1	O
,	O
i__2	O
;	O
double	O
d_sign	(*(double),*(double))->(double)
(	O
double	O
*	O
,	O
double	O
*	O
)	O
;	O
long	O
ldif	*(long)
,	O
ipil	O
,	O
knew	O
,	O
ipiu	O
,	O
kmax	O
,	O
kmin	O
,	O
liwk	O
,	O
maxg	*(long)
;	O
double	O
erwt	O
;	O
long	O
iptt1	O
,	O
iptt2	O
,	O
i	O
,	O
j	O
,	O
k	*(long)
;	O
long	O
nzsut	*(long)
;	O
double	O
dq	O
,	O
yj	O
;	O
long	O
lenigp	O
,	O
jfound	O
;	O
long	O
np1	O
;	O
double	O
fac	O
;	O
long	O
ibr	O
,	O
ier	*(long)
;	O
double	O
dyj	O
;	O
--	O
iwk	*(long)
;	O
--	O
wk	*(double)
;	O
--	O
ja	*(long)
;	O
--	O
ia	*(long)
;	O
--	O
ftem	*(double)
;	O
--	O
ewt	*(double)
;	O
--	O
savf	*(double)
;	O
--	O
yh	*(double)
;	O
--	O
y	*(double)
;	O
--	O
neq	*(long)
;	O
ibian	O
=	O
lrat	O
<<	O
1	int
;	O
ipian	O
=	O
ibian	O
+	O
1	int
;	O
np1	O
=	O
n	*(long)
+	O
1	int
;	O
ipjan	O
=	O
ipian	O
+	O
np1	O
;	O
ibjan	O
=	O
ipjan	O
-	O
1	int
;	O
liwk	O
=	O
lenwk	O
*	O
lrat	O
;	O
if	O
(	O
ipjan	O
+	O
n	*(long)
-	O
1	int
>	O
liwk	O
)	O
goto	O
L210	O
;	O
if	O
(	O
moss	O
==	O
0	int
)	O
goto	O
L30	O
;	O
if	O
(	O
istatc	O
==	O
3	int
)	O
goto	O
L20	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__1	O
;	O
++	O
i	O
)	O
{	O
erwt	O
=	O
1.	int
/	O
ewt	*(double)
[	O
i	O
]	O
;	O
fac	O
=	O
1.	int
/	O
(	O
(	O
double	O
)	O
i	O
+	O
1.	int
)	O
+	O
1.	int
;	O
y	*(double)
[	O
i	O
]	O
+=	O
fac	O
*	O
d_sign	(*(double),*(double))->(double)
(	O
&	O
erwt	O
,	O
&	O
y	*(double)
[	O
i	O
]	O
)	O
;	O
}	O
switch	O
(	O
moss	O
)	O
{	O
case	O
1	int
:	O
goto	O
L70	O
;	O
case	O
2	int
:	O
goto	O
L100	O
;	O
}	O
L20	O
:	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
yh	*(double)
[	O
i	O
]	O
;	O
switch	O
(	O
moss	O
)	O
{	O
case	O
1	int
:	O
goto	O
L70	O
;	O
case	O
2	int
:	O
goto	O
L100	O
;	O
}	O
L30	O
:	O
knew	O
=	O
ipjan	O
;	O
kmin	O
=	O
ia	*(long)
[	O
1	int
]	O
;	O
iwk	*(long)
[	O
ipian	O
]	O
=	O
1	int
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
i__1	O
;	O
++	O
j	O
)	O
{	O
jfound	O
=	O
0	int
;	O
kmax	O
=	O
ia	*(long)
[	O
j	O
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
kmin	O
>	O
kmax	O
)	O
goto	O
L45	O
;	O
i__2	O
=	O
kmax	O
;	O
for	O
(	O
k	*(long)
=	O
kmin	O
;	O
k	*(long)
<=	O
i__2	O
;	O
++	O
k	*(long)
)	O
{	O
i	O
=	O
ja	*(long)
[	O
k	*(long)
]	O
;	O
if	O
(	O
i	O
==	O
j	O
)	O
jfound	O
=	O
1	int
;	O
if	O
(	O
knew	O
>	O
liwk	O
)	O
goto	O
L210	O
;	O
iwk	*(long)
[	O
knew	O
]	O
=	O
i	O
;	O
++	O
knew	O
;	O
}	O
if	O
(	O
jfound	O
==	O
1	int
)	O
goto	O
L50	O
;	O
L45	O
:	O
if	O
(	O
knew	O
>	O
liwk	O
)	O
goto	O
L210	O
;	O
iwk	*(long)
[	O
knew	O
]	O
=	O
j	O
;	O
++	O
knew	O
;	O
L50	O
:	O
iwk	*(long)
[	O
ipian	O
+	O
j	O
]	O
=	O
knew	O
+	O
1	int
-	O
ipjan	O
;	O
kmin	O
=	O
kmax	O
+	O
1	int
;	O
}	O
goto	O
L140	O
;	O
L70	O
:	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
k	*(long)
=	O
ipjan	O
;	O
iwk	*(long)
[	O
ipian	O
]	O
=	O
1	int
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
i__1	O
;	O
++	O
j	O
)	O
{	O
if	O
(	O
k	*(long)
>	O
liwk	O
)	O
goto	O
L210	O
;	O
iwk	*(long)
[	O
k	*(long)
]	O
=	O
j	O
;	O
++	O
k	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
savf	*(double)
[	O
i	O
]	O
=	O
0.	int
;	O
CalcJacob	(*(double),array(double),long,array(double))->(void)
(	O
&	O
tn	O
,	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
j	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
)	O
;	O
i__2	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
{	O
if	O
(	O
fabs	(double)->(double)
(	O
savf	*(double)
[	O
i	O
]	O
)	O
<=	O
seth	O
)	O
goto	O
L80	O
;	O
if	O
(	O
i	O
==	O
j	O
)	O
goto	O
L80	O
;	O
if	O
(	O
k	*(long)
>	O
liwk	O
)	O
goto	O
L210	O
;	O
iwk	*(long)
[	O
k	*(long)
]	O
=	O
i	O
;	O
++	O
k	*(long)
;	O
L80	O
:	O
;	O
}	O
iwk	*(long)
[	O
ipian	O
+	O
j	O
]	O
=	O
k	*(long)
+	O
1	int
-	O
ipjan	O
;	O
}	O
goto	O
L140	O
;	O
L100	O
:	O
k	*(long)
=	O
ipjan	O
;	O
iwk	*(long)
[	O
ipian	O
]	O
=	O
1	int
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
savf	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
i__1	O
=	O
n	*(long)
;	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
i__1	O
;	O
++	O
j	O
)	O
{	O
if	O
(	O
k	*(long)
>	O
liwk	O
)	O
goto	O
L210	O
;	O
iwk	*(long)
[	O
k	*(long)
]	O
=	O
j	O
;	O
++	O
k	*(long)
;	O
yj	O
=	O
y	*(double)
[	O
j	O
]	O
;	O
erwt	O
=	O
1.	int
/	O
ewt	*(double)
[	O
j	O
]	O
;	O
dyj	O
=	O
d_sign	(*(double),*(double))->(double)
(	O
&	O
erwt	O
,	O
&	O
yj	O
)	O
;	O
y	*(double)
[	O
j	O
]	O
=	O
yj	O
+	O
dyj	O
;	O
CalcDeriv	(array(double),array(double),*(double))->(void)
(	O
&	O
y	*(double)
[	O
1	int
]	O
,	O
&	O
ftem	*(double)
[	O
1	int
]	O
,	O
&	O
tn	O
)	O
;	O
y	*(double)
[	O
j	O
]	O
=	O
yj	O
;	O
i__2	O
=	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
i__2	O
;	O
++	O
i	O
)	O
{	O
dq	O
=	O
(	O
ftem	*(double)
[	O
i	O
]	O
-	O
savf	*(double)
[	O
i	O
]	O
)	O
/	O
dyj	O
;	O
if	O
(	O
fabs	(double)->(double)
(	O
dq	O
)	O
<=	O
seth	O
)	O
goto	O
L110	O
;	O
if	O
(	O
i	O
==	O
j	O
)	O
goto	O
L110	O
;	O
if	O
(	O
k	*(long)
>	O
liwk	O
)	O
goto	O
L210	O
;	O
iwk	*(long)
[	O
k	*(long)
]	O
=	O
i	O
;	O
++	O
k	*(long)
;	O
L110	O
:	O
;	O
}	O
iwk	*(long)
[	O
ipian	O
+	O
j	O
]	O
=	O
k	*(long)
+	O
1	int
-	O
ipjan	O
;	O
}	O
L140	O
:	O
if	O
(	O
moss	O
==	O
0	int
||	O
istatc	O
!=	O
1	int
)	O
goto	O
L150	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
y	*(double)
[	O
i	O
]	O
=	O
yh	*(double)
[	O
i	O
]	O
;	O
L150	O
:	O
nnz	O
=	O
iwk	*(long)
[	O
ipian	O
+	O
n	*(long)
]	O
-	O
1	int
;	O
lenigp	O
=	O
0	int
;	O
ipigp	O
=	O
ipjan	O
+	O
nnz	O
;	O
if	O
(	O
miter	O
!=	O
2	int
)	O
goto	O
L160	O
;	O
maxg	*(long)
=	O
np1	O
;	O
ipjgp	O
=	O
ipjan	O
+	O
nnz	O
;	O
ibjgp	O
=	O
ipjgp	O
-	O
1	int
;	O
ipigp	O
=	O
ipjgp	O
+	O
n	*(long)
;	O
iptt1	O
=	O
ipigp	O
+	O
np1	O
;	O
iptt2	O
=	O
iptt1	O
+	O
n	*(long)
;	O
lreq	O
=	O
iptt2	O
+	O
n	*(long)
-	O
1	int
;	O
if	O
(	O
lreq	O
>	O
liwk	O
)	O
goto	O
L220	O
;	O
jgroup_	(*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipian	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjan	O
]	O
,	O
&	O
maxg	*(long)
,	O
&	O
ngp	O
,	O
&	O
iwk	*(long)
[	O
ipigp	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjgp	O
]	O
,	O
&	O
iwk	*(long)
[	O
iptt1	O
]	O
,	O
&	O
iwk	*(long)
[	O
iptt2	O
]	O
,	O
&	O
ier	*(long)
)	O
;	O
if	O
(	O
ier	*(long)
!=	O
0	int
)	O
goto	O
L220	O
;	O
lenigp	O
=	O
ngp	O
+	O
1	int
;	O
L160	O
:	O
ipr	O
=	O
ipigp	O
+	O
lenigp	O
;	O
ipc	O
=	O
ipr	O
;	O
ipic	O
=	O
ipc	O
+	O
n	*(long)
;	O
ipisp	O
=	O
ipic	O
+	O
n	*(long)
;	O
iprsp	O
=	O
(	O
ipisp	O
-	O
2	int
)	O
/	O
lrat	O
+	O
2	int
;	O
iesp	O
=	O
lenwk	O
+	O
1	int
-	O
iprsp	O
;	O
if	O
(	O
iesp	O
<	O
0	int
)	O
goto	O
L230	O
;	O
ibr	O
=	O
ipr	O
-	O
1	int
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
n	*(long)
;	O
++	O
i	O
)	O
iwk	*(long)
[	O
ibr	O
+	O
i	O
]	O
=	O
i	O
;	O
nsp	*(long)
=	O
liwk	O
+	O
1	int
-	O
ipisp	O
;	O
odrv_	(*(long),*(long),*(long),*(double),*(long),*(long),*(long),*(long),long,*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipian	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjan	O
]	O
,	O
&	O
wk	*(double)
[	O
1	int
]	O
,	O
&	O
iwk	*(long)
[	O
ipr	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipic	O
]	O
,	O
&	O
nsp	*(long)
,	O
&	O
iwk	*(long)
[	O
ipisp	O
]	O
,	O
1	int
,	O
&	O
iys	O
)	O
;	O
if	O
(	O
iys	O
==	O
n	*(long)
*	O
11	int
+	O
1	int
)	O
goto	O
L240	O
;	O
if	O
(	O
iys	O
!=	O
0	int
)	O
goto	O
L230	O
;	O
ipa	O
=	O
lenwk	O
+	O
1	int
-	O
nnz	O
;	O
nsp	*(long)
=	O
ipa	O
-	O
iprsp	O
;	O
i__1	O
=	O
n	*(long)
*	O
12	int
/	O
lrat	O
,	O
i__2	O
=	O
n	*(long)
*	O
6	int
/	O
lrat	O
+	O
(	O
n	*(long)
<<	O
1	int
)	O
+	O
nnz	O
;	O
lreq	O
=	O
mymax	O
(	O
i__1	O
,	O
i__2	O
)	O
+	O
3	int
;	O
lreq	O
=	O
lreq	O
+	O
iprsp	O
-	O
1	int
+	O
nnz	O
;	O
if	O
(	O
lreq	O
>	O
lenwk	O
)	O
goto	O
L250	O
;	O
iba	O
=	O
ipa	O
-	O
1	int
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
nnz	O
;	O
++	O
i	O
)	O
wk	*(double)
[	O
iba	O
+	O
i	O
]	O
=	O
0.0	int
;	O
ipisp	O
=	O
lrat	O
*	O
(	O
iprsp	O
-	O
1	int
)	O
+	O
1	int
;	O
cdrv_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(double),*(long),long,*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipr	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipc	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipic	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipian	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjan	O
]	O
,	O
&	O
wk	*(double)
[	O
ipa	O
]	O
,	O
&	O
wk	*(double)
[	O
ipa	O
]	O
,	O
&	O
wk	*(double)
[	O
ipa	O
]	O
,	O
&	O
nsp	*(long)
,	O
&	O
iwk	*(long)
[	O
ipisp	O
]	O
,	O
&	O
wk	*(double)
[	O
iprsp	O
]	O
,	O
&	O
iesp	O
,	O
5	int
,	O
&	O
iys	O
)	O
;	O
lreq	O
=	O
lenwk	O
-	O
iesp	O
;	O
if	O
(	O
iys	O
==	O
n	*(long)
*	O
10	int
+	O
1	int
)	O
goto	O
L250	O
;	O
if	O
(	O
iys	O
!=	O
0	int
)	O
goto	O
L260	O
;	O
ipil	O
=	O
ipisp	O
;	O
ipiu	O
=	O
ipil	O
+	O
(	O
n	*(long)
<<	O
1	int
)	O
+	O
1	int
;	O
nzu	O
=	O
iwk	*(long)
[	O
ipil	O
+	O
n	*(long)
]	O
-	O
iwk	*(long)
[	O
ipil	O
]	O
;	O
nzl	O
=	O
iwk	*(long)
[	O
ipiu	O
+	O
n	*(long)
]	O
-	O
iwk	*(long)
[	O
ipiu	O
]	O
;	O
if	O
(	O
lrat	O
>	O
1	int
)	O
goto	O
L190	O
;	O
adjlr_	(*(long),*(long),*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipisp	O
]	O
,	O
&	O
ldif	*(long)
)	O
;	O
lreq	O
+=	O
ldif	*(long)
;	O
L190	O
:	O
if	O
(	O
lrat	O
==	O
2	int
&&	O
nnz	O
==	O
n	*(long)
)	O
++	O
lreq	O
;	O
nsp	*(long)
=	O
nsp	*(long)
+	O
lreq	O
-	O
lenwk	O
;	O
ipa	O
=	O
lreq	O
+	O
1	int
-	O
nnz	O
;	O
iba	O
=	O
ipa	O
-	O
1	int
;	O
*	O
ipper	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
L210	O
:	O
*	O
ipper	*(long)
=	O
-	O
1	int
;	O
lreq	O
=	O
(	O
(	O
n	*(long)
<<	O
1	int
)	O
+	O
1	int
)	O
/	O
lrat	O
+	O
2	int
;	O
i__1	O
=	O
lenwk	O
+	O
1	int
;	O
lreq	O
=	O
mymax	O
(	O
i__1	O
,	O
lreq	O
)	O
;	O
return	O
0	int
;	O
L220	O
:	O
*	O
ipper	*(long)
=	O
-	O
2	int
;	O
lreq	O
=	O
(	O
lreq	O
-	O
1	int
)	O
/	O
lrat	O
+	O
1	int
;	O
return	O
0	int
;	O
L230	O
:	O
*	O
ipper	*(long)
=	O
-	O
3	int
;	O
cntnzu_	(*(long),*(long),*(long),*(long))->(int)
(	O
&	O
n	*(long)
,	O
&	O
iwk	*(long)
[	O
ipian	O
]	O
,	O
&	O
iwk	*(long)
[	O
ipjan	O
]	O
,	O
&	O
nzsut	*(long)
)	O
;	O
lreq	O
=	O
lenwk	O
-	O
iesp	O
+	O
(	O
n	*(long)
*	O
3	int
+	O
(	O
nzsut	*(long)
<<	O
2	int
)	O
-	O
1	int
)	O
/	O
lrat	O
+	O
1	int
;	O
return	O
0	int
;	O
L240	O
:	O
*	O
ipper	*(long)
=	O
-	O
4	int
;	O
return	O
0	int
;	O
L250	O
:	O
*	O
ipper	*(long)
=	O
-	O
5	int
;	O
return	O
0	int
;	O
L260	O
:	O
*	O
ipper	*(long)
=	O
-	O
6	int
;	O
lreq	O
=	O
lenwk	O
;	O
return	O
0	int
;	O
}	O
int	O
cntnzu_	(*(long),*(long),*(long),*(long))->(int)
(	O
long	O
*	O
n	*(long)
,	O
long	O
*	O
ia	*(long)
,	O
long	O
*	O
ja	*(long)
,	O
long	O
*	O
nzsut	*(long)
)	O
{	O
long	O
i__1	O
,	O
i__2	O
,	O
i__3	O
;	O
long	O
jmin	O
,	O
kmin	O
,	O
jmax	O
,	O
kmax	O
,	O
j	O
,	O
k	*(long)
,	O
ii	O
,	O
jj	O
,	O
num	O
;	O
--	O
ja	*(long)
;	O
--	O
ia	*(long)
;	O
num	O
=	O
0	int
;	O
i__1	O
=	O
*	O
n	*(long)
;	O
for	O
(	O
ii	O
=	O
1	int
;	O
ii	O
<=	O
i__1	O
;	O
++	O
ii	O
)	O
{	O
jmin	O
=	O
ia	*(long)
[	O
ii	O
]	O
;	O
jmax	O
=	O
ia	*(long)
[	O
ii	O
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
>	O
jmax	O
)	O
goto	O
L50	O
;	O
i__2	O
=	O
jmax	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
i__2	O
;	O
++	O
j	O
)	O
{	O
if	O
(	O
(	O
i__3	O
=	O
ja	*(long)
[	O
j	O
]	O
-	O
ii	O
)	O
<	O
0	int
)	O
{	O
goto	O
L10	O
;	O
}	O
else	O
{	O
if	O
(	O
i__3	O
==	O
0	int
)	O
{	O
goto	O
L40	O
;	O
}	O
else	O
{	O
goto	O
L30	O
;	O
}	O
}	O
L10	O
:	O
jj	O
=	O
ja	*(long)
[	O
j	O
]	O
;	O
kmin	O
=	O
ia	*(long)
[	O
jj	O
]	O
;	O
kmax	O
=	O
ia	*(long)
[	O
jj	O
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
kmin	O
>	O
kmax	O
)	O
goto	O
L30	O
;	O
i__3	O
=	O
kmax	O
;	O
for	O
(	O
k	*(long)
=	O
kmin	O
;	O
k	*(long)
<=	O
i__3	O
;	O
++	O
k	*(long)
)	O
{	O
if	O
(	O
ja	*(long)
[	O
k	*(long)
]	O
==	O
ii	O
)	O
goto	O
L40	O
;	O
}	O
L30	O
:	O
++	O
num	O
;	O
L40	O
:	O
;	O
}	O
L50	O
:	O
;	O
}	O
*	O
nzsut	*(long)
=	O
num	O
;	O
return	O
0	int
;	O
}	O
int	O
adjlr_	(*(long),*(long),*(long))->(int)
(	O
long	O
*	O
n	*(long)
,	O
long	O
*	O
isp	*(long)
,	O
long	O
*	O
ldif	*(long)
)	O
{	O
long	O
lnfc	O
,	O
lsfc	O
,	O
nzlu	O
,	O
jlmax	*(long)
,	O
jumax	*(long)
,	O
ip	*(long)
;	O
--	O
isp	*(long)
;	O
ip	*(long)
=	O
(	O
*	O
n	*(long)
<<	O
1	int
)	O
+	O
1	int
;	O
jlmax	*(long)
=	O
isp	*(long)
[	O
ip	*(long)
]	O
;	O
jumax	*(long)
=	O
isp	*(long)
[	O
ip	*(long)
+	O
ip	*(long)
]	O
;	O
nzlu	O
=	O
isp	*(long)
[	O
*	O
n	*(long)
+	O
1	int
]	O
-	O
isp	*(long)
[	O
1	int
]	O
+	O
isp	*(long)
[	O
ip	*(long)
+	O
*	O
n	*(long)
+	O
1	int
]	O
-	O
isp	*(long)
[	O
ip	*(long)
+	O
1	int
]	O
;	O
lsfc	O
=	O
*	O
n	*(long)
*	O
12	int
+	O
3	int
+	O
(	O
mymax	O
(	O
jlmax	*(long)
,	O
jumax	*(long)
)	O
<<	O
1	int
)	O
;	O
lnfc	O
=	O
*	O
n	*(long)
*	O
9	int
+	O
2	int
+	O
jlmax	*(long)
+	O
jumax	*(long)
+	O
nzlu	O
;	O
*	O
ldif	*(long)
=	O
lsfc	O
-	O
lnfc	O
;	O
if	O
(	O
*	O
ldif	*(long)
<	O
0	int
)	O
*	O
ldif	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
int	O
cdrv_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(double),*(long),long,*(long))->(int)
(	O
long	O
*	O
n	*(long)
,	O
long	O
*	O
r	*(long)
,	O
long	O
*	O
c	*(long)
,	O
long	O
*	O
ic	*(long)
,	O
long	O
*	O
ia	*(long)
,	O
long	O
*	O
ja	*(long)
,	O
double	O
*	O
a	*(double)
,	O
double	O
*	O
b	*(double)
,	O
double	O
*	O
z	*(double)
,	O
long	O
*	O
nsp	*(long)
,	O
long	O
*	O
isp	*(long)
,	O
double	O
*	O
rsp	*(double)
,	O
long	O
*	O
esp	*(long)
,	O
long	O
path	long
,	O
long	O
*	O
flag_	*(long)
)	O
{	O
long	O
irac	*(long)
;	O
long	O
lmax	*(long)
,	O
umax	*(long)
,	O
d	*(double)
,	O
i	O
,	O
j	O
,	O
l	*(long)
,	O
q	*(long)
,	O
u	*(double)
,	O
jlmax	*(long)
,	O
jumax	*(long)
,	O
jutmp	O
,	O
ar	*(double)
,	O
il	*(long)
,	O
jl	*(long)
,	O
iu	*(long)
,	O
ju	*(long)
,	O
ira	*(long)
,	O
jra	*(long)
,	O
ijl	*(long)
,	O
max_	*(long)
,	O
irl	*(long)
,	O
iju	*(long)
,	O
jrl	*(long)
,	O
iru	*(long)
,	O
tmp	*(double)
,	O
jru	*(long)
,	O
row	*(double)
;	O
long	O
lratio	O
;	O
lratio	O
=	O
sizeof	O
(	O
double	O
)	O
/	O
sizeof	O
(	O
long	O
)	O
;	O
if	O
(	O
lratio	O
<	O
1	int
)	O
lratio	O
=	O
1	int
;	O
--	O
rsp	*(double)
;	O
--	O
isp	*(long)
;	O
--	O
z	*(double)
;	O
--	O
b	*(double)
;	O
--	O
a	*(double)
;	O
--	O
ja	*(long)
;	O
--	O
ia	*(long)
;	O
--	O
ic	*(long)
;	O
--	O
c	*(long)
;	O
--	O
r	*(long)
;	O
if	O
(	O
path	long
<	O
1	int
||	O
5	int
<	O
path	long
)	O
{	O
*	O
flag_	*(long)
=	O
*	O
n	*(long)
*	O
11	int
+	O
1	int
;	O
return	O
0	int
;	O
}	O
il	*(long)
=	O
1	int
;	O
ijl	*(long)
=	O
il	*(long)
+	O
(	O
*	O
n	*(long)
+	O
1	int
)	O
;	O
iu	*(long)
=	O
ijl	*(long)
+	O
*	O
n	*(long)
;	O
iju	*(long)
=	O
iu	*(long)
+	O
(	O
*	O
n	*(long)
+	O
1	int
)	O
;	O
irl	*(long)
=	O
iju	*(long)
+	O
*	O
n	*(long)
;	O
jrl	*(long)
=	O
irl	*(long)
+	O
*	O
n	*(long)
;	O
jl	*(long)
=	O
jrl	*(long)
+	O
*	O
n	*(long)
;	O
if	O
(	O
(	O
path	long
-	O
1	int
)	O
*	O
(	O
path	long
-	O
5	int
)	O
!=	O
0	int
)	O
goto	O
L5	O
;	O
max_	*(long)
=	O
lratio	O
*	O
*	O
nsp	*(long)
+	O
1	int
-	O
jl	*(long)
-	O
(	O
*	O
n	*(long)
+	O
1	int
)	O
-	O
*	O
n	*(long)
*	O
5	int
;	O
jlmax	*(long)
=	O
max_	*(long)
/	O
2	int
;	O
q	*(long)
=	O
jl	*(long)
+	O
jlmax	*(long)
;	O
ira	*(long)
=	O
q	*(long)
+	O
(	O
*	O
n	*(long)
+	O
1	int
)	O
;	O
jra	*(long)
=	O
ira	*(long)
+	O
*	O
n	*(long)
;	O
irac	*(long)
=	O
jra	*(long)
+	O
*	O
n	*(long)
;	O
iru	*(long)
=	O
irac	*(long)
+	O
*	O
n	*(long)
;	O
jru	*(long)
=	O
iru	*(long)
+	O
*	O
n	*(long)
;	O
jutmp	O
=	O
jru	*(long)
+	O
*	O
n	*(long)
;	O
jumax	*(long)
=	O
lratio	O
*	O
*	O
nsp	*(long)
+	O
1	int
-	O
jutmp	O
;	O
*	O
esp	*(long)
=	O
max_	*(long)
/	O
lratio	O
;	O
if	O
(	O
jlmax	*(long)
<=	O
0	int
||	O
jumax	*(long)
<=	O
0	int
)	O
goto	O
L110	O
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
*	O
n	*(long)
;	O
++	O
i	O
)	O
if	O
(	O
c	*(long)
[	O
i	O
]	O
!=	O
i	O
)	O
goto	O
L2	O
;	O
goto	O
L3	O
;	O
L2	O
:	O
ar	*(double)
=	O
*	O
nsp	*(long)
+	O
1	int
-	O
*	O
n	*(long)
;	O
nroc_	(*(long),*(long),*(long),*(long),*(double),*(long),*(double),*(long),*(long))->(int)
(	O
n	*(long)
,	O
&	O
ic	*(long)
[	O
1	int
]	O
,	O
&	O
ia	*(long)
[	O
1	int
]	O
,	O
&	O
ja	*(long)
[	O
1	int
]	O
,	O
&	O
a	*(double)
[	O
1	int
]	O
,	O
&	O
isp	*(long)
[	O
il	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
ar	*(double)
]	O
,	O
&	O
isp	*(long)
[	O
iu	*(long)
]	O
,	O
flag_	*(long)
)	O
;	O
if	O
(	O
*	O
flag_	*(long)
!=	O
0	int
)	O
goto	O
L100	O
;	O
L3	O
:	O
nsfc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long),*(long))->(int)
(	O
n	*(long)
,	O
&	O
r	*(long)
[	O
1	int
]	O
,	O
&	O
ic	*(long)
[	O
1	int
]	O
,	O
&	O
ia	*(long)
[	O
1	int
]	O
,	O
&	O
ja	*(long)
[	O
1	int
]	O
,	O
&	O
jlmax	*(long)
,	O
&	O
isp	*(long)
[	O
il	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ijl	*(long)
]	O
,	O
&	O
jumax	*(long)
,	O
&	O
isp	*(long)
[	O
iu	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jutmp	O
]	O
,	O
&	O
isp	*(long)
[	O
iju	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
q	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ira	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jra	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
irac	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
irl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jrl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
iru	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jru	*(long)
]	O
,	O
flag_	*(long)
)	O
;	O
if	O
(	O
*	O
flag_	*(long)
!=	O
0	int
)	O
{	O
goto	O
L100	O
;	O
}	O
jlmax	*(long)
=	O
isp	*(long)
[	O
ijl	*(long)
+	O
*	O
n	*(long)
-	O
1	int
]	O
;	O
ju	*(long)
=	O
jl	*(long)
+	O
jlmax	*(long)
;	O
jumax	*(long)
=	O
isp	*(long)
[	O
iju	*(long)
+	O
*	O
n	*(long)
-	O
1	int
]	O
;	O
if	O
(	O
jumax	*(long)
<=	O
0	int
)	O
{	O
goto	O
L5	O
;	O
}	O
for	O
(	O
j	O
=	O
1	int
;	O
j	O
<=	O
jumax	*(long)
;	O
++	O
j	O
)	O
{	O
isp	*(long)
[	O
ju	*(long)
+	O
j	O
-	O
1	int
]	O
=	O
isp	*(long)
[	O
jutmp	O
+	O
j	O
-	O
1	int
]	O
;	O
}	O
L5	O
:	O
jlmax	*(long)
=	O
isp	*(long)
[	O
ijl	*(long)
+	O
*	O
n	*(long)
-	O
1	int
]	O
;	O
ju	*(long)
=	O
jl	*(long)
+	O
jlmax	*(long)
;	O
jumax	*(long)
=	O
isp	*(long)
[	O
iju	*(long)
+	O
*	O
n	*(long)
-	O
1	int
]	O
;	O
l	*(long)
=	O
(	O
ju	*(long)
+	O
jumax	*(long)
-	O
2	int
+	O
lratio	O
)	O
/	O
lratio	O
+	O
1	int
;	O
lmax	*(long)
=	O
isp	*(long)
[	O
il	*(long)
+	O
*	O
n	*(long)
]	O
-	O
1	int
;	O
d	*(double)
=	O
l	*(long)
+	O
lmax	*(long)
;	O
u	*(double)
=	O
d	*(double)
+	O
*	O
n	*(long)
;	O
row	*(double)
=	O
*	O
nsp	*(long)
+	O
1	int
-	O
*	O
n	*(long)
;	O
tmp	*(double)
=	O
row	*(double)
-	O
*	O
n	*(long)
;	O
umax	*(long)
=	O
tmp	*(double)
-	O
u	*(double)
;	O
*	O
esp	*(long)
=	O
umax	*(long)
-	O
(	O
isp	*(long)
[	O
iu	*(long)
+	O
*	O
n	*(long)
]	O
-	O
1	int
)	O
;	O
if	O
(	O
(	O
path	long
-	O
1	int
)	O
*	O
(	O
path	long
-	O
2	int
)	O
!=	O
0	int
)	O
goto	O
L6	O
;	O
if	O
(	O
umax	*(long)
<	O
0	int
)	O
goto	O
L110	O
;	O
nnfc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(long),*(long),*(double),*(double),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(long))->(int)
(	O
n	*(long)
,	O
&	O
r	*(long)
[	O
1	int
]	O
,	O
&	O
c	*(long)
[	O
1	int
]	O
,	O
&	O
ic	*(long)
[	O
1	int
]	O
,	O
&	O
ia	*(long)
[	O
1	int
]	O
,	O
&	O
ja	*(long)
[	O
1	int
]	O
,	O
&	O
a	*(double)
[	O
1	int
]	O
,	O
&	O
z	*(double)
[	O
1	int
]	O
,	O
&	O
b	*(double)
[	O
1	int
]	O
,	O
&	O
lmax	*(long)
,	O
&	O
isp	*(long)
[	O
il	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ijl	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
l	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
d	*(double)
]	O
,	O
&	O
umax	*(long)
,	O
&	O
isp	*(long)
[	O
iu	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ju	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
iju	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
u	*(double)
]	O
,	O
&	O
rsp	*(double)
[	O
row	*(double)
]	O
,	O
&	O
rsp	*(double)
[	O
tmp	*(double)
]	O
,	O
&	O
isp	*(long)
[	O
irl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jrl	*(long)
]	O
,	O
flag_	*(long)
)	O
;	O
if	O
(	O
*	O
flag_	*(long)
!=	O
0	int
)	O
goto	O
L100	O
;	O
L6	O
:	O
if	O
(	O
path	long
-	O
3	int
!=	O
0	int
)	O
goto	O
L7	O
;	O
nnsc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(long),*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
n	*(long)
,	O
&	O
r	*(long)
[	O
1	int
]	O
,	O
&	O
c	*(long)
[	O
1	int
]	O
,	O
&	O
isp	*(long)
[	O
il	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ijl	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
l	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
d	*(double)
]	O
,	O
&	O
isp	*(long)
[	O
iu	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ju	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
iju	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
u	*(double)
]	O
,	O
&	O
z	*(double)
[	O
1	int
]	O
,	O
&	O
b	*(double)
[	O
1	int
]	O
,	O
&	O
rsp	*(double)
[	O
tmp	*(double)
]	O
)	O
;	O
L7	O
:	O
if	O
(	O
path	long
-	O
4	int
!=	O
0	int
)	O
goto	O
L8	O
;	O
nntc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(long),*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
n	*(long)
,	O
&	O
r	*(long)
[	O
1	int
]	O
,	O
&	O
c	*(long)
[	O
1	int
]	O
,	O
&	O
isp	*(long)
[	O
il	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
jl	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ijl	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
l	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
d	*(double)
]	O
,	O
&	O
isp	*(long)
[	O
iu	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
ju	*(long)
]	O
,	O
&	O
isp	*(long)
[	O
iju	*(long)
]	O
,	O
&	O
rsp	*(double)
[	O
u	*(double)
]	O
,	O
&	O
z	*(double)
[	O
1	int
]	O
,	O
&	O
b	*(double)
[	O
0	int
]	O
,	O
&	O
rsp	*(double)
[	O
tmp	*(double)
]	O
)	O
;	O
L8	O
:	O
return	O
0	int
;	O
L100	O
:	O
return	O
0	int
;	O
L110	O
:	O
*	O
flag_	*(long)
=	O
*	O
n	*(long)
*	O
10	int
+	O
1	int
;	O
return	O
0	int
;	O
}	O
int	O
nntc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(long),*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
long	O
*	O
n	*(long)
,	O
long	O
*	O
r	*(long)
,	O
long	O
*	O
c	*(long)
,	O
long	O
*	O
il	*(long)
,	O
long	O
*	O
jl	*(long)
,	O
long	O
*	O
ijl	*(long)
,	O
double	O
*	O
l	*(long)
,	O
double	O
*	O
d	*(double)
,	O
long	O
*	O
iu	*(long)
,	O
long	O
*	O
ju	*(long)
,	O
long	O
*	O
iju	*(long)
,	O
double	O
*	O
u	*(double)
,	O
double	O
*	O
z	*(double)
,	O
double	O
*	O
b	*(double)
,	O
double	O
*	O
tmp	*(double)
)	O
{	O
long	O
jmin	O
,	O
jmax	O
;	O
double	O
tmpk	O
;	O
long	O
i	O
,	O
j	O
,	O
k	*(long)
,	O
ml	O
,	O
mu	double
;	O
double	O
sum	O
;	O
for	O
(	O
k	*(long)
=	O
0	int
;	O
k	*(long)
<	O
*	O
n	*(long)
;	O
++	O
k	*(long)
)	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
b	*(double)
[	O
c	*(long)
[	O
k	*(long)
]	O
]	O
;	O
for	O
(	O
k	*(long)
=	O
0	int
;	O
k	*(long)
<	O
*	O
n	*(long)
;	O
++	O
k	*(long)
)	O
{	O
jmin	O
=	O
iu	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
iu	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
1	int
;	O
tmpk	O
=	O
-	O
tmp	*(double)
[	O
k	*(long)
]	O
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
mu	double
=	O
iju	*(long)
[	O
k	*(long)
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
-	O
1	int
;	O
j	O
<	O
jmax	O
;	O
++	O
j	O
)	O
tmp	*(double)
[	O
ju	*(long)
[	O
mu	double
+	O
j	O
]	O
-	O
1	int
]	O
+=	O
tmpk	O
*	O
u	*(double)
[	O
j	O
]	O
;	O
}	O
}	O
k	*(long)
=	O
*	O
n	*(long)
-	O
1	int
;	O
for	O
(	O
i	O
=	O
0	int
;	O
i	O
<	O
*	O
n	*(long)
;	O
++	O
i	O
)	O
{	O
sum	O
=	O
-	O
tmp	*(double)
[	O
k	*(long)
]	O
;	O
jmin	O
=	O
il	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
il	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
ml	O
=	O
ijl	*(long)
[	O
k	*(long)
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
-	O
1	int
;	O
j	O
<	O
jmax	O
;	O
++	O
j	O
)	O
sum	O
+=	O
l	*(long)
[	O
j	O
]	O
*	O
tmp	*(double)
[	O
jl	*(long)
[	O
ml	O
+	O
j	O
]	O
-	O
1	int
]	O
;	O
}	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
-	O
sum	O
*	O
d	*(double)
[	O
k	*(long)
]	O
;	O
z	*(double)
[	O
r	*(long)
[	O
k	*(long)
]	O
-	O
1	int
]	O
=	O
tmp	*(double)
[	O
k	*(long)
]	O
;	O
--	O
k	*(long)
;	O
}	O
return	O
0	int
;	O
}	O
int	O
nnsc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(long),*(long),*(long),*(double),*(double),*(double),*(double))->(int)
(	O
long	O
*	O
n	*(long)
,	O
long	O
*	O
r	*(long)
,	O
long	O
*	O
c	*(long)
,	O
long	O
*	O
il	*(long)
,	O
long	O
*	O
jl	*(long)
,	O
long	O
*	O
ijl	*(long)
,	O
double	O
*	O
l	*(long)
,	O
double	O
*	O
d	*(double)
,	O
long	O
*	O
iu	*(long)
,	O
long	O
*	O
ju	*(long)
,	O
long	O
*	O
iju	*(long)
,	O
double	O
*	O
u	*(double)
,	O
double	O
*	O
z	*(double)
,	O
double	O
*	O
b	*(double)
,	O
double	O
*	O
tmp	*(double)
)	O
{	O
long	O
jmin	O
,	O
jmax	O
;	O
double	O
tmpk	O
;	O
long	O
i	O
,	O
j	O
,	O
k	*(long)
,	O
ml	O
,	O
mu	double
;	O
double	O
sum	O
;	O
--	O
tmp	*(double)
;	O
--	O
b	*(double)
;	O
--	O
z	*(double)
;	O
--	O
u	*(double)
;	O
--	O
iju	*(long)
;	O
--	O
ju	*(long)
;	O
--	O
iu	*(long)
;	O
--	O
d	*(double)
;	O
--	O
l	*(long)
;	O
--	O
ijl	*(long)
;	O
--	O
jl	*(long)
;	O
--	O
il	*(long)
;	O
--	O
c	*(long)
;	O
--	O
r	*(long)
;	O
for	O
(	O
k	*(long)
=	O
1	int
;	O
k	*(long)
<=	O
*	O
n	*(long)
;	O
++	O
k	*(long)
)	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
b	*(double)
[	O
r	*(long)
[	O
k	*(long)
]	O
]	O
;	O
for	O
(	O
k	*(long)
=	O
1	int
;	O
k	*(long)
<=	O
*	O
n	*(long)
;	O
++	O
k	*(long)
)	O
{	O
jmin	O
=	O
il	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
il	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
1	int
;	O
tmpk	O
=	O
-	O
d	*(double)
[	O
k	*(long)
]	O
*	O
tmp	*(double)
[	O
k	*(long)
]	O
;	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
-	O
tmpk	O
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
ml	O
=	O
ijl	*(long)
[	O
k	*(long)
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
tmp	*(double)
[	O
jl	*(long)
[	O
ml	O
+	O
j	O
]	O
]	O
+=	O
tmpk	O
*	O
l	*(long)
[	O
j	O
]	O
;	O
}	O
}	O
k	*(long)
=	O
*	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
*	O
n	*(long)
;	O
++	O
i	O
)	O
{	O
sum	O
=	O
-	O
tmp	*(double)
[	O
k	*(long)
]	O
;	O
jmin	O
=	O
iu	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
iu	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
mu	double
=	O
iju	*(long)
[	O
k	*(long)
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
sum	O
+=	O
u	*(double)
[	O
j	O
]	O
*	O
tmp	*(double)
[	O
ju	*(long)
[	O
mu	double
+	O
j	O
]	O
]	O
;	O
}	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
-	O
sum	O
;	O
z	*(double)
[	O
c	*(long)
[	O
k	*(long)
]	O
]	O
=	O
-	O
sum	O
;	O
--	O
k	*(long)
;	O
}	O
return	O
0	int
;	O
}	O
int	O
nnfc_	(*(long),*(long),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(long),*(long),*(double),*(double),*(long),*(long),*(long),*(long),*(double),*(double),*(double),*(long),*(long),*(long))->(int)
(	O
long	O
*	O
n	*(long)
,	O
long	O
*	O
r	*(long)
,	O
long	O
*	O
c	*(long)
,	O
long	O
*	O
ic	*(long)
,	O
long	O
*	O
ia	*(long)
,	O
long	O
*	O
ja	*(long)
,	O
double	O
*	O
a	*(double)
,	O
double	O
*	O
z	*(double)
,	O
double	O
*	O
b	*(double)
,	O
long	O
*	O
lmax	*(long)
,	O
long	O
*	O
il	*(long)
,	O
long	O
*	O
jl	*(long)
,	O
long	O
*	O
ijl	*(long)
,	O
double	O
*	O
l	*(long)
,	O
double	O
*	O
d	*(double)
,	O
long	O
*	O
umax	*(long)
,	O
long	O
*	O
iu	*(long)
,	O
long	O
*	O
ju	*(long)
,	O
long	O
*	O
iju	*(long)
,	O
double	O
*	O
u	*(double)
,	O
double	O
*	O
row	*(double)
,	O
double	O
*	O
tmp	*(double)
,	O
long	O
*	O
irl	*(long)
,	O
long	O
*	O
jrl	*(long)
,	O
long	O
*	O
flag_	*(long)
)	O
{	O
long	O
ijlb	O
,	O
jmin	O
,	O
jmax	O
,	O
i	O
,	O
j	O
,	O
k	*(long)
,	O
i1	O
,	O
i2	O
;	O
double	O
dk	O
;	O
long	O
rk	O
,	O
mu	double
;	O
double	O
lki	O
,	O
sum	O
;	O
--	O
jrl	*(long)
;	O
--	O
irl	*(long)
;	O
--	O
tmp	*(double)
;	O
--	O
row	*(double)
;	O
--	O
u	*(double)
;	O
--	O
iju	*(long)
;	O
--	O
ju	*(long)
;	O
--	O
iu	*(long)
;	O
--	O
d	*(double)
;	O
--	O
l	*(long)
;	O
--	O
ijl	*(long)
;	O
--	O
jl	*(long)
;	O
--	O
il	*(long)
;	O
--	O
b	*(double)
;	O
--	O
z	*(double)
;	O
--	O
a	*(double)
;	O
--	O
ja	*(long)
;	O
--	O
ia	*(long)
;	O
--	O
ic	*(long)
;	O
--	O
c	*(long)
;	O
--	O
r	*(long)
;	O
if	O
(	O
il	*(long)
[	O
*	O
n	*(long)
+	O
1	int
]	O
-	O
1	int
>	O
*	O
lmax	*(long)
)	O
{	O
*	O
flag_	*(long)
=	O
(	O
*	O
n	*(long)
<<	O
2	int
)	O
+	O
1	int
;	O
return	O
0	int
;	O
}	O
if	O
(	O
iu	*(long)
[	O
*	O
n	*(long)
+	O
1	int
]	O
-	O
1	int
>	O
*	O
umax	*(long)
)	O
{	O
*	O
flag_	*(long)
=	O
(	O
*	O
n	*(long)
)	O
*	O
7	int
+	O
1	int
;	O
return	O
0	int
;	O
}	O
for	O
(	O
k	*(long)
=	O
1	int
;	O
k	*(long)
<=	O
*	O
n	*(long)
;	O
++	O
k	*(long)
)	O
{	O
irl	*(long)
[	O
k	*(long)
]	O
=	O
il	*(long)
[	O
k	*(long)
]	O
;	O
jrl	*(long)
[	O
k	*(long)
]	O
=	O
0	int
;	O
}	O
for	O
(	O
k	*(long)
=	O
1	int
;	O
k	*(long)
<=	O
*	O
n	*(long)
;	O
++	O
k	*(long)
)	O
{	O
row	*(double)
[	O
k	*(long)
]	O
=	O
0.	int
;	O
i1	O
=	O
0	int
;	O
if	O
(	O
jrl	*(long)
[	O
k	*(long)
]	O
==	O
0	int
)	O
goto	O
L3	O
;	O
i	O
=	O
jrl	*(long)
[	O
k	*(long)
]	O
;	O
L2	O
:	O
i2	O
=	O
jrl	*(long)
[	O
i	O
]	O
;	O
jrl	*(long)
[	O
i	O
]	O
=	O
i1	O
;	O
i1	O
=	O
i	O
;	O
row	*(double)
[	O
i	O
]	O
=	O
0.	int
;	O
i	O
=	O
i2	O
;	O
if	O
(	O
i	O
!=	O
0	int
)	O
goto	O
L2	O
;	O
L3	O
:	O
jmin	O
=	O
iju	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
jmin	O
+	O
iu	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
iu	*(long)
[	O
k	*(long)
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
row	*(double)
[	O
ju	*(long)
[	O
j	O
]	O
]	O
=	O
0.	int
;	O
rk	O
=	O
r	*(long)
[	O
k	*(long)
]	O
;	O
jmin	O
=	O
ia	*(long)
[	O
rk	O
]	O
;	O
jmax	O
=	O
ia	*(long)
[	O
rk	O
+	O
1	int
]	O
-	O
1	int
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
row	*(double)
[	O
ic	*(long)
[	O
ja	*(long)
[	O
j	O
]	O
]	O
]	O
=	O
a	*(double)
[	O
j	O
]	O
;	O
sum	O
=	O
b	*(double)
[	O
rk	O
]	O
;	O
i	O
=	O
i1	O
;	O
if	O
(	O
i	O
==	O
0	int
)	O
goto	O
L10	O
;	O
L7	O
:	O
lki	O
=	O
-	O
row	*(double)
[	O
i	O
]	O
;	O
l	*(long)
[	O
irl	*(long)
[	O
i	O
]	O
]	O
=	O
-	O
lki	O
;	O
sum	O
+=	O
lki	O
*	O
tmp	*(double)
[	O
i	O
]	O
;	O
jmin	O
=	O
iu	*(long)
[	O
i	O
]	O
;	O
jmax	O
=	O
iu	*(long)
[	O
i	O
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
mu	double
=	O
iju	*(long)
[	O
i	O
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
row	*(double)
[	O
ju	*(long)
[	O
mu	double
+	O
j	O
]	O
]	O
+=	O
lki	O
*	O
u	*(double)
[	O
j	O
]	O
;	O
}	O
i	O
=	O
jrl	*(long)
[	O
i	O
]	O
;	O
if	O
(	O
i	O
!=	O
0	int
)	O
goto	O
L7	O
;	O
L10	O
:	O
if	O
(	O
row	*(double)
[	O
k	*(long)
]	O
==	O
0.	int
)	O
{	O
*	O
flag_	*(long)
=	O
(	O
*	O
n	*(long)
<<	O
3	int
)	O
+	O
k	*(long)
;	O
return	O
0	int
;	O
}	O
dk	O
=	O
1.0	int
/	O
row	*(double)
[	O
k	*(long)
]	O
;	O
d	*(double)
[	O
k	*(long)
]	O
=	O
dk	O
;	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
sum	O
*	O
dk	O
;	O
if	O
(	O
k	*(long)
==	O
*	O
n	*(long)
)	O
break	O
;	O
jmin	O
=	O
iu	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
iu	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
mu	double
=	O
iju	*(long)
[	O
k	*(long)
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
u	*(double)
[	O
j	O
]	O
=	O
row	*(double)
[	O
ju	*(long)
[	O
mu	double
+	O
j	O
]	O
]	O
*	O
dk	O
;	O
}	O
i	O
=	O
i1	O
;	O
if	O
(	O
i	O
==	O
0	int
)	O
goto	O
L18	O
;	O
L14	O
:	O
++	O
irl	*(long)
[	O
i	O
]	O
;	O
i1	O
=	O
jrl	*(long)
[	O
i	O
]	O
;	O
if	O
(	O
irl	*(long)
[	O
i	O
]	O
>=	O
il	*(long)
[	O
i	O
+	O
1	int
]	O
)	O
goto	O
L17	O
;	O
ijlb	O
=	O
irl	*(long)
[	O
i	O
]	O
-	O
il	*(long)
[	O
i	O
]	O
+	O
ijl	*(long)
[	O
i	O
]	O
;	O
j	O
=	O
jl	*(long)
[	O
ijlb	O
]	O
;	O
L15	O
:	O
if	O
(	O
i	O
>	O
jrl	*(long)
[	O
j	O
]	O
)	O
goto	O
L16	O
;	O
j	O
=	O
jrl	*(long)
[	O
j	O
]	O
;	O
goto	O
L15	O
;	O
L16	O
:	O
jrl	*(long)
[	O
i	O
]	O
=	O
jrl	*(long)
[	O
j	O
]	O
;	O
jrl	*(long)
[	O
j	O
]	O
=	O
i	O
;	O
L17	O
:	O
i	O
=	O
i1	O
;	O
if	O
(	O
i	O
!=	O
0	int
)	O
goto	O
L14	O
;	O
L18	O
:	O
if	O
(	O
irl	*(long)
[	O
k	*(long)
]	O
<	O
il	*(long)
[	O
k	*(long)
+	O
1	int
]	O
)	O
{	O
j	O
=	O
jl	*(long)
[	O
ijl	*(long)
[	O
k	*(long)
]	O
]	O
;	O
jrl	*(long)
[	O
k	*(long)
]	O
=	O
jrl	*(long)
[	O
j	O
]	O
;	O
jrl	*(long)
[	O
j	O
]	O
=	O
k	*(long)
;	O
}	O
}	O
k	*(long)
=	O
*	O
n	*(long)
;	O
for	O
(	O
i	O
=	O
1	int
;	O
i	O
<=	O
*	O
n	*(long)
;	O
++	O
i	O
)	O
{	O
sum	O
=	O
tmp	*(double)
[	O
k	*(long)
]	O
;	O
jmin	O
=	O
iu	*(long)
[	O
k	*(long)
]	O
;	O
jmax	O
=	O
iu	*(long)
[	O
k	*(long)
+	O
1	int
]	O
-	O
1	int
;	O
if	O
(	O
jmin	O
<=	O
jmax	O
)	O
{	O
mu	double
=	O
iju	*(long)
[	O
k	*(long)
]	O
-	O
jmin	O
;	O
for	O
(	O
j	O
=	O
jmin	O
;	O
j	O
<=	O
jmax	O
;	O
++	O
j	O
)	O
sum	O
-=	O
u	*(double)
[	O
j	O
]	O
*	O
tmp	*(double)
[	O
ju	*(long)
[	O
mu	double
+	O
j	O
]	O
]	O
;	O
}	O
tmp	*(double)
[	O
k	*(long)
]	O
=	O
sum	O
;	O
z	*(double)
[	O
c	*(long)
[	O
k	*(long)
]	O
]	O
=	O
sum	O
;	O
--	O
k	*(long)
;	O
}	O
*	O
flag_	*(long)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
