int	O
isprefix	(*(char),*(char))->(int)
(	O
register	O
char	O
*	O
s1	*(char)
,	O
register	O
char	O
*	O
s2	*(char)
)	O
{	O
char	O
*	O
os1	*(char)
;	O
register	O
char	O
c1	char
,	O
c2	char
;	O
if	O
(	O
*	O
s1	*(char)
==	O
'\0'	O
)	O
return	O
(	O
-	O
1	int
)	O
;	O
os1	*(char)
=	O
s1	*(char)
;	O
c1	char
=	O
*	O
s1	*(char)
;	O
c2	char
=	O
*	O
s2	*(char)
;	O
while	O
(	O
LOWER	O
(	O
c1	char
)	O
==	O
LOWER	O
(	O
c2	char
)	O
)	O
{	O
if	O
(	O
c1	char
==	O
'\0'	O
)	O
break	O
;	O
c1	char
=	O
*	O
++	O
s1	*(char)
;	O
c2	char
=	O
*	O
++	O
s2	*(char)
;	O
}	O
return	O
(	O
*	O
s1	*(char)
?	O
0	int
:	O
(	O
*	O
s2	*(char)
?	O
(	O
s1	*(char)
-	O
os1	*(char)
)	O
:	O
(	O
os1	*(char)
-	O
s1	*(char)
)	O
)	O
)	O
;	O
}	O
static	O
char	O
*	O
ambiguous	*(char)
;	O
char	O
*	O
*	O
genget	(*(char),*(*(char)),int)->(*(*(char)))
(	O
char	O
*	O
name	*(char)
,	O
char	O
*	O
*	O
table	*(*(char))
,	O
int	O
stlen	int
)	O
{	O
register	O
char	O
*	O
*	O
c	*(*(char))
,	O
*	O
*	O
found	*(*(char))
;	O
register	O
int	O
n	int
;	O
if	O
(	O
name	*(char)
==	O
0	int
)	O
return	O
0	int
;	O
found	*(*(char))
=	O
0	int
;	O
for	O
(	O
c	*(*(char))
=	O
table	*(*(char))
;	O
*	O
c	*(*(char))
!=	O
0	int
;	O
c	*(*(char))
=	O
(	O
char	O
*	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
c	*(*(char))
+	O
stlen	int
)	O
)	O
{	O
if	O
(	O
(	O
n	int
=	O
isprefix	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
*	O
c	*(*(char))
)	O
)	O
==	O
0	int
)	O
continue	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
return	O
(	O
c	*(*(char))
)	O
;	O
if	O
(	O
found	*(*(char))
)	O
return	O
(	O
&	O
ambiguous	*(char)
)	O
;	O
found	*(*(char))
=	O
c	*(*(char))
;	O
}	O
return	O
(	O
found	*(*(char))
)	O
;	O
}	O
int	O
Ambiguous	(*(char))->(int)
(	O
char	O
*	O
s	*(char)
)	O
{	O
return	O
(	O
(	O
char	O
*	O
*	O
)	O
s	*(char)
==	O
&	O
ambiguous	*(char)
)	O
;	O
}	O
