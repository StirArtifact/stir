typedef	O
struct	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y1	(double)->(double)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
S2	double
;	O
unsigned	O
long	O
count	long
;	O
}	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
;	O
static	O
int	O
compute_center	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
double	O
compute_size	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
double	O
try_corner_move	(double,*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`)->(double)),long,*(void))))->(double)
(	O
const	O
double	O
coeff	double
,	O
const	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
size_t	long
corner	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_multimin_function	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),long,*(void))
*	O
f	*(double)
)	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
=	O
state	*(int)
->	O
x1	double
;	O
const	O
size_t	long
P	*(float)
=	O
x1	double
->	O
size1	long
;	O
double	O
newval	double
;	O
{	O
double	O
alpha	long double
=	O
(	O
1	int
-	O
coeff	double
)	O
*	O
P	*(float)
/	O
(	O
P	*(float)
-	O
1.0	int
)	O
;	O
double	O
beta	long double
=	O
(	O
P	*(float)
*	O
coeff	double
-	O
1.0	int
)	O
/	O
(	O
P	*(float)
-	O
1.0	int
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
row	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
x1	double
,	O
corner	long
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
alpha	long double
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
beta	long double
,	O
&	O
row	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
newval	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	*(double)
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
newval	double
;	O
}	O
static	O
void	O
update_point	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
size_t	long
i	long
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
double	O
val	double
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x_orig	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
x1	double
,	O
i	long
)	O
;	O
const	O
size_t	long
P	*(float)
=	O
state	*(int)
->	O
x1	double
->	O
size1	long
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
1.0	int
,	O
&	O
x_orig	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
x_orig	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
1.0	int
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
{	O
double	O
d	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
double	O
xmcd	double
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
state	*(int)
->	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
xmcd	double
)	O
;	O
state	*(int)
->	O
S2	double
+=	O
(	O
2.0	int
/	O
P	*(float)
)	O
*	O
xmcd	double
+	O
(	O
(	O
P	*(float)
-	O
1.0	int
)	O
/	O
P	*(float)
)	O
*	O
(	O
d	double
*	O
d	double
/	O
P	*(float)
)	O
;	O
}	O
{	O
double	O
alpha	long double
=	O
1.0	int
/	O
P	*(float)
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
alpha	long double
,	O
&	O
x_orig	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
alpha	long double
,	O
x	long double
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_matrix_set_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
x1	double
,	O
i	long
,	O
x	long double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
,	O
i	long
,	O
val	double
)	O
;	O
}	O
static	O
int	O
contract_by_best	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`)->(double)),long,*(void))))->(int)
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
size_t	long
best	long
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_multimin_function	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),long,*(void))
*	O
f	*(double)
)	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
=	O
state	*(int)
->	O
x1	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y1	(double)->(double)
=	O
state	*(int)
->	O
y1	(double)->(double)
;	O
size_t	long
i	long
,	O
j	long
;	O
double	O
newval	double
;	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x1	double
->	O
size1	long
;	O
i	long
++	O
)	O
{	O
if	O
(	O
i	long
!=	O
best	long
)	O
{	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
x1	double
->	O
size2	long
;	O
j	long
++	O
)	O
{	O
newval	double
=	O
0.5	int
*	O
(	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
x1	double
,	O
i	long
,	O
j	long
)	O
+	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
x1	double
,	O
best	long
,	O
j	long
)	O
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
x1	double
,	O
i	long
,	O
j	long
,	O
newval	double
)	O
;	O
}	O
gsl_matrix_get_row	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(int)
(	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x1	double
,	O
i	long
)	O
;	O
newval	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	*(double)
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
y1	(double)->(double)
,	O
i	long
,	O
newval	double
)	O
;	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
newval	double
)	O
)	O
{	O
status	int
=	O
GSL_EBADFUNC	int
;	O
}	O
}	O
}	O
compute_center	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
compute_size	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
status	int
;	O
}	O
static	O
int	O
compute_center	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
=	O
state	*(int)
->	O
x1	double
;	O
const	O
size_t	long
P	*(float)
=	O
x1	double
->	O
size1	long
;	O
size_t	long
i	long
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
P	*(float)
;	O
i	long
++	O
)	O
{	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
row	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
x1	double
,	O
i	long
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
1.0	int
,	O
&	O
row	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
{	O
const	O
double	O
alpha	long double
=	O
1.0	int
/	O
P	*(float)
;	O
gsl_blas_dscal	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
alpha	long double
,	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
double	O
compute_size	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
s	*(float)
=	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
=	O
state	*(int)
->	O
x1	double
;	O
const	O
size_t	long
P	*(float)
=	O
x1	double
->	O
size1	long
;	O
size_t	long
i	long
;	O
double	O
ss	double
=	O
0.0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
P	*(float)
;	O
i	long
++	O
)	O
{	O
double	O
t	double
;	O
gsl_matrix_get_row	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(int)
(	O
s	*(float)
,	O
x1	double
,	O
i	long
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
-	O
1.0	int
,	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
s	*(float)
)	O
;	O
t	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
s	*(float)
)	O
;	O
ss	double
+=	O
t	double
*	O
t	double
;	O
}	O
state	*(int)
->	O
S2	double
=	O
(	O
ss	double
/	O
P	*(float)
)	O
;	O
return	O
sqrt	(double)->(double)
(	O
ss	double
/	O
P	*(float)
)	O
;	O
}	O
static	O
int	O
nmsimplex_alloc	(*(void),long)->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
size_t	long
n	long
)	O
{	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
=	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
n	long
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"invalid number of parameters specified"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
state	*(int)
->	O
x1	double
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
+	O
1	int
,	O
n	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
x1	double
==	O
NULL	O
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
y1	(double)->(double)
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
+	O
1	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
y1	(double)->(double)
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for y"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for ws1"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for ws2"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for center"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for delta"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	long
)	O
;	O
if	O
(	O
state	*(int)
->	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for xmc"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
count	long
=	O
0	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
void	O
nmsimplex_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
=	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
)	O
vstate	*(void)
;	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
delta	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
xmc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
static	O
int	O
nmsimplex_set	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multimin_function	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),long,*(void))
*	O
f	*(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
double	O
*	O
size	long
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
;	O
size_t	long
i	long
;	O
double	O
val	double
;	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
=	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
)	O
vstate	*(void)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
if	O
(	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of x"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of step_size"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
val	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	*(double)
,	O
x	long double
)	O
;	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
)	O
{	O
GSL_ERROR	O
(	O
"non-finite function value encountered"	*(char)
,	O
GSL_EBADFUNC	int
)	O
;	O
}	O
gsl_matrix_set_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
x1	double
,	O
0	int
,	O
x	long double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
,	O
0	int
,	O
val	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	long double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
status	int
=	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
if	O
(	O
status	int
!=	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"vector memcopy failed"	*(char)
,	O
GSL_EFAILED	int
)	O
;	O
}	O
{	O
double	O
xi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	long double
,	O
i	long
)	O
;	O
double	O
si	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
xi	double
+	O
si	double
)	O
;	O
val	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	*(double)
,	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
)	O
{	O
GSL_ERROR	O
(	O
"non-finite function value encountered"	*(char)
,	O
GSL_EBADFUNC	int
)	O
;	O
}	O
gsl_matrix_set_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
x1	double
,	O
i	long
+	O
1	int
,	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
,	O
i	long
+	O
1	int
,	O
val	double
)	O
;	O
}	O
compute_center	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
*	O
size	long
=	O
compute_size	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
count	long
++	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
nmsimplex_iterate	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multimin_function	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),long,*(void))
*	O
f	*(double)
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
double	O
*	O
size	long
,	O
double	O
*	O
fval	*(double)
)	O
{	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
=	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
)	O
vstate	*(void)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xc2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
ws2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
y1	(double)->(double)
=	O
state	*(int)
->	O
y1	(double)->(double)
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
=	O
state	*(int)
->	O
x1	double
;	O
const	O
size_t	long
n	long
=	O
y1	(double)->(double)
->	O
size	long
;	O
size_t	long
i	long
;	O
size_t	long
hi	long
,	O
s_hi	long
,	O
lo	long
;	O
double	O
dhi	double
,	O
ds_hi	double
,	O
dlo	double
;	O
int	O
status	int
;	O
double	O
val	double
,	O
val2	double
;	O
if	O
(	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of x"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
dhi	double
=	O
dlo	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
0	int
)	O
;	O
hi	long
=	O
0	int
;	O
lo	long
=	O
0	int
;	O
ds_hi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
1	int
)	O
;	O
s_hi	long
=	O
1	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
n	long
;	O
i	long
++	O
)	O
{	O
val	double
=	O
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
i	long
)	O
)	O
;	O
if	O
(	O
val	double
<	O
dlo	double
)	O
{	O
dlo	double
=	O
val	double
;	O
lo	long
=	O
i	long
;	O
}	O
else	O
if	O
(	O
val	double
>	O
dhi	double
)	O
{	O
ds_hi	double
=	O
dhi	double
;	O
s_hi	long
=	O
hi	long
;	O
dhi	double
=	O
val	double
;	O
hi	long
=	O
i	long
;	O
}	O
else	O
if	O
(	O
val	double
>	O
ds_hi	double
)	O
{	O
ds_hi	double
=	O
val	double
;	O
s_hi	long
=	O
i	long
;	O
}	O
}	O
val	double
=	O
try_corner_move	(double,*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`)->(double)),long,*(void))))->(double)
(	O
-	O
1.0	int
,	O
state	*(int)
,	O
hi	long
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
)	O
;	O
if	O
(	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
&&	O
val	double
<	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
lo	long
)	O
)	O
{	O
val2	double
=	O
try_corner_move	(double,*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`)->(double)),long,*(void))))->(double)
(	O
-	O
2.0	int
,	O
state	*(int)
,	O
hi	long
,	O
xc2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
)	O
;	O
if	O
(	O
gsl_finite	(double)->(int)
(	O
val2	double
)	O
&&	O
val2	double
<	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
lo	long
)	O
)	O
{	O
update_point	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
state	*(int)
,	O
hi	long
,	O
xc2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
val2	double
)	O
;	O
}	O
else	O
{	O
update_point	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
state	*(int)
,	O
hi	long
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
val	double
)	O
;	O
}	O
}	O
else	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
||	O
val	double
>	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
s_hi	long
)	O
)	O
{	O
if	O
(	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
&&	O
val	double
<=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
hi	long
)	O
)	O
{	O
update_point	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
state	*(int)
,	O
hi	long
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
val	double
)	O
;	O
}	O
val2	double
=	O
try_corner_move	(double,*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`)->(double)),long,*(void))))->(double)
(	O
0.5	int
,	O
state	*(int)
,	O
hi	long
,	O
xc2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
)	O
;	O
if	O
(	O
gsl_finite	(double)->(int)
(	O
val2	double
)	O
&&	O
val2	double
<=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
hi	long
)	O
)	O
{	O
update_point	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
state	*(int)
,	O
hi	long
,	O
xc2	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
val2	double
)	O
;	O
}	O
else	O
{	O
status	int
=	O
contract_by_best	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(*((*`,*`)->(double)),long,*(void))))->(int)
(	O
state	*(int)
,	O
lo	long
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
f	*(double)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
{	O
GSL_ERROR	O
(	O
"contraction failed"	*(char)
,	O
GSL_EFAILED	int
)	O
;	O
}	O
}	O
}	O
else	O
{	O
update_point	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(void)
(	O
state	*(int)
,	O
hi	long
,	O
xc	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
val	double
)	O
;	O
}	O
lo	long
=	O
gsl_vector_min_index	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(long)
(	O
y1	(double)->(double)
)	O
;	O
gsl_matrix_get_row	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(int)
(	O
x	long double
,	O
x1	double
,	O
lo	long
)	O
;	O
*	O
fval	*(double)
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
y1	(double)->(double)
,	O
lo	long
)	O
;	O
{	O
double	O
S2	double
=	O
state	*(int)
->	O
S2	double
;	O
if	O
(	O
S2	double
>	O
0	int
)	O
{	O
*	O
size	long
=	O
sqrt	(double)->(double)
(	O
S2	double
)	O
;	O
}	O
else	O
{	O
*	O
size	long
=	O
compute_size	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fminimizer_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
nmsimplex_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
=	O
{	O
"nmsimplex2"	*(char)
,	O
sizeof	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
)	O
,	O
&	O
nmsimplex_alloc	(*(void),long)->(int)
,	O
&	O
nmsimplex_set	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
nmsimplex_iterate	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(int)
,	O
&	O
nmsimplex_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multimin_fminimizer_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
*	O
gsl_multimin_fminimizer_nmsimplex2	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(double),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(double),*(double))->(int)),*((*(void))->(void))))
=	O
&	O
nmsimplex_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
;	O
static	O
inline	O
double	O
ran_unif	(*(long))->(double)
(	O
unsigned	O
long	O
*	O
seed	*(long)
)	O
{	O
unsigned	O
long	O
s	*(float)
=	O
*	O
seed	*(long)
;	O
*	O
seed	*(long)
=	O
(	O
s	*(float)
*	O
69069	int
+	O
1	int
)	O
&	O
0xffffffffUL	int
;	O
return	O
(	O
*	O
seed	*(long)
)	O
/	O
4294967296.0	int
;	O
}	O
static	O
int	O
nmsimplex_set_rand	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
void	O
*	O
vstate	*(void)
,	O
gsl_multimin_function	struct(*((*(struct(long,long,*`,*`,int)),*(void))->(double)),long,*(void))
*	O
f	*(double)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
double	O
*	O
size	long
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
size_t	long
i	long
,	O
j	long
;	O
double	O
val	double
;	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
state	*(int)
=	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
*	O
)	O
vstate	*(void)
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
state	*(int)
->	O
ws1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
if	O
(	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of x"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
if	O
(	O
xtemp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"incompatible size of step_size"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
}	O
val	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	*(double)
,	O
x	long double
)	O
;	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
)	O
{	O
GSL_ERROR	O
(	O
"non-finite function value encountered"	*(char)
,	O
GSL_EBADFUNC	int
)	O
;	O
}	O
gsl_matrix_set_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
x1	double
,	O
0	int
,	O
x	long double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
,	O
0	int
,	O
val	double
)	O
;	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
x1	double
,	O
1	int
,	O
0	int
,	O
x	long double
->	O
size	long
,	O
x	long double
->	O
size	long
)	O
;	O
unsigned	O
long	O
seed	*(long)
=	O
state	*(int)
->	O
count	long
^	O
0x12345678	int
;	O
ran_unif	(*(long))->(double)
(	O
&	O
seed	*(long)
)	O
;	O
gsl_matrix_set_identity	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	long double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
double	O
s	*(float)
=	O
ran_unif	(*(long))->(double)
(	O
&	O
seed	*(long)
)	O
;	O
if	O
(	O
s	*(float)
>	O
0.5	int
)	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
i	long
,	O
-	O
1.0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	long double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
for	O
(	O
j	long
=	O
i	long
+	O
1	int
;	O
j	long
<	O
x	long double
->	O
size	long
;	O
j	long
++	O
)	O
{	O
double	O
angle	double
=	O
2.0	int
*	O
M_PI	int
*	O
ran_unif	(*(long))->(double)
(	O
&	O
seed	*(long)
)	O
;	O
double	O
c	*(float)
=	O
cos	(double)->(double)
(	O
angle	double
)	O
,	O
s	*(float)
=	O
sin	(double)->(double)
(	O
angle	double
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c_j	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
)	O
;	O
gsl_blas_drot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double)->(int)
(	O
&	O
c_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
c_j	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
c	*(float)
,	O
s	*(float)
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	long double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
double	O
x_i	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	long double
,	O
i	long
)	O
;	O
double	O
s_i	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
step_size	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
x	long double
->	O
size	long
;	O
j	long
++	O
)	O
{	O
double	O
x_ij	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
c_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
c_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
j	long
,	O
x_i	double
+	O
s_i	double
*	O
x_ij	double
)	O
;	O
}	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
x	long double
->	O
size	long
;	O
i	long
++	O
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
r_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
val	double
=	O
GSL_MULTIMIN_FN_EVAL	O
(	O
f	*(double)
,	O
&	O
r_i	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
!	O
gsl_finite	(double)->(int)
(	O
val	double
)	O
)	O
{	O
GSL_ERROR	O
(	O
"non-finite function value encountered"	*(char)
,	O
GSL_EBADFUNC	int
)	O
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
y1	(double)->(double)
,	O
i	long
+	O
1	int
,	O
val	double
)	O
;	O
}	O
}	O
compute_center	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
*	O
size	long
=	O
compute_size	(*(struct(*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,long)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
,	O
state	*(int)
->	O
center	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
count	long
++	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multimin_fminimizer_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
nmsimplex2rand_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
=	O
{	O
"nmsimplex2rand"	*(char)
,	O
sizeof	O
(	O
nmsimplex_state_t	struct(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,long)
)	O
,	O
&	O
nmsimplex_alloc	(*(void),long)->(int)
,	O
&	O
nmsimplex_set_rand	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
,	O
&	O
nmsimplex_iterate	(*(void),*(struct(*((*`,*`)->(double)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(double))->(int)
,	O
&	O
nmsimplex_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multimin_fminimizer_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
*	O
gsl_multimin_fminimizer_nmsimplex2rand	*(struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct`),*(struct`),*(double),*(struct`))->(int)),*((*(void),*(struct`),*(struct`),*(double),*(double))->(int)),*((*(void))->(void))))
=	O
&	O
nmsimplex2rand_type	struct(*(char),long,*((*(void),long)->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(struct(long,long,*`,*`,int)))->(int)),*((*(void),*(struct(*`,long,*`)),*(struct(long,long,*`,*`,int)),*(double),*(double))->(int)),*((*(void))->(void)))
;	O
