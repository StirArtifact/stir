typedef	O
struct	O
{	O
size_t	long
n	int
;	O
size_t	long
p	int
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
double	O
norm_Dgn	double
;	O
double	O
norm_Dsd	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
tau	double
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_permutation	struct(long,*(long))
*	O
perm	*(struct(long,*(long)))
;	O
double	O
trB	double
;	O
double	O
detB	double
;	O
double	O
normg	double
;	O
double	O
term0	double
;	O
double	O
term1	double
;	O
size_t	long
rank	long
;	O
gsl_poly_complex_workspace	struct(long,*(double))
*	O
poly_p	*(struct(long,*(double)))
;	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
params	*(void)
;	O
}	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
;	O
static	O
void	O
*	O
subspace2D_alloc	(*(void),long,long)->(*(void))
(	O
const	O
void	O
*	O
params	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
;	O
static	O
void	O
subspace2D_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
subspace2D_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
subspace2D_preloop	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
subspace2D_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
subspace2D_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
pred	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
;	O
static	O
int	O
subspace2D_solution	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
;	O
static	O
double	O
subspace2D_objective	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
;	O
static	O
int	O
subspace2D_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
subspace2D_calc_sd	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
;	O
static	O
void	O
*	O
subspace2D_alloc	(*(void),long,long)->(*(void))
(	O
const	O
void	O
*	O
params	*(void)
,	O
const	O
size_t	long
n	int
,	O
const	O
size_t	long
p	int
)	O
{	O
const	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
*	O
par	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
=	O
(	O
const	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
*	O
)	O
params	*(void)
;	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
;	O
state	*(int)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
)	O
)	O
;	O
if	O
(	O
state	*(int)
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate subspace2D state"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_gn"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for dx_sd"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workp"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for workn"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
p	int
,	O
2	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for W"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
,	O
p	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for JQ"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
tau	double
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
2	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
tau	double
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for tau"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
2	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for subg"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_alloc	(long,long)->(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
2	int
,	O
2	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for subB"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
=	O
gsl_permutation_alloc	(long)->(*(struct(long,*(long))))
(	O
2	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for perm"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
poly_p	*(struct(long,*(double)))
=	O
gsl_poly_complex_workspace_alloc	(long)->(*(struct(long,*(double))))
(	O
5	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
poly_p	*(struct(long,*(double)))
==	O
NULL	O
)	O
{	O
GSL_ERROR_NULL	O
(	O
"failed to allocate space for poly workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
state	*(int)
->	O
n	int
=	O
n	int
;	O
state	*(int)
->	O
p	int
=	O
p	int
;	O
state	*(int)
->	O
rank	long
=	O
0	int
;	O
state	*(int)
->	O
params	*(void)
=	O
*	O
par	*(struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
;	O
return	O
state	*(int)
;	O
}	O
static	O
void	O
subspace2D_free	(*(void))->(void)
(	O
void	O
*	O
vstate	*(void)
)	O
{	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
tau	double
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
tau	double
)	O
;	O
if	O
(	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
gsl_matrix_free	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
)	O
gsl_permutation_free	(*(struct(long,*(long))))->(void)
(	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
)	O
;	O
if	O
(	O
state	*(int)
->	O
poly_p	*(struct(long,*(double)))
)	O
gsl_poly_complex_workspace_free	(*(struct(long,*(double))))->(void)
(	O
state	*(int)
->	O
poly_p	*(struct(long,*(double)))
)	O
;	O
free	(*(void))->(void)
(	O
state	*(int)
)	O
;	O
}	O
static	O
int	O
subspace2D_init	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
(	O
void	O
)	O
vtrust_state	*(void)
;	O
(	O
void	O
)	O
vstate	*(void)
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_preloop	(*(void),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
double	O
work_data	array(double)
[	O
2	int
]	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
work_data	array(double)
,	O
2	int
)	O
;	O
int	O
signum	*(int)
;	O
status	int
=	O
subspace2D_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
subspace2D_calc_sd	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
state	*(int)
->	O
norm_Dgn	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
norm_Dsd	double
=	O
scaled_enorm	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
norm_Dsd	double
!=	O
0	int
)	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
/	O
state	*(int)
->	O
norm_Dsd	double
)	O
;	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_mul	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
state	*(int)
->	O
norm_Dgn	double
!=	O
0	int
)	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
/	O
state	*(int)
->	O
norm_Dgn	double
)	O
;	O
gsl_linalg_QRPT_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(int),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
tau	double
,	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
,	O
&	O
signum	*(int)
,	O
&	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
state	*(int)
->	O
rank	long
=	O
gsl_linalg_QRPT_rank	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double)->(long)
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
1.0	int
)	O
;	O
if	O
(	O
state	*(int)
->	O
rank	long
==	O
2	int
)	O
{	O
const	O
size_t	long
p	int
=	O
state	*(int)
->	O
p	int
;	O
size_t	long
i	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
state	*(int)
->	O
n	int
,	O
GSL_MIN	O
(	O
2	int
,	O
p	int
)	O
)	O
;	O
double	O
B00	double
,	O
B10	double
,	O
B11	double
,	O
g0	double
,	O
g1	double
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_linalg_QR_QTvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
tau	double
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
g0	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
g1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
g0	double
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
g1	double
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
p	int
;	O
++	O
i	long
)	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
c	*(float)
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
di	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
c	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
/	O
di	double
)	O
;	O
}	O
gsl_linalg_QR_matQ	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
tau	double
,	O
state	*(int)
->	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dsyrk	(enum(int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
JQ	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0.0	int
,	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
B00	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
B10	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
0	int
)	O
;	O
B11	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
1	int
)	O
;	O
state	*(int)
->	O
trB	double
=	O
B00	double
+	O
B11	double
;	O
state	*(int)
->	O
detB	double
=	O
B00	double
*	O
B11	double
-	O
B10	double
*	O
B10	double
;	O
state	*(int)
->	O
normg	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
state	*(int)
->	O
term0	double
=	O
(	O
B10	double
*	O
B10	double
+	O
B11	double
*	O
B11	double
)	O
*	O
g0	double
*	O
g0	double
-	O
2	int
*	O
B10	double
*	O
(	O
B00	double
+	O
B11	double
)	O
*	O
g0	double
*	O
g1	double
+	O
(	O
B00	double
*	O
B00	double
+	O
B10	double
*	O
B10	double
)	O
*	O
g1	double
*	O
g1	double
;	O
state	*(int)
->	O
term1	double
=	O
B11	double
*	O
g0	double
*	O
g0	double
+	O
g1	double
*	O
(	O
B00	double
*	O
g1	double
-	O
2	int
*	O
B10	double
*	O
g0	double
)	O
;	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
double	O
delta	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
if	O
(	O
state	*(int)
->	O
norm_Dgn	double
<=	O
delta	double
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_gn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
else	O
if	O
(	O
state	*(int)
->	O
rank	long
<	O
2	int
)	O
{	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
dx_sd	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
delta	double
/	O
state	*(int)
->	O
norm_Dsd	double
)	O
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
double	O
delta_sq	double
=	O
delta	double
*	O
delta	double
;	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
state	*(int)
->	O
normg	double
/	O
delta	double
;	O
double	O
a	double
[	O
5	int
]	O
;	O
double	O
z	double
[	O
8	int
]	O
;	O
a	double
[	O
0	int
]	O
=	O
state	*(int)
->	O
detB	double
*	O
state	*(int)
->	O
detB	double
-	O
state	*(int)
->	O
term0	double
/	O
delta_sq	double
;	O
a	double
[	O
1	int
]	O
=	O
2	int
*	O
state	*(int)
->	O
detB	double
*	O
state	*(int)
->	O
trB	double
-	O
2	int
*	O
state	*(int)
->	O
term1	double
/	O
delta_sq	double
;	O
a	double
[	O
2	int
]	O
=	O
state	*(int)
->	O
trB	double
*	O
state	*(int)
->	O
trB	double
+	O
2	int
*	O
state	*(int)
->	O
detB	double
-	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
a	double
[	O
3	int
]	O
=	O
2	int
*	O
state	*(int)
->	O
trB	double
;	O
a	double
[	O
4	int
]	O
=	O
1.0	int
;	O
status	int
=	O
gsl_poly_complex_solve	(*(double),long,*(struct(long,*(double))),*(double))->(int)
(	O
a	double
,	O
5	int
,	O
state	*(int)
->	O
poly_p	*(struct(long,*(double)))
,	O
z	double
)	O
;	O
if	O
(	O
status	int
==	O
GSL_SUCCESS	int
)	O
{	O
size_t	long
i	long
;	O
double	O
min	double
=	O
0.0	int
;	O
int	O
mini	int
=	O
-	O
1	int
;	O
double	O
x_data	array(double)
[	O
2	int
]	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x	double
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
x_data	array(double)
,	O
2	int
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
4	int
;	O
++	O
i	long
)	O
{	O
double	O
cost	double
,	O
normx	double
;	O
status	int
=	O
subspace2D_solution	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
z	double
[	O
2	int
*	O
i	long
]	O
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
)	O
;	O
if	O
(	O
status	int
!=	O
GSL_SUCCESS	int
)	O
continue	O
;	O
normx	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
normx	double
==	O
0.0	int
)	O
continue	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
delta	double
/	O
normx	double
)	O
;	O
cost	double
=	O
subspace2D_objective	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
)	O
;	O
if	O
(	O
mini	int
<	O
0	int
||	O
cost	double
<	O
min	double
)	O
{	O
mini	int
=	O
(	O
int	O
)	O
i	long
;	O
min	double
=	O
cost	double
;	O
}	O
}	O
if	O
(	O
mini	int
<	O
0	int
)	O
{	O
return	O
GSL_FAILURE	int
;	O
}	O
else	O
{	O
subspace2D_solution	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
z	double
[	O
2	int
*	O
mini	int
]	O
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
)	O
;	O
gsl_vector_set_zero	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
)	O
)	O
;	O
gsl_linalg_QR_Qvec	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
W	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
tau	double
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
}	O
else	O
{	O
GSL_ERROR	O
(	O
"gsl_poly_complex_solve failed"	*(char)
,	O
status	int
)	O
;	O
}	O
}	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
(	O
const	O
void	O
*	O
vtrust_state	*(void)
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
double	O
*	O
pred	*(double)
,	O
void	O
*	O
vstate	*(void)
)	O
{	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
=	O
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
)	O
vtrust_state	*(void)
;	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
=	O
(	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
)	O
vstate	*(void)
;	O
*	O
pred	*(double)
=	O
quadratic_preduction	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
f	*(double)
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_solution	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
const	O
double	O
lambda	double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
{	O
int	O
status	int
=	O
GSL_SUCCESS	int
;	O
double	O
C_data	array(double)
[	O
4	int
]	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
C	*(float)
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
C_data	array(double)
,	O
2	int
,	O
2	int
)	O
;	O
double	O
B00	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
double	O
B10	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
0	int
)	O
;	O
double	O
B11	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
1	int
,	O
1	int
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
B00	double
+	O
lambda	double
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
0	int
,	O
B10	double
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
1	int
,	O
B10	double
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1	int
,	O
1	int
,	O
B11	double
+	O
lambda	double
)	O
;	O
gsl_linalg_mcholesky_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
,	O
NULL	O
)	O
;	O
gsl_linalg_mcholesky_solve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
C	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
perm	*(struct(long,*(long)))
,	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
x	double
,	O
-	O
1.0	int
)	O
;	O
return	O
status	int
;	O
}	O
static	O
double	O
subspace2D_objective	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(double)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
{	O
double	O
f	*(double)
;	O
double	O
y_data	array(double)
[	O
2	int
]	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
y	double
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
y_data	array(double)
,	O
2	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
state	*(int)
->	O
subg	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dsymv	(enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
0.5	int
,	O
state	*(int)
->	O
subB	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	double
,	O
1.0	int
,	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_ddot	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double))->(int)
(	O
x	double
,	O
&	O
y	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
f	*(double)
)	O
;	O
return	O
f	*(double)
;	O
}	O
static	O
int	O
subspace2D_calc_gn	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
;	O
const	O
gsl_multifit_nlinear_parameters	struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double)
*	O
params	*(void)
=	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
params	*(void)
;	O
status	int
=	O
(	O
params	*(void)
->	O
solver	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
->	O
init	*((*(void),*(void))->(int))
)	O
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
solver_state	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	*(void)
->	O
solver	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
->	O
presolve	*((double,*(void),*(void))->(int))
)	O
(	O
0.0	int
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
solver_state	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
(	O
params	*(void)
->	O
solver	*(struct(*(char),*((long,long)->(*(void))),*((*(void),*(void))->(int)),*((double,*(void),*(void))->(int)),*((*(struct`),*(struct`),*(void),*(void))->(int)),*((*(double),*(void))->(int)),*((*(void))->(void))))
->	O
solve	*((*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(void),*(void))->(int))
)	O
(	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
f	*(double)
,	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
solver_state	*(void)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
subspace2D_calc_sd	(*(struct(*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(double),*(struct(*`,*`,*`,enum(int,int),double,double,double,double,double)),*(void),*(struct(*`,*`,*`,long,long,*`,long,long,long)),*(double))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),double,double,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,*`)),double,double,double,double,double,long,*(struct(long,*`)),struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double))))->(int)
(	O
const	O
gsl_multifit_nlinear_trust_state	struct(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`)),*(struct(*`,*`,*`)),*(struct(*`,*`,*`,*`,*`,*`,*`)),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double))
*	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
subspace2D_state_t	struct(long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,*(long))),double,double,double,double,double,long,*(struct(long,*(double))),struct(*(struct(*(char),*((*`,long,long)->(*`)),*((*`,*`)->(int)),*((*`,*`)->(int)),*((*`,double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`)->(void)))),*(struct(*(char),*((*`,*`)->(int)),*((*`,*`)->(int)))),*(struct(*(char),*((long,long)->(*`)),*((*`,*`)->(int)),*((double,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),*((*`,*`)->(int)),*((*`)->(void)))),enum(int,int),double,double,double,double,double))
*	O
state	*(int)
)	O
{	O
double	O
norm_Dinvg	double
;	O
double	O
norm_JDinv2g	double
;	O
double	O
alpha	long double
;	O
double	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
g	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
norm_Dinvg	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_div	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
trust_state	*(struct(*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(struct(long,long,*(double),*(struct`),int)),*(double),*(struct(*(struct`),*(struct`),*(struct`),enum(int,int),double,double,double,double,double)),*(void),*(struct(*((*`,*`,*`)->(int)),*((*`,*`,*`)->(int)),*((*`,*`,*`,*`)->(int)),long,long,*(void),long,long,long)),*(double)))
->	O
J	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0.0	int
,	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
norm_JDinv2g	double
=	O
gsl_blas_dnrm2	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
state	*(int)
->	O
workn	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
norm_Dinvg	double
/	O
norm_JDinv2g	double
;	O
alpha	long double
=	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
*	O
u	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
state	*(int)
->	O
workp	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_scale	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
-	O
alpha	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
const	O
gsl_multifit_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
subspace2D_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
=	O
{	O
"2D-subspace"	*(char)
,	O
subspace2D_alloc	(*(void),long,long)->(*(void))
,	O
subspace2D_init	(*(void),*(void))->(int)
,	O
subspace2D_preloop	(*(void),*(void))->(int)
,	O
subspace2D_step	(*(void),double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(void))->(int)
,	O
subspace2D_preduction	(*(void),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(double),*(void))->(int)
,	O
subspace2D_free	(*(void))->(void)
}	O
;	O
const	O
gsl_multifit_nlinear_trs	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
*	O
gsl_multifit_nlinear_trs_subspace2D	*(struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct`),*(void))->(int)),*((*(void),*(struct`),*(double),*(void))->(int)),*((*(void))->(void))))
=	O
&	O
subspace2D_type	struct(*(char),*((*(void),long,long)->(*(void))),*((*(void),*(void))->(int)),*((*(void),*(void))->(int)),*((*(void),double,*(struct(long,long,*`,*`,int)),*(void))->(int)),*((*(void),*(struct(long,long,*`,*`,int)),*(double),*(void))->(int)),*((*(void))->(void)))
;	O
