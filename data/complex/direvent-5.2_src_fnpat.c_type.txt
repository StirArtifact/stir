static	O
void	O
filename_pattern_free	(*(void))->(void)
(	O
void	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
)	O
{	O
struct	O
filename_pattern	struct(enum(int,int,int),int,union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char)))
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
switch	O
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	enum(int,int,int)
)	O
{	O
case	O
PAT_EXACT	int
:	O
case	O
PAT_GLOB	int
:	O
free	(*(void))->(void)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
glob	*(char)
)	O
;	O
break	O
;	O
case	O
PAT_REGEX	int
:	O
regfree	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)))->(void)
(	O
&	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
re	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
)	O
;	O
}	O
free	(*(void))->(void)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
}	O
struct	O
filpatlist	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void)))))
{	O
grecs_list_ptr_t	*(struct)
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
}	O
;	O
static	O
int	O
is_glob	(*(char))->(int)
(	O
char	O
const	O
*	O
str	*(char)
)	O
{	O
return	O
strcspn	(*(char),*(char))->(long)
(	O
str	*(char)
,	O
"[]*?"	*(char)
)	O
<	O
strlen	(*(char))->(long)
(	O
str	*(char)
)	O
;	O
}	O
void	O
filpatlist_add_pattern	(*(*(struct(*(struct`)))),*(struct(enum(int,int,int),int,union(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char)))))->(void)
(	O
filpatlist_t	*(struct)
*	O
fptr	*(int)
,	O
struct	O
filename_pattern	struct(enum(int,int,int),int,union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char)))
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
{	O
grecs_list_ptr_t	*(struct)
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
if	O
(	O
!	O
*	O
fptr	*(int)
)	O
{	O
*	O
fptr	*(int)
=	O
emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
fptr	*(int)
)	O
)	O
;	O
(	O
*	O
fptr	*(int)
)	O
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
grecs_list_create	()->(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))
(	O
)	O
;	O
(	O
*	O
fptr	*(int)
)	O
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
free_entry	*((*(void))->(void))
=	O
filename_pattern_free	(*(void))->(void)
;	O
}	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
=	O
(	O
*	O
fptr	*(int)
)	O
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
;	O
grecs_list_append	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))),*(void))->(void)
(	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
,	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
}	O
void	O
filpatlist_add_exact	(*(*(struct)),*(char))->(void)
(	O
filpatlist_t	*(struct)
*	O
fptr	*(int)
,	O
char	O
const	O
*	O
arg	*(char)
)	O
{	O
struct	O
filename_pattern	struct(enum(int,int,int),int,union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char)))
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
)	O
;	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
neg	int
=	O
0	int
;	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	enum(int,int,int)
=	O
PAT_EXACT	int
;	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
glob	*(char)
=	O
estrdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
filpatlist_add_pattern	(*(*(struct(*(struct`)))),*(struct(enum(int,int,int),int,union(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char)))))->(void)
(	O
fptr	*(int)
,	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
}	O
int	O
filpatlist_add	(*(*(struct)),*(char),*(struct))->(int)
(	O
filpatlist_t	*(struct)
*	O
fptr	*(int)
,	O
char	O
const	O
*	O
arg	*(char)
,	O
grecs_locus_t	struct(struct(*(char),int,int),struct(*(char),int,int))
*	O
loc	*(struct)
)	O
{	O
int	O
flags	int
=	O
REG_EXTENDED	int
|	O
REG_NOSUB	O
;	O
struct	O
filename_pattern	struct(enum(int,int,int),int,union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char)))
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
;	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
emalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
)	O
;	O
if	O
(	O
*	O
arg	*(char)
==	O
'!'	O
)	O
{	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
neg	int
=	O
1	int
;	O
++	O
arg	*(char)
;	O
}	O
else	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
neg	int
=	O
0	int
;	O
if	O
(	O
arg	*(char)
[	O
0	int
]	O
==	O
'/'	O
)	O
{	O
int	O
rc	int
;	O
char	O
*	O
q	*(char)
,	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
;	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	enum(int,int,int)
=	O
PAT_REGEX	int
;	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
strchr	(*(char),int)->(*(char))
(	O
arg	*(char)
+	O
1	int
,	O
'/'	O
)	O
;	O
if	O
(	O
!	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
)	O
{	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
loc	*(struct)
,	O
0	int
,	O
_	O
(	O
"unterminated regexp"	*(char)
)	O
)	O
;	O
free	(*(void))->(void)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
return	O
1	int
;	O
}	O
for	O
(	O
q	*(char)
=	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
+	O
1	int
;	O
*	O
q	*(char)
;	O
q	*(char)
++	O
)	O
{	O
switch	O
(	O
*	O
q	*(char)
)	O
{	O
case	O
'b'	O
:	O
flags	int
&=	O
~	O
REG_EXTENDED	int
;	O
break	O
;	O
case	O
'i'	O
:	O
flags	int
|=	O
REG_ICASE	O
;	O
break	O
;	O
default	O
:	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
loc	*(struct)
,	O
0	int
,	O
_	O
(	O
"unrecognized flag: %c"	*(char)
)	O
,	O
*	O
q	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
return	O
1	int
;	O
}	O
}	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
0	int
;	O
rc	int
=	O
regcomp	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),int)->(int)
(	O
&	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
re	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
arg	*(char)
+	O
1	int
,	O
flags	int
)	O
;	O
*	O
p	*(struct(int,*(char),int,*(int),long,int,*(*(char))))
=	O
'/'	O
;	O
if	O
(	O
rc	int
)	O
{	O
char	O
errbuf	array(char)
[	O
128	int
]	O
;	O
regerror	(int,*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long)->(long)
(	O
rc	int
,	O
&	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
re	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
errbuf	array(char)
,	O
sizeof	O
(	O
errbuf	array(char)
)	O
)	O
;	O
grecs_error	(*(struct(struct(*(char),int,int),struct(*(char),int,int))),int,*(char))->(void)
(	O
loc	*(struct)
,	O
0	int
,	O
"%s"	*(char)
,	O
errbuf	array(char)
)	O
;	O
filename_pattern_free	(*(void))->(void)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
return	O
1	int
;	O
}	O
}	O
else	O
{	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	enum(int,int,int)
=	O
is_glob	(*(char))->(int)
(	O
arg	*(char)
)	O
?	O
PAT_GLOB	int
:	O
PAT_EXACT	int
;	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
glob	*(char)
=	O
estrdup	(*(char))->(*(char))
(	O
arg	*(char)
)	O
;	O
}	O
filpatlist_add_pattern	(*(*(struct(*(struct`)))),*(struct(enum(int,int,int),int,union(struct(*`,long,long,long,*`,*`,long,int,int,int,int,int,int,int),*(char)))))->(void)
(	O
fptr	*(int)
,	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
)	O
;	O
return	O
0	int
;	O
}	O
void	O
filpatlist_destroy	(*(*(struct)))->(void)
(	O
filpatlist_t	*(struct)
*	O
fptr	*(int)
)	O
{	O
if	O
(	O
fptr	*(int)
&&	O
*	O
fptr	*(int)
)	O
{	O
grecs_list_free	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(void)
(	O
(	O
*	O
fptr	*(int)
)	O
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
;	O
free	(*(void))->(void)
(	O
*	O
fptr	*(int)
)	O
;	O
*	O
fptr	*(int)
=	O
NULL	O
;	O
}	O
}	O
int	O
filpatlist_is_empty	(*(struct))->(int)
(	O
filpatlist_t	*(struct)
fp	*(struct)
)	O
{	O
if	O
(	O
!	O
fp	*(struct)
)	O
return	O
1	int
;	O
return	O
grecs_list_size	(*(struct(*(struct(*`,*`,*`)),*(struct(*`,*`,*`)),long,*((*`,*`)->(int)),*((*`)->(void)))))->(long)
(	O
fp	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
==	O
0	int
;	O
}	O
int	O
filpatlist_match	(*(struct),*(char))->(int)
(	O
filpatlist_t	*(struct)
fp	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
struct	O
grecs_list_entry	struct(*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void))),*(void))
*	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
if	O
(	O
!	O
fp	*(struct)
||	O
!	O
fp	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
)	O
return	O
0	int
;	O
for	O
(	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
fp	*(struct)
->	O
list	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),long,*((*(void),*(void))->(int)),*((*(void))->(void))))
->	O
head	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
;	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
next	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
)	O
{	O
struct	O
filename_pattern	struct(enum(int,int,int),int,union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char)))
*	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
=	O
ep	*(struct(*(struct(*(struct`),*(struct`),*(void))),*(struct(*(struct`),*(struct`),*(void))),*(void)))
->	O
data	*(void)
;	O
int	O
rc	int
;	O
switch	O
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
type	enum(int,int,int)
)	O
{	O
case	O
PAT_EXACT	int
:	O
rc	int
=	O
strcmp	(*(char),*(char))->(int)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
glob	*(char)
,	O
name	*(char)
)	O
;	O
break	O
;	O
case	O
PAT_GLOB	int
:	O
rc	int
=	O
fnmatch	(*(char),*(char),int)->(int)
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
glob	*(char)
,	O
name	*(char)
,	O
FNM_PATHNAME	O
)	O
;	O
break	O
;	O
case	O
PAT_REGEX	int
:	O
rc	int
=	O
regexec	(*(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)),*(char),long,array(struct(int,int)),int)->(int)
(	O
&	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
v	union(struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int),*(char))
.	O
re	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
,	O
name	*(char)
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
;	O
break	O
;	O
}	O
if	O
(	O
pat	*(struct(int,struct(struct(*(char),int,int),struct(*(char),int,int)),union(*(struct(*`,*`,long,*`,*`)),*(char),struct(long,*(*`)))))
->	O
neg	int
)	O
rc	int
=	O
!	O
rc	int
;	O
if	O
(	O
rc	int
==	O
0	int
)	O
return	O
0	int
;	O
}	O
return	O
1	int
;	O
}	O
