static	O
char	O
*	O
pwddir	*(char)
=	O
{	O
SITE_VIRTUAL_PWDDIR	O
}	O
;	O
static	O
struct	O
mu_cfg_param	struct(*(char),int,*(void),long,*((*(void),*(struct(int,union(*`,*`,struct`))))->(int)),*(char),*(char))
mu_virtdomain_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
[	O
]	O
=	O
{	O
{	O
"passwd-dir"	*(char)
,	O
mu_c_string	int
,	O
&	O
pwddir	*(char)
,	O
0	int
,	O
NULL	O
,	O
N_	O
(	O
"Name of the directory where virtual domain password files are "	*(char)
"located."	*(char)
)	O
,	O
N_	O
(	O
"dir"	*(char)
)	O
}	O
,	O
{	O
NULL	O
}	O
}	O
;	O
static	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwnam_virtual	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
const	O
char	O
*	O
u	*(char)
)	O
{	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
NULL	O
;	O
FILE	struct
*	O
pfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
size_t	long
i	long
=	O
0	int
,	O
len	int
=	O
strlen	(*(char))->(long)
(	O
u	*(char)
)	O
,	O
delim	int
=	O
0	int
;	O
char	O
*	O
filename	*(char)
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
len	int
&&	O
delim	int
==	O
0	int
;	O
i	long
++	O
)	O
if	O
(	O
u	*(char)
[	O
i	long
]	O
==	O
'!'	O
||	O
u	*(char)
[	O
i	long
]	O
==	O
':'	O
||	O
u	*(char)
[	O
i	long
]	O
==	O
'@'	O
)	O
delim	int
=	O
i	long
;	O
if	O
(	O
delim	int
==	O
0	int
)	O
return	O
NULL	O
;	O
filename	*(char)
=	O
mu_make_file_name	O
(	O
pwddir	*(char)
,	O
&	O
u	*(char)
[	O
delim	int
+	O
1	int
]	O
)	O
;	O
if	O
(	O
filename	*(char)
==	O
NULL	O
)	O
return	O
NULL	O
;	O
pfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
"r"	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
pfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
{	O
while	O
(	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
fgetpwent	(*(struct))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
pfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
NULL	O
)	O
{	O
if	O
(	O
strlen	(*(char))->(long)
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
)	O
==	O
delim	int
&&	O
strncmp	(*(char),*(char),long)->(int)
(	O
u	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
delim	int
)	O
==	O
0	int
)	O
break	O
;	O
}	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
pfile	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
;	O
}	O
return	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
}	O
static	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
getpwnam_ip_virtual	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
const	O
char	O
*	O
u	*(char)
)	O
{	O
struct	O
sockaddr_in	struct(short,short,struct(int),array(char))
addr	struct(short,short,struct(int),array(char))
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
NULL	O
;	O
socklen_t	int
len	int
=	O
sizeof	O
(	O
addr	struct(short,short,struct(int),array(char))
)	O
;	O
if	O
(	O
getsockname	(int,union(*(struct(short,array(char))),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct),*(struct)),*(int))->(int)
(	O
0	int
,	O
(	O
struct	O
sockaddr	struct(short,array(char))
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
,	O
&	O
len	int
)	O
==	O
0	int
)	O
{	O
char	O
*	O
ip	*(char)
;	O
char	O
*	O
user	*(char)
;	O
struct	O
hostent	struct(*(char),*(*(char)),int,int,*(*(char)))
*	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
=	O
gethostbyaddr	(*(void),int,int)->(*(struct(*(char),*(*(char)),int,int,*(*(char)))))
(	O
(	O
char	O
*	O
)	O
&	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
,	O
4	int
,	O
AF_INET	O
)	O
;	O
if	O
(	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
)	O
{	O
user	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
u	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
user	*(char)
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
user	*(char)
,	O
"%s!%s"	*(char)
,	O
u	*(char)
,	O
info	*(struct(*(char),*(*(char)),int,int,*(*(char))))
->	O
h_name	*(char)
)	O
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam_virtual	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
user	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
user	*(char)
)	O
;	O
}	O
}	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
ip	*(char)
=	O
inet_ntoa	(struct(int))->(*(char))
(	O
addr	struct(short,short,struct(int),array(char))
.	O
sin_addr	struct(int)
)	O
;	O
user	*(char)
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
ip	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
u	*(char)
)	O
+	O
2	int
)	O
;	O
if	O
(	O
user	*(char)
)	O
{	O
sprintf	(*(char),*(char))->(int)
(	O
user	*(char)
,	O
"%s!%s"	*(char)
,	O
u	*(char)
,	O
ip	*(char)
)	O
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam_virtual	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
user	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
user	*(char)
)	O
;	O
}	O
}	O
}	O
return	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
}	O
static	O
int	O
mu_auth_virt_domain_by_name	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
(	O
struct	O
mu_auth_data	struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)
*	O
*	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
const	O
void	O
*	O
key	*(*(void))
,	O
void	O
*	O
unused_func_data	*(void)
,	O
void	O
*	O
unused_call_data	*(void)
)	O
{	O
int	O
rc	int
;	O
struct	O
passwd	struct(*(char),*(char),int,int,*(char),*(char),*(char))
*	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
;	O
char	O
*	O
mailbox_name	*(char)
;	O
if	O
(	O
!	O
key	*(*(void))
)	O
return	O
EINVAL	int
;	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam_virtual	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
key	*(*(void))
)	O
;	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
{	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
=	O
getpwnam_ip_virtual	(*(char))->(*(struct(*(char),*(char),int,int,*(char),*(char),*(char))))
(	O
key	*(*(void))
)	O
;	O
if	O
(	O
!	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
)	O
return	O
MU_ERR_AUTH_FAILURE	O
;	O
}	O
mailbox_name	*(char)
=	O
mu_make_file_name	O
(	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
"INBOX"	*(char)
)	O
;	O
if	O
(	O
!	O
mailbox_name	*(char)
)	O
return	O
ENOMEM	int
;	O
rc	int
=	O
mu_auth_data_alloc	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(char),*(char),int,int,*(char),*(char),*(char),*(char),int)->(int)
(	O
return_data	*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int)))
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_name	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_passwd	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_uid	int
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gid	int
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_gecos	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_dir	*(char)
,	O
pw	*(struct(*(char),*(char),int,int,*(char),*(char),*(char)))
->	O
pw_shell	*(char)
,	O
mailbox_name	*(char)
,	O
0	int
)	O
;	O
free	(*(void))->(void)
(	O
mailbox_name	*(char)
)	O
;	O
return	O
rc	int
;	O
}	O
struct	O
mu_auth_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*(struct`),*(struct`),*(char))->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct(struct`,struct`),enum(int,int,int),*(char),*(struct`),*(struct`),*(struct`))),*(char),*(*(void)),*(void),*(struct(*(struct`),*(struct`))))->(int)),*((*(void))->(void)))
mu_auth_virtual_module	struct(*(char),array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int))),array(*(void)),*(struct(*(char),int,*(char),int,*(char),enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int),*(void),*((*`,*`,*`)->(void)),*(char))),*(struct(*(char),int,*(void),long,*((*`,*`)->(int)),*(char),*(char))),*((enum(int,int),*(struct(struct`,enum(int,int,int),*`,*`,*`,*`)),*(char),*(*(void)),*(void),*(struct(*`,*`)))->(int)),*((*(void))->(void)))
=	O
{	O
.	O
name	*(char)
=	O
"virtdomain"	*(char)
,	O
.	O
cfg	*(struct(*(char),int,*(void),long,*((*(void),*(struct`))->(int)),*(char),*(char)))
=	O
mu_virtdomain_param	array(struct(*(char),int,*(void),long,*((*(void),*(struct(int,union`)))->(int)),*(char),*(char)))
,	O
.	O
handler	array(*((*(*(struct(*`,*`,*`,int,int,*`,*`,*`,*`,long,int,int))),*(void),*(void),*(void))->(int)))
=	O
{	O
[	O
mu_auth_getpwnam	int
]	O
=	O
mu_auth_virt_domain_by_name	(*(*(struct(*(char),*(char),*(char),int,int,*(char),*(char),*(char),*(char),long,int,int))),*(void),*(void),*(void))->(int)
,	O
}	O
}	O
;	O
