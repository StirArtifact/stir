static	O
char	O
*	O
i_buffer	*(char)
;	O
static	O
char	O
const	O
*	O
*	O
i_ptr	*(*(char))
;	O
static	O
size_t	long
tibufsize	long
;	O
static	O
int	O
tifd	int
=	O
-	O
1	int
;	O
static	O
char	O
*	O
tibuf	array(*(char))
[	O
2	int
]	O
;	O
static	O
lin	long
tiline	array(long)
[	O
2	int
]	O
=	O
{	O
-	O
1	int
,	O
-	O
1	int
}	O
;	O
static	O
lin	long
lines_per_buf	long
;	O
static	O
size_t	long
tireclen	long
;	O
static	O
size_t	long
last_line_size	long
;	O
static	O
bool	bool
plan_a	(*(char))->(bool)
(	O
char	O
const	O
*	O
)	O
;	O
static	O
void	O
plan_b	(*(char))->(void)
(	O
char	O
const	O
*	O
)	O
;	O
static	O
void	O
report_revision	(bool)->(void)
(	O
bool	bool
)	O
;	O
static	O
void	O
too_many_lines	(*(char))->(void)
(	O
char	O
const	O
*	O
)	O
__attribute__	O
(	O
(	O
noreturn	O
)	O
)	O
;	O
void	O
re_input	()->(void)
(	O
void	O
)	O
{	O
if	O
(	O
using_plan_a	bool
)	O
{	O
if	O
(	O
i_buffer	*(char)
)	O
{	O
free	(*(void))->(void)
(	O
i_buffer	*(char)
)	O
;	O
i_buffer	*(char)
=	O
0	int
;	O
free	(*(void))->(void)
(	O
i_ptr	*(*(char))
)	O
;	O
}	O
}	O
else	O
{	O
if	O
(	O
tifd	int
>=	O
0	int
)	O
close	*((*(void))->(int))
(	O
tifd	int
)	O
;	O
tifd	int
=	O
-	O
1	int
;	O
if	O
(	O
tibuf	array(*(char))
[	O
0	int
]	O
)	O
{	O
free	(*(void))->(void)
(	O
tibuf	array(*(char))
[	O
0	int
]	O
)	O
;	O
tibuf	array(*(char))
[	O
0	int
]	O
=	O
0	int
;	O
}	O
tiline	array(long)
[	O
0	int
]	O
=	O
tiline	array(long)
[	O
1	int
]	O
=	O
-	O
1	int
;	O
tireclen	long
=	O
0	int
;	O
}	O
}	O
void	O
scan_input	(*(char),int)->(void)
(	O
char	O
*	O
filename	*(char)
,	O
mode_t	int
file_type	int
)	O
{	O
using_plan_a	bool
=	O
!	O
(	O
debug	int
&	O
16	int
)	O
&&	O
plan_a	(*(char))->(bool)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
using_plan_a	bool
)	O
{	O
if	O
(	O
!	O
S_ISREG	O
(	O
file_type	int
)	O
)	O
{	O
assert	O
(	O
S_ISLNK	O
(	O
file_type	int
)	O
)	O
;	O
fatal	(*(char))->(void)
(	O
"Can't handle %s %s"	*(char)
,	O
"symbolic link"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
)	O
;	O
}	O
plan_b	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
report_revision	(bool)->(void)
(	O
bool	bool
found_revision	bool
)	O
{	O
char	O
const	O
*	O
rev	*(char)
=	O
quotearg	(*(char))->(*(char))
(	O
revision	*(char)
)	O
;	O
if	O
(	O
found_revision	bool
)	O
{	O
if	O
(	O
verbosity	enum(int,int,int)
==	O
VERBOSE	int
)	O
say	(*(char))->(void)
(	O
"Good.  This file appears to be the %s version.\n"	*(char)
,	O
rev	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
force	bool
)	O
{	O
if	O
(	O
verbosity	enum(int,int,int)
!=	O
SILENT	int
)	O
say	(*(char))->(void)
(	O
"Warning: this file doesn't appear to be the %s version -- patching anyway.\n"	*(char)
,	O
rev	*(char)
)	O
;	O
}	O
else	O
if	O
(	O
batch	bool
)	O
fatal	(*(char))->(void)
(	O
"This file doesn't appear to be the %s version -- aborting."	*(char)
,	O
rev	*(char)
)	O
;	O
else	O
{	O
ask	(*(char))->(void)
(	O
"This file doesn't appear to be the %s version -- patch anyway? [n] "	*(char)
,	O
rev	*(char)
)	O
;	O
if	O
(	O
*	O
buf	*(char)
!=	O
'y'	O
)	O
fatal	(*(char))->(void)
(	O
"aborted"	*(char)
)	O
;	O
}	O
}	O
static	O
void	O
too_many_lines	(*(char))->(void)
(	O
char	O
const	O
*	O
filename	*(char)
)	O
{	O
fatal	(*(char))->(void)
(	O
"File %s has too many lines"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
)	O
;	O
}	O
bool	bool
get_input_file	(*(char),*(char),int)->(bool)
(	O
char	O
const	O
*	O
filename	*(char)
,	O
char	O
const	O
*	O
outname	*(char)
,	O
mode_t	int
mode	int
)	O
{	O
bool	bool
elsewhere	bool
=	O
strcmp	(*(char),*(char))->(int)
(	O
filename	*(char)
,	O
outname	*(char)
)	O
!=	O
0	int
;	O
char	O
const	O
*	O
cs	*(char)
;	O
char	O
*	O
diffbuf	*(char)
;	O
char	O
*	O
getbuf	*(char)
;	O
if	O
(	O
inerrno	int
==	O
-	O
1	int
)	O
inerrno	int
=	O
lstat	(*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
filename	*(char)
,	O
&	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
==	O
0	int
?	O
0	int
:	O
errno	O
;	O
if	O
(	O
S_ISREG	O
(	O
mode	int
)	O
&&	O
patch_get	int
&&	O
invc	int
!=	O
0	int
&&	O
(	O
inerrno	int
||	O
(	O
!	O
elsewhere	bool
&&	O
(	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
==	O
0	int
||	O
(	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
(	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
==	O
0	int
&&	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_uid	int
!=	O
geteuid	()->(int)
(	O
)	O
)	O
)	O
)	O
)	O
&&	O
(	O
invc	int
=	O
!	O
!	O
(	O
cs	*(char)
=	O
(	O
version_controller	(*(char),bool,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))),*(*(char)),*(*(char)))->(*(char))
(	O
filename	*(char)
,	O
elsewhere	bool
,	O
inerrno	int
?	O
(	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
*	O
)	O
0	int
:	O
&	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
,	O
&	O
getbuf	*(char)
,	O
&	O
diffbuf	*(char)
)	O
)	O
)	O
)	O
)	O
{	O
if	O
(	O
!	O
inerrno	int
)	O
{	O
if	O
(	O
!	O
elsewhere	bool
&&	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
(	O
S_IWUSR	O
|	O
S_IWGRP	O
|	O
S_IWOTH	O
)	O
)	O
!=	O
0	int
)	O
fatal	(*(char))->(void)
(	O
"File %s seems to be locked by somebody else under %s"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
,	O
cs	*(char)
)	O
;	O
if	O
(	O
diffbuf	*(char)
)	O
{	O
if	O
(	O
verbosity	enum(int,int,int)
==	O
VERBOSE	int
)	O
say	(*(char))->(void)
(	O
"Comparing file %s to default %s version...\n"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
,	O
cs	*(char)
)	O
;	O
if	O
(	O
systemic	(*(char))->(int)
(	O
diffbuf	*(char)
)	O
!=	O
0	int
)	O
{	O
say	(*(char))->(void)
(	O
"warning: Patching file %s, which does not match default %s version\n"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
,	O
cs	*(char)
)	O
;	O
cs	*(char)
=	O
0	int
;	O
}	O
}	O
if	O
(	O
dry_run	bool
)	O
cs	*(char)
=	O
0	int
;	O
}	O
if	O
(	O
cs	*(char)
&&	O
version_get	(*(char),*(char),bool,bool,*(char),*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(bool)
(	O
filename	*(char)
,	O
cs	*(char)
,	O
!	O
inerrno	int
,	O
elsewhere	bool
,	O
getbuf	*(char)
,	O
&	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
)	O
inerrno	int
=	O
0	int
;	O
free	(*(void))->(void)
(	O
getbuf	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
diffbuf	*(char)
)	O
;	O
}	O
if	O
(	O
inerrno	int
)	O
{	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
=	O
S_IRUSR	O
|	O
S_IWUSR	O
|	O
S_IRGRP	O
|	O
S_IWGRP	O
|	O
S_IROTH	O
|	O
S_IWOTH	O
;	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
=	O
0	int
;	O
}	O
else	O
if	O
(	O
!	O
(	O
(	O
S_ISREG	O
(	O
mode	int
)	O
||	O
S_ISLNK	O
(	O
mode	int
)	O
)	O
&&	O
(	O
mode	int
&	O
S_IFMT	O
)	O
==	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
&	O
S_IFMT	O
)	O
)	O
)	O
{	O
say	(*(char))->(void)
(	O
"File %s is not a %s -- can't patch\n"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
,	O
S_ISLNK	O
(	O
mode	int
)	O
?	O
"symbolic link"	*(char)
:	O
"regular file"	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
return	O
true	int
;	O
}	O
static	O
bool	bool
plan_a	(*(char))->(bool)
(	O
char	O
const	O
*	O
filename	*(char)
)	O
{	O
char	O
const	O
*	O
s	enum(int,int,int,int,int,int,int,int,int)
;	O
char	O
const	O
*	O
lim	*(char)
;	O
char	O
const	O
*	O
*	O
ptr	*(*(char))
;	O
char	O
*	O
buffer	*(char)
;	O
lin	long
iline	long
;	O
size_t	long
size	*(long)
=	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
if	O
(	O
!	O
(	O
size	*(long)
==	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
&&	O
(	O
buffer	*(char)
=	O
malloc	(long)->(*(void))
(	O
size	*(long)
?	O
size	*(long)
:	O
(	O
size_t	long
)	O
1	int
)	O
)	O
)	O
)	O
return	O
false	int
;	O
if	O
(	O
size	*(long)
)	O
{	O
if	O
(	O
S_ISREG	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
int	O
ifd	int
=	O
open	(*(char),int)->(int)
(	O
filename	*(char)
,	O
O_RDONLY	int
|	O
binary_transput	int
)	O
;	O
size_t	long
buffered	long
=	O
0	int
,	O
n	int
;	O
if	O
(	O
ifd	int
<	O
0	int
)	O
pfatal	(*(char))->(void)
(	O
"can't open file %s"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
)	O
;	O
while	O
(	O
size	*(long)
-	O
buffered	long
!=	O
0	int
)	O
{	O
n	int
=	O
read	*((*(void),*(char),long)->(long))
(	O
ifd	int
,	O
buffer	*(char)
+	O
buffered	long
,	O
size	*(long)
-	O
buffered	long
)	O
;	O
if	O
(	O
n	int
==	O
0	int
)	O
{	O
size	*(long)
=	O
buffered	long
;	O
break	O
;	O
}	O
if	O
(	O
n	int
==	O
(	O
size_t	long
)	O
-	O
1	int
)	O
{	O
close	*((*(void))->(int))
(	O
ifd	int
)	O
;	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
buffered	long
+=	O
n	int
;	O
}	O
if	O
(	O
close	*((*(void))->(int))
(	O
ifd	int
)	O
!=	O
0	int
)	O
read_fatal	()->(void)
(	O
)	O
;	O
}	O
else	O
if	O
(	O
S_ISLNK	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_mode	int
)	O
)	O
{	O
ssize_t	long
n	int
;	O
n	int
=	O
readlink	(*(char),*(char),long)->(long)
(	O
filename	*(char)
,	O
buffer	*(char)
,	O
size	*(long)
)	O
;	O
if	O
(	O
n	int
<	O
0	int
)	O
pfatal	(*(char))->(void)
(	O
"can't read %s %s"	*(char)
,	O
"symbolic link"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
)	O
;	O
size	*(long)
=	O
n	int
;	O
}	O
else	O
{	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
}	O
lim	*(char)
=	O
buffer	*(char)
+	O
size	*(long)
;	O
iline	long
=	O
3	int
;	O
for	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
=	O
buffer	*(char)
;	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
=	O
(	O
char	O
*	O
)	O
memchr	(*(void),int,long)->(*(void))
(	O
s	enum(int,int,int,int,int,int,int,int,int)
,	O
'\n'	O
,	O
lim	*(char)
-	O
s	enum(int,int,int,int,int,int,int,int,int)
)	O
)	O
;	O
s	enum(int,int,int,int,int,int,int,int,int)
++	O
)	O
if	O
(	O
++	O
iline	long
<	O
0	int
)	O
too_many_lines	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
!	O
(	O
iline	long
==	O
(	O
size_t	long
)	O
iline	long
&&	O
(	O
size_t	long
)	O
iline	long
*	O
sizeof	O
*	O
ptr	*(*(char))
/	O
sizeof	O
*	O
ptr	*(*(char))
==	O
(	O
size_t	long
)	O
iline	long
&&	O
(	O
ptr	*(*(char))
=	O
(	O
char	O
const	O
*	O
*	O
)	O
malloc	(long)->(*(void))
(	O
(	O
size_t	long
)	O
iline	long
*	O
sizeof	O
*	O
ptr	*(*(char))
)	O
)	O
)	O
)	O
{	O
free	(*(void))->(void)
(	O
buffer	*(char)
)	O
;	O
return	O
false	int
;	O
}	O
iline	long
=	O
0	int
;	O
for	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
=	O
buffer	*(char)
;	O
;	O
s	enum(int,int,int,int,int,int,int,int,int)
++	O
)	O
{	O
ptr	*(*(char))
[	O
++	O
iline	long
]	O
=	O
s	enum(int,int,int,int,int,int,int,int,int)
;	O
if	O
(	O
!	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
=	O
(	O
char	O
*	O
)	O
memchr	(*(void),int,long)->(*(void))
(	O
s	enum(int,int,int,int,int,int,int,int,int)
,	O
'\n'	O
,	O
lim	*(char)
-	O
s	enum(int,int,int,int,int,int,int,int,int)
)	O
)	O
)	O
break	O
;	O
}	O
if	O
(	O
size	*(long)
&&	O
lim	*(char)
[	O
-	O
1	int
]	O
!=	O
'\n'	O
)	O
ptr	*(*(char))
[	O
++	O
iline	long
]	O
=	O
lim	*(char)
;	O
input_lines	long
=	O
iline	long
-	O
1	int
;	O
if	O
(	O
revision	*(char)
)	O
{	O
char	O
const	O
*	O
rev	*(char)
=	O
revision	*(char)
;	O
int	O
rev0	int
=	O
rev	*(char)
[	O
0	int
]	O
;	O
bool	bool
found_revision	bool
=	O
false	int
;	O
size_t	long
revlen	long
=	O
strlen	(*(char))->(long)
(	O
rev	*(char)
)	O
;	O
if	O
(	O
revlen	long
<=	O
size	*(long)
)	O
{	O
char	O
const	O
*	O
limrev	*(char)
=	O
lim	*(char)
-	O
revlen	long
;	O
for	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
=	O
buffer	*(char)
;	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
=	O
(	O
char	O
*	O
)	O
memchr	(*(void),int,long)->(*(void))
(	O
s	enum(int,int,int,int,int,int,int,int,int)
,	O
rev0	int
,	O
limrev	*(char)
-	O
s	enum(int,int,int,int,int,int,int,int,int)
)	O
)	O
;	O
s	enum(int,int,int,int,int,int,int,int,int)
++	O
)	O
if	O
(	O
memcmp	(*(void),*(void),long)->(int)
(	O
s	enum(int,int,int,int,int,int,int,int,int)
,	O
rev	*(char)
,	O
revlen	long
)	O
==	O
0	int
&&	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
==	O
buffer	*(char)
||	O
ISSPACE	O
(	O
(	O
unsigned	O
char	O
)	O
s	enum(int,int,int,int,int,int,int,int,int)
[	O
-	O
1	int
]	O
)	O
)	O
&&	O
(	O
s	enum(int,int,int,int,int,int,int,int,int)
+	O
1	int
==	O
limrev	*(char)
||	O
ISSPACE	O
(	O
(	O
unsigned	O
char	O
)	O
s	enum(int,int,int,int,int,int,int,int,int)
[	O
revlen	long
]	O
)	O
)	O
)	O
{	O
found_revision	bool
=	O
true	int
;	O
break	O
;	O
}	O
}	O
report_revision	(bool)->(void)
(	O
found_revision	bool
)	O
;	O
}	O
i_buffer	*(char)
=	O
buffer	*(char)
;	O
i_ptr	*(*(char))
=	O
ptr	*(*(char))
;	O
return	O
true	int
;	O
}	O
static	O
void	O
plan_b	(*(char))->(void)
(	O
char	O
const	O
*	O
filename	*(char)
)	O
{	O
FILE	struct
*	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
;	O
int	O
c	char
;	O
size_t	long
len	long
;	O
size_t	long
maxlen	long
;	O
bool	bool
found_revision	bool
;	O
size_t	long
i	int
;	O
char	O
const	O
*	O
rev	*(char)
;	O
size_t	long
revlen	long
;	O
lin	long
line	long
=	O
1	int
;	O
if	O
(	O
instat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
==	O
0	int
)	O
filename	*(char)
=	O
NULL_DEVICE	*(char)
;	O
if	O
(	O
!	O
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
=	O
fopen	(*(char),*(char))->(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))
(	O
filename	*(char)
,	O
binary_transput	int
?	O
"rb"	*(char)
:	O
"r"	*(char)
)	O
)	O
)	O
pfatal	(*(char))->(void)
(	O
"Can't open file %s"	*(char)
,	O
quotearg	(*(char))->(*(char))
(	O
filename	*(char)
)	O
)	O
;	O
if	O
(	O
TMPINNAME_needs_removal	int
)	O
{	O
tifd	int
=	O
create_file	(*(char),int,int,bool)->(int)
(	O
TMPINNAME	*(char)
,	O
O_RDWR	int
|	O
O_BINARY	int
,	O
0	int
,	O
true	int
)	O
;	O
}	O
else	O
{	O
tifd	int
=	O
make_tempfile	(*(*(char)),char,*(char),int,int)->(int)
(	O
&	O
TMPINNAME	*(char)
,	O
'i'	O
,	O
NULL	O
,	O
O_RDWR	int
|	O
O_BINARY	int
,	O
S_IRUSR	O
|	O
S_IWUSR	O
)	O
;	O
TMPINNAME_needs_removal	int
=	O
1	int
;	O
}	O
i	int
=	O
0	int
;	O
len	long
=	O
0	int
;	O
maxlen	long
=	O
1	int
;	O
rev	*(char)
=	O
revision	*(char)
;	O
found_revision	bool
=	O
!	O
rev	*(char)
;	O
revlen	long
=	O
rev	*(char)
?	O
strlen	(*(char))->(long)
(	O
rev	*(char)
)	O
:	O
0	int
;	O
while	O
(	O
(	O
c	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
!=	O
EOF	O
)	O
{	O
len	long
++	O
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
{	O
if	O
(	O
++	O
line	long
<	O
0	int
)	O
too_many_lines	(*(char))->(void)
(	O
filename	*(char)
)	O
;	O
if	O
(	O
maxlen	long
<	O
len	long
)	O
maxlen	long
=	O
len	long
;	O
len	long
=	O
0	int
;	O
}	O
if	O
(	O
!	O
found_revision	bool
)	O
{	O
if	O
(	O
i	int
==	O
revlen	long
)	O
{	O
found_revision	bool
=	O
ISSPACE	O
(	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
;	O
i	int
=	O
(	O
size_t	long
)	O
-	O
1	int
;	O
}	O
else	O
if	O
(	O
i	int
!=	O
(	O
size_t	long
)	O
-	O
1	int
)	O
i	int
=	O
rev	*(char)
[	O
i	int
]	O
==	O
c	char
?	O
i	int
+	O
1	int
:	O
(	O
size_t	long
)	O
-	O
1	int
;	O
if	O
(	O
i	int
==	O
(	O
size_t	long
)	O
-	O
1	int
&&	O
ISSPACE	O
(	O
(	O
unsigned	O
char	O
)	O
c	char
)	O
)	O
i	int
=	O
0	int
;	O
}	O
}	O
if	O
(	O
revision	*(char)
)	O
report_revision	(bool)->(void)
(	O
found_revision	bool
)	O
;	O
Fseek	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),long,int)->(void)
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
0	int
,	O
SEEK_SET	int
)	O
;	O
for	O
(	O
tibufsize	long
=	O
TIBUFSIZE_MINIMUM	O
;	O
tibufsize	long
<	O
maxlen	long
;	O
tibufsize	long
<<=	O
1	int
)	O
;	O
lines_per_buf	long
=	O
tibufsize	long
/	O
maxlen	long
;	O
tireclen	long
=	O
maxlen	long
;	O
tibuf	array(*(char))
[	O
0	int
]	O
=	O
xmalloc	(long)->(*(void))
(	O
2	int
*	O
tibufsize	long
)	O
;	O
tibuf	array(*(char))
[	O
1	int
]	O
=	O
tibuf	array(*(char))
[	O
0	int
]	O
+	O
tibufsize	long
;	O
for	O
(	O
line	long
=	O
1	int
;	O
;	O
line	long
++	O
)	O
{	O
char	O
*	O
p	*(void)
=	O
tibuf	array(*(char))
[	O
0	int
]	O
+	O
maxlen	long
*	O
(	O
line	long
%	O
lines_per_buf	long
)	O
;	O
char	O
const	O
*	O
p0	*(char)
=	O
p	*(void)
;	O
if	O
(	O
!	O
(	O
line	long
%	O
lines_per_buf	long
)	O
)	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
tifd	int
,	O
tibuf	array(*(char))
[	O
0	int
]	O
,	O
tibufsize	long
)	O
!=	O
tibufsize	long
)	O
write_fatal	()->(void)
(	O
)	O
;	O
if	O
(	O
(	O
c	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
==	O
EOF	O
)	O
break	O
;	O
for	O
(	O
;	O
;	O
)	O
{	O
*	O
p	*(void)
++	O
=	O
c	char
;	O
if	O
(	O
c	char
==	O
'\n'	O
)	O
{	O
last_line_size	long
=	O
p	*(void)
-	O
p0	*(char)
;	O
break	O
;	O
}	O
if	O
(	O
(	O
c	char
=	O
getc	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
)	O
==	O
EOF	O
)	O
{	O
last_line_size	long
=	O
p	*(void)
-	O
p0	*(char)
;	O
line	long
++	O
;	O
goto	O
EOF_reached	O
;	O
}	O
}	O
}	O
EOF_reached	O
:	O
if	O
(	O
ferror	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
||	O
fclose	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))))->(int)
(	O
ifp	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
)	O
!=	O
0	int
)	O
read_fatal	()->(void)
(	O
)	O
;	O
if	O
(	O
line	long
%	O
lines_per_buf	long
!=	O
0	int
)	O
if	O
(	O
write	*((*(void),*(char),long)->(long))
(	O
tifd	int
,	O
tibuf	array(*(char))
[	O
0	int
]	O
,	O
tibufsize	long
)	O
!=	O
tibufsize	long
)	O
write_fatal	()->(void)
(	O
)	O
;	O
input_lines	long
=	O
line	long
-	O
1	int
;	O
}	O
char	O
const	O
*	O
ifetch	(long,bool,*(long))->(*(char))
(	O
lin	long
line	long
,	O
bool	bool
whichbuf	bool
,	O
size_t	long
*	O
psize	*(long)
)	O
{	O
char	O
const	O
*	O
q	*(char)
;	O
char	O
const	O
*	O
p	*(void)
;	O
if	O
(	O
line	long
<	O
1	int
||	O
line	long
>	O
input_lines	long
)	O
{	O
*	O
psize	*(long)
=	O
0	int
;	O
return	O
""	*(char)
;	O
}	O
if	O
(	O
using_plan_a	bool
)	O
{	O
p	*(void)
=	O
i_ptr	*(*(char))
[	O
line	long
]	O
;	O
*	O
psize	*(long)
=	O
i_ptr	*(*(char))
[	O
line	long
+	O
1	int
]	O
-	O
p	*(void)
;	O
return	O
p	*(void)
;	O
}	O
else	O
{	O
lin	long
offline	long
=	O
line	long
%	O
lines_per_buf	long
;	O
lin	long
baseline	long
=	O
line	long
-	O
offline	long
;	O
if	O
(	O
tiline	array(long)
[	O
0	int
]	O
==	O
baseline	long
)	O
whichbuf	bool
=	O
false	int
;	O
else	O
if	O
(	O
tiline	array(long)
[	O
1	int
]	O
==	O
baseline	long
)	O
whichbuf	bool
=	O
true	int
;	O
else	O
{	O
tiline	array(long)
[	O
whichbuf	bool
]	O
=	O
baseline	long
;	O
if	O
(	O
(	O
lseek	(int,long,int)->(long)
(	O
tifd	int
,	O
baseline	long
/	O
lines_per_buf	long
*	O
tibufsize	long
,	O
SEEK_SET	int
)	O
==	O
-	O
1	int
)	O
||	O
read	*((*(void),*(char),long)->(long))
(	O
tifd	int
,	O
tibuf	array(*(char))
[	O
whichbuf	bool
]	O
,	O
tibufsize	long
)	O
<	O
0	int
)	O
read_fatal	()->(void)
(	O
)	O
;	O
}	O
p	*(void)
=	O
tibuf	array(*(char))
[	O
whichbuf	bool
]	O
+	O
(	O
tireclen	long
*	O
offline	long
)	O
;	O
if	O
(	O
line	long
==	O
input_lines	long
)	O
*	O
psize	*(long)
=	O
last_line_size	long
;	O
else	O
{	O
for	O
(	O
q	*(char)
=	O
p	*(void)
;	O
*	O
q	*(char)
++	O
!=	O
'\n'	O
;	O
)	O
;	O
*	O
psize	*(long)
=	O
q	*(char)
-	O
p	*(void)
;	O
}	O
return	O
p	*(void)
;	O
}	O
}	O
