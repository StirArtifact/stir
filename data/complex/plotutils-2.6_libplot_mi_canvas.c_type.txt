static	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
miNewPixmap	(int,int,struct(char,union(char,array(char))))->(*(struct(*(*(struct`)),int,int)))
(	O
unsigned	O
int	O
width	array(short)
,	O
unsigned	O
int	O
height	int
,	O
miPixel	struct(char,union(char,array(char)))
initPixel	struct(char,union(char,array(char)))
)	O
;	O
static	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
miCopyPixmap	(*(struct(*(*(struct`)),int,int)))->(*(struct(*(*(struct`)),int,int)))
(	O
const	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
)	O
;	O
static	O
void	O
miDeletePixmap	(*(struct(*(*(struct`)),int,int)))->(void)
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
)	O
;	O
static	O
miBitmap	struct(*(*(int)),int,int)
*	O
miCopyBitmap	(*(struct(*(*(int)),int,int)))->(*(struct(*(*(int)),int,int)))
(	O
const	O
miBitmap	struct(*(*(int)),int,int)
*	O
pBitmap	*(struct(*(*(int)),int,int))
)	O
;	O
static	O
void	O
miDeleteBitmap	(*(struct(*(*(int)),int,int)))->(void)
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
pBitmap	*(struct(*(*(int)),int,int))
)	O
;	O
static	O
void	O
miPaintCanvas	(*(struct(*(struct(*`,int,int)),*(struct(*`,int,int)),struct(int,int),*(struct(*`,int,int)),struct(int,int),*((struct`,struct`)->(struct`)),*((struct`,struct`,struct`)->(struct`)))),struct(char,union(char,array(char))),int,*(struct(int,int)),*(int),struct(int,int))->(void)
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
canvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
miPixel	struct(char,union(char,array(char)))
pixel	struct(char,union(char,array(char)))
,	O
int	O
n	array(double)
,	O
const	O
miPoint	struct(int,int)
*	O
ppt	*(struct(int,int))
,	O
const	O
unsigned	O
int	O
*	O
pwidth	*(int)
,	O
miPoint	struct(int,int)
offset	array(short)
)	O
;	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
miNewCanvas	O
(	O
unsigned	O
int	O
width	array(short)
,	O
unsigned	O
int	O
height	int
,	O
miPixel	struct(char,union(char,array(char)))
initPixel	struct(char,union(char,array(char)))
)	O
{	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
;	O
if	O
(	O
width	array(short)
<	O
1	int
||	O
height	int
<	O
1	int
)	O
return	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
=	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
)	O
)	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
drawable	*(struct(*(*(struct(char,union`))),int,int))
=	O
miNewPixmap	(int,int,struct(char,union(char,array(char))))->(*(struct(*(*(struct`)),int,int)))
(	O
width	array(short)
,	O
height	int
,	O
initPixel	struct(char,union(char,array(char)))
)	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
=	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
)	O
NULL	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
=	O
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
)	O
NULL	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
(	O
miPixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
)	O
NULL	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
(	O
miPixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
)	O
NULL	O
;	O
return	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
;	O
}	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
miCopyCanvas	O
(	O
const	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
)	O
{	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
;	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
==	O
(	O
const	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
)	O
return	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
=	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
)	O
)	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
drawable	*(struct(*(*(struct(char,union`))),int,int))
=	O
miCopyPixmap	(*(struct(*(*(struct`)),int,int)))->(*(struct(*(*(struct`)),int,int)))
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
drawable	*(struct(*(*(struct(char,union`))),int,int))
)	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
=	O
miCopyPixmap	(*(struct(*(*(struct`)),int,int)))->(*(struct(*(*(struct`)),int,int)))
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
)	O
;	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
=	O
miCopyBitmap	(*(struct(*(*(int)),int,int)))->(*(struct(*(*(int)),int,int)))
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
)	O
;	O
return	O
new_pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
;	O
}	O
void	O
miDeleteCanvas	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
)	O
{	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
==	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
)	O
return	O
;	O
miDeletePixmap	(*(struct(*(*(struct`)),int,int)))->(void)
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
drawable	*(struct(*(*(struct(char,union`))),int,int))
)	O
;	O
miDeletePixmap	(*(struct(*(*(struct`)),int,int)))->(void)
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
)	O
;	O
miDeleteBitmap	(*(struct(*(*(int)),int,int)))->(void)
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
)	O
;	O
free	(*(void))->(void)
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
)	O
;	O
}	O
static	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
miNewPixmap	(int,int,struct(char,union(char,array(char))))->(*(struct(*(*(struct`)),int,int)))
(	O
unsigned	O
int	O
width	array(short)
,	O
unsigned	O
int	O
height	int
,	O
miPixel	struct(char,union(char,array(char)))
initPixel	struct(char,union(char,array(char)))
)	O
{	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
;	O
miPixel	struct(char,union(char,array(char)))
*	O
*	O
pixmap	*(*(struct(char,union(char,array(char)))))
;	O
int	O
i	int
,	O
j	int
;	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
=	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
)	O
)	O
;	O
pixmap	*(*(struct(char,union(char,array(char)))))
=	O
(	O
miPixel	struct(char,union(char,array(char)))
*	O
*	O
)	O
mi_xmalloc	O
(	O
height	int
*	O
sizeof	O
(	O
miPixel	struct(char,union(char,array(char)))
*	O
)	O
)	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
height	int
;	O
j	int
++	O
)	O
{	O
pixmap	*(*(struct(char,union(char,array(char)))))
[	O
j	int
]	O
=	O
(	O
miPixel	struct(char,union(char,array(char)))
*	O
)	O
mi_xmalloc	O
(	O
width	array(short)
*	O
sizeof	O
(	O
miPixel	struct(char,union(char,array(char)))
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
width	array(short)
;	O
i	int
++	O
)	O
pixmap	*(*(struct(char,union(char,array(char)))))
[	O
j	int
]	O
[	O
i	int
]	O
=	O
initPixel	struct(char,union(char,array(char)))
;	O
}	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
pixmap	*(*(struct(char,union(char,array(char)))))
=	O
pixmap	*(*(struct(char,union(char,array(char)))))
;	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
width	array(short)
=	O
width	array(short)
;	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
height	int
=	O
height	int
;	O
return	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
;	O
}	O
static	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
miCopyPixmap	(*(struct(*(*(struct`)),int,int)))->(*(struct(*(*(struct`)),int,int)))
(	O
const	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
)	O
{	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
;	O
miPixel	struct(char,union(char,array(char)))
*	O
*	O
pixmap	*(*(struct(char,union(char,array(char)))))
;	O
miPixel	struct(char,union(char,array(char)))
*	O
const	O
*	O
old_pixmap	*(*(struct(char,union(char,array(char)))))
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
==	O
(	O
const	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
)	O
NULL	O
)	O
return	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
)	O
NULL	O
;	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
=	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
)	O
)	O
;	O
pixmap	*(*(struct(char,union(char,array(char)))))
=	O
(	O
miPixel	struct(char,union(char,array(char)))
*	O
*	O
)	O
mi_xmalloc	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
height	int
*	O
sizeof	O
(	O
miPixel	struct(char,union(char,array(char)))
*	O
)	O
)	O
;	O
old_pixmap	*(*(struct(char,union(char,array(char)))))
=	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
pixmap	*(*(struct(char,union(char,array(char)))))
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
height	int
)	O
;	O
j	int
++	O
)	O
{	O
pixmap	*(*(struct(char,union(char,array(char)))))
[	O
j	int
]	O
=	O
(	O
miPixel	struct(char,union(char,array(char)))
*	O
)	O
mi_xmalloc	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
width	array(short)
*	O
sizeof	O
(	O
miPixel	struct(char,union(char,array(char)))
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
width	array(short)
)	O
;	O
i	int
++	O
)	O
pixmap	*(*(struct(char,union(char,array(char)))))
[	O
j	int
]	O
[	O
i	int
]	O
=	O
old_pixmap	*(*(struct(char,union(char,array(char)))))
[	O
j	int
]	O
[	O
i	int
]	O
;	O
}	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
pixmap	*(*(struct(char,union(char,array(char)))))
=	O
pixmap	*(*(struct(char,union(char,array(char)))))
;	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
width	array(short)
=	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
width	array(short)
;	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
height	int
=	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
height	int
;	O
return	O
new_pPixmap	*(struct(*(*(struct(char,union`))),int,int))
;	O
}	O
static	O
void	O
miDeletePixmap	(*(struct(*(*(struct`)),int,int)))->(void)
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
)	O
{	O
int	O
j	int
;	O
if	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
==	O
(	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
)	O
NULL	O
)	O
return	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
height	int
)	O
;	O
j	int
++	O
)	O
free	(*(void))->(void)
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
pixmap	*(*(struct(char,union(char,array(char)))))
[	O
j	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
->	O
pixmap	*(*(struct(char,union(char,array(char)))))
)	O
;	O
free	(*(void))->(void)
(	O
pPixmap	*(struct(*(*(struct(char,union`))),int,int))
)	O
;	O
}	O
static	O
miBitmap	struct(*(*(int)),int,int)
*	O
miCopyBitmap	(*(struct(*(*(int)),int,int)))->(*(struct(*(*(int)),int,int)))
(	O
const	O
miBitmap	struct(*(*(int)),int,int)
*	O
pBitmap	*(struct(*(*(int)),int,int))
)	O
{	O
miBitmap	struct(*(*(int)),int,int)
*	O
new_pBitmap	*(struct(*(*(int)),int,int))
;	O
int	O
*	O
*	O
bitmap	*(*(int))
;	O
int	O
*	O
const	O
*	O
old_bitmap	*(*(int))
;	O
int	O
i	int
,	O
j	int
;	O
if	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
==	O
(	O
const	O
miBitmap	struct(*(*(int)),int,int)
*	O
)	O
NULL	O
)	O
return	O
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
)	O
NULL	O
;	O
new_pBitmap	*(struct(*(*(int)),int,int))
=	O
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
)	O
mi_xmalloc	O
(	O
sizeof	O
(	O
miBitmap	struct(*(*(int)),int,int)
)	O
)	O
;	O
bitmap	*(*(int))
=	O
(	O
int	O
*	O
*	O
)	O
mi_xmalloc	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
height	int
*	O
sizeof	O
(	O
int	O
*	O
)	O
)	O
;	O
old_bitmap	*(*(int))
=	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
bitmap	*(*(int))
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
height	int
)	O
;	O
j	int
++	O
)	O
{	O
bitmap	*(*(int))
[	O
j	int
]	O
=	O
(	O
int	O
*	O
)	O
mi_xmalloc	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
width	array(short)
*	O
sizeof	O
(	O
int	O
)	O
)	O
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
(	O
int	O
)	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
width	array(short)
)	O
;	O
i	int
++	O
)	O
bitmap	*(*(int))
[	O
j	int
]	O
[	O
i	int
]	O
=	O
old_bitmap	*(*(int))
[	O
j	int
]	O
[	O
i	int
]	O
;	O
}	O
new_pBitmap	*(struct(*(*(int)),int,int))
->	O
bitmap	*(*(int))
=	O
bitmap	*(*(int))
;	O
new_pBitmap	*(struct(*(*(int)),int,int))
->	O
width	array(short)
=	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
width	array(short)
;	O
new_pBitmap	*(struct(*(*(int)),int,int))
->	O
height	int
=	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
height	int
;	O
return	O
new_pBitmap	*(struct(*(*(int)),int,int))
;	O
}	O
static	O
void	O
miDeleteBitmap	(*(struct(*(*(int)),int,int)))->(void)
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
pBitmap	*(struct(*(*(int)),int,int))
)	O
{	O
int	O
j	int
;	O
if	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
==	O
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
)	O
NULL	O
)	O
return	O
;	O
for	O
(	O
j	int
=	O
0	int
;	O
j	int
<	O
(	O
int	O
)	O
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
height	int
)	O
;	O
j	int
++	O
)	O
free	(*(void))->(void)
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
bitmap	*(*(int))
[	O
j	int
]	O
)	O
;	O
free	(*(void))->(void)
(	O
pBitmap	*(struct(*(*(int)),int,int))
->	O
bitmap	*(*(int))
)	O
;	O
free	(*(void))->(void)
(	O
pBitmap	*(struct(*(*(int)),int,int))
)	O
;	O
}	O
void	O
miSetPixelMerge2	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
miPixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
)	O
{	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
==	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
)	O
return	O
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
}	O
void	O
miSetPixelMerge3	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
miPixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
)	O
{	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
==	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
)	O
return	O
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
}	O
void	O
miSetCanvasStipple	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
const	O
miBitmap	struct(*(*(int)),int,int)
*	O
pstipple	*(struct(*(*(int)),int,int))
,	O
miPoint	struct(int,int)
stippleOrigin	struct(int,int)
)	O
{	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
==	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
)	O
return	O
;	O
miDeleteBitmap	(*(struct(*(*(int)),int,int)))->(void)
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
)	O
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
=	O
miCopyBitmap	(*(struct(*(*(int)),int,int)))->(*(struct(*(*(int)),int,int)))
(	O
pstipple	*(struct(*(*(int)),int,int))
)	O
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stippleOrigin	struct(int,int)
=	O
stippleOrigin	struct(int,int)
;	O
}	O
void	O
miSetCanvasTexture	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
const	O
miPixmap	struct(*(*(struct(char,union(char,array(char))))),int,int)
*	O
pTexture	*(struct(*(*(struct(char,union`))),int,int))
,	O
miPoint	struct(int,int)
textureOrigin	struct(int,int)
)	O
{	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
==	O
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
)	O
NULL	O
)	O
return	O
;	O
miDeletePixmap	(*(struct(*(*(struct`)),int,int)))->(void)
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
)	O
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
=	O
miCopyPixmap	(*(struct(*(*(struct`)),int,int)))->(*(struct(*(*(struct`)),int,int)))
(	O
pTexture	*(struct(*(*(struct(char,union`))),int,int))
)	O
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
textureOrigin	struct(int,int)
=	O
textureOrigin	struct(int,int)
;	O
}	O
static	O
void	O
miPaintCanvas	(*(struct(*(struct(*`,int,int)),*(struct(*`,int,int)),struct(int,int),*(struct(*`,int,int)),struct(int,int),*((struct`,struct`)->(struct`)),*((struct`,struct`,struct`)->(struct`)))),struct(char,union(char,array(char))),int,*(struct(int,int)),*(int),struct(int,int))->(void)
(	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
canvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
miPixel	struct(char,union(char,array(char)))
pixel	struct(char,union(char,array(char)))
,	O
int	O
n	array(double)
,	O
const	O
miPoint	struct(int,int)
*	O
ppt	*(struct(int,int))
,	O
const	O
unsigned	O
int	O
*	O
pwidth	*(int)
,	O
miPoint	struct(int,int)
offset	array(short)
)	O
{	O
int	O
i	int
;	O
int	O
xleft	double
,	O
xright	double
,	O
ybottom	int
,	O
ytop	int
;	O
unsigned	O
int	O
stippleWidth	int
=	O
0	int
,	O
stippleHeight	int
=	O
0	int
;	O
unsigned	O
int	O
textureWidth	int
=	O
0	int
,	O
textureHeight	int
=	O
0	int
;	O
int	O
stippleXOrigin	int
=	O
0	int
,	O
stippleYOrigin	int
=	O
0	int
;	O
int	O
textureXOrigin	int
=	O
0	int
,	O
textureYOrigin	int
=	O
0	int
;	O
int	O
xstart	int
,	O
xend	int
,	O
xstart_clip	int
,	O
xend_clip	int
,	O
xoffset	int
,	O
yoffset	int
,	O
x	double
,	O
y	double
;	O
unsigned	O
int	O
width	array(short)
;	O
const	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
;	O
miPixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
miPixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
=	O
canvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
;	O
xoffset	int
=	O
offset	array(short)
.	O
x	double
;	O
yoffset	int
=	O
offset	array(short)
.	O
y	double
;	O
MI_GET_CANVAS_DRAWABLE_BOUNDS	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
xleft	double
,	O
ytop	int
,	O
xright	double
,	O
ybottom	int
)	O
if	O
(	O
ppt	*(struct(int,int))
[	O
0	int
]	O
.	O
y	double
+	O
yoffset	int
>	O
ybottom	int
||	O
ppt	*(struct(int,int))
[	O
n	array(double)
-	O
1	int
]	O
.	O
y	double
+	O
yoffset	int
<	O
ytop	int
)	O
return	O
;	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge2	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
pixelMerge3	*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char)))))
;	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
)	O
{	O
stippleWidth	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
->	O
width	array(short)
;	O
stippleHeight	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
->	O
height	int
;	O
stippleXOrigin	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stippleOrigin	struct(int,int)
.	O
x	double
;	O
stippleYOrigin	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stippleOrigin	struct(int,int)
.	O
y	double
;	O
while	O
(	O
stippleXOrigin	int
>	O
0	int
)	O
stippleXOrigin	int
-=	O
stippleWidth	int
;	O
while	O
(	O
stippleYOrigin	int
>	O
0	int
)	O
stippleYOrigin	int
-=	O
stippleHeight	int
;	O
}	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
)	O
{	O
textureWidth	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
->	O
width	array(short)
;	O
textureHeight	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
->	O
height	int
;	O
textureXOrigin	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
textureOrigin	struct(int,int)
.	O
x	double
;	O
textureYOrigin	int
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
textureOrigin	struct(int,int)
.	O
y	double
;	O
while	O
(	O
textureXOrigin	int
>	O
0	int
)	O
textureXOrigin	int
-=	O
textureWidth	int
;	O
while	O
(	O
textureYOrigin	int
>	O
0	int
)	O
textureYOrigin	int
-=	O
textureHeight	int
;	O
}	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
n	array(double)
;	O
i	int
++	O
)	O
{	O
y	double
=	O
ppt	*(struct(int,int))
[	O
i	int
]	O
.	O
y	double
+	O
yoffset	int
;	O
if	O
(	O
y	double
>	O
ybottom	int
)	O
return	O
;	O
if	O
(	O
y	double
>=	O
ytop	int
)	O
{	O
width	array(short)
=	O
pwidth	*(int)
[	O
i	int
]	O
;	O
xstart	int
=	O
ppt	*(struct(int,int))
[	O
i	int
]	O
.	O
x	double
+	O
xoffset	int
;	O
xend	int
=	O
xstart	int
+	O
(	O
int	O
)	O
width	array(short)
-	O
1	int
;	O
xstart_clip	int
=	O
IMAX	O
(	O
xstart	int
,	O
xleft	double
)	O
;	O
xend_clip	int
=	O
IMIN	O
(	O
xend	int
,	O
xright	double
)	O
;	O
for	O
(	O
x	double
=	O
xstart_clip	int
;	O
x	double
<=	O
xend_clip	int
;	O
x	double
++	O
)	O
{	O
miPixel	struct(char,union(char,array(char)))
texturePixel	struct(char,union(char,array(char)))
,	O
sourcePixel	struct(char,union(char,array(char)))
;	O
bool	enum(int,int)
have_texturePixel	enum(int,int)
=	O
false	int
;	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
)	O
{	O
texturePixel	struct(char,union(char,array(char)))
=	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
texture	struct(char,union(char,array(char)))
->	O
pixmap	*(*(struct(char,union(char,array(char)))))
[	O
(	O
y	double
-	O
textureYOrigin	int
)	O
%	O
textureHeight	int
]	O
[	O
(	O
x	double
-	O
textureXOrigin	int
)	O
%	O
textureWidth	int
]	O
;	O
have_texturePixel	enum(int,int)
=	O
true	int
;	O
}	O
else	O
texturePixel	struct(char,union(char,array(char)))
=	O
pixel	struct(char,union(char,array(char)))
;	O
sourcePixel	struct(char,union(char,array(char)))
=	O
pixel	struct(char,union(char,array(char)))
;	O
if	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
==	O
(	O
miBitmap	struct(*(*(int)),int,int)
*	O
)	O
NULL	O
||	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
->	O
stipple	*(struct(*(*(int)),int,int))
->	O
bitmap	*(*(int))
[	O
(	O
y	double
-	O
stippleYOrigin	int
)	O
%	O
stippleHeight	int
]	O
[	O
(	O
x	double
-	O
stippleXOrigin	int
)	O
%	O
stippleWidth	int
]	O
!=	O
0	int
)	O
MI_MERGE_CANVAS_PIXEL	O
(	O
pCanvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
x	double
,	O
y	double
,	O
sourcePixel	struct(char,union(char,array(char)))
,	O
texturePixel	struct(char,union(char,array(char)))
,	O
have_texturePixel	enum(int,int)
)	O
}	O
}	O
}	O
}	O
void	O
miCopyPaintedSetToCanvas	O
(	O
const	O
miPaintedSet	struct
*	O
paintedSet	*(struct)
,	O
miCanvas	struct(*(struct(*(*(struct`)),int,int)),*(struct(*(*(int)),int,int)),struct(int,int),*(struct(*(*(struct`)),int,int)),struct(int,int),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))),*((struct(char,union(char,array(char))),struct(char,union(char,array(char))),struct(char,union(char,array(char))))->(struct(char,union(char,array(char))))))
*	O
canvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
miPoint	struct(int,int)
offset	array(short)
)	O
{	O
int	O
i	int
;	O
for	O
(	O
i	int
=	O
0	int
;	O
i	int
<	O
paintedSet	*(struct)
->	O
ngroups	int
;	O
i	int
++	O
)	O
if	O
(	O
paintedSet	*(struct)
->	O
groups	*(*(struct(struct(char,union(char,array(char))),*(struct(int,*`,*`)),int,int,int,int)))
[	O
i	int
]	O
->	O
group	*(struct(int,*(struct(int,int)),*(int)))
[	O
0	int
]	O
.	O
count	int
>	O
0	int
)	O
miPaintCanvas	(*(struct(*(struct(*`,int,int)),*(struct(*`,int,int)),struct(int,int),*(struct(*`,int,int)),struct(int,int),*((struct`,struct`)->(struct`)),*((struct`,struct`,struct`)->(struct`)))),struct(char,union(char,array(char))),int,*(struct(int,int)),*(int),struct(int,int))->(void)
(	O
canvas	*(struct(*(struct(*(*`),int,int)),*(struct(*(*`),int,int)),struct(int,int),*(struct(*(*`),int,int)),struct(int,int),*((struct(char,union`),struct(char,union`))->(struct(char,union`))),*((struct(char,union`),struct(char,union`),struct(char,union`))->(struct(char,union`)))))
,	O
paintedSet	*(struct)
->	O
groups	*(*(struct(struct(char,union(char,array(char))),*(struct(int,*`,*`)),int,int,int,int)))
[	O
i	int
]	O
->	O
pixel	struct(char,union(char,array(char)))
,	O
paintedSet	*(struct)
->	O
groups	*(*(struct(struct(char,union(char,array(char))),*(struct(int,*`,*`)),int,int,int,int)))
[	O
i	int
]	O
->	O
group	*(struct(int,*(struct(int,int)),*(int)))
[	O
0	int
]	O
.	O
count	int
,	O
paintedSet	*(struct)
->	O
groups	*(*(struct(struct(char,union(char,array(char))),*(struct(int,*`,*`)),int,int,int,int)))
[	O
i	int
]	O
->	O
group	*(struct(int,*(struct(int,int)),*(int)))
[	O
0	int
]	O
.	O
points	*(struct(int,int))
,	O
paintedSet	*(struct)
->	O
groups	*(*(struct(struct(char,union(char,array(char))),*(struct(int,*`,*`)),int,int,int,int)))
[	O
i	int
]	O
->	O
group	*(struct(int,*(struct(int,int)),*(int)))
[	O
0	int
]	O
.	O
widths	*(int)
,	O
offset	array(short)
)	O
;	O
}	O
