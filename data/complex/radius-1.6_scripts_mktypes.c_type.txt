char	O
header_text	array(char)
[	O
]	O
=	O
"/* This file is part of GNU Radius.\n   Copyright (C) 2004, 2007, 2008 Free Software Foundation, Inc.\n\n   GNU Radius is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   GNU Radius is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with GNU Radius; if not, write to the Free Software Foundation,\n   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n   This file is generated automatically. Please do not edit.*/"	*(char)
;	O
char	O
*	O
print_number	(*(char),*(char),*(int))->(*(char))
(	O
char	O
*	O
prefix	*(char)
,	O
char	O
*	O
p	*(char)
,	O
unsigned	O
*	O
acc	*(int)
)	O
{	O
unsigned	O
n	int
=	O
0	int
;	O
if	O
(	O
isdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
)	O
{	O
printf	(*(char))->(int)
(	O
"#define %s "	*(char)
,	O
prefix	*(char)
)	O
;	O
for	O
(	O
;	O
isdigit	(int)->(int)
(	O
*	O
p	*(char)
)	O
;	O
p	*(char)
++	O
)	O
{	O
putchar	(int)->(int)
(	O
*	O
p	*(char)
)	O
;	O
n	int
=	O
n	int
*	O
10	int
+	O
*	O
p	*(char)
-	O
'0'	O
;	O
}	O
putchar	(int)->(int)
(	O
'\n'	O
)	O
;	O
}	O
*	O
acc	*(int)
=	O
n	int
;	O
return	O
p	*(char)
;	O
}	O
int	O
main	()->(int)
(	O
)	O
{	O
char	O
*	O
p	*(char)
;	O
unsigned	O
version	int
=	O
0	int
,	O
n	int
;	O
printf	(*(char))->(int)
(	O
"%s\n\n"	*(char)
,	O
header_text	array(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#ifndef _gnu_radius_types_h\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#define _gnu_radius_types_h\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#include <sys/types.h>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#include <stdint.h>\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#define GRAD_VERSION_STRING \"%s\"\n"	*(char)
,	O
PACKAGE_VERSION	*(char)
)	O
;	O
p	*(char)
=	O
PACKAGE_VERSION	*(char)
;	O
p	*(char)
=	O
print_number	(*(char),*(char),*(int))->(*(char))
(	O
"GRAD_VERSION_MAJOR"	*(char)
,	O
p	*(char)
,	O
&	O
version	int
)	O
;	O
version	int
*=	O
1000	int
;	O
if	O
(	O
*	O
p	*(char)
==	O
'.'	O
)	O
{	O
p	*(char)
++	O
;	O
p	*(char)
=	O
print_number	(*(char),*(char),*(int))->(*(char))
(	O
"GRAD_VERSION_MINOR"	*(char)
,	O
p	*(char)
,	O
&	O
n	int
)	O
;	O
version	int
+=	O
n	int
*	O
100	int
;	O
if	O
(	O
*	O
p	*(char)
==	O
'.'	O
)	O
{	O
p	*(char)
++	O
;	O
p	*(char)
=	O
print_number	(*(char),*(char),*(int))->(*(char))
(	O
"GRAD_VERSION_PATCH"	*(char)
,	O
p	*(char)
,	O
&	O
n	int
)	O
;	O
version	int
+=	O
n	int
;	O
}	O
else	O
printf	(*(char))->(int)
(	O
"#define GRAD_VERSION_PATCH 0\n"	*(char)
)	O
;	O
}	O
if	O
(	O
*	O
p	*(char)
)	O
printf	(*(char))->(int)
(	O
"#define GRAD_VERSION_EXTRA \"%s\"\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#define GRAD_VERSION_NUMBER %u\n"	*(char)
,	O
version	int
)	O
;	O
printf	(*(char))->(int)
(	O
"typedef %s grad_uint32_t;\n"	*(char)
,	O
"uint32_t"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"#define RADIUS_AUTH_PORT %u\n"	*(char)
,	O
DEF_AUTH_PORT	int
)	O
;	O
printf	(*(char))->(int)
(	O
"#define RADIUS_ACCT_PORT %u\n"	*(char)
,	O
DEF_ACCT_PORT	int
)	O
;	O
printf	(*(char))->(int)
(	O
"#endif\n"	*(char)
)	O
;	O
printf	(*(char))->(int)
(	O
"/* End of radius/types.h */\n"	*(char)
)	O
;	O
return	O
0	int
;	O
}	O
