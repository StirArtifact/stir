int	O
gsl_multiroot_fdjacobian	(*(struct(*((*`,*`,*`)->(int)),long,*(void))),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_multiroot_function	struct(*((*(struct(long,long,*`,*`,int)),*(void),*(struct(long,long,*`,*`,int)))->(int)),long,*(void))
*	O
F	*(struct(*((*(struct`),*(void),*(struct`))->(int)),long,*(void)))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	double
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
f	*(double)
,	O
double	O
epsrel	double
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
jacobian	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
n	int
=	O
x	double
->	O
size	long
;	O
const	O
size_t	long
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
f	*(double)
->	O
size	long
;	O
const	O
size_t	long
n1	long
=	O
jacobian	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
n2	long
=	O
jacobian	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
int	O
status	int
=	O
0	int
;	O
if	O
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
!=	O
n1	long
||	O
n	int
!=	O
n2	long
)	O
{	O
GSL_ERROR	O
(	O
"function and jacobian are not conformant"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
{	O
size_t	long
i	long
,	O
j	long
;	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x1	double
,	O
*	O
f1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
;	O
x1	double
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
n	int
)	O
;	O
if	O
(	O
x1	double
==	O
0	int
)	O
{	O
GSL_ERROR	O
(	O
"failed to allocate space for x1 workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
f1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_alloc	(long)->(*(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
if	O
(	O
f1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x1	double
)	O
;	O
GSL_ERROR	O
(	O
"failed to allocate space for f1 workspace"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
}	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x1	double
,	O
x	double
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
n	int
;	O
j	long
++	O
)	O
{	O
double	O
xj	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
x	double
,	O
j	long
)	O
;	O
double	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
epsrel	double
*	O
fabs	(double)->(double)
(	O
xj	double
)	O
;	O
if	O
(	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
==	O
0	int
)	O
{	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
epsrel	double
;	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x1	double
,	O
j	long
,	O
xj	double
+	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
{	O
int	O
f_stat	int
=	O
GSL_MULTIROOT_FN_EVAL	O
(	O
F	*(struct(*((*(struct`),*(void),*(struct`))->(int)),long,*(void)))
,	O
x1	double
,	O
f1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
f_stat	int
!=	O
GSL_SUCCESS	int
)	O
{	O
status	int
=	O
GSL_EBADFUNC	int
;	O
break	O
;	O
}	O
}	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
x1	double
,	O
j	long
,	O
xj	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
i	long
++	O
)	O
{	O
double	O
g1	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
f1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
;	O
double	O
g0	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
f	*(double)
,	O
i	long
)	O
;	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
jacobian	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
,	O
j	long
,	O
(	O
g1	double
-	O
g0	double
)	O
/	O
dx	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
{	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
col	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
jacobian	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
j	long
)	O
;	O
int	O
null_col	int
=	O
gsl_vector_isnull	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
col	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
null_col	int
)	O
{	O
status	int
=	O
GSL_ESING	int
;	O
}	O
}	O
}	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
x1	double
)	O
;	O
gsl_vector_free	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(void)
(	O
f1	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
else	O
return	O
GSL_SUCCESS	int
;	O
}	O
