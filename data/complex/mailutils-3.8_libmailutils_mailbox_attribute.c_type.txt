int	O
mu_attribute_create	(*(*(struct)),*(void))->(int)
(	O
mu_attribute_t	*(struct)
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
mu_attribute_t	*(struct)
attr	*(struct)
;	O
if	O
(	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
attr	*(struct)
=	O
calloc	(long,long)->(*(void))
(	O
1	int
,	O
sizeof	O
(	O
*	O
attr	*(struct)
)	O
)	O
;	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
ENOMEM	int
;	O
attr	*(struct)
->	O
owner	*(void)
=	O
owner	*(void)
;	O
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
=	O
attr	*(struct)
;	O
return	O
0	int
;	O
}	O
void	O
mu_attribute_destroy	(*(*(struct)),*(void))->(void)
(	O
mu_attribute_t	*(struct)
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
&&	O
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
)	O
{	O
mu_attribute_t	*(struct)
attr	*(struct)
=	O
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
;	O
if	O
(	O
attr	*(struct)
->	O
owner	*(void)
==	O
owner	*(void)
)	O
free	(*(void))->(void)
(	O
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
)	O
;	O
*	O
pattr	*(*(struct(*(void),int,int,*((*`,*`)->(int)),*((*`,int)->(int)),*((*`,int)->(int)))))
=	O
NULL	O
;	O
}	O
}	O
void	O
*	O
mu_attribute_get_owner	(*(struct))->(*(void))
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
(	O
attr	*(struct)
)	O
?	O
attr	*(struct)
->	O
owner	*(void)
:	O
NULL	O
;	O
}	O
int	O
mu_attribute_is_modified	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
(	O
attr	*(struct)
)	O
?	O
attr	*(struct)
->	O
flags	int
&	O
MU_ATTRIBUTE_MODIFIED	int
:	O
0	int
;	O
}	O
int	O
mu_attribute_clear_modified	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
if	O
(	O
attr	*(struct)
)	O
attr	*(struct)
->	O
flags	int
&=	O
~	O
MU_ATTRIBUTE_MODIFIED	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_modified	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
if	O
(	O
attr	*(struct)
)	O
attr	*(struct)
->	O
flags	int
|=	O
MU_ATTRIBUTE_MODIFIED	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
*	O
pflags	*(int)
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
pflags	*(int)
==	O
NULL	O
)	O
return	O
MU_ERR_OUT_PTR_NULL	O
;	O
if	O
(	O
attr	*(struct)
->	O
_get_flags	*((*(struct),*(int))->(int))
)	O
return	O
attr	*(struct)
->	O
_get_flags	*((*(struct),*(int))->(int))
(	O
attr	*(struct)
,	O
pflags	*(int)
)	O
;	O
*	O
pflags	*(int)
=	O
attr	*(struct)
->	O
flags	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flags	int
)	O
{	O
int	O
status	int
=	O
0	int
;	O
int	O
oflags	int
=	O
0	int
;	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
oflags	int
)	O
;	O
if	O
(	O
(	O
oflags	int
&	O
flags	int
)	O
==	O
flags	int
)	O
return	O
0	int
;	O
if	O
(	O
attr	*(struct)
->	O
_set_flags	*((*(struct),int)->(int))
)	O
status	int
=	O
attr	*(struct)
->	O
_set_flags	*((*(struct),int)->(int))
(	O
attr	*(struct)
,	O
flags	int
)	O
;	O
else	O
attr	*(struct)
->	O
flags	int
|=	O
flags	int
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_attribute_set_modified	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flags	int
)	O
{	O
int	O
status	int
=	O
0	int
;	O
int	O
oflags	int
=	O
0	int
;	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
oflags	int
)	O
;	O
if	O
(	O
(	O
oflags	int
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
0	int
;	O
if	O
(	O
attr	*(struct)
->	O
_unset_flags	*((*(struct),int)->(int))
)	O
status	int
=	O
attr	*(struct)
->	O
_unset_flags	*((*(struct),int)->(int))
(	O
attr	*(struct)
,	O
flags	int
)	O
;	O
else	O
attr	*(struct)
->	O
flags	int
&=	O
~	O
flags	int
;	O
if	O
(	O
status	int
==	O
0	int
)	O
mu_attribute_set_modified	(*(struct))->(int)
(	O
attr	*(struct)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_get_flags	(*(struct),*((*(struct),*(int))->(int)),*(void))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
(	O
*	O
_get_flags	*((*(struct),*(int))->(int))
)	O
(	O
mu_attribute_t	*(struct)
,	O
int	O
*	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
attr	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
attr	*(struct)
->	O
_get_flags	*((*(struct),*(int))->(int))
=	O
_get_flags	*((*(struct),*(int))->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_set_flags	(*(struct),*((*(struct),int)->(int)),*(void))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
(	O
*	O
_set_flags	*((*(struct),int)->(int))
)	O
(	O
mu_attribute_t	*(struct)
,	O
int	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
attr	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
attr	*(struct)
->	O
_set_flags	*((*(struct),int)->(int))
=	O
_set_flags	*((*(struct),int)->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_unset_flags	(*(struct),*((*(struct),int)->(int)),*(void))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
(	O
*	O
_unset_flags	*((*(struct),int)->(int))
)	O
(	O
mu_attribute_t	*(struct)
,	O
int	O
)	O
,	O
void	O
*	O
owner	*(void)
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
attr	*(struct)
->	O
owner	*(void)
!=	O
owner	*(void)
)	O
return	O
EACCES	int
;	O
attr	*(struct)
->	O
_unset_flags	*((*(struct),int)->(int))
=	O
_unset_flags	*((*(struct),int)->(int))
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_userflag	(*(struct),int)->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flag	int
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
attr	*(struct)
->	O
user_flags	int
|=	O
flag	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_set_seen	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_SEEN	int
)	O
;	O
}	O
int	O
mu_attribute_set_answered	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_ANSWERED	int
)	O
;	O
}	O
int	O
mu_attribute_set_flagged	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_FLAGGED	int
)	O
;	O
}	O
int	O
mu_attribute_set_read	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_READ	int
)	O
;	O
}	O
int	O
mu_attribute_set_deleted	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_DELETED	int
)	O
;	O
}	O
int	O
mu_attribute_set_draft	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_set_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_DRAFT	int
)	O
;	O
}	O
int	O
mu_attribute_set_recent	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
status	int
=	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_READ	int
)	O
;	O
if	O
(	O
status	int
==	O
0	int
)	O
status	int
=	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_SEEN	int
)	O
;	O
return	O
status	int
;	O
}	O
int	O
mu_attribute_is_userflag	(*(struct),int)->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flag	int
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
0	int
;	O
return	O
attr	*(struct)
->	O
user_flags	int
&	O
flag	int
;	O
}	O
int	O
mu_attribute_is_seen	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
flags	int
&	O
MU_ATTRIBUTE_SEEN	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_is_answered	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
flags	int
&	O
MU_ATTRIBUTE_ANSWERED	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_is_flagged	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
flags	int
&	O
MU_ATTRIBUTE_FLAGGED	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_is_read	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
flags	int
&	O
MU_ATTRIBUTE_READ	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_is_deleted	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
flags	int
&	O
MU_ATTRIBUTE_DELETED	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_is_draft	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
flags	int
&	O
MU_ATTRIBUTE_DRAFT	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_is_recent	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
if	O
(	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
==	O
0	int
)	O
return	O
MU_ATTRIBUTE_IS_UNSEEN	O
(	O
flags	int
)	O
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_unset_userflag	(*(struct),int)->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
int	O
flag	int
)	O
{	O
if	O
(	O
attr	*(struct)
==	O
NULL	O
)	O
return	O
0	int
;	O
attr	*(struct)
->	O
user_flags	int
&=	O
~	O
flag	int
;	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_unset_seen	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_SEEN	int
)	O
;	O
}	O
int	O
mu_attribute_unset_answered	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_ANSWERED	int
)	O
;	O
}	O
int	O
mu_attribute_unset_flagged	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_FLAGGED	int
)	O
;	O
}	O
int	O
mu_attribute_unset_read	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_READ	int
)	O
;	O
}	O
int	O
mu_attribute_unset_deleted	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_DELETED	int
)	O
;	O
}	O
int	O
mu_attribute_unset_draft	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_DRAFT	int
)	O
;	O
}	O
int	O
mu_attribute_unset_recent	(*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
)	O
{	O
return	O
mu_attribute_unset_flags	(*(struct),int)->(int)
(	O
attr	*(struct)
,	O
MU_ATTRIBUTE_SEEN	int
)	O
;	O
}	O
int	O
mu_attribute_is_equal	(*(struct),*(struct))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
mu_attribute_t	*(struct)
attr2	*(struct(*(void),int,int,*((*(struct`),*(int))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int))))
)	O
{	O
int	O
flags2	int
=	O
0	int
,	O
flags	int
=	O
0	int
;	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
;	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr2	*(struct(*(void),int,int,*((*(struct`),*(int))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int))))
,	O
&	O
flags2	int
)	O
;	O
return	O
flags	int
==	O
flags2	int
;	O
}	O
int	O
mu_attribute_copy	(*(struct),*(struct))->(int)
(	O
mu_attribute_t	*(struct)
dest	*(struct(*(void),int,int,*((*(struct`),*(int))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int))))
,	O
mu_attribute_t	*(struct)
src	*(char)
)	O
{	O
if	O
(	O
dest	*(struct(*(void),int,int,*((*(struct`),*(int))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int))))
==	O
NULL	O
||	O
src	*(char)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
dest	*(struct(*(void),int,int,*((*(struct`),*(int))->(int)),*((*(struct`),int)->(int)),*((*(struct`),int)->(int))))
->	O
flags	int
=	O
src	*(char)
->	O
flags	int
;	O
return	O
0	int
;	O
}	O
struct	O
flagtrans	struct(int,char)
{	O
int	O
flag	int
;	O
char	O
letter	char
;	O
}	O
;	O
static	O
struct	O
flagtrans	struct(int,char)
flagtrans	struct(int,char)
[	O
]	O
=	O
{	O
{	O
MU_ATTRIBUTE_ANSWERED	int
,	O
'A'	O
}	O
,	O
{	O
MU_ATTRIBUTE_FLAGGED	int
,	O
'F'	O
}	O
,	O
{	O
MU_ATTRIBUTE_DELETED	int
,	O
'D'	O
}	O
,	O
{	O
MU_ATTRIBUTE_DRAFT	int
,	O
'd'	O
}	O
,	O
{	O
MU_ATTRIBUTE_SEEN	int
,	O
'O'	O
}	O
,	O
{	O
MU_ATTRIBUTE_READ	int
,	O
'R'	O
}	O
,	O
{	O
0	int
}	O
}	O
;	O
mu_verify	O
(	O
MU_ARRAY_SIZE	O
(	O
flagtrans	struct(int,char)
)	O
==	O
MU_STATUS_BUF_SIZE	O
)	O
;	O
int	O
mu_string_to_flags	(*(char),*(int))->(int)
(	O
const	O
char	O
*	O
buffer	*(char)
,	O
int	O
*	O
pflags	*(int)
)	O
{	O
const	O
char	O
*	O
sep	*(char)
;	O
if	O
(	O
pflags	*(int)
==	O
NULL	O
)	O
return	O
EINVAL	int
;	O
if	O
(	O
mu_c_strncasecmp	(*(char),*(char),long)->(int)
(	O
buffer	*(char)
,	O
"Status:"	*(char)
,	O
7	int
)	O
==	O
0	int
)	O
{	O
sep	*(char)
=	O
strchr	(*(char),int)->(*(char))
(	O
buffer	*(char)
,	O
':'	O
)	O
;	O
sep	*(char)
++	O
;	O
}	O
else	O
sep	*(char)
=	O
buffer	*(char)
;	O
for	O
(	O
;	O
*	O
sep	*(char)
;	O
sep	*(char)
++	O
)	O
{	O
struct	O
flagtrans	struct(int,char)
*	O
ft	*(struct(int,char))
;	O
for	O
(	O
ft	*(struct(int,char))
=	O
flagtrans	struct(int,char)
;	O
ft	*(struct(int,char))
->	O
flag	int
;	O
ft	*(struct(int,char))
++	O
)	O
if	O
(	O
ft	*(struct(int,char))
->	O
letter	char
==	O
*	O
sep	*(char)
)	O
{	O
*	O
pflags	*(int)
|=	O
ft	*(struct(int,char))
->	O
flag	int
;	O
break	O
;	O
}	O
}	O
return	O
0	int
;	O
}	O
int	O
mu_attribute_to_string	(*(struct),*(char),long,*(long))->(int)
(	O
mu_attribute_t	*(struct)
attr	*(struct)
,	O
char	O
*	O
buffer	*(char)
,	O
size_t	long
len	int
,	O
size_t	long
*	O
pn	*(long)
)	O
{	O
int	O
flags	int
=	O
0	int
;	O
char	O
buf	*(char)
[	O
MU_STATUS_BUF_SIZE	O
]	O
;	O
int	O
i	int
;	O
int	O
rc	int
;	O
struct	O
flagtrans	struct(int,char)
*	O
ft	*(struct(int,char))
;	O
rc	int
=	O
mu_attribute_get_flags	(*(struct),*(int))->(int)
(	O
attr	*(struct)
,	O
&	O
flags	int
)	O
;	O
if	O
(	O
rc	int
)	O
return	O
rc	int
;	O
i	int
=	O
0	int
;	O
for	O
(	O
ft	*(struct(int,char))
=	O
flagtrans	struct(int,char)
;	O
ft	*(struct(int,char))
->	O
flag	int
;	O
ft	*(struct(int,char))
++	O
)	O
if	O
(	O
ft	*(struct(int,char))
->	O
flag	int
&	O
flags	int
)	O
buf	*(char)
[	O
i	int
++	O
]	O
=	O
ft	*(struct(int,char))
->	O
letter	char
;	O
buf	*(char)
[	O
i	int
++	O
]	O
=	O
0	int
;	O
i	int
=	O
mu_cpystr	(*(char),*(char),long)->(long)
(	O
buffer	*(char)
,	O
buf	*(char)
,	O
i	int
)	O
;	O
if	O
(	O
pn	*(long)
)	O
*	O
pn	*(long)
=	O
i	int
;	O
return	O
0	int
;	O
}	O
