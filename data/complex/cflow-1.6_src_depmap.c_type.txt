static	O
void	O
transitive_closure	(*(int),int)->(void)
(	O
unsigned	O
*	O
R	*(int)
,	O
int	O
n	long
)	O
{	O
register	O
size_t	long
rowsize	long
;	O
register	O
unsigned	O
mask	int
;	O
register	O
unsigned	O
*	O
rowj	*(int)
;	O
register	O
unsigned	O
*	O
rp	*(int)
;	O
register	O
unsigned	O
*	O
rend	*(int)
;	O
register	O
unsigned	O
*	O
ccol	*(int)
;	O
unsigned	O
*	O
relend	*(int)
;	O
unsigned	O
*	O
cword	*(int)
;	O
unsigned	O
*	O
rowi	*(int)
;	O
rowsize	long
=	O
WORDSIZE	O
(	O
n	long
)	O
*	O
sizeof	O
(	O
unsigned	O
)	O
;	O
relend	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
R	*(int)
+	O
(	O
n	long
*	O
rowsize	long
)	O
)	O
;	O
cword	*(int)
=	O
R	*(int)
;	O
mask	int
=	O
1	int
;	O
rowi	*(int)
=	O
R	*(int)
;	O
while	O
(	O
rowi	*(int)
<	O
relend	*(int)
)	O
{	O
ccol	*(int)
=	O
cword	*(int)
;	O
rowj	*(int)
=	O
R	*(int)
;	O
while	O
(	O
rowj	*(int)
<	O
relend	*(int)
)	O
{	O
if	O
(	O
*	O
ccol	*(int)
&	O
mask	int
)	O
{	O
rp	*(int)
=	O
rowi	*(int)
;	O
rend	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	*(int)
+	O
rowsize	long
)	O
;	O
while	O
(	O
rowj	*(int)
<	O
rend	*(int)
)	O
*	O
rowj	*(int)
++	O
|=	O
*	O
rp	*(int)
++	O
;	O
}	O
else	O
{	O
rowj	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowj	*(int)
+	O
rowsize	long
)	O
;	O
}	O
ccol	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
ccol	*(int)
+	O
rowsize	long
)	O
;	O
}	O
mask	int
<<=	O
1	int
;	O
if	O
(	O
mask	int
==	O
0	int
)	O
{	O
mask	int
=	O
1	int
;	O
cword	*(int)
++	O
;	O
}	O
rowi	*(int)
=	O
(	O
unsigned	O
*	O
)	O
(	O
(	O
char	O
*	O
)	O
rowi	*(int)
+	O
rowsize	long
)	O
;	O
}	O
}	O
struct	O
cflow_depmap	struct(long,long,array(int))
{	O
size_t	long
nrows	long
;	O
size_t	long
rowlen	long
;	O
unsigned	O
r	array(int)
[	O
1	int
]	O
;	O
}	O
;	O
cflow_depmap_t	*(struct)
depmap_alloc	(long)->(*(struct))
(	O
size_t	long
count	long
)	O
{	O
size_t	long
size	long
=	O
(	O
count	long
+	O
BITS_PER_WORD	O
-	O
1	int
)	O
/	O
BITS_PER_WORD	O
;	O
cflow_depmap_t	*(struct)
dmap	*(struct)
=	O
xzalloc	(long)->(*(void))
(	O
sizeof	O
(	O
*	O
dmap	*(struct)
)	O
-	O
1	int
+	O
count	long
*	O
size	long
*	O
sizeof	O
(	O
unsigned	O
)	O
)	O
;	O
dmap	*(struct)
->	O
nrows	long
=	O
count	long
;	O
dmap	*(struct)
->	O
rowlen	long
=	O
size	long
;	O
return	O
dmap	*(struct)
;	O
}	O
static	O
unsigned	O
*	O
depmap_rowptr	(*(struct(long,long,array(int))),long)->(*(int))
(	O
cflow_depmap_t	*(struct)
dmap	*(struct)
,	O
size_t	long
row	long
)	O
{	O
return	O
dmap	*(struct)
->	O
r	array(int)
+	O
dmap	*(struct)
->	O
rowlen	long
*	O
row	long
;	O
}	O
void	O
depmap_set	(*(struct),long,long)->(void)
(	O
cflow_depmap_t	*(struct)
dmap	*(struct)
,	O
size_t	long
row	long
,	O
size_t	long
col	long
)	O
{	O
unsigned	O
*	O
rptr	*(int)
=	O
depmap_rowptr	(*(struct(long,long,array(int))),long)->(*(int))
(	O
dmap	*(struct)
,	O
row	long
)	O
;	O
SETBIT	O
(	O
rptr	*(int)
,	O
col	long
)	O
;	O
}	O
int	O
depmap_isset	(*(struct),long,long)->(int)
(	O
cflow_depmap_t	*(struct)
dmap	*(struct)
,	O
size_t	long
row	long
,	O
size_t	long
col	long
)	O
{	O
unsigned	O
*	O
rptr	*(int)
=	O
depmap_rowptr	(*(struct(long,long,array(int))),long)->(*(int))
(	O
dmap	*(struct)
,	O
row	long
)	O
;	O
return	O
BITISSET	O
(	O
rptr	*(int)
,	O
col	long
)	O
;	O
}	O
void	O
depmap_tc	(*(struct))->(void)
(	O
cflow_depmap_t	*(struct)
dmap	*(struct)
)	O
{	O
transitive_closure	(*(int),int)->(void)
(	O
dmap	*(struct)
->	O
r	array(int)
,	O
dmap	*(struct)
->	O
nrows	long
)	O
;	O
}	O
