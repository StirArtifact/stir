wget_digest_algorithm	enum(int,int,int,int,int,int,int,int,int,int)
wget_hash_get_algorithm	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
const	O
char	O
*	O
hashname	*(char)
)	O
{	O
if	O
(	O
hashname	*(char)
)	O
{	O
if	O
(	O
*	O
hashname	*(char)
==	O
's'	O
||	O
*	O
hashname	*(char)
==	O
'S'	O
)	O
{	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha-1"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha1"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_SHA1	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha-256"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha256"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_SHA256	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha-512"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha512"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_SHA512	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha-224"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha224"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_SHA224	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha-384"	*(char)
)	O
||	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"sha384"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_SHA384	int
;	O
}	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"md5"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_MD5	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"md2"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_MD2	int
;	O
else	O
if	O
(	O
!	O
wget_strcasecmp_ascii	(*(char),*(char))->(int)
(	O
hashname	*(char)
,	O
"rmd160"	*(char)
)	O
)	O
return	O
WGET_DIGTYPE_RMD160	int
;	O
}	O
error_printf	O
(	O
_	O
(	O
"Unknown hash type '%s'\n"	*(char)
)	O
,	O
hashname	*(char)
)	O
;	O
return	O
WGET_DIGTYPE_UNKNOWN	int
;	O
}	O
typedef	O
void	O
(	O
*	O
_hash_init_t	*((*(void))->(void))
)	O
(	O
void	O
*	O
)	O
;	O
typedef	O
void	O
(	O
*	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
(	O
const	O
void	O
*	O
,	O
size_t	long
,	O
void	O
*	O
)	O
;	O
typedef	O
void	O
(	O
*	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
(	O
void	O
*	O
,	O
void	O
*	O
)	O
;	O
typedef	O
void	O
(	O
*	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
(	O
const	O
void	O
*	O
,	O
void	O
*	O
)	O
;	O
static	O
struct	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
{	O
_hash_init_t	*((*(void))->(void))
init	*((*(struct),*(char))->(*(struct)))
;	O
_hash_process_t	*((*(void),long,*(void))->(void))
process	*((*(void),long,*(void))->(void))
;	O
_hash_finish_t	*((*(void),*(void))->(void))
finish	*((*(void),*(void))->(void))
;	O
_hash_read_t	*((*(void),*(void))->(void))
read	(int,*(void),long)->(long)
;	O
size_t	long
ctx_len	long
;	O
size_t	long
digest_len	long
;	O
}	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
[	O
WGET_DIGTYPE_MAX	int
]	O
=	O
{	O
[	O
WGET_DIGTYPE_MD2	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
md2_init_ctx	(*(struct(array(char),array(char),array(char),long)))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
md2_process_bytes	(*(void),long,*(struct(array(char),array(char),array(char),long)))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
md2_finish_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
md2_read_ctx	(*(struct(array(char),array(char),array(char),long)),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
md2_ctx	struct(array(char),array(char),array(char),long)
)	O
,	O
MD2_DIGEST_SIZE	int
}	O
,	O
[	O
WGET_DIGTYPE_MD5	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
md5_init_ctx	(*(struct(int,int,int,int,array(int),int,array(int))))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
md5_process_bytes	(*(void),long,*(struct(int,int,int,int,array(int),int,array(int))))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
md5_finish_ctx	(*(struct(int,int,int,int,array(int),int,array(int))),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
md5_read_ctx	(*(struct(int,int,int,int,array(int),int,array(int))),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
md5_ctx	struct(int,int,int,int,array(int),int,array(int))
)	O
,	O
MD5_DIGEST_SIZE	int
}	O
,	O
[	O
WGET_DIGTYPE_SHA1	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
sha1_init_ctx	(*(struct(int,int,int,int,int,array(int),int,array(int))))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
sha1_process_bytes	(*(void),long,*(struct(int,int,int,int,int,array(int),int,array(int))))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
sha1_finish_ctx	(*(struct(int,int,int,int,int,array(int),int,array(int))),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
sha1_read_ctx	(*(struct(int,int,int,int,int,array(int),int,array(int))),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
sha1_ctx	struct(int,int,int,int,int,array(int),int,array(int))
)	O
,	O
SHA1_DIGEST_SIZE	int
}	O
,	O
[	O
WGET_DIGTYPE_SHA224	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
sha224_init_ctx	(*(struct(array(int),array(int),long,array(int))))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
sha256_process_bytes	(*(void),long,*(struct(array(int),array(int),long,array(int))))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
sha224_finish_ctx	(*(struct(array(int),array(int),long,array(int))),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
sha224_read_ctx	(*(struct(array(int),array(int),long,array(int))),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
sha256_ctx	struct(array(int),array(int),long,array(int))
)	O
,	O
SHA224_DIGEST_SIZE	int
}	O
,	O
[	O
WGET_DIGTYPE_SHA256	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
sha256_init_ctx	(*(struct(array(int),array(int),long,array(int))))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
sha256_process_bytes	(*(void),long,*(struct(array(int),array(int),long,array(int))))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
sha256_finish_ctx	(*(struct(array(int),array(int),long,array(int))),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
sha256_read_ctx	(*(struct(array(int),array(int),long,array(int))),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
sha256_ctx	struct(array(int),array(int),long,array(int))
)	O
,	O
SHA256_DIGEST_SIZE	int
}	O
,	O
[	O
WGET_DIGTYPE_SHA384	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
sha384_init_ctx	(*(struct(array(long),array(long),long,array(long))))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
sha512_process_bytes	(*(void),long,*(struct(array(long),array(long),long,array(long))))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
sha384_finish_ctx	(*(struct(array(long),array(long),long,array(long))),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
sha384_read_ctx	(*(struct(array(long),array(long),long,array(long))),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
sha512_ctx	struct(array(long),array(long),long,array(long))
)	O
,	O
SHA384_DIGEST_SIZE	int
}	O
,	O
[	O
WGET_DIGTYPE_SHA512	int
]	O
=	O
{	O
(	O
_hash_init_t	*((*(void))->(void))
)	O
sha512_init_ctx	(*(struct(array(long),array(long),long,array(long))))->(void)
,	O
(	O
_hash_process_t	*((*(void),long,*(void))->(void))
)	O
sha512_process_bytes	(*(void),long,*(struct(array(long),array(long),long,array(long))))->(void)
,	O
(	O
_hash_finish_t	*((*(void),*(void))->(void))
)	O
sha512_finish_ctx	(*(struct(array(long),array(long),long,array(long))),*(void))->(*(void))
,	O
(	O
_hash_read_t	*((*(void),*(void))->(void))
)	O
sha512_read_ctx	(*(struct(array(long),array(long),long,array(long))),*(void))->(*(void))
,	O
sizeof	O
(	O
struct	O
sha512_ctx	struct(array(long),array(long),long,array(long))
)	O
,	O
SHA512_DIGEST_SIZE	int
}	O
}	O
;	O
struct	O
wget_hash_hd_st	struct(*(struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)),*(void))
{	O
const	O
struct	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
*	O
algorithm	*(char)
;	O
void	O
*	O
context	*(void)
;	O
}	O
;	O
int	O
wget_hash_fast	(enum(int,int,int,int,int,int,int,int,int,int),*(void),long,*(void))->(int)
(	O
wget_digest_algorithm	enum(int,int,int,int,int,int,int,int,int,int)
algorithm	*(char)
,	O
const	O
void	O
*	O
text	*(void)
,	O
size_t	long
textlen	long
,	O
void	O
*	O
digest	*(struct(*(char),*(char)))
)	O
{	O
wget_hash_hd	struct
*	O
dig	*(*(struct))
;	O
int	O
rc	int
;	O
if	O
(	O
(	O
rc	int
=	O
wget_hash_init	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int))->(int)
(	O
&	O
dig	*(*(struct))
,	O
algorithm	*(char)
)	O
)	O
==	O
WGET_E_SUCCESS	int
)	O
{	O
rc	int
=	O
wget_hash	(*(struct),*(void),long)->(int)
(	O
dig	*(*(struct))
,	O
text	*(void)
,	O
textlen	long
)	O
;	O
wget_hash_deinit	(*(*(struct)),*(void))->(int)
(	O
&	O
dig	*(*(struct))
,	O
digest	*(struct(*(char),*(char)))
)	O
;	O
}	O
return	O
rc	int
;	O
}	O
int	O
wget_hash_get_len	(enum(int,int,int,int,int,int,int,int,int,int))->(int)
(	O
wget_digest_algorithm	enum(int,int,int,int,int,int,int,int,int,int)
algorithm	*(char)
)	O
{	O
if	O
(	O
(	O
unsigned	O
)	O
algorithm	*(char)
<	O
countof	O
(	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
)	O
)	O
return	O
(	O
int	O
)	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
[	O
algorithm	*(char)
]	O
.	O
digest_len	long
;	O
else	O
return	O
0	int
;	O
}	O
int	O
wget_hash_init	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int))->(int)
(	O
wget_hash_hd	struct
*	O
*	O
handle	*(struct)
,	O
wget_digest_algorithm	enum(int,int,int,int,int,int,int,int,int,int)
algorithm	*(char)
)	O
{	O
if	O
(	O
(	O
unsigned	O
)	O
algorithm	*(char)
>=	O
countof	O
(	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
)	O
)	O
return	O
WGET_E_INVALID	int
;	O
if	O
(	O
!	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
[	O
algorithm	*(char)
]	O
.	O
ctx_len	long
)	O
return	O
WGET_E_UNSUPPORTED	int
;	O
wget_hash_hd	struct
*	O
h	*(struct)
;	O
if	O
(	O
!	O
(	O
h	*(struct)
=	O
wget_malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
wget_hash_hd_st	struct(*(struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)),*(void))
)	O
)	O
)	O
)	O
return	O
WGET_E_MEMORY	int
;	O
h	*(struct)
->	O
algorithm	*(char)
=	O
&	O
_algorithm	struct(*((*(void))->(void)),*((*(void),long,*(void))->(void)),*((*(void),*(void))->(void)),*((*(void),*(void))->(void)),long,long)
[	O
algorithm	*(char)
]	O
;	O
if	O
(	O
!	O
(	O
h	*(struct)
->	O
context	*(void)
=	O
wget_malloc	(long)->(*(void))
(	O
h	*(struct)
->	O
algorithm	*(char)
->	O
ctx_len	long
)	O
)	O
)	O
{	O
xfree	O
(	O
h	*(struct)
)	O
;	O
return	O
WGET_E_MEMORY	int
;	O
}	O
h	*(struct)
->	O
algorithm	*(char)
->	O
init	*((*(struct),*(char))->(*(struct)))
(	O
h	*(struct)
->	O
context	*(void)
)	O
;	O
*	O
handle	*(struct)
=	O
h	*(struct)
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
int	O
wget_hash	(*(struct),*(void),long)->(int)
(	O
wget_hash_hd	struct
*	O
handle	*(struct)
,	O
const	O
void	O
*	O
text	*(void)
,	O
size_t	long
textlen	long
)	O
{	O
handle	*(struct)
->	O
algorithm	*(char)
->	O
process	*((*(void),long,*(void))->(void))
(	O
text	*(void)
,	O
textlen	long
,	O
handle	*(struct)
->	O
context	*(void)
)	O
;	O
return	O
0	int
;	O
}	O
int	O
wget_hash_deinit	(*(*(struct)),*(void))->(int)
(	O
wget_hash_hd	struct
*	O
*	O
handle	*(struct)
,	O
void	O
*	O
digest	*(struct(*(char),*(char)))
)	O
{	O
(	O
*	O
handle	*(struct)
)	O
->	O
algorithm	*(char)
->	O
finish	*((*(void),*(void))->(void))
(	O
(	O
*	O
handle	*(struct)
)	O
->	O
context	*(void)
,	O
digest	*(struct(*(char),*(char)))
)	O
;	O
xfree	O
(	O
(	O
*	O
handle	*(struct)
)	O
->	O
context	*(void)
)	O
;	O
xfree	O
(	O
*	O
handle	*(struct)
)	O
;	O
return	O
WGET_E_SUCCESS	int
;	O
}	O
int	O
wget_hash_file_fd	(*(char),int,*(char),long,long,long)->(int)
(	O
const	O
char	O
*	O
hashname	*(char)
,	O
int	O
fd	array(int)
,	O
char	O
*	O
digest_hex	*(char)
,	O
size_t	long
digest_hex_size	long
,	O
off_t	long
offset	long
,	O
off_t	long
length	long
)	O
{	O
wget_digest_algorithm	enum(int,int,int,int,int,int,int,int,int,int)
algorithm	*(char)
;	O
int	O
ret	int
=	O
WGET_E_UNKNOWN	int
;	O
struct	O
stat	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
;	O
if	O
(	O
digest_hex_size	long
)	O
*	O
digest_hex	*(char)
=	O
0	int
;	O
if	O
(	O
fd	array(int)
==	O
-	O
1	int
||	O
fstat	(int,*(struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))))->(int)
(	O
fd	array(int)
,	O
&	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
)	O
!=	O
0	int
)	O
return	O
WGET_E_IO	int
;	O
if	O
(	O
length	long
==	O
0	int
)	O
length	long
=	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
;	O
if	O
(	O
offset	long
+	O
length	long
>	O
st	struct(long,long,long,int,int,int,int,long,long,long,long,struct(long,long),struct(long,long),struct(long,long),array(long))
.	O
st_size	long
)	O
return	O
WGET_E_INVALID	int
;	O
debug_printf	O
(	O
"%s hashing pos %llu, length %llu...\n"	*(char)
,	O
hashname	*(char)
,	O
(	O
unsigned	O
long	O
long	O
)	O
offset	long
,	O
(	O
unsigned	O
long	O
long	O
)	O
length	long
)	O
;	O
if	O
(	O
(	O
algorithm	*(char)
=	O
wget_hash_get_algorithm	(*(char))->(enum(int,int,int,int,int,int,int,int,int,int))
(	O
hashname	*(char)
)	O
)	O
!=	O
WGET_DIGTYPE_UNKNOWN	int
)	O
{	O
unsigned	O
char	O
digest	*(struct(*(char),*(char)))
[	O
wget_hash_get_len	(enum(int,int,int,int,int,int,int,int,int,int))->(int)
(	O
algorithm	*(char)
)	O
]	O
;	O
char	O
*	O
buf	*(char)
=	O
mmap	(*(void),long,int,int,int,long)->(*(void))
(	O
NULL	O
,	O
length	long
,	O
PROT_READ	int
,	O
MAP_PRIVATE	int
,	O
fd	array(int)
,	O
offset	long
)	O
;	O
if	O
(	O
buf	*(char)
!=	O
MAP_FAILED	O
)	O
{	O
if	O
(	O
wget_hash_fast	(enum(int,int,int,int,int,int,int,int,int,int),*(void),long,*(void))->(int)
(	O
algorithm	*(char)
,	O
buf	*(char)
,	O
length	long
,	O
digest	*(struct(*(char),*(char)))
)	O
==	O
0	int
)	O
{	O
wget_memtohex	(*(char),long,*(char),long)->(void)
(	O
digest	*(struct(*(char),*(char)))
,	O
sizeof	O
(	O
digest	*(struct(*(char),*(char)))
)	O
,	O
digest_hex	*(char)
,	O
digest_hex_size	long
)	O
;	O
ret	int
=	O
WGET_E_SUCCESS	int
;	O
}	O
munmap	(*(void),long)->(int)
(	O
buf	*(char)
,	O
length	long
)	O
;	O
}	O
else	O
{	O
ssize_t	long
nbytes	long
=	O
0	int
;	O
wget_hash_hd	struct
*	O
dig	*(*(struct))
;	O
char	O
tmp	array(char)
[	O
65536	int
]	O
;	O
if	O
(	O
(	O
ret	int
=	O
wget_hash_init	(*(*(struct)),enum(int,int,int,int,int,int,int,int,int,int))->(int)
(	O
&	O
dig	*(*(struct))
,	O
algorithm	*(char)
)	O
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Hash init failed for type '%s': %s\n"	*(char)
)	O
,	O
__func__	O
,	O
hashname	*(char)
,	O
wget_strerror	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
ret	int
)	O
)	O
;	O
return	O
ret	int
;	O
}	O
while	O
(	O
length	long
>	O
0	int
&&	O
(	O
nbytes	long
=	O
read	(int,*(void),long)->(long)
(	O
fd	array(int)
,	O
tmp	array(char)
,	O
sizeof	O
(	O
tmp	array(char)
)	O
)	O
)	O
>	O
0	int
)	O
{	O
if	O
(	O
(	O
ret	int
=	O
wget_hash	(*(struct),*(void),long)->(int)
(	O
dig	*(*(struct))
,	O
tmp	array(char)
,	O
nbytes	long
)	O
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Hash update failed: %s\n"	*(char)
)	O
,	O
__func__	O
,	O
wget_strerror	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
ret	int
)	O
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
nbytes	long
<=	O
length	long
)	O
length	long
-=	O
nbytes	long
;	O
else	O
length	long
=	O
0	int
;	O
}	O
if	O
(	O
(	O
ret	int
=	O
wget_hash_deinit	(*(*(struct)),*(void))->(int)
(	O
&	O
dig	*(*(struct))
,	O
digest	*(struct(*(char),*(char)))
)	O
)	O
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Hash finalization failed: %s\n"	*(char)
)	O
,	O
__func__	O
,	O
wget_strerror	(enum(int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int))->(*(char))
(	O
ret	int
)	O
)	O
;	O
return	O
ret	int
;	O
}	O
if	O
(	O
nbytes	long
<	O
0	int
)	O
{	O
error_printf	O
(	O
_	O
(	O
"%s: Failed to read %llu bytes\n"	*(char)
)	O
,	O
__func__	O
,	O
(	O
unsigned	O
long	O
long	O
)	O
length	long
)	O
;	O
return	O
WGET_E_IO	int
;	O
}	O
wget_memtohex	(*(char),long,*(char),long)->(void)
(	O
digest	*(struct(*(char),*(char)))
,	O
sizeof	O
(	O
digest	*(struct(*(char),*(char)))
)	O
,	O
digest_hex	*(char)
,	O
digest_hex_size	long
)	O
;	O
ret	int
=	O
WGET_E_SUCCESS	int
;	O
}	O
}	O
return	O
ret	int
;	O
}	O
int	O
wget_hash_file_offset	(*(char),*(char),*(char),long,long,long)->(int)
(	O
const	O
char	O
*	O
hashname	*(char)
,	O
const	O
char	O
*	O
fname	*(char)
,	O
char	O
*	O
digest_hex	*(char)
,	O
size_t	long
digest_hex_size	long
,	O
off_t	long
offset	long
,	O
off_t	long
length	long
)	O
{	O
int	O
fd	array(int)
,	O
ret	int
;	O
if	O
(	O
(	O
fd	array(int)
=	O
open	(*(char),int)->(int)
(	O
fname	*(char)
,	O
O_RDONLY	int
|	O
O_BINARY	int
)	O
)	O
==	O
-	O
1	int
)	O
{	O
if	O
(	O
digest_hex_size	long
)	O
*	O
digest_hex	*(char)
=	O
0	int
;	O
return	O
0	int
;	O
}	O
ret	int
=	O
wget_hash_file_fd	(*(char),int,*(char),long,long,long)->(int)
(	O
hashname	*(char)
,	O
fd	array(int)
,	O
digest_hex	*(char)
,	O
digest_hex_size	long
,	O
offset	long
,	O
length	long
)	O
;	O
close	(int)->(int)
(	O
fd	array(int)
)	O
;	O
return	O
ret	int
;	O
}	O
int	O
wget_hash_file	(*(char),*(char),*(char),long)->(int)
(	O
const	O
char	O
*	O
hashname	*(char)
,	O
const	O
char	O
*	O
fname	*(char)
,	O
char	O
*	O
digest_hex	*(char)
,	O
size_t	long
digest_hex_size	long
)	O
{	O
return	O
wget_hash_file_offset	(*(char),*(char),*(char),long,long,long)->(int)
(	O
hashname	*(char)
,	O
fname	*(char)
,	O
digest_hex	*(char)
,	O
digest_hex_size	long
,	O
0	int
,	O
0	int
)	O
;	O
}	O
