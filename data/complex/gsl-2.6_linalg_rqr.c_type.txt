static	O
int	O
unpack_Q1	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
unpack_Q2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
aux_ULT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
static	O
int	O
aux_mLU	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
static	O
int	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
;	O
int	O
gsl_linalg_QR_decomp_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"M must be >= N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix does not match dimensions of A"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
double	O
*	O
T00	*(double)
=	O
gsl_matrix_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
)	O
;	O
*	O
T00	*(double)
=	O
gsl_linalg_householder_transform	(*(struct(long,long,*(double),*(struct(long,*`)),int)))->(double)
(	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
N	int
/	O
2	int
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
const	O
size_t	long
M2	long
=	O
M	int
-	O
N1	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
0	int
,	O
M2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
M2	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M	int
,	O
N1	long
)	O
;	O
status	int
=	O
gsl_linalg_QR_decomp_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_matrix_sub	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
gsl_linalg_QR_decomp_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_transpose_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V31	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V32	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N	int
,	O
N1	long
,	O
M	int
-	O
N	int
,	O
N2	long
)	O
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
V31	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
V32	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
-	O
1.0	int
,	O
&	O
T11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
&	O
T22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
T12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_solve_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	*(struct(long,*(long double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
)	O
{	O
const	O
size_t	long
N	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
||	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
b	*(struct(long,*(long double)))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
size_t	long
i	long
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	long double
,	O
b	*(struct(long,*(long double)))
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
N	int
;	O
++	O
i	long
)	O
{	O
double	O
*	O
xi	*(double)
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
x	long double
,	O
i	long
)	O
;	O
double	O
bi	double
=	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
b	*(struct(long,*(long double)))
,	O
i	long
)	O
;	O
*	O
xi	*(double)
=	O
bi	double
-	O
(	O
*	O
xi	*(double)
)	O
;	O
}	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_lssolve_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	*(struct(long,*(long double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
x	long double
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"QR matrix must have M >= N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
b	*(struct(long,*(long double)))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match b size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
!=	O
x	long double
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match solution size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
!=	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix size must match work size"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
x1	double
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
x	long double
,	O
0	int
,	O
N	int
)	O
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
x	long double
,	O
b	*(struct(long,*(long double)))
)	O
;	O
gsl_linalg_QR_QTvec_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
x	long double
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_blas_dtrsv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
&	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x1	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_unpack_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"M must be >= N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
M	int
||	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"Q matrix must be M-by-M"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"R matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
RV	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
M	int
,	O
N	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasUnit	int
,	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
RV	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
tmp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
m	*(struct(long,long,long,*(long double),*(struct(long,*(long double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
tmp	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
unpack_Q1	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Q2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N	int
,	O
M	int
,	O
M	int
-	O
N	int
)	O
;	O
unpack_Q2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
Q2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_matrix_tricpy	(enum(int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasNonUnit	int
,	O
R	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
RV	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_QTvec_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
b	*(struct(long,*(long double)))
,	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"M must be >= N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
b	*(struct(long,*(long double)))
->	O
size	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"b vector must have length M"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must be length N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b1	*(float)
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
b	*(struct(long,*(long double)))
,	O
0	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b2	float
;	O
gsl_vector_memcpy	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
b1	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
&	O
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
b2	float
=	O
gsl_vector_subvector	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
b	*(struct(long,*(long double)))
,	O
N	int
,	O
M	int
-	O
N	int
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b2	float
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
,	O
&	O
b2	float
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_blas_dtrmv	(enum(int,int),enum(int,int,int),enum(int,int),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
&	O
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_vector_sub	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
b1	*(float)
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_linalg_QR_QTmat_r	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
const	O
size_t	long
K	int
=	O
B	*(float)
->	O
size2	long
;	O
if	O
(	O
M	int
<	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"M must be >= N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
B	*(float)
->	O
size1	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"B matrix must have M rows"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
K	int
)	O
{	O
GSL_ERROR	O
(	O
"workspace must be N-by-K"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
0	int
,	O
N	int
,	O
K	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
gsl_matrix_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
B1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
B2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
K	int
)	O
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
}	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasTrans	int
,	O
CblasNonUnit	int
,	O
1.0	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
1.0	int
,	O
&	O
B2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
gsl_matrix_sub	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
B1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
work	*(struct(long,long,*(double),*(struct(long,*(double))),int))
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
unpack_Q1	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
int	O
status	int
;	O
const	O
size_t	long
M	int
=	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
aux_ULT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
if	O
(	O
M	int
>	O
N	int
)	O
{	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
-	O
1.0	int
,	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
}	O
status	int
=	O
aux_mLU	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_vector_add_constant	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
static	O
int	O
unpack_Q2	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
M	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
;	O
if	O
(	O
M	int
<=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"M must be > N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"T matrix must be N-by-N"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
M	int
||	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
(	O
M	int
-	O
N	int
)	O
)	O
{	O
GSL_ERROR	O
(	O
"Q matrix must be M-by-(M-N)"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
{	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
N	int
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
QR	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
N	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N	int
,	O
M	int
-	O
N	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
Q2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
Q	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N	int
,	O
0	int
,	O
M	int
-	O
N	int
,	O
M	int
-	O
N	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_diagonal	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
&	O
Q2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_matrix_transpose_memcpy	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
-	O
1.0	int
,	O
T	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
V2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0.0	int
,	O
&	O
Q2	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_vector_add_constant	(*(struct(long,long,*(double),*(struct(long,*`)),int)),double)->(int)
(	O
&	O
diag	*(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
V1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
Q1	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
aux_ULT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
)	O
{	O
const	O
size_t	long
N	int
=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"L matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
N	int
||	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
N	int
)	O
{	O
GSL_ERROR	O
(	O
"U matrix must be same size as L"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
N	int
/	O
2	int
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
L11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
L21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
L22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
L	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasLower	int
,	O
CblasTrans	int
,	O
CblasUnit	int
,	O
1.0	int
,	O
&	O
L22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
L21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
aux_ULT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
L11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
aux_ULT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
L22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
aux_mLU	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size1	long
;	O
if	O
(	O
N	int
!=	O
A	*(float)
->	O
size2	long
)	O
{	O
GSL_ERROR	O
(	O
"matrix must be square"	*(char)
,	O
GSL_ENOTSQR	int
)	O
;	O
}	O
else	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
double	O
*	O
A00	*(double)
=	O
gsl_matrix_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
*	O
A00	*(double)
=	O
-	O
(	O
*	O
A00	*(double)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
N1	long
=	O
N	int
/	O
2	int
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N1	long
,	O
N1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
N1	long
,	O
N1	long
,	O
N2	long
,	O
N2	long
)	O
;	O
status	int
=	O
aux_mLU	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasNoTrans	int
,	O
-	O
1.0	int
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasLeft	int
,	O
CblasLower	int
,	O
CblasNoTrans	int
,	O
CblasUnit	int
,	O
-	O
1.0	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
gsl_blas_dtrmm	(enum(int,int),enum(int,int),enum(int,int,int),enum(int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasRight	int
,	O
CblasUpper	int
,	O
CblasNoTrans	int
,	O
CblasNonUnit	int
,	O
-	O
1.0	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
aux_mLU	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
static	O
int	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
const	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
B	*(float)
,	O
gsl_matrix	struct(long,long,long,*(double),*(struct(long,*(double))),int)
*	O
A	*(float)
)	O
{	O
const	O
size_t	long
M	int
=	O
A	*(float)
->	O
size1	long
;	O
const	O
size_t	long
N	int
=	O
A	*(float)
->	O
size2	long
;	O
if	O
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size1	long
!=	O
M	int
||	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"U matrix has wrong dimensions"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
B	*(float)
->	O
size1	long
!=	O
N	int
||	O
B	*(float)
->	O
size2	long
!=	O
M	int
)	O
{	O
GSL_ERROR	O
(	O
"B matrix has wrong dimensions"	*(char)
,	O
GSL_EBADLEN	int
)	O
;	O
}	O
else	O
if	O
(	O
M	int
==	O
1	int
&&	O
N	int
==	O
1	int
)	O
{	O
double	O
*	O
aptr	*(double)
=	O
gsl_matrix_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
A	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
const	O
double	O
*	O
uptr	*(double)
=	O
gsl_matrix_const_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
const	O
double	O
*	O
bptr	*(double)
=	O
gsl_matrix_const_ptr	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(*(double))
(	O
B	*(float)
,	O
0	int
,	O
0	int
)	O
;	O
*	O
aptr	*(double)
+=	O
(	O
*	O
uptr	*(double)
)	O
*	O
(	O
*	O
bptr	*(double)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
M	int
==	O
1	int
)	O
{	O
double	O
U00	double
=	O
gsl_matrix_get	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long)->(double)
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_row	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_matrix_const_column	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
)	O
;	O
gsl_blas_daxpy	(double,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
U00	double
,	O
&	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
N	int
==	O
1	int
)	O
{	O
int	O
status	int
;	O
const	O
size_t	long
M1	long
=	O
M	int
/	O
2	int
;	O
const	O
size_t	long
M2	long
=	O
M	int
-	O
M1	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M1	long
,	O
1	int
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
M1	long
,	O
0	int
,	O
M2	long
,	O
1	int
)	O
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
a1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_subcolumn	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
M1	long
,	O
M1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
M1	long
,	O
M1	long
,	O
M2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
M1	long
,	O
M1	long
,	O
M2	long
,	O
M2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
0	int
,	O
1	int
,	O
M1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
M1	long
,	O
1	int
,	O
M2	long
)	O
;	O
gsl_vector_const_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
b2	float
=	O
gsl_matrix_const_subrow	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
M1	long
,	O
M2	long
)	O
;	O
gsl_blas_dgemv	(enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
1.0	int
,	O
&	O
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b2	float
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
a1	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
int	O
status	int
;	O
const	O
size_t	long
M1	long
=	O
M	int
/	O
2	int
;	O
const	O
size_t	long
M2	long
=	O
M	int
-	O
M1	long
;	O
const	O
size_t	long
N1	long
=	O
N	int
/	O
2	int
;	O
const	O
size_t	long
N2	long
=	O
N	int
-	O
N1	long
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
0	int
,	O
M1	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
0	int
,	O
N1	long
,	O
M1	long
,	O
N2	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
M1	long
,	O
0	int
,	O
M2	long
,	O
N1	long
)	O
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
A	*(float)
,	O
M1	long
,	O
N1	long
,	O
M2	long
,	O
N2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
0	int
,	O
M1	long
,	O
M1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
,	O
M1	long
,	O
M1	long
,	O
M2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
U	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
,	O
M1	long
,	O
M1	long
,	O
M2	long
,	O
M2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
0	int
,	O
N1	long
,	O
M1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
0	int
,	O
M1	long
,	O
N1	long
,	O
M2	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
N1	long
,	O
0	int
,	O
N2	long
,	O
M1	long
)	O
;	O
gsl_matrix_const_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
B22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_matrix_const_submatrix	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
B	*(float)
,	O
N1	long
,	O
M1	long
,	O
N2	long
,	O
M2	long
)	O
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U11	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
gsl_blas_dgemm	(enum(int,int,int),enum(int,int,int),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),double,*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
CblasNoTrans	int
,	O
CblasTrans	int
,	O
1.0	int
,	O
&	O
U12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
1.0	int
,	O
&	O
A12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B12	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A21	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
status	int
=	O
aux_ApUBT	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
U22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
B22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
A22	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
status	int
)	O
return	O
status	int
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
