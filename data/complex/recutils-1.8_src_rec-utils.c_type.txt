bool	bool
rec_atoi	(*(char),*(int))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
int	O
*	O
number	*(int)
)	O
{	O
bool	bool
res	bool
;	O
long	O
int	O
li	long
;	O
char	O
*	O
end	*(long)
;	O
int	O
base	int
=	O
0	int
;	O
res	bool
=	O
false	int
;	O
li	long
=	O
strtol	(*(char),*(*(char)),int)->(long)
(	O
str	*(char)
,	O
&	O
end	*(long)
,	O
base	int
)	O
;	O
if	O
(	O
(	O
*	O
str	*(char)
!=	O
'\0'	O
)	O
&&	O
(	O
*	O
end	*(long)
==	O
'\0'	O
)	O
)	O
{	O
res	bool
=	O
true	int
;	O
*	O
number	*(int)
=	O
(	O
int	O
)	O
li	long
;	O
}	O
return	O
res	bool
;	O
}	O
bool	bool
rec_atod	(*(char),*(double))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
double	O
*	O
number	*(int)
)	O
{	O
bool	bool
res	bool
;	O
char	O
*	O
end	*(long)
;	O
res	bool
=	O
false	int
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_NUMERIC	O
,	O
"C"	*(char)
)	O
;	O
*	O
number	*(int)
=	O
strtod	(*(char),*(*(char)))->(double)
(	O
str	*(char)
,	O
&	O
end	*(long)
)	O
;	O
setlocale	(int,*(char))->(*(char))
(	O
LC_NUMERIC	O
,	O
""	*(char)
)	O
;	O
if	O
(	O
(	O
*	O
str	*(char)
!=	O
'\0'	O
)	O
&&	O
(	O
*	O
end	*(long)
==	O
'\0'	O
)	O
)	O
{	O
res	bool
=	O
true	int
;	O
}	O
return	O
res	bool
;	O
}	O
char	O
*	O
rec_extract_file	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexp	*(char)
;	O
regmatch_t	struct(long,long)
matches	struct(long,long)
;	O
char	O
*	O
rec_file	*(char)
=	O
NULL	O
;	O
size_t	long
rec_file_length	long
=	O
0	int
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	*(char)
,	O
"[ \n\t]"	*(char)
REC_FILE_REGEXP	*(char)
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"internal error: rec_int_rec_extract_file: error compiling regexp.\n"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
regexec	O
(	O
&	O
regexp	*(char)
,	O
str	*(char)
,	O
1	int
,	O
&	O
matches	struct(long,long)
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct(long,long)
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
rec_file_length	long
=	O
matches	struct(long,long)
.	O
rm_eo	long
-	O
matches	struct(long,long)
.	O
rm_so	long
;	O
rec_file	*(char)
=	O
malloc	(long)->(*(void))
(	O
rec_file_length	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rec_file	*(char)
,	O
str	*(char)
+	O
matches	struct(long,long)
.	O
rm_so	long
+	O
1	int
,	O
rec_file_length	long
-	O
1	int
)	O
;	O
rec_file	*(char)
[	O
rec_file_length	long
-	O
1	int
]	O
=	O
'\0'	O
;	O
}	O
regfree	O
(	O
&	O
regexp	*(char)
)	O
;	O
return	O
rec_file	*(char)
;	O
}	O
char	O
*	O
rec_extract_url	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexp	*(char)
;	O
regmatch_t	struct(long,long)
matches	struct(long,long)
;	O
char	O
*	O
rec_url	*(char)
=	O
NULL	O
;	O
size_t	long
rec_url_length	long
=	O
0	int
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	*(char)
,	O
REC_URL_REGEXP	*(char)
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"internal error: rec_int_rec_extract_url: error compiling regexp.\n"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
regexec	O
(	O
&	O
regexp	*(char)
,	O
str	*(char)
,	O
1	int
,	O
&	O
matches	struct(long,long)
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct(long,long)
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
rec_url_length	long
=	O
matches	struct(long,long)
.	O
rm_eo	long
-	O
matches	struct(long,long)
.	O
rm_so	long
;	O
rec_url	*(char)
=	O
malloc	(long)->(*(void))
(	O
rec_url_length	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rec_url	*(char)
,	O
str	*(char)
+	O
matches	struct(long,long)
.	O
rm_so	long
,	O
rec_url_length	long
)	O
;	O
rec_url	*(char)
[	O
rec_url_length	long
]	O
=	O
'\0'	O
;	O
}	O
regfree	O
(	O
&	O
regexp	*(char)
)	O
;	O
return	O
rec_url	*(char)
;	O
}	O
char	O
*	O
rec_extract_type	(*(char))->(*(char))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexp	*(char)
;	O
regmatch_t	struct(long,long)
matches	struct(long,long)
;	O
char	O
*	O
rec_type	*(char)
=	O
NULL	O
;	O
size_t	long
rec_type_length	long
=	O
0	int
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	*(char)
,	O
REC_FNAME_RE	*(char)
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"internal error: rec_int_rec_extract_url: error compiling regexp.\n"	*(char)
)	O
)	O
;	O
return	O
NULL	O
;	O
}	O
if	O
(	O
(	O
regexec	O
(	O
&	O
regexp	*(char)
,	O
str	*(char)
,	O
1	int
,	O
&	O
matches	struct(long,long)
,	O
0	int
)	O
==	O
0	int
)	O
&&	O
(	O
matches	struct(long,long)
.	O
rm_so	long
!=	O
-	O
1	int
)	O
)	O
{	O
rec_type_length	long
=	O
matches	struct(long,long)
.	O
rm_eo	long
-	O
matches	struct(long,long)
.	O
rm_so	long
;	O
rec_type	*(char)
=	O
malloc	(long)->(*(void))
(	O
rec_type_length	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
rec_type	*(char)
,	O
str	*(char)
+	O
matches	struct(long,long)
.	O
rm_so	long
,	O
rec_type_length	long
)	O
;	O
rec_type	*(char)
[	O
rec_type_length	long
]	O
=	O
'\0'	O
;	O
}	O
regfree	O
(	O
&	O
regexp	*(char)
)	O
;	O
return	O
rec_type	*(char)
;	O
}	O
bool	bool
rec_parse_int	(*(*(char)),*(int))->(bool)
(	O
const	O
char	O
*	O
*	O
str	*(char)
,	O
int	O
*	O
num	*(int)
)	O
{	O
bool	bool
ret	bool
;	O
const	O
char	O
*	O
p	*(void)
,	O
*	O
b	*(char)
;	O
char	O
number	*(int)
[	O
30	int
]	O
;	O
ret	bool
=	O
true	int
;	O
p	*(void)
=	O
*	O
str	*(char)
;	O
b	*(char)
=	O
p	*(void)
;	O
while	O
(	O
rec_digit_p	(char)->(bool)
(	O
*	O
p	*(void)
)	O
||	O
(	O
(	O
p	*(void)
==	O
b	*(char)
)	O
&&	O
(	O
*	O
p	*(void)
==	O
'-'	O
)	O
)	O
||	O
(	O
(	O
*	O
p	*(void)
>=	O
'a'	O
)	O
&&	O
(	O
*	O
p	*(void)
<=	O
'f'	O
)	O
)	O
||	O
(	O
(	O
*	O
p	*(void)
>=	O
'A'	O
)	O
&&	O
(	O
*	O
p	*(void)
<=	O
'F'	O
)	O
)	O
||	O
(	O
*	O
p	*(void)
==	O
'x'	O
)	O
||	O
(	O
*	O
p	*(void)
==	O
'X'	O
)	O
)	O
{	O
number	*(int)
[	O
p	*(void)
-	O
b	*(char)
]	O
=	O
*	O
p	*(void)
;	O
p	*(void)
++	O
;	O
}	O
number	*(int)
[	O
p	*(void)
-	O
b	*(char)
]	O
=	O
'\0'	O
;	O
if	O
(	O
!	O
rec_atoi	(*(char),*(int))->(bool)
(	O
number	*(int)
,	O
num	*(int)
)	O
)	O
{	O
ret	bool
=	O
false	int
;	O
}	O
if	O
(	O
ret	bool
)	O
{	O
*	O
str	*(char)
=	O
p	*(void)
;	O
}	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
const	O
char	O
*	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
re	*(char)
,	O
char	O
*	O
*	O
result	*(*(char))
)	O
{	O
bool	bool
ret	bool
;	O
const	O
char	O
*	O
p	*(void)
;	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexp	*(char)
;	O
regmatch_t	struct(long,long)
pm	struct(long,long)
;	O
ret	bool
=	O
true	int
;	O
p	*(void)
=	O
*	O
str	*(char)
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	*(char)
,	O
re	*(char)
,	O
REG_EXTENDED	int
)	O
!=	O
0	int
)	O
{	O
ret	bool
=	O
false	int
;	O
}	O
if	O
(	O
ret	bool
)	O
{	O
if	O
(	O
regexec	O
(	O
&	O
regexp	*(char)
,	O
p	*(void)
,	O
1	int
,	O
&	O
pm	struct(long,long)
,	O
0	int
)	O
==	O
0	int
)	O
{	O
if	O
(	O
result	*(*(char))
)	O
{	O
*	O
result	*(*(char))
=	O
malloc	(long)->(*(void))
(	O
pm	struct(long,long)
.	O
rm_eo	long
+	O
1	int
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
*	O
result	*(*(char))
,	O
p	*(void)
,	O
pm	struct(long,long)
.	O
rm_eo	long
)	O
;	O
(	O
*	O
result	*(*(char))
)	O
[	O
pm	struct(long,long)
.	O
rm_eo	long
]	O
=	O
'\0'	O
;	O
}	O
p	*(void)
=	O
p	*(void)
+	O
pm	struct(long,long)
.	O
rm_eo	long
;	O
}	O
else	O
{	O
ret	bool
=	O
false	int
;	O
if	O
(	O
result	*(*(char))
)	O
{	O
*	O
result	*(*(char))
=	O
NULL	O
;	O
}	O
}	O
regfree	O
(	O
&	O
regexp	*(char)
)	O
;	O
}	O
if	O
(	O
ret	bool
)	O
{	O
*	O
str	*(char)
=	O
p	*(void)
;	O
}	O
return	O
ret	bool
;	O
}	O
void	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
const	O
char	O
*	O
*	O
str	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
p	*(void)
=	O
*	O
str	*(char)
;	O
while	O
(	O
rec_blank_p	(char)->(bool)
(	O
*	O
p	*(void)
)	O
)	O
{	O
p	*(void)
++	O
;	O
}	O
*	O
str	*(char)
=	O
p	*(void)
;	O
}	O
bool	bool
rec_blank_p	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
c	int
==	O
' '	O
)	O
||	O
(	O
c	int
==	O
'\n'	O
)	O
||	O
(	O
c	int
==	O
'\t'	O
)	O
)	O
;	O
}	O
bool	bool
rec_digit_p	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
c	int
>=	O
'0'	O
)	O
&&	O
(	O
c	int
<=	O
'9'	O
)	O
)	O
;	O
}	O
bool	bool
rec_letter_p	(char)->(bool)
(	O
char	O
c	int
)	O
{	O
return	O
(	O
(	O
(	O
c	int
>=	O
'a'	O
)	O
&&	O
(	O
c	int
<=	O
'z'	O
)	O
)	O
||	O
(	O
(	O
c	int
>=	O
'A'	O
)	O
&&	O
(	O
c	int
<=	O
'Z'	O
)	O
)	O
)	O
;	O
}	O
static	O
bool	bool
rec_match_int	(*(char),*(char),int)->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
reg	*(struct)
,	O
int	O
flags	int
)	O
{	O
bool	bool
ret	bool
;	O
regex_t	struct(*(struct),long,long,long,*(char),*(char),long,int,int,int,int,int,int,int)
regexp	*(char)
;	O
if	O
(	O
regcomp	O
(	O
&	O
regexp	*(char)
,	O
reg	*(struct)
,	O
flags	int
)	O
!=	O
0	int
)	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
_	O
(	O
"internal error: rec_match: error compiling regexp.\n"	*(char)
)	O
)	O
;	O
return	O
false	int
;	O
}	O
ret	bool
=	O
(	O
regexec	O
(	O
&	O
regexp	*(char)
,	O
str	*(char)
,	O
0	int
,	O
NULL	O
,	O
0	int
)	O
==	O
0	int
)	O
;	O
regfree	O
(	O
&	O
regexp	*(char)
)	O
;	O
return	O
ret	bool
;	O
}	O
bool	bool
rec_match	(*(char),*(char))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
reg	*(struct)
)	O
{	O
return	O
rec_match_int	(*(char),*(char),int)->(bool)
(	O
str	*(char)
,	O
reg	*(struct)
,	O
REG_EXTENDED	int
)	O
;	O
}	O
bool	bool
rec_match_insensitive	(*(char),*(char))->(bool)
(	O
const	O
char	O
*	O
str	*(char)
,	O
const	O
char	O
*	O
reg	*(struct)
)	O
{	O
return	O
rec_match_int	(*(char),*(char),int)->(bool)
(	O
str	*(char)
,	O
reg	*(struct)
,	O
REG_EXTENDED	int
|	O
REG_ICASE	O
)	O
;	O
}	O
size_t	long
rec_extract_size	(*(char))->(long)
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
condition_str	*(char)
;	O
int	O
res	bool
;	O
if	O
(	O
!	O
rec_match	(*(char),*(char))->(bool)
(	O
str	*(char)
,	O
REC_INT_SIZE_RE	O
)	O
)	O
{	O
return	O
0	int
;	O
}	O
p	*(void)
=	O
str	*(char)
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^[><]=?"	*(char)
,	O
&	O
condition_str	*(char)
)	O
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
rec_parse_int	(*(*(char)),*(int))->(bool)
(	O
&	O
p	*(void)
,	O
&	O
res	bool
)	O
;	O
return	O
(	O
size_t	long
)	O
res	bool
;	O
}	O
enum	O
rec_size_condition_e	enum(int,int,int,int,int)
rec_extract_size_condition	(*(char))->(enum(int,int,int,int,int))
(	O
const	O
char	O
*	O
str	*(char)
)	O
{	O
const	O
char	O
*	O
p	*(void)
;	O
char	O
*	O
condition_str	*(char)
=	O
NULL	O
;	O
enum	O
rec_size_condition_e	enum(int,int,int,int,int)
condition	enum(int,int,int,int,int)
;	O
if	O
(	O
!	O
rec_match	(*(char),*(char))->(bool)
(	O
str	*(char)
,	O
REC_INT_SIZE_RE	O
)	O
)	O
{	O
return	O
SIZE_COND_E	int
;	O
}	O
p	*(void)
=	O
str	*(char)
;	O
rec_skip_blanks	(*(*(char)))->(void)
(	O
&	O
p	*(void)
)	O
;	O
rec_parse_regexp	(*(*(char)),*(char),*(*(char)))->(bool)
(	O
&	O
p	*(void)
,	O
"^[><]=?"	*(char)
,	O
&	O
condition_str	*(char)
)	O
;	O
if	O
(	O
condition_str	*(char)
)	O
{	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
condition_str	*(char)
,	O
">"	*(char)
)	O
==	O
0	int
)	O
{	O
condition	enum(int,int,int,int,int)
=	O
SIZE_COND_G	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
condition_str	*(char)
,	O
">="	*(char)
)	O
==	O
0	int
)	O
{	O
condition	enum(int,int,int,int,int)
=	O
SIZE_COND_GE	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
condition_str	*(char)
,	O
"<"	*(char)
)	O
==	O
0	int
)	O
{	O
condition	enum(int,int,int,int,int)
=	O
SIZE_COND_L	int
;	O
}	O
else	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
condition_str	*(char)
,	O
"<="	*(char)
)	O
==	O
0	int
)	O
{	O
condition	enum(int,int,int,int,int)
=	O
SIZE_COND_LE	int
;	O
}	O
else	O
{	O
fprintf	(*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,*`,int,int,long,short,char,array(char),*`,long,*`,*`,*`,*`,long,int,array(char))),*(void),long,int,array(char))),*(char))->(int)
(	O
stderr	*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),int,int,long,short,char,array(char),*(void),long,*(struct),*(struct),*(struct(int,*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(char),*(struct`),*(struct`),int,int,long,short,char,array(char),*(void),long,*(struct`),*(struct`),*(struct`),*(void),long,int,array(char))),*(void),long,int,array(char)))
,	O
"internal error: rec_extract_size_condition: invalid condition.\n"	*(char)
)	O
;	O
return	O
SIZE_COND_E	int
;	O
}	O
free	(*(void))->(void)
(	O
condition_str	*(char)
)	O
;	O
}	O
else	O
{	O
condition	enum(int,int,int,int,int)
=	O
SIZE_COND_E	int
;	O
}	O
return	O
condition	enum(int,int,int,int,int)
;	O
}	O
int	O
rec_timespec_subtract	(*(struct(long,long)),*(struct(long,long)),*(struct(long,long)))->(int)
(	O
struct	O
timespec	struct(long,long)
*	O
result	*(*(char))
,	O
struct	O
timespec	struct(long,long)
*	O
x	*(struct(long,long))
,	O
struct	O
timespec	struct(long,long)
*	O
y	*(struct(long,long))
)	O
{	O
result	*(*(char))
->	O
tv_sec	long
=	O
x	*(struct(long,long))
->	O
tv_sec	long
-	O
y	*(struct(long,long))
->	O
tv_sec	long
;	O
result	*(*(char))
->	O
tv_nsec	long
=	O
x	*(struct(long,long))
->	O
tv_nsec	long
-	O
y	*(struct(long,long))
->	O
tv_nsec	long
;	O
if	O
(	O
result	*(*(char))
->	O
tv_nsec	long
<	O
0	int
)	O
{	O
result	*(*(char))
->	O
tv_sec	long
--	O
;	O
result	*(*(char))
->	O
tv_nsec	long
+=	O
1000000000	int
;	O
}	O
return	O
(	O
result	*(*(char))
->	O
tv_sec	long
<	O
0	int
)	O
;	O
}	O
uint32_t	int
rec_endian_swap	(int)->(int)
(	O
uint32_t	int
number	*(int)
)	O
{	O
uint32_t	int
res	bool
;	O
res	bool
=	O
(	O
number	*(int)
>>	O
24	int
)	O
|	O
(	O
(	O
number	*(int)
<<	O
8	int
)	O
&	O
0x00FF0000	int
)	O
|	O
(	O
(	O
number	*(int)
>>	O
8	int
)	O
&	O
0x0000FF00	int
)	O
|	O
(	O
number	*(int)
<<	O
24	int
)	O
;	O
return	O
res	bool
;	O
}	O
char	O
*	O
rec_concat_strings	(*(char),*(char),*(char))->(*(char))
(	O
const	O
char	O
*	O
str1	*(char)
,	O
const	O
char	O
*	O
str2	*(char)
,	O
const	O
char	O
*	O
str3	*(char)
)	O
{	O
char	O
*	O
res	bool
=	O
malloc	(long)->(*(void))
(	O
strlen	(*(char))->(long)
(	O
str1	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
str2	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
str3	*(char)
)	O
+	O
1	int
)	O
;	O
if	O
(	O
res	bool
)	O
{	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	bool
,	O
str1	*(char)
,	O
strlen	(*(char))->(long)
(	O
str1	*(char)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	bool
+	O
strlen	(*(char))->(long)
(	O
str1	*(char)
)	O
,	O
str2	*(char)
,	O
strlen	(*(char))->(long)
(	O
str2	*(char)
)	O
)	O
;	O
memcpy	(*(void),*(void),long)->(*(void))
(	O
res	bool
+	O
strlen	(*(char))->(long)
(	O
str1	*(char)
)	O
+	O
strlen	(*(char))->(long)
(	O
str2	*(char)
)	O
,	O
str3	*(char)
,	O
strlen	(*(char))->(long)
(	O
str3	*(char)
)	O
+	O
1	int
)	O
;	O
}	O
return	O
res	bool
;	O
}	O
