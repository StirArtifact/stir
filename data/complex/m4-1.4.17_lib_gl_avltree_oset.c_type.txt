struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
{	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
int	O
balance	int
;	O
const	O
void	O
*	O
value	*(void)
;	O
}	O
;	O
typedef	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
struct	O
gl_oset_impl	struct(struct(*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),long)
{	O
struct	O
gl_oset_impl_base	struct(*(struct(*((*(struct`),*((*`,*`)->(int)),*((*`)->(void)))->(*(struct`))),*((*(struct`))->(long)),*((*(struct`),*(void))->(bool)),*((*(struct`),*((*`,*`)->(bool)),*(void),*(*`))->(bool)),*((*(struct`),*(void))->(int)),*((*(struct`),*(void))->(bool)),*((*(struct`))->(void)),*((*(struct`))->(struct(*`,*`,long,*`,*`,long,long))),*((*(struct`),*(*`))->(bool)),*((*(struct`))->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void)))
base	struct(*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void)))
;	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
size_t	long
count	long
;	O
}	O
;	O
static	O
void	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
gl_oset_t	*(struct)
set	*(struct)
,	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
int	O
height_diff	int
,	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
{	O
for	O
(	O
;	O
;	O
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
int	O
previous_balance	int
;	O
int	O
balance_diff	int
;	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
previous_balance	int
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
||	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
balance_diff	int
=	O
(	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
?	O
height_diff	int
:	O
-	O
height_diff	int
)	O
;	O
else	O
balance_diff	int
=	O
-	O
previous_balance	int
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
+=	O
balance_diff	int
;	O
if	O
(	O
balance_diff	int
==	O
previous_balance	int
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
*	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
&	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
&	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
abort	()->(void)
(	O
)	O
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
balance_diff	int
<	O
0	int
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
<=	O
0	int
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
+=	O
1	int
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
-	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
;	O
*	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
height_diff	int
=	O
(	O
height_diff	int
<	O
0	int
?	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
-	O
1	int
:	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
)	O
;	O
}	O
else	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
L	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
R	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
L	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
L	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
R	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
R	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
nodeleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
(	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
>	O
0	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
(	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
<	O
0	int
?	O
1	int
:	O
0	int
)	O
;	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
0	int
;	O
*	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
nodeleftright	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
height_diff	int
=	O
(	O
height_diff	int
<	O
0	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
}	O
else	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
>=	O
0	int
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
-=	O
1	int
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
-	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
;	O
*	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
height_diff	int
=	O
(	O
height_diff	int
<	O
0	int
?	O
-	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
-	O
1	int
:	O
-	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
)	O
;	O
}	O
else	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
L	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
R	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
L	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
L	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
R	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
R	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
(	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
>	O
0	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
noderight	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
(	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
<	O
0	int
?	O
1	int
:	O
0	int
)	O
;	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
0	int
;	O
*	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
=	O
noderightleft	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
height_diff	int
=	O
(	O
height_diff	int
<	O
0	int
?	O
-	O
1	int
:	O
0	int
)	O
;	O
}	O
}	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
*	O
nodep	*(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
;	O
}	O
else	O
{	O
if	O
(	O
height_diff	int
<	O
0	int
)	O
height_diff	int
=	O
(	O
previous_balance	int
==	O
0	int
?	O
0	int
:	O
-	O
1	int
)	O
;	O
else	O
height_diff	int
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
==	O
0	int
?	O
0	int
:	O
1	int
)	O
;	O
}	O
if	O
(	O
height_diff	int
==	O
0	int
)	O
break	O
;	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
break	O
;	O
}	O
}	O
static	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
gl_tree_nx_add_first	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(void))->(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
(	O
gl_oset_t	*(struct)
set	*(struct)
,	O
const	O
void	O
*	O
elt	*(void)
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
(	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
)	O
)	O
;	O
if	O
(	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
0	int
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
value	*(void)
=	O
elt	*(void)
;	O
if	O
(	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
{	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
}	O
else	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
for	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
;	O
)	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
--	O
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
&&	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
set	*(struct)
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
1	int
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
}	O
set	*(struct)
->	O
count	long
++	O
;	O
return	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
}	O
static	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
gl_tree_nx_add_before	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(void))->(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
(	O
gl_oset_t	*(struct)
set	*(struct)
,	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
const	O
void	O
*	O
elt	*(void)
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
(	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
)	O
)	O
;	O
bool	bool
height_inc	bool
;	O
if	O
(	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
0	int
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
value	*(void)
=	O
elt	*(void)
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
--	O
;	O
height_inc	bool
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
;	O
)	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
++	O
;	O
height_inc	bool
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
;	O
}	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
height_inc	bool
&&	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
set	*(struct)
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
1	int
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
set	*(struct)
->	O
count	long
++	O
;	O
return	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
}	O
static	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
gl_tree_nx_add_after	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(void))->(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))
(	O
gl_oset_t	*(struct)
set	*(struct)
,	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
const	O
void	O
*	O
elt	*(void)
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
(	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
*	O
)	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
gl_oset_node_impl	struct(*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void))),int,*(void))
)	O
)	O
;	O
bool	bool
height_inc	bool
;	O
if	O
(	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
return	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
NULL	O
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
0	int
;	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
value	*(void)
=	O
elt	*(void)
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
{	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
++	O
;	O
height_inc	bool
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
;	O
}	O
else	O
{	O
for	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
;	O
)	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
--	O
;	O
height_inc	bool
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
;	O
}	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
height_inc	bool
&&	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
set	*(struct)
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
1	int
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
set	*(struct)
->	O
count	long
++	O
;	O
return	O
new_node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
}	O
static	O
bool	bool
gl_tree_remove_node	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(bool)
(	O
gl_oset_t	*(struct)
set	*(struct)
,	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
{	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
set	*(struct)
,	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
-	O
1	int
,	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
}	O
}	O
else	O
if	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
{	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
set	*(struct)
,	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
-	O
1	int
,	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
}	O
}	O
else	O
{	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
for	O
(	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
;	O
)	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
{	O
if	O
(	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
}	O
if	O
(	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
{	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
}	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
;	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
NULL	O
)	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
if	O
(	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
else	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
=	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
;	O
rebalance	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),int,*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))))->(void)
(	O
set	*(struct)
,	O
child	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
-	O
1	int
,	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
?	O
subst_parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
:	O
subst	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
}	O
set	*(struct)
->	O
count	long
--	O
;	O
if	O
(	O
set	*(struct)
->	O
base	struct(*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void)))
.	O
dispose_fn	*((*(void))->(void))
!=	O
NULL	O
)	O
set	*(struct)
->	O
base	struct(*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void)))
.	O
dispose_fn	*((*(void))->(void))
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
value	*(void)
)	O
;	O
free	(*(void))->(void)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
;	O
return	O
true	int
;	O
}	O
static	O
unsigned	O
int	O
check_invariants	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(long))->(int)
(	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
gl_oset_node_t	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
size_t	long
*	O
counterp	*(long)
)	O
{	O
unsigned	O
int	O
left_height	int
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
?	O
check_invariants	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(long))->(int)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
left	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
counterp	*(long)
)	O
:	O
0	int
)	O
;	O
unsigned	O
int	O
right_height	int
=	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
?	O
check_invariants	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(long))->(int)
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
right	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
counterp	*(long)
)	O
:	O
0	int
)	O
;	O
int	O
balance	int
=	O
(	O
int	O
)	O
right_height	int
-	O
(	O
int	O
)	O
left_height	int
;	O
if	O
(	O
!	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
==	O
parent	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
balance	int
>=	O
-	O
1	int
&&	O
balance	int
<=	O
1	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
if	O
(	O
!	O
(	O
node	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
->	O
balance	int
==	O
balance	int
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
(	O
*	O
counterp	*(long)
)	O
++	O
;	O
return	O
1	int
+	O
(	O
left_height	int
>	O
right_height	int
?	O
left_height	int
:	O
right_height	int
)	O
;	O
}	O
void	O
gl_avltree_oset_check_invariants	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)))->(void)
(	O
gl_oset_t	*(struct)
set	*(struct)
)	O
{	O
size_t	long
counter	long
=	O
0	int
;	O
if	O
(	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
!=	O
NULL	O
)	O
check_invariants	(*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(struct(*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),*(struct(*`,*`,*`,int,*`)),int,*(void))),*(long))->(int)
(	O
set	*(struct)
->	O
root	*(struct(*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),*(struct(*(struct`),*(struct`),*(struct`),int,*(void))),int,*(void)))
,	O
NULL	O
,	O
&	O
counter	long
)	O
;	O
if	O
(	O
!	O
(	O
set	*(struct)
->	O
count	long
==	O
counter	long
)	O
)	O
abort	()->(void)
(	O
)	O
;	O
}	O
const	O
struct	O
gl_oset_implementation	struct(*((*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void)))->(*(struct))),*((*(struct))->(long)),*((*(struct),*(void))->(bool)),*((*(struct),*((*(void),*(void))->(bool)),*(void),*(*(void)))->(bool)),*((*(struct),*(void))->(int)),*((*(struct),*(void))->(bool)),*((*(struct))->(void)),*((*(struct))->(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct),long,*(void),*(void),long,long))),*((*(struct(*(struct`),*(struct`),long,*(void),*(void),long,long)),*(*(void)))->(bool)),*((*(struct(*(struct`),*(struct`),long,*(void),*(void),long,long)))->(void)))
gl_avltree_oset_implementation	struct(*((*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*((*`,*`)->(int)),*((*`)->(void)))->(*(struct))),*((*(struct))->(long)),*((*(struct),*(void))->(bool)),*((*(struct),*((*`,*`)->(bool)),*(void),*(*(void)))->(bool)),*((*(struct),*(void))->(int)),*((*(struct),*(void))->(bool)),*((*(struct))->(void)),*((*(struct))->(struct(*(struct`),*(struct`),long,*(void),*(void),long,long))),*((*(struct(*`,*`,long,*`,*`,long,long)),*(*(void)))->(bool)),*((*(struct(*`,*`,long,*`,*`,long,long)))->(void)))
=	O
{	O
gl_tree_nx_create_empty	(*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*((*(void),*(void))->(int)),*((*(void))->(void)))->(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)))
,	O
gl_tree_size	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)))->(long)
,	O
gl_tree_search	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(void))->(bool)
,	O
gl_tree_search_atleast	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*((*(void),*(void))->(bool)),*(void),*(*(void)))->(bool)
,	O
gl_tree_nx_add	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(void))->(int)
,	O
gl_tree_remove	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)),*(void))->(bool)
,	O
gl_tree_oset_free	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)))->(void)
,	O
gl_tree_iterator	(*(struct(struct(*(struct`),*((*`,*`)->(int)),*((*`)->(void))),*(struct(*`,*`,*`,int,*`)),long)))->(struct(*(struct(*((*`,*`,*`)->(*`)),*((*`)->(long)),*((*`,*`)->(bool)),*((*`,*`,*`,*`)->(bool)),*((*`,*`)->(int)),*((*`,*`)->(bool)),*((*`)->(void)),*((*`)->(struct`)),*((*`,*`)->(bool)),*((*`)->(void)))),*(struct(struct(*`,*`,*`),*(struct`),long)),long,*(void),*(void),long,long))
,	O
gl_tree_iterator_next	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(struct`,*`,long)),long,*(void),*(void),long,long)),*(*(void)))->(bool)
,	O
gl_tree_iterator_free	(*(struct(*(struct(*`,*`,*`,*`,*`,*`,*`,*`,*`,*`)),*(struct(struct`,*`,long)),long,*(void),*(void),long,long)))->(void)
}	O
;	O
