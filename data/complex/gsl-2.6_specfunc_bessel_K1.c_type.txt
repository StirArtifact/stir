static	O
double	O
k1_poly	array(double)
[	O
9	int
]	O
=	O
{	O
-	O
3.0796575782920622440538935e-01	int
,	O
-	O
8.5370719728650778045782736e-02	int
,	O
-	O
4.6421827664715603298154971e-03	int
,	O
-	O
1.1253607036630425931072996e-04	int
,	O
-	O
1.5592887702110907110292728e-06	int
,	O
-	O
1.4030163679125934402498239e-08	int
,	O
-	O
8.8718998640336832196558868e-11	int
,	O
-	O
4.1614323580221539328960335e-13	int
,	O
-	O
1.5261293392975541707230366e-15	int
}	O
;	O
static	O
double	O
i1_poly	array(double)
[	O
7	int
]	O
=	O
{	O
8.3333333333333325191635191e-02	int
,	O
6.9444444444467956461838830e-03	int
,	O
3.4722222211230452695165215e-04	int
,	O
1.1574075952009842696580084e-05	int
,	O
2.7555870002088181016676934e-07	int
,	O
4.9724386164128529514040614e-09	int
}	O
;	O
static	O
double	O
ak1_data	array(double)
[	O
25	int
]	O
=	O
{	O
+	O
2.07996868001418246e-01	int
,	O
+	O
1.62581565017881476e-01	int
,	O
-	O
5.87070423518863640e-03	int
,	O
+	O
4.95021520115789501e-04	int
,	O
-	O
5.78958347598556986e-05	int
,	O
+	O
8.18614610209334726e-06	int
,	O
-	O
1.31604832009487277e-06	int
,	O
+	O
2.32546031520101213e-07	int
,	O
-	O
4.42206518311557987e-08	int
,	O
+	O
8.92163994883100361e-09	int
,	O
-	O
1.89046270526983427e-09	int
,	O
+	O
4.17568808108504702e-10	int
,	O
-	O
9.55912361791375794e-11	int
,	O
+	O
2.25769353153867758e-11	int
,	O
-	O
5.48128000211158482e-12	int
,	O
+	O
1.36386122546441926e-12	int
,	O
-	O
3.46936690565986409e-13	int
,	O
+	O
9.00354564415705942e-14	int
,	O
-	O
2.37950577776254432e-14	int
,	O
+	O
6.39447503964025336e-15	int
,	O
-	O
1.74498363492322044e-15	int
,	O
+	O
4.82994547989290473e-16	int
,	O
-	O
1.35460927805445606e-16	int
,	O
+	O
3.84604274446777234e-17	int
,	O
-	O
1.10456856122581316e-17	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
ak1_cs	struct(*(double),int,double,double,int)
=	O
{	O
ak1_data	array(double)
,	O
24	int
,	O
-	O
1	int
,	O
1	int
,	O
9	int
}	O
;	O
static	O
double	O
ak12_data	array(double)
[	O
14	int
]	O
=	O
{	O
+	O
.637930834373900104E-1	int
,	O
+	O
.283288781304972094E-1	int
,	O
-	O
.247537067390525035E-3	int
,	O
+	O
.577197245160724882E-5	int
,	O
-	O
.206893921953654830E-6	int
,	O
+	O
.973998344138180418E-8	int
,	O
-	O
.558533614038062498E-9	int
,	O
+	O
.373299663404618524E-10	int
,	O
-	O
.282505196102322545E-11	int
,	O
+	O
.237201900248414417E-12	int
,	O
-	O
.217667738799175398E-13	int
,	O
+	O
.215791416161603245E-14	int
,	O
-	O
.229019693071826928E-15	int
,	O
+	O
.258288572982327496E-16	int
}	O
;	O
static	O
cheb_series	struct(*(double),int,double,double,int)
ak12_cs	struct(*(double),int,double,double,int)
=	O
{	O
ak12_data	array(double)
,	O
13	int
,	O
-	O
1	int
,	O
1	int
,	O
7	int
}	O
;	O
int	O
gsl_sf_bessel_K1_scaled_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
GSL_DBL_MIN	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
lx	double
=	O
log	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
ex	double
=	O
exp	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
t	double
=	O
0.25	int
*	O
x2	double
;	O
const	O
double	O
i1	double
=	O
0.5	int
*	O
x	double
*	O
(	O
1.0	int
+	O
t	double
*	O
(	O
0.5	int
+	O
t	double
*	O
gsl_poly_eval	(array(double),int,double)->(double)
(	O
i1_poly	array(double)
,	O
6	int
,	O
t	double
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
ex	double
*	O
(	O
x2	double
*	O
gsl_poly_eval	(array(double),int,double)->(double)
(	O
k1_poly	array(double)
,	O
9	int
,	O
x2	double
)	O
+	O
x	double
*	O
lx	double
*	O
i1	double
+	O
1	int
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
ex	double
*	O
(	O
1.6	int
+	O
fabs	(double)->(double)
(	O
lx	double
)	O
*	O
0.6	int
)	O
*	O
GSL_DBL_EPSILON	int
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
if	O
(	O
x	double
<=	O
8.0	int
)	O
{	O
const	O
double	O
sx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
gsl_sf_result	struct(double,double)
c	array(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
ak1_cs	struct(*(double),int,double,double,int)
,	O
(	O
16.0	int
/	O
x	double
-	O
9.0	int
)	O
/	O
7.0	int
,	O
&	O
c	array(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
1.375	int
+	O
c	array(double)
.	O
val	double
)	O
/	O
sx	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
c	array(double)
.	O
err	double
/	O
sx	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
const	O
double	O
sx	double
=	O
sqrt	(double)->(double)
(	O
x	double
)	O
;	O
gsl_sf_result	struct(double,double)
c	array(double)
;	O
cheb_eval_e	(*(struct(*(double),int,double,double,int)),double,*(struct(double,double)))->(int)
(	O
&	O
ak12_cs	struct(*(double),int,double,double,int)
,	O
16.0	int
/	O
x	double
-	O
1.0	int
,	O
&	O
c	array(double)
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
1.25	int
+	O
c	array(double)
.	O
val	double
)	O
/	O
sx	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
c	array(double)
.	O
err	double
/	O
sx	double
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
}	O
int	O
gsl_sf_bessel_K1_e	(double,*(struct(double,double)))->(int)
(	O
const	O
double	O
x	double
,	O
gsl_sf_result	struct(double,double)
*	O
result	*(struct(double,double))
)	O
{	O
if	O
(	O
x	double
<=	O
0.0	int
)	O
{	O
DOMAIN_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
2.0	int
*	O
GSL_DBL_MIN	int
)	O
{	O
OVERFLOW_ERROR	O
(	O
result	*(struct(double,double))
)	O
;	O
}	O
else	O
if	O
(	O
x	double
<	O
1.0	int
)	O
{	O
const	O
double	O
lx	double
=	O
log	(double)->(double)
(	O
x	double
)	O
;	O
const	O
double	O
x2	double
=	O
x	double
*	O
x	double
;	O
const	O
double	O
t	double
=	O
0.25	int
*	O
x2	double
;	O
const	O
double	O
i1	double
=	O
0.5	int
*	O
x	double
*	O
(	O
1.0	int
+	O
t	double
*	O
(	O
0.5	int
+	O
t	double
*	O
gsl_poly_eval	(array(double),int,double)->(double)
(	O
i1_poly	array(double)
,	O
6	int
,	O
t	double
)	O
)	O
)	O
;	O
result	*(struct(double,double))
->	O
val	double
=	O
(	O
x2	double
*	O
gsl_poly_eval	(array(double),int,double)->(double)
(	O
k1_poly	array(double)
,	O
9	int
,	O
x2	double
)	O
+	O
x	double
*	O
lx	double
*	O
i1	double
+	O
1	int
)	O
/	O
x	double
;	O
result	*(struct(double,double))
->	O
err	double
=	O
(	O
1.6	int
+	O
fabs	(double)->(double)
(	O
lx	double
)	O
*	O
0.6	int
)	O
*	O
GSL_DBL_EPSILON	int
;	O
result	*(struct(double,double))
->	O
err	double
+=	O
2.0	int
*	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
;	O
return	O
GSL_SUCCESS	int
;	O
}	O
else	O
{	O
gsl_sf_result	struct(double,double)
K1_scaled	struct(double,double)
;	O
int	O
stat_K1	int
=	O
gsl_sf_bessel_K1_scaled_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
K1_scaled	struct(double,double)
)	O
;	O
int	O
stat_e	int
=	O
gsl_sf_exp_mult_err_e	(double,double,double,double,*(struct(double,double)))->(int)
(	O
-	O
x	double
,	O
0.0	int
,	O
K1_scaled	struct(double,double)
.	O
val	double
,	O
K1_scaled	struct(double,double)
.	O
err	double
,	O
result	*(struct(double,double))
)	O
;	O
result	*(struct(double,double))
->	O
err	double
=	O
fabs	(double)->(double)
(	O
result	*(struct(double,double))
->	O
val	double
)	O
*	O
(	O
GSL_DBL_EPSILON	int
*	O
fabs	(double)->(double)
(	O
x	double
)	O
+	O
K1_scaled	struct(double,double)
.	O
err	double
/	O
K1_scaled	struct(double,double)
.	O
val	double
)	O
;	O
return	O
GSL_ERROR_SELECT_2	O
(	O
stat_e	int
,	O
stat_K1	int
)	O
;	O
}	O
}	O
double	O
gsl_sf_bessel_K1_scaled	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_K1_scaled_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
double	O
gsl_sf_bessel_K1	(double)->(double)
(	O
const	O
double	O
x	double
)	O
{	O
EVAL_RESULT	O
(	O
gsl_sf_bessel_K1_e	(double,*(struct(double,double)))->(int)
(	O
x	double
,	O
&	O
result	*(struct(double,double))
)	O
)	O
;	O
}	O
