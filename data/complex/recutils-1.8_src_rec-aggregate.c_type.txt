struct	O
rec_aggregate_reg_elem_s	struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))
{	O
char	O
*	O
name	*(char)
;	O
rec_aggregate_t	*((*(struct),*(struct),*(char))->(*(char)))
function	*((*(struct),*(struct),*(char))->(*(char)))
;	O
}	O
;	O
struct	O
rec_aggregate_reg_s	struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long)
{	O
struct	O
rec_aggregate_reg_elem_s	struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
MAX_FUNCTIONS	int
]	O
;	O
size_t	long
num_functions	long
;	O
}	O
;	O
static	O
char	O
*	O
rec_aggregate_std_count	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
char	O
*	O
rec_aggregate_std_avg	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
double	O
rec_aggregate_std_avg_record	(*(struct),*(char))->(double)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
char	O
*	O
rec_aggregate_std_sum	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
double	O
rec_aggregate_std_sum_record	(*(struct),*(char))->(double)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
char	O
*	O
rec_aggregate_std_min	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
double	O
rec_aggregate_std_min_record	(*(struct),*(char))->(double)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
char	O
*	O
rec_aggregate_std_max	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
static	O
double	O
rec_aggregate_std_max_record	(*(struct),*(char))->(double)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
;	O
struct	O
rec_aggregate_descriptor_s	struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))
{	O
const	O
char	O
*	O
name	*(char)
;	O
rec_aggregate_t	*((*(struct),*(struct),*(char))->(*(char)))
func	*((*(struct),*(struct),*(char))->(*(char)))
;	O
}	O
;	O
static	O
struct	O
rec_aggregate_descriptor_s	struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))
std_aggregates	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
]	O
=	O
{	O
{	O
"count"	*(char)
,	O
&	O
rec_aggregate_std_count	(*(struct),*(struct),*(char))->(*(char))
}	O
,	O
{	O
"avg"	*(char)
,	O
&	O
rec_aggregate_std_avg	(*(struct),*(struct),*(char))->(*(char))
}	O
,	O
{	O
"sum"	*(char)
,	O
&	O
rec_aggregate_std_sum	(*(struct),*(struct),*(char))->(*(char))
}	O
,	O
{	O
"min"	*(char)
,	O
&	O
rec_aggregate_std_min	(*(struct),*(struct),*(char))->(*(char))
}	O
,	O
{	O
"max"	*(char)
,	O
&	O
rec_aggregate_std_max	(*(struct),*(struct),*(char))->(*(char))
}	O
}	O
;	O
rec_aggregate_reg_t	*(struct)
rec_aggregate_reg_new	()->(*(struct))
(	O
void	O
)	O
{	O
rec_aggregate_reg_t	*(struct)
new	*(struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long))
;	O
new	*(struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long))
=	O
malloc	(long)->(*(void))
(	O
sizeof	O
(	O
struct	O
rec_aggregate_reg_s	struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long)
)	O
)	O
;	O
if	O
(	O
new	*(struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long))
)	O
new	*(struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long))
->	O
num_functions	long
=	O
0	int
;	O
return	O
new	*(struct(array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char))))),long))
;	O
}	O
void	O
rec_aggregate_reg_destroy	(*(struct))->(void)
(	O
rec_aggregate_reg_t	*(struct)
func_reg	*(struct)
)	O
{	O
if	O
(	O
func_reg	*(struct)
)	O
{	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
func_reg	*(struct)
->	O
num_functions	long
;	O
i	long
++	O
)	O
free	(*(void))->(void)
(	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
name	*(char)
)	O
;	O
free	(*(void))->(void)
(	O
func_reg	*(struct)
)	O
;	O
}	O
}	O
bool	bool
rec_aggregate_reg_add	(*(struct),*(char),*((*(struct),*(struct),*(char))->(*(char))))->(bool)
(	O
rec_aggregate_reg_t	*(struct)
func_reg	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
,	O
rec_aggregate_t	*((*(struct),*(struct),*(char))->(*(char)))
function	*((*(struct),*(struct),*(char))->(*(char)))
)	O
{	O
bool	bool
function_replaced	bool
=	O
false	int
;	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
func_reg	*(struct)
->	O
num_functions	long
;	O
i	long
++	O
)	O
if	O
(	O
strcmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
function	*((*(struct),*(struct),*(char))->(*(char)))
=	O
function	*((*(struct),*(struct),*(char))->(*(char)))
;	O
function_replaced	bool
=	O
true	int
;	O
break	O
;	O
}	O
if	O
(	O
!	O
function_replaced	bool
)	O
{	O
if	O
(	O
func_reg	*(struct)
->	O
num_functions	long
==	O
MAX_FUNCTIONS	int
)	O
return	O
false	int
;	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
func_reg	*(struct)
->	O
num_functions	long
]	O
.	O
name	*(char)
=	O
strdup	(*(char))->(*(char))
(	O
name	*(char)
)	O
;	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
func_reg	*(struct)
->	O
num_functions	long
]	O
.	O
function	*((*(struct),*(struct),*(char))->(*(char)))
=	O
function	*((*(struct),*(struct),*(char))->(*(char)))
;	O
func_reg	*(struct)
->	O
num_functions	long
++	O
;	O
}	O
return	O
true	int
;	O
}	O
rec_aggregate_t	*((*(struct),*(struct),*(char))->(*(char)))
rec_aggregate_reg_get	(*(struct),*(char))->(*((*(struct),*(struct),*(char))->(*(char))))
(	O
rec_aggregate_reg_t	*(struct)
func_reg	*(struct)
,	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
size_t	long
i	long
=	O
0	int
;	O
rec_aggregate_t	*((*(struct),*(struct),*(char))->(*(char)))
res	*((*(struct),*(struct),*(char))->(*(char)))
=	O
NULL	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
func_reg	*(struct)
->	O
num_functions	long
;	O
i	long
++	O
)	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
name	*(char)
,	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
res	*((*(struct),*(struct),*(char))->(*(char)))
=	O
func_reg	*(struct)
->	O
functions	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
function	*((*(struct),*(struct),*(char))->(*(char)))
;	O
break	O
;	O
}	O
return	O
res	*((*(struct),*(struct),*(char))->(*(char)))
;	O
}	O
void	O
rec_aggregate_reg_add_standard	(*(struct))->(void)
(	O
rec_aggregate_reg_t	*(struct)
func_reg	*(struct)
)	O
{	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NUM_STD_AGGREGATES	int
;	O
i	long
++	O
)	O
rec_aggregate_reg_add	(*(struct),*(char),*((*(struct),*(struct),*(char))->(*(char))))->(bool)
(	O
func_reg	*(struct)
,	O
std_aggregates	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
name	*(char)
,	O
std_aggregates	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
func	*((*(struct),*(struct),*(char))->(*(char)))
)	O
;	O
}	O
bool	bool
rec_aggregate_std_p	(*(char))->(bool)
(	O
const	O
char	O
*	O
name	*(char)
)	O
{	O
bool	bool
found	bool
=	O
false	int
;	O
size_t	long
i	long
=	O
0	int
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
NUM_STD_AGGREGATES	int
;	O
i	long
++	O
)	O
if	O
(	O
strcasecmp	(*(char),*(char))->(int)
(	O
name	*(char)
,	O
std_aggregates	array(struct(*(char),*((*(struct),*(struct),*(char))->(*(char)))))
[	O
i	long
]	O
.	O
name	*(char)
)	O
==	O
0	int
)	O
{	O
found	bool
=	O
true	int
;	O
break	O
;	O
}	O
return	O
found	bool
;	O
}	O
static	O
char	O
*	O
rec_aggregate_std_count	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
{	O
char	O
*	O
result	*(*(char))
=	O
NULL	O
;	O
size_t	long
count	long
=	O
0	int
;	O
if	O
(	O
record	*(struct)
)	O
count	long
=	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
else	O
if	O
(	O
rset	*(struct)
)	O
{	O
rec_record_t	*(struct)
rec	*(struct)
=	O
NULL	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
&	O
rec	*(struct)
,	O
NULL	O
)	O
)	O
count	long
=	O
count	long
+	O
rec_record_get_num_fields_by_name	(*(struct),*(char))->(long)
(	O
rec	*(struct)
,	O
field_name	*(char)
)	O
;	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
}	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
result	*(*(char))
,	O
"%zu"	*(char)
,	O
count	long
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
static	O
char	O
*	O
rec_aggregate_std_avg	(*(struct),*(struct),*(char))->(*(char))
(	O
rec_rset_t	*(struct)
rset	*(struct)
,	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
{	O
char	O
*	O
result	*(*(char))
=	O
NULL	O
;	O
double	O
avg	double
=	O
0	int
;	O
if	O
(	O
record	*(struct)
)	O
avg	double
=	O
rec_aggregate_std_avg_record	(*(struct),*(char))->(double)
(	O
record	*(struct)
,	O
field_name	*(char)
)	O
;	O
else	O
if	O
(	O
rset	*(struct)
)	O
{	O
size_t	long
num_records	long
=	O
0	int
;	O
rec_record_t	*(struct)
rec	*(struct)
=	O
NULL	O
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_rset_mset	(*(struct))->(*(struct))
(	O
rset	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_RECORD	int
,	O
(	O
void	O
*	O
)	O
&	O
rec	*(struct)
,	O
NULL	O
)	O
)	O
{	O
avg	double
=	O
avg	double
+	O
rec_aggregate_std_avg_record	(*(struct),*(char))->(double)
(	O
rec	*(struct)
,	O
field_name	*(char)
)	O
;	O
num_records	long
++	O
;	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
if	O
(	O
num_records	long
!=	O
0	int
)	O
avg	double
=	O
avg	double
/	O
num_records	long
;	O
}	O
asprintf	(*(*(char)),*(char))->(int)
(	O
&	O
result	*(*(char))
,	O
"%g"	*(char)
,	O
avg	double
)	O
;	O
return	O
result	*(*(char))
;	O
}	O
static	O
double	O
rec_aggregate_std_avg_record	(*(struct),*(char))->(double)
(	O
rec_record_t	*(struct)
record	*(struct)
,	O
const	O
char	O
*	O
field_name	*(char)
)	O
{	O
double	O
avg	double
=	O
0	int
;	O
rec_field_t	*(struct)
field	*(struct)
;	O
size_t	long
num_fields	long
=	O
0	int
;	O
rec_mset_iterator_t	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
=	O
rec_mset_iterator	(*(struct))->(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long)))
(	O
rec_record_mset	(*(struct))->(*(struct))
(	O
record	*(struct)
)	O
)	O
;	O
while	O
(	O
rec_mset_iterator_next	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))),int,*(*(void)),*(*(struct)))->(bool)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
,	O
MSET_FIELD	int
,	O
(	O
void	O
*	O
)	O
&	O
field	*(struct)
,	O
NULL	O
)	O
)	O
{	O
double	O
field_value_double	double
=	O
0	int
;	O
const	O
char	O
*	O
field_value	*(char)
=	O
rec_field_value	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
;	O
if	O
(	O
rec_field_name_equal_p	(*(char),*(char))->(bool)
(	O
rec_field_name	(*(struct))->(*(char))
(	O
field	*(struct)
)	O
,	O
field_name	*(char)
)	O
&&	O
rec_atod	(*(char),*(double))->(bool)
(	O
field_value	*(char)
,	O
&	O
field_value_double	double
)	O
)	O
{	O
avg	double
=	O
avg	double
+	O
field_value_double	double
;	O
num_fields	long
++	O
;	O
}	O
}	O
rec_mset_iterator_free	(*(struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))))->(void)
(	O
&	O
iter	struct(*(struct),struct(*(void),*(void),long,*(void),*(void),long,long))
)	O
;	O
if	O
(	O
num_fields	long
!=	O
0	int
)	O
avg	double
=	O
avg	double
/	O
num_fields	long
;	O
return	O
avg	double
;	O
}	O
static	O
inline	O
double	O
op_sum	(double,double)->(double)
(	O
double	O
op1	double
,	O
double	O
op2	double
)	O
{	O
return	O
op1	double
+	O
op2	double
;	O
}	O
REC_AGGREGATE_ACCUM_FUNC	O
(	O
sum	O
,	O
op_sum	(double,double)->(double)
,	O
0	int
)	O
;	O
REC_AGGREGATE_ACCUM_FUNC	O
(	O
min	int
,	O
MIN	O
,	O
DBL_MAX	O
)	O
;	O
REC_AGGREGATE_ACCUM_FUNC	O
(	O
max	int
,	O
MAX	O
,	O
DBL_MIN	O
)	O
;	O
