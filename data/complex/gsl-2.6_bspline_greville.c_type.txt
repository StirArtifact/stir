double	O
gsl_bspline_greville_abscissa	(long,*(struct(long,long,long,long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(double)
(	O
size_t	long
i	long
,	O
gsl_bspline_workspace	struct(long,long,long,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
{	O
const	O
size_t	long
stride	long
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
knots	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
stride	long
;	O
size_t	long
km1	long
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
km1	long
;	O
double	O
*	O
data	*(long double)
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
knots	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
data	*(long double)
+	O
(	O
i	long
+	O
1	int
)	O
*	O
stride	long
;	O
if	O
(	O
km1	long
==	O
0	int
)	O
{	O
km1	long
=	O
2	int
;	O
data	*(long double)
-=	O
stride	long
;	O
}	O
return	O
gsl_stats_mean	(array(double),long,long)->(double)
(	O
data	*(long double)
,	O
stride	long
,	O
km1	long
)	O
;	O
}	O
int	O
gsl_bspline_knots_greville	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))),*(double))->(int)
(	O
const	O
gsl_vector	struct(long,long,*(double),*(struct(long,*(double))),int)
*	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
gsl_bspline_workspace	struct(long,long,long,long,long,*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,*(double),*(struct(long,*`)),int)))
*	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
,	O
double	O
*	O
abserr	*(double)
)	O
{	O
int	O
s	*(float)
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
k	long
<	O
2	int
)	O
GSL_ERROR	O
(	O
"w->k must be at least 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
else	O
if	O
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
<	O
2	int
)	O
GSL_ERROR	O
(	O
"abscissae->size must be at least 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
else	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nbreak	long
!=	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
-	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
k	long
+	O
2	int
)	O
GSL_ERROR	O
(	O
"w->nbreak must equal abscissae->size - w->k + 2"	*(char)
,	O
GSL_EINVAL	int
)	O
;	O
if	O
(	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nbreak	long
==	O
2	int
)	O
{	O
s	*(float)
=	O
gsl_bspline_knots_uniform	(double,double,*(struct(long,long,long,long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
-	O
1	int
)	O
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
}	O
else	O
{	O
double	O
*	O
storage	*(double)
;	O
gsl_matrix_view	struct(struct(long,long,long,*(double),*(struct(long,*(double))),int))
A	*(float)
;	O
gsl_vector_view	struct(struct(long,long,*(double),*(struct(long,*(double))),int))
tau	double
,	O
b	double
,	O
x	double
,	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
;	O
size_t	long
i	long
,	O
j	long
;	O
const	O
size_t	long
km2	long
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
k	long
-	O
2	int
;	O
const	O
size_t	long
M	int
=	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
-	O
2	int
;	O
const	O
size_t	long
N	int
=	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
nbreak	long
-	O
2	int
;	O
const	O
double	O
invkm1	double
=	O
1.0	int
/	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
->	O
km1	long
;	O
storage	*(double)
=	O
(	O
double	O
*	O
)	O
calloc	(long,long)->(*(void))
(	O
M	int
*	O
N	int
+	O
2	int
*	O
N	int
+	O
2	int
*	O
M	int
,	O
sizeof	O
(	O
double	O
)	O
)	O
;	O
if	O
(	O
storage	*(double)
==	O
0	int
)	O
GSL_ERROR	O
(	O
"failed to allocate working storage"	*(char)
,	O
GSL_ENOMEM	int
)	O
;	O
A	*(float)
=	O
gsl_matrix_view_array	(*(double),long,long)->(struct(struct(long,long,long,*(double),*(struct(long,*`)),int)))
(	O
storage	*(double)
,	O
M	int
,	O
N	int
)	O
;	O
tau	double
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
storage	*(double)
+	O
M	int
*	O
N	int
,	O
N	int
)	O
;	O
b	double
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
storage	*(double)
+	O
M	int
*	O
N	int
+	O
N	int
,	O
M	int
)	O
;	O
x	double
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
storage	*(double)
+	O
M	int
*	O
N	int
+	O
N	int
+	O
M	int
,	O
N	int
)	O
;	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
=	O
gsl_vector_view_array	(*(double),long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
storage	*(double)
+	O
M	int
*	O
N	int
+	O
N	int
+	O
M	int
+	O
N	int
,	O
M	int
)	O
;	O
for	O
(	O
j	long
=	O
0	int
;	O
j	long
<	O
N	int
;	O
++	O
j	long
)	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<=	O
km2	long
;	O
++	O
i	long
)	O
gsl_matrix_set	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),long,long,double)->(void)
(	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
+	O
j	long
,	O
j	long
,	O
invkm1	double
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
M	int
;	O
++	O
i	long
)	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
+	O
1	int
)	O
)	O
;	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
km2	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
const	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
i	long
)	O
;	O
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
-=	O
(	O
1	int
-	O
(	O
i	long
+	O
1	int
)	O
*	O
invkm1	double
)	O
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
;	O
}	O
for	O
(	O
i	long
=	O
0	int
;	O
i	long
<	O
km2	long
;	O
++	O
i	long
)	O
{	O
double	O
*	O
const	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
=	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
M	int
-	O
km2	long
+	O
i	long
)	O
;	O
*	O
v	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
-=	O
(	O
i	long
+	O
1	int
)	O
*	O
invkm1	double
*	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
-	O
1	int
)	O
;	O
}	O
s	*(float)
=	O
gsl_linalg_QR_decomp	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
tau	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
||	O
gsl_linalg_QR_lssolve	(*(struct(long,long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,*(double),*(struct(long,*`)),int)))->(int)
(	O
&	O
A	*(float)
.	O
matrix	struct(long,long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
tau	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
b	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
&	O
r	*(struct(long,long,long,*(double),*(struct(long,*(double))),int))
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
)	O
;	O
if	O
(	O
s	*(float)
)	O
{	O
free	(*(void))->(void)
(	O
storage	*(double)
)	O
;	O
return	O
s	*(float)
;	O
}	O
x	double
=	O
gsl_vector_view_array_with_stride	(*(double),long,long)->(struct(struct(long,long,*(double),*(struct(long,*`)),int)))
(	O
gsl_vector_ptr	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(*(double))
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
)	O
-	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
stride	long
,	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
stride	long
,	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
+	O
2	int
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
0	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
0	int
)	O
)	O
;	O
gsl_vector_set	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long,double)->(void)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
.	O
size	long
-	O
1	int
,	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
-	O
1	int
)	O
)	O
;	O
s	*(float)
=	O
gsl_bspline_knots	(*(struct(long,long,*(double),*(struct(long,*`)),int)),*(struct(long,long,long,long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(int)
(	O
&	O
x	double
.	O
vector	struct(long,long,*(long double),*(struct(long,*(long double))),int)
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
;	O
free	(*(void))->(void)
(	O
storage	*(double)
)	O
;	O
}	O
if	O
(	O
!	O
s	*(float)
&&	O
abserr	*(double)
)	O
{	O
size_t	long
i	long
;	O
*	O
abserr	*(double)
=	O
0	int
;	O
for	O
(	O
i	long
=	O
1	int
;	O
i	long
<	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
->	O
size	long
-	O
1	int
;	O
++	O
i	long
)	O
*	O
abserr	*(double)
+=	O
fabs	(double)->(double)
(	O
gsl_bspline_greville_abscissa	(long,*(struct(long,long,long,long,long,*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)),*(struct(long,long,long,*`,*`,int)))))->(double)
(	O
i	long
,	O
w	*(struct(long,long,*(long double),*(struct(long,*(long double))),int))
)	O
-	O
gsl_vector_get	(*(struct(long,long,*(double),*(struct(long,*`)),int)),long)->(double)
(	O
abscissae	*(struct(long,long,*(double),*(struct(long,*(double))),int))
,	O
i	long
)	O
)	O
;	O
}	O
return	O
s	*(float)
;	O
}	O
